<?xml version="1.0" encoding="utf-8"?>
<DirectedGraph Title="DG" xmlns="http://schemas.microsoft.com/vs/2009/dgml">
<Nodes>
<Node Id="EXTERNAL" Label="EXTERNAL" />
<Node Id="25014:[387..448).1" Label="=$ Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 672327" />
<Node Id="25014:[390..448).1" Label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 672328" />
<Node Id="28001:[588..156578).1" Label="param BindingTests(this) 672329" />
<Node Id="21002:[790..793).1" Label="'C' 672330" />
<Node Id="21002:[772..793).1" Label="DefaultTypeName = 'C' 672331" />
<Node Id="21002:[845..848).1" Label="'M' 672332" />
<Node Id="21002:[825..848).1" Label="DefaultMethodName = 'M' 672333" />
<Node Id="21002:[3243..25375).1" Label="@'using System;
using System.Text;

public delegate R Func1$in T1, out R$(T1 arg1);
public delegate R Func1$in T1, in T2, out R$(T1 arg1, T2 arg2);

public class List1$T$
{
    internal T[] data;
    internal int length;

    public List1(params T[] args)
    {
        this.data = (T[])args.Clone();
        this.length = data.Length;
    }

    public List1()
    {
        this.data = new T[0];
        this.length = 0;
    }

    public int Length { get { return length; } }

    //public T this[int index] { get { return this.data[index]; } }
    public T Get(int index) { return this.data[index]; }

    public virtual void Add(T t)
    {
        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
        data[length++] = t;
    }

    public override string ToString()
    {
        StringBuilder builder = new StringBuilder();
        builder.Append('[');
        for (int i = 0; i $ Length; i++)
        {
            if (i != 0) builder.Append(',').Append(' ');
            builder.Append(data[i]);
        }
        builder.Append(']');
        return builder.ToString();
    }

    public List1$E$ Cast$E$()
    {
        E[] data = new E[Length];
        for (int i = 0; i $ Length; i++)
            data[i] = (E)(object)this.data[i];
        return new List1$E$(data);
    }

    public List1$T$ Where(Func1$T, bool$ predicate)
    {
        List1$T$ result = new List1$T$();
        for (int i = 0; i $ Length; i++)
        {
            T datum = this.data[i];
            if (predicate(datum)) result.Add(datum);
        }
        return result;
    }

    public List1$U$ Select$U$(Func1$T, U$ selector)
    {
        int length = this.Length;
        U[] data = new U[length];
        for (int i = 0; i $ length; i++) data[i] = selector(this.data[i]);
        return new List1$U$(data);
    }

    public List1$V$ SelectMany$U, V$(Func1$T, List1$U$$ selector, Func1$T, U, V$ resultSelector)
    {
        List1$V$ result = new List1$V$();
        int length = this.Length;
        for (int i = 0; i $ length; i++)
        {
            T t = this.data[i];
            List1$U$ selected = selector(t);
            int ulength = selected.Length;
            for (int j = 0; j $ ulength; j++)
            {
                U u = selected.data[j];
                V v = resultSelector(t, u);
                result.Add(v);
            }
        }

        return result;
    }

    public List1$V$ Join$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, U, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                for (int k = 0; k $ row.u.Length; k++)
                {
                    U u = row.u.Get(k);
                    V v = resultSelector(t, u);
                    result.Add(v);
                }
            }
        }
        return result;
    }

    class Joined$K, T2, U$
    {
        public Joined(K k)
        {
            this.k = k;
            this.t = new List1$T2$();
            this.u = new List1$U$();
        }
        public readonly K k;
        public readonly List1$T2$ t;
        public readonly List1$U$ u;
    }

    public List1$V$ GroupJoin$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, List1$U$, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                V v = resultSelector(t, row.u);
                result.Add(v);
            }
        }
        return result;
    }

    public OrderedList1$T$ OrderBy$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenBy(Keyselector);
        return result;
    }

    public OrderedList1$T$ OrderByDescending$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenByDescending(Keyselector);
        return result;
    }

    public List1$Group1$K, T$$ GroupBy$K$(Func1$T, K$ Keyselector)
    {
        List1$Group1$K, T$$ result = new List1$Group1$K, T$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, T$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, T$(k));
            }
            Group1.Add(t);
        }
        return result;
    }

    public List1$Group1$K, E$$ GroupBy$K, E$(Func1$T, K$ Keyselector,
        Func1$T, E$ elementSelector)
    {
        List1$Group1$K, E$$ result = new List1$Group1$K, E$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, E$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, E$(k));
            }
            Group1.Add(elementSelector(t));
        }
        return result;
    }
}

public class OrderedList1$T$ : List1$T$
{
    private List1$Keys1$ Keys1;

    public override void Add(T t)
    {
        throw new NotSupportedException();
    }

    internal OrderedList1(List1$T$ list)
    {
        Keys1 = new List1$Keys1$();
        for (int i = 0; i $ list.Length; i++)
        {
            base.Add(list.Get(i));
            Keys1.Add(new Keys1());
        }
    }

    public OrderedList1$T$ ThenBy$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add((IComparable)o);
        }
        Sort();
        return this;
    }

    class ReverseOrder : IComparable
    {
        IComparable c;
        public ReverseOrder(IComparable c)
        {
            this.c = c;
        }
        public int CompareTo(object o)
        {
            ReverseOrder other = (ReverseOrder)o;
            return other.c.CompareTo(this.c);
        }
        public override string ToString()
        {
            return String.Empty + '-' + c;
        }
    }

    public OrderedList1$T$ ThenByDescending$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));
        }
        Sort();
        return this;
    }

    void Sort()
    {
        Array.Sort(this.Keys1.data, this.data, 0, Length);
    }
}

class Keys1 : List1$IComparable$, IComparable
{
    public int CompareTo(object o)
    {
        Keys1 other = (Keys1)o;
        for (int i = 0; i $ Length; i++)
        {
            int c = this.Get(i).CompareTo(other.Get(i));
            if (c != 0) return c;
        }
        return 0;
    }
}

public class Group1$K, T$ : List1$T$
{
    public Group1(K k, params T[] data)
        : base(data)
    {
        this.Key = k;
    }

    public K Key { get; private set; }

    public override string ToString()
    {
        return Key + String.Empty + ':' + base.ToString();
    }
}

//public delegate R Func2$in T1, out R$(T1 arg1);
//public delegate R Func2$in T1, in T2, out R$(T1 arg1, T2 arg2);
//
//public class List2$T$
//{
//    internal T[] data;
//    internal int length;
//
//    public List2(params T[] args)
//    {
//        this.data = (T[])args.Clone();
//        this.length = data.Length;
//    }
//
//    public List2()
//    {
//        this.data = new T[0];
//        this.length = 0;
//    }
//
//    public int Length { get { return length; } }
//
//    //public T this[int index] { get { return this.data[index]; } }
//    public T Get(int index) { return this.data[index]; }
//
//    public virtual void Add(T t)
//    {
//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
//        data[length++] = t;
//    }
//
//    public override string ToString()
//    {
//        StringBuilder builder = new StringBuilder();
//        builder.Append('[');
//        for (int i = 0; i $ Length; i++)
//        {
//            if (i != 0) builder.Append(',').Append(' ');
//            builder.Append(data[i]);
//        }
//        builder.Append(']');
//        return builder.ToString();
//    }
//
//}
//
//public class OrderedList2$T$ : List2$T$
//{
//    internal List2$Keys2$ Keys2;
//
//    public override void Add(T t)
//    {
//        throw new NotSupportedException();
//    }
//
//    internal OrderedList2(List2$T$ list)
//    {
//        Keys2 = new List2$Keys2$();
//        for (int i = 0; i $ list.Length; i++)
//        {
//            base.Add(list.Get(i));
//            Keys2.Add(new Keys2());
//        }
//    }
//
//    internal void Sort()
//    {
//        Array.Sort(this.Keys2.data, this.data, 0, Length);
//    }
//}
//
//class Keys2 : List2$IComparable$, IComparable
//{
//    public int CompareTo(object o)
//    {
//        Keys2 other = (Keys2)o;
//        for (int i = 0; i $ Length; i++)
//        {
//            int c = this.Get(i).CompareTo(other.Get(i));
//            if (c != 0) return c;
//        }
//        return 0;
//    }
//}
//
//public class Group2$K, T$ : List2$T$
//{
//    public Group2(K k, params T[] data)
//        : base(data)
//    {
//        this.Key = k;
//    }
//
//    public K Key { get; private set; }
//
//    public override string ToString()
//    {
//        return Key + String.Empty + ':' + base.ToString();
//    }
//}
//
//public static class Extensions2
//{
//
//    public static List2$E$ Cast$T, E$(this List2$T$ _this)
//    {
//        E[] data = new E[_this.Length];
//        for (int i = 0; i $ _this.Length; i++)
//            data[i] = (E)(object)_this.data[i];
//        return new List2$E$(data);
//    }
//
//    public static List2$T$ Where$T$(this List2$T$ _this, Func2$T, bool$ predicate)
//    {
//        List2$T$ result = new List2$T$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T datum = _this.data[i];
//            if (predicate(datum)) result.Add(datum);
//        }
//        return result;
//    }
//
//    public static List2$U$ Select$T,U$(this List2$T$ _this, Func2$T, U$ selector)
//    {
//        int length = _this.Length;
//        U[] data = new U[length];
//        for (int i = 0; i $ length; i++) data[i] = selector(_this.data[i]);
//        return new List2$U$(data);
//    }
//
//    public static List2$V$ SelectMany$T, U, V$(this List2$T$ _this, Func2$T, List2$U$$ selector, Func2$T, U, V$ resultSelector)
//    {
//        List2$V$ result = new List2$V$();
//        int length = _this.Length;
//        for (int i = 0; i $ length; i++)
//        {
//            T t = _this.data[i];
//            List2$U$ selected = selector(t);
//            int ulength = selected.Length;
//            for (int j = 0; j $ ulength; j++)
//            {
//                U u = selected.data[j];
//                V v = resultSelector(t, u);
//                result.Add(v);
//            }
//        }
//
//        return result;
//    }
//
//    public static List2$V$ Join$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, U, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                for (int k = 0; k $ row.u.Length; k++)
//                {
//                    U u = row.u.Get(k);
//                    V v = resultSelector(t, u);
//                    result.Add(v);
//                }
//            }
//        }
//        return result;
//    }
//
//    class Joined$K, T2, U$
//    {
//        public Joined(K k)
//        {
//            this.k = k;
//            this.t = new List2$T2$();
//            this.u = new List2$U$();
//        }
//        public readonly K k;
//        public readonly List2$T2$ t;
//        public readonly List2$U$ u;
//    }
//
//    public static List2$V$ GroupJoin$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, List2$U$, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                V v = resultSelector(t, row.u);
//                result.Add(v);
//            }
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenBy(Keyselector);
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderByDescending$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenByDescending(Keyselector);
//        return result;
//    }
//
//    public static List2$Group2$K, T$$ GroupBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        List2$Group2$K, T$$ result = new List2$Group2$K, T$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, T$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, T$(k));
//            }
//            Group2.Add(t);
//        }
//        return result;
//    }
//
//    public static List2$Group2$K, E$$ GroupBy$T, K, E$(this List2$T$ _this, Func2$T, K$ Keyselector,
//        Func2$T, E$ elementSelector)
//    {
//        List2$Group2$K, E$$ result = new List2$Group2$K, E$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, E$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, E$(k));
//            }
//            Group2.Add(elementSelector(t));
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ ThenBy$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add((IComparable)o);
//        }
//        _this.Sort();
//        return _this;
//    }
//
//    class ReverseOrder : IComparable
//    {
//        IComparable c;
//        public ReverseOrder(IComparable c)
//        {
//            this.c = c;
//        }
//        public int CompareTo(object o)
//        {
//            ReverseOrder other = (ReverseOrder)o;
//            return other.c.CompareTo(this.c);
//        }
//        public override string ToString()
//        {
//            return String.Empty + '-' + c;
//        }
//    }
//
//    public static OrderedList2$T$ ThenByDescending$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));
//        }
//        _this.Sort();
//        return _this;
//    }
//
//}
' 672334" />
<Node Id="21002:[3098..25375).1" Label="LINQ =
        #region the string LINQ defines a complete LINQ API called List1$T$ (for instance method) and List2$T$ (for extension methods)
 @'using System;
using System.Text;

public delegate R Func1$in T1, out R$(T1 arg1);
public delegate R Func1$in T1, in T2, out R$(T1 arg1, T2 arg2);

public class List1$T$
{
    internal T[] data;
    internal int length;

    public List1(params T[] args)
    {
        this.data = (T[])args.Clone();
        this.length = data.Length;
    }

    public List1()
    {
        this.data = new T[0];
        this.length = 0;
    }

    public int Length { get { return length; } }

    //public T this[int index] { get { return this.data[index]; } }
    public T Get(int index) { return this.data[index]; }

    public virtual void Add(T t)
    {
        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
        data[length++] = t;
    }

    public override string ToString()
    {
        StringBuilder builder = new StringBuilder();
        builder.Append('[');
        for (int i = 0; i $ Length; i++)
        {
            if (i != 0) builder.Append(',').Append(' ');
            builder.Append(data[i]);
        }
        builder.Append(']');
        return builder.ToString();
    }

    public List1$E$ Cast$E$()
    {
        E[] data = new E[Length];
        for (int i = 0; i $ Length; i++)
            data[i] = (E)(object)this.data[i];
        return new List1$E$(data);
    }

    public List1$T$ Where(Func1$T, bool$ predicate)
    {
        List1$T$ result = new List1$T$();
        for (int i = 0; i $ Length; i++)
        {
            T datum = this.data[i];
            if (predicate(datum)) result.Add(datum);
        }
        return result;
    }

    public List1$U$ Select$U$(Func1$T, U$ selector)
    {
        int length = this.Length;
        U[] data = new U[length];
        for (int i = 0; i $ length; i++) data[i] = selector(this.data[i]);
        return new List1$U$(data);
    }

    public List1$V$ SelectMany$U, V$(Func1$T, List1$U$$ selector, Func1$T, U, V$ resultSelector)
    {
        List1$V$ result = new List1$V$();
        int length = this.Length;
        for (int i = 0; i $ length; i++)
        {
            T t = this.data[i];
            List1$U$ selected = selector(t);
            int ulength = selected.Length;
            for (int j = 0; j $ ulength; j++)
            {
                U u = selected.data[j];
                V v = resultSelector(t, u);
                result.Add(v);
            }
        }

        return result;
    }

    public List1$V$ Join$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, U, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                for (int k = 0; k $ row.u.Length; k++)
                {
                    U u = row.u.Get(k);
                    V v = resultSelector(t, u);
                    result.Add(v);
                }
            }
        }
        return result;
    }

    class Joined$K, T2, U$
    {
        public Joined(K k)
        {
            this.k = k;
            this.t = new List1$T2$();
            this.u = new List1$U$();
        }
        public readonly K k;
        public readonly List1$T2$ t;
        public readonly List1$U$ u;
    }

    public List1$V$ GroupJoin$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, List1$U$, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                V v = resultSelector(t, row.u);
                result.Add(v);
            }
        }
        return result;
    }

    public OrderedList1$T$ OrderBy$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenBy(Keyselector);
        return result;
    }

    public OrderedList1$T$ OrderByDescending$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenByDescending(Keyselector);
        return result;
    }

    public List1$Group1$K, T$$ GroupBy$K$(Func1$T, K$ Keyselector)
    {
        List1$Group1$K, T$$ result = new List1$Group1$K, T$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, T$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, T$(k));
            }
            Group1.Add(t);
        }
        return result;
    }

    public List1$Group1$K, E$$ GroupBy$K, E$(Func1$T, K$ Keyselector,
        Func1$T, E$ elementSelector)
    {
        List1$Group1$K, E$$ result = new List1$Group1$K, E$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, E$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, E$(k));
            }
            Group1.Add(elementSelector(t));
        }
        return result;
    }
}

public class OrderedList1$T$ : List1$T$
{
    private List1$Keys1$ Keys1;

    public override void Add(T t)
    {
        throw new NotSupportedException();
    }

    internal OrderedList1(List1$T$ list)
    {
        Keys1 = new List1$Keys1$();
        for (int i = 0; i $ list.Length; i++)
        {
            base.Add(list.Get(i));
            Keys1.Add(new Keys1());
        }
    }

    public OrderedList1$T$ ThenBy$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add((IComparable)o);
        }
        Sort();
        return this;
    }

    class ReverseOrder : IComparable
    {
        IComparable c;
        public ReverseOrder(IComparable c)
        {
            this.c = c;
        }
        public int CompareTo(object o)
        {
            ReverseOrder other = (ReverseOrder)o;
            return other.c.CompareTo(this.c);
        }
        public override string ToString()
        {
            return String.Empty + '-' + c;
        }
    }

    public OrderedList1$T$ ThenByDescending$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));
        }
        Sort();
        return this;
    }

    void Sort()
    {
        Array.Sort(this.Keys1.data, this.data, 0, Length);
    }
}

class Keys1 : List1$IComparable$, IComparable
{
    public int CompareTo(object o)
    {
        Keys1 other = (Keys1)o;
        for (int i = 0; i $ Length; i++)
        {
            int c = this.Get(i).CompareTo(other.Get(i));
            if (c != 0) return c;
        }
        return 0;
    }
}

public class Group1$K, T$ : List1$T$
{
    public Group1(K k, params T[] data)
        : base(data)
    {
        this.Key = k;
    }

    public K Key { get; private set; }

    public override string ToString()
    {
        return Key + String.Empty + ':' + base.ToString();
    }
}

//public delegate R Func2$in T1, out R$(T1 arg1);
//public delegate R Func2$in T1, in T2, out R$(T1 arg1, T2 arg2);
//
//public class List2$T$
//{
//    internal T[] data;
//    internal int length;
//
//    public List2(params T[] args)
//    {
//        this.data = (T[])args.Clone();
//        this.length = data.Length;
//    }
//
//    public List2()
//    {
//        this.data = new T[0];
//        this.length = 0;
//    }
//
//    public int Length { get { return length; } }
//
//    //public T this[int index] { get { return this.data[index]; } }
//    public T Get(int index) { return this.data[index]; }
//
//    public virtual void Add(T t)
//    {
//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
//        data[length++] = t;
//    }
//
//    public override string ToString()
//    {
//        StringBuilder builder = new StringBuilder();
//        builder.Append('[');
//        for (int i = 0; i $ Length; i++)
//        {
//            if (i != 0) builder.Append(',').Append(' ');
//            builder.Append(data[i]);
//        }
//        builder.Append(']');
//        return builder.ToString();
//    }
//
//}
//
//public class OrderedList2$T$ : List2$T$
//{
//    internal List2$Keys2$ Keys2;
//
//    public override void Add(T t)
//    {
//        throw new NotSupportedException();
//    }
//
//    internal OrderedList2(List2$T$ list)
//    {
//        Keys2 = new List2$Keys2$();
//        for (int i = 0; i $ list.Length; i++)
//        {
//            base.Add(list.Get(i));
//            Keys2.Add(new Keys2());
//        }
//    }
//
//    internal void Sort()
//    {
//        Array.Sort(this.Keys2.data, this.data, 0, Length);
//    }
//}
//
//class Keys2 : List2$IComparable$, IComparable
//{
//    public int CompareTo(object o)
//    {
//        Keys2 other = (Keys2)o;
//        for (int i = 0; i $ Length; i++)
//        {
//            int c = this.Get(i).CompareTo(other.Get(i));
//            if (c != 0) return c;
//        }
//        return 0;
//    }
//}
//
//public class Group2$K, T$ : List2$T$
//{
//    public Group2(K k, params T[] data)
//        : base(data)
//    {
//        this.Key = k;
//    }
//
//    public K Key { get; private set; }
//
//    public override string ToString()
//    {
//        return Key + String.Empty + ':' + base.ToString();
//    }
//}
//
//public static class Extensions2
//{
//
//    public static List2$E$ Cast$T, E$(this List2$T$ _this)
//    {
//        E[] data = new E[_this.Length];
//        for (int i = 0; i $ _this.Length; i++)
//            data[i] = (E)(object)_this.data[i];
//        return new List2$E$(data);
//    }
//
//    public static List2$T$ Where$T$(this List2$T$ _this, Func2$T, bool$ predicate)
//    {
//        List2$T$ result = new List2$T$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T datum = _this.data[i];
//            if (predicate(datum)) result.Add(datum);
//        }
//        return result;
//    }
//
//    public static List2$U$ Select$T,U$(this List2$T$ _this, Func2$T, U$ selector)
//    {
//        int length = _this.Length;
//        U[] data = new U[length];
//        for (int i = 0; i $ length; i++) data[i] = selector(_this.data[i]);
//        return new List2$U$(data);
//    }
//
//    public static List2$V$ SelectMany$T, U, V$(this List2$T$ _this, Func2$T, List2$U$$ selector, Func2$T, U, V$ resultSelector)
//    {
//        List2$V$ result = new List2$V$();
//        int length = _this.Length;
//        for (int i = 0; i $ length; i++)
//        {
//            T t = _this.data[i];
//            List2$U$ selected = selector(t);
//            int ulength = selected.Length;
//            for (int j = 0; j $ ulength; j++)
//            {
//                U u = selected.data[j];
//                V v = resultSelector(t, u);
//                result.Add(v);
//            }
//        }
//
//        return result;
//    }
//
//    public static List2$V$ Join$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, U, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                for (int k = 0; k $ row.u.Length; k++)
//                {
//                    U u = row.u.Get(k);
//                    V v = resultSelector(t, u);
//                    result.Add(v);
//                }
//            }
//        }
//        return result;
//    }
//
//    class Joined$K, T2, U$
//    {
//        public Joined(K k)
//        {
//            this.k = k;
//            this.t = new List2$T2$();
//            this.u = new List2$U$();
//        }
//        public readonly K k;
//        public readonly List2$T2$ t;
//        public readonly List2$U$ u;
//    }
//
//    public static List2$V$ GroupJoin$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, List2$U$, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                V v = resultSelector(t, row.u);
//                result.Add(v);
//            }
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenBy(Keyselector);
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderByDescending$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenByDescending(Keyselector);
//        return result;
//    }
//
//    public static List2$Group2$K, T$$ GroupBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        List2$Group2$K, T$$ result = new List2$Group2$K, T$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, T$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, T$(k));
//            }
//            Group2.Add(t);
//        }
//        return result;
//    }
//
//    public static List2$Group2$K, E$$ GroupBy$T, K, E$(this List2$T$ _this, Func2$T, K$ Keyselector,
//        Func2$T, E$ elementSelector)
//    {
//        List2$Group2$K, E$$ result = new List2$Group2$K, E$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, E$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, E$(k));
//            }
//            Group2.Add(elementSelector(t));
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ ThenBy$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add((IComparable)o);
//        }
//        _this.Sort();
//        return _this;
//    }
//
//    class ReverseOrder : IComparable
//    {
//        IComparable c;
//        public ReverseOrder(IComparable c)
//        {
//            this.c = c;
//        }
//        public int CompareTo(object o)
//        {
//            ReverseOrder other = (ReverseOrder)o;
//            return other.c.CompareTo(this.c);
//        }
//        public override string ToString()
//        {
//            return String.Empty + '-' + c;
//        }
//    }
//
//    public static OrderedList2$T$ ThenByDescending$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));
//        }
//        _this.Sort();
//        return _this;
//    }
//
//}
' 672335" />
<Node Id="21002:[678..25421).1" Label="param CompilingTestBase(this) 672336" />
<Node Id="21003:[1338..2835).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents
                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type
                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it
                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents
                   AllowMultiple = false)]
    public class NullableAttribute : Attribute
    {
        public NullableAttribute(byte transformFlag) { }
        public NullableAttribute(byte[] transformFlags)
        {
        }
    }
}
' 672337" />
<Node Id="21003:[1308..2835).1" Label="NullableAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents
                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type
                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it
                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents
                   AllowMultiple = false)]
    public class NullableAttribute : Attribute
    {
        public NullableAttribute(byte transformFlag) { }
        public NullableAttribute(byte[] transformFlags)
        {
        }
    }
}
' 672338" />
<Node Id="21003:[2908..3440).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Delegate |
        AttributeTargets.Interface |
        AttributeTargets.Method |
        AttributeTargets.Struct,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NullableContextAttribute : Attribute
    {
        public readonly byte Flag;
        public NullableContextAttribute(byte flag)
        {
            Flag = flag;
        }
    }
}' 672339" />
<Node Id="21003:[2871..3440).1" Label="NullableContextAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Delegate |
        AttributeTargets.Interface |
        AttributeTargets.Method |
        AttributeTargets.Struct,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NullableContextAttribute : Attribute
    {
        public readonly byte Flag;
        public NullableContextAttribute(byte flag)
        {
            Flag = flag;
        }
    }
}' 672340" />
<Node Id="21003:[3516..3915).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]
    public sealed class NullablePublicOnlyAttribute : Attribute
    {
        public readonly bool IncludesInternals;
        public NullablePublicOnlyAttribute(bool includesInternals)
        {
            IncludesInternals = includesInternals;
        }
    }
}' 672341" />
<Node Id="21003:[3476..3915).1" Label="NullablePublicOnlyAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]
    public sealed class NullablePublicOnlyAttribute : Attribute
    {
        public readonly bool IncludesInternals;
        public NullablePublicOnlyAttribute(bool includesInternals)
        {
            IncludesInternals = includesInternals;
        }
    }
}' 672342" />
<Node Id="21003:[4223..4448).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class AllowNullAttribute : Attribute
    {
    }
}' 672343" />
<Node Id="21003:[4192..4448).1" Label="AllowNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class AllowNullAttribute : Attribute
    {
    }
}' 672344" />
<Node Id="21003:[4518..4746).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class DisallowNullAttribute : Attribute
    {
    }
}' 672345" />
<Node Id="21003:[4484..4746).1" Label="DisallowNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class DisallowNullAttribute : Attribute
    {
    }
}' 672346" />
<Node Id="21003:[4813..5071).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class MaybeNullAttribute : Attribute
    {
    }
}
' 672347" />
<Node Id="21003:[4782..5071).1" Label="MaybeNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class MaybeNullAttribute : Attribute
    {
    }
}
' 672348" />
<Node Id="21003:[5142..5397).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class MaybeNullWhenAttribute : Attribute
    {
        public MaybeNullWhenAttribute(bool when) { }
    }
}
' 672349" />
<Node Id="21003:[5107..5397).1" Label="MaybeNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class MaybeNullWhenAttribute : Attribute
    {
        public MaybeNullWhenAttribute(bool when) { }
    }
}
' 672350" />
<Node Id="21003:[5462..5718).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class NotNullAttribute : Attribute
    {
    }
}
' 672351" />
<Node Id="21003:[5433..5718).1" Label="NotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class NotNullAttribute : Attribute
    {
    }
}
' 672352" />
<Node Id="21003:[5787..6038).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class NotNullWhenAttribute : Attribute
    {
        public NotNullWhenAttribute(bool when) { }
    }
}
' 672353" />
<Node Id="21003:[5754..6038).1" Label="NotNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class NotNullWhenAttribute : Attribute
    {
        public NotNullWhenAttribute(bool when) { }
    }
}
' 672354" />
<Node Id="21003:[6109..6460).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullAttribute : Attribute
    {
        public MemberNotNullAttribute(params string[] members) { }
        public MemberNotNullAttribute(string member) { }
    }
}
' 672355" />
<Node Id="21003:[6074..6460).1" Label="MemberNotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullAttribute : Attribute
    {
        public MemberNotNullAttribute(params string[] members) { }
        public MemberNotNullAttribute(string member) { }
    }
}
' 672356" />
<Node Id="21003:[6535..6920).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullWhenAttribute : Attribute
    {
        public MemberNotNullWhenAttribute(bool when, params string[] members) { }
        public MemberNotNullWhenAttribute(bool when, string member) { }
    }
}
' 672357" />
<Node Id="21003:[6496..6920).1" Label="MemberNotNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullWhenAttribute : Attribute
    {
        public MemberNotNullWhenAttribute(bool when, params string[] members) { }
        public MemberNotNullWhenAttribute(bool when, string member) { }
    }
}
' 672358" />
<Node Id="21003:[6993..7250).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class DoesNotReturnIfAttribute : Attribute
    {
        public DoesNotReturnIfAttribute(bool condition) { }
    }
}
' 672359" />
<Node Id="21003:[6956..7250).1" Label="DoesNotReturnIfAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class DoesNotReturnIfAttribute : Attribute
    {
        public DoesNotReturnIfAttribute(bool condition) { }
    }
}
' 672360" />
<Node Id="21003:[7321..7557).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public class DoesNotReturnAttribute : Attribute
    {
        public DoesNotReturnAttribute() { }
    }
}
' 672361" />
<Node Id="21003:[7286..7557).1" Label="DoesNotReturnAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public class DoesNotReturnAttribute : Attribute
    {
        public DoesNotReturnAttribute() { }
    }
}
' 672362" />
<Node Id="21003:[7631..7980).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]
    public sealed class NotNullIfNotNullAttribute : Attribute
    {
        public NotNullIfNotNullAttribute(string parameterName) { }
    }
}
' 672363" />
<Node Id="21003:[7593..7980).1" Label="NotNullIfNotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]
    public sealed class NotNullIfNotNullAttribute : Attribute
    {
        public NotNullIfNotNullAttribute(string parameterName) { }
    }
}
' 672364" />
<Node Id="21003:[8047..8155).1" Label="@'
namespace System.Runtime.CompilerServices
{
    public static class IsExternalInit
    {
    }
}
' 672365" />
<Node Id="21003:[8016..8155).1" Label="IsExternalInitTypeDefinition = @'
namespace System.Runtime.CompilerServices
{
    public static class IsExternalInit
    {
    }
}
' 672366" />
<Node Id="21003:[8220..8359).1" Label="@'
namespace System
{
    public interface IAsyncDisposable
    {
       System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 672367" />
<Node Id="21003:[8191..8359).1" Label="IAsyncDisposableDefinition = @'
namespace System
{
    public interface IAsyncDisposable
    {
       System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 672368" />
<Node Id="21003:[8415..20279).1" Label="@'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}

namespace System.Runtime.CompilerServices
{
    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute
    {
        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)
        {
        }
    }
}

#nullable disable

namespace System.Threading.Tasks.Sources
{
    using System.Diagnostics;
    using System.Runtime.ExceptionServices;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Auto)]
    public struct ManualResetValueTaskSourceCore$TResult$
    {
        private Action$object$ _continuation;
        private object _continuationState;
        private ExecutionContext _executionContext;
        private object _capturedContext;
        private bool _completed;
        private TResult _result;
        private ExceptionDispatchInfo _error;
        private short _version;

        /// $summary$Gets or sets whether to force continuations to run asynchronously.$/summary$
        /// $remarks$Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.$/remarks$
        public bool RunContinuationsAsynchronously { get; set; }

        /// $summary$Resets to prepare for the next operation.$/summary$
        public void Reset()
        {
            // Reset/update state for the next use/await of this instance.
            _version++;
            _completed = false;
            _result = default;
            _error = null;
            _executionContext = null;
            _capturedContext = null;
            _continuation = null;
            _continuationState = null;
        }

        public void SetResult(TResult result)
        {
            _result = result;
            SignalCompletion();
        }

        public void SetException(Exception error)
        {
            _error = ExceptionDispatchInfo.Capture(error);
            SignalCompletion();
        }

        public short Version =$ _version;

        public ValueTaskSourceStatus GetStatus(short token)
        {
            ValidateToken(token);
            return
                !_completed ? ValueTaskSourceStatus.Pending :
                _error == null ? ValueTaskSourceStatus.Succeeded :
                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :
                ValueTaskSourceStatus.Faulted;
        }

        public TResult GetResult(short token)
        {
            ValidateToken(token);
            if (!_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }

            _error?.Throw();
            return _result;
        }

        public void OnCompleted(Action$object$ continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)
        {
            if (continuation == null)
            {
                throw new ArgumentNullException(nameof(continuation));
            }
            ValidateToken(token);

            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)
            {
                _executionContext = ExecutionContext.Capture();
            }

            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)
            {
                SynchronizationContext sc = SynchronizationContext.Current;
                if (sc != null && sc.GetType() != typeof(SynchronizationContext))
                {
                    _capturedContext = sc;
                }
                else
                {
                    TaskScheduler ts = TaskScheduler.Current;
                    if (ts != TaskScheduler.Default)
                    {
                        _capturedContext = ts;
                    }
                }
            }

            // We need to set the continuation state before we swap in the delegate, so that
            // if there's a race between this and SetResult/Exception and SetResult/Exception
            // sees the _continuation as non-null, it'll be able to invoke it with the state
            // stored here.  However, this also means that if this is used incorrectly (e.g.
            // awaited twice concurrently), _continuationState might get erroneously overwritten.
            // To minimize the chances of that, we check preemptively whether _continuation
            // is already set to something other than the completion sentinel.

            object oldContinuation = _continuation;
            if (oldContinuation == null)
            {
                _continuationState = state;
                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);
            }

            if (oldContinuation != null)
            {
                // Operation already completed, so we need to queue the supplied callback.
                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))
                {
                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
                }

                switch (_capturedContext)
                {
                    case null:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                        break;

                    case SynchronizationContext sc:
                        sc.Post(s =$
                        {
                            var tuple = (Tuple$Action$object$, object$)s;
                            tuple.Item1(tuple.Item2);
                        }, Tuple.Create(continuation, state));
                        break;

                    case TaskScheduler ts:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                        break;
                }
            }
        }

        private void ValidateToken(short token)
        {
            if (token != _version)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
        }

        private void SignalCompletion()
        {
            if (_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
            _completed = true;

            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)
            {
                if (_executionContext != null)
                {
                    ExecutionContext.Run(
                        _executionContext,
                        s =$ ((ManualResetValueTaskSourceCore$TResult$)s).InvokeContinuation(),
                        this);
                }
                else
                {
                    InvokeContinuation();
                }
            }
        }

        private void InvokeContinuation()
        {
            switch (_capturedContext)
            {
                case null:
                    if (RunContinuationsAsynchronously)
                    {
                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                    }
                    else
                    {
                        _continuation(_continuationState);
                    }
                    break;

                case SynchronizationContext sc:
                    sc.Post(s =$
                    {
                        var state = (Tuple$Action$object$, object$)s;
                        state.Item1(state.Item2);
                    }, Tuple.Create(_continuation, _continuationState));
                    break;

                case TaskScheduler ts:
                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                    break;
            }
        }
    }

    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication
    {
        internal static void ThrowInvalidOperationException() =$ throw new InvalidOperationException();

        internal static readonly Action$object$ s_sentinel = CompletionSentinel;
        private static void CompletionSentinel(object _) // named method to aid debugging
        {
            Debug.Fail(''The sentinel delegate should never be invoked.'');
            ThrowInvalidOperationException();
        }
    }
}

namespace System.Runtime.CompilerServices
{
    using System.Runtime.InteropServices;

    /// $summary$Represents a builder for asynchronous iterators.$/summary$
    [StructLayout(LayoutKind.Auto)]
    public struct AsyncIteratorMethodBuilder
    {
        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating
        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as
        // most of the logic is shared.  However, in the future this could be changed and
        // optimized.  For example, we do need to allocate an object (once) to flow state like
        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by
        // allocating a Task-derived object.  We could optimize this further by removing
        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations
        // related to it, so we'd need to replicate all of those optimizations (e.g. storing
        // that box object directly into a Task's continuation field).

        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly

        public static AsyncIteratorMethodBuilder Create() =$
            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void MoveNext$TStateMachine$(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.Start(ref stateMachine);

        public void AwaitOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : INotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);

        public void AwaitUnsafeOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : ICriticalNotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);

        /// $summary$Marks iteration as being completed, whether successfully or otherwise.$/summary$
        public void Complete() =$ _methodBuilder.SetResult();
    }
}
' 672369" />
<Node Id="21003:[8395..20279).1" Label="AsyncStreamsTypes = @'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}

namespace System.Runtime.CompilerServices
{
    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute
    {
        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)
        {
        }
    }
}

#nullable disable

namespace System.Threading.Tasks.Sources
{
    using System.Diagnostics;
    using System.Runtime.ExceptionServices;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Auto)]
    public struct ManualResetValueTaskSourceCore$TResult$
    {
        private Action$object$ _continuation;
        private object _continuationState;
        private ExecutionContext _executionContext;
        private object _capturedContext;
        private bool _completed;
        private TResult _result;
        private ExceptionDispatchInfo _error;
        private short _version;

        /// $summary$Gets or sets whether to force continuations to run asynchronously.$/summary$
        /// $remarks$Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.$/remarks$
        public bool RunContinuationsAsynchronously { get; set; }

        /// $summary$Resets to prepare for the next operation.$/summary$
        public void Reset()
        {
            // Reset/update state for the next use/await of this instance.
            _version++;
            _completed = false;
            _result = default;
            _error = null;
            _executionContext = null;
            _capturedContext = null;
            _continuation = null;
            _continuationState = null;
        }

        public void SetResult(TResult result)
        {
            _result = result;
            SignalCompletion();
        }

        public void SetException(Exception error)
        {
            _error = ExceptionDispatchInfo.Capture(error);
            SignalCompletion();
        }

        public short Version =$ _version;

        public ValueTaskSourceStatus GetStatus(short token)
        {
            ValidateToken(token);
            return
                !_completed ? ValueTaskSourceStatus.Pending :
                _error == null ? ValueTaskSourceStatus.Succeeded :
                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :
                ValueTaskSourceStatus.Faulted;
        }

        public TResult GetResult(short token)
        {
            ValidateToken(token);
            if (!_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }

            _error?.Throw();
            return _result;
        }

        public void OnCompleted(Action$object$ continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)
        {
            if (continuation == null)
            {
                throw new ArgumentNullException(nameof(continuation));
            }
            ValidateToken(token);

            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)
            {
                _executionContext = ExecutionContext.Capture();
            }

            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)
            {
                SynchronizationContext sc = SynchronizationContext.Current;
                if (sc != null && sc.GetType() != typeof(SynchronizationContext))
                {
                    _capturedContext = sc;
                }
                else
                {
                    TaskScheduler ts = TaskScheduler.Current;
                    if (ts != TaskScheduler.Default)
                    {
                        _capturedContext = ts;
                    }
                }
            }

            // We need to set the continuation state before we swap in the delegate, so that
            // if there's a race between this and SetResult/Exception and SetResult/Exception
            // sees the _continuation as non-null, it'll be able to invoke it with the state
            // stored here.  However, this also means that if this is used incorrectly (e.g.
            // awaited twice concurrently), _continuationState might get erroneously overwritten.
            // To minimize the chances of that, we check preemptively whether _continuation
            // is already set to something other than the completion sentinel.

            object oldContinuation = _continuation;
            if (oldContinuation == null)
            {
                _continuationState = state;
                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);
            }

            if (oldContinuation != null)
            {
                // Operation already completed, so we need to queue the supplied callback.
                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))
                {
                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
                }

                switch (_capturedContext)
                {
                    case null:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                        break;

                    case SynchronizationContext sc:
                        sc.Post(s =$
                        {
                            var tuple = (Tuple$Action$object$, object$)s;
                            tuple.Item1(tuple.Item2);
                        }, Tuple.Create(continuation, state));
                        break;

                    case TaskScheduler ts:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                        break;
                }
            }
        }

        private void ValidateToken(short token)
        {
            if (token != _version)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
        }

        private void SignalCompletion()
        {
            if (_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
            _completed = true;

            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)
            {
                if (_executionContext != null)
                {
                    ExecutionContext.Run(
                        _executionContext,
                        s =$ ((ManualResetValueTaskSourceCore$TResult$)s).InvokeContinuation(),
                        this);
                }
                else
                {
                    InvokeContinuation();
                }
            }
        }

        private void InvokeContinuation()
        {
            switch (_capturedContext)
            {
                case null:
                    if (RunContinuationsAsynchronously)
                    {
                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                    }
                    else
                    {
                        _continuation(_continuationState);
                    }
                    break;

                case SynchronizationContext sc:
                    sc.Post(s =$
                    {
                        var state = (Tuple$Action$object$, object$)s;
                        state.Item1(state.Item2);
                    }, Tuple.Create(_continuation, _continuationState));
                    break;

                case TaskScheduler ts:
                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                    break;
            }
        }
    }

    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication
    {
        internal static void ThrowInvalidOperationException() =$ throw new InvalidOperationException();

        internal static readonly Action$object$ s_sentinel = CompletionSentinel;
        private static void CompletionSentinel(object _) // named method to aid debugging
        {
            Debug.Fail(''The sentinel delegate should never be invoked.'');
            ThrowInvalidOperationException();
        }
    }
}

namespace System.Runtime.CompilerServices
{
    using System.Runtime.InteropServices;

    /// $summary$Represents a builder for asynchronous iterators.$/summary$
    [StructLayout(LayoutKind.Auto)]
    public struct AsyncIteratorMethodBuilder
    {
        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating
        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as
        // most of the logic is shared.  However, in the future this could be changed and
        // optimized.  For example, we do need to allocate an object (once) to flow state like
        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by
        // allocating a Task-derived object.  We could optimize this further by removing
        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations
        // related to it, so we'd need to replicate all of those optimizations (e.g. storing
        // that box object directly into a Task's continuation field).

        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly

        public static AsyncIteratorMethodBuilder Create() =$
            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void MoveNext$TStateMachine$(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.Start(ref stateMachine);

        public void AwaitOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : INotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);

        public void AwaitUnsafeOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : ICriticalNotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);

        /// $summary$Marks iteration as being completed, whether successfully or otherwise.$/summary$
        public void Complete() =$ _methodBuilder.SetResult();
    }
}
' 672370" />
<Node Id="21003:[20353..20617).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class EnumeratorCancellationAttribute : Attribute
    {
        public EnumeratorCancellationAttribute() { }
    }
}
' 672371" />
<Node Id="21003:[20315..20617).1" Label="EnumeratorCancellationAttributeType = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class EnumeratorCancellationAttribute : Attribute
    {
        public EnumeratorCancellationAttribute() { }
    }
}
' 672372" />
<Node Id="21003:[20689..21473).1" Label="@'using System.Collections.Generic;
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Event |
        AttributeTargets.Field |
        AttributeTargets.GenericParameter |
        AttributeTargets.Parameter |
        AttributeTargets.Property |
        AttributeTargets.ReturnValue,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NativeIntegerAttribute : Attribute
    {
        public NativeIntegerAttribute()
        {
            TransformFlags = new[] { true };
        }
        public NativeIntegerAttribute(bool[] flags)
        {
            TransformFlags = flags;
        }
        public readonly IList$bool$ TransformFlags;
    }
}' 672373" />
<Node Id="21003:[20653..21473).1" Label="NativeIntegerAttributeDefinition =
@'using System.Collections.Generic;
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Event |
        AttributeTargets.Field |
        AttributeTargets.GenericParameter |
        AttributeTargets.Parameter |
        AttributeTargets.Property |
        AttributeTargets.ReturnValue,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NativeIntegerAttribute : Attribute
    {
        public NativeIntegerAttribute()
        {
            TransformFlags = new[] { true };
        }
        public NativeIntegerAttribute(bool[] flags)
        {
            TransformFlags = flags;
        }
        public readonly IList$bool$ TransformFlags;
    }
}' 672374" />
<Node Id="25004:[2227..2317).1" Label="() =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 672375" />
<Node Id="25004:[2332..2368).1" Label="LazyThreadSafetyMode.PublicationOnly 672376" />
<Node Id="25004:[2183..2369).1" Label="new Lazy$MetadataReference[]$(
            () =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 672377" />
<Node Id="25004:[2155..2369).1" Label="s_lazyDefaultVbReferences = new Lazy$MetadataReference[]$(
            () =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 672378" />
<Node Id="25004:[2602..2696).1" Label="() =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 672379" />
<Node Id="25004:[2711..2747).1" Label="LazyThreadSafetyMode.PublicationOnly 672380" />
<Node Id="25004:[2558..2748).1" Label="new Lazy$MetadataReference[]$(
            () =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 672381" />
<Node Id="25004:[2531..2748).1" Label="s_lazyLatestVbReferences = new Lazy$MetadataReference[]$(
            () =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 672382" />
<Node Id="25004:[2914..2947).1" Label="RuntimeUtilities.IsCoreClrRuntime 672383" />
<Node Id="25004:[3094..3171).1" Label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 672384" />
<Node Id="25004:[3077..3172).1" Label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 672385" />
<Node Id="25004:[2894..3172).1" Label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime
            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')
            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 672386" />
<Node Id="25004:[3490..5167).1" Label="() =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            } 672387" />
<Node Id="25004:[5182..5218).1" Label="LazyThreadSafetyMode.PublicationOnly 672388" />
<Node Id="25004:[3446..5219).1" Label="new Lazy$MetadataReference[]$(
            () =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            },
            LazyThreadSafetyMode.PublicationOnly) 672389" />
<Node Id="25004:[3432..5219).1" Label="s_winRtRefs = new Lazy$MetadataReference[]$(
            () =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            },
            LazyThreadSafetyMode.PublicationOnly) 672390" />
<Node Id="25004:[5576..5645).1" Label="() =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 672391" />
<Node Id="25004:[5660..5696).1" Label="LazyThreadSafetyMode.PublicationOnly 672392" />
<Node Id="25004:[5532..5697).1" Label="new Lazy$MetadataReference[]$(
            () =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },
            LazyThreadSafetyMode.PublicationOnly) 672393" />
<Node Id="25004:[5508..5697).1" Label="s_portableRefsMinimal = new Lazy$MetadataReference[]$(
            () =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },
            LazyThreadSafetyMode.PublicationOnly) 672394" />
<Node Id="25004:[6321..6439).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 672395" />
<Node Id="25004:[6458..6494).1" Label="LazyThreadSafetyMode.PublicationOnly 672396" />
<Node Id="25004:[6275..6495).1" Label="new Lazy$MetadataReference$(
                () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),
                LazyThreadSafetyMode.PublicationOnly) 672397" />
<Node Id="25004:[6244..6495).1" Label="s_systemCoreRef =
            new Lazy$MetadataReference$(
                () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),
                LazyThreadSafetyMode.PublicationOnly) 672398" />
<Node Id="25004:[6714..6838).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 672399" />
<Node Id="25004:[6853..6889).1" Label="LazyThreadSafetyMode.PublicationOnly 672400" />
<Node Id="25004:[6672..6890).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672401" />
<Node Id="25004:[6637..6890).1" Label="s_systemCoreRef_v4_0_30319_17929 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672402" />
<Node Id="25004:[7130..7249).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 672403" />
<Node Id="25004:[7264..7300).1" Label="LazyThreadSafetyMode.PublicationOnly 672404" />
<Node Id="25004:[7088..7301).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672405" />
<Node Id="25004:[7066..7301).1" Label="s_systemCoreRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672406" />
<Node Id="25004:[7532..7667).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 672407" />
<Node Id="25004:[7682..7718).1" Label="LazyThreadSafetyMode.PublicationOnly 672408" />
<Node Id="25004:[7490..7719).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672409" />
<Node Id="25004:[7464..7719).1" Label="s_systemWindowsFormsRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672410" />
<Node Id="25004:[7940..8064).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 672411" />
<Node Id="25004:[8079..8115).1" Label="LazyThreadSafetyMode.PublicationOnly 672412" />
<Node Id="25004:[7898..8116).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672413" />
<Node Id="25004:[7877..8116).1" Label="s_systemDrawingRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672414" />
<Node Id="25004:[8324..8442).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 672415" />
<Node Id="25004:[8457..8493).1" Label="LazyThreadSafetyMode.PublicationOnly 672416" />
<Node Id="25004:[8282..8494).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672417" />
<Node Id="25004:[8264..8494).1" Label="s_systemDataRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672418" />
<Node Id="25004:[8694..8807).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 672419" />
<Node Id="25004:[8822..8858).1" Label="LazyThreadSafetyMode.PublicationOnly 672420" />
<Node Id="25004:[8652..8859).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672421" />
<Node Id="25004:[8636..8859).1" Label="s_mscorlibRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672422" />
<Node Id="25004:[9063..9214).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 672423" />
<Node Id="25004:[9229..9265).1" Label="LazyThreadSafetyMode.PublicationOnly 672424" />
<Node Id="25004:[9021..9266).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672425" />
<Node Id="25004:[8997..9266).1" Label="s_mscorlibRefPortable = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672426" />
<Node Id="25004:[9478..10389).1" Label="() =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            } 672427" />
<Node Id="25004:[10404..10440).1" Label="LazyThreadSafetyMode.PublicationOnly 672428" />
<Node Id="25004:[9436..10441).1" Label="new Lazy$MetadataReference$(
            () =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            },
            LazyThreadSafetyMode.PublicationOnly) 672429" />
<Node Id="25004:[9420..10441).1" Label="s_aacorlibRef = new Lazy$MetadataReference$(
            () =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            },
            LazyThreadSafetyMode.PublicationOnly) 672430" />
<Node Id="25004:[10811..10967).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri') 672431" />
<Node Id="25004:[10982..11018).1" Label="LazyThreadSafetyMode.PublicationOnly 672432" />
<Node Id="25004:[10769..11019).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri'),
            LazyThreadSafetyMode.PublicationOnly) 672433" />
<Node Id="25004:[10749..11019).1" Label="s_mscorlibRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri'),
            LazyThreadSafetyMode.PublicationOnly) 672434" />
<Node Id="25004:[11415..11589).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 672435" />
<Node Id="25004:[11604..11640).1" Label="LazyThreadSafetyMode.PublicationOnly 672436" />
<Node Id="25004:[11373..11641).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672437" />
<Node Id="25004:[11345..11641).1" Label="s_mscorlibRef_silverlight = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672438" />
<Node Id="25004:[12432..12560).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 672439" />
<Node Id="25004:[12575..12611).1" Label="LazyThreadSafetyMode.PublicationOnly 672440" />
<Node Id="25004:[12390..12612).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672441" />
<Node Id="25004:[12369..12612).1" Label="s_desktopCSharpRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672442" />
<Node Id="25004:[12815..12944).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 672443" />
<Node Id="25004:[12959..12995).1" Label="LazyThreadSafetyMode.PublicationOnly 672444" />
<Node Id="25004:[12773..12996).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672445" />
<Node Id="25004:[12760..12996).1" Label="s_std20Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672446" />
<Node Id="25004:[13204..13343).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 672447" />
<Node Id="25004:[13358..13394).1" Label="LazyThreadSafetyMode.PublicationOnly 672448" />
<Node Id="25004:[13162..13395).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672449" />
<Node Id="25004:[13138..13395).1" Label="s_46NetStandardFacade = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672450" />
<Node Id="25004:[13621..13796).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 672451" />
<Node Id="25004:[13811..13847).1" Label="LazyThreadSafetyMode.PublicationOnly 672452" />
<Node Id="25004:[13579..13848).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),
            LazyThreadSafetyMode.PublicationOnly) 672453" />
<Node Id="25004:[13551..13848).1" Label="s_systemDynamicRuntimeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),
            LazyThreadSafetyMode.PublicationOnly) 672454" />
<Node Id="25004:[14066..14175).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 672455" />
<Node Id="25004:[14190..14226).1" Label="LazyThreadSafetyMode.PublicationOnly 672456" />
<Node Id="25004:[14024..14227).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672457" />
<Node Id="25004:[14010..14227).1" Label="s_systemRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672458" />
<Node Id="25004:[14421..14531).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 672459" />
<Node Id="25004:[14546..14582).1" Label="LazyThreadSafetyMode.PublicationOnly 672460" />
<Node Id="25004:[14379..14583).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672461" />
<Node Id="25004:[14361..14583).1" Label="s_systemRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672462" />
<Node Id="25004:[14798..14913).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 672463" />
<Node Id="25004:[14928..14964).1" Label="LazyThreadSafetyMode.PublicationOnly 672464" />
<Node Id="25004:[14756..14965).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672465" />
<Node Id="25004:[14725..14965).1" Label="s_systemRef_v4_0_30319_17929 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672466" />
<Node Id="25004:[15193..15301).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 672467" />
<Node Id="25004:[15316..15352).1" Label="LazyThreadSafetyMode.PublicationOnly 672468" />
<Node Id="25004:[15151..15353).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672469" />
<Node Id="25004:[15133..15353).1" Label="s_systemRef_v20 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672470" />
<Node Id="25004:[15554..15670).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 672471" />
<Node Id="25004:[15685..15721).1" Label="LazyThreadSafetyMode.PublicationOnly 672472" />
<Node Id="25004:[15512..15722).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672473" />
<Node Id="25004:[15495..15722).1" Label="s_systemXmlRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672474" />
<Node Id="25004:[15925..16050).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 672475" />
<Node Id="25004:[16065..16101).1" Label="LazyThreadSafetyMode.PublicationOnly 672476" />
<Node Id="25004:[15883..16102).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672477" />
<Node Id="25004:[15862..16102).1" Label="s_systemXmlLinqRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672478" />
<Node Id="25004:[16314..16416).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 672479" />
<Node Id="25004:[16431..16467).1" Label="LazyThreadSafetyMode.PublicationOnly 672480" />
<Node Id="25004:[16272..16468).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672481" />
<Node Id="25004:[16250..16468).1" Label="s_mscorlibFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672482" />
<Node Id="25004:[16687..16800).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 672483" />
<Node Id="25004:[16815..16851).1" Label="LazyThreadSafetyMode.PublicationOnly 672484" />
<Node Id="25004:[16645..16852).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672485" />
<Node Id="25004:[16618..16852).1" Label="s_systemRuntimeFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672486" />
<Node Id="25004:[17083..17200).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 672487" />
<Node Id="25004:[17215..17251).1" Label="LazyThreadSafetyMode.PublicationOnly 672488" />
<Node Id="25004:[17041..17252).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672489" />
<Node Id="25004:[17012..17252).1" Label="s_systemThreadingFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672490" />
<Node Id="25004:[17497..17625).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 672491" />
<Node Id="25004:[17640..17676).1" Label="LazyThreadSafetyMode.PublicationOnly 672492" />
<Node Id="25004:[17455..17677).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672493" />
<Node Id="25004:[17421..17677).1" Label="s_systemThreadingTasksFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672494" />
<Node Id="25004:[17911..18059).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 672495" />
<Node Id="25004:[18074..18110).1" Label="LazyThreadSafetyMode.PublicationOnly 672496" />
<Node Id="25004:[17869..18111).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672497" />
<Node Id="25004:[17850..18111).1" Label="s_mscorlibPP7Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672498" />
<Node Id="25004:[18321..18481).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 672499" />
<Node Id="25004:[18496..18532).1" Label="LazyThreadSafetyMode.PublicationOnly 672500" />
<Node Id="25004:[18279..18533).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672501" />
<Node Id="25004:[18255..18533).1" Label="s_systemRuntimePP7Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672502" />
<Node Id="25004:[18754..18880).1" Label="() =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 672503" />
<Node Id="25004:[18895..18931).1" Label="LazyThreadSafetyMode.PublicationOnly 672504" />
<Node Id="25004:[18712..18932).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672505" />
<Node Id="25004:[18687..18932).1" Label="s_FSharpTestLibraryRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),
            LazyThreadSafetyMode.PublicationOnly) 672506" />
<Node Id="25004:[19130..19147).1" Label="@'R:\Invalid.dll' 672507" />
<Node Id="25004:[19120..19147).1" Label="fullPath: @'R:\Invalid.dll' 672508" />
<Node Id="25004:[19094..19148).1" Label="new TestMetadataReference(fullPath: @'R:\Invalid.dll') 672509" />
<Node Id="25004:[19094..19148).5" Label="new TestMetadataReference(fullPath: @'R:\Invalid.dll') 672510" />
<Node Id="25004:[19081..19148).1" Label="InvalidRef = new TestMetadataReference(fullPath: @'R:\Invalid.dll') 672511" />
<Node Id="21003:[51329..51357).1" Label="MscorlibRef_v4_0_30316_17626 672512" />
<Node Id="25004:[10673..10688).1" Label="Net451.mscorlib 672513" />
<Node Id="21003:[51307..51358).1" Label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 672514" />
<Node Id="21003:[51292..51358).1" Label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 672515" />
<Node Id="21003:[56538..56550).1" Label="'/*$bind$*/' 672516" />
<Node Id="21003:[56524..56550).1" Label="StartString = '/*$bind$*/' 672517" />
<Node Id="21003:[56596..56609).1" Label="'/*$/bind$*/' 672518" />
<Node Id="21003:[56584..56609).1" Label="EndString = '/*$/bind$*/' 672519" />
<Node Id="21003:[92394..99056).1" Label="@'
namespace System
    {
        public readonly ref struct Span$T$
        {
            private readonly T[] arr;

            public ref T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 1;
            public int Length { get; }

            unsafe public Span(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public Span(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly Span$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(Span$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator Span$T$(T[] array) =$ new Span$T$(array);
        }

        public readonly ref struct ReadOnlySpan$T$
        {
            private readonly T[] arr;

            public ref readonly T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 2;
            public int Length { get; }

            unsafe public ReadOnlySpan(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public ReadOnlySpan(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly ReadOnlySpan$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(ReadOnlySpan$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref readonly T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator ReadOnlySpan$T$(T[] array) =$ array == null ? default : new ReadOnlySpan$T$(array);

            public static implicit operator ReadOnlySpan$T$(string stringValue) =$ string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan$T$((T[])(object)stringValue.ToCharArray());
        }

        public readonly ref struct SpanLike$T$
        {
            public readonly Span$T$ field;
        }

        public enum Color: sbyte
        {
            Red,
            Green,
            Blue
        }

        public static unsafe class Helpers
        {
            public static T[] ToArray$T$(void* ptr, int count)
            {
                if (ptr == null)
                {
                    return null;
                }

                if (typeof(T) == typeof(int))
                {
                    var arr = new int[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((int*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(byte))
                {
                    var arr = new byte[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((byte*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(char))
                {
                    var arr = new char[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((char*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(Color))
                {
                    var arr = new Color[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((Color*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                throw new Exception(''add a case for: '' + typeof(T));
            }
        }
    }' 672520" />
<Node Id="21003:[92381..99056).1" Label="SpanSource = @'
namespace System
    {
        public readonly ref struct Span$T$
        {
            private readonly T[] arr;

            public ref T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 1;
            public int Length { get; }

            unsafe public Span(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public Span(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly Span$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(Span$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator Span$T$(T[] array) =$ new Span$T$(array);
        }

        public readonly ref struct ReadOnlySpan$T$
        {
            private readonly T[] arr;

            public ref readonly T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 2;
            public int Length { get; }

            unsafe public ReadOnlySpan(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public ReadOnlySpan(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly ReadOnlySpan$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(ReadOnlySpan$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref readonly T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator ReadOnlySpan$T$(T[] array) =$ array == null ? default : new ReadOnlySpan$T$(array);

            public static implicit operator ReadOnlySpan$T$(string stringValue) =$ string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan$T$((T[])(object)stringValue.ToCharArray());
        }

        public readonly ref struct SpanLike$T$
        {
            public readonly Span$T$ field;
        }

        public enum Color: sbyte
        {
            Red,
            Green,
            Blue
        }

        public static unsafe class Helpers
        {
            public static T[] ToArray$T$(void* ptr, int count)
            {
                if (ptr == null)
                {
                    return null;
                }

                if (typeof(T) == typeof(int))
                {
                    var arr = new int[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((int*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(byte))
                {
                    var arr = new byte[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((byte*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(char))
                {
                    var arr = new char[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((char*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(Color))
                {
                    var arr = new Color[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((Color*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                throw new Exception(''add a case for: '' + typeof(T));
            }
        }
    }' 672521" />
<Node Id="21003:[101764..102290).1" Label="@'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 672522" />
<Node Id="21003:[101743..102290).1" Label="s_IAsyncEnumerable = @'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 672523" />
<Node Id="21003:[1215..102298).1" Label="param CSharpTestBase(this) 672524" />
<Node Id="25015:[917..26825).1" Label="param CommonTestBase(this) 672525" />
<Node Id="25004:[926..968).1" Label="param TestBase(this) 672526" />
<Node Id="25004:[908..913).1" Label="_temp 672527" />
<Node Id="25014:[387..448).372" Label="=$ Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 672528" />
<Node Id="28001:[21417..21907).1" Label="param DelegatesFromOverloads(this) 672529" />
<Node Id="28001:[21494..21836).1" Label="var source =
@'using System;
class C
{
    static void A(Action$object$ a) { }
    static void M(C c)
    {
        A(C.F);
        A(c.G);
        Action$object$ a;
        a = C.F;
        a = c.G;
    }
    static void F() { }
    static void F(object o) { }
    void G(object o) { }
    void G(object x, object y) { }
}'; 672530" />
<Node Id="28001:[21850..21896).1" Label="CreateCompilation(source).VerifyDiagnostics(); 672531" />
<Node Id="28001:[21868..21874).1" Label="source 672532" />
<Node Id="21004:[2251..2264).1" Label="param operator(string source) 672533" />
<Node Id="21004:[2290..2296).1" Label="source 672534" />
<Node Id="21004:[2269..2297).1" Label="new CSharpTestSource(source) 672535" />
<Node Id="21004:[839..851).1" Label="param CSharpTestSource(object value) 672536" />
<Node Id="21004:[814..902).1" Label="param CSharpTestSource(this) 672537" />
<Node Id="21004:[877..882).1" Label="Value 672538" />
<Node Id="28001:[21850..21896).2" Label="CreateCompilation(source).VerifyDiagnostics(); 672539" />
<Node Id="28001:[21850..21896).4" Label="CreateCompilation(source).VerifyDiagnostics(); 672540" />
<Node Id="28001:[21850..21875).1" Label="CreateCompilation(source) 672541" />
<Node Id="21003:[44736..44759).1" Label="param CreateCompilation(CSharpTestSource source) 672542" />
<Node Id="21003:[44774..44822).1" Label="param CreateCompilation(IEnumerable$MetadataReference$ references = null) 672543" />
<Node Id="21003:[44837..44876).1" Label="param CreateCompilation(CSharpCompilationOptions options = null) 672544" />
<Node Id="21003:[44891..44929).1" Label="param CreateCompilation(CSharpParseOptions parseOptions = null) 672545" />
<Node Id="21003:[44944..45002).1" Label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 672546" />
<Node Id="21003:[45017..45041).1" Label="param CreateCompilation(string assemblyName = '') 672547" />
<Node Id="21003:[45056..45082).1" Label="param CreateCompilation(string sourceFileName = '') 672548" />
<Node Id="21003:[45097..45128).1" Label="param CreateCompilation(bool skipUsesIsNullable = false) 672549" />
<Node Id="21003:[45156..45162).1" Label="source 672550" />
<Node Id="21003:[45198..45213).1" Label="targetFramework 672551" />
<Node Id="21003:[45215..45225).1" Label="references 672552" />
<Node Id="21003:[45164..45226).1" Label="TargetFrameworkUtil.GetReferences(targetFramework, references) 672553" />
<Node Id="25005:[9600..9618).1" Label="param GetReferences(TargetFramework tf) 672554" />
<Node Id="25005:[9620..9671).1" Label="param GetReferences(IEnumerable$MetadataReference$ additionalReferences) 672555" />
<Node Id="25005:[9697..9732).1" Label="var references = GetReferences(tf); 672556" />
<Node Id="25005:[9714..9731).1" Label="GetReferences(tf) 672557" />
<Node Id="25005:[7569..7600).1" Label="param GetReferences(TargetFramework targetFramework) 672558" />
<Node Id="25005:[7605..9525).1" Label="targetFramework switch
        {
            TargetFramework.Empty =$ ImmutableArray$MetadataReference$.Empty,
            TargetFramework.Mscorlib40 =$ Mscorlib40References,
            TargetFramework.Mscorlib40Extended =$ Mscorlib40ExtendedReferences,
            TargetFramework.Mscorlib40AndSystemCore =$ Mscorlib40andSystemCoreReferences,
            TargetFramework.Mscorlib40AndVBRuntime =$ Mscorlib40andVBRuntimeReferences,
            TargetFramework.Mscorlib45 =$ Mscorlib45References,
            TargetFramework.Mscorlib45Extended =$ Mscorlib45ExtendedReferences,
            TargetFramework.Mscorlib45AndCSharp =$ Mscorlib45AndCSharpReferences,
            TargetFramework.Mscorlib45AndVBRuntime =$ Mscorlib45AndVBRuntimeReferences,
            TargetFramework.Mscorlib46 =$ Mscorlib46References,
            TargetFramework.Mscorlib46Extended =$ Mscorlib46ExtendedReferences,
            TargetFramework.Mscorlib461 =$ Mscorlib46References,
            TargetFramework.Mscorlib461Extended =$ Mscorlib461ExtendedReferences,
            TargetFramework.NetStandard20 =$ NetStandard20References,
            TargetFramework.NetCoreApp =$ NetCoreAppReferences,
            TargetFramework.WinRT =$ WinRTReferences,
            TargetFramework.Standard =$ StandardReferences,
            TargetFramework.StandardLatest =$ StandardLatestReferences,
            TargetFramework.StandardAndCSharp =$ StandardAndCSharpReferences,
            TargetFramework.StandardAndVBRuntime =$ StandardAndVBRuntimeReferences,
            TargetFramework.StandardCompat =$ StandardCompatReferences,
            TargetFramework.DefaultVb =$ DefaultVbReferences,
            TargetFramework.Minimal =$ MinimalReferences,
            TargetFramework.MinimalAsync =$ MinimalAsyncReferences,
            _ =$ throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),
        } 672559" />
<Node Id="25005:[8889..8907).1" Label="StandardReferences 672560" />
<Node Id="25005:[6208..6241).1" Label="RuntimeUtilities.IsCoreClrRuntime 672561" />
<Node Id="25005:[6270..6298).1" Label="Mscorlib46ExtendedReferences 672562" />
<Node Id="25005:[4543..4693).1" Label="ImmutableArray.Create$MetadataReference$(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 672563" />
<Node Id="25005:[4648..4670).1" Label="TestBase.ValueTupleRef 672564" />
<Node Id="25004:[12011..12051).1" Label="TestReferences.NetFx.ValueTuple.tuplelib 672565" />
<Node Id="25005:[4543..4693).7" Label="ImmutableArray.Create$MetadataReference$(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 672566" />
<Node Id="25005:[6208..6298).1" Label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 672567" />
<Node Id="25005:[9746..9845).1" Label="if (additionalReferences == null)
            {
                return references;
            } 672568" />
<Node Id="25005:[9746..9845).2" Label="if (additionalReferences == null)
            {
                return references;
            } 672569" />
<Node Id="25005:[9812..9830).1" Label="return references; 672570" />
<Node Id="21003:[45228..45235).1" Label="options 672571" />
<Node Id="21003:[45237..45249).1" Label="parseOptions 672572" />
<Node Id="21003:[45251..45263).1" Label="assemblyName 672573" />
<Node Id="21003:[45265..45279).1" Label="sourceFileName 672574" />
<Node Id="21003:[45281..45299).1" Label="skipUsesIsNullable 672575" />
<Node Id="21003:[45133..45300).1" Label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 672576" />
<Node Id="21003:[45382..45405).1" Label="param CreateEmptyCompilation(CSharpTestSource source) 672577" />
<Node Id="21003:[45420..45468).1" Label="param CreateEmptyCompilation(IEnumerable$MetadataReference$ references = null) 672578" />
<Node Id="21003:[45483..45522).1" Label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 672579" />
<Node Id="21003:[45537..45575).1" Label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 672580" />
<Node Id="21003:[45590..45614).1" Label="param CreateEmptyCompilation(string assemblyName = '') 672581" />
<Node Id="21003:[45629..45655).1" Label="param CreateEmptyCompilation(string sourceFileName = '') 672582" />
<Node Id="21003:[45670..45701).1" Label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 672583" />
<Node Id="21003:[45728..45734).1" Label="source 672584" />
<Node Id="21003:[45736..45746).1" Label="references 672585" />
<Node Id="21003:[45748..45755).1" Label="options 672586" />
<Node Id="21003:[45757..45769).1" Label="parseOptions 672587" />
<Node Id="21003:[45771..45783).1" Label="assemblyName 672588" />
<Node Id="21003:[45785..45799).1" Label="sourceFileName 672589" />
<Node Id="21003:[45801..45819).1" Label="skipUsesIsNullable 672590" />
<Node Id="21003:[45842..45846).1" Label="null 672591" />
<Node Id="21003:[45821..45846).1" Label="experimentalFeature: null 672592" />
<Node Id="21003:[45706..45847).1" Label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 672593" />
<Node Id="21003:[45929..45952).1" Label="param CreateCompilationCore(CSharpTestSource source) 672594" />
<Node Id="21003:[45967..46008).1" Label="param CreateCompilationCore(IEnumerable$MetadataReference$ references) 672595" />
<Node Id="21003:[46023..46055).1" Label="param CreateCompilationCore(CSharpCompilationOptions options) 672596" />
<Node Id="21003:[46070..46101).1" Label="param CreateCompilationCore(CSharpParseOptions parseOptions) 672597" />
<Node Id="21003:[46116..46135).1" Label="param CreateCompilationCore(string assemblyName) 672598" />
<Node Id="21003:[46150..46171).1" Label="param CreateCompilationCore(string sourceFileName) 672599" />
<Node Id="21003:[46186..46209).1" Label="param CreateCompilationCore(bool skipUsesIsNullable) 672600" />
<Node Id="21003:[46224..46254).1" Label="param CreateCompilationCore(MessageID? experimentalFeature) 672601" />
<Node Id="21003:[46280..46350).1" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 672602" />
<Node Id="21003:[46280..46350).2" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 672603" />
<Node Id="21003:[46298..46349).1" Label="source.GetSyntaxTrees(parseOptions, sourceFileName) 672604" />
<Node Id="21004:[949..980).1" Label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 672605" />
<Node Id="21004:[982..1008).1" Label="param GetSyntaxTrees(string sourceFileName = '') 672606" />
<Node Id="21004:[914..2190).1" Label="param GetSyntaxTrees(this) 672607" />
<Node Id="21004:[1034..2179).1" Label="switch (Value)
            {
                case string source:
                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };
                case string[] sources:
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return CSharpTestBase.Parse(parseOptions, sources);
                case SyntaxTree tree:
                    Debug.Assert(parseOptions == null);
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return new[] { tree };
                case SyntaxTree[] trees:
                    Debug.Assert(parseOptions == null);
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return trees;
                case CSharpTestSource[] testSources:
                    return testSources.SelectMany(s =$ s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();
                case null:
                    return Array.Empty$SyntaxTree$();
                default:
                    throw new Exception($'Unexpected value: {Value}');
            } 672608" />
<Node Id="21004:[1122..1208).1" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 672609" />
<Node Id="21004:[1122..1208).3" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 672610" />
<Node Id="21004:[1122..1208).4" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 672611" />
<Node Id="21004:[1137..1205).1" Label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 672612" />
<Node Id="21003:[34078..34089).1" Label="param Parse(string text) 672613" />
<Node Id="21003:[34091..34111).1" Label="param Parse(string filename = '') 672614" />
<Node Id="21003:[34113..34146).1" Label="param Parse(CSharpParseOptions options = null) 672615" />
<Node Id="21003:[34148..34172).1" Label="param Parse(Encoding encoding = null) 672616" />
<Node Id="21003:[34198..34304).1" Label="if ((object)options == null)
            {
                options = TestOptions.Regular;
            } 672617" />
<Node Id="21003:[34198..34304).2" Label="if ((object)options == null)
            {
                options = TestOptions.Regular;
            } 672618" />
<Node Id="21010:[590..618).1" Label="kind: SourceCodeKind.Regular 672619" />
<Node Id="21010:[620..662).1" Label="documentationMode: DocumentationMode.Parse 672620" />
<Node Id="21010:[567..663).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 672621" />
<Node Id="21010:[567..663).5" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 672622" />
<Node Id="21010:[557..663).1" Label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 672623" />
<Node Id="21010:[742..763).1" Label="SourceCodeKind.Script 672624" />
<Node Id="21010:[725..764).1" Label="Regular.WithKind(SourceCodeKind.Script) 672625" />
<Node Id="21010:[716..764).1" Label="Script = Regular.WithKind(SourceCodeKind.Script) 672626" />
<Node Id="21010:[856..879).1" Label="LanguageVersion.CSharp6 672627" />
<Node Id="21010:[828..880).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 672628" />
<Node Id="21010:[817..880).1" Label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 672629" />
<Node Id="21010:[972..995).1" Label="LanguageVersion.CSharp7 672630" />
<Node Id="21010:[944..996).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 672631" />
<Node Id="21010:[933..996).1" Label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 672632" />
<Node Id="21010:[1090..1115).1" Label="LanguageVersion.CSharp7_1 672633" />
<Node Id="21010:[1062..1116).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 672634" />
<Node Id="21010:[1049..1116).1" Label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 672635" />
<Node Id="21010:[1210..1235).1" Label="LanguageVersion.CSharp7_2 672636" />
<Node Id="21010:[1182..1236).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 672637" />
<Node Id="21010:[1169..1236).1" Label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 672638" />
<Node Id="21010:[1330..1355).1" Label="LanguageVersion.CSharp7_3 672639" />
<Node Id="21010:[1302..1356).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 672640" />
<Node Id="21010:[1289..1356).1" Label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 672641" />
<Node Id="21010:[1454..1477).1" Label="LanguageVersion.Default 672642" />
<Node Id="21010:[1426..1478).1" Label="Regular.WithLanguageVersion(LanguageVersion.Default) 672643" />
<Node Id="21010:[1409..1478).1" Label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 672644" />
<Node Id="21010:[1576..1599).1" Label="LanguageVersion.Preview 672645" />
<Node Id="21010:[1548..1600).1" Label="Regular.WithLanguageVersion(LanguageVersion.Preview) 672646" />
<Node Id="21010:[1531..1600).1" Label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 672647" />
<Node Id="21010:[1692..1715).1" Label="LanguageVersion.CSharp8 672648" />
<Node Id="21010:[1664..1716).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 672649" />
<Node Id="21010:[1653..1716).1" Label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 672650" />
<Node Id="21010:[1808..1831).1" Label="LanguageVersion.CSharp9 672651" />
<Node Id="21010:[1780..1832).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 672652" />
<Node Id="21010:[1769..1832).1" Label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 672653" />
<Node Id="21010:[1950..1976).1" Label="DocumentationMode.Diagnose 672654" />
<Node Id="21010:[1920..1977).1" Label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 672655" />
<Node Id="21010:[1885..1977).1" Label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 672656" />
<Node Id="21010:[2060..2067).1" Label="Regular 672657" />
<Node Id="21010:[2080..2109).1" Label="'UseLegacyStrongNameProvider' 672658" />
<Node Id="21010:[2060..2110).1" Label="Regular.WithFeature('UseLegacyStrongNameProvider') 672659" />
<Node Id="21010:[7783..7814).1" Label="param WithFeature(this CSharpParseOptions options) 672660" />
<Node Id="21010:[7816..7830).1" Label="param WithFeature(string feature) 672661" />
<Node Id="21010:[7832..7853).1" Label="param WithFeature(string value = 'true') 672662" />
<Node Id="21010:[7879..7992).1" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 672663" />
<Node Id="21010:[7879..7992).2" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 672664" />
<Node Id="21010:[7879..7992).3" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 672665" />
<Node Id="21010:[7879..7992).4" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 672666" />
<Node Id="21010:[7879..7992).5" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 672667" />
<Node Id="21010:[7931..7989).1" Label="new[] { new KeyValuePair$string, string$(feature, value) } 672668" />
<Node Id="21010:[7879..7992).9" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 672669" />
<Node Id="21010:[2030..2110).1" Label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 672670" />
<Node Id="21010:[2227..2274).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates 672671" />
<Node Id="21010:[2227..2292).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 672672" />
<Node Id="21010:[2295..2296).1" Label="1 672673" />
<Node Id="21010:[2227..2296).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 672674" />
<Node Id="21010:[2199..2297).1" Label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 672675" />
<Node Id="21010:[2163..2297).1" Label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 672676" />
<Node Id="21010:[2401..2450).1" Label="MessageID.IDS_FeatureCovariantReturnsForOverrides 672677" />
<Node Id="21010:[2401..2468).1" Label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 672678" />
<Node Id="21010:[2373..2469).1" Label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 672679" />
<Node Id="21010:[2350..2469).1" Label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 672680" />
<Node Id="21010:[2576..2599).1" Label="LanguageVersion.CSharp8 672681" />
<Node Id="21010:[2548..2600).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 672682" />
<Node Id="21010:[2522..2600).1" Label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 672683" />
<Node Id="21010:[2655..2705).1" Label="RegularWithExtendedPartialMethods = RegularPreview 672684" />
<Node Id="21010:[2799..2838).1" Label="new SmallDictionary$string, string$ { } 672685" />
<Node Id="21010:[2774..2838).1" Label="s_experimentalFeatures = new SmallDictionary$string, string$ { } 672686" />
<Node Id="21010:[2954..2982).1" Label="kind: SourceCodeKind.Regular 672687" />
<Node Id="21010:[2984..3025).1" Label="documentationMode: DocumentationMode.None 672688" />
<Node Id="21010:[3027..3067).1" Label="languageVersion: LanguageVersion.Preview 672689" />
<Node Id="21010:[2931..3068).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 672690" />
<Node Id="21010:[2931..3068).3" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 672691" />
<Node Id="21010:[3082..3104).1" Label="s_experimentalFeatures 672692" />
<Node Id="21010:[2931..3105).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 672693" />
<Node Id="21010:[2891..3105).1" Label="ExperimentalParseOptions =
            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 672694" />
<Node Id="21010:[3487..3556).1" Label="new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } } 672695" />
<Node Id="21010:[3524..3544).1" Label="'testV7SwitchBinder' 672696" />
<Node Id="21010:[3546..3552).1" Label="'true' 672697" />
<Node Id="21010:[3487..3556).2" Label="new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } } 672698" />
<Node Id="21010:[3465..3557).1" Label="Regular6.WithFeatures(new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } }) 672699" />
<Node Id="21010:[3436..3557).1" Label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } }) 672700" />
<Node Id="21010:[3612..3656).1" Label="RegularWithoutRecursivePatterns = Regular7_3 672701" />
<Node Id="21010:[3709..3748).1" Label="RegularWithRecursivePatterns = Regular8 672702" />
<Node Id="21010:[3801..3844).1" Label="RegularWithoutPatternCombinators = Regular8 672703" />
<Node Id="21010:[3897..3943).1" Label="RegularWithPatternCombinators = RegularPreview 672704" />
<Node Id="21010:[4035..4070).1" Label="OutputKind.DynamicallyLinkedLibrary 672705" />
<Node Id="21010:[4072..4097).1" Label="OptimizationLevel.Release 672706" />
<Node Id="21010:[4017..4098).1" Label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 672707" />
<Node Id="21010:[10204..10225).1" Label="param CreateTestOptions(OutputKind outputKind) 672708" />
<Node Id="21010:[10227..10262).1" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 672709" />
<Node Id="21010:[10264..10288).1" Label="param CreateTestOptions(bool allowUnsafe = false) 672710" />
<Node Id="21010:[10335..10345).1" Label="outputKind 672711" />
<Node Id="21010:[10347..10383).1" Label="optimizationLevel: optimizationLevel 672712" />
<Node Id="21010:[10385..10425).1" Label="warningLevel: Diagnostic.MaxWarningLevel 672713" />
<Node Id="21010:[10427..10451).1" Label="allowUnsafe: allowUnsafe 672714" />
<Node Id="21010:[10306..10452).1" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672715" />
<Node Id="21010:[10306..10452).47" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672716" />
<Node Id="21010:[4004..4098).1" Label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 672717" />
<Node Id="21010:[4188..4217).1" Label="OutputKind.ConsoleApplication 672718" />
<Node Id="21010:[4219..4244).1" Label="OptimizationLevel.Release 672719" />
<Node Id="21010:[4170..4245).1" Label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 672720" />
<Node Id="21010:[10204..10225).2" Label="param CreateTestOptions(OutputKind outputKind) 672721" />
<Node Id="21010:[10227..10262).2" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 672722" />
<Node Id="21010:[10264..10288).2" Label="param CreateTestOptions(bool allowUnsafe = false) 672723" />
<Node Id="21010:[10335..10345).2" Label="outputKind 672724" />
<Node Id="21010:[10347..10383).2" Label="optimizationLevel: optimizationLevel 672725" />
<Node Id="21010:[10385..10425).2" Label="warningLevel: Diagnostic.MaxWarningLevel 672726" />
<Node Id="21010:[10427..10451).2" Label="allowUnsafe: allowUnsafe 672727" />
<Node Id="21010:[10306..10452).49" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672728" />
<Node Id="21010:[10306..10452).95" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672729" />
<Node Id="21010:[4157..4245).1" Label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 672730" />
<Node Id="21010:[4353..4357).1" Label="true 672731" />
<Node Id="21010:[4324..4358).1" Label="ReleaseDll.WithDebugPlusMode(true) 672732" />
<Node Id="21010:[4306..4358).1" Label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 672733" />
<Node Id="21010:[4466..4470).1" Label="true 672734" />
<Node Id="21010:[4437..4471).1" Label="ReleaseExe.WithDebugPlusMode(true) 672735" />
<Node Id="21010:[4419..4471).1" Label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 672736" />
<Node Id="21010:[4561..4596).1" Label="OutputKind.DynamicallyLinkedLibrary 672737" />
<Node Id="21010:[4598..4621).1" Label="OptimizationLevel.Debug 672738" />
<Node Id="21010:[4543..4622).1" Label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 672739" />
<Node Id="21010:[10204..10225).3" Label="param CreateTestOptions(OutputKind outputKind) 672740" />
<Node Id="21010:[10227..10262).3" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 672741" />
<Node Id="21010:[10264..10288).3" Label="param CreateTestOptions(bool allowUnsafe = false) 672742" />
<Node Id="21010:[10335..10345).3" Label="outputKind 672743" />
<Node Id="21010:[10347..10383).3" Label="optimizationLevel: optimizationLevel 672744" />
<Node Id="21010:[10385..10425).3" Label="warningLevel: Diagnostic.MaxWarningLevel 672745" />
<Node Id="21010:[10427..10451).3" Label="allowUnsafe: allowUnsafe 672746" />
<Node Id="21010:[10306..10452).97" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672747" />
<Node Id="21010:[10306..10452).143" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672748" />
<Node Id="21010:[4532..4622).1" Label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 672749" />
<Node Id="21010:[4710..4739).1" Label="OutputKind.ConsoleApplication 672750" />
<Node Id="21010:[4741..4764).1" Label="OptimizationLevel.Debug 672751" />
<Node Id="21010:[4692..4765).1" Label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 672752" />
<Node Id="21010:[10204..10225).4" Label="param CreateTestOptions(OutputKind outputKind) 672753" />
<Node Id="21010:[10227..10262).4" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 672754" />
<Node Id="21010:[10264..10288).4" Label="param CreateTestOptions(bool allowUnsafe = false) 672755" />
<Node Id="21010:[10335..10345).4" Label="outputKind 672756" />
<Node Id="21010:[10347..10383).4" Label="optimizationLevel: optimizationLevel 672757" />
<Node Id="21010:[10385..10425).4" Label="warningLevel: Diagnostic.MaxWarningLevel 672758" />
<Node Id="21010:[10427..10451).4" Label="allowUnsafe: allowUnsafe 672759" />
<Node Id="21010:[10306..10452).145" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672760" />
<Node Id="21010:[10306..10452).191" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672761" />
<Node Id="21010:[4681..4765).1" Label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 672762" />
<Node Id="21010:[4859..4892).1" Label="OutputKind.WindowsRuntimeMetadata 672763" />
<Node Id="21010:[4894..4919).1" Label="OptimizationLevel.Release 672764" />
<Node Id="21010:[4841..4920).1" Label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 672765" />
<Node Id="21010:[10204..10225).5" Label="param CreateTestOptions(OutputKind outputKind) 672766" />
<Node Id="21010:[10227..10262).5" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 672767" />
<Node Id="21010:[10264..10288).5" Label="param CreateTestOptions(bool allowUnsafe = false) 672768" />
<Node Id="21010:[10335..10345).5" Label="outputKind 672769" />
<Node Id="21010:[10347..10383).5" Label="optimizationLevel: optimizationLevel 672770" />
<Node Id="21010:[10385..10425).5" Label="warningLevel: Diagnostic.MaxWarningLevel 672771" />
<Node Id="21010:[10427..10451).5" Label="allowUnsafe: allowUnsafe 672772" />
<Node Id="21010:[10306..10452).193" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672773" />
<Node Id="21010:[10306..10452).239" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672774" />
<Node Id="21010:[4826..4920).1" Label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 672775" />
<Node Id="21010:[5010..5043).1" Label="OutputKind.WindowsRuntimeMetadata 672776" />
<Node Id="21010:[5045..5068).1" Label="OptimizationLevel.Debug 672777" />
<Node Id="21010:[4992..5069).1" Label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 672778" />
<Node Id="21010:[10204..10225).6" Label="param CreateTestOptions(OutputKind outputKind) 672779" />
<Node Id="21010:[10227..10262).6" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 672780" />
<Node Id="21010:[10264..10288).6" Label="param CreateTestOptions(bool allowUnsafe = false) 672781" />
<Node Id="21010:[10335..10345).6" Label="outputKind 672782" />
<Node Id="21010:[10347..10383).6" Label="optimizationLevel: optimizationLevel 672783" />
<Node Id="21010:[10385..10425).6" Label="warningLevel: Diagnostic.MaxWarningLevel 672784" />
<Node Id="21010:[10427..10451).6" Label="allowUnsafe: allowUnsafe 672785" />
<Node Id="21010:[10306..10452).241" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672786" />
<Node Id="21010:[10306..10452).287" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672787" />
<Node Id="21010:[4979..5069).1" Label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 672788" />
<Node Id="21010:[5164..5184).1" Label="OutputKind.NetModule 672789" />
<Node Id="21010:[5186..5211).1" Label="OptimizationLevel.Release 672790" />
<Node Id="21010:[5146..5212).1" Label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 672791" />
<Node Id="21010:[10204..10225).7" Label="param CreateTestOptions(OutputKind outputKind) 672792" />
<Node Id="21010:[10227..10262).7" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 672793" />
<Node Id="21010:[10264..10288).7" Label="param CreateTestOptions(bool allowUnsafe = false) 672794" />
<Node Id="21010:[10335..10345).7" Label="outputKind 672795" />
<Node Id="21010:[10347..10383).7" Label="optimizationLevel: optimizationLevel 672796" />
<Node Id="21010:[10385..10425).7" Label="warningLevel: Diagnostic.MaxWarningLevel 672797" />
<Node Id="21010:[10427..10451).7" Label="allowUnsafe: allowUnsafe 672798" />
<Node Id="21010:[10306..10452).289" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672799" />
<Node Id="21010:[10306..10452).335" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672800" />
<Node Id="21010:[5130..5212).1" Label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 672801" />
<Node Id="21010:[5303..5323).1" Label="OutputKind.NetModule 672802" />
<Node Id="21010:[5325..5348).1" Label="OptimizationLevel.Debug 672803" />
<Node Id="21010:[5285..5349).1" Label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 672804" />
<Node Id="21010:[10204..10225).8" Label="param CreateTestOptions(OutputKind outputKind) 672805" />
<Node Id="21010:[10227..10262).8" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 672806" />
<Node Id="21010:[10264..10288).8" Label="param CreateTestOptions(bool allowUnsafe = false) 672807" />
<Node Id="21010:[10335..10345).8" Label="outputKind 672808" />
<Node Id="21010:[10347..10383).8" Label="optimizationLevel: optimizationLevel 672809" />
<Node Id="21010:[10385..10425).8" Label="warningLevel: Diagnostic.MaxWarningLevel 672810" />
<Node Id="21010:[10427..10451).8" Label="allowUnsafe: allowUnsafe 672811" />
<Node Id="21010:[10306..10452).337" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672812" />
<Node Id="21010:[10306..10452).383" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672813" />
<Node Id="21010:[5271..5349).1" Label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 672814" />
<Node Id="21010:[5456..5460).1" Label="true 672815" />
<Node Id="21010:[5429..5461).1" Label="ReleaseDll.WithAllowUnsafe(true) 672816" />
<Node Id="21010:[5410..5461).1" Label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 672817" />
<Node Id="21010:[5566..5570).1" Label="true 672818" />
<Node Id="21010:[5539..5571).1" Label="ReleaseExe.WithAllowUnsafe(true) 672819" />
<Node Id="21010:[5520..5571).1" Label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 672820" />
<Node Id="21010:[5674..5678).1" Label="true 672821" />
<Node Id="21010:[5649..5679).1" Label="DebugDll.WithAllowUnsafe(true) 672822" />
<Node Id="21010:[5632..5679).1" Label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 672823" />
<Node Id="21010:[5780..5784).1" Label="true 672824" />
<Node Id="21010:[5755..5785).1" Label="DebugExe.WithAllowUnsafe(true) 672825" />
<Node Id="21010:[5738..5785).1" Label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 672826" />
<Node Id="21010:[5900..5951).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 672827" />
<Node Id="21010:[5866..5952).1" Label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 672828" />
<Node Id="21010:[5846..5952).1" Label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 672829" />
<Node Id="21010:[6065..6116).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 672830" />
<Node Id="21010:[6031..6117).1" Label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 672831" />
<Node Id="21010:[6011..6117).1" Label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 672832" />
<Node Id="21010:[6236..6287).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 672833" />
<Node Id="21010:[6199..6288).1" Label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 672834" />
<Node Id="21010:[6176..6288).1" Label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 672835" />
<Node Id="21010:[6397..6448).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 672836" />
<Node Id="21010:[6365..6449).1" Label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 672837" />
<Node Id="21010:[6347..6449).1" Label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 672838" />
<Node Id="21010:[6560..6586).1" Label="DebugInformationFormat.Pdb 672839" />
<Node Id="21010:[6513..6587).1" Label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 672840" />
<Node Id="21010:[6497..6587).1" Label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 672841" />
<Node Id="21003:[34259..34289).1" Label="options = TestOptions.Regular; 672842" />
<Node Id="21003:[34320..34386).1" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 672843" />
<Node Id="21003:[34320..34386).2" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 672844" />
<Node Id="21003:[34320..34386).3" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 672845" />
<Node Id="21003:[34320..34386).5" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 672846" />
<Node Id="21003:[34320..34386).7" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 672847" />
<Node Id="21003:[34400..34487).1" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 672848" />
<Node Id="21003:[34400..34487).2" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 672849" />
<Node Id="21003:[34400..34487).3" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 672850" />
<Node Id="21003:[34400..34487).4" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 672851" />
<Node Id="21003:[34400..34487).6" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 672852" />
<Node Id="21003:[34407..34486).1" Label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 672853" />
<Node Id="21003:[34554..34569).1" Label="param CheckSerializable(SyntaxTree tree) 672854" />
<Node Id="21003:[34595..34627).1" Label="var stream = new MemoryStream(); 672855" />
<Node Id="21003:[34641..34667).1" Label="var root = tree.GetRoot(); 672856" />
<Node Id="21003:[34641..34667).3" Label="var root = tree.GetRoot(); 672857" />
<Node Id="21003:[34681..34706).1" Label="root.SerializeTo(stream); 672858" />
<Node Id="21003:[34681..34706).2" Label="root.SerializeTo(stream); 672859" />
<Node Id="21003:[34681..34706).4" Label="root.SerializeTo(stream); 672860" />
<Node Id="21003:[34720..34740).1" Label="stream.Position = 0; 672861" />
<Node Id="21003:[34720..34735).1" Label="stream.Position 672862" />
<Node Id="21003:[34754..34818).1" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 672863" />
<Node Id="21003:[34754..34818).2" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 672864" />
<Node Id="21003:[34754..34818).4" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 672865" />
<Node Id="21003:[34832..34844).1" Label="return tree; 672866" />
<Node Id="21004:[1129..1207).1" Label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 672867" />
<Node Id="21003:[46280..46350).3" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 672868" />
<Node Id="21003:[46366..46650).1" Label="if (options == null)
            {
                bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any());

                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;
            } 672869" />
<Node Id="21003:[46366..46650).2" Label="if (options == null)
            {
                bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any());

                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;
            } 672870" />
<Node Id="21003:[46419..46533).1" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 672871" />
<Node Id="21003:[46419..46533).2" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 672872" />
<Node Id="21003:[46419..46533).4" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 672873" />
<Node Id="21003:[46563..46584).1" Label="hasTopLevelStatements 672874" />
<Node Id="21003:[46553..46635).1" Label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 672875" />
<Node Id="21003:[46755..46872).1" Label="if (Debugger.IsAttached)
            {
                options = options.WithConcurrentBuild(false);
            } 672876" />
<Node Id="21003:[46888..47066).1" Label="if (experimentalFeature.HasValue)
            {
                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);
            } 672877" />
<Node Id="21003:[47082..47319).1" Label="Func$CSharpCompilation$ createCompilationLambda = () =$ CSharpCompilation.Create(
                assemblyName == '' ? GetUniqueName() : assemblyName,
                syntaxTrees,
                references,
                options); 672878" />
<Node Id="21003:[47333..47400).1" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 672879" />
<Node Id="21003:[47333..47399).1" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 672880" />
<Node Id="25006:[11552..11587).1" Label="param ValidateIOperations(Func$Compilation$ createCompilation) 672881" />
<Node Id="25006:[11613..11696).1" Label="if (!EnableVerifyIOperation)
            {
                return;
            } 672882" />
<Node Id="25006:[11674..11681).1" Label="return; 672883" />
<Node Id="21003:[47333..47400).2" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 672884" />
<Node Id="21003:[47414..47458).1" Label="var compilation = createCompilationLambda(); 672885" />
<Node Id="21003:[47414..47458).2" Label="var compilation = createCompilationLambda(); 672886" />
<Node Id="25004:[1041..1077).1" Label="return Guid.NewGuid().ToString('D'); 672887" />
<Node Id="21003:[47414..47458).4" Label="var compilation = createCompilationLambda(); 672888" />
<Node Id="21003:[47689..47930).1" Label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))
            {
                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray$string$.Empty);
            } 672889" />
<Node Id="21003:[47717..47747).1" Label="IsNullableEnabled(compilation) 672890" />
<Node Id="21003:[48025..48054).1" Label="param IsNullableEnabled(CSharpCompilation compilation) 672891" />
<Node Id="21003:[48175..48211).1" Label="var trees = compilation.SyntaxTrees; 672892" />
<Node Id="21003:[48225..48313).1" Label="if (trees.IsDefaultOrEmpty)
            {
                return false;
            } 672893" />
<Node Id="21003:[48327..48378).1" Label="var options = (CSharpParseOptions)trees[0].Options; 672894" />
<Node Id="21003:[48327..48378).2" Label="var options = (CSharpParseOptions)trees[0].Options; 672895" />
<Node Id="21003:[48392..48469).1" Label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 672896" />
<Node Id="21003:[48392..48469).2" Label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 672897" />
<Node Id="21003:[47689..47930).3" Label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))
            {
                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray$string$.Empty);
            } 672898" />
<Node Id="21003:[47944..47963).1" Label="return compilation; 672899" />
<Node Id="28001:[21850..21895).1" Label="CreateCompilation(source).VerifyDiagnostics() 672900" />
<Node Id="25002:[4263..4282).1" Label="param VerifyDiagnostics(this TCompilation c) 672901" />
<Node Id="25002:[4284..4323).1" Label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 672902" />
<Node Id="25002:[4395..4432).1" Label="var diagnostics = c.GetDiagnostics(); 672903" />
<Node Id="10345:[956..960).1" Label="null 672904" />
<Node Id="10345:[975..1032).1" Label="ImmutableDictionary$string, AliasAndUsingDirective$.Empty 672905" />
<Node Id="10345:[1047..1101).1" Label="ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty 672906" />
<Node Id="10345:[1116..1166).1" Label="ImmutableArray$AliasAndExternAliasDirective$.Empty 672907" />
<Node Id="10345:[1181..1185).1" Label="null 672908" />
<Node Id="10345:[930..1186).1" Label="new Imports(
            null,
            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
            ImmutableArray$AliasAndExternAliasDirective$.Empty,
            null) 672909" />
<Node Id="10345:[1753..1782).1" Label="param Imports(CSharpCompilation compilation) 672910" />
<Node Id="10345:[1797..1861).1" Label="param Imports(ImmutableDictionary$string, AliasAndUsingDirective$ usingAliases) 672911" />
<Node Id="10345:[1876..1931).1" Label="param Imports(ImmutableArray$NamespaceOrTypeAndUsingDirective$ usings) 672912" />
<Node Id="10345:[1946..1998).1" Label="param Imports(ImmutableArray$AliasAndExternAliasDirective$ externs) 672913" />
<Node Id="10345:[2013..2038).1" Label="param Imports(DiagnosticBag diagnostics) 672914" />
<Node Id="10345:[1723..2412).1" Label="param Imports(this) 672915" />
<Node Id="10345:[1234..1246).1" Label="_compilation 672916" />
<Node Id="10345:[1288..1300).1" Label="_diagnostics 672917" />
<Node Id="10345:[1531..1543).1" Label="UsingAliases 672918" />
<Node Id="10345:[2064..2099).1" Label="Debug.Assert(usingAliases != null); 672919" />
<Node Id="10345:[2064..2099).2" Label="Debug.Assert(usingAliases != null); 672920" />
<Node Id="10345:[2113..2145).1" Label="Debug.Assert(!usings.IsDefault); 672921" />
<Node Id="10345:[2159..2192).1" Label="Debug.Assert(!externs.IsDefault); 672922" />
<Node Id="10345:[2208..2220).1" Label="_compilation 672923" />
<Node Id="10345:[2249..2266).1" Label="this.UsingAliases 672924" />
<Node Id="10345:[2296..2307).1" Label="this.Usings 672925" />
<Node Id="10345:[2331..2343).1" Label="_diagnostics 672926" />
<Node Id="10345:[2372..2390).1" Label="this.ExternAliases 672927" />
<Node Id="10345:[922..1186).1" Label="Empty = new Imports(
            null,
            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
            ImmutableArray$AliasAndExternAliasDirective$.Empty,
            null) 672928" />
<Node Id="25002:[4395..4432).3" Label="var diagnostics = c.GetDiagnostics(); 672929" />
<Node Id="10345:[13089..13118).1" Label="param FromGlobalUsings(CSharpCompilation compilation) 672930" />
<Node Id="10345:[13144..13184).1" Label="var usings = compilation.Options.Usings; 672931" />
<Node Id="10345:[13200..13326).1" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 672932" />
<Node Id="10345:[13200..13326).2" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 672933" />
<Node Id="10345:[13200..13326).4" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 672934" />
<Node Id="10345:[13298..13311).1" Label="return Empty; 672935" />
<Node Id="25002:[4395..4432).6" Label="var diagnostics = c.GetDiagnostics(); 672936" />
<Node Id="10345:[24530..24565).1" Label="param Complete(CancellationToken cancellationToken) 672937" />
<Node Id="10345:[24507..26254).1" Label="param Complete(this) 672938" />
<Node Id="10345:[24591..26243).1" Label="while (true)
            {
                cancellationToken.ThrowIfCancellationRequested();
                var incompletePart = _state.NextIncompletePart;
                switch (incompletePart)
                {
                    case CompletionPart.StartValidatingImports:
                        {
                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            }
                        }
                        break;

                    case CompletionPart.FinishValidatingImports:
                        // some other thread has started validating imports (otherwise we would be in the case above) so
                        // we just wait for it to both finish and report the diagnostics.
                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));
                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);
                        break;

                    case CompletionPart.None:
                        return;

                    default:
                        // any other values are completion parts intended for other kinds of symbols
                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);
                        break;
                }

                _state.SpinWaitComplete(incompletePart, cancellationToken);
            } 672939" />
<Node Id="10345:[24636..24685).1" Label="cancellationToken.ThrowIfCancellationRequested(); 672940" />
<Node Id="10345:[24703..24750).1" Label="var incompletePart = _state.NextIncompletePart; 672941" />
<Node Id="10345:[24768..26149).1" Label="switch (incompletePart)
                {
                    case CompletionPart.StartValidatingImports:
                        {
                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            }
                        }
                        break;

                    case CompletionPart.FinishValidatingImports:
                        // some other thread has started validating imports (otherwise we would be in the case above) so
                        // we just wait for it to both finish and report the diagnostics.
                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));
                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);
                        break;

                    case CompletionPart.None:
                        return;

                    default:
                        // any other values are completion parts intended for other kinds of symbols
                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);
                        break;
                } 672942" />
<Node Id="10345:[26025..26098).1" Label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 672943" />
<Node Id="10345:[26169..26228).1" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 672944" />
<Node Id="10345:[26169..26228).2" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 672945" />
<Node Id="10345:[26169..26228).3" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 672946" />
<Node Id="10345:[24932..25204).1" Label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            } 672947" />
<Node Id="10345:[25064..25074).1" Label="Validate() 672948" />
<Node Id="10345:[26266..28173).1" Label="param Validate(this) 672949" />
<Node Id="10345:[26314..26387).1" Label="if (this == Empty)
            {
                return;
            } 672950" />
<Node Id="10345:[26365..26372).1" Label="return; 672951" />
<Node Id="10345:[25064..25075).1" Label="Validate(); 672952" />
<Node Id="10345:[25109..25173).1" Label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 672953" />
<Node Id="10345:[25858..25865).1" Label="return; 672954" />
<Node Id="10298:[471..492).1" Label="param Includes(this BinderFlags self) 672955" />
<Node Id="10298:[494..511).1" Label="param Includes(BinderFlags other) 672956" />
<Node Id="10298:[537..568).1" Label="return (self & other) == other; 672957" />
<Node Id="25002:[4395..4432).10" Label="var diagnostics = c.GetDiagnostics(); 672958" />
<Node Id="10292:[1720..1721).1" Label="0 672959" />
<Node Id="10292:[1704..1721).1" Label="ExternalScope = 0 672960" />
<Node Id="10292:[1768..1769).1" Label="1 672961" />
<Node Id="10292:[1752..1769).1" Label="TopLevelScope = 1 672962" />
<Node Id="10292:[1992..1993).1" Label="2 672963" />
<Node Id="10292:[1963..1993).1" Label="ValueKindInsignificantBits = 2 672964" />
<Node Id="10292:[2032..2129).1" Label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 $$ ValueKindInsignificantBits) - 1)) 672965" />
<Node Id="10306:[388969..389344).1" Label="property =$
            {
                if (property.IsIndexer || !property.IsIndexedProperty)
                {
                    return false;
                }

                Debug.Assert(property.ParameterCount $ 0);
                var parameter = property.Parameters[0];
                return !parameter.IsOptional && !parameter.IsParams;
            } 672966" />
<Node Id="10306:[388923..389344).1" Label="s_isIndexedPropertyWithNonOptionalArguments = property =$
            {
                if (property.IsIndexer || !property.IsIndexedProperty)
                {
                    return false;
                }

                Debug.Assert(property.ParameterCount $ 0);
                var parameter = property.Parameters[0];
                return !parameter.IsOptional && !parameter.IsParams;
            } 672967" />
<Node Id="10306:[389480..389543).1" Label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 672968" />
<Node Id="10306:[389562..389646).1" Label="memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType 672969" />
<Node Id="10306:[389708..389839).1" Label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 672970" />
<Node Id="10306:[389665..389839).1" Label="miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 672971" />
<Node Id="10306:[389438..389840).1" Label="new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 672972" />
<Node Id="10306:[389438..389840).17" Label="new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 672973" />
<Node Id="10306:[389401..389840).1" Label="s_propertyGroupFormat =
            new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 672974" />
<Node Id="10310:[84494..84496).1" Label="10 672975" />
<Node Id="10310:[84458..84496).1" Label="MaxParameterListsForErrorRecovery = 10 672976" />
<Node Id="10316:[802..830).1" Label="'$$h__TransparentIdentifier' 672977" />
<Node Id="10316:[772..830).1" Label="transparentIdentifierPrefix = '$$h__TransparentIdentifier' 672978" />
<Node Id="10319:[69643..69663).1" Label="s =$ (MethodSymbol)s 672979" />
<Node Id="10319:[69620..69663).1" Label="s_toMethodSymbolFunc = s =$ (MethodSymbol)s 672980" />
<Node Id="10319:[69752..69774).1" Label="s =$ (PropertySymbol)s 672981" />
<Node Id="10319:[69727..69774).1" Label="s_toPropertySymbolFunc = s =$ (PropertySymbol)s 672982" />
<Node Id="10286:[30925..30954).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 672983" />
<Node Id="10286:[30969..31000).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 672984" />
<Node Id="10286:[31015..31040).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 672985" />
<Node Id="10286:[31055..31080).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 672986" />
<Node Id="10286:[31095..31126).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 672987" />
<Node Id="10286:[31152..31210).1" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 672988" />
<Node Id="10286:[31152..31210).2" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 672989" />
<Node Id="10286:[31152..31210).4" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 672990" />
<Node Id="10286:[31152..31210).5" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 672991" />
<Node Id="10286:[31515..31598).1" Label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 672992" />
<Node Id="10286:[31614..31710).1" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 672993" />
<Node Id="10286:[31614..31710).2" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 672994" />
<Node Id="10286:[31614..31710).3" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 672995" />
<Node Id="10286:[31614..31710).4" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 672996" />
<Node Id="10286:[31614..31710).5" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 672997" />
<Node Id="10286:[31614..31710).6" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 672998" />
<Node Id="10286:[31614..31709).1" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 672999" />
<Node Id="10319:[80080..80109).1" Label="param GetWellKnownTypeMember(CSharpCompilation compilation) 673000" />
<Node Id="10319:[80111..80133).1" Label="param GetWellKnownTypeMember(WellKnownMember member) 673001" />
<Node Id="10319:[80135..80160).1" Label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 673002" />
<Node Id="10319:[80162..80186).1" Label="param GetWellKnownTypeMember(Location location = null) 673003" />
<Node Id="10319:[80188..80212).1" Label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 673004" />
<Node Id="10319:[80214..80237).1" Label="param GetWellKnownTypeMember(bool isOptional = false) 673005" />
<Node Id="10319:[80263..80315).1" Label="Debug.Assert((syntax != null) ^ (location != null)); 673006" />
<Node Id="10319:[80263..80315).2" Label="Debug.Assert((syntax != null) ^ (location != null)); 673007" />
<Node Id="10319:[80263..80315).4" Label="Debug.Assert((syntax != null) ^ (location != null)); 673008" />
<Node Id="10319:[80263..80315).5" Label="Debug.Assert((syntax != null) ^ (location != null)); 673009" />
<Node Id="10319:[80331..80364).1" Label="DiagnosticInfo useSiteDiagnostic; 673010" />
<Node Id="10319:[80378..80479).1" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 673011" />
<Node Id="10319:[80378..80479).2" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 673012" />
<Node Id="10319:[80378..80479).3" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 673013" />
<Node Id="10319:[80378..80479).4" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 673014" />
<Node Id="10319:[80400..80478).1" Label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 673015" />
<Node Id="10319:[80843..80872).1" Label="param GetWellKnownTypeMember(CSharpCompilation compilation) 673016" />
<Node Id="10319:[80874..80896).1" Label="param GetWellKnownTypeMember(WellKnownMember member) 673017" />
<Node Id="10319:[80898..80931).1" Label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 673018" />
<Node Id="10319:[80933..80956).1" Label="param GetWellKnownTypeMember(bool isOptional = false) 673019" />
<Node Id="10319:[80982..81047).1" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 673020" />
<Node Id="10319:[80982..81047).2" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 673021" />
<Node Id="10319:[80982..81047).3" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 673022" />
<Node Id="10060:[2841..2854).1" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 673023" />
<Node Id="10060:[2856..2875).1" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 673024" />
<Node Id="10060:[2901..2932).1" Label="Debug.Assert(symbol is object); 673025" />
<Node Id="10060:[2948..3467).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 673026" />
<Node Id="10060:[3483..3502).1" Label="isInternal = false; 673027" />
<Node Id="10060:[3553..4223).1" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 673028" />
<Node Id="10060:[4243..4274).1" Label="symbol = symbol.ContainingType; 673029" />
<Node Id="10060:[3518..4328).1" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 673030" />
<Node Id="10060:[4344..4356).1" Label="return true; 673031" />
<Node Id="10319:[80982..81047).8" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 673032" />
<Node Id="10060:[2841..2854).2" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 673033" />
<Node Id="10060:[2856..2875).2" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 673034" />
<Node Id="10060:[2901..2932).3" Label="Debug.Assert(symbol is object); 673035" />
<Node Id="10060:[2948..3467).2" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 673036" />
<Node Id="10060:[3553..4223).2" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 673037" />
<Node Id="10060:[4243..4274).2" Label="symbol = symbol.ContainingType; 673038" />
<Node Id="10060:[3518..4328).2" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 673039" />
<Node Id="10060:[3553..4223).3" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 673040" />
<Node Id="10319:[80982..81047).15" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 673041" />
<Node Id="10319:[81063..82500).1" Label="if ((object)memberSymbol != null)
            {
                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();
                if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                }
            }
            else if (!isOptional)
            {
                // member is missing
                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);
                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);
            }
            else
            {
                diagnosticInfo = null;
            } 673042" />
<Node Id="10319:[81063..82500).2" Label="if ((object)memberSymbol != null)
            {
                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();
                if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                }
            }
            else if (!isOptional)
            {
                // member is missing
                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);
                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);
            }
            else
            {
                diagnosticInfo = null;
            } 673043" />
<Node Id="10319:[81129..81207).1" Label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 673044" />
<Node Id="10319:[81129..81207).2" Label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 673045" />
<Node Id="10060:[2841..2854).4" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 673046" />
<Node Id="10060:[2856..2875).4" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 673047" />
<Node Id="10060:[2901..2932).7" Label="Debug.Assert(symbol is object); 673048" />
<Node Id="10060:[2948..3467).4" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 673049" />
<Node Id="10060:[3483..3502).7" Label="isInternal = false; 673050" />
<Node Id="10060:[3553..4223).6" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 673051" />
<Node Id="10060:[4243..4274).6" Label="symbol = symbol.ContainingType; 673052" />
<Node Id="10060:[3518..4328).6" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 673053" />
<Node Id="10060:[2841..2854).5" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 673054" />
<Node Id="10060:[2856..2875).5" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 673055" />
<Node Id="10060:[2901..2932).9" Label="Debug.Assert(symbol is object); 673056" />
<Node Id="10060:[2948..3467).5" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 673057" />
<Node Id="10060:[3553..4223).7" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 673058" />
<Node Id="10060:[4243..4274).7" Label="symbol = symbol.ContainingType; 673059" />
<Node Id="10060:[3518..4328).7" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 673060" />
<Node Id="10319:[81225..82039).1" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 673061" />
<Node Id="10319:[81225..82039).2" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 673062" />
<Node Id="10319:[82516..82536).1" Label="return memberSymbol; 673063" />
<Node Id="10319:[80495..80738).1" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 673064" />
<Node Id="10319:[80495..80738).2" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 673065" />
<Node Id="10319:[80754..80774).1" Label="return memberSymbol; 673066" />
<Node Id="10060:[2841..2854).9" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 673067" />
<Node Id="10060:[2856..2875).9" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 673068" />
<Node Id="10060:[2901..2932).17" Label="Debug.Assert(symbol is object); 673069" />
<Node Id="10060:[2948..3467).9" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 673070" />
<Node Id="10060:[3553..4223).11" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 673071" />
<Node Id="10060:[4243..4274).11" Label="symbol = symbol.ContainingType; 673072" />
<Node Id="10060:[3518..4328).11" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 673073" />
<Node Id="10060:[2841..2854).10" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 673074" />
<Node Id="10060:[2856..2875).10" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 673075" />
<Node Id="10060:[2901..2932).19" Label="Debug.Assert(symbol is object); 673076" />
<Node Id="10060:[2948..3467).10" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 673077" />
<Node Id="10060:[3553..4223).12" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 673078" />
<Node Id="10060:[4243..4274).12" Label="symbol = symbol.ContainingType; 673079" />
<Node Id="10060:[3518..4328).12" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 673080" />
<Node Id="10319:[81225..82039).4" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 673081" />
<Node Id="10319:[81225..82039).5" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 673082" />
<Node Id="10319:[82516..82536).2" Label="return memberSymbol; 673083" />
<Node Id="10319:[80495..80738).5" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 673084" />
<Node Id="10319:[80754..80774).2" Label="return memberSymbol; 673085" />
<Node Id="10319:[81225..82039).7" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 673086" />
<Node Id="10319:[82516..82536).3" Label="return memberSymbol; 673087" />
<Node Id="10319:[80754..80774).3" Label="return memberSymbol; 673088" />
<Node Id="10076:[2308..2337).1" Label="param BinderFactory(CSharpCompilation compilation) 673089" />
<Node Id="10076:[2339..2360).1" Label="param BinderFactory(SyntaxTree syntaxTree) 673090" />
<Node Id="10076:[2362..2386).1" Label="param BinderFactory(bool ignoreAccessibility) 673091" />
<Node Id="10076:[2285..3386).1" Label="param BinderFactory(this) 673092" />
<Node Id="10076:[1715..1727).1" Label="_binderCache 673093" />
<Node Id="10076:[1773..1785).1" Label="_compilation 673094" />
<Node Id="10076:[1824..1835).1" Label="_syntaxTree 673095" />
<Node Id="10076:[1883..1903).1" Label="_buckStopsHereBinder 673096" />
<Node Id="10076:[1936..1956).1" Label="_ignoreAccessibility 673097" />
<Node Id="10076:[2247..2272).1" Label="_binderFactoryVisitorPool 673098" />
<Node Id="10076:[2412..2424).1" Label="_compilation 673099" />
<Node Id="10076:[2453..2464).1" Label="_syntaxTree 673100" />
<Node Id="10076:[2492..2512).1" Label="_ignoreAccessibility 673101" />
<Node Id="10076:[2551..2658).1" Label="_binderFactoryVisitorPool = new ObjectPool$BinderFactoryVisitor$(() =$ new BinderFactoryVisitor(this), 64); 673102" />
<Node Id="10076:[2551..2658).3" Label="_binderFactoryVisitorPool = new ObjectPool$BinderFactoryVisitor$(() =$ new BinderFactoryVisitor(this), 64); 673103" />
<Node Id="10076:[2551..2658).5" Label="_binderFactoryVisitorPool = new ObjectPool$BinderFactoryVisitor$(() =$ new BinderFactoryVisitor(this), 64); 673104" />
<Node Id="10076:[2551..2576).1" Label="_binderFactoryVisitorPool 673105" />
<Node Id="10076:[3236..3299).1" Label="_binderCache = new ConcurrentCache$BinderCacheKey, Binder$(50); 673106" />
<Node Id="10076:[3236..3248).1" Label="_binderCache 673107" />
<Node Id="10076:[3315..3375).1" Label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 673108" />
<Node Id="10076:[3315..3375).2" Label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 673109" />
<Node Id="10076:[3338..3374).1" Label="new BuckStopsHereBinder(compilation) 673110" />
<Node Id="10325:[645..674).1" Label="param BuckStopsHereBinder(CSharpCompilation compilation) 673111" />
<Node Id="10325:[616..730).1" Label="param BuckStopsHereBinder(this) 673112" />
<Node Id="10325:[696..707).1" Label="compilation 673113" />
<Node Id="10325:[616..730).2" Label="param BuckStopsHereBinder(this) 673114" />
<Node Id="10286:[939..968).1" Label="param Binder(CSharpCompilation compilation) 673115" />
<Node Id="10286:[923..1219).1" Label="param Binder(this) 673116" />
<Node Id="10286:[726..773).1" Label="internal CSharpCompilation Compilation { get; } 673117" />
<Node Id="10286:[815..820).1" Label="Flags 673118" />
<Node Id="10286:[2975..3015).1" Label="protected internal Binder? Next { get; } 673119" />
<Node Id="10286:[17802..17818).1" Label="_lazyConversions 673120" />
<Node Id="10286:[18200..18223).1" Label="_lazyOverloadResolution 673121" />
<Node Id="10286:[994..1034).1" Label="RoslynDebug.Assert(compilation != null); 673122" />
<Node Id="10286:[994..1034).2" Label="RoslynDebug.Assert(compilation != null); 673123" />
<Node Id="10286:[1048..1096).1" Label="RoslynDebug.Assert(this is BuckStopsHereBinder); 673124" />
<Node Id="10286:[1048..1096).2" Label="RoslynDebug.Assert(this is BuckStopsHereBinder); 673125" />
<Node Id="10286:[1110..1120).1" Label="this.Flags 673126" />
<Node Id="10286:[1177..1193).1" Label="this.Compilation 673127" />
<Node Id="10076:[3315..3335).1" Label="_buckStopsHereBinder 673128" />
<Node Id="25002:[4395..4432).19" Label="var diagnostics = c.GetDiagnostics(); 673129" />
<Node Id="10076:[7557..7578).1" Label="param GetImportsBinder(CSharpSyntaxNode unit) 673130" />
<Node Id="10076:[7580..7600).1" Label="param GetImportsBinder(bool inUsing = false) 673131" />
<Node Id="10076:[7524..8834).1" Label="param GetImportsBinder(this) 673132" />
<Node Id="10076:[7626..8823).1" Label="switch (unit.Kind())
            {
                case SyntaxKind.NamespaceDeclaration:
                    {
                        BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate();
                        visitor.Initialize(0, null, null);
                        Binder result = visitor.VisitNamespaceDeclaration((NamespaceDeclarationSyntax)unit, unit.SpanStart, inBody: true, inUsing: inUsing);
                        _binderFactoryVisitorPool.Free(visitor);
                        return result;
                    }

                case SyntaxKind.CompilationUnit:
                    // imports are bound by the Script class binder:
                    {
                        BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate();
                        visitor.Initialize(0, null, null);
                        Binder result = visitor.VisitCompilationUnit((CompilationUnitSyntax)unit, inUsing: inUsing, inScript: InScript);
                        _binderFactoryVisitorPool.Free(visitor);
                        return result;
                    }

                default:
                    return null;
            } 673133" />
<Node Id="10076:[8351..8419).1" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 673134" />
<Node Id="10076:[8351..8419).3" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 673135" />
<Node Id="10077:[909..930).1" Label="param BinderFactoryVisitor(BinderFactory factory) 673136" />
<Node Id="10077:[879..998).1" Label="param BinderFactoryVisitor(this) 673137" />
<Node Id="10077:[879..998).2" Label="param BinderFactoryVisitor(this) 673138" />
<Node Id="10077:[698..707).1" Label="_position 673139" />
<Node Id="10077:[747..768).1" Label="_memberDeclarationOpt 673140" />
<Node Id="10077:[798..808).1" Label="_memberOpt 673141" />
<Node Id="10077:[854..862).1" Label="_factory 673142" />
<Node Id="10077:[964..972).1" Label="_factory 673143" />
<Node Id="10076:[8351..8419).4" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 673144" />
<Node Id="10076:[8445..8479).1" Label="visitor.Initialize(0, null, null); 673145" />
<Node Id="10076:[8445..8478).1" Label="visitor.Initialize(0, null, null) 673146" />
<Node Id="10077:[1039..1051).1" Label="param Initialize(int position) 673147" />
<Node Id="10077:[1053..1090).1" Label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 673148" />
<Node Id="10077:[1092..1108).1" Label="param Initialize(Symbol memberOpt) 673149" />
<Node Id="10077:[1014..1370).1" Label="param Initialize(this) 673150" />
<Node Id="10077:[1142..1210).1" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 673151" />
<Node Id="10077:[1142..1210).2" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 673152" />
<Node Id="10077:[1142..1210).4" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 673153" />
<Node Id="10077:[1142..1210).5" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 673154" />
<Node Id="10077:[1230..1239).1" Label="_position 673155" />
<Node Id="10077:[1269..1290).1" Label="_memberDeclarationOpt 673156" />
<Node Id="10077:[1332..1342).1" Label="_memberOpt 673157" />
<Node Id="10076:[8505..8617).1" Label="Binder result = visitor.VisitCompilationUnit((CompilationUnitSyntax)unit, inUsing: inUsing, inScript: InScript); 673158" />
<Node Id="10076:[8505..8617).2" Label="Binder result = visitor.VisitCompilationUnit((CompilationUnitSyntax)unit, inUsing: inUsing, inScript: InScript); 673159" />
<Node Id="10076:[8607..8615).1" Label="InScript 673160" />
<Node Id="10076:[3592..3700).1" Label="get
            {
                return _syntaxTree.Options.Kind == SourceCodeKind.Script;
            } 673161" />
<Node Id="10076:[3628..3685).1" Label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 673162" />
<Node Id="10076:[8505..8617).3" Label="Binder result = visitor.VisitCompilationUnit((CompilationUnitSyntax)unit, inUsing: inUsing, inScript: InScript); 673163" />
<Node Id="10076:[8521..8616).1" Label="visitor.VisitCompilationUnit((CompilationUnitSyntax)unit, inUsing: inUsing, inScript: InScript) 673164" />
<Node Id="10077:[39298..39335).1" Label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 673165" />
<Node Id="10077:[39337..39349).1" Label="param VisitCompilationUnit(bool inUsing) 673166" />
<Node Id="10077:[39351..39364).1" Label="param VisitCompilationUnit(bool inScript) 673167" />
<Node Id="10077:[39261..44091).1" Label="param VisitCompilationUnit(this) 673168" />
<Node Id="10077:[39421..39431).1" Label="syntaxTree 673169" />
<Node Id="10077:[1641..1732).1" Label="get
                {
                    return _factory._syntaxTree;
                } 673170" />
<Node Id="10077:[1685..1713).1" Label="return _factory._syntaxTree; 673171" />
<Node Id="10077:[39398..39590).1" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 673172" />
<Node Id="10077:[39398..39590).2" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 673173" />
<Node Id="10077:[39398..39590).5" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 673174" />
<Node Id="10077:[39626..39633).1" Label="inUsing 673175" />
<Node Id="10077:[39766..39774).1" Label="inScript 673176" />
<Node Id="10077:[39610..39829).1" Label="var extraInfo = inUsing
                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)
                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 673177" />
<Node Id="10077:[39877..39936).1" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 673178" />
<Node Id="10077:[39877..39936).2" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 673179" />
<Node Id="10077:[39887..39935).1" Label="CreateBinderCacheKey(compilationUnit, extraInfo) 673180" />
<Node Id="10077:[44159..44180).1" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 673181" />
<Node Id="10077:[44182..44197).1" Label="param CreateBinderCacheKey(NodeUsage usage) 673182" />
<Node Id="10077:[44231..44317).1" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 673183" />
<Node Id="10077:[44231..44317).3" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 673184" />
<Node Id="10077:[44335..44374).1" Label="return new BinderCacheKey(node, usage); 673185" />
<Node Id="10077:[44335..44374).2" Label="return new BinderCacheKey(node, usage); 673186" />
<Node Id="10077:[44335..44374).3" Label="return new BinderCacheKey(node, usage); 673187" />
<Node Id="10077:[44342..44373).1" Label="new BinderCacheKey(node, usage) 673188" />
<Node Id="10076:[875..902).1" Label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 673189" />
<Node Id="10076:[904..919).1" Label="param BinderCacheKey(NodeUsage usage) 673190" />
<Node Id="10076:[853..1034).1" Label="param BinderCacheKey(this) 673191" />
<Node Id="10076:[953..968).1" Label="this.syntaxNode 673192" />
<Node Id="10076:[1000..1010).1" Label="this.usage 673193" />
<Node Id="10077:[39877..39936).3" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 673194" />
<Node Id="10077:[39956..39970).1" Label="Binder result; 673195" />
<Node Id="10077:[39993..40004).1" Label="binderCache 673196" />
<Node Id="10077:[2066..2158).1" Label="get
                {
                    return _factory._binderCache;
                } 673197" />
<Node Id="10077:[2110..2139).1" Label="return _factory._binderCache; 673198" />
<Node Id="10077:[39988..44042).1" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 673199" />
<Node Id="10077:[39988..44042).2" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 673200" />
<Node Id="10077:[39988..44042).3" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 673201" />
<Node Id="10077:[39988..44042).4" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 673202" />
<Node Id="10077:[39988..44042).5" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 673203" />
<Node Id="10076:[1241..1380).1" Label="param GetHashCode(this) 673204" />
<Node Id="10076:[1307..1365).1" Label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 673205" />
<Node Id="10077:[40084..40108).1" Label="this.buckStopsHereBinder 673206" />
<Node Id="10077:[1843..1943).1" Label="get
                {
                    return _factory._buckStopsHereBinder;
                } 673207" />
<Node Id="10077:[1887..1924).1" Label="return _factory._buckStopsHereBinder; 673208" />
<Node Id="10077:[40075..40109).1" Label="result = this.buckStopsHereBinder; 673209" />
<Node Id="10077:[40133..43967).1" Label="if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    } 673210" />
<Node Id="10077:[43302..43313).1" Label="compilation 673211" />
<Node Id="10077:[1456..1548).1" Label="get
                {
                    return _factory._compilation;
                } 673212" />
<Node Id="10077:[1500..1529).1" Label="return _factory._compilation; 673213" />
<Node Id="10077:[43271..43374).1" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 673214" />
<Node Id="10077:[43271..43374).3" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 673215" />
<Node Id="10077:[43271..43374).4" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 673216" />
<Node Id="10077:[43271..43374).5" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 673217" />
<Node Id="10077:[43271..43374).6" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 673218" />
<Node Id="10077:[43280..43373).1" Label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 673219" />
<Node Id="10346:[1426..1457).1" Label="param InContainerBinder(NamespaceOrTypeSymbol container) 673220" />
<Node Id="10346:[1459..1470).1" Label="param InContainerBinder(Binder next) 673221" />
<Node Id="10346:[1472..1506).1" Label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 673222" />
<Node Id="10346:[1508..1520).1" Label="param InContainerBinder(bool inUsing) 673223" />
<Node Id="10346:[1399..2435).1" Label="param InContainerBinder(this) 673224" />
<Node Id="10346:[1542..1546).1" Label="next 673225" />
<Node Id="10346:[1399..2435).2" Label="param InContainerBinder(this) 673226" />
<Node Id="10286:[1247..1258).1" Label="param Binder(Binder next) 673227" />
<Node Id="10286:[1231..1520).1" Label="param Binder(this) 673228" />
<Node Id="10286:[1260..1291).1" Label="param Binder(Conversions? conversions = null) 673229" />
<Node Id="10286:[1317..1350).1" Label="RoslynDebug.Assert(next != null); 673230" />
<Node Id="10286:[1317..1350).2" Label="RoslynDebug.Assert(next != null); 673231" />
<Node Id="10286:[1364..1368).1" Label="Next 673232" />
<Node Id="10286:[1390..1400).1" Label="this.Flags 673233" />
<Node Id="10286:[1428..1444).1" Label="this.Compilation 673234" />
<Node Id="10286:[1478..1494).1" Label="_lazyConversions 673235" />
<Node Id="10346:[858..868).1" Label="_container 673236" />
<Node Id="10346:[932..947).1" Label="_computeImports 673237" />
<Node Id="10346:[974..986).1" Label="_lazyImports 673238" />
<Node Id="10346:[1017..1033).1" Label="_lazyImportChain 673239" />
<Node Id="10346:[1074..1100).1" Label="_lazyQuickAttributeChecker 673240" />
<Node Id="10346:[1572..1612).1" Label="Debug.Assert((object)container != null); 673241" />
<Node Id="10346:[1572..1612).2" Label="Debug.Assert((object)container != null); 673242" />
<Node Id="10346:[1626..1666).1" Label="Debug.Assert(declarationSyntax != null); 673243" />
<Node Id="10346:[1626..1666).2" Label="Debug.Assert(declarationSyntax != null); 673244" />
<Node Id="10346:[1682..1692).1" Label="_container 673245" />
<Node Id="10346:[1719..1832).1" Label="_computeImports = basesBeingResolved =$ Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 673246" />
<Node Id="10346:[1719..1734).1" Label="_computeImports 673247" />
<Node Id="10346:[1848..2424).1" Label="if (!inUsing)
            {
                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
                {
                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                    _usingsSyntax = compilationUnit.Usings;
                }
                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                }
            } 673248" />
<Node Id="10346:[1894..2409).1" Label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
                {
                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                    _usingsSyntax = compilationUnit.Usings;
                }
                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                } 673249" />
<Node Id="10346:[1994..2057).1" Label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 673250" />
<Node Id="10346:[2079..2092).1" Label="_usingsSyntax 673251" />
<Node Id="10077:[43503..43514).1" Label="compilation 673252" />
<Node Id="10077:[1456..1548).2" Label="get
                {
                    return _factory._compilation;
                } 673253" />
<Node Id="10077:[1500..1529).2" Label="return _factory._compilation; 673254" />
<Node Id="10077:[43402..43944).1" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 673255" />
<Node Id="10077:[43402..43944).3" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 673256" />
<Node Id="10077:[43402..43944).4" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 673257" />
<Node Id="10077:[43991..44002).1" Label="binderCache 673258" />
<Node Id="10077:[2110..2139).2" Label="return _factory._binderCache; 673259" />
<Node Id="10077:[43991..44023).1" Label="binderCache.TryAdd(key, result); 673260" />
<Node Id="10077:[43991..44023).2" Label="binderCache.TryAdd(key, result); 673261" />
<Node Id="10077:[43991..44023).3" Label="binderCache.TryAdd(key, result); 673262" />
<Node Id="10077:[43991..44023).4" Label="binderCache.TryAdd(key, result); 673263" />
<Node Id="10077:[43991..44023).5" Label="binderCache.TryAdd(key, result); 673264" />
<Node Id="10077:[44062..44076).1" Label="return result; 673265" />
<Node Id="10076:[8643..8683).1" Label="_binderFactoryVisitorPool.Free(visitor); 673266" />
<Node Id="10076:[8643..8683).2" Label="_binderFactoryVisitorPool.Free(visitor); 673267" />
<Node Id="10076:[8709..8723).1" Label="return result; 673268" />
<Node Id="25002:[4395..4432).22" Label="var diagnostics = c.GetDiagnostics(); 673269" />
<Node Id="10346:[3460..3499).1" Label="param GetImports(ConsList$TypeSymbol$ basesBeingResolved) 673270" />
<Node Id="10346:[3423..3863).1" Label="param GetImports(this) 673271" />
<Node Id="10346:[3525..3638).1" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 673272" />
<Node Id="10346:[3525..3638).2" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 673273" />
<Node Id="10346:[3654..3816).1" Label="if (_lazyImports == null)
            {
                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);
            } 673274" />
<Node Id="10346:[3654..3816).2" Label="if (_lazyImports == null)
            {
                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);
            } 673275" />
<Node Id="10346:[3712..3801).1" Label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 673276" />
<Node Id="10346:[3712..3801).2" Label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 673277" />
<Node Id="10346:[3712..3801).4" Label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 673278" />
<Node Id="10345:[2889..2923).1" Label="param FromSyntax(CSharpSyntaxNode declarationSyntax) 673279" />
<Node Id="10345:[2938..2962).1" Label="param FromSyntax(InContainerBinder binder) 673280" />
<Node Id="10345:[2977..3016).1" Label="param FromSyntax(ConsList$TypeSymbol$ basesBeingResolved) 673281" />
<Node Id="10345:[3031..3043).1" Label="param FromSyntax(bool inUsing) 673282" />
<Node Id="10345:[3069..3118).1" Label="SyntaxList$UsingDirectiveSyntax$ usingDirectives; 673283" />
<Node Id="10345:[3102..3117).1" Label="usingDirectives 673284" />
<Node Id="10345:[3132..3193).1" Label="SyntaxList$ExternAliasDirectiveSyntax$ externAliasDirectives; 673285" />
<Node Id="10345:[3171..3192).1" Label="externAliasDirectives 673286" />
<Node Id="10345:[3207..4163).1" Label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
            {
                var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                // using directives are not in scope within using directives
                usingDirectives = inUsing ? default(SyntaxList$UsingDirectiveSyntax$) : compilationUnit.Usings;
                externAliasDirectives = compilationUnit.Externs;
            }
            else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
            {
                var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                // using directives are not in scope within using directives
                usingDirectives = inUsing ? default(SyntaxList$UsingDirectiveSyntax$) : namespaceDecl.Usings;
                externAliasDirectives = namespaceDecl.Externs;
            }
            else
            {
                return Empty;
            } 673287" />
<Node Id="10345:[3299..3362).1" Label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 673288" />
<Node Id="10345:[3476..3483).1" Label="inUsing 673289" />
<Node Id="10345:[3530..3552).1" Label="compilationUnit.Usings 673290" />
<Node Id="10345:[3458..3553).1" Label="usingDirectives = inUsing ? default(SyntaxList$UsingDirectiveSyntax$) : compilationUnit.Usings; 673291" />
<Node Id="10345:[3571..3619).1" Label="externAliasDirectives = compilationUnit.Externs; 673292" />
<Node Id="10345:[4179..4307).1" Label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)
            {
                return Empty;
            } 673293" />
<Node Id="10345:[4179..4307).2" Label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)
            {
                return Empty;
            } 673294" />
<Node Id="10345:[4524..4562).1" Label="var diagnostics = new DiagnosticBag(); 673295" />
<Node Id="10345:[4578..4615).1" Label="var compilation = binder.Compilation; 673296" />
<Node Id="10345:[4631..4714).1" Label="var externAliases = BuildExternAliases(externAliasDirectives, binder, diagnostics); 673297" />
<Node Id="10345:[4631..4714).2" Label="var externAliases = BuildExternAliases(externAliasDirectives, binder, diagnostics); 673298" />
<Node Id="10345:[4631..4714).3" Label="var externAliases = BuildExternAliases(externAliasDirectives, binder, diagnostics); 673299" />
<Node Id="10345:[4651..4713).1" Label="BuildExternAliases(externAliasDirectives, binder, diagnostics) 673300" />
<Node Id="10345:[22236..22285).1" Label="param BuildExternAliases(SyntaxList$ExternAliasDirectiveSyntax$ syntaxList) 673301" />
<Node Id="10345:[22300..22324).1" Label="param BuildExternAliases(InContainerBinder binder) 673302" />
<Node Id="10345:[22339..22364).1" Label="param BuildExternAliases(DiagnosticBag diagnostics) 673303" />
<Node Id="10345:[22390..22441).1" Label="CSharpCompilation compilation = binder.Compilation; 673304" />
<Node Id="10345:[22457..22528).1" Label="var builder = ArrayBuilder$AliasAndExternAliasDirective$.GetInstance(); 673305" />
<Node Id="10345:[22544..23796).1" Label="foreach (ExternAliasDirectiveSyntax aliasSyntax in syntaxList)
            {
                compilation.RecordImport(aliasSyntax);

                // Extern aliases not allowed in interactive submissions:
                if (compilation.IsSubmission)
                {
                    diagnostics.Add(ErrorCode.ERR_ExternAliasNotAllowed, aliasSyntax.Location);
                    continue;
                }

                // some n^2 action, but n should be very small.
                foreach (var existingAlias in builder)
                {
                    if (existingAlias.Alias.Name == aliasSyntax.Identifier.ValueText)
                    {
                        diagnostics.Add(ErrorCode.ERR_DuplicateAlias, existingAlias.Alias.Locations[0], existingAlias.Alias.Name);
                        break;
                    }
                }

                if (aliasSyntax.Identifier.ContextualKind() == SyntaxKind.GlobalKeyword)
                {
                    diagnostics.Add(ErrorCode.ERR_GlobalExternAlias, aliasSyntax.Identifier.GetLocation());
                }

                builder.Add(new AliasAndExternAliasDirective(new AliasSymbol(binder, aliasSyntax), aliasSyntax));
            } 673306" />
<Node Id="10345:[22544..23796).2" Label="foreach (ExternAliasDirectiveSyntax aliasSyntax in syntaxList)
            {
                compilation.RecordImport(aliasSyntax);

                // Extern aliases not allowed in interactive submissions:
                if (compilation.IsSubmission)
                {
                    diagnostics.Add(ErrorCode.ERR_ExternAliasNotAllowed, aliasSyntax.Location);
                    continue;
                }

                // some n^2 action, but n should be very small.
                foreach (var existingAlias in builder)
                {
                    if (existingAlias.Alias.Name == aliasSyntax.Identifier.ValueText)
                    {
                        diagnostics.Add(ErrorCode.ERR_DuplicateAlias, existingAlias.Alias.Locations[0], existingAlias.Alias.Name);
                        break;
                    }
                }

                if (aliasSyntax.Identifier.ContextualKind() == SyntaxKind.GlobalKeyword)
                {
                    diagnostics.Add(ErrorCode.ERR_GlobalExternAlias, aliasSyntax.Identifier.GetLocation());
                }

                builder.Add(new AliasAndExternAliasDirective(new AliasSymbol(binder, aliasSyntax), aliasSyntax));
            } 673307" />
<Node Id="10345:[23812..23848).1" Label="return builder.ToImmutableAndFree(); 673308" />
<Node Id="10345:[4631..4714).4" Label="var externAliases = BuildExternAliases(externAliasDirectives, binder, diagnostics); 673309" />
<Node Id="10345:[4728..4802).1" Label="var usings = ArrayBuilder$NamespaceOrTypeAndUsingDirective$.GetInstance(); 673310" />
<Node Id="10345:[4816..4896).1" Label="ImmutableDictionary$string, AliasAndUsingDirective$.Builder usingAliases = null; 673311" />
<Node Id="10345:[4910..12753).1" Label="if (usingDirectives.Count $ 0)
            {
                // A binder that contains the extern aliases but not the usings. The resolution of the target of a using directive or alias 
                // should not make use of other peer usings.
                Binder usingsBinder;
                if (declarationSyntax.SyntaxTree.Options.Kind != SourceCodeKind.Regular)
                {
                    usingsBinder = compilation.GetBinderFactory(declarationSyntax.SyntaxTree).GetImportsBinder(declarationSyntax, inUsing: true);
                }
                else
                {
                    var imports = externAliases.Length == 0
                        ? Empty
                        : new Imports(
                            compilation,
                            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
                            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
                            externAliases,
                            diagnostics: null);
                    usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports);
                }

                var uniqueUsings = SpecializedSymbolCollections.GetPooledSymbolHashSetInstance$NamespaceOrTypeSymbol$();

                foreach (var usingDirective in usingDirectives)
                {
                    compilation.RecordImport(usingDirective);

                    if (usingDirective.Alias != null)
                    {
                        SyntaxToken identifier = usingDirective.Alias.Name.Identifier;
                        Location location = usingDirective.Alias.Name.Location;

                        if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)
                        {
                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);
                        }

                        if (usingDirective.StaticKeyword != default(SyntaxToken))
                        {
                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);
                        }

                        SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location);

                        string identifierValueText = identifier.ValueText;
                        if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))
                        {
                            // Suppress diagnostics if we're already broken.
                            if (!usingDirective.Name.IsMissing)
                            {
                                // The using alias '{0}' appeared previously in this namespace
                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);
                            }
                        }
                        else
                        {
                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.
                            foreach (var externAlias in externAliases)
                            {
                                if (externAlias.Alias.Name == identifierValueText)
                                {
                                    // The using alias '{0}' appeared previously in this namespace
                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);
                                    break;
                                }
                            }

                            if (usingAliases == null)
                            {
                                usingAliases = ImmutableDictionary.CreateBuilder$string, AliasAndUsingDirective$();
                            }

                            // construct the alias sym with the binder for which we are building imports. That
                            // way the alias target can make use of extern alias definitions.
                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));
                        }
                    }
                    else
                    {
                        if (usingDirective.Name.IsMissing)
                        {
                            //don't try to lookup namespaces inserted by parser error recovery
                            continue;
                        }

                        var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks);
                        var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol;
                        if (imported.Kind == SymbolKind.Namespace)
                        {
                            if (usingDirective.StaticKeyword != default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);
                            }
                            else if (uniqueUsings.Contains(imported))
                            {
                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                uniqueUsings.Add(imported);
                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));
                            }
                        }
                        else if (imported.Kind == SymbolKind.NamedType)
                        {
                            if (usingDirective.StaticKeyword == default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                var importedType = (NamedTypeSymbol)imported;
                                if (uniqueUsings.Contains(importedType))
                                {
                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);
                                }
                                else
                                {
                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);

                                    uniqueUsings.Add(importedType);
                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));
                                }
                            }
                        }
                        else if (imported.Kind != SymbolKind.ErrorType)
                        {
                            // Do not report additional error if the symbol itself is erroneous.

                            // error: '$symbol$' is a '$symbol kind$' but is used as 'type or namespace'
                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,
                                usingDirective.Name,
                                imported.GetKindText(),
                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());
                        }
                    }
                }

                uniqueUsings.Free();
            } 673312" />
<Node Id="10345:[4910..12753).2" Label="if (usingDirectives.Count $ 0)
            {
                // A binder that contains the extern aliases but not the usings. The resolution of the target of a using directive or alias 
                // should not make use of other peer usings.
                Binder usingsBinder;
                if (declarationSyntax.SyntaxTree.Options.Kind != SourceCodeKind.Regular)
                {
                    usingsBinder = compilation.GetBinderFactory(declarationSyntax.SyntaxTree).GetImportsBinder(declarationSyntax, inUsing: true);
                }
                else
                {
                    var imports = externAliases.Length == 0
                        ? Empty
                        : new Imports(
                            compilation,
                            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
                            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
                            externAliases,
                            diagnostics: null);
                    usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports);
                }

                var uniqueUsings = SpecializedSymbolCollections.GetPooledSymbolHashSetInstance$NamespaceOrTypeSymbol$();

                foreach (var usingDirective in usingDirectives)
                {
                    compilation.RecordImport(usingDirective);

                    if (usingDirective.Alias != null)
                    {
                        SyntaxToken identifier = usingDirective.Alias.Name.Identifier;
                        Location location = usingDirective.Alias.Name.Location;

                        if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)
                        {
                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);
                        }

                        if (usingDirective.StaticKeyword != default(SyntaxToken))
                        {
                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);
                        }

                        SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location);

                        string identifierValueText = identifier.ValueText;
                        if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))
                        {
                            // Suppress diagnostics if we're already broken.
                            if (!usingDirective.Name.IsMissing)
                            {
                                // The using alias '{0}' appeared previously in this namespace
                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);
                            }
                        }
                        else
                        {
                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.
                            foreach (var externAlias in externAliases)
                            {
                                if (externAlias.Alias.Name == identifierValueText)
                                {
                                    // The using alias '{0}' appeared previously in this namespace
                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);
                                    break;
                                }
                            }

                            if (usingAliases == null)
                            {
                                usingAliases = ImmutableDictionary.CreateBuilder$string, AliasAndUsingDirective$();
                            }

                            // construct the alias sym with the binder for which we are building imports. That
                            // way the alias target can make use of extern alias definitions.
                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));
                        }
                    }
                    else
                    {
                        if (usingDirective.Name.IsMissing)
                        {
                            //don't try to lookup namespaces inserted by parser error recovery
                            continue;
                        }

                        var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks);
                        var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol;
                        if (imported.Kind == SymbolKind.Namespace)
                        {
                            if (usingDirective.StaticKeyword != default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);
                            }
                            else if (uniqueUsings.Contains(imported))
                            {
                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                uniqueUsings.Add(imported);
                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));
                            }
                        }
                        else if (imported.Kind == SymbolKind.NamedType)
                        {
                            if (usingDirective.StaticKeyword == default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                var importedType = (NamedTypeSymbol)imported;
                                if (uniqueUsings.Contains(importedType))
                                {
                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);
                                }
                                else
                                {
                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);

                                    uniqueUsings.Add(importedType);
                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));
                                }
                            }
                        }
                        else if (imported.Kind != SymbolKind.ErrorType)
                        {
                            // Do not report additional error if the symbol itself is erroneous.

                            // error: '$symbol$' is a '$symbol kind$' but is used as 'type or namespace'
                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,
                                usingDirective.Name,
                                imported.GetKindText(),
                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());
                        }
                    }
                }

                uniqueUsings.Free();
            } 673313" />
<Node Id="10345:[5177..5197).1" Label="Binder usingsBinder; 673314" />
<Node Id="10345:[5215..6073).1" Label="if (declarationSyntax.SyntaxTree.Options.Kind != SourceCodeKind.Regular)
                {
                    usingsBinder = compilation.GetBinderFactory(declarationSyntax.SyntaxTree).GetImportsBinder(declarationSyntax, inUsing: true);
                }
                else
                {
                    var imports = externAliases.Length == 0
                        ? Empty
                        : new Imports(
                            compilation,
                            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
                            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
                            externAliases,
                            diagnostics: null);
                    usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports);
                } 673315" />
<Node Id="10345:[5535..5955).1" Label="var imports = externAliases.Length == 0
                        ? Empty
                        : new Imports(
                            compilation,
                            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
                            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
                            externAliases,
                            diagnostics: null); 673316" />
<Node Id="10345:[5535..5955).2" Label="var imports = externAliases.Length == 0
                        ? Empty
                        : new Imports(
                            compilation,
                            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
                            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
                            externAliases,
                            diagnostics: null); 673317" />
<Node Id="10345:[5549..5574).1" Label="externAliases.Length == 0 673318" />
<Node Id="10345:[6014..6030).1" Label="binder.Container 673319" />
<Node Id="10346:[3331..3400).1" Label="get
            {
                return _container;
            } 673320" />
<Node Id="10346:[3367..3385).1" Label="return _container; 673321" />
<Node Id="10345:[5977..6054).1" Label="usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports); 673322" />
<Node Id="10345:[5977..6054).3" Label="usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports); 673323" />
<Node Id="10345:[5977..6054).4" Label="usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports); 673324" />
<Node Id="10345:[5977..6054).5" Label="usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports); 673325" />
<Node Id="10345:[5992..6053).1" Label="new InContainerBinder(binder.Container, binder.Next, imports) 673326" />
<Node Id="10346:[2571..2602).1" Label="param InContainerBinder(NamespaceOrTypeSymbol container) 673327" />
<Node Id="10346:[2604..2615).1" Label="param InContainerBinder(Binder next) 673328" />
<Node Id="10346:[2617..2639).1" Label="param InContainerBinder(Imports imports = null) 673329" />
<Node Id="10346:[2544..2854).1" Label="param InContainerBinder(this) 673330" />
<Node Id="10346:[2661..2665).1" Label="next 673331" />
<Node Id="10346:[2544..2854).2" Label="param InContainerBinder(this) 673332" />
<Node Id="10286:[1247..1258).2" Label="param Binder(Binder next) 673333" />
<Node Id="10286:[1317..1350).5" Label="RoslynDebug.Assert(next != null); 673334" />
<Node Id="10286:[1317..1350).6" Label="RoslynDebug.Assert(next != null); 673335" />
<Node Id="10346:[858..868).2" Label="_container 673336" />
<Node Id="10346:[932..947).2" Label="_computeImports 673337" />
<Node Id="10346:[2691..2750).1" Label="Debug.Assert((object)container != null || imports != null); 673338" />
<Node Id="10346:[2691..2750).2" Label="Debug.Assert((object)container != null || imports != null); 673339" />
<Node Id="10346:[2766..2776).1" Label="_container 673340" />
<Node Id="10346:[2803..2843).1" Label="_lazyImports = imports ?? Imports.Empty; 673341" />
<Node Id="10346:[2803..2815).1" Label="_lazyImports 673342" />
<Node Id="10345:[6093..6197).1" Label="var uniqueUsings = SpecializedSymbolCollections.GetPooledSymbolHashSetInstance$NamespaceOrTypeSymbol$(); 673343" />
<Node Id="10345:[6217..12698).1" Label="foreach (var usingDirective in usingDirectives)
                {
                    compilation.RecordImport(usingDirective);

                    if (usingDirective.Alias != null)
                    {
                        SyntaxToken identifier = usingDirective.Alias.Name.Identifier;
                        Location location = usingDirective.Alias.Name.Location;

                        if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)
                        {
                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);
                        }

                        if (usingDirective.StaticKeyword != default(SyntaxToken))
                        {
                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);
                        }

                        SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location);

                        string identifierValueText = identifier.ValueText;
                        if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))
                        {
                            // Suppress diagnostics if we're already broken.
                            if (!usingDirective.Name.IsMissing)
                            {
                                // The using alias '{0}' appeared previously in this namespace
                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);
                            }
                        }
                        else
                        {
                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.
                            foreach (var externAlias in externAliases)
                            {
                                if (externAlias.Alias.Name == identifierValueText)
                                {
                                    // The using alias '{0}' appeared previously in this namespace
                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);
                                    break;
                                }
                            }

                            if (usingAliases == null)
                            {
                                usingAliases = ImmutableDictionary.CreateBuilder$string, AliasAndUsingDirective$();
                            }

                            // construct the alias sym with the binder for which we are building imports. That
                            // way the alias target can make use of extern alias definitions.
                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));
                        }
                    }
                    else
                    {
                        if (usingDirective.Name.IsMissing)
                        {
                            //don't try to lookup namespaces inserted by parser error recovery
                            continue;
                        }

                        var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks);
                        var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol;
                        if (imported.Kind == SymbolKind.Namespace)
                        {
                            if (usingDirective.StaticKeyword != default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);
                            }
                            else if (uniqueUsings.Contains(imported))
                            {
                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                uniqueUsings.Add(imported);
                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));
                            }
                        }
                        else if (imported.Kind == SymbolKind.NamedType)
                        {
                            if (usingDirective.StaticKeyword == default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                var importedType = (NamedTypeSymbol)imported;
                                if (uniqueUsings.Contains(importedType))
                                {
                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);
                                }
                                else
                                {
                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);

                                    uniqueUsings.Add(importedType);
                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));
                                }
                            }
                        }
                        else if (imported.Kind != SymbolKind.ErrorType)
                        {
                            // Do not report additional error if the symbol itself is erroneous.

                            // error: '$symbol$' is a '$symbol kind$' but is used as 'type or namespace'
                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,
                                usingDirective.Name,
                                imported.GetKindText(),
                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());
                        }
                    }
                } 673344" />
<Node Id="10345:[6305..6346).1" Label="compilation.RecordImport(usingDirective); 673345" />
<Node Id="10345:[6305..6346).2" Label="compilation.RecordImport(usingDirective); 673346" />
<Node Id="10345:[6370..12679).1" Label="if (usingDirective.Alias != null)
                    {
                        SyntaxToken identifier = usingDirective.Alias.Name.Identifier;
                        Location location = usingDirective.Alias.Name.Location;

                        if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)
                        {
                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);
                        }

                        if (usingDirective.StaticKeyword != default(SyntaxToken))
                        {
                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);
                        }

                        SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location);

                        string identifierValueText = identifier.ValueText;
                        if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))
                        {
                            // Suppress diagnostics if we're already broken.
                            if (!usingDirective.Name.IsMissing)
                            {
                                // The using alias '{0}' appeared previously in this namespace
                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);
                            }
                        }
                        else
                        {
                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.
                            foreach (var externAlias in externAliases)
                            {
                                if (externAlias.Alias.Name == identifierValueText)
                                {
                                    // The using alias '{0}' appeared previously in this namespace
                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);
                                    break;
                                }
                            }

                            if (usingAliases == null)
                            {
                                usingAliases = ImmutableDictionary.CreateBuilder$string, AliasAndUsingDirective$();
                            }

                            // construct the alias sym with the binder for which we are building imports. That
                            // way the alias target can make use of extern alias definitions.
                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));
                        }
                    }
                    else
                    {
                        if (usingDirective.Name.IsMissing)
                        {
                            //don't try to lookup namespaces inserted by parser error recovery
                            continue;
                        }

                        var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks);
                        var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol;
                        if (imported.Kind == SymbolKind.Namespace)
                        {
                            if (usingDirective.StaticKeyword != default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);
                            }
                            else if (uniqueUsings.Contains(imported))
                            {
                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                uniqueUsings.Add(imported);
                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));
                            }
                        }
                        else if (imported.Kind == SymbolKind.NamedType)
                        {
                            if (usingDirective.StaticKeyword == default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                var importedType = (NamedTypeSymbol)imported;
                                if (uniqueUsings.Contains(importedType))
                                {
                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);
                                }
                                else
                                {
                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);

                                    uniqueUsings.Add(importedType);
                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));
                                }
                            }
                        }
                        else if (imported.Kind != SymbolKind.ErrorType)
                        {
                            // Do not report additional error if the symbol itself is erroneous.

                            // error: '$symbol$' is a '$symbol kind$' but is used as 'type or namespace'
                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,
                                usingDirective.Name,
                                imported.GetKindText(),
                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());
                        }
                    } 673347" />
<Node Id="10345:[6370..12679).2" Label="if (usingDirective.Alias != null)
                    {
                        SyntaxToken identifier = usingDirective.Alias.Name.Identifier;
                        Location location = usingDirective.Alias.Name.Location;

                        if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)
                        {
                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);
                        }

                        if (usingDirective.StaticKeyword != default(SyntaxToken))
                        {
                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);
                        }

                        SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location);

                        string identifierValueText = identifier.ValueText;
                        if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))
                        {
                            // Suppress diagnostics if we're already broken.
                            if (!usingDirective.Name.IsMissing)
                            {
                                // The using alias '{0}' appeared previously in this namespace
                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);
                            }
                        }
                        else
                        {
                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.
                            foreach (var externAlias in externAliases)
                            {
                                if (externAlias.Alias.Name == identifierValueText)
                                {
                                    // The using alias '{0}' appeared previously in this namespace
                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);
                                    break;
                                }
                            }

                            if (usingAliases == null)
                            {
                                usingAliases = ImmutableDictionary.CreateBuilder$string, AliasAndUsingDirective$();
                            }

                            // construct the alias sym with the binder for which we are building imports. That
                            // way the alias target can make use of extern alias definitions.
                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));
                        }
                    }
                    else
                    {
                        if (usingDirective.Name.IsMissing)
                        {
                            //don't try to lookup namespaces inserted by parser error recovery
                            continue;
                        }

                        var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks);
                        var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol;
                        if (imported.Kind == SymbolKind.Namespace)
                        {
                            if (usingDirective.StaticKeyword != default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);
                            }
                            else if (uniqueUsings.Contains(imported))
                            {
                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                uniqueUsings.Add(imported);
                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));
                            }
                        }
                        else if (imported.Kind == SymbolKind.NamedType)
                        {
                            if (usingDirective.StaticKeyword == default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                var importedType = (NamedTypeSymbol)imported;
                                if (uniqueUsings.Contains(importedType))
                                {
                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);
                                }
                                else
                                {
                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);

                                    uniqueUsings.Add(importedType);
                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));
                                }
                            }
                        }
                        else if (imported.Kind != SymbolKind.ErrorType)
                        {
                            // Do not report additional error if the symbol itself is erroneous.

                            // error: '$symbol$' is a '$symbol kind$' but is used as 'type or namespace'
                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,
                                usingDirective.Name,
                                imported.GetKindText(),
                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());
                        }
                    } 673348" />
<Node Id="10345:[9317..9540).1" Label="if (usingDirective.Name.IsMissing)
                        {
                            //don't try to lookup namespaces inserted by parser error recovery
                            continue;
                        } 673349" />
<Node Id="10345:[9568..9663).1" Label="var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks); 673350" />
<Node Id="10345:[9592..9662).1" Label="usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks) 673351" />
<Node Id="10307:[2552..2569).1" Label="param WithAdditionalFlags(BinderFlags flags) 673352" />
<Node Id="10307:[2516..2720).1" Label="param WithAdditionalFlags(this) 673353" />
<Node Id="10307:[2595..2709).1" Label="return this.Flags.Includes(flags)
                ? this
                : new Binder(this, this.Flags | flags); 673354" />
<Node Id="10307:[2595..2709).2" Label="return this.Flags.Includes(flags)
                ? this
                : new Binder(this, this.Flags | flags); 673355" />
<Node Id="10307:[2602..2628).1" Label="this.Flags.Includes(flags) 673356" />
<Node Id="10298:[471..492).6" Label="param Includes(this BinderFlags self) 673357" />
<Node Id="10298:[494..511).6" Label="param Includes(BinderFlags other) 673358" />
<Node Id="10298:[537..568).16" Label="return (self & other) == other; 673359" />
<Node Id="10307:[2672..2708).1" Label="new Binder(this, this.Flags | flags) 673360" />
<Node Id="10286:[1549..1560).1" Label="param Binder(Binder next) 673361" />
<Node Id="10286:[1562..1579).1" Label="param Binder(BinderFlags flags) 673362" />
<Node Id="10286:[1532..2083).1" Label="param Binder(this) 673363" />
<Node Id="10286:[1605..1638).1" Label="RoslynDebug.Assert(next != null); 673364" />
<Node Id="10286:[1605..1638).2" Label="RoslynDebug.Assert(next != null); 673365" />
<Node Id="10286:[1688..1781).1" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 673366" />
<Node Id="10286:[1688..1781).2" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 673367" />
<Node Id="10286:[1708..1779).1" Label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 673368" />
<Node Id="10298:[471..492).7" Label="param Includes(this BinderFlags self) 673369" />
<Node Id="10298:[494..511).7" Label="param Includes(BinderFlags other) 673370" />
<Node Id="10286:[1820..1963).1" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 673371" />
<Node Id="10286:[1820..1963).2" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 673372" />
<Node Id="10286:[1840..1888).1" Label="flags.Includes(BinderFlags.InNestedFinallyBlock) 673373" />
<Node Id="10298:[471..492).8" Label="param Includes(this BinderFlags self) 673374" />
<Node Id="10298:[494..511).8" Label="param Includes(BinderFlags other) 673375" />
<Node Id="10286:[1977..1981).1" Label="Next 673376" />
<Node Id="10286:[2003..2013).1" Label="this.Flags 673377" />
<Node Id="10286:[2036..2052).1" Label="this.Compilation 673378" />
<Node Id="10345:[9689..9824).1" Label="var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol; 673379" />
<Node Id="10345:[9689..9824).2" Label="var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol; 673380" />
<Node Id="10345:[9689..9824).3" Label="var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol; 673381" />
<Node Id="10345:[9704..9801).1" Label="declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved) 673382" />
<Node Id="10319:[17798..17821).1" Label="param BindNamespaceOrTypeSymbol(ExpressionSyntax syntax) 673383" />
<Node Id="10319:[17823..17848).1" Label="param BindNamespaceOrTypeSymbol(DiagnosticBag diagnostics) 673384" />
<Node Id="10319:[17850..17896).1" Label="param BindNamespaceOrTypeSymbol(ConsList$TypeSymbol$ basesBeingResolved = null) 673385" />
<Node Id="10319:[17719..18035).1" Label="param BindNamespaceOrTypeSymbol(this) 673386" />
<Node Id="10319:[17922..18024).1" Label="return BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null); 673387" />
<Node Id="10319:[17922..18024).2" Label="return BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null); 673388" />
<Node Id="10319:[17922..18024).3" Label="return BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null); 673389" />
<Node Id="10319:[17922..18024).4" Label="return BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null); 673390" />
<Node Id="10319:[17922..18024).5" Label="return BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null); 673391" />
<Node Id="10319:[17929..18023).1" Label="BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null) 673392" />
<Node Id="10319:[18431..18454).1" Label="param BindNamespaceOrTypeSymbol(ExpressionSyntax syntax) 673393" />
<Node Id="10319:[18456..18481).1" Label="param BindNamespaceOrTypeSymbol(DiagnosticBag diagnostics) 673394" />
<Node Id="10319:[18483..18522).1" Label="param BindNamespaceOrTypeSymbol(ConsList$TypeSymbol$ basesBeingResolved) 673395" />
<Node Id="10319:[18524..18555).1" Label="param BindNamespaceOrTypeSymbol(bool suppressUseSiteDiagnostics) 673396" />
<Node Id="10319:[18300..18837).1" Label="param BindNamespaceOrTypeSymbol(this) 673397" />
<Node Id="10319:[18581..18696).1" Label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 673398" />
<Node Id="10319:[18581..18696).2" Label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 673399" />
<Node Id="10319:[18581..18696).3" Label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 673400" />
<Node Id="10319:[18581..18696).4" Label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 673401" />
<Node Id="10319:[18594..18695).1" Label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 673402" />
<Node Id="10319:[20002..20025).1" Label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 673403" />
<Node Id="10319:[20027..20052).1" Label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 673404" />
<Node Id="10319:[20054..20093).1" Label="param BindNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 673405" />
<Node Id="10319:[20095..20126).1" Label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 673406" />
<Node Id="10319:[19916..30085).1" Label="param BindNamespaceOrTypeOrAliasSymbol(this) 673407" />
<Node Id="10319:[20152..24647).1" Label="switch (syntax.Kind())
            {
                case SyntaxKind.NullableType:
                    return bindNullable(syntax, diagnostics, basesBeingResolved);

                case SyntaxKind.PredefinedType:
                    return bindPredefined(syntax, diagnostics);

                case SyntaxKind.IdentifierName:
                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);

                case SyntaxKind.GenericName:
                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);

                case SyntaxKind.AliasQualifiedName:
                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);

                case SyntaxKind.QualifiedName:
                    {
                        var node = (QualifiedNameSyntax)syntax;
                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                case SyntaxKind.SimpleMemberAccessExpression:
                    {
                        var node = (MemberAccessExpressionSyntax)syntax;
                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                case SyntaxKind.ArrayType:
                    {
                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);
                    }

                case SyntaxKind.PointerType:
                    return bindPointer(syntax, diagnostics, basesBeingResolved);

                case SyntaxKind.FunctionPointerType:
                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;
                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)
                    {
                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;
                        var asterisk = functionPointerTypeSyntax.AsteriskToken;
                        RoslynDebug.Assert(@delegate.SyntaxTree is object);
                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));
                    }

                    return TypeWithAnnotations.Create(
                        FunctionPointerTypeSymbol.CreateFromSource(
                            functionPointerTypeSyntax,
                            this,
                            diagnostics,
                            basesBeingResolved,
                            suppressUseSiteDiagnostics));

                case SyntaxKind.OmittedTypeArgument:
                    {
                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);
                    }

                case SyntaxKind.TupleType:
                    {
                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;
                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));
                    }

                case SyntaxKind.RefType:
                    {
                        // ref needs to be handled by the caller
                        var refTypeSyntax = (RefTypeSyntax)syntax;
                        var refToken = refTypeSyntax.RefKeyword;
                        if (!syntax.HasErrors)
                        {
                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());
                        }

                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                default:
                    {
                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind
                        // is attempted to be bound as a type pattern.
                        return createErrorType(syntax);
                    }
            } 673408" />
<Node Id="10319:[20508..20675).1" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 673409" />
<Node Id="10319:[20508..20675).2" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 673410" />
<Node Id="10319:[20508..20675).3" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 673411" />
<Node Id="10319:[20508..20675).4" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 673412" />
<Node Id="10319:[20508..20675).5" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 673413" />
<Node Id="10319:[20515..20674).1" Label="BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null) 673414" />
<Node Id="10319:[41849..41874).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(IdentifierNameSyntax node) 673415" />
<Node Id="10319:[41889..41914).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 673416" />
<Node Id="10319:[41929..41968).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 673417" />
<Node Id="10319:[41983..42014).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 673418" />
<Node Id="10319:[42029..42063).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 673419" />
<Node Id="10319:[41732..45579).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 673420" />
<Node Id="10319:[42089..42141).1" Label="var identifierValueText = node.Identifier.ValueText; 673421" />
<Node Id="10319:[42478..42805).1" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 673422" />
<Node Id="10319:[42821..42938).1" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 673423" />
<Node Id="10319:[42821..42938).2" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 673424" />
<Node Id="10319:[42821..42938).3" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 673425" />
<Node Id="10319:[42821..42938).4" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 673426" />
<Node Id="10319:[42821..42938).6" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 673427" />
<Node Id="10319:[42839..42937).1" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 673428" />
<Node Id="10319:[63849..63870).1" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 673429" />
<Node Id="10319:[63885..63919).1" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 673430" />
<Node Id="10319:[63934..63945).1" Label="param CreateErrorIfLookupOnTypeParameter(string name) 673431" />
<Node Id="10319:[63960..63969).1" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 673432" />
<Node Id="10319:[63984..64009).1" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 673433" />
<Node Id="10319:[63768..64484).1" Label="param CreateErrorIfLookupOnTypeParameter(this) 673434" />
<Node Id="10319:[64035..64445).1" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 673435" />
<Node Id="10319:[64035..64445).2" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 673436" />
<Node Id="10319:[64461..64473).1" Label="return null; 673437" />
<Node Id="10319:[42821..42938).7" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 673438" />
<Node Id="10319:[42952..43079).1" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 673439" />
<Node Id="10319:[42952..43079).2" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 673440" />
<Node Id="10354:[10826..10838).1" Label="CreatePool() 673441" />
<Node Id="10354:[10975..11012).1" Label="ObjectPool$LookupResult$ pool = null; 673442" />
<Node Id="10354:[11026..11097).1" Label="pool = new ObjectPool$LookupResult$(() =$ new LookupResult(pool), 128); 673443" />
<Node Id="10354:[11026..11097).3" Label="pool = new ObjectPool$LookupResult$(() =$ new LookupResult(pool), 128); 673444" />
<Node Id="10354:[11142..11154).1" Label="return pool; 673445" />
<Node Id="10354:[10809..10838).1" Label="s_poolInstance = CreatePool() 673446" />
<Node Id="10319:[43108..43134).1" Label="LookupResult.GetInstance() 673447" />
<Node Id="10354:[11244..11285).1" Label="var instance = s_poolInstance.Allocate(); 673448" />
<Node Id="10354:[11244..11285).2" Label="var instance = s_poolInstance.Allocate(); 673449" />
<Node Id="10354:[11244..11285).3" Label="var instance = s_poolInstance.Allocate(); 673450" />
<Node Id="10354:[3419..3448).1" Label="param LookupResult(ObjectPool$LookupResult$ pool) 673451" />
<Node Id="10354:[3398..3626).1" Label="param LookupResult(this) 673452" />
<Node Id="10354:[3068..3073).1" Label="_kind 673453" />
<Node Id="10354:[3200..3211).1" Label="_symbolList 673454" />
<Node Id="10354:[3319..3325).1" Label="_error 673455" />
<Node Id="10354:[3380..3385).1" Label="_pool 673456" />
<Node Id="10354:[3474..3479).1" Label="_pool 673457" />
<Node Id="10354:[3501..3506).1" Label="_kind 673458" />
<Node Id="10354:[3546..3587).1" Label="_symbolList = new ArrayBuilder$Symbol$(); 673459" />
<Node Id="10354:[3546..3557).1" Label="_symbolList 673460" />
<Node Id="10354:[3601..3615).1" Label="_error = null; 673461" />
<Node Id="10354:[3601..3607).1" Label="_error 673462" />
<Node Id="10354:[11244..11285).4" Label="var instance = s_poolInstance.Allocate(); 673463" />
<Node Id="10354:[11312..11328).1" Label="instance.IsClear 673464" />
<Node Id="10354:[3684..3818).1" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 673465" />
<Node Id="10354:[3720..3803).1" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673466" />
<Node Id="10354:[3720..3803).2" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673467" />
<Node Id="10354:[3720..3803).3" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673468" />
<Node Id="10354:[11299..11330).1" Label="Debug.Assert(instance.IsClear); 673469" />
<Node Id="10354:[11344..11360).1" Label="return instance; 673470" />
<Node Id="10319:[43095..43135).1" Label="var result = LookupResult.GetInstance(); 673471" />
<Node Id="10319:[43149..43246).1" Label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 673472" />
<Node Id="10319:[43149..43246).2" Label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 673473" />
<Node Id="10319:[43173..43245).1" Label="GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()) 673474" />
<Node Id="10319:[50313..50328).1" Label="param GetSimpleNameLookupOptions(NameSyntax node) 673475" />
<Node Id="10319:[50330..50355).1" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 673476" />
<Node Id="10319:[50381..51340).1" Label="if (SyntaxFacts.IsAttributeName(node))
            {
                //  SPEC:   By convention, attribute classes are named with a suffix of Attribute.
                //  SPEC:   An attribute-name of the form type-name may either include or omit this suffix.
                //  SPEC:   If an attribute class is found both with and without this suffix, an ambiguity
                //  SPEC:   is present, and a compile-time error results. If the attribute-name is spelled
                //  SPEC:   such that its right-most identifier is a verbatim identifier (§2.4.2), then only
                //  SPEC:   an attribute without a suffix is matched, thus enabling such an ambiguity to be resolved.

                return isVerbatimIdentifier ? LookupOptions.VerbatimNameAttributeTypeOnly : LookupOptions.AttributeTypeOnly;
            }
            else
            {
                return LookupOptions.NamespacesOrTypesOnly;
            } 673477" />
<Node Id="10319:[51282..51325).1" Label="return LookupOptions.NamespacesOrTypesOnly; 673478" />
<Node Id="10319:[43262..43312).1" Label="HashSet$DiagnosticInfo$ useSiteDiagnostics = null; 673479" />
<Node Id="10319:[43326..43490).1" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 673480" />
<Node Id="10319:[43326..43490).2" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 673481" />
<Node Id="10319:[43326..43490).3" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 673482" />
<Node Id="10319:[43326..43490).4" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 673483" />
<Node Id="10319:[43326..43490).6" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 673484" />
<Node Id="10319:[43326..43490).7" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 673485" />
<Node Id="10319:[43326..43490).10" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 673486" />
<Node Id="10319:[43326..43489).1" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 673487" />
<Node Id="10312:[994..1013).1" Label="param LookupSymbolsSimpleName(LookupResult result) 673488" />
<Node Id="10312:[1028..1062).1" Label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 673489" />
<Node Id="10312:[1077..1093).1" Label="param LookupSymbolsSimpleName(string plainName) 673490" />
<Node Id="10312:[1108..1117).1" Label="param LookupSymbolsSimpleName(int arity) 673491" />
<Node Id="10312:[1132..1171).1" Label="param LookupSymbolsSimpleName(ConsList$TypeSymbol$ basesBeingResolved) 673492" />
<Node Id="10312:[1186..1207).1" Label="param LookupSymbolsSimpleName(LookupOptions options) 673493" />
<Node Id="10312:[1222..1235).1" Label="param LookupSymbolsSimpleName(bool diagnose) 673494" />
<Node Id="10312:[1250..1296).1" Label="param LookupSymbolsSimpleName(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 673495" />
<Node Id="10312:[942..1750).1" Label="param LookupSymbolsSimpleName(this) 673496" />
<Node Id="10312:[1322..1739).1" Label="if (options.IsAttributeTypeLookup())
            {
                this.LookupAttributeType(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 673497" />
<Node Id="10312:[1326..1357).1" Label="options.IsAttributeTypeLookup() 673498" />
<Node Id="10353:[7504..7530).1" Label="param IsAttributeTypeLookup(this LookupOptions options) 673499" />
<Node Id="10353:[7556..7642).1" Label="return (options & LookupOptions.AttributeTypeOnly) == LookupOptions.AttributeTypeOnly; 673500" />
<Node Id="10312:[1585..1724).1" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673501" />
<Node Id="10312:[1585..1724).2" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673502" />
<Node Id="10312:[1585..1724).3" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673503" />
<Node Id="10312:[1585..1724).4" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673504" />
<Node Id="10312:[1585..1724).5" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673505" />
<Node Id="10312:[1585..1724).6" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673506" />
<Node Id="10312:[1585..1724).7" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673507" />
<Node Id="10312:[1585..1724).8" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673508" />
<Node Id="10312:[1585..1723).1" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 673509" />
<Node Id="10312:[5721..5740).1" Label="param LookupSymbolsOrMembersInternal(LookupResult result) 673510" />
<Node Id="10312:[5755..5789).1" Label="param LookupSymbolsOrMembersInternal(NamespaceOrTypeSymbol qualifierOpt) 673511" />
<Node Id="10312:[5804..5815).1" Label="param LookupSymbolsOrMembersInternal(string name) 673512" />
<Node Id="10312:[5830..5839).1" Label="param LookupSymbolsOrMembersInternal(int arity) 673513" />
<Node Id="10312:[5854..5893).1" Label="param LookupSymbolsOrMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 673514" />
<Node Id="10312:[5908..5929).1" Label="param LookupSymbolsOrMembersInternal(LookupOptions options) 673515" />
<Node Id="10312:[5944..5957).1" Label="param LookupSymbolsOrMembersInternal(bool diagnose) 673516" />
<Node Id="10312:[5972..6018).1" Label="param LookupSymbolsOrMembersInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 673517" />
<Node Id="10312:[5663..6444).1" Label="param LookupSymbolsOrMembersInternal(this) 673518" />
<Node Id="10312:[6044..6433).1" Label="if ((object)qualifierOpt == null)
            {
                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
            } 673519" />
<Node Id="10312:[6044..6433).2" Label="if ((object)qualifierOpt == null)
            {
                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
            } 673520" />
<Node Id="10312:[6110..6221).1" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673521" />
<Node Id="10312:[6110..6221).2" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673522" />
<Node Id="10312:[6110..6221).3" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673523" />
<Node Id="10312:[6110..6221).4" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673524" />
<Node Id="10312:[6110..6221).5" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673525" />
<Node Id="10312:[6110..6221).6" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673526" />
<Node Id="10312:[6110..6221).7" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673527" />
<Node Id="10312:[6110..6220).1" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 673528" />
<Node Id="10312:[3696..3715).1" Label="param LookupSymbolsInternal(LookupResult result) 673529" />
<Node Id="10312:[3717..3728).1" Label="param LookupSymbolsInternal(string name) 673530" />
<Node Id="10312:[3730..3739).1" Label="param LookupSymbolsInternal(int arity) 673531" />
<Node Id="10312:[3741..3780).1" Label="param LookupSymbolsInternal(ConsList$TypeSymbol$ basesBeingResolved) 673532" />
<Node Id="10312:[3782..3803).1" Label="param LookupSymbolsInternal(LookupOptions options) 673533" />
<Node Id="10312:[3805..3818).1" Label="param LookupSymbolsInternal(bool diagnose) 673534" />
<Node Id="10312:[3820..3866).1" Label="param LookupSymbolsInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 673535" />
<Node Id="10312:[3645..5112).1" Label="param LookupSymbolsInternal(this) 673536" />
<Node Id="10312:[3905..3919).1" Label="result.IsClear 673537" />
<Node Id="10354:[3684..3818).2" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 673538" />
<Node Id="10354:[3720..3803).9" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673539" />
<Node Id="10354:[3720..3803).10" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673540" />
<Node Id="10354:[3720..3803).11" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673541" />
<Node Id="10312:[3892..3921).1" Label="Debug.Assert(result.IsClear); 673542" />
<Node Id="10312:[3935..3968).1" Label="Debug.Assert(options.AreValid()); 673543" />
<Node Id="10312:[3948..3966).1" Label="options.AreValid() 673544" />
<Node Id="10353:[4698..4724).1" Label="param AreValid(this LookupOptions options) 673545" />
<Node Id="10353:[4750..4847).1" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 673546" />
<Node Id="10353:[4863..5000).1" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 673547" />
<Node Id="10353:[4863..5000).2" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 673548" />
<Node Id="10353:[5079..5183).1" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 673549" />
<Node Id="10353:[5197..5323).1" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 673550" />
<Node Id="10353:[5485..5759).1" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 673551" />
<Node Id="10353:[5485..5759).2" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 673552" />
<Node Id="10353:[5485..5759).3" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 673553" />
<Node Id="10353:[5775..5979).1" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 673554" />
<Node Id="10353:[5775..5979).3" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 673555" />
<Node Id="10353:[5995..6029).1" Label="return OnlyOneBitSet(onlyOptions); 673556" />
<Node Id="10353:[6002..6028).1" Label="OnlyOneBitSet(onlyOptions) 673557" />
<Node Id="10353:[6343..6358).1" Label="param OnlyOneBitSet(LookupOptions o) 673558" />
<Node Id="10353:[6384..6410).1" Label="return (o & (o - 1)) == 0; 673559" />
<Node Id="10353:[6384..6410).2" Label="return (o & (o - 1)) == 0; 673560" />
<Node Id="10312:[3984..4005).1" Label="Binder binder = null; 673561" />
<Node Id="10312:[4019..5073).1" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 673562" />
<Node Id="10312:[4019..5073).2" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 673563" />
<Node Id="10312:[4060..4080).1" Label="result.IsMultiViable 673564" />
<Node Id="10354:[4919..5009).1" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 673565" />
<Node Id="10354:[4962..4966).1" Label="Kind 673566" />
<Node Id="10354:[4058..4122).1" Label="get
            {
                return _kind;
            } 673567" />
<Node Id="10354:[4094..4107).1" Label="return _kind; 673568" />
<Node Id="10354:[4955..4994).1" Label="return Kind == LookupResultKind.Viable; 673569" />
<Node Id="10312:[4019..5073).4" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 673570" />
<Node Id="10312:[4019..5073).5" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 673571" />
<Node Id="10312:[4134..4806).1" Label="if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                } 673572" />
<Node Id="10312:[4134..4806).2" Label="if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                } 673573" />
<Node Id="10312:[4534..4658).1" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673574" />
<Node Id="10312:[4534..4658).2" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673575" />
<Node Id="10312:[4534..4658).3" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673576" />
<Node Id="10312:[4534..4658).4" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673577" />
<Node Id="10312:[4534..4658).5" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673578" />
<Node Id="10312:[4534..4658).6" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673579" />
<Node Id="10312:[4534..4658).7" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673580" />
<Node Id="10312:[4534..4658).8" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673581" />
<Node Id="10312:[4534..4657).1" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 673582" />
<Node Id="10312:[5188..5207).1" Label="param LookupSymbolsInSingleBinder(LookupResult result) 673583" />
<Node Id="10312:[5209..5220).1" Label="param LookupSymbolsInSingleBinder(string name) 673584" />
<Node Id="10312:[5222..5231).1" Label="param LookupSymbolsInSingleBinder(int arity) 673585" />
<Node Id="10312:[5233..5272).1" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 673586" />
<Node Id="10312:[5274..5295).1" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 673587" />
<Node Id="10312:[5297..5318).1" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 673588" />
<Node Id="10312:[5320..5333).1" Label="param LookupSymbolsInSingleBinder(bool diagnose) 673589" />
<Node Id="10312:[5335..5381).1" Label="param LookupSymbolsInSingleBinder(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 673590" />
<Node Id="10312:[5124..5404).1" Label="param LookupSymbolsInSingleBinder(this) 673591" />
<Node Id="10312:[4534..4658).9" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673592" />
<Node Id="10312:[4685..4699).1" Label="result.IsClear 673593" />
<Node Id="10354:[3684..3818).3" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 673594" />
<Node Id="10354:[3720..3803).17" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673595" />
<Node Id="10354:[3720..3803).18" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673596" />
<Node Id="10354:[3720..3803).19" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673597" />
<Node Id="10312:[4680..4787).1" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 673598" />
<Node Id="10312:[4826..5058).1" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 673599" />
<Node Id="10312:[4826..5058).2" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 673600" />
<Node Id="10312:[4019..5073).7" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 673601" />
<Node Id="10312:[4134..4806).4" Label="if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                } 673602" />
<Node Id="10312:[4134..4806).5" Label="if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                } 673603" />
<Node Id="10312:[4534..4658).10" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673604" />
<Node Id="10312:[4534..4658).11" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673605" />
<Node Id="10312:[4534..4658).12" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673606" />
<Node Id="10312:[4534..4658).13" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673607" />
<Node Id="10312:[4534..4658).14" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673608" />
<Node Id="10312:[4534..4658).15" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673609" />
<Node Id="10312:[4534..4658).16" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673610" />
<Node Id="10312:[4534..4658).17" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673611" />
<Node Id="10312:[4534..4657).2" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 673612" />
<Node Id="10346:[10629..10648).1" Label="param LookupSymbolsInSingleBinder(LookupResult result) 673613" />
<Node Id="10346:[10650..10661).1" Label="param LookupSymbolsInSingleBinder(string name) 673614" />
<Node Id="10346:[10663..10672).1" Label="param LookupSymbolsInSingleBinder(int arity) 673615" />
<Node Id="10346:[10674..10713).1" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 673616" />
<Node Id="10346:[10715..10736).1" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 673617" />
<Node Id="10346:[10738..10759).1" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 673618" />
<Node Id="10346:[10761..10774).1" Label="param LookupSymbolsInSingleBinder(bool diagnose) 673619" />
<Node Id="10346:[10776..10822).1" Label="param LookupSymbolsInSingleBinder(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 673620" />
<Node Id="10346:[10564..12467).1" Label="param LookupSymbolsInSingleBinder(this) 673621" />
<Node Id="10346:[10861..10875).1" Label="result.IsClear 673622" />
<Node Id="10354:[3684..3818).4" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 673623" />
<Node Id="10354:[3720..3803).25" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673624" />
<Node Id="10354:[3720..3803).26" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673625" />
<Node Id="10354:[3720..3803).27" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673626" />
<Node Id="10346:[10848..10877).1" Label="Debug.Assert(result.IsClear); 673627" />
<Node Id="10346:[10897..10914).1" Label="IsSubmissionClass 673628" />
<Node Id="10346:[7666..7775).1" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 673629" />
<Node Id="10346:[7672..7773).1" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 673630" />
<Node Id="10346:[10893..11127).1" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 673631" />
<Node Id="10346:[11143..11188).1" Label="var imports = GetImports(basesBeingResolved); 673632" />
<Node Id="10346:[11157..11187).1" Label="GetImports(basesBeingResolved) 673633" />
<Node Id="10346:[3460..3499).2" Label="param GetImports(ConsList$TypeSymbol$ basesBeingResolved) 673634" />
<Node Id="10346:[3423..3863).2" Label="param GetImports(this) 673635" />
<Node Id="10346:[3525..3638).10" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 673636" />
<Node Id="10346:[3525..3638).11" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 673637" />
<Node Id="10346:[3654..3816).5" Label="if (_lazyImports == null)
            {
                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);
            } 673638" />
<Node Id="10346:[3832..3852).1" Label="return _lazyImports; 673639" />
<Node Id="10346:[11143..11188).2" Label="var imports = GetImports(basesBeingResolved); 673640" />
<Node Id="10346:[11258..12246).1" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 673641" />
<Node Id="10346:[11258..12246).2" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 673642" />
<Node Id="10346:[11258..12246).5" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 673643" />
<Node Id="10346:[11258..12246).6" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 673644" />
<Node Id="10346:[11369..11508).1" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 673645" />
<Node Id="10346:[11369..11508).2" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 673646" />
<Node Id="10346:[11369..11508).3" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 673647" />
<Node Id="10346:[11369..11508).4" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 673648" />
<Node Id="10346:[11369..11508).5" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 673649" />
<Node Id="10346:[11369..11508).6" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 673650" />
<Node Id="10346:[11369..11508).7" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 673651" />
<Node Id="10346:[11369..11508).8" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 673652" />
<Node Id="10346:[11369..11508).9" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 673653" />
<Node Id="10346:[11369..11507).1" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 673654" />
<Node Id="10312:[7652..7671).1" Label="param LookupMembersInternal(LookupResult result) 673655" />
<Node Id="10312:[7673..7703).1" Label="param LookupMembersInternal(NamespaceOrTypeSymbol nsOrType) 673656" />
<Node Id="10312:[7705..7716).1" Label="param LookupMembersInternal(string name) 673657" />
<Node Id="10312:[7718..7727).1" Label="param LookupMembersInternal(int arity) 673658" />
<Node Id="10312:[7729..7768).1" Label="param LookupMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 673659" />
<Node Id="10312:[7770..7791).1" Label="param LookupMembersInternal(LookupOptions options) 673660" />
<Node Id="10312:[7793..7814).1" Label="param LookupMembersInternal(Binder originalBinder) 673661" />
<Node Id="10312:[7816..7829).1" Label="param LookupMembersInternal(bool diagnose) 673662" />
<Node Id="10312:[7831..7877).1" Label="param LookupMembersInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 673663" />
<Node Id="10312:[7615..8420).1" Label="param LookupMembersInternal(this) 673664" />
<Node Id="10312:[7903..7936).1" Label="Debug.Assert(options.AreValid()); 673665" />
<Node Id="10312:[7916..7934).1" Label="options.AreValid() 673666" />
<Node Id="10353:[4698..4724).2" Label="param AreValid(this LookupOptions options) 673667" />
<Node Id="10353:[4750..4847).3" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 673668" />
<Node Id="10353:[4863..5000).5" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 673669" />
<Node Id="10353:[4863..5000).6" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 673670" />
<Node Id="10353:[5079..5183).3" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 673671" />
<Node Id="10353:[5197..5323).4" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 673672" />
<Node Id="10353:[5485..5759).7" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 673673" />
<Node Id="10353:[5485..5759).8" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 673674" />
<Node Id="10353:[5485..5759).9" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 673675" />
<Node Id="10353:[5775..5979).5" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 673676" />
<Node Id="10353:[5775..5979).7" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 673677" />
<Node Id="10353:[5995..6029).4" Label="return OnlyOneBitSet(onlyOptions); 673678" />
<Node Id="10353:[6002..6028).2" Label="OnlyOneBitSet(onlyOptions) 673679" />
<Node Id="10353:[6343..6358).2" Label="param OnlyOneBitSet(LookupOptions o) 673680" />
<Node Id="10353:[6384..6410).7" Label="return (o & (o - 1)) == 0; 673681" />
<Node Id="10353:[6384..6410).8" Label="return (o & (o - 1)) == 0; 673682" />
<Node Id="10312:[7952..7977).1" Label="Debug.Assert(arity $= 0); 673683" />
<Node Id="10312:[7952..7977).2" Label="Debug.Assert(arity $= 0); 673684" />
<Node Id="10312:[7991..8409).1" Label="if (nsOrType.IsNamespace)
            {
                LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
            } 673685" />
<Node Id="10312:[8049..8181).1" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 673686" />
<Node Id="10312:[8049..8181).2" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 673687" />
<Node Id="10312:[8049..8181).3" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 673688" />
<Node Id="10312:[8049..8181).4" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 673689" />
<Node Id="10312:[8049..8181).5" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 673690" />
<Node Id="10312:[8049..8181).6" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 673691" />
<Node Id="10312:[8049..8181).7" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 673692" />
<Node Id="10312:[8049..8181).8" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 673693" />
<Node Id="10312:[8049..8180).1" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics) 673694" />
<Node Id="10312:[18976..18995).1" Label="param LookupMembersInNamespace(LookupResult result) 673695" />
<Node Id="10312:[18997..19015).1" Label="param LookupMembersInNamespace(NamespaceSymbol ns) 673696" />
<Node Id="10312:[19017..19028).1" Label="param LookupMembersInNamespace(string name) 673697" />
<Node Id="10312:[19030..19039).1" Label="param LookupMembersInNamespace(int arity) 673698" />
<Node Id="10312:[19041..19062).1" Label="param LookupMembersInNamespace(LookupOptions options) 673699" />
<Node Id="10312:[19064..19085).1" Label="param LookupMembersInNamespace(Binder originalBinder) 673700" />
<Node Id="10312:[19087..19100).1" Label="param LookupMembersInNamespace(bool diagnose) 673701" />
<Node Id="10312:[19102..19148).1" Label="param LookupMembersInNamespace(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 673702" />
<Node Id="10312:[19174..19243).1" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 673703" />
<Node Id="10312:[19174..19243).2" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 673704" />
<Node Id="10312:[19174..19243).3" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 673705" />
<Node Id="10312:[19174..19243).4" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 673706" />
<Node Id="10312:[19188..19242).1" Label="GetCandidateMembers(ns, name, options, originalBinder) 673707" />
<Node Id="10312:[61540..61570).1" Label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 673708" />
<Node Id="10312:[61572..61583).1" Label="param GetCandidateMembers(string name) 673709" />
<Node Id="10312:[61585..61606).1" Label="param GetCandidateMembers(LookupOptions options) 673710" />
<Node Id="10312:[61608..61629).1" Label="param GetCandidateMembers(Binder originalBinder) 673711" />
<Node Id="10312:[61655..62327).1" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 673712" />
<Node Id="10312:[61655..62327).2" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 673713" />
<Node Id="10312:[61655..62327).4" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 673714" />
<Node Id="10312:[61874..62327).1" Label="if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 673715" />
<Node Id="10312:[62098..62327).1" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 673716" />
<Node Id="10312:[62098..62327).2" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 673717" />
<Node Id="10312:[62279..62312).1" Label="return nsOrType.GetMembers(name); 673718" />
<Node Id="10312:[19259..19531).1" Label="foreach (Symbol member in members)
            {
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);
                result.MergeEqual(resultOfThisMember);
            } 673719" />
<Node Id="10312:[19326..19460).1" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 673720" />
<Node Id="10312:[19326..19460).2" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 673721" />
<Node Id="10312:[19326..19460).3" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 673722" />
<Node Id="10312:[19326..19460).6" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 673723" />
<Node Id="10312:[19326..19460).7" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 673724" />
<Node Id="10312:[19366..19459).1" Label="originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics) 673725" />
<Node Id="10312:[63424..63437).1" Label="param CheckViability(Symbol symbol) 673726" />
<Node Id="10312:[63439..63448).1" Label="param CheckViability(int arity) 673727" />
<Node Id="10312:[63450..63471).1" Label="param CheckViability(LookupOptions options) 673728" />
<Node Id="10312:[63473..63501).1" Label="param CheckViability(TypeSymbol accessThroughType) 673729" />
<Node Id="10312:[63503..63516).1" Label="param CheckViability(bool diagnose) 673730" />
<Node Id="10312:[63518..63564).1" Label="param CheckViability(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 673731" />
<Node Id="10312:[63566..63612).1" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 673732" />
<Node Id="10312:[63381..70761).1" Label="param CheckViability(this) 673733" />
<Node Id="10312:[63638..63668).1" Label="bool inaccessibleViaQualifier; 673734" />
<Node Id="10312:[63682..63706).1" Label="DiagnosticInfo diagInfo; 673735" />
<Node Id="10312:[63859..64015).1" Label="var unwrappedSymbol = symbol.Kind == SymbolKind.Alias
                ? ((AliasSymbol)symbol).GetAliasTarget(basesBeingResolved)
                : symbol; 673736" />
<Node Id="10312:[63881..63912).1" Label="symbol.Kind == SymbolKind.Alias 673737" />
<Node Id="10312:[64121..69285).1" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673738" />
<Node Id="10312:[64121..69285).2" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673739" />
<Node Id="10312:[64121..69285).3" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673740" />
<Node Id="10312:[64353..69285).1" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673741" />
<Node Id="10312:[64353..69285).2" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673742" />
<Node Id="10312:[64353..69285).3" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673743" />
<Node Id="10312:[64353..69285).4" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673744" />
<Node Id="10312:[64353..69285).5" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673745" />
<Node Id="10312:[64357..64415).1" Label="WrongArity(symbol, arity, diagnose, options, out diagInfo) 673746" />
<Node Id="10312:[80978..80991).1" Label="param WrongArity(Symbol symbol) 673747" />
<Node Id="10312:[80993..81002).1" Label="param WrongArity(int arity) 673748" />
<Node Id="10312:[81004..81017).1" Label="param WrongArity(bool diagnose) 673749" />
<Node Id="10312:[81019..81040).1" Label="param WrongArity(LookupOptions options) 673750" />
<Node Id="10312:[81042..81069).1" Label="param WrongArity(out DiagnosticInfo diagInfo) 673751" />
<Node Id="10312:[81095..84034).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 673752" />
<Node Id="10312:[83750..83991).1" Label="if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    } 673753" />
<Node Id="10312:[83750..83991).2" Label="if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    } 673754" />
<Node Id="10312:[84050..84066).1" Label="diagInfo = null; 673755" />
<Node Id="10312:[84080..84093).1" Label="return false; 673756" />
<Node Id="10312:[64353..69285).6" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673757" />
<Node Id="10312:[64537..64543).1" Label="InCref 673758" />
<Node Id="10306:[3196..3249).1" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 673759" />
<Node Id="10306:[3202..3247).1" Label="return this.Flags.Includes(BinderFlags.Cref); 673760" />
<Node Id="10306:[3202..3247).2" Label="return this.Flags.Includes(BinderFlags.Cref); 673761" />
<Node Id="10306:[3209..3246).1" Label="this.Flags.Includes(BinderFlags.Cref) 673762" />
<Node Id="10298:[471..492).9" Label="param Includes(this BinderFlags self) 673763" />
<Node Id="10298:[494..511).9" Label="param Includes(BinderFlags other) 673764" />
<Node Id="10312:[64532..69285).1" Label="if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673765" />
<Node Id="10312:[65229..69285).1" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673766" />
<Node Id="10312:[65229..69285).2" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673767" />
<Node Id="10312:[65474..69285).1" Label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673768" />
<Node Id="10312:[65474..69285).2" Label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673769" />
<Node Id="10312:[65730..65736).1" Label="InCref 673770" />
<Node Id="10312:[65726..69285).1" Label="if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673771" />
<Node Id="10312:[66182..66188).1" Label="InCref 673772" />
<Node Id="10312:[66177..69285).1" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673773" />
<Node Id="10312:[66177..69285).2" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673774" />
<Node Id="10312:[66177..69285).3" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673775" />
<Node Id="10312:[66177..69285).4" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673776" />
<Node Id="10312:[66291..66342).1" Label="RefineAccessThroughType(options, accessThroughType) 673777" />
<Node Id="10312:[75301..75322).1" Label="param RefineAccessThroughType(LookupOptions options) 673778" />
<Node Id="10312:[75324..75352).1" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 673779" />
<Node Id="10312:[75735..75866).1" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 673780" />
<Node Id="10312:[75735..75866).2" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 673781" />
<Node Id="10312:[75742..75804).1" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 673782" />
<Node Id="10312:[75735..75866).4" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 673783" />
<Node Id="10312:[66177..69285).7" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673784" />
<Node Id="10312:[66177..69285).8" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673785" />
<Node Id="10312:[66177..69285).9" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673786" />
<Node Id="10312:[66215..66540).1" Label="this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved) 673787" />
<Node Id="10312:[77528..77541).1" Label="param IsAccessible(Symbol symbol) 673788" />
<Node Id="10312:[77543..77571).1" Label="param IsAccessible(TypeSymbol accessThroughType) 673789" />
<Node Id="10312:[77573..77604).1" Label="param IsAccessible(out bool failedThroughTypeCheck) 673790" />
<Node Id="10312:[77606..77652).1" Label="param IsAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 673791" />
<Node Id="10312:[77654..77700).1" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 673792" />
<Node Id="10312:[77501..78044).1" Label="param IsAccessible(this) 673793" />
<Node Id="10312:[77726..77892).1" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 673794" />
<Node Id="10312:[77726..77892).2" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 673795" />
<Node Id="10312:[77730..77782).1" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 673796" />
<Node Id="10298:[471..492).12" Label="param Includes(this BinderFlags self) 673797" />
<Node Id="10298:[494..511).12" Label="param Includes(BinderFlags other) 673798" />
<Node Id="10312:[77908..78033).1" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673799" />
<Node Id="10312:[77908..78033).2" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673800" />
<Node Id="10312:[77908..78033).3" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673801" />
<Node Id="10312:[77908..78033).4" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673802" />
<Node Id="10312:[77908..78033).5" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673803" />
<Node Id="10312:[77915..78032).1" Label="IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 673804" />
<Node Id="10312:[78387..78400).1" Label="param IsAccessibleHelper(Symbol symbol) 673805" />
<Node Id="10312:[78402..78430).1" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 673806" />
<Node Id="10312:[78432..78463).1" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 673807" />
<Node Id="10312:[78465..78511).1" Label="param IsAccessibleHelper(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 673808" />
<Node Id="10312:[78513..78552).1" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 673809" />
<Node Id="10312:[78346..78783).1" Label="param IsAccessibleHelper(this) 673810" />
<Node Id="10312:[78642..78772).1" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673811" />
<Node Id="10312:[78642..78772).2" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673812" />
<Node Id="10312:[78642..78772).3" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673813" />
<Node Id="10312:[78642..78772).4" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673814" />
<Node Id="10312:[78642..78772).5" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673815" />
<Node Id="10312:[78649..78771).1" Label="Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 673816" />
<Node Id="10346:[8019..8032).1" Label="param IsAccessibleHelper(Symbol symbol) 673817" />
<Node Id="10346:[8034..8062).1" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 673818" />
<Node Id="10346:[8064..8095).1" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 673819" />
<Node Id="10346:[8097..8143).1" Label="param IsAccessibleHelper(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 673820" />
<Node Id="10346:[8145..8184).1" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 673821" />
<Node Id="10346:[7977..8737).1" Label="param IsAccessibleHelper(this) 673822" />
<Node Id="10346:[8210..8251).1" Label="var type = _container as NamedTypeSymbol; 673823" />
<Node Id="10346:[8265..8726).1" Label="if ((object)type != null)
            {
                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);
            }
            else
            {
                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.
            } 673824" />
<Node Id="10346:[8265..8726).2" Label="if ((object)type != null)
            {
                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);
            }
            else
            {
                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.
            } 673825" />
<Node Id="10346:[8516..8646).1" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673826" />
<Node Id="10346:[8516..8646).2" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673827" />
<Node Id="10346:[8516..8646).3" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673828" />
<Node Id="10346:[8516..8646).4" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673829" />
<Node Id="10346:[8516..8646).5" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673830" />
<Node Id="10346:[8523..8645).1" Label="Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 673831" />
<Node Id="10325:[1906..1919).1" Label="param IsAccessibleHelper(Symbol symbol) 673832" />
<Node Id="10325:[1921..1949).1" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 673833" />
<Node Id="10325:[1951..1982).1" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 673834" />
<Node Id="10325:[1984..2031).1" Label="param IsAccessibleHelper(ref HashSet$DiagnosticInfo$? useSiteDiagnostics) 673835" />
<Node Id="10325:[2033..2072).1" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 673836" />
<Node Id="10325:[1864..2245).1" Label="param IsAccessibleHelper(this) 673837" />
<Node Id="10325:[2098..2129).1" Label="failedThroughTypeCheck = false; 673838" />
<Node Id="10325:[2143..2234).1" Label="return IsSymbolAccessibleConditional(symbol, Compilation.Assembly, ref useSiteDiagnostics); 673839" />
<Node Id="10325:[2143..2234).2" Label="return IsSymbolAccessibleConditional(symbol, Compilation.Assembly, ref useSiteDiagnostics); 673840" />
<Node Id="10325:[2143..2234).3" Label="return IsSymbolAccessibleConditional(symbol, Compilation.Assembly, ref useSiteDiagnostics); 673841" />
<Node Id="10325:[2150..2233).1" Label="IsSymbolAccessibleConditional(symbol, Compilation.Assembly, ref useSiteDiagnostics) 673842" />
<Node Id="10286:[29357..29370).1" Label="param IsSymbolAccessibleConditional(Symbol symbol) 673843" />
<Node Id="10286:[29385..29406).1" Label="param IsSymbolAccessibleConditional(AssemblySymbol within) 673844" />
<Node Id="10286:[29421..29468).1" Label="param IsSymbolAccessibleConditional(ref HashSet$DiagnosticInfo$? useSiteDiagnostics) 673845" />
<Node Id="10286:[29494..29572).1" Label="return AccessCheck.IsSymbolAccessible(symbol, within, ref useSiteDiagnostics); 673846" />
<Node Id="10286:[29494..29572).2" Label="return AccessCheck.IsSymbolAccessible(symbol, within, ref useSiteDiagnostics); 673847" />
<Node Id="10286:[29494..29572).3" Label="return AccessCheck.IsSymbolAccessible(symbol, within, ref useSiteDiagnostics); 673848" />
<Node Id="10286:[29501..29571).1" Label="AccessCheck.IsSymbolAccessible(symbol, within, ref useSiteDiagnostics) 673849" />
<Node Id="10060:[826..839).1" Label="param IsSymbolAccessible(Symbol symbol) 673850" />
<Node Id="10060:[854..875).1" Label="param IsSymbolAccessible(AssemblySymbol within) 673851" />
<Node Id="10060:[890..936).1" Label="param IsSymbolAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 673852" />
<Node Id="10060:[962..990).1" Label="bool failedThroughTypeCheck; 673853" />
<Node Id="10060:[1004..1137).1" Label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 673854" />
<Node Id="10060:[1004..1137).2" Label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 673855" />
<Node Id="10060:[1004..1137).3" Label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 673856" />
<Node Id="10060:[1004..1137).5" Label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 673857" />
<Node Id="10060:[1004..1137).6" Label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 673858" />
<Node Id="10060:[1004..1137).7" Label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 673859" />
<Node Id="10060:[1011..1136).1" Label="IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics) 673860" />
<Node Id="10060:[5593..5606).1" Label="param IsSymbolAccessibleCore(Symbol symbol) 673861" />
<Node Id="10060:[5621..5634).1" Label="param IsSymbolAccessibleCore(Symbol within) 673862" />
<Node Id="10060:[5691..5716).1" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 673863" />
<Node Id="10060:[5731..5762).1" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 673864" />
<Node Id="10060:[5777..5806).1" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 673865" />
<Node Id="10060:[5821..5867).1" Label="param IsSymbolAccessibleCore(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 673866" />
<Node Id="10060:[5882..5928).1" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 673867" />
<Node Id="10060:[5954..5991).1" Label="Debug.Assert((object)symbol != null); 673868" />
<Node Id="10060:[5954..5991).2" Label="Debug.Assert((object)symbol != null); 673869" />
<Node Id="10060:[6005..6042).1" Label="Debug.Assert((object)within != null); 673870" />
<Node Id="10060:[6005..6042).2" Label="Debug.Assert((object)within != null); 673871" />
<Node Id="10060:[6056..6090).1" Label="Debug.Assert(within.IsDefinition); 673872" />
<Node Id="10060:[6104..6172).1" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 673873" />
<Node Id="10060:[6188..6219).1" Label="failedThroughTypeCheck = false; 673874" />
<Node Id="10060:[6235..9907).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.ArrayType:
                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.PointerType:
                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.NamedType:
                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.Alias:
                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.Discard:
                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.FunctionPointerType:
                    var funcPtr = (FunctionPointerTypeSymbol)symbol;
                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }

                    foreach (var param in funcPtr.Signature.Parameters)
                    {
                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))
                        {
                            return false;
                        }
                    }

                    return true;

                case SymbolKind.ErrorType:
                    // Always assume that error types are accessible.
                    return true;

                case SymbolKind.TypeParameter:
                case SymbolKind.Parameter:
                case SymbolKind.Local:
                case SymbolKind.Label:
                case SymbolKind.Namespace:
                case SymbolKind.DynamicType:
                case SymbolKind.Assembly:
                case SymbolKind.NetModule:
                case SymbolKind.RangeVariable:
                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:
                    // These types of symbols are always accessible (if visible).
                    return true;

                case SymbolKind.Method:
                case SymbolKind.Property:
                case SymbolKind.Event:
                case SymbolKind.Field:
                    if (!symbol.RequiresInstanceReceiver())
                    {
                        // static members aren't accessed 'through' an 'instance' of any type.  So we
                        // null out the 'through' instance here.  This ensures that we'll understand
                        // accessing protected statics properly.
                        throughTypeOpt = null;
                    }

                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);

                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 673875" />
<Node Id="10060:[8992..9004).1" Label="return true; 673876" />
<Node Id="10312:[66177..69285).11" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673877" />
<Node Id="10312:[67587..67593).1" Label="InCref 673878" />
<Node Id="10312:[67582..69285).1" Label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673879" />
<Node Id="10312:[67582..69285).2" Label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673880" />
<Node Id="10312:[67858..69285).1" Label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673881" />
<Node Id="10312:[67858..69285).2" Label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673882" />
<Node Id="10312:[68183..69285).1" Label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673883" />
<Node Id="10312:[68183..69285).2" Label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673884" />
<Node Id="10312:[68512..69285).1" Label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673885" />
<Node Id="10312:[68512..69285).2" Label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673886" />
<Node Id="10312:[68882..69285).1" Label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673887" />
<Node Id="10312:[68882..69285).2" Label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 673888" />
<Node Id="10312:[69237..69270).1" Label="return LookupResult.Good(symbol); 673889" />
<Node Id="10312:[69244..69269).1" Label="LookupResult.Good(symbol) 673890" />
<Node Id="10354:[5400..5413).1" Label="param Good(Symbol symbol) 673891" />
<Node Id="10354:[5439..5508).1" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 673892" />
<Node Id="10354:[5439..5508).2" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 673893" />
<Node Id="10354:[5439..5508).3" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 673894" />
<Node Id="10354:[5446..5507).1" Label="new SingleLookupResult(LookupResultKind.Viable, symbol, null) 673895" />
<Node Id="10368:[1076..1097).1" Label="param SingleLookupResult(LookupResultKind kind) 673896" />
<Node Id="10368:[1099..1112).1" Label="param SingleLookupResult(Symbol symbol) 673897" />
<Node Id="10368:[1114..1134).1" Label="param SingleLookupResult(DiagnosticInfo error) 673898" />
<Node Id="10368:[1048..1256).1" Label="param SingleLookupResult(this) 673899" />
<Node Id="10368:[1160..1169).1" Label="this.Kind 673900" />
<Node Id="10368:[1191..1202).1" Label="this.Symbol 673901" />
<Node Id="10368:[1226..1236).1" Label="this.Error 673902" />
<Node Id="10312:[69237..69270).2" Label="return LookupResult.Good(symbol); 673903" />
<Node Id="10312:[19478..19516).1" Label="result.MergeEqual(resultOfThisMember); 673904" />
<Node Id="10312:[19478..19515).1" Label="result.MergeEqual(resultOfThisMember) 673905" />
<Node Id="10354:[10217..10242).1" Label="param MergeEqual(SingleLookupResult result) 673906" />
<Node Id="10354:[10192..10676).1" Label="param MergeEqual(this) 673907" />
<Node Id="10354:[10272..10276).1" Label="Kind 673908" />
<Node Id="10354:[4058..4122).3" Label="get
            {
                return _kind;
            } 673909" />
<Node Id="10354:[10268..10665).1" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 673910" />
<Node Id="10354:[10268..10665).2" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 673911" />
<Node Id="10354:[10404..10408).1" Label="Kind 673912" />
<Node Id="10354:[10386..10665).1" Label="if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 673913" />
<Node Id="10354:[10442..10463).1" Label="this.SetFrom(result); 673914" />
<Node Id="10354:[10442..10462).1" Label="this.SetFrom(result) 673915" />
<Node Id="10354:[8131..8155).1" Label="param SetFrom(SingleLookupResult other) 673916" />
<Node Id="10354:[8109..8324).1" Label="param SetFrom(this) 673917" />
<Node Id="10354:[8181..8186).1" Label="_kind 673918" />
<Node Id="10354:[8214..8234).1" Label="_symbolList.Clear(); 673919" />
<Node Id="10354:[8248..8278).1" Label="_symbolList.Add(other.Symbol); 673920" />
<Node Id="10354:[8248..8278).2" Label="_symbolList.Add(other.Symbol); 673921" />
<Node Id="10354:[8292..8298).1" Label="_error 673922" />
<Node Id="10354:[10442..10463).2" Label="this.SetFrom(result); 673923" />
<Node Id="10312:[19478..19516).2" Label="result.MergeEqual(resultOfThisMember); 673924" />
<Node Id="10312:[19259..19531).4" Label="foreach (Symbol member in members)
            {
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);
                result.MergeEqual(resultOfThisMember);
            } 673925" />
<Node Id="10312:[8049..8181).9" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 673926" />
<Node Id="10346:[11369..11508).10" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 673927" />
<Node Id="10346:[11532..11552).1" Label="result.IsMultiViable 673928" />
<Node Id="10354:[4919..5009).3" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 673929" />
<Node Id="10354:[4094..4107).5" Label="return _kind; 673930" />
<Node Id="10346:[11528..12231).1" Label="if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                } 673931" />
<Node Id="10346:[11665..12181).1" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 673932" />
<Node Id="10346:[11665..12181).2" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 673933" />
<Node Id="10346:[11665..12181).3" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 673934" />
<Node Id="10346:[11710..11746).1" Label="originalBinder.IsSemanticModelBinder 673935" />
<Node Id="10286:[2155..2260).1" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 673936" />
<Node Id="10286:[2191..2245).1" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 673937" />
<Node Id="10286:[2191..2245).2" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 673938" />
<Node Id="10286:[2198..2244).1" Label="this.Flags.Includes(BinderFlags.SemanticModel) 673939" />
<Node Id="10298:[471..492).14" Label="param Includes(this BinderFlags self) 673940" />
<Node Id="10298:[494..511).14" Label="param Includes(BinderFlags other) 673941" />
<Node Id="10346:[11665..12181).4" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 673942" />
<Node Id="10346:[11683..11747).1" Label="imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder) 673943" />
<Node Id="10345:[28212..28223).1" Label="param IsUsingAlias(string name) 673944" />
<Node Id="10345:[28225..28251).1" Label="param IsUsingAlias(bool callerIsSemanticModel) 673945" />
<Node Id="10345:[28185..28951).1" Label="param IsUsingAlias(this) 673946" />
<Node Id="10345:[28277..28305).1" Label="AliasAndUsingDirective node; 673947" />
<Node Id="10345:[28300..28304).1" Label="node 673948" />
<Node Id="10345:[28319..28911).1" Label="if (this.UsingAliases.TryGetValue(name, out node))
            {
                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if
                // there's a conflict between an alias and a member.  As a conflict may cause a
                // speculative lambda binding to fail this is semantically relevant and we need to
                // mark this using alias as referenced (and thus not something that can be removed).
                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);
                return true;
            } 673949" />
<Node Id="10345:[28319..28911).2" Label="if (this.UsingAliases.TryGetValue(name, out node))
            {
                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if
                // there's a conflict between an alias and a member.  As a conflict may cause a
                // speculative lambda binding to fail this is semantically relevant and we need to
                // mark this using alias as referenced (and thus not something that can be removed).
                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);
                return true;
            } 673950" />
<Node Id="10345:[28319..28911).3" Label="if (this.UsingAliases.TryGetValue(name, out node))
            {
                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if
                // there's a conflict between an alias and a member.  As a conflict may cause a
                // speculative lambda binding to fail this is semantically relevant and we need to
                // mark this using alias as referenced (and thus not something that can be removed).
                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);
                return true;
            } 673951" />
<Node Id="10345:[28927..28940).1" Label="return false; 673952" />
<Node Id="10346:[11665..12181).6" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 673953" />
<Node Id="10346:[11665..12181).7" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 673954" />
<Node Id="10346:[12205..12212).1" Label="return; 673955" />
<Node Id="10312:[4534..4658).18" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673956" />
<Node Id="10312:[4685..4699).2" Label="result.IsClear 673957" />
<Node Id="10354:[3684..3818).5" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 673958" />
<Node Id="10354:[3720..3803).33" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673959" />
<Node Id="10312:[4680..4787).3" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 673960" />
<Node Id="10312:[4749..4764).1" Label="binder = scope; 673961" />
<Node Id="10312:[4826..5058).6" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 673962" />
<Node Id="10312:[4826..5058).7" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 673963" />
<Node Id="10312:[5087..5101).1" Label="return binder; 673964" />
<Node Id="10312:[1585..1724).9" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673965" />
<Node Id="10319:[43504..43546).1" Label="diagnostics.Add(node, useSiteDiagnostics); 673966" />
<Node Id="10319:[43504..43546).2" Label="diagnostics.Add(node, useSiteDiagnostics); 673967" />
<Node Id="10319:[43504..43546).3" Label="diagnostics.Add(node, useSiteDiagnostics); 673968" />
<Node Id="10319:[43504..43546).4" Label="diagnostics.Add(node, useSiteDiagnostics); 673969" />
<Node Id="10319:[43562..43590).1" Label="Symbol bindingResult = null; 673970" />
<Node Id="10319:[43799..44676).1" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 673971" />
<Node Id="10319:[43799..44676).2" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 673972" />
<Node Id="10319:[43799..44676).3" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 673973" />
<Node Id="10319:[43853..43873).1" Label="IsViableType(result) 673974" />
<Node Id="10319:[41088..41107).1" Label="param IsViableType(LookupResult result) 673975" />
<Node Id="10319:[41138..41158).1" Label="result.IsMultiViable 673976" />
<Node Id="10354:[4919..5009).5" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 673977" />
<Node Id="10354:[4962..4966).5" Label="Kind 673978" />
<Node Id="10354:[4058..4122).7" Label="get
            {
                return _kind;
            } 673979" />
<Node Id="10354:[4094..4107).7" Label="return _kind; 673980" />
<Node Id="10319:[41133..41220).1" Label="if (!result.IsMultiViable)
            {
                return false;
            } 673981" />
<Node Id="10319:[41254..41268).1" Label="result.Symbols 673982" />
<Node Id="10354:[4525..4595).1" Label="get
            {
                return _symbolList;
            } 673983" />
<Node Id="10354:[4561..4580).1" Label="return _symbolList; 673984" />
<Node Id="10319:[41236..41680).1" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 673985" />
<Node Id="10319:[41302..41665).1" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 673986" />
<Node Id="10319:[41696..41709).1" Label="return false; 673987" />
<Node Id="10319:[43799..44676).4" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 673988" />
<Node Id="10319:[43799..44676).5" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 673989" />
<Node Id="10319:[43907..44661).1" Label="if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                } 673990" />
<Node Id="10319:[43907..44661).2" Label="if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                } 673991" />
<Node Id="10319:[44578..44642).1" Label="bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics); 673992" />
<Node Id="10319:[44578..44642).2" Label="bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics); 673993" />
<Node Id="10319:[44594..44641).1" Label="BindNativeIntegerSymbolIfAny(node, diagnostics) 673994" />
<Node Id="10319:[45850..45875).1" Label="param BindNativeIntegerSymbolIfAny(IdentifierNameSyntax node) 673995" />
<Node Id="10319:[45877..45902).1" Label="param BindNativeIntegerSymbolIfAny(DiagnosticBag diagnostics) 673996" />
<Node Id="10319:[45797..47405).1" Label="param BindNativeIntegerSymbolIfAny(this) 673997" />
<Node Id="10319:[45928..45952).1" Label="SpecialType specialType; 673998" />
<Node Id="10319:[45966..46327).1" Label="switch (node.Identifier.Text)
            {
                case 'nint':
                    specialType = SpecialType.System_IntPtr;
                    break;
                case 'nuint':
                    specialType = SpecialType.System_UIntPtr;
                    break;
                default:
                    return null;
            } 673999" />
<Node Id="10319:[46300..46312).1" Label="return null; 674000" />
<Node Id="10319:[44692..45392).1" Label="if (bindingResult is null)
            {
                bool wasError;

                bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options);
                if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
            } 674001" />
<Node Id="10319:[44751..44765).1" Label="bool wasError; 674002" />
<Node Id="10319:[44785..44930).1" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674003" />
<Node Id="10319:[44785..44930).2" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674004" />
<Node Id="10319:[44785..44930).3" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674005" />
<Node Id="10319:[44785..44930).5" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674006" />
<Node Id="10319:[44785..44930).6" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674007" />
<Node Id="10319:[44785..44930).7" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674008" />
<Node Id="10319:[44785..44930).8" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674009" />
<Node Id="10319:[44785..44930).9" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674010" />
<Node Id="10319:[44785..44930).10" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674011" />
<Node Id="10319:[44801..44929).1" Label="ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 674012" />
<Node Id="10319:[84167..84186).1" Label="param ResultSymbol(LookupResult result) 674013" />
<Node Id="10319:[84201..84218).1" Label="param ResultSymbol(string simpleName) 674014" />
<Node Id="10319:[84233..84242).1" Label="param ResultSymbol(int arity) 674015" />
<Node Id="10319:[84257..84273).1" Label="param ResultSymbol(SyntaxNode where) 674016" />
<Node Id="10319:[84288..84313).1" Label="param ResultSymbol(DiagnosticBag diagnostics) 674017" />
<Node Id="10319:[84328..84359).1" Label="param ResultSymbol(bool suppressUseSiteDiagnostics) 674018" />
<Node Id="10319:[84374..84391).1" Label="param ResultSymbol(out bool wasError) 674019" />
<Node Id="10319:[84406..84447).1" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 674020" />
<Node Id="10319:[84462..84508).1" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 674021" />
<Node Id="10319:[84124..109887).1" Label="param ResultSymbol(this) 674022" />
<Node Id="10319:[84534..84675).1" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674023" />
<Node Id="10319:[84534..84675).2" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674024" />
<Node Id="10319:[84534..84675).3" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674025" />
<Node Id="10319:[84534..84675).4" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674026" />
<Node Id="10319:[84534..84675).5" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674027" />
<Node Id="10319:[84534..84675).6" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674028" />
<Node Id="10319:[84534..84675).7" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674029" />
<Node Id="10319:[84534..84675).8" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674030" />
<Node Id="10319:[84534..84675).9" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674031" />
<Node Id="10319:[84550..84674).1" Label="resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 674032" />
<Node Id="10319:[84907..109876).1" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 674033" />
<Node Id="10319:[84907..109876).2" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 674034" />
<Node Id="10319:[84907..109876).3" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 674035" />
<Node Id="10319:[84907..109876).4" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 674036" />
<Node Id="10319:[84907..109876).5" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 674037" />
<Node Id="10319:[84907..109876).6" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 674038" />
<Node Id="10319:[84907..109876).7" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 674039" />
<Node Id="10319:[84907..109876).8" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 674040" />
<Node Id="10319:[84907..109876).9" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 674041" />
<Node Id="10319:[84907..109876).10" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 674042" />
<Node Id="10319:[85320..85348).1" Label="Debug.Assert(where != null); 674043" />
<Node Id="10319:[85320..85348).2" Label="Debug.Assert(where != null); 674044" />
<Node Id="10319:[85366..85400).1" Label="Debug.Assert(diagnostics != null); 674045" />
<Node Id="10319:[85366..85400).2" Label="Debug.Assert(diagnostics != null); 674046" />
<Node Id="10319:[85434..85448).1" Label="result.Symbols 674047" />
<Node Id="10354:[4525..4595).2" Label="get
            {
                return _symbolList;
            } 674048" />
<Node Id="10354:[4561..4580).2" Label="return _symbolList; 674049" />
<Node Id="10319:[85420..85449).1" Label="var symbols = result.Symbols; 674050" />
<Node Id="10319:[85467..85484).1" Label="wasError = false; 674051" />
<Node Id="10319:[85508..85528).1" Label="result.IsMultiViable 674052" />
<Node Id="10354:[4919..5009).6" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 674053" />
<Node Id="10319:[85504..106825).1" Label="if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                } 674054" />
<Node Id="10319:[85570..106806).1" Label="if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    } 674055" />
<Node Id="10319:[85570..106806).2" Label="if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    } 674056" />
<Node Id="10319:[103953..103983).1" Label="var singleResult = symbols[0]; 674057" />
<Node Id="10319:[104078..104122).1" Label="var singleType = singleResult as TypeSymbol; 674058" />
<Node Id="10319:[104148..106735).1" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 674059" />
<Node Id="10319:[104148..106735).2" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 674060" />
<Node Id="10319:[104874..105336).1" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 674061" />
<Node Id="10319:[105368..106708).1" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 674062" />
<Node Id="10319:[105465..105535).1" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 674063" />
<Node Id="10319:[105465..105535).2" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 674064" />
<Node Id="10319:[105465..105535).3" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 674065" />
<Node Id="10319:[105476..105534).1" Label="ReportUseSiteDiagnostics(singleResult, diagnostics, where) 674066" />
<Node Id="10319:[76345..76358).1" Label="param ReportUseSiteDiagnostics(Symbol symbol) 674067" />
<Node Id="10319:[76360..76385).1" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 674068" />
<Node Id="10319:[76387..76402).1" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 674069" />
<Node Id="10319:[76428..76480).1" Label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 674070" />
<Node Id="10319:[76494..76582).1" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 674071" />
<Node Id="10319:[76494..76582).2" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 674072" />
<Node Id="10319:[106763..106783).1" Label="return singleResult; 674073" />
<Node Id="10319:[84691..84861).1" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 674074" />
<Node Id="10319:[84877..84891).1" Label="return symbol; 674075" />
<Node Id="10319:[44948..45377).1" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 674076" />
<Node Id="10319:[45408..45421).1" Label="result.Free() 674077" />
<Node Id="10354:[11383..11549).1" Label="param Free(this) 674078" />
<Node Id="10354:[11428..11440).1" Label="this.Clear() 674079" />
<Node Id="10354:[3841..3991).1" Label="param Clear(this) 674080" />
<Node Id="10354:[3887..3892).1" Label="_kind 674081" />
<Node Id="10354:[3932..3952).1" Label="_symbolList.Clear(); 674082" />
<Node Id="10354:[3966..3980).1" Label="_error = null; 674083" />
<Node Id="10354:[3966..3972).1" Label="_error 674084" />
<Node Id="10354:[11428..11441).1" Label="this.Clear(); 674085" />
<Node Id="10354:[11455..11538).1" Label="if (_pool != null)
            {
                _pool.Free(this);
            } 674086" />
<Node Id="10354:[11455..11538).2" Label="if (_pool != null)
            {
                _pool.Free(this);
            } 674087" />
<Node Id="10354:[11506..11523).1" Label="_pool.Free(this); 674088" />
<Node Id="10354:[11506..11523).2" Label="_pool.Free(this); 674089" />
<Node Id="10319:[45408..45422).1" Label="result.Free(); 674090" />
<Node Id="10319:[45436..45568).1" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 674091" />
<Node Id="10319:[45505..45551).1" Label="AreNullableAnnotationsEnabled(node.Identifier) 674092" />
<Node Id="10286:[10010..10027).1" Label="param AreNullableAnnotationsEnabled(SyntaxToken token) 674093" />
<Node Id="10286:[9966..10197).1" Label="param AreNullableAnnotationsEnabled(this) 674094" />
<Node Id="10286:[10053..10100).1" Label="RoslynDebug.Assert(token.SyntaxTree is object); 674095" />
<Node Id="10286:[10114..10186).1" Label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 674096" />
<Node Id="10286:[10121..10185).1" Label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 674097" />
<Node Id="10286:[9073..9094).1" Label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 674098" />
<Node Id="10286:[9096..9108).1" Label="param AreNullableAnnotationsEnabled(int position) 674099" />
<Node Id="10286:[9029..9954).1" Label="param AreNullableAnnotationsEnabled(this) 674100" />
<Node Id="10286:[9134..9189).1" Label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 674101" />
<Node Id="10286:[9203..9282).1" Label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 674102" />
<Node Id="10286:[9203..9282).2" Label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 674103" />
<Node Id="10286:[9305..9942).1" Label="context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            } 674104" />
<Node Id="10286:[9298..9943).1" Label="return context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            }; 674105" />
<Node Id="10286:[9298..9943).2" Label="return context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            }; 674106" />
<Node Id="10286:[9798..9837).1" Label="AreNullableAnnotationsGloballyEnabled() 674107" />
<Node Id="10286:[10465..10663).1" Label="param AreNullableAnnotationsGloballyEnabled(this) 674108" />
<Node Id="10286:[10551..10586).1" Label="RoslynDebug.Assert(Next is object); 674109" />
<Node Id="10286:[10551..10586).2" Label="RoslynDebug.Assert(Next is object); 674110" />
<Node Id="10286:[10607..10651).1" Label="Next.AreNullableAnnotationsGloballyEnabled() 674111" />
<Node Id="10286:[10465..10663).2" Label="param AreNullableAnnotationsGloballyEnabled(this) 674112" />
<Node Id="10286:[10551..10586).3" Label="RoslynDebug.Assert(Next is object); 674113" />
<Node Id="10325:[4462..4594).1" Label="param AreNullableAnnotationsGloballyEnabled(this) 674114" />
<Node Id="10325:[4556..4582).1" Label="GetGlobalAnnotationState() 674115" />
<Node Id="10286:[10675..11259).1" Label="param GetGlobalAnnotationState(this) 674116" />
<Node Id="10286:[10741..11248).1" Label="switch (Compilation.Options.NullableContextOptions)
            {
                case NullableContextOptions.Enable:
                case NullableContextOptions.Annotations:
                    return true;

                case NullableContextOptions.Disable:
                case NullableContextOptions.Warnings:
                    return false;

                default:
                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);
            } 674117" />
<Node Id="10286:[11085..11098).1" Label="return false; 674118" />
<Node Id="10325:[4549..4583).1" Label="return GetGlobalAnnotationState(); 674119" />
<Node Id="10286:[10600..10652).1" Label="return Next.AreNullableAnnotationsGloballyEnabled(); 674120" />
<Node Id="10319:[45436..45568).4" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 674121" />
<Node Id="10319:[45443..45567).1" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult) 674122" />
<Node Id="10287:[2306..2328).1" Label="param CreateUnannotated(bool isNullableEnabled) 674123" />
<Node Id="10287:[2330..2343).1" Label="param CreateUnannotated(Symbol symbol) 674124" />
<Node Id="10287:[2377..2471).1" Label="if (symbol is null)
                {
                    return default;
                } 674125" />
<Node Id="10287:[2489..2521).1" Label="var type = symbol as TypeSymbol; 674126" />
<Node Id="10287:[2539..2781).1" Label="return type is null ?
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 674127" />
<Node Id="10287:[2546..2558).1" Label="type is null 674128" />
<Node Id="10287:[2539..2781).3" Label="return type is null ?
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 674129" />
<Node Id="10287:[2582..2656).1" Label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) 674130" />
<Node Id="10287:[1144..1157).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(Symbol symbol) 674131" />
<Node Id="10287:[1159..1181).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(bool isNullableEnabled) 674132" />
<Node Id="10287:[1092..1409).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 674133" />
<Node Id="10287:[1215..1253).1" Label="Debug.Assert(!(symbol is TypeSymbol)); 674134" />
<Node Id="10287:[1271..1302).1" Label="_typeWithAnnotations = default; 674135" />
<Node Id="10287:[1271..1291).1" Label="_typeWithAnnotations 674136" />
<Node Id="10287:[1320..1327).1" Label="_symbol 674137" />
<Node Id="10287:[1355..1373).1" Label="_isNullableEnabled 674138" />
<Node Id="10319:[18724..18740).1" Label="result.IsDefault 674139" />
<Node Id="10287:[1857..1908).1" Label="=$ !_typeWithAnnotations.HasType && _symbol is null 674140" />
<Node Id="10287:[1893..1908).1" Label="_symbol is null 674141" />
<Node Id="10287:[1860..1908).1" Label="!_typeWithAnnotations.HasType && _symbol is null 674142" />
<Node Id="10319:[18710..18742).1" Label="Debug.Assert(!result.IsDefault); 674143" />
<Node Id="10319:[18758..18826).1" Label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 674144" />
<Node Id="10319:[18758..18826).2" Label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 674145" />
<Node Id="10319:[18758..18826).3" Label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 674146" />
<Node Id="10319:[18758..18826).4" Label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 674147" />
<Node Id="10319:[18765..18825).1" Label="UnwrapAlias(result, diagnostics, syntax, basesBeingResolved) 674148" />
<Node Id="10319:[51762..51815).1" Label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 674149" />
<Node Id="10319:[51817..51842).1" Label="param UnwrapAlias(DiagnosticBag diagnostics) 674150" />
<Node Id="10319:[51844..51861).1" Label="param UnwrapAlias(SyntaxNode syntax) 674151" />
<Node Id="10319:[51863..51909).1" Label="param UnwrapAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 674152" />
<Node Id="10319:[51698..52285).1" Label="param UnwrapAlias(this) 674153" />
<Node Id="10319:[51939..51953).1" Label="symbol.IsAlias 674154" />
<Node Id="10287:[1680..1716).1" Label="=$ _symbol?.Kind == SymbolKind.Alias 674155" />
<Node Id="10287:[1683..1716).1" Label="_symbol?.Kind == SymbolKind.Alias 674156" />
<Node Id="10319:[51935..52244).1" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 674157" />
<Node Id="10319:[52260..52274).1" Label="return symbol; 674158" />
<Node Id="10345:[9704..9823).1" Label="declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol 674159" />
<Node Id="10287:[1784..1818).1" Label="=$ Symbol as NamespaceOrTypeSymbol 674160" />
<Node Id="10287:[1787..1793).1" Label="Symbol 674161" />
<Node Id="10287:[1535..1573).1" Label="=$ _symbol ?? TypeWithAnnotations.Type 674162" />
<Node Id="10287:[1538..1573).1" Label="_symbol ?? TypeWithAnnotations.Type 674163" />
<Node Id="10287:[1787..1818).1" Label="Symbol as NamespaceOrTypeSymbol 674164" />
<Node Id="10345:[9850..12656).1" Label="if (imported.Kind == SymbolKind.Namespace)
                        {
                            if (usingDirective.StaticKeyword != default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);
                            }
                            else if (uniqueUsings.Contains(imported))
                            {
                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                uniqueUsings.Add(imported);
                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));
                            }
                        }
                        else if (imported.Kind == SymbolKind.NamedType)
                        {
                            if (usingDirective.StaticKeyword == default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                var importedType = (NamedTypeSymbol)imported;
                                if (uniqueUsings.Contains(importedType))
                                {
                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);
                                }
                                else
                                {
                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);

                                    uniqueUsings.Add(importedType);
                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));
                                }
                            }
                        }
                        else if (imported.Kind != SymbolKind.ErrorType)
                        {
                            // Do not report additional error if the symbol itself is erroneous.

                            // error: '$symbol$' is a '$symbol kind$' but is used as 'type or namespace'
                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,
                                usingDirective.Name,
                                imported.GetKindText(),
                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());
                        } 674165" />
<Node Id="10345:[9949..10705).1" Label="if (usingDirective.StaticKeyword != default(SyntaxToken))
                            {
                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);
                            }
                            else if (uniqueUsings.Contains(imported))
                            {
                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                uniqueUsings.Add(imported);
                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));
                            } 674166" />
<Node Id="10345:[10221..10705).1" Label="if (uniqueUsings.Contains(imported))
                            {
                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                uniqueUsings.Add(imported);
                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));
                            } 674167" />
<Node Id="10345:[10221..10705).2" Label="if (uniqueUsings.Contains(imported))
                            {
                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);
                            }
                            else
                            {
                                uniqueUsings.Add(imported);
                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));
                            } 674168" />
<Node Id="10345:[10538..10565).1" Label="uniqueUsings.Add(imported); 674169" />
<Node Id="10345:[10599..10674).1" Label="usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective)); 674170" />
<Node Id="10345:[10599..10674).2" Label="usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective)); 674171" />
<Node Id="10345:[10599..10674).3" Label="usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective)); 674172" />
<Node Id="10345:[10610..10672).1" Label="new NamespaceOrTypeAndUsingDirective(imported, usingDirective) 674173" />
<Node Id="10361:[603..640).1" Label="param NamespaceOrTypeAndUsingDirective(NamespaceOrTypeSymbol namespaceOrType) 674174" />
<Node Id="10361:[642..677).1" Label="param NamespaceOrTypeAndUsingDirective(UsingDirectiveSyntax usingDirective) 674175" />
<Node Id="10361:[563..804).1" Label="param NamespaceOrTypeAndUsingDirective(this) 674176" />
<Node Id="10361:[703..723).1" Label="this.NamespaceOrType 674177" />
<Node Id="10361:[756..775).1" Label="this.UsingDirective 674178" />
<Node Id="10345:[10599..10674).5" Label="usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective)); 674179" />
<Node Id="10345:[12718..12738).1" Label="uniqueUsings.Free(); 674180" />
<Node Id="10345:[12769..12877).1" Label="if (diagnostics.IsEmptyWithoutResolution)
            {
                diagnostics = null;
            } 674181" />
<Node Id="10345:[12843..12862).1" Label="diagnostics = null; 674182" />
<Node Id="10345:[12893..13027).1" Label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 674183" />
<Node Id="10345:[12893..13027).2" Label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 674184" />
<Node Id="10345:[12893..13027).5" Label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 674185" />
<Node Id="10345:[12893..13027).7" Label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 674186" />
<Node Id="10345:[12893..13027).8" Label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 674187" />
<Node Id="10345:[12893..13027).9" Label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 674188" />
<Node Id="10345:[12900..13026).1" Label="new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics) 674189" />
<Node Id="10345:[1753..1782).2" Label="param Imports(CSharpCompilation compilation) 674190" />
<Node Id="10345:[1797..1861).2" Label="param Imports(ImmutableDictionary$string, AliasAndUsingDirective$ usingAliases) 674191" />
<Node Id="10345:[1876..1931).2" Label="param Imports(ImmutableArray$NamespaceOrTypeAndUsingDirective$ usings) 674192" />
<Node Id="10345:[1946..1998).2" Label="param Imports(ImmutableArray$AliasAndExternAliasDirective$ externs) 674193" />
<Node Id="10345:[2013..2038).2" Label="param Imports(DiagnosticBag diagnostics) 674194" />
<Node Id="10345:[1723..2412).2" Label="param Imports(this) 674195" />
<Node Id="10345:[1234..1246).2" Label="_compilation 674196" />
<Node Id="10345:[1288..1300).2" Label="_diagnostics 674197" />
<Node Id="10345:[1531..1543).2" Label="UsingAliases 674198" />
<Node Id="10345:[2064..2099).5" Label="Debug.Assert(usingAliases != null); 674199" />
<Node Id="10345:[2064..2099).6" Label="Debug.Assert(usingAliases != null); 674200" />
<Node Id="10345:[2113..2145).3" Label="Debug.Assert(!usings.IsDefault); 674201" />
<Node Id="10345:[2159..2192).3" Label="Debug.Assert(!externs.IsDefault); 674202" />
<Node Id="10346:[3712..3801).6" Label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 674203" />
<Node Id="10345:[25064..25074).2" Label="Validate() 674204" />
<Node Id="10345:[26266..28173).2" Label="param Validate(this) 674205" />
<Node Id="10345:[26314..26387).3" Label="if (this == Empty)
            {
                return;
            } 674206" />
<Node Id="10345:[26403..26475).1" Label="DiagnosticBag semanticDiagnostics = _compilation.DeclarationDiagnostics; 674207" />
<Node Id="10345:[26994..27050).1" Label="var corLibrary = _compilation.SourceAssembly.CorLibrary; 674208" />
<Node Id="10345:[27064..27114).1" Label="var conversions = new TypeConversions(corLibrary); 674209" />
<Node Id="10345:[27064..27114).2" Label="var conversions = new TypeConversions(corLibrary); 674210" />
<Node Id="10345:[27082..27113).1" Label="new TypeConversions(corLibrary) 674211" />
<Node Id="10845:[522..547).1" Label="param TypeConversions(AssemblySymbol corLibrary) 674212" />
<Node Id="10845:[549..580).1" Label="param TypeConversions(bool includeNullability = false) 674213" />
<Node Id="10845:[499..728).1" Label="param TypeConversions(this) 674214" />
<Node Id="10845:[602..612).1" Label="corLibrary 674215" />
<Node Id="10845:[637..638).1" Label="0 674216" />
<Node Id="10845:[660..678).1" Label="includeNullability 674217" />
<Node Id="10845:[701..705).1" Label="null 674218" />
<Node Id="10845:[499..728).2" Label="param TypeConversions(this) 674219" />
<Node Id="10845:[764..789).1" Label="param TypeConversions(AssemblySymbol corLibrary) 674220" />
<Node Id="10845:[791..816).1" Label="param TypeConversions(int currentRecursionDepth) 674221" />
<Node Id="10845:[818..841).1" Label="param TypeConversions(bool includeNullability) 674222" />
<Node Id="10845:[843..878).1" Label="param TypeConversions(TypeConversions otherNullabilityOpt) 674223" />
<Node Id="10845:[740..997).1" Label="param TypeConversions(this) 674224" />
<Node Id="10843:[685..687).1" Label="50 674225" />
<Node Id="10843:[661..687).1" Label="MaximumRecursionDepth = 50 674226" />
<Node Id="10843:[82075..82080).1" Label="false 674227" />
<Node Id="10843:[82071..82080).1" Label="F = false 674228" />
<Node Id="10843:[82114..82118).1" Label="true 674229" />
<Node Id="10843:[82110..82118).1" Label="T = true 674230" />
<Node Id="10843:[82447..82485).1" Label="{ F, F, T, F, T, F, T, F, F, T, T, T } 674231" />
<Node Id="10843:[82447..82485).2" Label="{ F, F, T, F, T, F, T, F, F, T, T, T } 674232" />
<Node Id="10843:[82447..82485).4" Label="{ F, F, T, F, T, F, T, F, F, T, T, T } 674233" />
<Node Id="10843:[82519..82557).1" Label="{ F, F, T, T, T, T, T, T, F, T, T, T } 674234" />
<Node Id="10843:[82519..82557).2" Label="{ F, F, T, T, T, T, T, T, F, T, T, T } 674235" />
<Node Id="10843:[82519..82557).4" Label="{ F, F, T, T, T, T, T, T, F, T, T, T } 674236" />
<Node Id="10843:[82591..82629).1" Label="{ F, F, F, F, T, F, T, F, F, T, T, T } 674237" />
<Node Id="10843:[82591..82629).2" Label="{ F, F, F, F, T, F, T, F, F, T, T, T } 674238" />
<Node Id="10843:[82591..82629).6" Label="{ F, F, F, F, T, F, T, F, F, T, T, T } 674239" />
<Node Id="10843:[82663..82701).1" Label="{ F, F, F, F, T, T, T, T, F, T, T, T } 674240" />
<Node Id="10843:[82663..82701).2" Label="{ F, F, F, F, T, T, T, T, F, T, T, T } 674241" />
<Node Id="10843:[82663..82701).6" Label="{ F, F, F, F, T, T, T, T, F, T, T, T } 674242" />
<Node Id="10843:[82735..82773).1" Label="{ F, F, F, F, F, F, T, F, F, T, T, T } 674243" />
<Node Id="10843:[82735..82773).2" Label="{ F, F, F, F, F, F, T, F, F, T, T, T } 674244" />
<Node Id="10843:[82735..82773).8" Label="{ F, F, F, F, F, F, T, F, F, T, T, T } 674245" />
<Node Id="10843:[82807..82845).1" Label="{ F, F, F, F, F, F, T, T, F, T, T, T } 674246" />
<Node Id="10843:[82807..82845).2" Label="{ F, F, F, F, F, F, T, T, F, T, T, T } 674247" />
<Node Id="10843:[82807..82845).8" Label="{ F, F, F, F, F, F, T, T, F, T, T, T } 674248" />
<Node Id="10843:[82879..82917).1" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 674249" />
<Node Id="10843:[82879..82917).2" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 674250" />
<Node Id="10843:[82879..82917).11" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 674251" />
<Node Id="10843:[82951..82989).1" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 674252" />
<Node Id="10843:[82951..82989).2" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 674253" />
<Node Id="10843:[82951..82989).11" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 674254" />
<Node Id="10843:[83023..83061).1" Label="{ F, F, F, T, T, T, T, T, F, T, T, T } 674255" />
<Node Id="10843:[83023..83061).2" Label="{ F, F, F, T, T, T, T, T, F, T, T, T } 674256" />
<Node Id="10843:[83023..83061).5" Label="{ F, F, F, T, T, T, T, T, F, T, T, T } 674257" />
<Node Id="10843:[83095..83133).1" Label="{ F, F, F, F, F, F, F, F, F, F, T, F } 674258" />
<Node Id="10843:[83095..83133).2" Label="{ F, F, F, F, F, F, F, F, F, F, T, F } 674259" />
<Node Id="10843:[83095..83133).12" Label="{ F, F, F, F, F, F, F, F, F, F, T, F } 674260" />
<Node Id="10843:[83167..83205).1" Label="{ F, F, F, F, F, F, F, F, F, F, F, F } 674261" />
<Node Id="10843:[83167..83205).2" Label="{ F, F, F, F, F, F, F, F, F, F, F, F } 674262" />
<Node Id="10843:[83239..83277).1" Label="{ F, F, F, F, F, F, F, F, F, F, F, F } 674263" />
<Node Id="10843:[83239..83277).2" Label="{ F, F, F, F, F, F, F, F, F, F, F, F } 674264" />
<Node Id="10843:[82333..83288).1" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 674265" />
<Node Id="10843:[82333..83288).2" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 674266" />
<Node Id="10843:[82333..83288).3" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 674267" />
<Node Id="10843:[82333..83288).4" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 674268" />
<Node Id="10843:[82333..83288).5" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 674269" />
<Node Id="10843:[82333..83288).6" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 674270" />
<Node Id="10843:[82333..83288).7" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 674271" />
<Node Id="10843:[82333..83288).8" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 674272" />
<Node Id="10843:[82333..83288).9" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 674273" />
<Node Id="10843:[82333..83288).10" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 674274" />
<Node Id="10843:[82333..83288).11" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 674275" />
<Node Id="10843:[82333..83288).12" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 674276" />
<Node Id="10843:[82333..83288).13" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 674277" />
<Node Id="10843:[82293..83288).1" Label="s_implicitNumericConversions =
        {
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 674278" />
<Node Id="10843:[83487..83525).1" Label="{ F, T, F, T, F, T, F, T, T, F, F, F } 674279" />
<Node Id="10843:[83487..83525).2" Label="{ F, T, F, T, F, T, F, T, T, F, F, F } 674280" />
<Node Id="10843:[83487..83525).3" Label="{ F, T, F, T, F, T, F, T, T, F, F, F } 674281" />
<Node Id="10843:[83559..83597).1" Label="{ T, F, F, F, F, F, F, F, T, F, F, F } 674282" />
<Node Id="10843:[83559..83597).2" Label="{ T, F, F, F, F, F, F, F, T, F, F, F } 674283" />
<Node Id="10843:[83559..83597).3" Label="{ T, F, F, F, F, F, F, F, T, F, F, F } 674284" />
<Node Id="10843:[83631..83669).1" Label="{ T, T, F, T, F, T, F, T, T, F, F, F } 674285" />
<Node Id="10843:[83631..83669).2" Label="{ T, T, F, T, F, T, F, T, T, F, F, F } 674286" />
<Node Id="10843:[83631..83669).4" Label="{ T, T, F, T, F, T, F, T, T, F, F, F } 674287" />
<Node Id="10843:[83703..83741).1" Label="{ T, T, T, F, F, F, F, F, T, F, F, F } 674288" />
<Node Id="10843:[83703..83741).2" Label="{ T, T, T, F, F, F, F, F, T, F, F, F } 674289" />
<Node Id="10843:[83703..83741).5" Label="{ T, T, T, F, F, F, F, F, T, F, F, F } 674290" />
<Node Id="10843:[83775..83813).1" Label="{ T, T, T, T, F, T, F, T, T, F, F, F } 674291" />
<Node Id="10843:[83775..83813).2" Label="{ T, T, T, T, F, T, F, T, T, F, F, F } 674292" />
<Node Id="10843:[83775..83813).6" Label="{ T, T, T, T, F, T, F, T, T, F, F, F } 674293" />
<Node Id="10843:[83847..83885).1" Label="{ T, T, T, T, T, F, F, F, T, F, F, F } 674294" />
<Node Id="10843:[83847..83885).2" Label="{ T, T, T, T, T, F, F, F, T, F, F, F } 674295" />
<Node Id="10843:[83847..83885).7" Label="{ T, T, T, T, T, F, F, F, T, F, F, F } 674296" />
<Node Id="10843:[83919..83957).1" Label="{ T, T, T, T, T, T, F, T, T, F, F, F } 674297" />
<Node Id="10843:[83919..83957).2" Label="{ T, T, T, T, T, T, F, T, T, F, F, F } 674298" />
<Node Id="10843:[83919..83957).8" Label="{ T, T, T, T, T, T, F, T, T, F, F, F } 674299" />
<Node Id="10843:[83991..84029).1" Label="{ T, T, T, T, T, T, T, F, T, F, F, F } 674300" />
<Node Id="10843:[83991..84029).2" Label="{ T, T, T, T, T, T, T, F, T, F, F, F } 674301" />
<Node Id="10843:[83991..84029).9" Label="{ T, T, T, T, T, T, T, F, T, F, F, F } 674302" />
<Node Id="10843:[84063..84101).1" Label="{ T, T, T, F, F, F, F, F, F, F, F, F } 674303" />
<Node Id="10843:[84063..84101).2" Label="{ T, T, T, F, F, F, F, F, F, F, F, F } 674304" />
<Node Id="10843:[84063..84101).5" Label="{ T, T, T, F, F, F, F, F, F, F, F, F } 674305" />
<Node Id="10843:[84135..84173).1" Label="{ T, T, T, T, T, T, T, T, T, F, F, T } 674306" />
<Node Id="10843:[84135..84173).2" Label="{ T, T, T, T, T, T, T, T, T, F, F, T } 674307" />
<Node Id="10843:[84135..84173).11" Label="{ T, T, T, T, T, T, T, T, T, F, F, T } 674308" />
<Node Id="10843:[84207..84245).1" Label="{ T, T, T, T, T, T, T, T, T, T, F, T } 674309" />
<Node Id="10843:[84207..84245).2" Label="{ T, T, T, T, T, T, T, T, T, T, F, T } 674310" />
<Node Id="10843:[84207..84245).12" Label="{ T, T, T, T, T, T, T, T, T, T, F, T } 674311" />
<Node Id="10843:[84279..84317).1" Label="{ T, T, T, T, T, T, T, T, T, T, T, F } 674312" />
<Node Id="10843:[84279..84317).2" Label="{ T, T, T, T, T, T, T, T, T, T, T, F } 674313" />
<Node Id="10843:[84279..84317).13" Label="{ T, T, T, T, T, T, T, T, T, T, T, F } 674314" />
<Node Id="10843:[83373..84328).1" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 674315" />
<Node Id="10843:[83373..84328).2" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 674316" />
<Node Id="10843:[83373..84328).3" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 674317" />
<Node Id="10843:[83373..84328).4" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 674318" />
<Node Id="10843:[83373..84328).5" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 674319" />
<Node Id="10843:[83373..84328).6" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 674320" />
<Node Id="10843:[83373..84328).7" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 674321" />
<Node Id="10843:[83373..84328).8" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 674322" />
<Node Id="10843:[83373..84328).9" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 674323" />
<Node Id="10843:[83373..84328).10" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 674324" />
<Node Id="10843:[83373..84328).11" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 674325" />
<Node Id="10843:[83373..84328).12" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 674326" />
<Node Id="10843:[83373..84328).13" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 674327" />
<Node Id="10843:[83333..84328).1" Label="s_explicitNumericConversions =
        {
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 674328" />
<Node Id="10845:[900..910).1" Label="corLibrary 674329" />
<Node Id="10845:[912..933).1" Label="currentRecursionDepth 674330" />
<Node Id="10845:[935..953).1" Label="includeNullability 674331" />
<Node Id="10845:[955..974).1" Label="otherNullabilityOpt 674332" />
<Node Id="10845:[740..997).2" Label="param TypeConversions(this) 674333" />
<Node Id="10843:[1173..1198).1" Label="param ConversionsBase(AssemblySymbol corLibrary) 674334" />
<Node Id="10843:[1200..1225).1" Label="param ConversionsBase(int currentRecursionDepth) 674335" />
<Node Id="10843:[1227..1250).1" Label="param ConversionsBase(bool includeNullability) 674336" />
<Node Id="10843:[1252..1287).1" Label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 674337" />
<Node Id="10843:[1147..1833).1" Label="param ConversionsBase(this) 674338" />
<Node Id="10843:[734..744).1" Label="corLibrary 674339" />
<Node Id="10843:[778..799).1" Label="currentRecursionDepth 674340" />
<Node Id="10843:[835..853).1" Label="IncludeNullability 674341" />
<Node Id="10843:[1113..1134).1" Label="_lazyOtherNullability 674342" />
<Node Id="10843:[1313..1354).1" Label="Debug.Assert((object)corLibrary != null); 674343" />
<Node Id="10843:[1313..1354).2" Label="Debug.Assert((object)corLibrary != null); 674344" />
<Node Id="10843:[1368..1474).1" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 674345" />
<Node Id="10843:[1368..1474).2" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 674346" />
<Node Id="10843:[1488..1600).1" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 674347" />
<Node Id="10843:[1488..1600).2" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 674348" />
<Node Id="10843:[1616..1631).1" Label="this.corLibrary 674349" />
<Node Id="10843:[1659..1685).1" Label="this.currentRecursionDepth 674350" />
<Node Id="10843:[1724..1742).1" Label="IncludeNullability 674351" />
<Node Id="10843:[1778..1799).1" Label="_lazyOtherNullability 674352" />
<Node Id="10345:[27128..27705).1" Label="foreach (var @using in Usings)
            {
                // Check if `using static` directives meet constraints.
                if (@using.NamespaceOrType.IsType)
                {
                    var typeSymbol = (TypeSymbol)@using.NamespaceOrType;
                    // LAFHIS
                    var location = (@using.UsingDirective != null ? @using.UsingDirective.Name.Location : null) ?? NoLocation.Singleton;
                    typeSymbol.CheckAllConstraints(_compilation, conversions, location, semanticDiagnostics);
                }
            } 674353" />
<Node Id="10345:[27264..27690).1" Label="if (@using.NamespaceOrType.IsType)
                {
                    var typeSymbol = (TypeSymbol)@using.NamespaceOrType;
                    // LAFHIS
                    var location = (@using.UsingDirective != null ? @using.UsingDirective.Name.Location : null) ?? NoLocation.Singleton;
                    typeSymbol.CheckAllConstraints(_compilation, conversions, location, semanticDiagnostics);
                } 674354" />
<Node Id="10345:[27773..27973).1" Label="foreach (var alias in ExternAliases)
            {
                alias.Alias.GetAliasTarget(null);
                semanticDiagnostics.AddRange(alias.Alias.AliasTargetDiagnostics);
            } 674355" />
<Node Id="10345:[27989..28162).1" Label="if (_diagnostics != null && !_diagnostics.IsEmptyWithoutResolution)
            {
                semanticDiagnostics.AddRange(_diagnostics.AsEnumerable());
            } 674356" />
<Node Id="10345:[27989..28162).2" Label="if (_diagnostics != null && !_diagnostics.IsEmptyWithoutResolution)
            {
                semanticDiagnostics.AddRange(_diagnostics.AsEnumerable());
            } 674357" />
<Node Id="10345:[25064..25075).2" Label="Validate(); 674358" />
<Node Id="10345:[25858..25865).2" Label="return; 674359" />
<Node Id="10076:[4437..4452).1" Label="param GetBinder(SyntaxNode node) 674360" />
<Node Id="10076:[4454..4498).1" Label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 674361" />
<Node Id="10076:[4500..4523).1" Label="param GetBinder(Symbol memberOpt = null) 674362" />
<Node Id="10076:[4411..5059).1" Label="param GetBinder(this) 674363" />
<Node Id="10076:[4549..4579).1" Label="int position = node.SpanStart; 674364" />
<Node Id="10076:[4821..4829).1" Label="InScript 674365" />
<Node Id="10076:[3592..3700).2" Label="get
            {
                return _syntaxTree.Options.Kind == SourceCodeKind.Script;
            } 674366" />
<Node Id="10076:[3628..3685).3" Label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 674367" />
<Node Id="10076:[4815..4966).1" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 674368" />
<Node Id="10076:[4815..4966).3" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 674369" />
<Node Id="10076:[4815..4966).4" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 674370" />
<Node Id="10076:[4815..4966).5" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 674371" />
<Node Id="10076:[4932..4951).1" Label="node = node.Parent; 674372" />
<Node Id="10076:[4982..5048).1" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 674373" />
<Node Id="10076:[4982..5048).2" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 674374" />
<Node Id="10076:[4982..5048).3" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 674375" />
<Node Id="10076:[4982..5048).4" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 674376" />
<Node Id="10076:[4989..5047).1" Label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 674377" />
<Node Id="10076:[5097..5112).1" Label="param GetBinder(SyntaxNode node) 674378" />
<Node Id="10076:[5114..5126).1" Label="param GetBinder(int position) 674379" />
<Node Id="10076:[5128..5172).1" Label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 674380" />
<Node Id="10076:[5174..5197).1" Label="param GetBinder(Symbol memberOpt = null) 674381" />
<Node Id="10076:[5071..5759).1" Label="param GetBinder(this) 674382" />
<Node Id="10076:[5223..5250).1" Label="Debug.Assert(node != null); 674383" />
<Node Id="10076:[5223..5250).2" Label="Debug.Assert(node != null); 674384" />
<Node Id="10076:[5277..5448).1" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 674385" />
<Node Id="10076:[5277..5448).2" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 674386" />
<Node Id="10076:[5470..5538).1" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 674387" />
<Node Id="10076:[5552..5614).1" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 674388" />
<Node Id="10076:[5552..5614).2" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 674389" />
<Node Id="10076:[5552..5614).3" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 674390" />
<Node Id="10076:[5552..5613).1" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 674391" />
<Node Id="10077:[1039..1051).2" Label="param Initialize(int position) 674392" />
<Node Id="10077:[1053..1090).2" Label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 674393" />
<Node Id="10077:[1092..1108).2" Label="param Initialize(Symbol memberOpt) 674394" />
<Node Id="10077:[1014..1370).2" Label="param Initialize(this) 674395" />
<Node Id="10077:[1142..1210).8" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 674396" />
<Node Id="10077:[1142..1210).9" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 674397" />
<Node Id="10077:[1142..1210).11" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 674398" />
<Node Id="10077:[1142..1210).12" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 674399" />
<Node Id="10077:[1230..1239).2" Label="_position 674400" />
<Node Id="10077:[1269..1290).2" Label="_memberDeclarationOpt 674401" />
<Node Id="10077:[1332..1342).2" Label="_memberOpt 674402" />
<Node Id="10076:[5552..5614).4" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 674403" />
<Node Id="10076:[5628..5664).1" Label="Binder result = visitor.Visit(node); 674404" />
<Node Id="10076:[5644..5663).1" Label="visitor.Visit(node) 674405" />
<Node Id="10077:[2693..2708).1" Label="param Visit(SyntaxNode node) 674406" />
<Node Id="10077:[2664..2780).1" Label="param Visit(this) 674407" />
<Node Id="10077:[2742..2765).1" Label="return VisitCore(node); 674408" />
<Node Id="10077:[2749..2764).1" Label="VisitCore(node) 674409" />
<Node Id="10077:[2877..2892).1" Label="param VisitCore(SyntaxNode node) 674410" />
<Node Id="10077:[2852..2986).1" Label="param VisitCore(this) 674411" />
<Node Id="10077:[2926..2971).1" Label="return ((CSharpSyntaxNode)node).Accept(this); 674412" />
<Node Id="10077:[2926..2971).2" Label="return ((CSharpSyntaxNode)node).Accept(this); 674413" />
<Node Id="10077:[2926..2971).3" Label="return ((CSharpSyntaxNode)node).Accept(this); 674414" />
<Node Id="10077:[34617..34644).1" Label="param VisitClassDeclaration(ClassDeclarationSyntax node) 674415" />
<Node Id="10077:[34572..34731).1" Label="param VisitClassDeclaration(this) 674416" />
<Node Id="10077:[34678..34716).1" Label="return VisitTypeDeclarationCore(node); 674417" />
<Node Id="10077:[34685..34715).1" Label="VisitTypeDeclarationCore(node) 674418" />
<Node Id="10077:[31025..31053).1" Label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 674419" />
<Node Id="10077:[30985..32417).1" Label="param VisitTypeDeclarationCore(this) 674420" />
<Node Id="10077:[31087..31238).1" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 674421" />
<Node Id="10077:[31087..31238).2" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 674422" />
<Node Id="10077:[31087..31238).3" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 674423" />
<Node Id="10077:[31258..31297).1" Label="NodeUsage extraInfo = NodeUsage.Normal; 674424" />
<Node Id="10077:[31490..32331).1" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 674425" />
<Node Id="10077:[31490..32331).2" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 674426" />
<Node Id="10077:[31490..32331).6" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 674427" />
<Node Id="10077:[31490..32331).7" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 674428" />
<Node Id="10077:[31842..31894).1" Label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 674429" />
<Node Id="10077:[32351..32402).1" Label="return VisitTypeDeclarationCore(parent, extraInfo); 674430" />
<Node Id="10077:[32351..32402).2" Label="return VisitTypeDeclarationCore(parent, extraInfo); 674431" />
<Node Id="10077:[32358..32401).1" Label="VisitTypeDeclarationCore(parent, extraInfo) 674432" />
<Node Id="10077:[32474..32502).1" Label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 674433" />
<Node Id="10077:[32504..32523).1" Label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 674434" />
<Node Id="10077:[32433..34556).1" Label="param VisitTypeDeclarationCore(this) 674435" />
<Node Id="10077:[32557..32607).1" Label="var key = CreateBinderCacheKey(parent, extraInfo); 674436" />
<Node Id="10077:[32557..32607).2" Label="var key = CreateBinderCacheKey(parent, extraInfo); 674437" />
<Node Id="10077:[32567..32606).1" Label="CreateBinderCacheKey(parent, extraInfo) 674438" />
<Node Id="10077:[44159..44180).2" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 674439" />
<Node Id="10077:[44182..44197).2" Label="param CreateBinderCacheKey(NodeUsage usage) 674440" />
<Node Id="10077:[44231..44317).9" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 674441" />
<Node Id="10077:[44231..44317).11" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 674442" />
<Node Id="10077:[44335..44374).7" Label="return new BinderCacheKey(node, usage); 674443" />
<Node Id="10077:[44342..44373).2" Label="new BinderCacheKey(node, usage) 674444" />
<Node Id="10076:[853..1034).2" Label="param BinderCacheKey(this) 674445" />
<Node Id="10077:[32557..32607).3" Label="var key = CreateBinderCacheKey(parent, extraInfo); 674446" />
<Node Id="10077:[32627..32647).1" Label="Binder resultBinder; 674447" />
<Node Id="10077:[32670..32681).1" Label="binderCache 674448" />
<Node Id="10077:[2066..2158).3" Label="get
                {
                    return _factory._binderCache;
                } 674449" />
<Node Id="10077:[2110..2139).3" Label="return _factory._binderCache; 674450" />
<Node Id="10077:[32665..34501).1" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 674451" />
<Node Id="10077:[32665..34501).2" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 674452" />
<Node Id="10077:[32665..34501).3" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 674453" />
<Node Id="10077:[32665..34501).4" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 674454" />
<Node Id="10077:[32665..34501).5" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 674455" />
<Node Id="10077:[33226..33266).1" Label="resultBinder = VisitCore(parent.Parent); 674456" />
<Node Id="10077:[33241..33265).1" Label="VisitCore(parent.Parent) 674457" />
<Node Id="10077:[2877..2892).2" Label="param VisitCore(SyntaxNode node) 674458" />
<Node Id="10077:[39020..39048).1" Label="param VisitCompilationUnit(CompilationUnitSyntax parent) 674459" />
<Node Id="10077:[38976..39245).1" Label="param VisitCompilationUnit(this) 674460" />
<Node Id="10077:[39082..39230).1" Label="return VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript); 674461" />
<Node Id="10077:[39170..39187).1" Label="IsInUsing(parent) 674462" />
<Node Id="10077:[44823..44854).1" Label="param IsInUsing(CSharpSyntaxNode containingNode) 674463" />
<Node Id="10077:[44800..46356).1" Label="param IsInUsing(this) 674464" />
<Node Id="10077:[44888..44934).1" Label="TextSpan containingSpan = containingNode.Span; 674465" />
<Node Id="10077:[44954..44972).1" Label="SyntaxToken token; 674466" />
<Node Id="10077:[44966..44971).1" Label="token 674467" />
<Node Id="10077:[44990..45616).1" Label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)
                {
                    // This occurs at EOF
                    token = containingNode.GetLastToken();
                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());
                }
                else if (_position $ containingSpan.Start || _position $ containingSpan.End) //NB: $ not $=
                {
                    return false;
                }
                else
                {
                    token = containingNode.FindToken(_position);
                } 674468" />
<Node Id="10077:[45331..45616).1" Label="if (_position $ containingSpan.Start || _position $ containingSpan.End) //NB: $ not $=
                {
                    return false;
                }
                else
                {
                    token = containingNode.FindToken(_position);
                } 674469" />
<Node Id="10077:[45553..45597).1" Label="token = containingNode.FindToken(_position); 674470" />
<Node Id="10077:[45553..45597).2" Label="token = containingNode.FindToken(_position); 674471" />
<Node Id="10077:[45636..45660).1" Label="var node = token.Parent; 674472" />
<Node Id="10077:[45678..46310).1" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 674473" />
<Node Id="10077:[45678..46310).2" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 674474" />
<Node Id="10077:[45678..46310).3" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 674475" />
<Node Id="10077:[46088..46248).1" Label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    } 674476" />
<Node Id="10077:[46088..46248).2" Label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    } 674477" />
<Node Id="10077:[46272..46291).1" Label="node = node.Parent; 674478" />
<Node Id="10077:[46328..46341).1" Label="return false; 674479" />
<Node Id="10077:[39082..39230).3" Label="return VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript); 674480" />
<Node Id="10077:[39220..39228).1" Label="InScript 674481" />
<Node Id="10077:[2243..2331).1" Label="get
                {
                    return _factory.InScript;
                } 674482" />
<Node Id="10077:[2294..2311).1" Label="_factory.InScript 674483" />
<Node Id="10076:[3592..3700).3" Label="get
            {
                return _syntaxTree.Options.Kind == SourceCodeKind.Script;
            } 674484" />
<Node Id="10077:[2287..2312).1" Label="return _factory.InScript; 674485" />
<Node Id="10077:[39089..39229).1" Label="VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript) 674486" />
<Node Id="10077:[39298..39335).2" Label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 674487" />
<Node Id="10077:[39337..39349).2" Label="param VisitCompilationUnit(bool inUsing) 674488" />
<Node Id="10077:[39351..39364).2" Label="param VisitCompilationUnit(bool inScript) 674489" />
<Node Id="10077:[39261..44091).2" Label="param VisitCompilationUnit(this) 674490" />
<Node Id="10077:[39421..39431).2" Label="syntaxTree 674491" />
<Node Id="10077:[1641..1732).2" Label="get
                {
                    return _factory._syntaxTree;
                } 674492" />
<Node Id="10077:[1685..1713).2" Label="return _factory._syntaxTree; 674493" />
<Node Id="10077:[39398..39590).7" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 674494" />
<Node Id="10077:[39398..39590).8" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 674495" />
<Node Id="10077:[39766..39774).2" Label="inScript 674496" />
<Node Id="10077:[44231..44317).17" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 674497" />
<Node Id="10077:[44231..44317).19" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 674498" />
<Node Id="10077:[2110..2139).4" Label="return _factory._binderCache; 674499" />
<Node Id="10076:[1089..1109).1" Label="param Equals(BinderCacheKey other) 674500" />
<Node Id="10076:[1050..1225).1" Label="param Equals(this) 674501" />
<Node Id="10076:[1143..1210).1" Label="return syntaxNode == other.syntaxNode && this.usage == other.usage; 674502" />
<Node Id="10077:[33290..34322).1" Label="if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    } 674503" />
<Node Id="10077:[33414..33451).1" Label="resultBinder.ContainingMemberOrLambda 674504" />
<Node Id="10346:[7369..7588).1" Label="get
            {
                var merged = _container as MergedNamespaceSymbol;
                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;
            } 674505" />
<Node Id="10346:[7405..7454).1" Label="var merged = _container as MergedNamespaceSymbol; 674506" />
<Node Id="10346:[7472..7573).1" Label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 674507" />
<Node Id="10346:[7472..7573).2" Label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 674508" />
<Node Id="10346:[7479..7503).1" Label="((object)merged != null) 674509" />
<Node Id="10077:[33373..33481).1" Label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 674510" />
<Node Id="10077:[33373..33481).2" Label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 674511" />
<Node Id="10077:[33509..34299).1" Label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        } 674512" />
<Node Id="10077:[33969..34032).1" Label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 674513" />
<Node Id="10077:[33969..34032).2" Label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 674514" />
<Node Id="10077:[33969..34032).3" Label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 674515" />
<Node Id="10077:[33984..34031).1" Label="new InContainerBinder(typeSymbol, resultBinder) 674516" />
<Node Id="10346:[2571..2602).2" Label="param InContainerBinder(NamespaceOrTypeSymbol container) 674517" />
<Node Id="10346:[2604..2615).2" Label="param InContainerBinder(Binder next) 674518" />
<Node Id="10346:[2617..2639).2" Label="param InContainerBinder(Imports imports = null) 674519" />
<Node Id="10346:[2544..2854).3" Label="param InContainerBinder(this) 674520" />
<Node Id="10286:[1317..1350).9" Label="RoslynDebug.Assert(next != null); 674521" />
<Node Id="10286:[1317..1350).10" Label="RoslynDebug.Assert(next != null); 674522" />
<Node Id="10286:[1390..1400).3" Label="this.Flags 674523" />
<Node Id="10286:[1428..1444).3" Label="this.Compilation 674524" />
<Node Id="10346:[858..868).3" Label="_container 674525" />
<Node Id="10346:[2691..2750).6" Label="Debug.Assert((object)container != null || imports != null); 674526" />
<Node Id="10346:[2691..2750).7" Label="Debug.Assert((object)container != null || imports != null); 674527" />
<Node Id="10077:[34064..34272).1" Label="if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            } 674528" />
<Node Id="10077:[34064..34272).2" Label="if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            } 674529" />
<Node Id="10077:[34346..34420).1" Label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 674530" />
<Node Id="10077:[34361..34419).1" Label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 674531" />
<Node Id="10307:[3496..3521).1" Label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 674532" />
<Node Id="10307:[3452..3756).1" Label="param WithUnsafeRegionIfNecessary(this) 674533" />
<Node Id="10307:[3547..3745).1" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 674534" />
<Node Id="10307:[3547..3745).2" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 674535" />
<Node Id="10307:[3555..3600).1" Label="this.Flags.Includes(BinderFlags.UnsafeRegion) 674536" />
<Node Id="10298:[471..492).15" Label="param Includes(this BinderFlags self) 674537" />
<Node Id="10298:[494..511).15" Label="param Includes(BinderFlags other) 674538" />
<Node Id="10307:[3547..3745).4" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 674539" />
<Node Id="10307:[3547..3745).7" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 674540" />
<Node Id="10307:[3554..3645).1" Label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 674541" />
<Node Id="10077:[34444..34455).1" Label="binderCache 674542" />
<Node Id="10077:[2110..2139).5" Label="return _factory._binderCache; 674543" />
<Node Id="10077:[34444..34482).1" Label="binderCache.TryAdd(key, resultBinder); 674544" />
<Node Id="10077:[34444..34482).2" Label="binderCache.TryAdd(key, resultBinder); 674545" />
<Node Id="10077:[34444..34482).3" Label="binderCache.TryAdd(key, resultBinder); 674546" />
<Node Id="10077:[34444..34482).4" Label="binderCache.TryAdd(key, resultBinder); 674547" />
<Node Id="10077:[34444..34482).5" Label="binderCache.TryAdd(key, resultBinder); 674548" />
<Node Id="10077:[34521..34541).1" Label="return resultBinder; 674549" />
<Node Id="10077:[2926..2971).12" Label="return ((CSharpSyntaxNode)node).Accept(this); 674550" />
<Node Id="10076:[5678..5718).1" Label="_binderFactoryVisitorPool.Free(visitor); 674551" />
<Node Id="10076:[5678..5718).2" Label="_binderFactoryVisitorPool.Free(visitor); 674552" />
<Node Id="10076:[5734..5748).1" Label="return result; 674553" />
<Node Id="25002:[4395..4432).29" Label="var diagnostics = c.GetDiagnostics(); 674554" />
<Node Id="10076:[5223..5250).6" Label="Debug.Assert(node != null); 674555" />
<Node Id="10076:[5277..5448).6" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 674556" />
<Node Id="10076:[5391..5433).1" Label="container.AssertMemberExposure(memberOpt); 674557" />
<Node Id="10076:[5391..5433).2" Label="container.AssertMemberExposure(memberOpt); 674558" />
<Node Id="10077:[4637..4671).1" Label="param VisitMethodDeclaration(MethodDeclarationSyntax methodDecl) 674559" />
<Node Id="10077:[4591..7075).1" Label="param VisitMethodDeclaration(this) 674560" />
<Node Id="10077:[4705..4866).1" Label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))
                {
                    return VisitCore(methodDecl.Parent);
                } 674561" />
<Node Id="10077:[4705..4866).2" Label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))
                {
                    return VisitCore(methodDecl.Parent);
                } 674562" />
<Node Id="10077:[4705..4866).3" Label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))
                {
                    return VisitCore(methodDecl.Parent);
                } 674563" />
<Node Id="10077:[4886..4902).1" Label="NodeUsage usage; 674564" />
<Node Id="10077:[4920..5555).1" Label="if (LookupPosition.IsInBody(_position, methodDecl))
                {
                    usage = NodeUsage.MethodBody;
                }
                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))
                {
                    usage = NodeUsage.MethodTypeParameters;
                }
                else
                {
                    // Normal - is when method itself is not involved (will use outer binder)
                    //          that would be if position is within the return type or method name
                    usage = NodeUsage.Normal;
                } 674565" />
<Node Id="10077:[4920..5555).2" Label="if (LookupPosition.IsInBody(_position, methodDecl))
                {
                    usage = NodeUsage.MethodBody;
                }
                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))
                {
                    usage = NodeUsage.MethodTypeParameters;
                }
                else
                {
                    // Normal - is when method itself is not involved (will use outer binder)
                    //          that would be if position is within the return type or method name
                    usage = NodeUsage.Normal;
                } 674566" />
<Node Id="10077:[5083..5555).1" Label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))
                {
                    usage = NodeUsage.MethodTypeParameters;
                }
                else
                {
                    // Normal - is when method itself is not involved (will use outer binder)
                    //          that would be if position is within the return type or method name
                    usage = NodeUsage.Normal;
                } 674567" />
<Node Id="10077:[5083..5555).2" Label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))
                {
                    usage = NodeUsage.MethodTypeParameters;
                }
                else
                {
                    // Normal - is when method itself is not involved (will use outer binder)
                    //          that would be if position is within the return type or method name
                    usage = NodeUsage.Normal;
                } 674568" />
<Node Id="10077:[5511..5536).1" Label="usage = NodeUsage.Normal; 674569" />
<Node Id="10077:[5575..5625).1" Label="var key = CreateBinderCacheKey(methodDecl, usage); 674570" />
<Node Id="10077:[5575..5625).2" Label="var key = CreateBinderCacheKey(methodDecl, usage); 674571" />
<Node Id="10077:[5585..5624).1" Label="CreateBinderCacheKey(methodDecl, usage) 674572" />
<Node Id="10077:[44159..44180).4" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 674573" />
<Node Id="10077:[44182..44197).4" Label="param CreateBinderCacheKey(NodeUsage usage) 674574" />
<Node Id="10077:[44231..44317).25" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 674575" />
<Node Id="10077:[44231..44317).27" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 674576" />
<Node Id="10077:[44335..44374).15" Label="return new BinderCacheKey(node, usage); 674577" />
<Node Id="10077:[44342..44373).4" Label="new BinderCacheKey(node, usage) 674578" />
<Node Id="10076:[853..1034).4" Label="param BinderCacheKey(this) 674579" />
<Node Id="10077:[5575..5625).3" Label="var key = CreateBinderCacheKey(methodDecl, usage); 674580" />
<Node Id="10077:[5645..5665).1" Label="Binder resultBinder; 674581" />
<Node Id="10077:[5688..5699).1" Label="binderCache 674582" />
<Node Id="10077:[2066..2158).6" Label="get
                {
                    return _factory._binderCache;
                } 674583" />
<Node Id="10077:[2110..2139).6" Label="return _factory._binderCache; 674584" />
<Node Id="10077:[5683..7020).1" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 674585" />
<Node Id="10077:[5683..7020).2" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 674586" />
<Node Id="10077:[5683..7020).3" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 674587" />
<Node Id="10077:[5683..7020).4" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 674588" />
<Node Id="10077:[5683..7020).5" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 674589" />
<Node Id="10077:[5776..5836).1" Label="var parentType = methodDecl.Parent as TypeDeclarationSyntax; 674590" />
<Node Id="10077:[5858..6188).1" Label="if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    } 674591" />
<Node Id="10077:[5858..6188).2" Label="if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    } 674592" />
<Node Id="10077:[5930..6023).1" Label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 674593" />
<Node Id="10077:[5930..6023).2" Label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 674594" />
<Node Id="10077:[5945..6022).1" Label="VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters) 674595" />
<Node Id="10077:[32474..32502).2" Label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 674596" />
<Node Id="10077:[32504..32523).2" Label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 674597" />
<Node Id="10077:[44231..44317).33" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 674598" />
<Node Id="10077:[44231..44317).35" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 674599" />
<Node Id="10077:[6212..6251).1" Label="SourceMemberMethodSymbol method = null; 674600" />
<Node Id="10077:[6275..6566).1" Label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    } 674601" />
<Node Id="10077:[6590..6839).1" Label="if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    } 674602" />
<Node Id="10077:[6863..6941).1" Label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers); 674603" />
<Node Id="10077:[6878..6940).1" Label="resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers) 674604" />
<Node Id="10307:[3496..3521).2" Label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 674605" />
<Node Id="10307:[3452..3756).2" Label="param WithUnsafeRegionIfNecessary(this) 674606" />
<Node Id="10077:[6963..6974).1" Label="binderCache 674607" />
<Node Id="10077:[2110..2139).8" Label="return _factory._binderCache; 674608" />
<Node Id="10077:[6963..7001).1" Label="binderCache.TryAdd(key, resultBinder); 674609" />
<Node Id="10077:[6963..7001).2" Label="binderCache.TryAdd(key, resultBinder); 674610" />
<Node Id="10077:[6963..7001).3" Label="binderCache.TryAdd(key, resultBinder); 674611" />
<Node Id="10077:[6963..7001).5" Label="binderCache.TryAdd(key, resultBinder); 674612" />
<Node Id="10077:[7040..7060).1" Label="return resultBinder; 674613" />
<Node Id="10077:[2926..2971).19" Label="return ((CSharpSyntaxNode)node).Accept(this); 674614" />
<Node Id="10307:[3228..3245).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 674615" />
<Node Id="10307:[3247..3264).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 674616" />
<Node Id="10307:[3165..3440).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 674617" />
<Node Id="10307:[3290..3331).1" Label="Debug.Assert((object)containing != null); 674618" />
<Node Id="10307:[3290..3331).2" Label="Debug.Assert((object)containing != null); 674619" />
<Node Id="10307:[3345..3429).1" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 674620" />
<Node Id="10307:[3345..3429).2" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 674621" />
<Node Id="10307:[3345..3429).4" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 674622" />
<Node Id="10307:[3345..3429).5" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 674623" />
<Node Id="10307:[3352..3428).1" Label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 674624" />
<Node Id="10307:[1072..1083).1" Label="param BinderWithContainingMemberOrLambda(Binder next) 674625" />
<Node Id="10307:[1085..1102).1" Label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 674626" />
<Node Id="10307:[1104..1135).1" Label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 674627" />
<Node Id="10307:[1028..1341).1" Label="param BinderWithContainingMemberOrLambda(this) 674628" />
<Node Id="10307:[1161..1165).1" Label="next 674629" />
<Node Id="10307:[1167..1172).1" Label="flags 674630" />
<Node Id="10307:[1028..1341).2" Label="param BinderWithContainingMemberOrLambda(this) 674631" />
<Node Id="10286:[1549..1560).2" Label="param Binder(Binder next) 674632" />
<Node Id="10286:[1562..1579).2" Label="param Binder(BinderFlags flags) 674633" />
<Node Id="10286:[1532..2083).2" Label="param Binder(this) 674634" />
<Node Id="10286:[726..773).6" Label="internal CSharpCompilation Compilation { get; } 674635" />
<Node Id="10286:[815..820).6" Label="Flags 674636" />
<Node Id="10286:[2975..3015).6" Label="protected internal Binder? Next { get; } 674637" />
<Node Id="10286:[17802..17818).6" Label="_lazyConversions 674638" />
<Node Id="10286:[18200..18223).6" Label="_lazyOverloadResolution 674639" />
<Node Id="10286:[1605..1638).5" Label="RoslynDebug.Assert(next != null); 674640" />
<Node Id="10286:[1605..1638).6" Label="RoslynDebug.Assert(next != null); 674641" />
<Node Id="10286:[1688..1781).7" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 674642" />
<Node Id="10286:[1688..1781).8" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 674643" />
<Node Id="10286:[1708..1779).2" Label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 674644" />
<Node Id="10298:[471..492).17" Label="param Includes(this BinderFlags self) 674645" />
<Node Id="10298:[494..511).17" Label="param Includes(BinderFlags other) 674646" />
<Node Id="10286:[1820..1963).7" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 674647" />
<Node Id="10286:[1820..1963).8" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 674648" />
<Node Id="10286:[1840..1888).2" Label="flags.Includes(BinderFlags.InNestedFinallyBlock) 674649" />
<Node Id="10298:[471..492).18" Label="param Includes(this BinderFlags self) 674650" />
<Node Id="10298:[494..511).18" Label="param Includes(BinderFlags other) 674651" />
<Node Id="10286:[1977..1981).2" Label="Next 674652" />
<Node Id="10286:[2036..2052).2" Label="this.Compilation 674653" />
<Node Id="10307:[683..708).1" Label="_containingMemberOrLambda 674654" />
<Node Id="10307:[1206..1253).1" Label="Debug.Assert(containingMemberOrLambda != null); 674655" />
<Node Id="10307:[1206..1253).2" Label="Debug.Assert(containingMemberOrLambda != null); 674656" />
<Node Id="10307:[1273..1298).1" Label="_containingMemberOrLambda 674657" />
<Node Id="25002:[4395..4432).35" Label="var diagnostics = c.GetDiagnostics(); 674658" />
<Node Id="10319:[13685..13708).1" Label="param BindType(ExpressionSyntax syntax) 674659" />
<Node Id="10319:[13710..13735).1" Label="param BindType(DiagnosticBag diagnostics) 674660" />
<Node Id="10319:[13737..13783).1" Label="param BindType(ConsList$TypeSymbol$ basesBeingResolved = null) 674661" />
<Node Id="10319:[13785..13824).1" Label="param BindType(bool suppressUseSiteDiagnostics = false) 674662" />
<Node Id="10319:[13647..14061).1" Label="param BindType(this) 674663" />
<Node Id="10319:[13850..13948).1" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 674664" />
<Node Id="10319:[13850..13948).2" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 674665" />
<Node Id="10319:[13850..13948).3" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 674666" />
<Node Id="10319:[13850..13948).4" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 674667" />
<Node Id="10319:[13863..13947).1" Label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 674668" />
<Node Id="10319:[14931..14954).1" Label="param BindTypeOrAlias(ExpressionSyntax syntax) 674669" />
<Node Id="10319:[14956..14981).1" Label="param BindTypeOrAlias(DiagnosticBag diagnostics) 674670" />
<Node Id="10319:[14983..15029).1" Label="param BindTypeOrAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 674671" />
<Node Id="10319:[15031..15070).1" Label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 674672" />
<Node Id="10319:[14862..16302).1" Label="param BindTypeOrAlias(this) 674673" />
<Node Id="10319:[15096..15130).1" Label="Debug.Assert(diagnostics != null); 674674" />
<Node Id="10319:[15096..15130).2" Label="Debug.Assert(diagnostics != null); 674675" />
<Node Id="10319:[15146..15291).1" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 674676" />
<Node Id="10319:[15146..15291).2" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 674677" />
<Node Id="10319:[15146..15291).3" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 674678" />
<Node Id="10319:[15146..15291).4" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 674679" />
<Node Id="10319:[15146..15291).5" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 674680" />
<Node Id="10319:[15146..15291).6" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 674681" />
<Node Id="10319:[15159..15290).1" Label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 674682" />
<Node Id="10319:[20002..20025).2" Label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 674683" />
<Node Id="10319:[20027..20052).2" Label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 674684" />
<Node Id="10319:[20054..20093).2" Label="param BindNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 674685" />
<Node Id="10319:[20095..20126).2" Label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 674686" />
<Node Id="10319:[19916..30085).2" Label="param BindNamespaceOrTypeOrAliasSymbol(this) 674687" />
<Node Id="10319:[20152..24647).3" Label="switch (syntax.Kind())
            {
                case SyntaxKind.NullableType:
                    return bindNullable(syntax, diagnostics, basesBeingResolved);

                case SyntaxKind.PredefinedType:
                    return bindPredefined(syntax, diagnostics);

                case SyntaxKind.IdentifierName:
                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);

                case SyntaxKind.GenericName:
                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);

                case SyntaxKind.AliasQualifiedName:
                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);

                case SyntaxKind.QualifiedName:
                    {
                        var node = (QualifiedNameSyntax)syntax;
                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                case SyntaxKind.SimpleMemberAccessExpression:
                    {
                        var node = (MemberAccessExpressionSyntax)syntax;
                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                case SyntaxKind.ArrayType:
                    {
                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);
                    }

                case SyntaxKind.PointerType:
                    return bindPointer(syntax, diagnostics, basesBeingResolved);

                case SyntaxKind.FunctionPointerType:
                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;
                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)
                    {
                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;
                        var asterisk = functionPointerTypeSyntax.AsteriskToken;
                        RoslynDebug.Assert(@delegate.SyntaxTree is object);
                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));
                    }

                    return TypeWithAnnotations.Create(
                        FunctionPointerTypeSymbol.CreateFromSource(
                            functionPointerTypeSyntax,
                            this,
                            diagnostics,
                            basesBeingResolved,
                            suppressUseSiteDiagnostics));

                case SyntaxKind.OmittedTypeArgument:
                    {
                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);
                    }

                case SyntaxKind.TupleType:
                    {
                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;
                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));
                    }

                case SyntaxKind.RefType:
                    {
                        // ref needs to be handled by the caller
                        var refTypeSyntax = (RefTypeSyntax)syntax;
                        var refToken = refTypeSyntax.RefKeyword;
                        if (!syntax.HasErrors)
                        {
                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());
                        }

                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                default:
                    {
                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind
                        // is attempted to be bound as a type pattern.
                        return createErrorType(syntax);
                    }
            } 674688" />
<Node Id="10319:[20508..20675).10" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 674689" />
<Node Id="10319:[20508..20675).11" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 674690" />
<Node Id="10319:[20508..20675).12" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 674691" />
<Node Id="10319:[41929..41968).2" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 674692" />
<Node Id="10319:[41732..45579).2" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 674693" />
<Node Id="10319:[42478..42805).4" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 674694" />
<Node Id="10319:[42821..42938).9" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 674695" />
<Node Id="10319:[42821..42938).14" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 674696" />
<Node Id="10319:[42839..42937).2" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 674697" />
<Node Id="10319:[63849..63870).2" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 674698" />
<Node Id="10319:[63885..63919).2" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 674699" />
<Node Id="10319:[63934..63945).2" Label="param CreateErrorIfLookupOnTypeParameter(string name) 674700" />
<Node Id="10319:[63960..63969).2" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 674701" />
<Node Id="10319:[63984..64009).2" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 674702" />
<Node Id="10319:[63768..64484).2" Label="param CreateErrorIfLookupOnTypeParameter(this) 674703" />
<Node Id="10319:[64035..64445).5" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 674704" />
<Node Id="10319:[64035..64445).6" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 674705" />
<Node Id="10319:[64461..64473).3" Label="return null; 674706" />
<Node Id="10319:[42821..42938).15" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 674707" />
<Node Id="10319:[42952..43079).4" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 674708" />
<Node Id="10319:[42952..43079).5" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 674709" />
<Node Id="10354:[11312..11328).2" Label="instance.IsClear 674710" />
<Node Id="10354:[3684..3818).6" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 674711" />
<Node Id="10354:[3720..3803).37" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674712" />
<Node Id="10354:[3720..3803).38" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674713" />
<Node Id="10354:[3720..3803).39" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674714" />
<Node Id="10354:[11299..11330).4" Label="Debug.Assert(instance.IsClear); 674715" />
<Node Id="10319:[50330..50355).2" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 674716" />
<Node Id="10312:[1108..1117).2" Label="param LookupSymbolsSimpleName(int arity) 674717" />
<Node Id="10312:[1132..1171).2" Label="param LookupSymbolsSimpleName(ConsList$TypeSymbol$ basesBeingResolved) 674718" />
<Node Id="10312:[1222..1235).2" Label="param LookupSymbolsSimpleName(bool diagnose) 674719" />
<Node Id="10312:[5830..5839).2" Label="param LookupSymbolsOrMembersInternal(int arity) 674720" />
<Node Id="10312:[5854..5893).2" Label="param LookupSymbolsOrMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 674721" />
<Node Id="10312:[5944..5957).2" Label="param LookupSymbolsOrMembersInternal(bool diagnose) 674722" />
<Node Id="10312:[3730..3739).2" Label="param LookupSymbolsInternal(int arity) 674723" />
<Node Id="10312:[3741..3780).2" Label="param LookupSymbolsInternal(ConsList$TypeSymbol$ basesBeingResolved) 674724" />
<Node Id="10312:[3805..3818).2" Label="param LookupSymbolsInternal(bool diagnose) 674725" />
<Node Id="10312:[3905..3919).2" Label="result.IsClear 674726" />
<Node Id="10354:[3684..3818).7" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 674727" />
<Node Id="10354:[3720..3803).45" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674728" />
<Node Id="10354:[3720..3803).46" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674729" />
<Node Id="10354:[3720..3803).47" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674730" />
<Node Id="10312:[3892..3921).4" Label="Debug.Assert(result.IsClear); 674731" />
<Node Id="10312:[3935..3968).5" Label="Debug.Assert(options.AreValid()); 674732" />
<Node Id="10312:[3948..3966).2" Label="options.AreValid() 674733" />
<Node Id="10353:[4698..4724).3" Label="param AreValid(this LookupOptions options) 674734" />
<Node Id="10353:[4750..4847).5" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 674735" />
<Node Id="10353:[4863..5000).9" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 674736" />
<Node Id="10353:[4863..5000).10" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 674737" />
<Node Id="10353:[5079..5183).5" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 674738" />
<Node Id="10353:[5197..5323).7" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 674739" />
<Node Id="10353:[5485..5759).13" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 674740" />
<Node Id="10353:[5485..5759).14" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 674741" />
<Node Id="10353:[5485..5759).15" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 674742" />
<Node Id="10353:[5775..5979).9" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 674743" />
<Node Id="10353:[5775..5979).11" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 674744" />
<Node Id="10353:[5995..6029).7" Label="return OnlyOneBitSet(onlyOptions); 674745" />
<Node Id="10353:[6002..6028).3" Label="OnlyOneBitSet(onlyOptions) 674746" />
<Node Id="10353:[6343..6358).3" Label="param OnlyOneBitSet(LookupOptions o) 674747" />
<Node Id="10353:[6384..6410).13" Label="return (o & (o - 1)) == 0; 674748" />
<Node Id="10353:[6384..6410).14" Label="return (o & (o - 1)) == 0; 674749" />
<Node Id="10312:[4534..4658).21" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 674750" />
<Node Id="10312:[4534..4658).22" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 674751" />
<Node Id="10312:[4534..4658).23" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 674752" />
<Node Id="10312:[4534..4658).25" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 674753" />
<Node Id="10312:[5188..5207).2" Label="param LookupSymbolsInSingleBinder(LookupResult result) 674754" />
<Node Id="10312:[5209..5220).2" Label="param LookupSymbolsInSingleBinder(string name) 674755" />
<Node Id="10312:[5222..5231).2" Label="param LookupSymbolsInSingleBinder(int arity) 674756" />
<Node Id="10312:[5233..5272).2" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 674757" />
<Node Id="10312:[5274..5295).2" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 674758" />
<Node Id="10312:[5297..5318).2" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 674759" />
<Node Id="10312:[5320..5333).2" Label="param LookupSymbolsInSingleBinder(bool diagnose) 674760" />
<Node Id="10312:[5124..5404).2" Label="param LookupSymbolsInSingleBinder(this) 674761" />
<Node Id="10312:[4685..4699).3" Label="result.IsClear 674762" />
<Node Id="10354:[3684..3818).8" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 674763" />
<Node Id="10354:[3720..3803).53" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674764" />
<Node Id="10354:[3720..3803).54" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674765" />
<Node Id="10354:[3720..3803).55" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674766" />
<Node Id="10312:[4680..4787).5" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 674767" />
<Node Id="10312:[4826..5058).11" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 674768" />
<Node Id="10312:[4826..5058).12" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 674769" />
<Node Id="10346:[10663..10672).2" Label="param LookupSymbolsInSingleBinder(int arity) 674770" />
<Node Id="10346:[10674..10713).2" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 674771" />
<Node Id="10346:[10761..10774).2" Label="param LookupSymbolsInSingleBinder(bool diagnose) 674772" />
<Node Id="10346:[10861..10875).2" Label="result.IsClear 674773" />
<Node Id="10354:[3684..3818).9" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 674774" />
<Node Id="10354:[3720..3803).61" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674775" />
<Node Id="10354:[3720..3803).62" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674776" />
<Node Id="10354:[3720..3803).63" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674777" />
<Node Id="10346:[10848..10877).4" Label="Debug.Assert(result.IsClear); 674778" />
<Node Id="10346:[10897..10914).2" Label="IsSubmissionClass 674779" />
<Node Id="10346:[7666..7775).2" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 674780" />
<Node Id="10346:[7672..7773).4" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 674781" />
<Node Id="10346:[10893..11127).3" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 674782" />
<Node Id="10346:[3525..3638).17" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 674783" />
<Node Id="10346:[11369..11508).15" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674784" />
<Node Id="10346:[11369..11508).18" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674785" />
<Node Id="10312:[7718..7727).2" Label="param LookupMembersInternal(int arity) 674786" />
<Node Id="10312:[7729..7768).2" Label="param LookupMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 674787" />
<Node Id="10312:[7816..7829).2" Label="param LookupMembersInternal(bool diagnose) 674788" />
<Node Id="10312:[7615..8420).2" Label="param LookupMembersInternal(this) 674789" />
<Node Id="10312:[7903..7936).5" Label="Debug.Assert(options.AreValid()); 674790" />
<Node Id="10312:[7916..7934).2" Label="options.AreValid() 674791" />
<Node Id="10353:[4698..4724).4" Label="param AreValid(this LookupOptions options) 674792" />
<Node Id="10353:[4750..4847).7" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 674793" />
<Node Id="10353:[4863..5000).13" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 674794" />
<Node Id="10353:[4863..5000).14" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 674795" />
<Node Id="10353:[5079..5183).7" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 674796" />
<Node Id="10353:[5197..5323).10" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 674797" />
<Node Id="10353:[5485..5759).19" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 674798" />
<Node Id="10353:[5485..5759).20" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 674799" />
<Node Id="10353:[5485..5759).21" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 674800" />
<Node Id="10353:[5775..5979).13" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 674801" />
<Node Id="10353:[5775..5979).15" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 674802" />
<Node Id="10353:[5995..6029).10" Label="return OnlyOneBitSet(onlyOptions); 674803" />
<Node Id="10353:[6002..6028).4" Label="OnlyOneBitSet(onlyOptions) 674804" />
<Node Id="10353:[6343..6358).4" Label="param OnlyOneBitSet(LookupOptions o) 674805" />
<Node Id="10353:[6384..6410).19" Label="return (o & (o - 1)) == 0; 674806" />
<Node Id="10353:[6384..6410).20" Label="return (o & (o - 1)) == 0; 674807" />
<Node Id="10312:[7952..7977).5" Label="Debug.Assert(arity $= 0); 674808" />
<Node Id="10312:[7952..7977).6" Label="Debug.Assert(arity $= 0); 674809" />
<Node Id="10312:[8247..8394).1" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674810" />
<Node Id="10312:[8247..8394).4" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674811" />
<Node Id="10312:[8247..8394).5" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674812" />
<Node Id="10312:[8247..8394).8" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674813" />
<Node Id="10312:[8247..8393).1" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 674814" />
<Node Id="10312:[8543..8562).1" Label="param LookupMembersInType(LookupResult result) 674815" />
<Node Id="10312:[8564..8579).1" Label="param LookupMembersInType(TypeSymbol type) 674816" />
<Node Id="10312:[8581..8592).1" Label="param LookupMembersInType(string name) 674817" />
<Node Id="10312:[8594..8603).1" Label="param LookupMembersInType(int arity) 674818" />
<Node Id="10312:[8605..8644).1" Label="param LookupMembersInType(ConsList$TypeSymbol$ basesBeingResolved) 674819" />
<Node Id="10312:[8646..8667).1" Label="param LookupMembersInType(LookupOptions options) 674820" />
<Node Id="10312:[8669..8690).1" Label="param LookupMembersInType(Binder originalBinder) 674821" />
<Node Id="10312:[8692..8705).1" Label="param LookupMembersInType(bool diagnose) 674822" />
<Node Id="10312:[8707..8753).1" Label="param LookupMembersInType(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 674823" />
<Node Id="10312:[8508..10685).1" Label="param LookupMembersInType(this) 674824" />
<Node Id="10312:[8779..10524).1" Label="switch (type.TypeKind)
            {
                case TypeKind.TypeParameter:
                    this.LookupMembersInTypeParameter(result, (TypeParameterSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Interface:
                    this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Class:
                case TypeKind.Struct:
                case TypeKind.Enum:
                case TypeKind.Delegate:
                case TypeKind.Array:
                case TypeKind.Dynamic:
                    this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Submission:
                    this.LookupMembersInSubmissions(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Error:
                    LookupMembersInErrorType(result, (ErrorTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Pointer:
                case TypeKind.FunctionPointer:
                    result.Clear();
                    break;

                case TypeKind.Unknown:
                default:
                    throw ExceptionUtilities.UnexpectedValue(type.TypeKind);
            } 674825" />
<Node Id="10312:[9577..9709).1" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674826" />
<Node Id="10312:[9577..9709).2" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674827" />
<Node Id="10312:[9577..9709).3" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674828" />
<Node Id="10312:[9577..9709).4" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674829" />
<Node Id="10312:[9577..9709).5" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674830" />
<Node Id="10312:[9577..9709).6" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674831" />
<Node Id="10312:[9577..9709).7" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674832" />
<Node Id="10312:[9577..9709).8" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674833" />
<Node Id="10312:[9577..9709).9" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674834" />
<Node Id="10312:[9577..9708).1" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 674835" />
<Node Id="10312:[34707..34726).1" Label="param LookupMembersInClass(LookupResult result) 674836" />
<Node Id="10312:[34741..34756).1" Label="param LookupMembersInClass(TypeSymbol type) 674837" />
<Node Id="10312:[34771..34782).1" Label="param LookupMembersInClass(string name) 674838" />
<Node Id="10312:[34797..34806).1" Label="param LookupMembersInClass(int arity) 674839" />
<Node Id="10312:[34821..34860).1" Label="param LookupMembersInClass(ConsList$TypeSymbol$ basesBeingResolved) 674840" />
<Node Id="10312:[34875..34896).1" Label="param LookupMembersInClass(LookupOptions options) 674841" />
<Node Id="10312:[34911..34932).1" Label="param LookupMembersInClass(Binder originalBinder) 674842" />
<Node Id="10312:[34947..34960).1" Label="param LookupMembersInClass(bool diagnose) 674843" />
<Node Id="10312:[34975..35021).1" Label="param LookupMembersInClass(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 674844" />
<Node Id="10312:[34659..35191).1" Label="param LookupMembersInClass(this) 674845" />
<Node Id="10312:[35047..35180).1" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 674846" />
<Node Id="10312:[35047..35180).2" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 674847" />
<Node Id="10312:[35047..35180).3" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 674848" />
<Node Id="10312:[35047..35180).4" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 674849" />
<Node Id="10312:[35047..35180).5" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 674850" />
<Node Id="10312:[35047..35180).6" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 674851" />
<Node Id="10312:[35047..35180).7" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 674852" />
<Node Id="10312:[35047..35180).9" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 674853" />
<Node Id="10312:[35047..35180).10" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 674854" />
<Node Id="10312:[35047..35179).1" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics) 674855" />
<Node Id="10312:[35313..35332).1" Label="param LookupMembersInClass(LookupResult result) 674856" />
<Node Id="10312:[35347..35362).1" Label="param LookupMembersInClass(TypeSymbol type) 674857" />
<Node Id="10312:[35377..35388).1" Label="param LookupMembersInClass(string name) 674858" />
<Node Id="10312:[35403..35412).1" Label="param LookupMembersInClass(int arity) 674859" />
<Node Id="10312:[35427..35466).1" Label="param LookupMembersInClass(ConsList$TypeSymbol$ basesBeingResolved) 674860" />
<Node Id="10312:[35481..35502).1" Label="param LookupMembersInClass(LookupOptions options) 674861" />
<Node Id="10312:[35517..35538).1" Label="param LookupMembersInClass(Binder originalBinder) 674862" />
<Node Id="10312:[35553..35581).1" Label="param LookupMembersInClass(TypeSymbol accessThroughType) 674863" />
<Node Id="10312:[35596..35609).1" Label="param LookupMembersInClass(bool diagnose) 674864" />
<Node Id="10312:[35624..35670).1" Label="param LookupMembersInClass(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 674865" />
<Node Id="10312:[35265..38808).1" Label="param LookupMembersInClass(this) 674866" />
<Node Id="10312:[35696..35731).1" Label="Debug.Assert((object)type != null); 674867" />
<Node Id="10312:[35696..35731).2" Label="Debug.Assert((object)type != null); 674868" />
<Node Id="10312:[35745..35826).1" Label="Debug.Assert(!type.IsInterfaceType() && type.TypeKind != TypeKind.TypeParameter); 674869" />
<Node Id="10312:[35842..35872).1" Label="TypeSymbol currentType = type; 674870" />
<Node Id="10312:[35898..35924).1" Label="LookupResult.GetInstance() 674871" />
<Node Id="10354:[11244..11285).10" Label="var instance = s_poolInstance.Allocate(); 674872" />
<Node Id="10354:[3068..3073).2" Label="_kind 674873" />
<Node Id="10354:[3200..3211).2" Label="_symbolList 674874" />
<Node Id="10354:[3319..3325).2" Label="_error 674875" />
<Node Id="10354:[3380..3385).2" Label="_pool 674876" />
<Node Id="10354:[11312..11328).3" Label="instance.IsClear 674877" />
<Node Id="10354:[3684..3818).10" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 674878" />
<Node Id="10354:[3720..3803).69" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674879" />
<Node Id="10354:[3720..3803).70" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674880" />
<Node Id="10354:[3720..3803).71" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674881" />
<Node Id="10354:[11299..11330).7" Label="Debug.Assert(instance.IsClear); 674882" />
<Node Id="10312:[35888..35925).1" Label="var tmp = LookupResult.GetInstance(); 674883" />
<Node Id="10312:[35939..35985).1" Label="PooledHashSet$NamedTypeSymbol$ visited = null; 674884" />
<Node Id="10312:[35999..38740).1" Label="while ((object)currentType != null)
            {
                tmp.Clear();
                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);

                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);

                // If the type is from a winmd and implements any of the special WinRT collection
                // projections then we may need to add underlying interface members. 
                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;
                if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                }

                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes
                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);

                // short circuit looking up bases if we already have a viable result and we won't be adding on more
                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                }

                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                }

                // As in dev11, we don't consider inherited members within crefs.
                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,
                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.
                if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                }

                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);
                if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                }
            } 674885" />
<Node Id="10312:[35999..38740).2" Label="while ((object)currentType != null)
            {
                tmp.Clear();
                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);

                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);

                // If the type is from a winmd and implements any of the special WinRT collection
                // projections then we may need to add underlying interface members. 
                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;
                if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                }

                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes
                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);

                // short circuit looking up bases if we already have a viable result and we won't be adding on more
                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                }

                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                }

                // As in dev11, we don't consider inherited members within crefs.
                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,
                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.
                if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                }

                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);
                if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                }
            } 674886" />
<Node Id="10312:[36067..36078).1" Label="tmp.Clear() 674887" />
<Node Id="10354:[3841..3991).2" Label="param Clear(this) 674888" />
<Node Id="10312:[36067..36079).1" Label="tmp.Clear(); 674889" />
<Node Id="10312:[36097..36258).1" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674890" />
<Node Id="10312:[36097..36258).2" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674891" />
<Node Id="10312:[36097..36258).3" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674892" />
<Node Id="10312:[36097..36258).4" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674893" />
<Node Id="10312:[36097..36258).5" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674894" />
<Node Id="10312:[36097..36258).6" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674895" />
<Node Id="10312:[36097..36258).7" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674896" />
<Node Id="10312:[36097..36258).8" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674897" />
<Node Id="10312:[36097..36258).9" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674898" />
<Node Id="10312:[36097..36258).10" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674899" />
<Node Id="10312:[36097..36257).1" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved) 674900" />
<Node Id="10312:[33656..33675).1" Label="param LookupMembersWithoutInheritance(LookupResult result) 674901" />
<Node Id="10312:[33677..33692).1" Label="param LookupMembersWithoutInheritance(TypeSymbol type) 674902" />
<Node Id="10312:[33694..33705).1" Label="param LookupMembersWithoutInheritance(string name) 674903" />
<Node Id="10312:[33707..33716).1" Label="param LookupMembersWithoutInheritance(int arity) 674904" />
<Node Id="10312:[33731..33752).1" Label="param LookupMembersWithoutInheritance(LookupOptions options) 674905" />
<Node Id="10312:[33754..33775).1" Label="param LookupMembersWithoutInheritance(Binder originalBinder) 674906" />
<Node Id="10312:[33777..33805).1" Label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 674907" />
<Node Id="10312:[33807..33820).1" Label="param LookupMembersWithoutInheritance(bool diagnose) 674908" />
<Node Id="10312:[33822..33868).1" Label="param LookupMembersWithoutInheritance(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 674909" />
<Node Id="10312:[33870..33909).1" Label="param LookupMembersWithoutInheritance(ConsList$TypeSymbol$ basesBeingResolved) 674910" />
<Node Id="10312:[33935..34006).1" Label="var members = GetCandidateMembers(type, name, options, originalBinder); 674911" />
<Node Id="10312:[33935..34006).2" Label="var members = GetCandidateMembers(type, name, options, originalBinder); 674912" />
<Node Id="10312:[33935..34006).3" Label="var members = GetCandidateMembers(type, name, options, originalBinder); 674913" />
<Node Id="10312:[33935..34006).4" Label="var members = GetCandidateMembers(type, name, options, originalBinder); 674914" />
<Node Id="10312:[33949..34005).1" Label="GetCandidateMembers(type, name, options, originalBinder) 674915" />
<Node Id="10312:[61540..61570).2" Label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 674916" />
<Node Id="10312:[61572..61583).2" Label="param GetCandidateMembers(string name) 674917" />
<Node Id="10312:[61585..61606).2" Label="param GetCandidateMembers(LookupOptions options) 674918" />
<Node Id="10312:[61608..61629).2" Label="param GetCandidateMembers(Binder originalBinder) 674919" />
<Node Id="10312:[61655..62327).9" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 674920" />
<Node Id="10312:[61771..61840).1" Label="return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$(); 674921" />
<Node Id="10312:[61771..61840).2" Label="return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$(); 674922" />
<Node Id="10312:[34022..34574).1" Label="foreach (Symbol member in members)
            {
                // Do we need to exclude override members, or is that done later by overload resolution. It seems like
                // not excluding them here can't lead to problems, because we will always find the overridden method as well.
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                result.MergeEqual(resultOfThisMember);
            } 674923" />
<Node Id="10312:[36097..36258).11" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674924" />
<Node Id="10312:[36278..36360).1" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 674925" />
<Node Id="10312:[36278..36360).2" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 674926" />
<Node Id="10312:[36278..36360).3" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 674927" />
<Node Id="10312:[36278..36360).4" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 674928" />
<Node Id="10312:[36278..36360).5" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 674929" />
<Node Id="10312:[36278..36360).6" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 674930" />
<Node Id="10354:[9012..9030).1" Label="param MergePrioritized(LookupResult other) 674931" />
<Node Id="10354:[8981..9152).1" Label="param MergePrioritized(this) 674932" />
<Node Id="10354:[9060..9070).1" Label="other.Kind 674933" />
<Node Id="10354:[4058..4122).12" Label="get
            {
                return _kind;
            } 674934" />
<Node Id="10354:[9056..9141).1" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 674935" />
<Node Id="10354:[9073..9077).1" Label="Kind 674936" />
<Node Id="10354:[4058..4122).13" Label="get
            {
                return _kind;
            } 674937" />
<Node Id="10354:[9056..9141).2" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 674938" />
<Node Id="10354:[9056..9141).3" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 674939" />
<Node Id="10312:[36566..36625).1" Label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 674940" />
<Node Id="10312:[36643..36855).1" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 674941" />
<Node Id="10312:[36643..36855).2" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 674942" />
<Node Id="10312:[37061..37078).1" Label="tmp.IsMultiViable 674943" />
<Node Id="10354:[4919..5009).10" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 674944" />
<Node Id="10354:[4094..4107).14" Label="return _kind; 674945" />
<Node Id="10312:[37029..37117).1" Label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 674946" />
<Node Id="10312:[37258..37278).1" Label="result.IsMultiViable 674947" />
<Node Id="10354:[4919..5009).11" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 674948" />
<Node Id="10354:[4094..4107).15" Label="return _kind; 674949" />
<Node Id="10312:[37254..37416).1" Label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                } 674950" />
<Node Id="10312:[37436..37988).1" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 674951" />
<Node Id="10312:[37436..37988).2" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 674952" />
<Node Id="10312:[38290..38338).1" Label="originalBinder.InCrefButNotParameterOrReturnType 674953" />
<Node Id="10306:[3345..3430).1" Label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 674954" />
<Node Id="10306:[3358..3364).1" Label="InCref 674955" />
<Node Id="10306:[3196..3249).5" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 674956" />
<Node Id="10306:[3202..3247).17" Label="return this.Flags.Includes(BinderFlags.Cref); 674957" />
<Node Id="10306:[3351..3428).1" Label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 674958" />
<Node Id="10312:[38286..38405).1" Label="if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                } 674959" />
<Node Id="10312:[38425..38538).1" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 674960" />
<Node Id="10312:[38425..38538).2" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 674961" />
<Node Id="10312:[38425..38538).3" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 674962" />
<Node Id="10312:[38425..38538).4" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 674963" />
<Node Id="10312:[38425..38538).5" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 674964" />
<Node Id="10312:[38556..38725).1" Label="if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                } 674965" />
<Node Id="10312:[38556..38725).2" Label="if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                } 674966" />
<Node Id="10312:[38629..38706).1" Label="currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics); 674967" />
<Node Id="10312:[38629..38706).2" Label="currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics); 674968" />
<Node Id="10312:[36067..36079).2" Label="tmp.Clear(); 674969" />
<Node Id="10312:[36097..36258).15" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674970" />
<Node Id="10312:[36097..36258).17" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674971" />
<Node Id="10312:[36097..36258).18" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674972" />
<Node Id="10312:[36097..36258).19" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674973" />
<Node Id="10312:[33656..33675).2" Label="param LookupMembersWithoutInheritance(LookupResult result) 674974" />
<Node Id="10312:[33707..33716).2" Label="param LookupMembersWithoutInheritance(int arity) 674975" />
<Node Id="10312:[33754..33775).2" Label="param LookupMembersWithoutInheritance(Binder originalBinder) 674976" />
<Node Id="10312:[33777..33805).2" Label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 674977" />
<Node Id="10312:[33807..33820).2" Label="param LookupMembersWithoutInheritance(bool diagnose) 674978" />
<Node Id="10312:[33870..33909).2" Label="param LookupMembersWithoutInheritance(ConsList$TypeSymbol$ basesBeingResolved) 674979" />
<Node Id="10312:[61608..61629).3" Label="param GetCandidateMembers(Binder originalBinder) 674980" />
<Node Id="10312:[34022..34574).4" Label="foreach (Symbol member in members)
            {
                // Do we need to exclude override members, or is that done later by overload resolution. It seems like
                // not excluding them here can't lead to problems, because we will always find the overridden method as well.
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                result.MergeEqual(resultOfThisMember);
            } 674981" />
<Node Id="10354:[9012..9030).2" Label="param MergePrioritized(LookupResult other) 674982" />
<Node Id="10354:[8981..9152).2" Label="param MergePrioritized(this) 674983" />
<Node Id="10354:[9060..9070).2" Label="other.Kind 674984" />
<Node Id="10354:[4058..4122).17" Label="get
            {
                return _kind;
            } 674985" />
<Node Id="10354:[9056..9141).5" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 674986" />
<Node Id="10354:[9073..9077).2" Label="Kind 674987" />
<Node Id="10354:[4058..4122).18" Label="get
            {
                return _kind;
            } 674988" />
<Node Id="10354:[9056..9141).6" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 674989" />
<Node Id="10354:[9056..9141).7" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 674990" />
<Node Id="10312:[36566..36625).2" Label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 674991" />
<Node Id="10312:[36643..36855).4" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 674992" />
<Node Id="10312:[36643..36855).5" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 674993" />
<Node Id="10312:[37061..37078).2" Label="tmp.IsMultiViable 674994" />
<Node Id="10354:[4094..4107).19" Label="return _kind; 674995" />
<Node Id="10312:[37029..37117).4" Label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 674996" />
<Node Id="10312:[37258..37278).2" Label="result.IsMultiViable 674997" />
<Node Id="10354:[4094..4107).20" Label="return _kind; 674998" />
<Node Id="10312:[37254..37416).4" Label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                } 674999" />
<Node Id="10312:[37436..37988).5" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 675000" />
<Node Id="10312:[38290..38338).2" Label="originalBinder.InCrefButNotParameterOrReturnType 675001" />
<Node Id="10306:[3345..3430).2" Label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 675002" />
<Node Id="10306:[3358..3364).2" Label="InCref 675003" />
<Node Id="10306:[3196..3249).6" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 675004" />
<Node Id="10306:[3202..3247).21" Label="return this.Flags.Includes(BinderFlags.Cref); 675005" />
<Node Id="10306:[3351..3428).4" Label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 675006" />
<Node Id="10312:[38286..38405).3" Label="if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                } 675007" />
<Node Id="10312:[38556..38725).4" Label="if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                } 675008" />
<Node Id="10312:[38756..38772).1" Label="visited?.Free(); 675009" />
<Node Id="10312:[38786..38796).1" Label="tmp.Free() 675010" />
<Node Id="10354:[11383..11549).2" Label="param Free(this) 675011" />
<Node Id="10354:[3932..3952).4" Label="_symbolList.Clear(); 675012" />
<Node Id="10354:[11428..11441).2" Label="this.Clear(); 675013" />
<Node Id="10312:[38786..38797).1" Label="tmp.Free(); 675014" />
<Node Id="10312:[35047..35180).11" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 675015" />
<Node Id="10312:[9577..9709).10" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 675016" />
<Node Id="10346:[12335..12456).1" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675017" />
<Node Id="10346:[12335..12456).4" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675018" />
<Node Id="10346:[12335..12456).5" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675019" />
<Node Id="10346:[12335..12456).6" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675020" />
<Node Id="10346:[12335..12456).7" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675021" />
<Node Id="10346:[12335..12456).8" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675022" />
<Node Id="10346:[12335..12455).1" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 675023" />
<Node Id="10345:[29004..29025).1" Label="param LookupSymbol(Binder originalBinder) 675024" />
<Node Id="10345:[29040..29059).1" Label="param LookupSymbol(LookupResult result) 675025" />
<Node Id="10345:[29074..29085).1" Label="param LookupSymbol(string name) 675026" />
<Node Id="10345:[29100..29109).1" Label="param LookupSymbol(int arity) 675027" />
<Node Id="10345:[29124..29163).1" Label="param LookupSymbol(ConsList$TypeSymbol$ basesBeingResolved) 675028" />
<Node Id="10345:[29178..29199).1" Label="param LookupSymbol(LookupOptions options) 675029" />
<Node Id="10345:[29214..29227).1" Label="param LookupSymbol(bool diagnose) 675030" />
<Node Id="10345:[29242..29288).1" Label="param LookupSymbol(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 675031" />
<Node Id="10345:[28963..29726).1" Label="param LookupSymbol(this) 675032" />
<Node Id="10345:[29314..29436).1" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675033" />
<Node Id="10345:[29314..29436).2" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675034" />
<Node Id="10345:[29314..29436).3" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675035" />
<Node Id="10345:[29314..29436).4" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675036" />
<Node Id="10345:[29314..29436).5" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675037" />
<Node Id="10345:[29314..29436).6" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675038" />
<Node Id="10345:[29314..29436).7" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675039" />
<Node Id="10345:[29314..29436).8" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675040" />
<Node Id="10345:[29314..29435).1" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 675041" />
<Node Id="10345:[29788..29809).1" Label="param LookupSymbolInAliases(Binder originalBinder) 675042" />
<Node Id="10345:[29824..29843).1" Label="param LookupSymbolInAliases(LookupResult result) 675043" />
<Node Id="10345:[29858..29869).1" Label="param LookupSymbolInAliases(string name) 675044" />
<Node Id="10345:[29884..29893).1" Label="param LookupSymbolInAliases(int arity) 675045" />
<Node Id="10345:[29908..29947).1" Label="param LookupSymbolInAliases(ConsList$TypeSymbol$ basesBeingResolved) 675046" />
<Node Id="10345:[29962..29983).1" Label="param LookupSymbolInAliases(LookupOptions options) 675047" />
<Node Id="10345:[29998..30011).1" Label="param LookupSymbolInAliases(bool diagnose) 675048" />
<Node Id="10345:[30026..30072).1" Label="param LookupSymbolInAliases(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 675049" />
<Node Id="10345:[29738..31666).1" Label="param LookupSymbolInAliases(this) 675050" />
<Node Id="10345:[30127..30163).1" Label="originalBinder.IsSemanticModelBinder 675051" />
<Node Id="10286:[2155..2260).2" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 675052" />
<Node Id="10286:[2191..2245).5" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 675053" />
<Node Id="10286:[2191..2245).6" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 675054" />
<Node Id="10286:[2198..2244).2" Label="this.Flags.Includes(BinderFlags.SemanticModel) 675055" />
<Node Id="10298:[471..492).21" Label="param Includes(this BinderFlags self) 675056" />
<Node Id="10298:[494..511).21" Label="param Includes(BinderFlags other) 675057" />
<Node Id="10345:[30098..30164).1" Label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 675058" />
<Node Id="10345:[30180..30209).1" Label="AliasAndUsingDirective alias; 675059" />
<Node Id="10345:[30203..30208).1" Label="alias 675060" />
<Node Id="10345:[30223..30867).1" Label="if (this.UsingAliases.TryGetValue(name, out alias))
            {
                // Found a match in our list of normal aliases.  Mark the alias as being seen so that
                // it won't be reported to the user as something that can be removed.
                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                if (res.Kind == LookupResultKind.Viable)
                {
                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);
                }

                result.MergeEqual(res);
            } 675061" />
<Node Id="10345:[30223..30867).2" Label="if (this.UsingAliases.TryGetValue(name, out alias))
            {
                // Found a match in our list of normal aliases.  Mark the alias as being seen so that
                // it won't be reported to the user as something that can be removed.
                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                if (res.Kind == LookupResultKind.Viable)
                {
                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);
                }

                result.MergeEqual(res);
            } 675062" />
<Node Id="10345:[30223..30867).3" Label="if (this.UsingAliases.TryGetValue(name, out alias))
            {
                // Found a match in our list of normal aliases.  Mark the alias as being seen so that
                // it won't be reported to the user as something that can be removed.
                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                if (res.Kind == LookupResultKind.Viable)
                {
                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);
                }

                result.MergeEqual(res);
            } 675063" />
<Node Id="10345:[30883..31655).1" Label="foreach (var a in this.ExternAliases)
            {
                if (a.Alias.Name == name)
                {
                    // Found a match in our list of extern aliases.  Mark the extern alias as being
                    // seen so that it won't be reported to the user as something that can be
                    // removed.
                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 675064" />
<Node Id="10345:[29314..29436).9" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675065" />
<Node Id="10345:[29457..29477).1" Label="result.IsMultiViable 675066" />
<Node Id="10354:[4919..5009).16" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 675067" />
<Node Id="10354:[4094..4107).22" Label="return _kind; 675068" />
<Node Id="10345:[29452..29715).1" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 675069" />
<Node Id="10345:[29452..29715).2" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 675070" />
<Node Id="10345:[29452..29715).3" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 675071" />
<Node Id="10345:[29452..29715).5" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 675072" />
<Node Id="10345:[29566..29700).1" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675073" />
<Node Id="10345:[29566..29700).2" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675074" />
<Node Id="10345:[29566..29700).3" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675075" />
<Node Id="10345:[29566..29700).4" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675076" />
<Node Id="10345:[29566..29700).5" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675077" />
<Node Id="10345:[29566..29700).6" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675078" />
<Node Id="10345:[29566..29700).7" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675079" />
<Node Id="10345:[29566..29700).8" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675080" />
<Node Id="10345:[29566..29700).9" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675081" />
<Node Id="10345:[29566..29699).1" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 675082" />
<Node Id="10345:[31734..31789).1" Label="param LookupSymbolInUsings(ImmutableArray$NamespaceOrTypeAndUsingDirective$ usings) 675083" />
<Node Id="10345:[31804..31825).1" Label="param LookupSymbolInUsings(Binder originalBinder) 675084" />
<Node Id="10345:[31840..31859).1" Label="param LookupSymbolInUsings(LookupResult result) 675085" />
<Node Id="10345:[31874..31885).1" Label="param LookupSymbolInUsings(string name) 675086" />
<Node Id="10345:[31900..31909).1" Label="param LookupSymbolInUsings(int arity) 675087" />
<Node Id="10345:[31924..31963).1" Label="param LookupSymbolInUsings(ConsList$TypeSymbol$ basesBeingResolved) 675088" />
<Node Id="10345:[31978..31999).1" Label="param LookupSymbolInUsings(LookupOptions options) 675089" />
<Node Id="10345:[32014..32027).1" Label="param LookupSymbolInUsings(bool diagnose) 675090" />
<Node Id="10345:[32042..32088).1" Label="param LookupSymbolInUsings(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 675091" />
<Node Id="10345:[32114..32230).1" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 675092" />
<Node Id="10345:[32114..32230).2" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 675093" />
<Node Id="10345:[32118..32174).1" Label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 675094" />
<Node Id="10298:[471..492).22" Label="param Includes(this BinderFlags self) 675095" />
<Node Id="10298:[494..511).22" Label="param Includes(BinderFlags other) 675096" />
<Node Id="10345:[32275..32311).1" Label="originalBinder.IsSemanticModelBinder 675097" />
<Node Id="10286:[2155..2260).3" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 675098" />
<Node Id="10286:[2191..2245).9" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 675099" />
<Node Id="10286:[2191..2245).10" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 675100" />
<Node Id="10286:[2198..2244).3" Label="this.Flags.Includes(BinderFlags.SemanticModel) 675101" />
<Node Id="10298:[471..492).23" Label="param Includes(this BinderFlags self) 675102" />
<Node Id="10298:[494..511).23" Label="param Includes(BinderFlags other) 675103" />
<Node Id="10345:[32246..32312).1" Label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 675104" />
<Node Id="10345:[32328..33465).1" Label="foreach (var typeOrNamespace in usings)
            {
                ImmutableArray$Symbol$ candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);
                foreach (Symbol symbol in candidates)
                {
                    if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    }

                    // Found a match in our list of normal using directives.  Mark the directive
                    // as being seen so that it won't be reported to the user as something that
                    // can be removed.
                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 675105" />
<Node Id="10345:[29566..29700).10" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675106" />
<Node Id="10354:[3720..3803).77" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 675107" />
<Node Id="10354:[3720..3803).79" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 675108" />
<Node Id="10312:[4680..4787).7" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 675109" />
<Node Id="10312:[4534..4658).39" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 675110" />
<Node Id="10312:[4534..4658).43" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 675111" />
<Node Id="10346:[10663..10672).3" Label="param LookupSymbolsInSingleBinder(int arity) 675112" />
<Node Id="10346:[10761..10774).3" Label="param LookupSymbolsInSingleBinder(bool diagnose) 675113" />
<Node Id="10346:[10861..10875).3" Label="result.IsClear 675114" />
<Node Id="10354:[3684..3818).12" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 675115" />
<Node Id="10354:[3720..3803).85" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 675116" />
<Node Id="10354:[3720..3803).86" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 675117" />
<Node Id="10354:[3720..3803).87" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 675118" />
<Node Id="10346:[10848..10877).7" Label="Debug.Assert(result.IsClear); 675119" />
<Node Id="10346:[10897..10914).3" Label="IsSubmissionClass 675120" />
<Node Id="10346:[7666..7775).3" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 675121" />
<Node Id="10346:[7672..7773).7" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 675122" />
<Node Id="10346:[10893..11127).5" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 675123" />
<Node Id="10346:[3525..3638).24" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 675124" />
<Node Id="10312:[7718..7727).3" Label="param LookupMembersInternal(int arity) 675125" />
<Node Id="10312:[7816..7829).3" Label="param LookupMembersInternal(bool diagnose) 675126" />
<Node Id="10312:[7903..7936).9" Label="Debug.Assert(options.AreValid()); 675127" />
<Node Id="10312:[7916..7934).3" Label="options.AreValid() 675128" />
<Node Id="10353:[4698..4724).5" Label="param AreValid(this LookupOptions options) 675129" />
<Node Id="10353:[4750..4847).9" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 675130" />
<Node Id="10353:[4863..5000).17" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 675131" />
<Node Id="10353:[4863..5000).18" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 675132" />
<Node Id="10353:[5079..5183).9" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 675133" />
<Node Id="10353:[5197..5323).13" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 675134" />
<Node Id="10353:[5485..5759).25" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 675135" />
<Node Id="10353:[5485..5759).26" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 675136" />
<Node Id="10353:[5485..5759).27" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 675137" />
<Node Id="10353:[5775..5979).17" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 675138" />
<Node Id="10353:[5775..5979).19" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 675139" />
<Node Id="10353:[5995..6029).13" Label="return OnlyOneBitSet(onlyOptions); 675140" />
<Node Id="10353:[6002..6028).5" Label="OnlyOneBitSet(onlyOptions) 675141" />
<Node Id="10353:[6343..6358).5" Label="param OnlyOneBitSet(LookupOptions o) 675142" />
<Node Id="10353:[6384..6410).25" Label="return (o & (o - 1)) == 0; 675143" />
<Node Id="10353:[6384..6410).26" Label="return (o & (o - 1)) == 0; 675144" />
<Node Id="10312:[7952..7977).9" Label="Debug.Assert(arity $= 0); 675145" />
<Node Id="10312:[7952..7977).10" Label="Debug.Assert(arity $= 0); 675146" />
<Node Id="10312:[19030..19039).2" Label="param LookupMembersInNamespace(int arity) 675147" />
<Node Id="10312:[19087..19100).2" Label="param LookupMembersInNamespace(bool diagnose) 675148" />
<Node Id="10312:[61608..61629).4" Label="param GetCandidateMembers(Binder originalBinder) 675149" />
<Node Id="10312:[63439..63448).2" Label="param CheckViability(int arity) 675150" />
<Node Id="10312:[63473..63501).2" Label="param CheckViability(TypeSymbol accessThroughType) 675151" />
<Node Id="10312:[63503..63516).2" Label="param CheckViability(bool diagnose) 675152" />
<Node Id="10312:[63566..63612).2" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 675153" />
<Node Id="10312:[63638..63668).2" Label="bool inaccessibleViaQualifier; 675154" />
<Node Id="10312:[63682..63706).2" Label="DiagnosticInfo diagInfo; 675155" />
<Node Id="10312:[80978..80991).2" Label="param WrongArity(Symbol symbol) 675156" />
<Node Id="10312:[80993..81002).2" Label="param WrongArity(int arity) 675157" />
<Node Id="10312:[81004..81017).2" Label="param WrongArity(bool diagnose) 675158" />
<Node Id="10312:[81019..81040).2" Label="param WrongArity(LookupOptions options) 675159" />
<Node Id="10312:[81042..81069).2" Label="param WrongArity(out DiagnosticInfo diagInfo) 675160" />
<Node Id="10312:[81095..84034).2" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 675161" />
<Node Id="10312:[81196..82523).1" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 675162" />
<Node Id="10312:[81196..82523).2" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 675163" />
<Node Id="10312:[81196..82523).3" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 675164" />
<Node Id="10312:[81196..82523).6" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 675165" />
<Node Id="10312:[81319..81371).1" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 675166" />
<Node Id="10312:[81495..81570).1" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 675167" />
<Node Id="10312:[81495..81570).2" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 675168" />
<Node Id="10312:[81596..82500).1" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 675169" />
<Node Id="10312:[81596..82500).2" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 675170" />
<Node Id="10312:[81628..81659).1" Label="options.IsAttributeTypeLookup() 675171" />
<Node Id="10353:[7504..7530).3" Label="param IsAttributeTypeLookup(this LookupOptions options) 675172" />
<Node Id="10312:[81596..82500).5" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 675173" />
<Node Id="10312:[84050..84066).3" Label="diagInfo = null; 675174" />
<Node Id="10312:[66177..69285).16" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 675175" />
<Node Id="10312:[66291..66342).2" Label="RefineAccessThroughType(options, accessThroughType) 675176" />
<Node Id="10312:[75301..75322).2" Label="param RefineAccessThroughType(LookupOptions options) 675177" />
<Node Id="10312:[75324..75352).2" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 675178" />
<Node Id="10312:[75735..75866).6" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 675179" />
<Node Id="10312:[75735..75866).7" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 675180" />
<Node Id="10312:[75742..75804).2" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 675181" />
<Node Id="10312:[75735..75866).9" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 675182" />
<Node Id="10312:[66177..69285).19" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 675183" />
<Node Id="10312:[66177..69285).20" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 675184" />
<Node Id="10312:[66177..69285).21" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 675185" />
<Node Id="10312:[77543..77571).2" Label="param IsAccessible(TypeSymbol accessThroughType) 675186" />
<Node Id="10312:[77573..77604).2" Label="param IsAccessible(out bool failedThroughTypeCheck) 675187" />
<Node Id="10312:[77654..77700).2" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 675188" />
<Node Id="10312:[77726..77892).5" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 675189" />
<Node Id="10312:[77726..77892).6" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 675190" />
<Node Id="10312:[77730..77782).2" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 675191" />
<Node Id="10298:[471..492).27" Label="param Includes(this BinderFlags self) 675192" />
<Node Id="10298:[494..511).27" Label="param Includes(BinderFlags other) 675193" />
<Node Id="10312:[78402..78430).2" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 675194" />
<Node Id="10312:[78432..78463).2" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 675195" />
<Node Id="10312:[78513..78552).2" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 675196" />
<Node Id="10346:[8034..8062).2" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 675197" />
<Node Id="10346:[8064..8095).2" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 675198" />
<Node Id="10346:[8145..8184).2" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 675199" />
<Node Id="10346:[8323..8450).1" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 675200" />
<Node Id="10346:[8323..8450).3" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 675201" />
<Node Id="10346:[8323..8450).4" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 675202" />
<Node Id="10346:[8323..8450).5" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 675203" />
<Node Id="10346:[8330..8449).1" Label="this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics) 675204" />
<Node Id="10286:[30070..30083).1" Label="param IsSymbolAccessibleConditional(Symbol symbol) 675205" />
<Node Id="10286:[30098..30120).1" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 675206" />
<Node Id="10286:[30135..30160).1" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 675207" />
<Node Id="10286:[30175..30206).1" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 675208" />
<Node Id="10286:[30221..30268).1" Label="param IsSymbolAccessibleConditional(ref HashSet$DiagnosticInfo$? useSiteDiagnostics) 675209" />
<Node Id="10286:[30283..30330).1" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 675210" />
<Node Id="10286:[30012..30691).1" Label="param IsSymbolAccessibleConditional(this) 675211" />
<Node Id="10286:[30356..30522).1" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 675212" />
<Node Id="10286:[30356..30522).2" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 675213" />
<Node Id="10286:[30360..30412).1" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 675214" />
<Node Id="10298:[471..492).28" Label="param Includes(this BinderFlags self) 675215" />
<Node Id="10298:[494..511).28" Label="param Includes(BinderFlags other) 675216" />
<Node Id="10286:[30538..30680).1" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 675217" />
<Node Id="10286:[30538..30680).2" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 675218" />
<Node Id="10286:[30538..30680).3" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 675219" />
<Node Id="10286:[30538..30680).4" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 675220" />
<Node Id="10286:[30538..30680).5" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 675221" />
<Node Id="10286:[30538..30680).6" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 675222" />
<Node Id="10286:[30545..30679).1" Label="AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 675223" />
<Node Id="10060:[2108..2121).1" Label="param IsSymbolAccessible(Symbol symbol) 675224" />
<Node Id="10060:[2136..2158).1" Label="param IsSymbolAccessible(NamedTypeSymbol within) 675225" />
<Node Id="10060:[2173..2198).1" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 675226" />
<Node Id="10060:[2213..2244).1" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 675227" />
<Node Id="10060:[2259..2305).1" Label="param IsSymbolAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 675228" />
<Node Id="10060:[2320..2366).1" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 675229" />
<Node Id="10060:[2392..2555).1" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 675230" />
<Node Id="10060:[2392..2555).2" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 675231" />
<Node Id="10060:[2392..2555).3" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 675232" />
<Node Id="10060:[2392..2555).4" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 675233" />
<Node Id="10060:[2392..2555).5" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 675234" />
<Node Id="10060:[2392..2555).6" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 675235" />
<Node Id="10060:[2392..2555).7" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 675236" />
<Node Id="10060:[2399..2554).1" Label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved) 675237" />
<Node Id="10060:[5593..5606).2" Label="param IsSymbolAccessibleCore(Symbol symbol) 675238" />
<Node Id="10060:[5621..5634).2" Label="param IsSymbolAccessibleCore(Symbol within) 675239" />
<Node Id="10060:[5691..5716).2" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 675240" />
<Node Id="10060:[5731..5762).2" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 675241" />
<Node Id="10060:[5777..5806).2" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 675242" />
<Node Id="10060:[5821..5867).2" Label="param IsSymbolAccessibleCore(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 675243" />
<Node Id="10060:[5882..5928).2" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 675244" />
<Node Id="10060:[5954..5991).5" Label="Debug.Assert((object)symbol != null); 675245" />
<Node Id="10060:[5954..5991).6" Label="Debug.Assert((object)symbol != null); 675246" />
<Node Id="10060:[6005..6042).5" Label="Debug.Assert((object)within != null); 675247" />
<Node Id="10060:[6005..6042).6" Label="Debug.Assert((object)within != null); 675248" />
<Node Id="10060:[6056..6090).3" Label="Debug.Assert(within.IsDefinition); 675249" />
<Node Id="10060:[6104..6172).4" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 675250" />
<Node Id="10060:[6188..6219).3" Label="failedThroughTypeCheck = false; 675251" />
<Node Id="10060:[6814..6920).1" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 675252" />
<Node Id="10060:[6814..6920).2" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 675253" />
<Node Id="10060:[6814..6920).3" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 675254" />
<Node Id="10060:[6814..6920).4" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 675255" />
<Node Id="10060:[6821..6919).1" Label="IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved) 675256" />
<Node Id="10060:[10180..10200).1" Label="param IsNamedTypeAccessible(NamedTypeSymbol type) 675257" />
<Node Id="10060:[10202..10215).1" Label="param IsNamedTypeAccessible(Symbol within) 675258" />
<Node Id="10060:[10217..10263).1" Label="param IsNamedTypeAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 675259" />
<Node Id="10060:[10265..10311).1" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 675260" />
<Node Id="10060:[10337..10405).1" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 675261" />
<Node Id="10060:[10419..10454).1" Label="Debug.Assert((object)type != null); 675262" />
<Node Id="10060:[10419..10454).2" Label="Debug.Assert((object)type != null); 675263" />
<Node Id="10060:[10470..10516).1" Label="var compilation = within.DeclaringCompilation; 675264" />
<Node Id="10060:[10532..10544).1" Label="bool unused; 675265" />
<Node Id="10060:[10558..11295).1" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 675266" />
<Node Id="10060:[11311..11352).1" Label="var containingType = type.ContainingType; 675267" />
<Node Id="10060:[11366..11675).1" Label="return (object)containingType == null
                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)
                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 675268" />
<Node Id="10060:[11366..11675).2" Label="return (object)containingType == null
                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)
                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 675269" />
<Node Id="10060:[11373..11403).1" Label="(object)containingType == null 675270" />
<Node Id="10060:[11366..11675).5" Label="return (object)containingType == null
                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)
                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 675271" />
<Node Id="10060:[11423..11509).1" Label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 675272" />
<Node Id="10060:[11990..12013).1" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 675273" />
<Node Id="10060:[12028..12063).1" Label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 675274" />
<Node Id="10060:[12078..12091).1" Label="param IsNonNestedTypeAccessible(Symbol within) 675275" />
<Node Id="10060:[12117..12185).1" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 675276" />
<Node Id="10060:[12199..12238).1" Label="Debug.Assert((object)assembly != null); 675277" />
<Node Id="10060:[12199..12238).2" Label="Debug.Assert((object)assembly != null); 675278" />
<Node Id="10060:[12254..13527).1" Label="switch (declaredAccessibility)
            {
                case Accessibility.NotApplicable:
                case Accessibility.Public:
                    // Public symbols are always accessible from any context
                    return true;

                case Accessibility.Private:
                case Accessibility.Protected:
                case Accessibility.ProtectedAndInternal:
                    // Shouldn't happen except in error cases.
                    return false;

                case Accessibility.Internal:
                case Accessibility.ProtectedOrInternal:

                    // within is typically a type
                    var withinType = within as NamedTypeSymbol;
                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;

                    // An internal type is accessible if we're in the same assembly or we have
                    // friend access to the assembly it was defined in.
                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);

                default:
                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);
            } 675279" />
<Node Id="10060:[12937..12980).1" Label="var withinType = within as NamedTypeSymbol; 675280" />
<Node Id="10060:[13002..13107).1" Label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 675281" />
<Node Id="10060:[13002..13107).2" Label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 675282" />
<Node Id="10060:[13023..13049).1" Label="(object)withinType != null 675283" />
<Node Id="10060:[13052..13081).1" Label="withinType.ContainingAssembly 675284" />
<Node Id="10060:[13300..13398).1" Label="return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly); 675285" />
<Node Id="10346:[11665..12181).10" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 675286" />
<Node Id="10346:[11710..11746).2" Label="originalBinder.IsSemanticModelBinder 675287" />
<Node Id="10286:[2155..2260).4" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 675288" />
<Node Id="10286:[2191..2245).13" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 675289" />
<Node Id="10286:[2191..2245).14" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 675290" />
<Node Id="10286:[2198..2244).4" Label="this.Flags.Includes(BinderFlags.SemanticModel) 675291" />
<Node Id="10298:[471..492).30" Label="param Includes(this BinderFlags self) 675292" />
<Node Id="10298:[494..511).30" Label="param Includes(BinderFlags other) 675293" />
<Node Id="10345:[28225..28251).2" Label="param IsUsingAlias(bool callerIsSemanticModel) 675294" />
<Node Id="10345:[28927..28940).3" Label="return false; 675295" />
<Node Id="10346:[11665..12181).15" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 675296" />
<Node Id="10346:[12205..12212).2" Label="return; 675297" />
<Node Id="10312:[4685..4699).5" Label="result.IsClear 675298" />
<Node Id="10354:[3684..3818).13" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 675299" />
<Node Id="10354:[3720..3803).93" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 675300" />
<Node Id="10312:[4680..4787).9" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 675301" />
<Node Id="10312:[4749..4764).2" Label="binder = scope; 675302" />
<Node Id="10312:[4826..5058).21" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 675303" />
<Node Id="10312:[4826..5058).22" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 675304" />
<Node Id="10312:[5087..5101).2" Label="return binder; 675305" />
<Node Id="10319:[43504..43546).8" Label="diagnostics.Add(node, useSiteDiagnostics); 675306" />
<Node Id="10319:[43562..43590).3" Label="Symbol bindingResult = null; 675307" />
<Node Id="10319:[41088..41107).2" Label="param IsViableType(LookupResult result) 675308" />
<Node Id="10319:[41138..41158).2" Label="result.IsMultiViable 675309" />
<Node Id="10354:[4919..5009).20" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 675310" />
<Node Id="10354:[4094..4107).28" Label="return _kind; 675311" />
<Node Id="10319:[41133..41220).3" Label="if (!result.IsMultiViable)
            {
                return false;
            } 675312" />
<Node Id="10319:[41254..41268).2" Label="result.Symbols 675313" />
<Node Id="10354:[4525..4595).3" Label="get
            {
                return _symbolList;
            } 675314" />
<Node Id="10354:[4561..4580).3" Label="return _symbolList; 675315" />
<Node Id="10319:[41236..41680).7" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 675316" />
<Node Id="10319:[41302..41665).2" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 675317" />
<Node Id="10319:[41634..41646).1" Label="return true; 675318" />
<Node Id="10319:[44751..44765).2" Label="bool wasError; 675319" />
<Node Id="10319:[44785..44930).18" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 675320" />
<Node Id="10319:[44785..44930).19" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 675321" />
<Node Id="10319:[84201..84218).2" Label="param ResultSymbol(string simpleName) 675322" />
<Node Id="10319:[84233..84242).2" Label="param ResultSymbol(int arity) 675323" />
<Node Id="10319:[84257..84273).2" Label="param ResultSymbol(SyntaxNode where) 675324" />
<Node Id="10319:[84288..84313).2" Label="param ResultSymbol(DiagnosticBag diagnostics) 675325" />
<Node Id="10319:[84374..84391).2" Label="param ResultSymbol(out bool wasError) 675326" />
<Node Id="10319:[84406..84447).2" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 675327" />
<Node Id="10319:[84462..84508).2" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 675328" />
<Node Id="10319:[84124..109887).2" Label="param ResultSymbol(this) 675329" />
<Node Id="10319:[85320..85348).5" Label="Debug.Assert(where != null); 675330" />
<Node Id="10319:[85320..85348).6" Label="Debug.Assert(where != null); 675331" />
<Node Id="10319:[85366..85400).5" Label="Debug.Assert(diagnostics != null); 675332" />
<Node Id="10319:[85366..85400).6" Label="Debug.Assert(diagnostics != null); 675333" />
<Node Id="10354:[4561..4580).4" Label="return _symbolList; 675334" />
<Node Id="10319:[85467..85484).3" Label="wasError = false; 675335" />
<Node Id="10354:[4094..4107).29" Label="return _kind; 675336" />
<Node Id="10319:[104874..105336).4" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 675337" />
<Node Id="10319:[104874..105336).5" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 675338" />
<Node Id="10319:[105368..106708).2" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 675339" />
<Node Id="10319:[105465..105535).7" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 675340" />
<Node Id="10319:[105465..105535).8" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 675341" />
<Node Id="10319:[76360..76385).2" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 675342" />
<Node Id="10319:[76387..76402).2" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 675343" />
<Node Id="10319:[76494..76582).5" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 675344" />
<Node Id="10319:[84691..84861).3" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 675345" />
<Node Id="10319:[84764..84846).1" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 675346" />
<Node Id="10319:[84764..84846).2" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 675347" />
<Node Id="10319:[84764..84846).4" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 675348" />
<Node Id="10319:[84764..84846).5" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 675349" />
<Node Id="10319:[84764..84845).1" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 675350" />
<Node Id="10306:[358886..358901).1" Label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 675351" />
<Node Id="10306:[358903..358930).1" Label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 675352" />
<Node Id="10306:[358932..358945).1" Label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 675353" />
<Node Id="10306:[358947..358972).1" Label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 675354" />
<Node Id="10306:[358838..360009).1" Label="param CheckRuntimeSupportForSymbolAccess(this) 675355" />
<Node Id="10306:[358998..359998).1" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 675356" />
<Node Id="10306:[358998..359998).2" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 675357" />
<Node Id="10319:[44948..45377).3" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 675358" />
<Node Id="10354:[11428..11441).3" Label="this.Clear(); 675359" />
<Node Id="10319:[45408..45422).2" Label="result.Free(); 675360" />
<Node Id="10325:[4462..4594).2" Label="param AreNullableAnnotationsGloballyEnabled(this) 675361" />
<Node Id="10325:[4556..4582).2" Label="GetGlobalAnnotationState() 675362" />
<Node Id="10286:[10675..11259).2" Label="param GetGlobalAnnotationState(this) 675363" />
<Node Id="10286:[10741..11248).2" Label="switch (Compilation.Options.NullableContextOptions)
            {
                case NullableContextOptions.Enable:
                case NullableContextOptions.Annotations:
                    return true;

                case NullableContextOptions.Disable:
                case NullableContextOptions.Warnings:
                    return false;

                default:
                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);
            } 675364" />
<Node Id="10286:[11085..11098).3" Label="return false; 675365" />
<Node Id="10325:[4549..4583).3" Label="return GetGlobalAnnotationState(); 675366" />
<Node Id="10286:[10600..10652).5" Label="return Next.AreNullableAnnotationsGloballyEnabled(); 675367" />
<Node Id="10287:[2306..2328).2" Label="param CreateUnannotated(bool isNullableEnabled) 675368" />
<Node Id="10287:[2377..2471).3" Label="if (symbol is null)
                {
                    return default;
                } 675369" />
<Node Id="10287:[2680..2780).1" Label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)) 675370" />
<Node Id="10287:[718..757).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 675371" />
<Node Id="10287:[666..1076).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 675372" />
<Node Id="10287:[791..833).1" Label="Debug.Assert(typeWithAnnotations.HasType); 675373" />
<Node Id="10287:[851..871).1" Label="_typeWithAnnotations 675374" />
<Node Id="10287:[912..927).1" Label="_symbol = null; 675375" />
<Node Id="10287:[912..919).1" Label="_symbol 675376" />
<Node Id="10287:[945..972).1" Label="_isNullableEnabled = false; 675377" />
<Node Id="10287:[945..963).1" Label="_isNullableEnabled 675378" />
<Node Id="10319:[15383..15396).1" Label="symbol.IsType 675379" />
<Node Id="10287:[1609..1643).1" Label="=$ !_typeWithAnnotations.IsDefault 675380" />
<Node Id="10287:[1612..1643).1" Label="!_typeWithAnnotations.IsDefault 675381" />
<Node Id="10319:[15379..15933).1" Label="if (symbol.IsType ||
                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))
            {
                if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                }

                return symbol;
            } 675382" />
<Node Id="10319:[15548..15561).1" Label="symbol.IsType 675383" />
<Node Id="10319:[15544..15884).1" Label="if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                } 675384" />
<Node Id="10319:[15783..15809).1" Label="symbol.TypeWithAnnotations 675385" />
<Node Id="10287:[1474..1497).1" Label="=$ _typeWithAnnotations 675386" />
<Node Id="10287:[1477..1497).1" Label="_typeWithAnnotations 675387" />
<Node Id="10319:[15783..15865).1" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 675388" />
<Node Id="10319:[15783..15865).2" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 675389" />
<Node Id="10319:[15783..15865).3" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 675390" />
<Node Id="10319:[15783..15865).4" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 675391" />
<Node Id="10319:[15783..15865).6" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 675392" />
<Node Id="10286:[21504..21529).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 675393" />
<Node Id="10286:[21531..21544).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 675394" />
<Node Id="10286:[21546..21561).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 675395" />
<Node Id="10286:[21563..21583).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675396" />
<Node Id="10286:[21462..21711).1" Label="param ReportDiagnosticsIfObsolete(this) 675397" />
<Node Id="10286:[21609..21700).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 675398" />
<Node Id="10286:[21609..21700).2" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 675399" />
<Node Id="10286:[21609..21700).3" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 675400" />
<Node Id="10286:[21609..21700).4" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 675401" />
<Node Id="10286:[21609..21699).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 675402" />
<Node Id="10286:[22044..22069).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 675403" />
<Node Id="10286:[22071..22084).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 675404" />
<Node Id="10286:[22086..22108).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675405" />
<Node Id="10286:[22110..22130).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675406" />
<Node Id="10286:[22002..22611).1" Label="param ReportDiagnosticsIfObsolete(this) 675407" />
<Node Id="10286:[22156..22600).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Event:
                case SymbolKind.Property:
                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);
                    break;
            } 675408" />
<Node Id="10286:[22421..22557).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675409" />
<Node Id="10286:[22421..22557).2" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675410" />
<Node Id="10286:[22421..22557).3" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675411" />
<Node Id="10286:[22421..22557).4" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675412" />
<Node Id="10286:[22493..22522).1" Label="this.ContainingMemberOrLambda 675413" />
<Node Id="10307:[1439..1480).1" Label="get { return _containingMemberOrLambda; } 675414" />
<Node Id="10307:[1445..1478).1" Label="return _containingMemberOrLambda; 675415" />
<Node Id="10286:[22421..22557).5" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675416" />
<Node Id="10286:[22524..22543).1" Label="this.ContainingType 675417" />
<Node Id="10286:[15519..15926).1" Label="get
            {
                var member = this.ContainingMemberOrLambda;
                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);
                return member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                };
            } 675418" />
<Node Id="10286:[15568..15597).1" Label="this.ContainingMemberOrLambda 675419" />
<Node Id="10307:[1439..1480).2" Label="get { return _containingMemberOrLambda; } 675420" />
<Node Id="10307:[1445..1478).2" Label="return _containingMemberOrLambda; 675421" />
<Node Id="10286:[15555..15598).1" Label="var member = this.ContainingMemberOrLambda; 675422" />
<Node Id="10286:[15616..15690).1" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675423" />
<Node Id="10286:[15616..15690).2" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675424" />
<Node Id="10286:[15715..15910).1" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 675425" />
<Node Id="10286:[15708..15911).1" Label="return member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                }; 675426" />
<Node Id="10286:[22421..22557).7" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675427" />
<Node Id="10286:[22421..22557).9" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675428" />
<Node Id="10286:[22421..22556).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 675429" />
<Node Id="10286:[23056..23081).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 675430" />
<Node Id="10286:[23096..23109).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 675431" />
<Node Id="10286:[23124..23146).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675432" />
<Node Id="10286:[23161..23181).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675433" />
<Node Id="10286:[23196..23220).1" Label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 675434" />
<Node Id="10286:[23235..23266).1" Label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 675435" />
<Node Id="10286:[23281..23301).1" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 675436" />
<Node Id="10286:[23327..23364).1" Label="RoslynDebug.Assert(symbol is object); 675437" />
<Node Id="10286:[23380..23684).1" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 675438" />
<Node Id="10286:[23893..24026).1" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 675439" />
<Node Id="10286:[24450..24529).1" Label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 675440" />
<Node Id="10286:[24450..24529).2" Label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 675441" />
<Node Id="10286:[24450..24529).3" Label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 675442" />
<Node Id="10286:[24545..24641).1" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 675443" />
<Node Id="10286:[24655..25349).1" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 675444" />
<Node Id="10286:[25365..25492).1" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 675445" />
<Node Id="10286:[25365..25492).2" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 675446" />
<Node Id="10286:[25365..25492).3" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 675447" />
<Node Id="10286:[25365..25492).4" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 675448" />
<Node Id="10286:[25365..25492).5" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 675449" />
<Node Id="10286:[25386..25491).1" Label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 675450" />
<Node Id="10286:[26910..26935).1" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 675451" />
<Node Id="10286:[26937..26950).1" Label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 675452" />
<Node Id="10286:[26952..26974).1" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 675453" />
<Node Id="10286:[26976..27000).1" Label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 675454" />
<Node Id="10286:[27002..27022).1" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 675455" />
<Node Id="10286:[27048..27088).1" Label="RoslynDebug.Assert(diagnostics != null); 675456" />
<Node Id="10286:[27048..27088).2" Label="RoslynDebug.Assert(diagnostics != null); 675457" />
<Node Id="10286:[27104..27192).1" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 675458" />
<Node Id="10286:[27104..27192).2" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 675459" />
<Node Id="10286:[27104..27192).3" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 675460" />
<Node Id="10286:[27104..27192).5" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 675461" />
<Node Id="10286:[27208..27236).1" Label="DiagnosticInfo? info = null; 675462" />
<Node Id="10286:[27250..27722).1" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 675463" />
<Node Id="10286:[27738..27845).1" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 675464" />
<Node Id="10286:[27738..27845).2" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 675465" />
<Node Id="10286:[27861..27873).1" Label="return kind; 675466" />
<Node Id="10286:[26281..26812).1" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 675467" />
<Node Id="10286:[26450..26769).1" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 675468" />
<Node Id="10286:[22421..22557).10" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675469" />
<Node Id="10286:[21609..21700).5" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 675470" />
<Node Id="10319:[15904..15918).1" Label="return symbol; 675471" />
<Node Id="10319:[13962..14050).1" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 675472" />
<Node Id="10319:[13962..14050).2" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 675473" />
<Node Id="10319:[13962..14050).3" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 675474" />
<Node Id="10319:[13962..14050).4" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 675475" />
<Node Id="10319:[13969..14029).1" Label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 675476" />
<Node Id="10319:[51762..51815).2" Label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 675477" />
<Node Id="10319:[51817..51842).2" Label="param UnwrapAlias(DiagnosticBag diagnostics) 675478" />
<Node Id="10319:[51844..51861).2" Label="param UnwrapAlias(SyntaxNode syntax) 675479" />
<Node Id="10319:[51863..51909).2" Label="param UnwrapAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 675480" />
<Node Id="10319:[51698..52285).2" Label="param UnwrapAlias(this) 675481" />
<Node Id="10319:[51939..51953).2" Label="symbol.IsAlias 675482" />
<Node Id="10287:[1680..1716).2" Label="=$ _symbol?.Kind == SymbolKind.Alias 675483" />
<Node Id="10287:[1683..1690).1" Label="_symbol 675484" />
<Node Id="10287:[1683..1716).3" Label="_symbol?.Kind == SymbolKind.Alias 675485" />
<Node Id="10319:[51935..52244).3" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 675486" />
<Node Id="10319:[13969..14049).1" Label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 675487" />
<Node Id="10287:[1474..1497).2" Label="=$ _typeWithAnnotations 675488" />
<Node Id="10287:[1477..1497).2" Label="_typeWithAnnotations 675489" />
<Node Id="25002:[4395..4432).38" Label="var diagnostics = c.GetDiagnostics(); 675490" />
<Node Id="10313:[1230..1280).1" Label="param ValidateParameterNameConflicts(ImmutableArray$TypeParameterSymbol$ typeParameters) 675491" />
<Node Id="10313:[1295..1337).1" Label="param ValidateParameterNameConflicts(ImmutableArray$ParameterSymbol$ parameters) 675492" />
<Node Id="10313:[1352..1376).1" Label="param ValidateParameterNameConflicts(bool allowShadowingNames) 675493" />
<Node Id="10313:[1391..1416).1" Label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 675494" />
<Node Id="10313:[1171..3563).1" Label="param ValidateParameterNameConflicts(this) 675495" />
<Node Id="10313:[1442..1480).1" Label="PooledHashSet$string$? tpNames = null; 675496" />
<Node Id="10313:[1494..2257).1" Label="if (!typeParameters.IsDefaultOrEmpty)
            {
                tpNames = PooledHashSet$string$.GetInstance();
                foreach (var tp in typeParameters)
                {
                    var name = tp.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (!tpNames.Add(name))
                    {
                        // Type parameter declaration name conflicts are detected elsewhere
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);
                    }
                }
            } 675497" />
<Node Id="10313:[2273..2310).1" Label="PooledHashSet$string$? pNames = null; 675498" />
<Node Id="10313:[2324..3491).1" Label="if (!parameters.IsDefaultOrEmpty)
            {
                pNames = PooledHashSet$string$.GetInstance();
                foreach (var p in parameters)
                {
                    var name = p.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    }

                    if (!pNames.Add(name))
                    {
                        // The parameter name '{0}' is a duplicate
                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(p, diagnostics);
                    }
                }
            } 675499" />
<Node Id="10313:[2390..2435).1" Label="pNames = PooledHashSet$string$.GetInstance(); 675500" />
<Node Id="10313:[2453..3476).1" Label="foreach (var p in parameters)
                {
                    var name = p.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    }

                    if (!pNames.Add(name))
                    {
                        // The parameter name '{0}' is a duplicate
                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(p, diagnostics);
                    }
                } 675501" />
<Node Id="10313:[2523..2541).1" Label="var name = p.Name; 675502" />
<Node Id="10313:[2563..2675).1" Label="if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    } 675503" />
<Node Id="10313:[2699..3019).1" Label="if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    } 675504" />
<Node Id="10313:[2699..3019).2" Label="if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    } 675505" />
<Node Id="10313:[3043..3457).1" Label="if (!pNames.Add(name))
                    {
                        // The parameter name '{0}' is a duplicate
                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(p, diagnostics);
                    } 675506" />
<Node Id="10313:[3043..3457).2" Label="if (!pNames.Add(name))
                    {
                        // The parameter name '{0}' is a duplicate
                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(p, diagnostics);
                    } 675507" />
<Node Id="10313:[3304..3457).1" Label="if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(p, diagnostics);
                    } 675508" />
<Node Id="10313:[3378..3434).1" Label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 675509" />
<Node Id="10313:[3378..3434).2" Label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 675510" />
<Node Id="10313:[3378..3433).1" Label="ValidateDeclarationNameConflictsInScope(p, diagnostics) 675511" />
<Node Id="10313:[720..733).1" Label="param ValidateDeclarationNameConflictsInScope(Symbol symbol) 675512" />
<Node Id="10313:[735..760).1" Label="param ValidateDeclarationNameConflictsInScope(DiagnosticBag diagnostics) 675513" />
<Node Id="10313:[666..931).1" Label="param ValidateDeclarationNameConflictsInScope(this) 675514" />
<Node Id="10313:[786..826).1" Label="Location location = GetLocation(symbol); 675515" />
<Node Id="10313:[806..825).1" Label="GetLocation(symbol) 675516" />
<Node Id="10313:[979..992).1" Label="param GetLocation(Symbol symbol) 675517" />
<Node Id="10313:[1018..1051).1" Label="var locations = symbol.Locations; 675518" />
<Node Id="10313:[1065..1148).1" Label="return locations.Length != 0 ? locations[0] : symbol.ContainingSymbol.Locations[0]; 675519" />
<Node Id="10313:[1065..1148).2" Label="return locations.Length != 0 ? locations[0] : symbol.ContainingSymbol.Locations[0]; 675520" />
<Node Id="10313:[1072..1093).1" Label="locations.Length != 0 675521" />
<Node Id="10313:[840..920).1" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675522" />
<Node Id="10313:[840..920).2" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675523" />
<Node Id="10313:[840..920).3" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675524" />
<Node Id="10313:[840..920).4" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675525" />
<Node Id="10313:[847..919).1" Label="ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics) 675526" />
<Node Id="10313:[3733..3747).1" Label="param ValidateNameConflictsInScope(Symbol? symbol) 675527" />
<Node Id="10313:[3749..3766).1" Label="param ValidateNameConflictsInScope(Location location) 675528" />
<Node Id="10313:[3768..3779).1" Label="param ValidateNameConflictsInScope(string name) 675529" />
<Node Id="10313:[3781..3806).1" Label="param ValidateNameConflictsInScope(DiagnosticBag diagnostics) 675530" />
<Node Id="10313:[3691..5083).1" Label="param ValidateNameConflictsInScope(this) 675531" />
<Node Id="10313:[3832..3924).1" Label="if (string.IsNullOrEmpty(name))
            {
                return false;
            } 675532" />
<Node Id="10313:[3940..4044).1" Label="bool allowShadowing = Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNameShadowingInNestedFunctions); 675533" />
<Node Id="10313:[3940..4044).2" Label="bool allowShadowing = Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNameShadowingInNestedFunctions); 675534" />
<Node Id="10313:[4060..5043).1" Label="for (Binder? binder = this; binder != null; binder = binder.Next)
            {
                // no local scopes enclose members
                if (binder is InContainerBinder)
                {
                    return false;
                }

                var scope = binder as LocalScopeBinder;
                if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)
                {
                    return true;
                }

                // If shadowing is enabled, avoid checking for conflicts outside of local functions or lambdas.
                if (allowShadowing && binder.IsNestedFunctionBinder)
                {
                    return false;
                }

                if (binder.IsLastBinderWithinMember())
                {
                    // Declarations within a member do not conflict with declarations outside.
                    return false;
                }
            } 675535" />
<Node Id="10313:[4060..5043).2" Label="for (Binder? binder = this; binder != null; binder = binder.Next)
            {
                // no local scopes enclose members
                if (binder is InContainerBinder)
                {
                    return false;
                }

                var scope = binder as LocalScopeBinder;
                if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)
                {
                    return true;
                }

                // If shadowing is enabled, avoid checking for conflicts outside of local functions or lambdas.
                if (allowShadowing && binder.IsNestedFunctionBinder)
                {
                    return false;
                }

                if (binder.IsLastBinderWithinMember())
                {
                    // Declarations within a member do not conflict with declarations outside.
                    return false;
                }
            } 675536" />
<Node Id="10313:[4210..4315).1" Label="if (binder is InContainerBinder)
                {
                    return false;
                } 675537" />
<Node Id="10313:[4335..4374).1" Label="var scope = binder as LocalScopeBinder; 675538" />
<Node Id="10313:[4392..4543).1" Label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)
                {
                    return true;
                } 675539" />
<Node Id="10313:[4392..4543).2" Label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)
                {
                    return true;
                } 675540" />
<Node Id="10313:[4698..4727).1" Label="binder.IsNestedFunctionBinder 675541" />
<Node Id="10286:[8381..8389).1" Label="=$ false 675542" />
<Node Id="10286:[8384..8389).1" Label="false 675543" />
<Node Id="10313:[4676..4801).1" Label="if (allowShadowing && binder.IsNestedFunctionBinder)
                {
                    return false;
                } 675544" />
<Node Id="10313:[4676..4801).2" Label="if (allowShadowing && binder.IsNestedFunctionBinder)
                {
                    return false;
                } 675545" />
<Node Id="10313:[4825..4858).1" Label="binder.IsLastBinderWithinMember() 675546" />
<Node Id="10313:[5095..5688).1" Label="param IsLastBinderWithinMember(this) 675547" />
<Node Id="10313:[5190..5219).1" Label="this.ContainingMemberOrLambda 675548" />
<Node Id="10307:[1439..1480).3" Label="get { return _containingMemberOrLambda; } 675549" />
<Node Id="10307:[1445..1478).3" Label="return _containingMemberOrLambda; 675550" />
<Node Id="10313:[5159..5220).1" Label="var containingMemberOrLambda = this.ContainingMemberOrLambda; 675551" />
<Node Id="10313:[5236..5677).1" Label="switch (containingMemberOrLambda?.Kind)
            {
                case null:
                case SymbolKind.NamedType:
                case SymbolKind.Namespace:
                    return true;
                default:
                    return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&
                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda;
            } 675552" />
<Node Id="10313:[5488..5662).1" Label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&
                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 675553" />
<Node Id="10313:[5608..5633).1" Label=".ContainingMemberOrLambda 675554" />
<Node Id="10346:[7562..7572).1" Label="_container 675555" />
<Node Id="10313:[5488..5662).2" Label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&
                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 675556" />
<Node Id="10313:[4821..5028).1" Label="if (binder.IsLastBinderWithinMember())
                {
                    // Declarations within a member do not conflict with declarations outside.
                    return false;
                } 675557" />
<Node Id="10313:[4996..5009).1" Label="return false; 675558" />
<Node Id="10313:[840..920).5" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675559" />
<Node Id="10313:[3507..3523).1" Label="tpNames?.Free(); 675560" />
<Node Id="10313:[3537..3552).1" Label="pNames?.Free(); 675561" />
<Node Id="10319:[20392..20435).1" Label="return bindPredefined(syntax, diagnostics); 675562" />
<Node Id="10319:[20392..20435).2" Label="return bindPredefined(syntax, diagnostics); 675563" />
<Node Id="10319:[20399..20434).1" Label="bindPredefined(syntax, diagnostics) 675564" />
<Node Id="10319:[27647..28051).1" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)
            {
                var predefinedType = (PredefinedTypeSyntax)syntax;
                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);
                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);
            } 675565" />
<Node Id="10319:[27647..28051).2" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)
            {
                var predefinedType = (PredefinedTypeSyntax)syntax;
                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);
                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);
            } 675566" />
<Node Id="10319:[27647..28051).3" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)
            {
                var predefinedType = (PredefinedTypeSyntax)syntax;
                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);
                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);
            } 675567" />
<Node Id="10319:[27790..27840).1" Label="var predefinedType = (PredefinedTypeSyntax)syntax; 675568" />
<Node Id="10319:[27858..27923).1" Label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 675569" />
<Node Id="10319:[27858..27923).2" Label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 675570" />
<Node Id="10319:[27869..27922).1" Label="BindPredefinedTypeSymbol(predefinedType, diagnostics) 675571" />
<Node Id="10319:[39111..39136).1" Label="param BindPredefinedTypeSymbol(PredefinedTypeSyntax node) 675572" />
<Node Id="10319:[39138..39163).1" Label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 675573" />
<Node Id="10319:[39062..39279).1" Label="param BindPredefinedTypeSymbol(this) 675574" />
<Node Id="10319:[39189..39268).1" Label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 675575" />
<Node Id="10319:[39189..39268).6" Label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 675576" />
<Node Id="10319:[39189..39268).7" Label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 675577" />
<Node Id="10319:[39196..39267).1" Label="GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node) 675578" />
<Node Id="10319:[73460..73478).1" Label="param GetSpecialType(SpecialType typeId) 675579" />
<Node Id="10319:[73480..73505).1" Label="param GetSpecialType(DiagnosticBag diagnostics) 675580" />
<Node Id="10319:[73507..73522).1" Label="param GetSpecialType(SyntaxNode node) 675581" />
<Node Id="10319:[73420..73626).1" Label="param GetSpecialType(this) 675582" />
<Node Id="10319:[73548..73615).1" Label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 675583" />
<Node Id="10319:[73548..73615).2" Label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 675584" />
<Node Id="10319:[73548..73615).3" Label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 675585" />
<Node Id="10319:[73548..73615).4" Label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 675586" />
<Node Id="10319:[73555..73614).1" Label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 675587" />
<Node Id="10319:[73685..73714).1" Label="param GetSpecialType(CSharpCompilation compilation) 675588" />
<Node Id="10319:[73716..73734).1" Label="param GetSpecialType(SpecialType typeId) 675589" />
<Node Id="10319:[73736..73751).1" Label="param GetSpecialType(SyntaxNode node) 675590" />
<Node Id="10319:[73753..73778).1" Label="param GetSpecialType(DiagnosticBag diagnostics) 675591" />
<Node Id="10319:[73804..73868).1" Label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 675592" />
<Node Id="10319:[73804..73868).2" Label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 675593" />
<Node Id="10319:[73882..73975).1" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 675594" />
<Node Id="10319:[73882..73975).2" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 675595" />
<Node Id="10319:[73989..74045).1" Label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 675596" />
<Node Id="10319:[73989..74045).2" Label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 675597" />
<Node Id="10319:[73989..74045).3" Label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 675598" />
<Node Id="10319:[73989..74044).1" Label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 675599" />
<Node Id="10319:[76345..76358).3" Label="param ReportUseSiteDiagnostics(Symbol symbol) 675600" />
<Node Id="10319:[76360..76385).3" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 675601" />
<Node Id="10319:[76387..76402).3" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 675602" />
<Node Id="10319:[76494..76582).9" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 675603" />
<Node Id="10319:[76494..76582).10" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 675604" />
<Node Id="10319:[74059..74077).1" Label="return typeSymbol; 675605" />
<Node Id="10319:[27941..28036).1" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 675606" />
<Node Id="10319:[27975..28028).1" Label="AreNullableAnnotationsEnabled(predefinedType.Keyword) 675607" />
<Node Id="10286:[10010..10027).3" Label="param AreNullableAnnotationsEnabled(SyntaxToken token) 675608" />
<Node Id="10286:[9966..10197).3" Label="param AreNullableAnnotationsEnabled(this) 675609" />
<Node Id="10319:[27941..28036).4" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 675610" />
<Node Id="10319:[28030..28034).1" Label="type 675611" />
<Node Id="10287:[2888..2927).1" Label="param operator(TypeWithAnnotations typeWithAnnotations) 675612" />
<Node Id="10287:[2961..3037).1" Label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 675613" />
<Node Id="10287:[2961..3037).2" Label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 675614" />
<Node Id="10287:[2968..3036).1" Label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 675615" />
<Node Id="10287:[718..757).2" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 675616" />
<Node Id="10287:[666..1076).2" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 675617" />
<Node Id="10287:[791..833).3" Label="Debug.Assert(typeWithAnnotations.HasType); 675618" />
<Node Id="10287:[912..927).2" Label="_symbol = null; 675619" />
<Node Id="10287:[912..919).2" Label="_symbol 675620" />
<Node Id="10287:[945..972).2" Label="_isNullableEnabled = false; 675621" />
<Node Id="10287:[945..963).2" Label="_isNullableEnabled 675622" />
<Node Id="10319:[27941..28036).5" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 675623" />
<Node Id="10319:[27941..28036).7" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 675624" />
<Node Id="10319:[27941..28036).9" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 675625" />
<Node Id="10286:[21504..21529).2" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 675626" />
<Node Id="10286:[21546..21561).2" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 675627" />
<Node Id="10286:[21563..21583).2" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675628" />
<Node Id="10286:[22044..22069).2" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 675629" />
<Node Id="10286:[22086..22108).2" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675630" />
<Node Id="10286:[22110..22130).2" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675631" />
<Node Id="10286:[22421..22557).13" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675632" />
<Node Id="10286:[22421..22557).14" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675633" />
<Node Id="10286:[15616..15690).6" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675634" />
<Node Id="10286:[15616..15690).7" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675635" />
<Node Id="10286:[15715..15910).2" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 675636" />
<Node Id="10286:[23056..23081).2" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 675637" />
<Node Id="10286:[23124..23146).2" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675638" />
<Node Id="10286:[23161..23181).2" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675639" />
<Node Id="10286:[23281..23301).2" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 675640" />
<Node Id="10286:[23380..23684).8" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 675641" />
<Node Id="10286:[23893..24026).3" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 675642" />
<Node Id="10286:[24545..24641).3" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 675643" />
<Node Id="10286:[24655..25349).2" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 675644" />
<Node Id="10286:[26910..26935).2" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 675645" />
<Node Id="10286:[26952..26974).2" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 675646" />
<Node Id="10286:[27002..27022).2" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 675647" />
<Node Id="10286:[27048..27088).5" Label="RoslynDebug.Assert(diagnostics != null); 675648" />
<Node Id="10286:[27048..27088).6" Label="RoslynDebug.Assert(diagnostics != null); 675649" />
<Node Id="10286:[27208..27236).3" Label="DiagnosticInfo? info = null; 675650" />
<Node Id="10286:[27250..27722).2" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 675651" />
<Node Id="10286:[27738..27845).4" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 675652" />
<Node Id="10286:[27738..27845).5" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 675653" />
<Node Id="10286:[27861..27873).2" Label="return kind; 675654" />
<Node Id="10286:[26281..26812).2" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 675655" />
<Node Id="10286:[26450..26769).2" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 675656" />
<Node Id="10287:[1680..1716).3" Label="=$ _symbol?.Kind == SymbolKind.Alias 675657" />
<Node Id="10287:[1683..1690).2" Label="_symbol 675658" />
<Node Id="10287:[1683..1716).5" Label="_symbol?.Kind == SymbolKind.Alias 675659" />
<Node Id="10319:[51935..52244).5" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 675660" />
<Node Id="10076:[5223..5250).10" Label="Debug.Assert(node != null); 675661" />
<Node Id="10077:[44231..44317).41" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 675662" />
<Node Id="10077:[44231..44317).49" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 675663" />
<Node Id="10077:[6212..6251).3" Label="SourceMemberMethodSymbol method = null; 675664" />
<Node Id="10077:[6275..6566).4" Label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    } 675665" />
<Node Id="10077:[6590..6839).3" Label="if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    } 675666" />
<Node Id="10286:[1688..1781).13" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 675667" />
<Node Id="10298:[471..492).32" Label="param Includes(this BinderFlags self) 675668" />
<Node Id="10286:[1820..1963).13" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 675669" />
<Node Id="10298:[471..492).33" Label="param Includes(this BinderFlags self) 675670" />
<Node Id="10313:[1494..2257).2" Label="if (!typeParameters.IsDefaultOrEmpty)
            {
                tpNames = PooledHashSet$string$.GetInstance();
                foreach (var tp in typeParameters)
                {
                    var name = tp.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (!tpNames.Add(name))
                    {
                        // Type parameter declaration name conflicts are detected elsewhere
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);
                    }
                }
            } 675671" />
<Node Id="10313:[3537..3552).2" Label="pNames?.Free(); 675672" />
<Node Id="10319:[39138..39163).2" Label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 675673" />
<Node Id="10319:[73480..73505).2" Label="param GetSpecialType(DiagnosticBag diagnostics) 675674" />
<Node Id="10319:[73507..73522).2" Label="param GetSpecialType(SyntaxNode node) 675675" />
<Node Id="10319:[73736..73751).2" Label="param GetSpecialType(SyntaxNode node) 675676" />
<Node Id="10319:[73753..73778).2" Label="param GetSpecialType(DiagnosticBag diagnostics) 675677" />
<Node Id="10319:[73882..73975).7" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 675678" />
<Node Id="10319:[76360..76385).4" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 675679" />
<Node Id="10319:[76387..76402).4" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 675680" />
<Node Id="10319:[76494..76582).13" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 675681" />
<Node Id="10287:[791..833).5" Label="Debug.Assert(typeWithAnnotations.HasType); 675682" />
<Node Id="10286:[21546..21561).3" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 675683" />
<Node Id="10286:[21563..21583).3" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675684" />
<Node Id="10286:[22044..22069).3" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 675685" />
<Node Id="10286:[22086..22108).3" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675686" />
<Node Id="10286:[22110..22130).3" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675687" />
<Node Id="10286:[15616..15690).11" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675688" />
<Node Id="10286:[15616..15690).12" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675689" />
<Node Id="10286:[15715..15910).3" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 675690" />
<Node Id="10286:[23056..23081).3" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 675691" />
<Node Id="10286:[23124..23146).3" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675692" />
<Node Id="10286:[23161..23181).3" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675693" />
<Node Id="10286:[23281..23301).3" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 675694" />
<Node Id="10286:[23380..23684).15" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 675695" />
<Node Id="10286:[23893..24026).5" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 675696" />
<Node Id="10286:[24545..24641).5" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 675697" />
<Node Id="10286:[24655..25349).3" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 675698" />
<Node Id="10286:[26910..26935).3" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 675699" />
<Node Id="10286:[26952..26974).3" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 675700" />
<Node Id="10286:[27002..27022).3" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 675701" />
<Node Id="10286:[27048..27088).9" Label="RoslynDebug.Assert(diagnostics != null); 675702" />
<Node Id="10286:[27048..27088).10" Label="RoslynDebug.Assert(diagnostics != null); 675703" />
<Node Id="10286:[27208..27236).5" Label="DiagnosticInfo? info = null; 675704" />
<Node Id="10286:[27250..27722).3" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 675705" />
<Node Id="10286:[27738..27845).7" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 675706" />
<Node Id="10286:[27738..27845).8" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 675707" />
<Node Id="10286:[27861..27873).3" Label="return kind; 675708" />
<Node Id="10286:[26281..26812).3" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 675709" />
<Node Id="10286:[26450..26769).3" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 675710" />
<Node Id="10287:[1680..1716).4" Label="=$ _symbol?.Kind == SymbolKind.Alias 675711" />
<Node Id="10287:[1683..1690).3" Label="_symbol 675712" />
<Node Id="10287:[1683..1716).7" Label="_symbol?.Kind == SymbolKind.Alias 675713" />
<Node Id="10319:[51935..52244).7" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 675714" />
<Node Id="10076:[5223..5250).14" Label="Debug.Assert(node != null); 675715" />
<Node Id="10077:[44231..44317).57" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 675716" />
<Node Id="10077:[44231..44317).65" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 675717" />
<Node Id="10077:[6212..6251).5" Label="SourceMemberMethodSymbol method = null; 675718" />
<Node Id="10077:[6275..6566).7" Label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    } 675719" />
<Node Id="10077:[6590..6839).5" Label="if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    } 675720" />
<Node Id="10286:[1688..1781).19" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 675721" />
<Node Id="10298:[471..492).35" Label="param Includes(this BinderFlags self) 675722" />
<Node Id="10286:[1820..1963).19" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 675723" />
<Node Id="10298:[471..492).36" Label="param Includes(this BinderFlags self) 675724" />
<Node Id="10319:[73480..73505).3" Label="param GetSpecialType(DiagnosticBag diagnostics) 675725" />
<Node Id="10319:[73507..73522).3" Label="param GetSpecialType(SyntaxNode node) 675726" />
<Node Id="10319:[73736..73751).3" Label="param GetSpecialType(SyntaxNode node) 675727" />
<Node Id="10319:[73753..73778).3" Label="param GetSpecialType(DiagnosticBag diagnostics) 675728" />
<Node Id="10319:[73882..73975).13" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 675729" />
<Node Id="10319:[76360..76385).5" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 675730" />
<Node Id="10319:[76387..76402).5" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 675731" />
<Node Id="10319:[76494..76582).17" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 675732" />
<Node Id="10287:[791..833).7" Label="Debug.Assert(typeWithAnnotations.HasType); 675733" />
<Node Id="10286:[21546..21561).4" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 675734" />
<Node Id="10286:[21563..21583).4" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675735" />
<Node Id="10286:[22086..22108).4" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675736" />
<Node Id="10286:[22110..22130).4" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675737" />
<Node Id="10286:[15616..15690).16" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675738" />
<Node Id="10286:[15616..15690).17" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675739" />
<Node Id="10286:[15715..15910).4" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 675740" />
<Node Id="10286:[23124..23146).4" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675741" />
<Node Id="10286:[23161..23181).4" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675742" />
<Node Id="10286:[23281..23301).4" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 675743" />
<Node Id="10286:[23380..23684).22" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 675744" />
<Node Id="10286:[23893..24026).7" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 675745" />
<Node Id="10286:[24545..24641).7" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 675746" />
<Node Id="10286:[24655..25349).4" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 675747" />
<Node Id="10286:[26910..26935).4" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 675748" />
<Node Id="10286:[26952..26974).4" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 675749" />
<Node Id="10286:[27002..27022).4" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 675750" />
<Node Id="10286:[27048..27088).13" Label="RoslynDebug.Assert(diagnostics != null); 675751" />
<Node Id="10286:[27048..27088).14" Label="RoslynDebug.Assert(diagnostics != null); 675752" />
<Node Id="10286:[27208..27236).7" Label="DiagnosticInfo? info = null; 675753" />
<Node Id="10286:[27250..27722).4" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 675754" />
<Node Id="10286:[27738..27845).10" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 675755" />
<Node Id="10286:[27738..27845).11" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 675756" />
<Node Id="10286:[27861..27873).4" Label="return kind; 675757" />
<Node Id="10286:[26281..26812).4" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 675758" />
<Node Id="10286:[26450..26769).4" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 675759" />
<Node Id="10287:[1680..1716).5" Label="=$ _symbol?.Kind == SymbolKind.Alias 675760" />
<Node Id="10287:[1683..1690).4" Label="_symbol 675761" />
<Node Id="10287:[1683..1716).9" Label="_symbol?.Kind == SymbolKind.Alias 675762" />
<Node Id="10319:[51935..52244).9" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 675763" />
<Node Id="10313:[1494..2257).3" Label="if (!typeParameters.IsDefaultOrEmpty)
            {
                tpNames = PooledHashSet$string$.GetInstance();
                foreach (var tp in typeParameters)
                {
                    var name = tp.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (!tpNames.Add(name))
                    {
                        // Type parameter declaration name conflicts are detected elsewhere
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);
                    }
                }
            } 675764" />
<Node Id="10313:[2563..2675).4" Label="if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    } 675765" />
<Node Id="10313:[2699..3019).5" Label="if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    } 675766" />
<Node Id="10313:[2699..3019).6" Label="if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    } 675767" />
<Node Id="10313:[3378..3434).5" Label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 675768" />
<Node Id="10313:[735..760).2" Label="param ValidateDeclarationNameConflictsInScope(DiagnosticBag diagnostics) 675769" />
<Node Id="10313:[840..920).7" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675770" />
<Node Id="10313:[840..920).10" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675771" />
<Node Id="10313:[3733..3747).2" Label="param ValidateNameConflictsInScope(Symbol? symbol) 675772" />
<Node Id="10313:[3749..3766).2" Label="param ValidateNameConflictsInScope(Location location) 675773" />
<Node Id="10313:[3768..3779).2" Label="param ValidateNameConflictsInScope(string name) 675774" />
<Node Id="10313:[3781..3806).2" Label="param ValidateNameConflictsInScope(DiagnosticBag diagnostics) 675775" />
<Node Id="10313:[3832..3924).4" Label="if (string.IsNullOrEmpty(name))
            {
                return false;
            } 675776" />
<Node Id="10313:[4210..4315).2" Label="if (binder is InContainerBinder)
                {
                    return false;
                } 675777" />
<Node Id="10313:[4335..4374).2" Label="var scope = binder as LocalScopeBinder; 675778" />
<Node Id="10313:[4392..4543).5" Label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)
                {
                    return true;
                } 675779" />
<Node Id="10313:[4392..4543).6" Label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)
                {
                    return true;
                } 675780" />
<Node Id="10313:[4698..4727).2" Label="binder.IsNestedFunctionBinder 675781" />
<Node Id="10286:[8381..8389).2" Label="=$ false 675782" />
<Node Id="10286:[8384..8389).3" Label="false 675783" />
<Node Id="10313:[4676..4801).4" Label="if (allowShadowing && binder.IsNestedFunctionBinder)
                {
                    return false;
                } 675784" />
<Node Id="10313:[5488..5662).6" Label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&
                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 675785" />
<Node Id="10313:[5488..5662).7" Label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&
                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 675786" />
<Node Id="10313:[4821..5028).3" Label="if (binder.IsLastBinderWithinMember())
                {
                    // Declarations within a member do not conflict with declarations outside.
                    return false;
                } 675787" />
<Node Id="10313:[4996..5009).3" Label="return false; 675788" />
<Node Id="10313:[840..920).11" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675789" />
<Node Id="10313:[3537..3552).3" Label="pNames?.Free(); 675790" />
<Node Id="10319:[73480..73505).4" Label="param GetSpecialType(DiagnosticBag diagnostics) 675791" />
<Node Id="10319:[73736..73751).4" Label="param GetSpecialType(SyntaxNode node) 675792" />
<Node Id="10319:[73753..73778).4" Label="param GetSpecialType(DiagnosticBag diagnostics) 675793" />
<Node Id="10319:[73882..73975).19" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 675794" />
<Node Id="10319:[76360..76385).6" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 675795" />
<Node Id="10319:[76387..76402).6" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 675796" />
<Node Id="10319:[76494..76582).21" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 675797" />
<Node Id="10287:[791..833).9" Label="Debug.Assert(typeWithAnnotations.HasType); 675798" />
<Node Id="10286:[21546..21561).5" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 675799" />
<Node Id="10286:[21563..21583).5" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675800" />
<Node Id="10286:[22086..22108).5" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675801" />
<Node Id="10286:[22110..22130).5" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675802" />
<Node Id="10286:[15616..15690).21" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675803" />
<Node Id="10286:[15616..15690).22" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675804" />
<Node Id="10286:[15715..15910).5" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 675805" />
<Node Id="10286:[23124..23146).5" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675806" />
<Node Id="10286:[23161..23181).5" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675807" />
<Node Id="10286:[23281..23301).5" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 675808" />
<Node Id="10286:[23380..23684).29" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 675809" />
<Node Id="10286:[23893..24026).9" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 675810" />
<Node Id="10286:[24545..24641).9" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 675811" />
<Node Id="10286:[24655..25349).5" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 675812" />
<Node Id="10286:[26910..26935).5" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 675813" />
<Node Id="10286:[26952..26974).5" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 675814" />
<Node Id="10286:[27002..27022).5" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 675815" />
<Node Id="10286:[27048..27088).17" Label="RoslynDebug.Assert(diagnostics != null); 675816" />
<Node Id="10286:[27048..27088).18" Label="RoslynDebug.Assert(diagnostics != null); 675817" />
<Node Id="10286:[27208..27236).9" Label="DiagnosticInfo? info = null; 675818" />
<Node Id="10286:[27250..27722).5" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 675819" />
<Node Id="10286:[27738..27845).13" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 675820" />
<Node Id="10286:[27738..27845).14" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 675821" />
<Node Id="10286:[27861..27873).5" Label="return kind; 675822" />
<Node Id="10286:[26281..26812).5" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 675823" />
<Node Id="10286:[26450..26769).5" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 675824" />
<Node Id="10287:[1680..1716).6" Label="=$ _symbol?.Kind == SymbolKind.Alias 675825" />
<Node Id="10287:[1683..1690).5" Label="_symbol 675826" />
<Node Id="10287:[1683..1716).11" Label="_symbol?.Kind == SymbolKind.Alias 675827" />
<Node Id="10319:[51935..52244).11" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 675828" />
<Node Id="10076:[5223..5250).18" Label="Debug.Assert(node != null); 675829" />
<Node Id="10077:[44231..44317).73" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 675830" />
<Node Id="10077:[44231..44317).81" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 675831" />
<Node Id="10077:[6212..6251).7" Label="SourceMemberMethodSymbol method = null; 675832" />
<Node Id="10077:[6275..6566).10" Label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    } 675833" />
<Node Id="10077:[6590..6839).7" Label="if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    } 675834" />
<Node Id="10286:[1688..1781).25" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 675835" />
<Node Id="10298:[471..492).38" Label="param Includes(this BinderFlags self) 675836" />
<Node Id="10286:[1820..1963).25" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 675837" />
<Node Id="10298:[471..492).39" Label="param Includes(this BinderFlags self) 675838" />
<Node Id="10319:[73736..73751).5" Label="param GetSpecialType(SyntaxNode node) 675839" />
<Node Id="10319:[73753..73778).5" Label="param GetSpecialType(DiagnosticBag diagnostics) 675840" />
<Node Id="10319:[73882..73975).25" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 675841" />
<Node Id="10319:[76360..76385).7" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 675842" />
<Node Id="10319:[76387..76402).7" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 675843" />
<Node Id="10319:[76494..76582).25" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 675844" />
<Node Id="10287:[791..833).11" Label="Debug.Assert(typeWithAnnotations.HasType); 675845" />
<Node Id="10286:[22421..22557).54" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675846" />
<Node Id="10286:[15616..15690).26" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675847" />
<Node Id="10286:[15616..15690).27" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675848" />
<Node Id="10286:[15715..15910).6" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 675849" />
<Node Id="10286:[23124..23146).6" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675850" />
<Node Id="10286:[23161..23181).6" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675851" />
<Node Id="10286:[23281..23301).6" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 675852" />
<Node Id="10286:[23380..23684).36" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 675853" />
<Node Id="10286:[23893..24026).11" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 675854" />
<Node Id="10286:[24545..24641).11" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 675855" />
<Node Id="10286:[24655..25349).6" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 675856" />
<Node Id="10286:[26910..26935).6" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 675857" />
<Node Id="10286:[26952..26974).6" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 675858" />
<Node Id="10286:[27002..27022).6" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 675859" />
<Node Id="10286:[27048..27088).21" Label="RoslynDebug.Assert(diagnostics != null); 675860" />
<Node Id="10286:[27048..27088).22" Label="RoslynDebug.Assert(diagnostics != null); 675861" />
<Node Id="10286:[27208..27236).11" Label="DiagnosticInfo? info = null; 675862" />
<Node Id="10286:[27250..27722).6" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 675863" />
<Node Id="10286:[27738..27845).16" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 675864" />
<Node Id="10286:[27738..27845).17" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 675865" />
<Node Id="10286:[27861..27873).6" Label="return kind; 675866" />
<Node Id="10286:[26281..26812).6" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 675867" />
<Node Id="10286:[26450..26769).6" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 675868" />
<Node Id="10313:[1494..2257).4" Label="if (!typeParameters.IsDefaultOrEmpty)
            {
                tpNames = PooledHashSet$string$.GetInstance();
                foreach (var tp in typeParameters)
                {
                    var name = tp.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (!tpNames.Add(name))
                    {
                        // Type parameter declaration name conflicts are detected elsewhere
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);
                    }
                }
            } 675869" />
<Node Id="10313:[2563..2675).7" Label="if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    } 675870" />
<Node Id="10313:[2699..3019).9" Label="if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    } 675871" />
<Node Id="10313:[2699..3019).10" Label="if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    } 675872" />
<Node Id="10313:[3378..3434).8" Label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 675873" />
<Node Id="10313:[735..760).3" Label="param ValidateDeclarationNameConflictsInScope(DiagnosticBag diagnostics) 675874" />
<Node Id="10313:[840..920).13" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675875" />
<Node Id="10313:[840..920).16" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675876" />
<Node Id="10313:[3733..3747).3" Label="param ValidateNameConflictsInScope(Symbol? symbol) 675877" />
<Node Id="10313:[3749..3766).3" Label="param ValidateNameConflictsInScope(Location location) 675878" />
<Node Id="10313:[3768..3779).3" Label="param ValidateNameConflictsInScope(string name) 675879" />
<Node Id="10313:[3781..3806).3" Label="param ValidateNameConflictsInScope(DiagnosticBag diagnostics) 675880" />
<Node Id="10313:[3832..3924).7" Label="if (string.IsNullOrEmpty(name))
            {
                return false;
            } 675881" />
<Node Id="10313:[4210..4315).3" Label="if (binder is InContainerBinder)
                {
                    return false;
                } 675882" />
<Node Id="10313:[4335..4374).3" Label="var scope = binder as LocalScopeBinder; 675883" />
<Node Id="10313:[4392..4543).9" Label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)
                {
                    return true;
                } 675884" />
<Node Id="10313:[4392..4543).10" Label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)
                {
                    return true;
                } 675885" />
<Node Id="10313:[4698..4727).3" Label="binder.IsNestedFunctionBinder 675886" />
<Node Id="10286:[8381..8389).3" Label="=$ false 675887" />
<Node Id="10286:[8384..8389).5" Label="false 675888" />
<Node Id="10313:[4676..4801).7" Label="if (allowShadowing && binder.IsNestedFunctionBinder)
                {
                    return false;
                } 675889" />
<Node Id="10313:[5488..5662).11" Label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&
                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 675890" />
<Node Id="10313:[5488..5662).12" Label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&
                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 675891" />
<Node Id="10313:[4821..5028).5" Label="if (binder.IsLastBinderWithinMember())
                {
                    // Declarations within a member do not conflict with declarations outside.
                    return false;
                } 675892" />
<Node Id="10313:[4996..5009).5" Label="return false; 675893" />
<Node Id="10313:[840..920).17" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675894" />
<Node Id="10313:[3537..3552).4" Label="pNames?.Free(); 675895" />
<Node Id="10319:[73736..73751).6" Label="param GetSpecialType(SyntaxNode node) 675896" />
<Node Id="10319:[73753..73778).6" Label="param GetSpecialType(DiagnosticBag diagnostics) 675897" />
<Node Id="10319:[73882..73975).31" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 675898" />
<Node Id="10319:[76360..76385).8" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 675899" />
<Node Id="10319:[76387..76402).8" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 675900" />
<Node Id="10319:[76494..76582).29" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 675901" />
<Node Id="10287:[791..833).13" Label="Debug.Assert(typeWithAnnotations.HasType); 675902" />
<Node Id="10286:[21563..21583).7" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675903" />
<Node Id="10286:[22086..22108).7" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675904" />
<Node Id="10286:[22110..22130).7" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675905" />
<Node Id="10286:[15616..15690).32" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675906" />
<Node Id="10286:[23124..23146).7" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675907" />
<Node Id="10286:[23161..23181).7" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675908" />
<Node Id="10286:[23281..23301).7" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 675909" />
<Node Id="10286:[24545..24641).13" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 675910" />
<Node Id="10286:[24655..25349).7" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 675911" />
<Node Id="10286:[26910..26935).7" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 675912" />
<Node Id="10286:[26952..26974).7" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 675913" />
<Node Id="10286:[27002..27022).7" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 675914" />
<Node Id="10286:[27048..27088).26" Label="RoslynDebug.Assert(diagnostics != null); 675915" />
<Node Id="10286:[27250..27722).7" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 675916" />
<Node Id="10286:[27861..27873).7" Label="return kind; 675917" />
<Node Id="10286:[26281..26812).7" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 675918" />
<Node Id="10286:[26450..26769).7" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 675919" />
<Node Id="10287:[1680..1716).8" Label="=$ _symbol?.Kind == SymbolKind.Alias 675920" />
<Node Id="10287:[1683..1690).7" Label="_symbol 675921" />
<Node Id="10287:[1683..1716).15" Label="_symbol?.Kind == SymbolKind.Alias 675922" />
<Node Id="10319:[51935..52244).15" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 675923" />
<Node Id="10076:[5223..5250).22" Label="Debug.Assert(node != null); 675924" />
<Node Id="10077:[44231..44317).89" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 675925" />
<Node Id="10077:[44231..44317).97" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 675926" />
<Node Id="10077:[6212..6251).9" Label="SourceMemberMethodSymbol method = null; 675927" />
<Node Id="10077:[6275..6566).13" Label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    } 675928" />
<Node Id="10077:[6590..6839).9" Label="if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    } 675929" />
<Node Id="10286:[1688..1781).31" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 675930" />
<Node Id="10298:[471..492).41" Label="param Includes(this BinderFlags self) 675931" />
<Node Id="10286:[1820..1963).31" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 675932" />
<Node Id="10298:[471..492).42" Label="param Includes(this BinderFlags self) 675933" />
<Node Id="10319:[73736..73751).7" Label="param GetSpecialType(SyntaxNode node) 675934" />
<Node Id="10319:[73753..73778).7" Label="param GetSpecialType(DiagnosticBag diagnostics) 675935" />
<Node Id="10319:[73882..73975).37" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 675936" />
<Node Id="10319:[76360..76385).9" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 675937" />
<Node Id="10319:[76387..76402).9" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 675938" />
<Node Id="10319:[76494..76582).33" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 675939" />
<Node Id="10287:[791..833).15" Label="Debug.Assert(typeWithAnnotations.HasType); 675940" />
<Node Id="10286:[21563..21583).8" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675941" />
<Node Id="10286:[22110..22130).8" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675942" />
<Node Id="10286:[15616..15690).36" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675943" />
<Node Id="10286:[15616..15690).37" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675944" />
<Node Id="10286:[15715..15910).8" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 675945" />
<Node Id="10286:[23124..23146).8" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675946" />
<Node Id="10286:[23161..23181).8" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675947" />
<Node Id="10286:[23281..23301).8" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 675948" />
<Node Id="10286:[23380..23684).50" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 675949" />
<Node Id="10286:[23893..24026).15" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 675950" />
<Node Id="10286:[24545..24641).15" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 675951" />
<Node Id="10286:[24655..25349).8" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 675952" />
<Node Id="10286:[26910..26935).8" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 675953" />
<Node Id="10286:[26952..26974).8" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 675954" />
<Node Id="10286:[27002..27022).8" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 675955" />
<Node Id="10286:[27048..27088).29" Label="RoslynDebug.Assert(diagnostics != null); 675956" />
<Node Id="10286:[27048..27088).30" Label="RoslynDebug.Assert(diagnostics != null); 675957" />
<Node Id="10286:[27208..27236).15" Label="DiagnosticInfo? info = null; 675958" />
<Node Id="10286:[27250..27722).8" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 675959" />
<Node Id="10286:[27738..27845).22" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 675960" />
<Node Id="10286:[27738..27845).23" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 675961" />
<Node Id="10286:[27861..27873).8" Label="return kind; 675962" />
<Node Id="10286:[26281..26812).8" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 675963" />
<Node Id="10286:[26450..26769).8" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 675964" />
<Node Id="10287:[1680..1716).9" Label="=$ _symbol?.Kind == SymbolKind.Alias 675965" />
<Node Id="10287:[1683..1690).8" Label="_symbol 675966" />
<Node Id="10287:[1683..1716).17" Label="_symbol?.Kind == SymbolKind.Alias 675967" />
<Node Id="10319:[51935..52244).17" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 675968" />
<Node Id="10319:[73736..73751).8" Label="param GetSpecialType(SyntaxNode node) 675969" />
<Node Id="10319:[73753..73778).8" Label="param GetSpecialType(DiagnosticBag diagnostics) 675970" />
<Node Id="10319:[73882..73975).43" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 675971" />
<Node Id="10319:[76360..76385).10" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 675972" />
<Node Id="10319:[76387..76402).10" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 675973" />
<Node Id="10319:[76494..76582).37" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 675974" />
<Node Id="10287:[791..833).17" Label="Debug.Assert(typeWithAnnotations.HasType); 675975" />
<Node Id="10286:[21563..21583).9" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675976" />
<Node Id="10286:[22110..22130).9" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675977" />
<Node Id="10286:[15616..15690).41" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675978" />
<Node Id="10286:[15616..15690).42" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675979" />
<Node Id="10286:[15715..15910).9" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 675980" />
<Node Id="10286:[23161..23181).9" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675981" />
<Node Id="10286:[23281..23301).9" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 675982" />
<Node Id="10286:[23380..23684).57" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 675983" />
<Node Id="10286:[23893..24026).17" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 675984" />
<Node Id="10286:[24545..24641).17" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 675985" />
<Node Id="10286:[24655..25349).9" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 675986" />
<Node Id="10286:[26910..26935).9" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 675987" />
<Node Id="10286:[26952..26974).9" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 675988" />
<Node Id="10286:[27002..27022).9" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 675989" />
<Node Id="10286:[27048..27088).33" Label="RoslynDebug.Assert(diagnostics != null); 675990" />
<Node Id="10286:[27048..27088).34" Label="RoslynDebug.Assert(diagnostics != null); 675991" />
<Node Id="10286:[27208..27236).17" Label="DiagnosticInfo? info = null; 675992" />
<Node Id="10286:[27250..27722).9" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 675993" />
<Node Id="10286:[27738..27845).25" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 675994" />
<Node Id="10286:[27738..27845).26" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 675995" />
<Node Id="10286:[27861..27873).9" Label="return kind; 675996" />
<Node Id="10286:[26281..26812).9" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 675997" />
<Node Id="10286:[26450..26769).9" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 675998" />
<Node Id="10287:[1680..1716).10" Label="=$ _symbol?.Kind == SymbolKind.Alias 675999" />
<Node Id="10287:[1683..1690).9" Label="_symbol 676000" />
<Node Id="10287:[1683..1716).19" Label="_symbol?.Kind == SymbolKind.Alias 676001" />
<Node Id="10319:[51935..52244).19" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 676002" />
<Node Id="10313:[1494..2257).5" Label="if (!typeParameters.IsDefaultOrEmpty)
            {
                tpNames = PooledHashSet$string$.GetInstance();
                foreach (var tp in typeParameters)
                {
                    var name = tp.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (!tpNames.Add(name))
                    {
                        // Type parameter declaration name conflicts are detected elsewhere
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);
                    }
                }
            } 676003" />
<Node Id="10313:[2563..2675).10" Label="if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    } 676004" />
<Node Id="10313:[2699..3019).13" Label="if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    } 676005" />
<Node Id="10313:[2699..3019).14" Label="if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    } 676006" />
<Node Id="10313:[3378..3434).11" Label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 676007" />
<Node Id="10313:[735..760).4" Label="param ValidateDeclarationNameConflictsInScope(DiagnosticBag diagnostics) 676008" />
<Node Id="10313:[840..920).19" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 676009" />
<Node Id="10313:[840..920).22" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 676010" />
<Node Id="10313:[3733..3747).4" Label="param ValidateNameConflictsInScope(Symbol? symbol) 676011" />
<Node Id="10313:[3749..3766).4" Label="param ValidateNameConflictsInScope(Location location) 676012" />
<Node Id="10313:[3768..3779).4" Label="param ValidateNameConflictsInScope(string name) 676013" />
<Node Id="10313:[3781..3806).4" Label="param ValidateNameConflictsInScope(DiagnosticBag diagnostics) 676014" />
<Node Id="10313:[3832..3924).10" Label="if (string.IsNullOrEmpty(name))
            {
                return false;
            } 676015" />
<Node Id="10313:[4210..4315).4" Label="if (binder is InContainerBinder)
                {
                    return false;
                } 676016" />
<Node Id="10313:[4335..4374).4" Label="var scope = binder as LocalScopeBinder; 676017" />
<Node Id="10313:[4392..4543).13" Label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)
                {
                    return true;
                } 676018" />
<Node Id="10313:[4392..4543).14" Label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)
                {
                    return true;
                } 676019" />
<Node Id="10313:[4698..4727).4" Label="binder.IsNestedFunctionBinder 676020" />
<Node Id="10286:[8381..8389).4" Label="=$ false 676021" />
<Node Id="10286:[8384..8389).7" Label="false 676022" />
<Node Id="10313:[4676..4801).10" Label="if (allowShadowing && binder.IsNestedFunctionBinder)
                {
                    return false;
                } 676023" />
<Node Id="10313:[5488..5662).16" Label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&
                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 676024" />
<Node Id="10313:[5488..5662).17" Label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&
                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 676025" />
<Node Id="10313:[4821..5028).7" Label="if (binder.IsLastBinderWithinMember())
                {
                    // Declarations within a member do not conflict with declarations outside.
                    return false;
                } 676026" />
<Node Id="10313:[4996..5009).7" Label="return false; 676027" />
<Node Id="10313:[840..920).23" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 676028" />
<Node Id="10313:[3537..3552).5" Label="pNames?.Free(); 676029" />
<Node Id="10319:[76494..76582).42" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 676030" />
<Node Id="10287:[791..833).19" Label="Debug.Assert(typeWithAnnotations.HasType); 676031" />
<Node Id="10286:[21563..21583).10" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 676032" />
<Node Id="10286:[22110..22130).10" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 676033" />
<Node Id="10286:[15616..15690).46" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 676034" />
<Node Id="10286:[15616..15690).47" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 676035" />
<Node Id="10286:[15715..15910).10" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 676036" />
<Node Id="10286:[23161..23181).10" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 676037" />
<Node Id="10286:[23281..23301).10" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 676038" />
<Node Id="10286:[23380..23684).64" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 676039" />
<Node Id="10286:[23893..24026).19" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 676040" />
<Node Id="10286:[24545..24641).19" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 676041" />
<Node Id="10286:[24655..25349).10" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 676042" />
<Node Id="10286:[26910..26935).10" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 676043" />
<Node Id="10286:[26952..26974).10" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 676044" />
<Node Id="10286:[27002..27022).10" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 676045" />
<Node Id="10286:[27048..27088).37" Label="RoslynDebug.Assert(diagnostics != null); 676046" />
<Node Id="10286:[27048..27088).38" Label="RoslynDebug.Assert(diagnostics != null); 676047" />
<Node Id="10286:[27208..27236).19" Label="DiagnosticInfo? info = null; 676048" />
<Node Id="10286:[27250..27722).10" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 676049" />
<Node Id="10286:[27738..27845).28" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 676050" />
<Node Id="10286:[27738..27845).29" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 676051" />
<Node Id="10286:[27861..27873).10" Label="return kind; 676052" />
<Node Id="10286:[26281..26812).10" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 676053" />
<Node Id="10286:[26450..26769).10" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 676054" />
<Node Id="10287:[1680..1716).11" Label="=$ _symbol?.Kind == SymbolKind.Alias 676055" />
<Node Id="10287:[1683..1690).10" Label="_symbol 676056" />
<Node Id="10287:[1683..1716).21" Label="_symbol?.Kind == SymbolKind.Alias 676057" />
<Node Id="10319:[51935..52244).21" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 676058" />
<Node Id="10076:[5223..5250).26" Label="Debug.Assert(node != null); 676059" />
<Node Id="10077:[44231..44317).105" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 676060" />
<Node Id="10077:[44231..44317).113" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 676061" />
<Node Id="10077:[6212..6251).11" Label="SourceMemberMethodSymbol method = null; 676062" />
<Node Id="10077:[6275..6566).16" Label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    } 676063" />
<Node Id="10077:[6590..6839).11" Label="if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    } 676064" />
<Node Id="10286:[1688..1781).37" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 676065" />
<Node Id="10298:[471..492).44" Label="param Includes(this BinderFlags self) 676066" />
<Node Id="10286:[1820..1963).37" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 676067" />
<Node Id="10298:[471..492).45" Label="param Includes(this BinderFlags self) 676068" />
<Node Id="10319:[20745..20878).1" Label="return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null); 676069" />
<Node Id="10319:[20745..20878).2" Label="return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null); 676070" />
<Node Id="10319:[20745..20878).3" Label="return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null); 676071" />
<Node Id="10319:[20745..20878).4" Label="return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null); 676072" />
<Node Id="10319:[20752..20877).1" Label="BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null) 676073" />
<Node Id="10319:[54444..54466).1" Label="param BindGenericSimpleNamespaceOrTypeOrAliasSymbol(GenericNameSyntax node) 676074" />
<Node Id="10319:[54481..54506).1" Label="param BindGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 676075" />
<Node Id="10319:[54521..54560).1" Label="param BindGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 676076" />
<Node Id="10319:[54575..54609).1" Label="param BindGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 676077" />
<Node Id="10319:[54356..60744).1" Label="param BindGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 676078" />
<Node Id="10319:[57602..57644).1" Label="var plainName = node.Identifier.ValueText; 676079" />
<Node Id="10319:[57660..57740).1" Label="SeparatedSyntaxList$TypeSyntax$ typeArguments = node.TypeArgumentList.Arguments; 676080" />
<Node Id="10319:[57756..57807).1" Label="bool isUnboundTypeExpr = node.IsUnboundGenericName; 676081" />
<Node Id="10319:[57821..57907).1" Label="LookupOptions options = GetSimpleNameLookupOptions(node, isVerbatimIdentifier: false); 676082" />
<Node Id="10319:[57821..57907).2" Label="LookupOptions options = GetSimpleNameLookupOptions(node, isVerbatimIdentifier: false); 676083" />
<Node Id="10319:[57845..57906).1" Label="GetSimpleNameLookupOptions(node, isVerbatimIdentifier: false) 676084" />
<Node Id="10319:[50313..50328).3" Label="param GetSimpleNameLookupOptions(NameSyntax node) 676085" />
<Node Id="10319:[50330..50355).3" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 676086" />
<Node Id="10319:[57923..58084).1" Label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(
                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 676087" />
<Node Id="10319:[57923..58084).2" Label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(
                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 676088" />
<Node Id="10319:[57923..58084).3" Label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(
                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 676089" />
<Node Id="10319:[57923..58084).4" Label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(
                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 676090" />
<Node Id="10319:[57923..58084).5" Label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(
                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 676091" />
<Node Id="10319:[57923..58084).6" Label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(
                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 676092" />
<Node Id="10319:[57923..58084).7" Label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(
                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 676093" />
<Node Id="10319:[57959..58083).1" Label="LookupGenericTypeName(
                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options) 676094" />
<Node Id="10319:[60816..60841).1" Label="param LookupGenericTypeName(DiagnosticBag diagnostics) 676095" />
<Node Id="10319:[60856..60895).1" Label="param LookupGenericTypeName(ConsList$TypeSymbol$ basesBeingResolved) 676096" />
<Node Id="10319:[60910..60944).1" Label="param LookupGenericTypeName(NamespaceOrTypeSymbol qualifierOpt) 676097" />
<Node Id="10319:[60959..60981).1" Label="param LookupGenericTypeName(GenericNameSyntax node) 676098" />
<Node Id="10319:[60996..61012).1" Label="param LookupGenericTypeName(string plainName) 676099" />
<Node Id="10319:[61027..61036).1" Label="param LookupGenericTypeName(int arity) 676100" />
<Node Id="10319:[61051..61072).1" Label="param LookupGenericTypeName(LookupOptions options) 676101" />
<Node Id="10319:[60756..63756).1" Label="param LookupGenericTypeName(this) 676102" />
<Node Id="10319:[61098..61209).1" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 676103" />
<Node Id="10319:[61098..61209).2" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 676104" />
<Node Id="10319:[61098..61209).3" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 676105" />
<Node Id="10319:[61098..61209).4" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 676106" />
<Node Id="10319:[61098..61209).5" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 676107" />
<Node Id="10319:[61116..61208).1" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics) 676108" />
<Node Id="10319:[63849..63870).3" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 676109" />
<Node Id="10319:[63885..63919).3" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 676110" />
<Node Id="10319:[63934..63945).3" Label="param CreateErrorIfLookupOnTypeParameter(string name) 676111" />
<Node Id="10319:[63960..63969).3" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 676112" />
<Node Id="10319:[63984..64009).3" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 676113" />
<Node Id="10319:[63768..64484).3" Label="param CreateErrorIfLookupOnTypeParameter(this) 676114" />
<Node Id="10319:[64035..64445).9" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 676115" />
<Node Id="10319:[64035..64445).10" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 676116" />
<Node Id="10319:[64461..64473).5" Label="return null; 676117" />
<Node Id="10319:[61098..61209).6" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 676118" />
<Node Id="10319:[61223..61322).1" Label="if ((object)errorResult != null)
            {
                return errorResult;
            } 676119" />
<Node Id="10319:[61223..61322).2" Label="if ((object)errorResult != null)
            {
                return errorResult;
            } 676120" />
<Node Id="10319:[61357..61383).1" Label="LookupResult.GetInstance() 676121" />
<Node Id="10354:[11244..11285).15" Label="var instance = s_poolInstance.Allocate(); 676122" />
<Node Id="10354:[11312..11328).4" Label="instance.IsClear 676123" />
<Node Id="10354:[3684..3818).14" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 676124" />
<Node Id="10354:[3720..3803).97" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676125" />
<Node Id="10354:[3720..3803).98" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676126" />
<Node Id="10354:[3720..3803).99" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676127" />
<Node Id="10354:[11299..11330).10" Label="Debug.Assert(instance.IsClear); 676128" />
<Node Id="10319:[61338..61384).1" Label="var lookupResult = LookupResult.GetInstance(); 676129" />
<Node Id="10319:[61398..61448).1" Label="HashSet$DiagnosticInfo$ useSiteDiagnostics = null; 676130" />
<Node Id="10319:[61462..61626).1" Label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 676131" />
<Node Id="10319:[61462..61626).2" Label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 676132" />
<Node Id="10319:[61462..61626).3" Label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 676133" />
<Node Id="10319:[61462..61626).4" Label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 676134" />
<Node Id="10319:[61462..61626).5" Label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 676135" />
<Node Id="10319:[61462..61626).6" Label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 676136" />
<Node Id="10319:[61462..61626).7" Label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 676137" />
<Node Id="10319:[61462..61626).9" Label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 676138" />
<Node Id="10319:[61462..61625).1" Label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 676139" />
<Node Id="10312:[994..1013).3" Label="param LookupSymbolsSimpleName(LookupResult result) 676140" />
<Node Id="10312:[1028..1062).3" Label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 676141" />
<Node Id="10312:[1077..1093).3" Label="param LookupSymbolsSimpleName(string plainName) 676142" />
<Node Id="10312:[1108..1117).3" Label="param LookupSymbolsSimpleName(int arity) 676143" />
<Node Id="10312:[1132..1171).3" Label="param LookupSymbolsSimpleName(ConsList$TypeSymbol$ basesBeingResolved) 676144" />
<Node Id="10312:[1186..1207).3" Label="param LookupSymbolsSimpleName(LookupOptions options) 676145" />
<Node Id="10312:[1222..1235).3" Label="param LookupSymbolsSimpleName(bool diagnose) 676146" />
<Node Id="10312:[1250..1296).3" Label="param LookupSymbolsSimpleName(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 676147" />
<Node Id="10312:[942..1750).3" Label="param LookupSymbolsSimpleName(this) 676148" />
<Node Id="10312:[1585..1724).19" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676149" />
<Node Id="10312:[1585..1724).20" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676150" />
<Node Id="10312:[1585..1724).21" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676151" />
<Node Id="10312:[1585..1724).22" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676152" />
<Node Id="10312:[1585..1724).23" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676153" />
<Node Id="10312:[1585..1724).25" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676154" />
<Node Id="10312:[1585..1724).26" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676155" />
<Node Id="10312:[5944..5957).3" Label="param LookupSymbolsOrMembersInternal(bool diagnose) 676156" />
<Node Id="10312:[5663..6444).3" Label="param LookupSymbolsOrMembersInternal(this) 676157" />
<Node Id="10312:[6110..6221).17" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676158" />
<Node Id="10312:[6110..6221).18" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676159" />
<Node Id="10312:[6110..6221).19" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676160" />
<Node Id="10312:[6110..6221).20" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676161" />
<Node Id="10312:[6110..6221).22" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676162" />
<Node Id="10312:[6110..6221).23" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676163" />
<Node Id="10312:[3730..3739).3" Label="param LookupSymbolsInternal(int arity) 676164" />
<Node Id="10312:[3805..3818).3" Label="param LookupSymbolsInternal(bool diagnose) 676165" />
<Node Id="10312:[3645..5112).3" Label="param LookupSymbolsInternal(this) 676166" />
<Node Id="10312:[3905..3919).3" Label="result.IsClear 676167" />
<Node Id="10354:[3684..3818).15" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 676168" />
<Node Id="10354:[3720..3803).105" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676169" />
<Node Id="10354:[3720..3803).106" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676170" />
<Node Id="10354:[3720..3803).107" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676171" />
<Node Id="10312:[3892..3921).7" Label="Debug.Assert(result.IsClear); 676172" />
<Node Id="10312:[3935..3968).9" Label="Debug.Assert(options.AreValid()); 676173" />
<Node Id="10312:[3948..3966).3" Label="options.AreValid() 676174" />
<Node Id="10353:[4698..4724).6" Label="param AreValid(this LookupOptions options) 676175" />
<Node Id="10353:[4750..4847).11" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 676176" />
<Node Id="10353:[4863..5000).21" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 676177" />
<Node Id="10353:[4863..5000).22" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 676178" />
<Node Id="10353:[5079..5183).11" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 676179" />
<Node Id="10353:[5197..5323).16" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 676180" />
<Node Id="10353:[5485..5759).31" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 676181" />
<Node Id="10353:[5485..5759).32" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 676182" />
<Node Id="10353:[5485..5759).33" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 676183" />
<Node Id="10353:[5775..5979).21" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 676184" />
<Node Id="10353:[5775..5979).23" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 676185" />
<Node Id="10353:[5995..6029).16" Label="return OnlyOneBitSet(onlyOptions); 676186" />
<Node Id="10353:[6002..6028).6" Label="OnlyOneBitSet(onlyOptions) 676187" />
<Node Id="10353:[6343..6358).6" Label="param OnlyOneBitSet(LookupOptions o) 676188" />
<Node Id="10353:[6384..6410).31" Label="return (o & (o - 1)) == 0; 676189" />
<Node Id="10353:[6384..6410).32" Label="return (o & (o - 1)) == 0; 676190" />
<Node Id="10312:[4019..5073).47" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 676191" />
<Node Id="10312:[4534..4658).47" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 676192" />
<Node Id="10312:[4534..4658).48" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 676193" />
<Node Id="10312:[4534..4658).49" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 676194" />
<Node Id="10312:[4534..4658).52" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 676195" />
<Node Id="10312:[4534..4658).53" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 676196" />
<Node Id="10312:[5188..5207).3" Label="param LookupSymbolsInSingleBinder(LookupResult result) 676197" />
<Node Id="10312:[5209..5220).3" Label="param LookupSymbolsInSingleBinder(string name) 676198" />
<Node Id="10312:[5222..5231).3" Label="param LookupSymbolsInSingleBinder(int arity) 676199" />
<Node Id="10312:[5233..5272).3" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 676200" />
<Node Id="10312:[5274..5295).3" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 676201" />
<Node Id="10312:[5297..5318).3" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 676202" />
<Node Id="10312:[5320..5333).3" Label="param LookupSymbolsInSingleBinder(bool diagnose) 676203" />
<Node Id="10312:[5124..5404).3" Label="param LookupSymbolsInSingleBinder(this) 676204" />
<Node Id="10312:[4685..4699).6" Label="result.IsClear 676205" />
<Node Id="10354:[3684..3818).16" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 676206" />
<Node Id="10354:[3720..3803).113" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676207" />
<Node Id="10354:[3720..3803).114" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676208" />
<Node Id="10354:[3720..3803).115" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676209" />
<Node Id="10312:[4680..4787).11" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 676210" />
<Node Id="10312:[4826..5058).26" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 676211" />
<Node Id="10312:[4826..5058).27" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 676212" />
<Node Id="10346:[10663..10672).4" Label="param LookupSymbolsInSingleBinder(int arity) 676213" />
<Node Id="10346:[10761..10774).4" Label="param LookupSymbolsInSingleBinder(bool diagnose) 676214" />
<Node Id="10346:[10861..10875).4" Label="result.IsClear 676215" />
<Node Id="10354:[3684..3818).17" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 676216" />
<Node Id="10354:[3720..3803).121" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676217" />
<Node Id="10354:[3720..3803).122" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676218" />
<Node Id="10354:[3720..3803).123" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676219" />
<Node Id="10346:[10848..10877).10" Label="Debug.Assert(result.IsClear); 676220" />
<Node Id="10346:[10897..10914).4" Label="IsSubmissionClass 676221" />
<Node Id="10346:[7666..7775).4" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 676222" />
<Node Id="10346:[7672..7773).10" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 676223" />
<Node Id="10346:[10893..11127).7" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 676224" />
<Node Id="10346:[3525..3638).31" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 676225" />
<Node Id="10312:[7718..7727).4" Label="param LookupMembersInternal(int arity) 676226" />
<Node Id="10312:[7816..7829).4" Label="param LookupMembersInternal(bool diagnose) 676227" />
<Node Id="10312:[7903..7936).13" Label="Debug.Assert(options.AreValid()); 676228" />
<Node Id="10312:[7916..7934).4" Label="options.AreValid() 676229" />
<Node Id="10353:[4698..4724).7" Label="param AreValid(this LookupOptions options) 676230" />
<Node Id="10353:[4750..4847).13" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 676231" />
<Node Id="10353:[4863..5000).25" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 676232" />
<Node Id="10353:[4863..5000).26" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 676233" />
<Node Id="10353:[5079..5183).13" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 676234" />
<Node Id="10353:[5197..5323).19" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 676235" />
<Node Id="10353:[5485..5759).37" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 676236" />
<Node Id="10353:[5485..5759).38" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 676237" />
<Node Id="10353:[5485..5759).39" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 676238" />
<Node Id="10353:[5775..5979).25" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 676239" />
<Node Id="10353:[5775..5979).27" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 676240" />
<Node Id="10353:[5995..6029).19" Label="return OnlyOneBitSet(onlyOptions); 676241" />
<Node Id="10353:[6002..6028).7" Label="OnlyOneBitSet(onlyOptions) 676242" />
<Node Id="10353:[6343..6358).7" Label="param OnlyOneBitSet(LookupOptions o) 676243" />
<Node Id="10353:[6384..6410).37" Label="return (o & (o - 1)) == 0; 676244" />
<Node Id="10353:[6384..6410).38" Label="return (o & (o - 1)) == 0; 676245" />
<Node Id="10312:[7952..7977).13" Label="Debug.Assert(arity $= 0); 676246" />
<Node Id="10312:[7952..7977).14" Label="Debug.Assert(arity $= 0); 676247" />
<Node Id="10312:[8594..8603).2" Label="param LookupMembersInType(int arity) 676248" />
<Node Id="10312:[8669..8690).2" Label="param LookupMembersInType(Binder originalBinder) 676249" />
<Node Id="10312:[8692..8705).2" Label="param LookupMembersInType(bool diagnose) 676250" />
<Node Id="10312:[34797..34806).2" Label="param LookupMembersInClass(int arity) 676251" />
<Node Id="10312:[34911..34932).2" Label="param LookupMembersInClass(Binder originalBinder) 676252" />
<Node Id="10312:[34947..34960).2" Label="param LookupMembersInClass(bool diagnose) 676253" />
<Node Id="10312:[35403..35412).2" Label="param LookupMembersInClass(int arity) 676254" />
<Node Id="10312:[35517..35538).2" Label="param LookupMembersInClass(Binder originalBinder) 676255" />
<Node Id="10312:[35553..35581).2" Label="param LookupMembersInClass(TypeSymbol accessThroughType) 676256" />
<Node Id="10312:[35596..35609).2" Label="param LookupMembersInClass(bool diagnose) 676257" />
<Node Id="10312:[35696..35731).5" Label="Debug.Assert((object)type != null); 676258" />
<Node Id="10354:[11312..11328).5" Label="instance.IsClear 676259" />
<Node Id="10354:[3684..3818).18" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 676260" />
<Node Id="10354:[3720..3803).129" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676261" />
<Node Id="10354:[3720..3803).130" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676262" />
<Node Id="10354:[3720..3803).131" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676263" />
<Node Id="10354:[11299..11330).13" Label="Debug.Assert(instance.IsClear); 676264" />
<Node Id="10312:[36067..36079).3" Label="tmp.Clear(); 676265" />
<Node Id="10312:[33656..33675).3" Label="param LookupMembersWithoutInheritance(LookupResult result) 676266" />
<Node Id="10312:[33707..33716).3" Label="param LookupMembersWithoutInheritance(int arity) 676267" />
<Node Id="10312:[33754..33775).3" Label="param LookupMembersWithoutInheritance(Binder originalBinder) 676268" />
<Node Id="10312:[33777..33805).3" Label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 676269" />
<Node Id="10312:[33807..33820).3" Label="param LookupMembersWithoutInheritance(bool diagnose) 676270" />
<Node Id="10312:[33870..33909).3" Label="param LookupMembersWithoutInheritance(ConsList$TypeSymbol$ basesBeingResolved) 676271" />
<Node Id="10312:[61608..61629).5" Label="param GetCandidateMembers(Binder originalBinder) 676272" />
<Node Id="10312:[34022..34574).7" Label="foreach (Symbol member in members)
            {
                // Do we need to exclude override members, or is that done later by overload resolution. It seems like
                // not excluding them here can't lead to problems, because we will always find the overridden method as well.
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                result.MergeEqual(resultOfThisMember);
            } 676273" />
<Node Id="10312:[36278..36360).25" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 676274" />
<Node Id="10354:[9012..9030).3" Label="param MergePrioritized(LookupResult other) 676275" />
<Node Id="10354:[8981..9152).3" Label="param MergePrioritized(this) 676276" />
<Node Id="10354:[9060..9070).3" Label="other.Kind 676277" />
<Node Id="10354:[4058..4122).33" Label="get
            {
                return _kind;
            } 676278" />
<Node Id="10354:[9056..9141).9" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 676279" />
<Node Id="10354:[9073..9077).3" Label="Kind 676280" />
<Node Id="10354:[4058..4122).34" Label="get
            {
                return _kind;
            } 676281" />
<Node Id="10354:[9056..9141).10" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 676282" />
<Node Id="10354:[9056..9141).11" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 676283" />
<Node Id="10312:[36566..36625).3" Label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 676284" />
<Node Id="10312:[36643..36855).7" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 676285" />
<Node Id="10312:[36643..36855).8" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 676286" />
<Node Id="10312:[37061..37078).3" Label="tmp.IsMultiViable 676287" />
<Node Id="10354:[4094..4107).35" Label="return _kind; 676288" />
<Node Id="10312:[37029..37117).7" Label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 676289" />
<Node Id="10312:[37258..37278).3" Label="result.IsMultiViable 676290" />
<Node Id="10354:[4094..4107).36" Label="return _kind; 676291" />
<Node Id="10312:[37254..37416).7" Label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                } 676292" />
<Node Id="10312:[37436..37988).9" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 676293" />
<Node Id="10312:[37436..37988).10" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 676294" />
<Node Id="10312:[38290..38338).3" Label="originalBinder.InCrefButNotParameterOrReturnType 676295" />
<Node Id="10306:[3345..3430).3" Label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 676296" />
<Node Id="10306:[3358..3364).3" Label="InCref 676297" />
<Node Id="10306:[3196..3249).11" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 676298" />
<Node Id="10306:[3202..3247).41" Label="return this.Flags.Includes(BinderFlags.Cref); 676299" />
<Node Id="10306:[3351..3428).7" Label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 676300" />
<Node Id="10312:[38286..38405).5" Label="if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                } 676301" />
<Node Id="10312:[36067..36079).4" Label="tmp.Clear(); 676302" />
<Node Id="10312:[36097..36258).37" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676303" />
<Node Id="10312:[36097..36258).39" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676304" />
<Node Id="10312:[36097..36258).40" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676305" />
<Node Id="10312:[36097..36258).41" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676306" />
<Node Id="10312:[33656..33675).4" Label="param LookupMembersWithoutInheritance(LookupResult result) 676307" />
<Node Id="10312:[33707..33716).4" Label="param LookupMembersWithoutInheritance(int arity) 676308" />
<Node Id="10312:[33754..33775).4" Label="param LookupMembersWithoutInheritance(Binder originalBinder) 676309" />
<Node Id="10312:[33777..33805).4" Label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 676310" />
<Node Id="10312:[33807..33820).4" Label="param LookupMembersWithoutInheritance(bool diagnose) 676311" />
<Node Id="10312:[33870..33909).4" Label="param LookupMembersWithoutInheritance(ConsList$TypeSymbol$ basesBeingResolved) 676312" />
<Node Id="10312:[61608..61629).6" Label="param GetCandidateMembers(Binder originalBinder) 676313" />
<Node Id="10312:[34022..34574).10" Label="foreach (Symbol member in members)
            {
                // Do we need to exclude override members, or is that done later by overload resolution. It seems like
                // not excluding them here can't lead to problems, because we will always find the overridden method as well.
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                result.MergeEqual(resultOfThisMember);
            } 676314" />
<Node Id="10354:[9012..9030).4" Label="param MergePrioritized(LookupResult other) 676315" />
<Node Id="10354:[8981..9152).4" Label="param MergePrioritized(this) 676316" />
<Node Id="10354:[9060..9070).4" Label="other.Kind 676317" />
<Node Id="10354:[4058..4122).38" Label="get
            {
                return _kind;
            } 676318" />
<Node Id="10354:[9056..9141).13" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 676319" />
<Node Id="10354:[9073..9077).4" Label="Kind 676320" />
<Node Id="10354:[4058..4122).39" Label="get
            {
                return _kind;
            } 676321" />
<Node Id="10354:[9056..9141).14" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 676322" />
<Node Id="10354:[9056..9141).15" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 676323" />
<Node Id="10312:[36566..36625).4" Label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 676324" />
<Node Id="10312:[36643..36855).10" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 676325" />
<Node Id="10312:[36643..36855).11" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 676326" />
<Node Id="10312:[37061..37078).4" Label="tmp.IsMultiViable 676327" />
<Node Id="10312:[37029..37117).10" Label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 676328" />
<Node Id="10312:[37258..37278).4" Label="result.IsMultiViable 676329" />
<Node Id="10312:[37254..37416).10" Label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                } 676330" />
<Node Id="10312:[37436..37988).13" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 676331" />
<Node Id="10312:[38290..38338).4" Label="originalBinder.InCrefButNotParameterOrReturnType 676332" />
<Node Id="10306:[3345..3430).4" Label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 676333" />
<Node Id="10306:[3358..3364).4" Label="InCref 676334" />
<Node Id="10306:[3196..3249).12" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 676335" />
<Node Id="10306:[3351..3428).10" Label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 676336" />
<Node Id="10312:[38286..38405).7" Label="if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                } 676337" />
<Node Id="10312:[38756..38772).2" Label="visited?.Free(); 676338" />
<Node Id="10354:[11428..11441).4" Label="this.Clear(); 676339" />
<Node Id="10312:[38786..38797).2" Label="tmp.Free(); 676340" />
<Node Id="10345:[29004..29025).2" Label="param LookupSymbol(Binder originalBinder) 676341" />
<Node Id="10345:[29100..29109).2" Label="param LookupSymbol(int arity) 676342" />
<Node Id="10345:[29124..29163).2" Label="param LookupSymbol(ConsList$TypeSymbol$ basesBeingResolved) 676343" />
<Node Id="10345:[29214..29227).2" Label="param LookupSymbol(bool diagnose) 676344" />
<Node Id="10345:[29788..29809).2" Label="param LookupSymbolInAliases(Binder originalBinder) 676345" />
<Node Id="10345:[29824..29843).2" Label="param LookupSymbolInAliases(LookupResult result) 676346" />
<Node Id="10345:[29884..29893).2" Label="param LookupSymbolInAliases(int arity) 676347" />
<Node Id="10345:[29908..29947).2" Label="param LookupSymbolInAliases(ConsList$TypeSymbol$ basesBeingResolved) 676348" />
<Node Id="10345:[29962..29983).2" Label="param LookupSymbolInAliases(LookupOptions options) 676349" />
<Node Id="10345:[29998..30011).2" Label="param LookupSymbolInAliases(bool diagnose) 676350" />
<Node Id="10345:[30127..30163).2" Label="originalBinder.IsSemanticModelBinder 676351" />
<Node Id="10286:[2155..2260).5" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 676352" />
<Node Id="10286:[2191..2245).17" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 676353" />
<Node Id="10286:[2191..2245).18" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 676354" />
<Node Id="10286:[2198..2244).5" Label="this.Flags.Includes(BinderFlags.SemanticModel) 676355" />
<Node Id="10298:[471..492).48" Label="param Includes(this BinderFlags self) 676356" />
<Node Id="10298:[494..511).48" Label="param Includes(BinderFlags other) 676357" />
<Node Id="10345:[30098..30164).3" Label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 676358" />
<Node Id="10345:[30883..31655).4" Label="foreach (var a in this.ExternAliases)
            {
                if (a.Alias.Name == name)
                {
                    // Found a match in our list of extern aliases.  Mark the extern alias as being
                    // seen so that it won't be reported to the user as something that can be
                    // removed.
                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 676359" />
<Node Id="10345:[29566..29700).12" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676360" />
<Node Id="10345:[29566..29700).15" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676361" />
<Node Id="10345:[29566..29700).16" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676362" />
<Node Id="10345:[29566..29700).18" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676363" />
<Node Id="10345:[31734..31789).2" Label="param LookupSymbolInUsings(ImmutableArray$NamespaceOrTypeAndUsingDirective$ usings) 676364" />
<Node Id="10345:[31804..31825).2" Label="param LookupSymbolInUsings(Binder originalBinder) 676365" />
<Node Id="10345:[31840..31859).2" Label="param LookupSymbolInUsings(LookupResult result) 676366" />
<Node Id="10345:[31874..31885).2" Label="param LookupSymbolInUsings(string name) 676367" />
<Node Id="10345:[31900..31909).2" Label="param LookupSymbolInUsings(int arity) 676368" />
<Node Id="10345:[31924..31963).2" Label="param LookupSymbolInUsings(ConsList$TypeSymbol$ basesBeingResolved) 676369" />
<Node Id="10345:[31978..31999).2" Label="param LookupSymbolInUsings(LookupOptions options) 676370" />
<Node Id="10345:[32014..32027).2" Label="param LookupSymbolInUsings(bool diagnose) 676371" />
<Node Id="10345:[32114..32230).5" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 676372" />
<Node Id="10345:[32114..32230).6" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 676373" />
<Node Id="10345:[32118..32174).2" Label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 676374" />
<Node Id="10298:[471..492).49" Label="param Includes(this BinderFlags self) 676375" />
<Node Id="10298:[494..511).49" Label="param Includes(BinderFlags other) 676376" />
<Node Id="10345:[32275..32311).2" Label="originalBinder.IsSemanticModelBinder 676377" />
<Node Id="10286:[2155..2260).6" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 676378" />
<Node Id="10286:[2191..2245).21" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 676379" />
<Node Id="10286:[2191..2245).22" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 676380" />
<Node Id="10286:[2198..2244).6" Label="this.Flags.Includes(BinderFlags.SemanticModel) 676381" />
<Node Id="10298:[471..492).50" Label="param Includes(this BinderFlags self) 676382" />
<Node Id="10298:[494..511).50" Label="param Includes(BinderFlags other) 676383" />
<Node Id="10345:[32246..32312).3" Label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 676384" />
<Node Id="10345:[32328..33465).4" Label="foreach (var typeOrNamespace in usings)
            {
                ImmutableArray$Symbol$ candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);
                foreach (Symbol symbol in candidates)
                {
                    if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    }

                    // Found a match in our list of normal using directives.  Mark the directive
                    // as being seen so that it won't be reported to the user as something that
                    // can be removed.
                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 676385" />
<Node Id="10354:[3720..3803).137" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676386" />
<Node Id="10354:[3720..3803).139" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676387" />
<Node Id="10312:[4680..4787).13" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 676388" />
<Node Id="10312:[4534..4658).66" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 676389" />
<Node Id="10312:[4534..4658).70" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 676390" />
<Node Id="10346:[10663..10672).5" Label="param LookupSymbolsInSingleBinder(int arity) 676391" />
<Node Id="10346:[10761..10774).5" Label="param LookupSymbolsInSingleBinder(bool diagnose) 676392" />
<Node Id="10346:[10861..10875).5" Label="result.IsClear 676393" />
<Node Id="10354:[3684..3818).20" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 676394" />
<Node Id="10354:[3720..3803).145" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676395" />
<Node Id="10354:[3720..3803).146" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676396" />
<Node Id="10354:[3720..3803).147" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676397" />
<Node Id="10346:[10848..10877).13" Label="Debug.Assert(result.IsClear); 676398" />
<Node Id="10346:[10897..10914).5" Label="IsSubmissionClass 676399" />
<Node Id="10346:[7666..7775).5" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 676400" />
<Node Id="10346:[7672..7773).13" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 676401" />
<Node Id="10346:[10893..11127).9" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 676402" />
<Node Id="10346:[3525..3638).38" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 676403" />
<Node Id="10312:[7718..7727).5" Label="param LookupMembersInternal(int arity) 676404" />
<Node Id="10312:[7816..7829).5" Label="param LookupMembersInternal(bool diagnose) 676405" />
<Node Id="10312:[7903..7936).17" Label="Debug.Assert(options.AreValid()); 676406" />
<Node Id="10312:[7916..7934).5" Label="options.AreValid() 676407" />
<Node Id="10353:[4698..4724).8" Label="param AreValid(this LookupOptions options) 676408" />
<Node Id="10353:[4750..4847).15" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 676409" />
<Node Id="10353:[4863..5000).29" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 676410" />
<Node Id="10353:[4863..5000).30" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 676411" />
<Node Id="10353:[5079..5183).15" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 676412" />
<Node Id="10353:[5197..5323).22" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 676413" />
<Node Id="10353:[5485..5759).43" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 676414" />
<Node Id="10353:[5485..5759).44" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 676415" />
<Node Id="10353:[5485..5759).45" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 676416" />
<Node Id="10353:[5775..5979).29" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 676417" />
<Node Id="10353:[5775..5979).31" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 676418" />
<Node Id="10353:[5995..6029).22" Label="return OnlyOneBitSet(onlyOptions); 676419" />
<Node Id="10353:[6002..6028).8" Label="OnlyOneBitSet(onlyOptions) 676420" />
<Node Id="10353:[6343..6358).8" Label="param OnlyOneBitSet(LookupOptions o) 676421" />
<Node Id="10353:[6384..6410).43" Label="return (o & (o - 1)) == 0; 676422" />
<Node Id="10353:[6384..6410).44" Label="return (o & (o - 1)) == 0; 676423" />
<Node Id="10312:[7952..7977).17" Label="Debug.Assert(arity $= 0); 676424" />
<Node Id="10312:[7952..7977).18" Label="Debug.Assert(arity $= 0); 676425" />
<Node Id="10312:[19030..19039).3" Label="param LookupMembersInNamespace(int arity) 676426" />
<Node Id="10312:[19087..19100).3" Label="param LookupMembersInNamespace(bool diagnose) 676427" />
<Node Id="10312:[61608..61629).7" Label="param GetCandidateMembers(Binder originalBinder) 676428" />
<Node Id="10345:[29004..29025).3" Label="param LookupSymbol(Binder originalBinder) 676429" />
<Node Id="10345:[29100..29109).3" Label="param LookupSymbol(int arity) 676430" />
<Node Id="10345:[29124..29163).3" Label="param LookupSymbol(ConsList$TypeSymbol$ basesBeingResolved) 676431" />
<Node Id="10345:[29214..29227).3" Label="param LookupSymbol(bool diagnose) 676432" />
<Node Id="10345:[29788..29809).3" Label="param LookupSymbolInAliases(Binder originalBinder) 676433" />
<Node Id="10345:[29824..29843).3" Label="param LookupSymbolInAliases(LookupResult result) 676434" />
<Node Id="10345:[29884..29893).3" Label="param LookupSymbolInAliases(int arity) 676435" />
<Node Id="10345:[29908..29947).3" Label="param LookupSymbolInAliases(ConsList$TypeSymbol$ basesBeingResolved) 676436" />
<Node Id="10345:[29962..29983).3" Label="param LookupSymbolInAliases(LookupOptions options) 676437" />
<Node Id="10345:[29998..30011).3" Label="param LookupSymbolInAliases(bool diagnose) 676438" />
<Node Id="10345:[30127..30163).3" Label="originalBinder.IsSemanticModelBinder 676439" />
<Node Id="10286:[2155..2260).7" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 676440" />
<Node Id="10286:[2191..2245).25" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 676441" />
<Node Id="10286:[2191..2245).26" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 676442" />
<Node Id="10286:[2198..2244).7" Label="this.Flags.Includes(BinderFlags.SemanticModel) 676443" />
<Node Id="10298:[471..492).51" Label="param Includes(this BinderFlags self) 676444" />
<Node Id="10298:[494..511).51" Label="param Includes(BinderFlags other) 676445" />
<Node Id="10345:[30098..30164).5" Label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 676446" />
<Node Id="10345:[30883..31655).7" Label="foreach (var a in this.ExternAliases)
            {
                if (a.Alias.Name == name)
                {
                    // Found a match in our list of extern aliases.  Mark the extern alias as being
                    // seen so that it won't be reported to the user as something that can be
                    // removed.
                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 676447" />
<Node Id="10354:[4094..4107).46" Label="return _kind; 676448" />
<Node Id="10345:[29566..29700).25" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676449" />
<Node Id="10345:[29566..29700).26" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676450" />
<Node Id="10345:[29566..29700).28" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676451" />
<Node Id="10345:[31734..31789).3" Label="param LookupSymbolInUsings(ImmutableArray$NamespaceOrTypeAndUsingDirective$ usings) 676452" />
<Node Id="10345:[31804..31825).3" Label="param LookupSymbolInUsings(Binder originalBinder) 676453" />
<Node Id="10345:[31840..31859).3" Label="param LookupSymbolInUsings(LookupResult result) 676454" />
<Node Id="10345:[31874..31885).3" Label="param LookupSymbolInUsings(string name) 676455" />
<Node Id="10345:[31900..31909).3" Label="param LookupSymbolInUsings(int arity) 676456" />
<Node Id="10345:[31924..31963).3" Label="param LookupSymbolInUsings(ConsList$TypeSymbol$ basesBeingResolved) 676457" />
<Node Id="10345:[31978..31999).3" Label="param LookupSymbolInUsings(LookupOptions options) 676458" />
<Node Id="10345:[32014..32027).3" Label="param LookupSymbolInUsings(bool diagnose) 676459" />
<Node Id="10345:[32114..32230).9" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 676460" />
<Node Id="10345:[32114..32230).10" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 676461" />
<Node Id="10345:[32118..32174).3" Label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 676462" />
<Node Id="10298:[471..492).52" Label="param Includes(this BinderFlags self) 676463" />
<Node Id="10298:[494..511).52" Label="param Includes(BinderFlags other) 676464" />
<Node Id="10345:[32275..32311).3" Label="originalBinder.IsSemanticModelBinder 676465" />
<Node Id="10286:[2155..2260).8" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 676466" />
<Node Id="10286:[2191..2245).29" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 676467" />
<Node Id="10286:[2191..2245).30" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 676468" />
<Node Id="10286:[2198..2244).8" Label="this.Flags.Includes(BinderFlags.SemanticModel) 676469" />
<Node Id="10298:[471..492).53" Label="param Includes(this BinderFlags self) 676470" />
<Node Id="10298:[494..511).53" Label="param Includes(BinderFlags other) 676471" />
<Node Id="10345:[32246..32312).5" Label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 676472" />
<Node Id="10345:[32328..33465).7" Label="foreach (var typeOrNamespace in usings)
            {
                ImmutableArray$Symbol$ candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);
                foreach (Symbol symbol in candidates)
                {
                    if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    }

                    // Found a match in our list of normal using directives.  Mark the directive
                    // as being seen so that it won't be reported to the user as something that
                    // can be removed.
                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 676473" />
<Node Id="10345:[32400..32543).1" Label="ImmutableArray$Symbol$ candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder); 676474" />
<Node Id="10345:[32400..32543).2" Label="ImmutableArray$Symbol$ candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder); 676475" />
<Node Id="10345:[32400..32543).3" Label="ImmutableArray$Symbol$ candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder); 676476" />
<Node Id="10345:[32400..32543).4" Label="ImmutableArray$Symbol$ candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder); 676477" />
<Node Id="10345:[32436..32542).1" Label="Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder) 676478" />
<Node Id="10312:[61540..61570).8" Label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 676479" />
<Node Id="10312:[61572..61583).8" Label="param GetCandidateMembers(string name) 676480" />
<Node Id="10312:[61585..61606).8" Label="param GetCandidateMembers(LookupOptions options) 676481" />
<Node Id="10312:[61608..61629).8" Label="param GetCandidateMembers(Binder originalBinder) 676482" />
<Node Id="10312:[62279..62312).10" Label="return nsOrType.GetMembers(name); 676483" />
<Node Id="10345:[32561..33450).1" Label="foreach (Symbol symbol in candidates)
                {
                    if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    }

                    // Found a match in our list of normal using directives.  Mark the directive
                    // as being seen so that it won't be reported to the user as something that
                    // can be removed.
                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                } 676484" />
<Node Id="10345:[32639..32764).1" Label="if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    } 676485" />
<Node Id="10345:[32644..32682).1" Label="IsValidLookupCandidateInUsings(symbol) 676486" />
<Node Id="10345:[33539..33552).1" Label="param IsValidLookupCandidateInUsings(Symbol symbol) 676487" />
<Node Id="10345:[33578..34640).1" Label="switch (symbol.Kind)
            {
                // lookup via 'using namespace' ignores namespaces inside
                case SymbolKind.Namespace:
                    return false;

                // lookup via 'using static' ignores extension methods and non-static methods
                case SymbolKind.Method:
                    if (!symbol.IsStatic || ((MethodSymbol)symbol).IsExtensionMethod)
                    {
                        return false;
                    }

                    break;

                // types are considered static members for purposes of 'using static' feature
                // regardless of whether they are declared with 'static' modifier or not
                case SymbolKind.NamedType:
                    break;

                // lookup via 'using static' ignores non-static members
                default:
                    if (!symbol.IsStatic)
                    {
                        return false;
                    }

                    break;
            } 676488" />
<Node Id="10345:[34656..34668).1" Label="return true; 676489" />
<Node Id="10345:[32639..32764).2" Label="if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    } 676490" />
<Node Id="10345:[33023..33147).1" Label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676491" />
<Node Id="10345:[33023..33147).2" Label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676492" />
<Node Id="10345:[33023..33147).3" Label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676493" />
<Node Id="10345:[33023..33147).6" Label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676494" />
<Node Id="10345:[33023..33147).7" Label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676495" />
<Node Id="10345:[33023..33147).8" Label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676496" />
<Node Id="10345:[33033..33146).1" Label="originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved) 676497" />
<Node Id="10312:[63424..63437).3" Label="param CheckViability(Symbol symbol) 676498" />
<Node Id="10312:[63439..63448).3" Label="param CheckViability(int arity) 676499" />
<Node Id="10312:[63450..63471).3" Label="param CheckViability(LookupOptions options) 676500" />
<Node Id="10312:[63473..63501).3" Label="param CheckViability(TypeSymbol accessThroughType) 676501" />
<Node Id="10312:[63503..63516).3" Label="param CheckViability(bool diagnose) 676502" />
<Node Id="10312:[63518..63564).3" Label="param CheckViability(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 676503" />
<Node Id="10312:[63566..63612).3" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 676504" />
<Node Id="10312:[63381..70761).3" Label="param CheckViability(this) 676505" />
<Node Id="10312:[63638..63668).3" Label="bool inaccessibleViaQualifier; 676506" />
<Node Id="10312:[64121..69285).12" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 676507" />
<Node Id="10312:[64353..69285).16" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 676508" />
<Node Id="10312:[64353..69285).17" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 676509" />
<Node Id="10312:[80978..80991).3" Label="param WrongArity(Symbol symbol) 676510" />
<Node Id="10312:[80993..81002).3" Label="param WrongArity(int arity) 676511" />
<Node Id="10312:[81004..81017).3" Label="param WrongArity(bool diagnose) 676512" />
<Node Id="10312:[81019..81040).3" Label="param WrongArity(LookupOptions options) 676513" />
<Node Id="10312:[81042..81069).3" Label="param WrongArity(out DiagnosticInfo diagInfo) 676514" />
<Node Id="10312:[81095..84034).3" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 676515" />
<Node Id="10312:[81196..82523).8" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 676516" />
<Node Id="10312:[81196..82523).9" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 676517" />
<Node Id="10312:[81319..81371).2" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 676518" />
<Node Id="10312:[81495..81570).6" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 676519" />
<Node Id="10312:[81495..81570).7" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 676520" />
<Node Id="10312:[81596..82500).7" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 676521" />
<Node Id="10312:[81596..82500).8" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 676522" />
<Node Id="10312:[81628..81659).2" Label="options.IsAttributeTypeLookup() 676523" />
<Node Id="10353:[7504..7530).5" Label="param IsAttributeTypeLookup(this LookupOptions options) 676524" />
<Node Id="10312:[81596..82500).11" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 676525" />
<Node Id="10312:[84050..84066).5" Label="diagInfo = null; 676526" />
<Node Id="10312:[66177..69285).28" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 676527" />
<Node Id="10312:[66291..66342).3" Label="RefineAccessThroughType(options, accessThroughType) 676528" />
<Node Id="10312:[75301..75322).3" Label="param RefineAccessThroughType(LookupOptions options) 676529" />
<Node Id="10312:[75324..75352).3" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 676530" />
<Node Id="10312:[75735..75866).11" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 676531" />
<Node Id="10312:[75735..75866).12" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 676532" />
<Node Id="10312:[75742..75804).3" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 676533" />
<Node Id="10312:[75735..75866).14" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 676534" />
<Node Id="10312:[66177..69285).31" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 676535" />
<Node Id="10312:[66177..69285).33" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 676536" />
<Node Id="10312:[77543..77571).3" Label="param IsAccessible(TypeSymbol accessThroughType) 676537" />
<Node Id="10312:[77573..77604).3" Label="param IsAccessible(out bool failedThroughTypeCheck) 676538" />
<Node Id="10312:[77654..77700).3" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 676539" />
<Node Id="10312:[77726..77892).9" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 676540" />
<Node Id="10312:[77726..77892).10" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 676541" />
<Node Id="10312:[77730..77782).3" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 676542" />
<Node Id="10298:[471..492).57" Label="param Includes(this BinderFlags self) 676543" />
<Node Id="10298:[494..511).57" Label="param Includes(BinderFlags other) 676544" />
<Node Id="10312:[78402..78430).3" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 676545" />
<Node Id="10312:[78432..78463).3" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 676546" />
<Node Id="10312:[78513..78552).3" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 676547" />
<Node Id="10346:[8034..8062).3" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 676548" />
<Node Id="10346:[8064..8095).3" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 676549" />
<Node Id="10346:[8145..8184).3" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 676550" />
<Node Id="10286:[30135..30160).2" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 676551" />
<Node Id="10286:[30175..30206).2" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 676552" />
<Node Id="10286:[30283..30330).2" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 676553" />
<Node Id="10286:[30012..30691).2" Label="param IsSymbolAccessibleConditional(this) 676554" />
<Node Id="10286:[30356..30522).5" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 676555" />
<Node Id="10286:[30356..30522).6" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 676556" />
<Node Id="10286:[30360..30412).2" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 676557" />
<Node Id="10298:[471..492).58" Label="param Includes(this BinderFlags self) 676558" />
<Node Id="10298:[494..511).58" Label="param Includes(BinderFlags other) 676559" />
<Node Id="10060:[2173..2198).2" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 676560" />
<Node Id="10060:[2213..2244).2" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 676561" />
<Node Id="10060:[2320..2366).2" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 676562" />
<Node Id="10060:[5691..5716).3" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 676563" />
<Node Id="10060:[5731..5762).3" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 676564" />
<Node Id="10060:[5777..5806).3" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 676565" />
<Node Id="10060:[5882..5928).3" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 676566" />
<Node Id="10060:[5954..5991).9" Label="Debug.Assert((object)symbol != null); 676567" />
<Node Id="10060:[6005..6042).9" Label="Debug.Assert((object)within != null); 676568" />
<Node Id="10060:[6056..6090).5" Label="Debug.Assert(within.IsDefinition); 676569" />
<Node Id="10060:[6104..6172).7" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 676570" />
<Node Id="10060:[6188..6219).5" Label="failedThroughTypeCheck = false; 676571" />
<Node Id="10060:[10265..10311).2" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 676572" />
<Node Id="10060:[10337..10405).4" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 676573" />
<Node Id="10060:[10419..10454).5" Label="Debug.Assert((object)type != null); 676574" />
<Node Id="10060:[10470..10516).2" Label="var compilation = within.DeclaringCompilation; 676575" />
<Node Id="10060:[10532..10544).2" Label="bool unused; 676576" />
<Node Id="10060:[10558..11295).2" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 676577" />
<Node Id="10060:[12117..12185).4" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 676578" />
<Node Id="10060:[12199..12238).5" Label="Debug.Assert((object)assembly != null); 676579" />
<Node Id="10060:[12494..12506).1" Label="return true; 676580" />
<Node Id="10345:[33169..33384).1" Label="if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);
                    } 676581" />
<Node Id="10345:[33258..33361).1" Label="MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel); 676582" />
<Node Id="10345:[33258..33361).2" Label="MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel); 676583" />
<Node Id="10345:[33258..33361).3" Label="MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel); 676584" />
<Node Id="10345:[33258..33360).1" Label="MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel) 676585" />
<Node Id="10345:[24115..24144).1" Label="param MarkImportDirective(CSharpCompilation compilation) 676586" />
<Node Id="10345:[24146..24172).1" Label="param MarkImportDirective(CSharpSyntaxNode directive) 676587" />
<Node Id="10345:[24174..24200).1" Label="param MarkImportDirective(bool callerIsSemanticModel) 676588" />
<Node Id="10345:[24226..24260).1" Label="Debug.Assert(compilation != null); 676589" />
<Node Id="10345:[24226..24260).2" Label="Debug.Assert(compilation != null); 676590" />
<Node Id="10345:[24339..24484).1" Label="if (directive != null && !callerIsSemanticModel)
            {
                compilation.MarkImportDirectiveAsUsed(directive);
            } 676591" />
<Node Id="10345:[24339..24484).2" Label="if (directive != null && !callerIsSemanticModel)
            {
                compilation.MarkImportDirectiveAsUsed(directive);
            } 676592" />
<Node Id="10345:[24339..24484).3" Label="if (directive != null && !callerIsSemanticModel)
            {
                compilation.MarkImportDirectiveAsUsed(directive);
            } 676593" />
<Node Id="10345:[24420..24469).1" Label="compilation.MarkImportDirectiveAsUsed(directive); 676594" />
<Node Id="10345:[24420..24469).2" Label="compilation.MarkImportDirectiveAsUsed(directive); 676595" />
<Node Id="10345:[33258..33361).4" Label="MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel); 676596" />
<Node Id="10345:[33408..33431).1" Label="result.MergeEqual(res); 676597" />
<Node Id="10345:[33408..33430).1" Label="result.MergeEqual(res) 676598" />
<Node Id="10354:[10217..10242).3" Label="param MergeEqual(SingleLookupResult result) 676599" />
<Node Id="10354:[10192..10676).3" Label="param MergeEqual(this) 676600" />
<Node Id="10354:[4094..4107).47" Label="return _kind; 676601" />
<Node Id="10354:[10268..10665).8" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 676602" />
<Node Id="10345:[33408..33431).2" Label="result.MergeEqual(res); 676603" />
<Node Id="10345:[32639..32764).4" Label="if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    } 676604" />
<Node Id="10345:[32644..32682).2" Label="IsValidLookupCandidateInUsings(symbol) 676605" />
<Node Id="10345:[33539..33552).2" Label="param IsValidLookupCandidateInUsings(Symbol symbol) 676606" />
<Node Id="10345:[33578..34640).2" Label="switch (symbol.Kind)
            {
                // lookup via 'using namespace' ignores namespaces inside
                case SymbolKind.Namespace:
                    return false;

                // lookup via 'using static' ignores extension methods and non-static methods
                case SymbolKind.Method:
                    if (!symbol.IsStatic || ((MethodSymbol)symbol).IsExtensionMethod)
                    {
                        return false;
                    }

                    break;

                // types are considered static members for purposes of 'using static' feature
                // regardless of whether they are declared with 'static' modifier or not
                case SymbolKind.NamedType:
                    break;

                // lookup via 'using static' ignores non-static members
                default:
                    if (!symbol.IsStatic)
                    {
                        return false;
                    }

                    break;
            } 676607" />
<Node Id="10345:[34656..34668).3" Label="return true; 676608" />
<Node Id="10345:[32639..32764).5" Label="if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    } 676609" />
<Node Id="10345:[33023..33147).12" Label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676610" />
<Node Id="10345:[33023..33147).16" Label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676611" />
<Node Id="10345:[33023..33147).18" Label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676612" />
<Node Id="10312:[63439..63448).4" Label="param CheckViability(int arity) 676613" />
<Node Id="10312:[63473..63501).4" Label="param CheckViability(TypeSymbol accessThroughType) 676614" />
<Node Id="10312:[63503..63516).4" Label="param CheckViability(bool diagnose) 676615" />
<Node Id="10312:[63566..63612).4" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 676616" />
<Node Id="10312:[63638..63668).4" Label="bool inaccessibleViaQualifier; 676617" />
<Node Id="10312:[80978..80991).4" Label="param WrongArity(Symbol symbol) 676618" />
<Node Id="10312:[80993..81002).4" Label="param WrongArity(int arity) 676619" />
<Node Id="10312:[81004..81017).4" Label="param WrongArity(bool diagnose) 676620" />
<Node Id="10312:[81019..81040).4" Label="param WrongArity(LookupOptions options) 676621" />
<Node Id="10312:[81042..81069).4" Label="param WrongArity(out DiagnosticInfo diagInfo) 676622" />
<Node Id="10312:[81095..84034).4" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 676623" />
<Node Id="10312:[81196..82523).12" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 676624" />
<Node Id="10312:[81196..82523).13" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 676625" />
<Node Id="10312:[81319..81371).3" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 676626" />
<Node Id="10312:[81495..81570).11" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 676627" />
<Node Id="10312:[81495..81570).12" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 676628" />
<Node Id="10312:[81596..82500).13" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 676629" />
<Node Id="10312:[81731..82431).1" Label="if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            } 676630" />
<Node Id="10312:[81929..81937).1" Label="diagnose 676631" />
<Node Id="10312:[81918..82042).1" Label="diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null; 676632" />
<Node Id="10312:[81918..82042).2" Label="diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null; 676633" />
<Node Id="10312:[81940..82034).1" Label="new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) 676634" />
<Node Id="10312:[81940..82034).2" Label="new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) 676635" />
<Node Id="10312:[82461..82473).1" Label="return true; 676636" />
<Node Id="10312:[64449..64498).1" Label="return LookupResult.WrongArity(symbol, diagInfo); 676637" />
<Node Id="10312:[64449..64498).2" Label="return LookupResult.WrongArity(symbol, diagInfo); 676638" />
<Node Id="10312:[64456..64497).1" Label="LookupResult.WrongArity(symbol, diagInfo) 676639" />
<Node Id="10354:[5577..5590).1" Label="param WrongArity(Symbol symbol) 676640" />
<Node Id="10354:[5592..5612).1" Label="param WrongArity(DiagnosticInfo error) 676641" />
<Node Id="10354:[5638..5712).1" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676642" />
<Node Id="10354:[5638..5712).2" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676643" />
<Node Id="10354:[5638..5712).3" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676644" />
<Node Id="10354:[5638..5712).4" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676645" />
<Node Id="10354:[5645..5711).1" Label="new SingleLookupResult(LookupResultKind.WrongArity, symbol, error) 676646" />
<Node Id="10368:[1076..1097).4" Label="param SingleLookupResult(LookupResultKind kind) 676647" />
<Node Id="10368:[1099..1112).4" Label="param SingleLookupResult(Symbol symbol) 676648" />
<Node Id="10368:[1114..1134).4" Label="param SingleLookupResult(DiagnosticInfo error) 676649" />
<Node Id="10368:[1048..1256).4" Label="param SingleLookupResult(this) 676650" />
<Node Id="10312:[64449..64498).3" Label="return LookupResult.WrongArity(symbol, diagInfo); 676651" />
<Node Id="10345:[33169..33384).3" Label="if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);
                    } 676652" />
<Node Id="10354:[10268..10665).11" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 676653" />
<Node Id="10345:[32639..32764).7" Label="if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    } 676654" />
<Node Id="10345:[32644..32682).3" Label="IsValidLookupCandidateInUsings(symbol) 676655" />
<Node Id="10345:[33539..33552).3" Label="param IsValidLookupCandidateInUsings(Symbol symbol) 676656" />
<Node Id="10345:[33578..34640).3" Label="switch (symbol.Kind)
            {
                // lookup via 'using namespace' ignores namespaces inside
                case SymbolKind.Namespace:
                    return false;

                // lookup via 'using static' ignores extension methods and non-static methods
                case SymbolKind.Method:
                    if (!symbol.IsStatic || ((MethodSymbol)symbol).IsExtensionMethod)
                    {
                        return false;
                    }

                    break;

                // types are considered static members for purposes of 'using static' feature
                // regardless of whether they are declared with 'static' modifier or not
                case SymbolKind.NamedType:
                    break;

                // lookup via 'using static' ignores non-static members
                default:
                    if (!symbol.IsStatic)
                    {
                        return false;
                    }

                    break;
            } 676657" />
<Node Id="10345:[34656..34668).5" Label="return true; 676658" />
<Node Id="10345:[32639..32764).8" Label="if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    } 676659" />
<Node Id="10345:[33023..33147).28" Label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676660" />
<Node Id="10312:[63473..63501).5" Label="param CheckViability(TypeSymbol accessThroughType) 676661" />
<Node Id="10312:[63566..63612).5" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 676662" />
<Node Id="10312:[63638..63668).5" Label="bool inaccessibleViaQualifier; 676663" />
<Node Id="10312:[81019..81040).5" Label="param WrongArity(LookupOptions options) 676664" />
<Node Id="10312:[81042..81069).5" Label="param WrongArity(out DiagnosticInfo diagInfo) 676665" />
<Node Id="10312:[81495..81570).16" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 676666" />
<Node Id="10312:[82275..82283).1" Label="diagnose 676667" />
<Node Id="10312:[82264..82400).1" Label="diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null; 676668" />
<Node Id="10312:[82264..82400).2" Label="diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null; 676669" />
<Node Id="10312:[82286..82392).1" Label="new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) 676670" />
<Node Id="10312:[82286..82392).2" Label="new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) 676671" />
<Node Id="10312:[82461..82473).3" Label="return true; 676672" />
<Node Id="10312:[64449..64498).5" Label="return LookupResult.WrongArity(symbol, diagInfo); 676673" />
<Node Id="10312:[64449..64498).6" Label="return LookupResult.WrongArity(symbol, diagInfo); 676674" />
<Node Id="10312:[64456..64497).2" Label="LookupResult.WrongArity(symbol, diagInfo) 676675" />
<Node Id="10354:[5577..5590).2" Label="param WrongArity(Symbol symbol) 676676" />
<Node Id="10354:[5592..5612).2" Label="param WrongArity(DiagnosticInfo error) 676677" />
<Node Id="10354:[5638..5712).6" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676678" />
<Node Id="10354:[5638..5712).7" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676679" />
<Node Id="10354:[5638..5712).8" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676680" />
<Node Id="10354:[5638..5712).9" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676681" />
<Node Id="10354:[5645..5711).2" Label="new SingleLookupResult(LookupResultKind.WrongArity, symbol, error) 676682" />
<Node Id="10368:[1076..1097).5" Label="param SingleLookupResult(LookupResultKind kind) 676683" />
<Node Id="10368:[1099..1112).5" Label="param SingleLookupResult(Symbol symbol) 676684" />
<Node Id="10368:[1114..1134).5" Label="param SingleLookupResult(DiagnosticInfo error) 676685" />
<Node Id="10368:[1048..1256).5" Label="param SingleLookupResult(this) 676686" />
<Node Id="10312:[64449..64498).7" Label="return LookupResult.WrongArity(symbol, diagInfo); 676687" />
<Node Id="10345:[33169..33384).5" Label="if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);
                    } 676688" />
<Node Id="10354:[10268..10665).14" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 676689" />
<Node Id="10345:[32639..32764).10" Label="if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    } 676690" />
<Node Id="10345:[32644..32682).4" Label="IsValidLookupCandidateInUsings(symbol) 676691" />
<Node Id="10345:[33539..33552).4" Label="param IsValidLookupCandidateInUsings(Symbol symbol) 676692" />
<Node Id="10345:[33578..34640).4" Label="switch (symbol.Kind)
            {
                // lookup via 'using namespace' ignores namespaces inside
                case SymbolKind.Namespace:
                    return false;

                // lookup via 'using static' ignores extension methods and non-static methods
                case SymbolKind.Method:
                    if (!symbol.IsStatic || ((MethodSymbol)symbol).IsExtensionMethod)
                    {
                        return false;
                    }

                    break;

                // types are considered static members for purposes of 'using static' feature
                // regardless of whether they are declared with 'static' modifier or not
                case SymbolKind.NamedType:
                    break;

                // lookup via 'using static' ignores non-static members
                default:
                    if (!symbol.IsStatic)
                    {
                        return false;
                    }

                    break;
            } 676693" />
<Node Id="10345:[34656..34668).7" Label="return true; 676694" />
<Node Id="10345:[32639..32764).11" Label="if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    } 676695" />
<Node Id="10345:[33023..33147).38" Label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676696" />
<Node Id="10312:[63473..63501).6" Label="param CheckViability(TypeSymbol accessThroughType) 676697" />
<Node Id="10312:[63566..63612).6" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 676698" />
<Node Id="10312:[63638..63668).6" Label="bool inaccessibleViaQualifier; 676699" />
<Node Id="10312:[81019..81040).6" Label="param WrongArity(LookupOptions options) 676700" />
<Node Id="10312:[81042..81069).6" Label="param WrongArity(out DiagnosticInfo diagInfo) 676701" />
<Node Id="10312:[81495..81570).21" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 676702" />
<Node Id="10312:[82461..82473).5" Label="return true; 676703" />
<Node Id="10312:[64449..64498).9" Label="return LookupResult.WrongArity(symbol, diagInfo); 676704" />
<Node Id="10312:[64456..64497).3" Label="LookupResult.WrongArity(symbol, diagInfo) 676705" />
<Node Id="10354:[5577..5590).3" Label="param WrongArity(Symbol symbol) 676706" />
<Node Id="10354:[5592..5612).3" Label="param WrongArity(DiagnosticInfo error) 676707" />
<Node Id="10354:[5638..5712).11" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676708" />
<Node Id="10354:[5638..5712).12" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676709" />
<Node Id="10354:[5638..5712).13" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676710" />
<Node Id="10354:[5638..5712).14" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676711" />
<Node Id="10354:[5645..5711).3" Label="new SingleLookupResult(LookupResultKind.WrongArity, symbol, error) 676712" />
<Node Id="10368:[1076..1097).6" Label="param SingleLookupResult(LookupResultKind kind) 676713" />
<Node Id="10368:[1099..1112).6" Label="param SingleLookupResult(Symbol symbol) 676714" />
<Node Id="10368:[1114..1134).6" Label="param SingleLookupResult(DiagnosticInfo error) 676715" />
<Node Id="10368:[1048..1256).6" Label="param SingleLookupResult(this) 676716" />
<Node Id="10312:[64449..64498).11" Label="return LookupResult.WrongArity(symbol, diagInfo); 676717" />
<Node Id="10345:[33169..33384).7" Label="if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);
                    } 676718" />
<Node Id="10354:[10268..10665).17" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 676719" />
<Node Id="10312:[81019..81040).7" Label="param WrongArity(LookupOptions options) 676720" />
<Node Id="10312:[81042..81069).7" Label="param WrongArity(out DiagnosticInfo diagInfo) 676721" />
<Node Id="10312:[81495..81570).26" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 676722" />
<Node Id="10312:[81495..81570).27" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 676723" />
<Node Id="10312:[64449..64498).14" Label="return LookupResult.WrongArity(symbol, diagInfo); 676724" />
<Node Id="10354:[5592..5612).4" Label="param WrongArity(DiagnosticInfo error) 676725" />
<Node Id="10354:[5638..5712).18" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676726" />
<Node Id="10368:[1114..1134).7" Label="param SingleLookupResult(DiagnosticInfo error) 676727" />
<Node Id="10354:[10268..10665).20" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 676728" />
<Node Id="10345:[32639..32764).16" Label="if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    } 676729" />
<Node Id="10345:[32644..32682).6" Label="IsValidLookupCandidateInUsings(symbol) 676730" />
<Node Id="10345:[33539..33552).6" Label="param IsValidLookupCandidateInUsings(Symbol symbol) 676731" />
<Node Id="10345:[33578..34640).6" Label="switch (symbol.Kind)
            {
                // lookup via 'using namespace' ignores namespaces inside
                case SymbolKind.Namespace:
                    return false;

                // lookup via 'using static' ignores extension methods and non-static methods
                case SymbolKind.Method:
                    if (!symbol.IsStatic || ((MethodSymbol)symbol).IsExtensionMethod)
                    {
                        return false;
                    }

                    break;

                // types are considered static members for purposes of 'using static' feature
                // regardless of whether they are declared with 'static' modifier or not
                case SymbolKind.NamedType:
                    break;

                // lookup via 'using static' ignores non-static members
                default:
                    if (!symbol.IsStatic)
                    {
                        return false;
                    }

                    break;
            } 676732" />
<Node Id="10345:[34656..34668).11" Label="return true; 676733" />
<Node Id="10345:[32639..32764).17" Label="if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    } 676734" />
<Node Id="10345:[33023..33147).58" Label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676735" />
<Node Id="10312:[63473..63501).8" Label="param CheckViability(TypeSymbol accessThroughType) 676736" />
<Node Id="10312:[63566..63612).8" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 676737" />
<Node Id="10312:[63638..63668).8" Label="bool inaccessibleViaQualifier; 676738" />
<Node Id="10312:[81019..81040).8" Label="param WrongArity(LookupOptions options) 676739" />
<Node Id="10312:[81042..81069).8" Label="param WrongArity(out DiagnosticInfo diagInfo) 676740" />
<Node Id="10354:[5577..5590).5" Label="param WrongArity(Symbol symbol) 676741" />
<Node Id="10354:[5638..5712).22" Label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676742" />
<Node Id="10368:[1099..1112).8" Label="param SingleLookupResult(Symbol symbol) 676743" />
<Node Id="10345:[33169..33384).11" Label="if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);
                    } 676744" />
<Node Id="10354:[10268..10665).23" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 676745" />
<Node Id="10312:[4685..4699).8" Label="result.IsClear 676746" />
<Node Id="10354:[3684..3818).21" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 676747" />
<Node Id="10354:[3720..3803).153" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676748" />
<Node Id="10312:[4680..4787).15" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 676749" />
<Node Id="10312:[4749..4764).3" Label="binder = scope; 676750" />
<Node Id="10312:[4826..5058).36" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 676751" />
<Node Id="10312:[4826..5058).37" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 676752" />
<Node Id="10312:[5087..5101).3" Label="return binder; 676753" />
<Node Id="10319:[61640..61682).1" Label="diagnostics.Add(node, useSiteDiagnostics); 676754" />
<Node Id="10319:[61640..61682).2" Label="diagnostics.Add(node, useSiteDiagnostics); 676755" />
<Node Id="10319:[61640..61682).3" Label="diagnostics.Add(node, useSiteDiagnostics); 676756" />
<Node Id="10319:[61640..61682).4" Label="diagnostics.Add(node, useSiteDiagnostics); 676757" />
<Node Id="10319:[61698..61712).1" Label="bool wasError; 676758" />
<Node Id="10319:[61726..61885).1" Label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 676759" />
<Node Id="10319:[61726..61885).2" Label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 676760" />
<Node Id="10319:[61726..61885).3" Label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 676761" />
<Node Id="10319:[61726..61885).4" Label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 676762" />
<Node Id="10319:[61726..61885).5" Label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 676763" />
<Node Id="10319:[61726..61885).6" Label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 676764" />
<Node Id="10319:[61726..61885).7" Label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 676765" />
<Node Id="10319:[61726..61885).9" Label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 676766" />
<Node Id="10319:[61726..61885).10" Label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 676767" />
<Node Id="10319:[61726..61885).11" Label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 676768" />
<Node Id="10319:[61754..61884).1" Label="ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options) 676769" />
<Node Id="10319:[84167..84186).3" Label="param ResultSymbol(LookupResult result) 676770" />
<Node Id="10319:[84201..84218).3" Label="param ResultSymbol(string simpleName) 676771" />
<Node Id="10319:[84233..84242).3" Label="param ResultSymbol(int arity) 676772" />
<Node Id="10319:[84257..84273).3" Label="param ResultSymbol(SyntaxNode where) 676773" />
<Node Id="10319:[84288..84313).3" Label="param ResultSymbol(DiagnosticBag diagnostics) 676774" />
<Node Id="10319:[84328..84359).3" Label="param ResultSymbol(bool suppressUseSiteDiagnostics) 676775" />
<Node Id="10319:[84374..84391).3" Label="param ResultSymbol(out bool wasError) 676776" />
<Node Id="10319:[84406..84447).3" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 676777" />
<Node Id="10319:[84462..84508).3" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 676778" />
<Node Id="10319:[84124..109887).3" Label="param ResultSymbol(this) 676779" />
<Node Id="10319:[85320..85348).9" Label="Debug.Assert(where != null); 676780" />
<Node Id="10319:[85320..85348).10" Label="Debug.Assert(where != null); 676781" />
<Node Id="10319:[85366..85400).9" Label="Debug.Assert(diagnostics != null); 676782" />
<Node Id="10319:[85366..85400).10" Label="Debug.Assert(diagnostics != null); 676783" />
<Node Id="10354:[4561..4580).5" Label="return _symbolList; 676784" />
<Node Id="10319:[85467..85484).5" Label="wasError = false; 676785" />
<Node Id="10354:[4094..4107).66" Label="return _kind; 676786" />
<Node Id="10319:[104874..105336).7" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 676787" />
<Node Id="10319:[104874..105336).8" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 676788" />
<Node Id="10319:[105465..105535).12" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 676789" />
<Node Id="10319:[105465..105535).13" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 676790" />
<Node Id="10319:[76360..76385).12" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 676791" />
<Node Id="10319:[76387..76402).12" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 676792" />
<Node Id="10060:[2841..2854).12" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 676793" />
<Node Id="10060:[2856..2875).12" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 676794" />
<Node Id="10060:[2901..2932).23" Label="Debug.Assert(symbol is object); 676795" />
<Node Id="10060:[2948..3467).12" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 676796" />
<Node Id="10060:[3553..4223).14" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 676797" />
<Node Id="10060:[4243..4274).14" Label="symbol = symbol.ContainingType; 676798" />
<Node Id="10060:[3518..4328).14" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 676799" />
<Node Id="10319:[76494..76582).45" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 676800" />
<Node Id="10319:[84691..84861).5" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 676801" />
<Node Id="10319:[84764..84846).7" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 676802" />
<Node Id="10319:[84764..84846).8" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 676803" />
<Node Id="10319:[84764..84846).10" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 676804" />
<Node Id="10319:[84764..84846).11" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 676805" />
<Node Id="10319:[84764..84845).2" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 676806" />
<Node Id="10306:[358886..358901).2" Label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 676807" />
<Node Id="10306:[358903..358930).2" Label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 676808" />
<Node Id="10306:[358932..358945).2" Label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 676809" />
<Node Id="10306:[358947..358972).2" Label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 676810" />
<Node Id="10306:[358838..360009).2" Label="param CheckRuntimeSupportForSymbolAccess(this) 676811" />
<Node Id="10306:[358998..359998).7" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 676812" />
<Node Id="10306:[358998..359998).8" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 676813" />
<Node Id="10319:[62966..63027).1" Label="NamedTypeSymbol type = lookupResultSymbol as NamedTypeSymbol; 676814" />
<Node Id="10319:[63043..63681).1" Label="if ((object)type == null)
            {
                // We did a lookup with a generic arity, filtered to types and namespaces. If
                // we got back something other than a type, there had better be an error info
                // for us.
                Debug.Assert(lookupResult.Error != null);
                type = new ExtendedErrorTypeSymbol(
                    GetContainingNamespaceOrType(lookupResultSymbol),
                    ImmutableArray.Create$Symbol$(lookupResultSymbol),
                    lookupResult.Kind,
                    lookupResult.Error,
                    arity);
            } 676815" />
<Node Id="10319:[63043..63681).2" Label="if ((object)type == null)
            {
                // We did a lookup with a generic arity, filtered to types and namespaces. If
                // we got back something other than a type, there had better be an error info
                // for us.
                Debug.Assert(lookupResult.Error != null);
                type = new ExtendedErrorTypeSymbol(
                    GetContainingNamespaceOrType(lookupResultSymbol),
                    ImmutableArray.Create$Symbol$(lookupResultSymbol),
                    lookupResult.Kind,
                    lookupResult.Error,
                    arity);
            } 676816" />
<Node Id="10319:[63697..63716).1" Label="lookupResult.Free() 676817" />
<Node Id="10354:[11383..11549).5" Label="param Free(this) 676818" />
<Node Id="10354:[3932..3952).9" Label="_symbolList.Clear(); 676819" />
<Node Id="10354:[11428..11441).5" Label="this.Clear(); 676820" />
<Node Id="10319:[63697..63717).1" Label="lookupResult.Free(); 676821" />
<Node Id="10319:[63733..63745).1" Label="return type; 676822" />
<Node Id="10319:[58098..58125).1" Label="NamedTypeSymbol resultType; 676823" />
<Node Id="10319:[58141..60037).1" Label="if (isUnboundTypeExpr)
            {
                if (!IsUnboundTypeAllowed(node))
                {
                    // If we already have an error type then skip reporting that the unbound type is illegal.
                    if (!unconstructedType.IsErrorType())
                    {
                        // error CS7003: Unexpected use of an unbound generic name
                        diagnostics.Add(ErrorCode.ERR_UnexpectedUnboundGenericName, node.Location);
                    }

                    resultType = unconstructedType.Construct(
                        UnboundArgumentErrorTypeSymbol.CreateTypeArguments(
                            unconstructedType.TypeParameters,
                            node.Arity,
                            errorInfo: null),
                        unbound: false);
                }
                else
                {
                    resultType = unconstructedType.AsUnboundGenericType();
                }
            }
            else if ((Flags & BinderFlags.SuppressTypeArgumentBinding) != 0)
            {
                resultType = unconstructedType.Construct(PlaceholderTypeArgumentSymbol.CreateTypeArguments(unconstructedType.TypeParameters));
            }
            else
            {
                // It's not an unbound type expression, so we must have type arguments, and we have a
                // generic type of the correct arity in hand (possibly an error type). Bind the type
                // arguments and construct the final result.
                resultType = ConstructNamedType(
                    unconstructedType,
                    node,
                    typeArguments,
                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),
                    basesBeingResolved,
                    diagnostics);
            } 676824" />
<Node Id="10319:[59172..60037).1" Label="if ((Flags & BinderFlags.SuppressTypeArgumentBinding) != 0)
            {
                resultType = unconstructedType.Construct(PlaceholderTypeArgumentSymbol.CreateTypeArguments(unconstructedType.TypeParameters));
            }
            else
            {
                // It's not an unbound type expression, so we must have type arguments, and we have a
                // generic type of the correct arity in hand (possibly an error type). Bind the type
                // arguments and construct the final result.
                resultType = ConstructNamedType(
                    unconstructedType,
                    node,
                    typeArguments,
                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),
                    basesBeingResolved,
                    diagnostics);
            } 676825" />
<Node Id="10319:[59172..60037).2" Label="if ((Flags & BinderFlags.SuppressTypeArgumentBinding) != 0)
            {
                resultType = unconstructedType.Construct(PlaceholderTypeArgumentSymbol.CreateTypeArguments(unconstructedType.TypeParameters));
            }
            else
            {
                // It's not an unbound type expression, so we must have type arguments, and we have a
                // generic type of the correct arity in hand (possibly an error type). Bind the type
                // arguments and construct the final result.
                resultType = ConstructNamedType(
                    unconstructedType,
                    node,
                    typeArguments,
                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),
                    basesBeingResolved,
                    diagnostics);
            } 676826" />
<Node Id="10319:[59723..60022).1" Label="resultType = ConstructNamedType(
                    unconstructedType,
                    node,
                    typeArguments,
                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),
                    basesBeingResolved,
                    diagnostics); 676827" />
<Node Id="10319:[59723..60022).2" Label="resultType = ConstructNamedType(
                    unconstructedType,
                    node,
                    typeArguments,
                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),
                    basesBeingResolved,
                    diagnostics); 676828" />
<Node Id="10319:[59723..60022).3" Label="resultType = ConstructNamedType(
                    unconstructedType,
                    node,
                    typeArguments,
                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),
                    basesBeingResolved,
                    diagnostics); 676829" />
<Node Id="10319:[59723..60022).5" Label="resultType = ConstructNamedType(
                    unconstructedType,
                    node,
                    typeArguments,
                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),
                    basesBeingResolved,
                    diagnostics); 676830" />
<Node Id="10319:[59723..60022).6" Label="resultType = ConstructNamedType(
                    unconstructedType,
                    node,
                    typeArguments,
                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),
                    basesBeingResolved,
                    diagnostics); 676831" />
<Node Id="10319:[59880..59945).1" Label="BindTypeArguments(typeArguments, diagnostics, basesBeingResolved) 676832" />
<Node Id="10319:[64558..64603).1" Label="param BindTypeArguments(SeparatedSyntaxList$TypeSyntax$ typeArguments) 676833" />
<Node Id="10319:[64605..64630).1" Label="param BindTypeArguments(DiagnosticBag diagnostics) 676834" />
<Node Id="10319:[64632..64678).1" Label="param BindTypeArguments(ConsList$TypeSymbol$ basesBeingResolved = null) 676835" />
<Node Id="10319:[64496..65048).1" Label="param BindTypeArguments(this) 676836" />
<Node Id="10319:[64704..64742).1" Label="Debug.Assert(typeArguments.Count $ 0); 676837" />
<Node Id="10319:[64704..64742).2" Label="Debug.Assert(typeArguments.Count $ 0); 676838" />
<Node Id="10319:[64756..64815).1" Label="var args = ArrayBuilder$TypeWithAnnotations$.GetInstance(); 676839" />
<Node Id="10319:[64829..64988).1" Label="foreach (var argSyntax in typeArguments)
            {
                args.Add(BindTypeArgument(argSyntax, diagnostics, basesBeingResolved));
            } 676840" />
<Node Id="10319:[64902..64973).1" Label="args.Add(BindTypeArgument(argSyntax, diagnostics, basesBeingResolved)); 676841" />
<Node Id="10319:[64902..64973).2" Label="args.Add(BindTypeArgument(argSyntax, diagnostics, basesBeingResolved)); 676842" />
<Node Id="10319:[64902..64973).3" Label="args.Add(BindTypeArgument(argSyntax, diagnostics, basesBeingResolved)); 676843" />
<Node Id="10319:[64911..64971).1" Label="BindTypeArgument(argSyntax, diagnostics, basesBeingResolved) 676844" />
<Node Id="10319:[65105..65128).1" Label="param BindTypeArgument(TypeSyntax typeArgument) 676845" />
<Node Id="10319:[65130..65155).1" Label="param BindTypeArgument(DiagnosticBag diagnostics) 676846" />
<Node Id="10319:[65157..65203).1" Label="param BindTypeArgument(ConsList$TypeSymbol$ basesBeingResolved = null) 676847" />
<Node Id="10319:[65060..65694).1" Label="param BindTypeArgument(this) 676848" />
<Node Id="10319:[65330..65407).1" Label="var binder = this.WithAdditionalFlags(BinderFlags.SuppressUnsafeDiagnostics); 676849" />
<Node Id="10319:[65343..65406).1" Label="this.WithAdditionalFlags(BinderFlags.SuppressUnsafeDiagnostics) 676850" />
<Node Id="10307:[2552..2569).2" Label="param WithAdditionalFlags(BinderFlags flags) 676851" />
<Node Id="10307:[2516..2720).2" Label="param WithAdditionalFlags(this) 676852" />
<Node Id="10298:[537..568).178" Label="return (self & other) == other; 676853" />
<Node Id="10286:[1605..1638).29" Label="RoslynDebug.Assert(next != null); 676854" />
<Node Id="10286:[1688..1781).43" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 676855" />
<Node Id="10286:[1688..1781).44" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 676856" />
<Node Id="10286:[1708..1779).8" Label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 676857" />
<Node Id="10298:[471..492).61" Label="param Includes(this BinderFlags self) 676858" />
<Node Id="10298:[494..511).61" Label="param Includes(BinderFlags other) 676859" />
<Node Id="10286:[1820..1963).43" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 676860" />
<Node Id="10286:[1820..1963).44" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 676861" />
<Node Id="10286:[1840..1888).8" Label="flags.Includes(BinderFlags.InNestedFinallyBlock) 676862" />
<Node Id="10298:[471..492).62" Label="param Includes(this BinderFlags self) 676863" />
<Node Id="10298:[494..511).62" Label="param Includes(BinderFlags other) 676864" />
<Node Id="10319:[65423..65656).1" Label="var arg = typeArgument.Kind() == SyntaxKind.OmittedTypeArgument
                ? TypeWithAnnotations.Create(UnboundArgumentErrorTypeSymbol.Instance)
                : binder.BindType(typeArgument, diagnostics, basesBeingResolved); 676865" />
<Node Id="10319:[65433..65486).1" Label="typeArgument.Kind() == SyntaxKind.OmittedTypeArgument 676866" />
<Node Id="10319:[65423..65656).4" Label="var arg = typeArgument.Kind() == SyntaxKind.OmittedTypeArgument
                ? TypeWithAnnotations.Create(UnboundArgumentErrorTypeSymbol.Instance)
                : binder.BindType(typeArgument, diagnostics, basesBeingResolved); 676867" />
<Node Id="10319:[65423..65656).5" Label="var arg = typeArgument.Kind() == SyntaxKind.OmittedTypeArgument
                ? TypeWithAnnotations.Create(UnboundArgumentErrorTypeSymbol.Instance)
                : binder.BindType(typeArgument, diagnostics, basesBeingResolved); 676868" />
<Node Id="10319:[65593..65655).1" Label="binder.BindType(typeArgument, diagnostics, basesBeingResolved) 676869" />
<Node Id="10319:[13710..13735).12" Label="param BindType(DiagnosticBag diagnostics) 676870" />
<Node Id="10319:[13737..13783).12" Label="param BindType(ConsList$TypeSymbol$ basesBeingResolved = null) 676871" />
<Node Id="10319:[13647..14061).12" Label="param BindType(this) 676872" />
<Node Id="10319:[15096..15130).45" Label="Debug.Assert(diagnostics != null); 676873" />
<Node Id="10319:[15096..15130).46" Label="Debug.Assert(diagnostics != null); 676874" />
<Node Id="10319:[73736..73751).10" Label="param GetSpecialType(SyntaxNode node) 676875" />
<Node Id="10319:[73882..73975).55" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 676876" />
<Node Id="10319:[73882..73975).56" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 676877" />
<Node Id="10319:[76360..76385).13" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 676878" />
<Node Id="10319:[76387..76402).13" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 676879" />
<Node Id="10319:[76494..76582).49" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 676880" />
<Node Id="10319:[76494..76582).50" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 676881" />
<Node Id="10287:[791..833).21" Label="Debug.Assert(typeWithAnnotations.HasType); 676882" />
<Node Id="10319:[15783..15865).74" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 676883" />
<Node Id="10286:[21563..21583).11" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 676884" />
<Node Id="10286:[22110..22130).11" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 676885" />
<Node Id="10286:[8725..8866).1" Label="get
            {
                RoslynDebug.Assert(Next is object);
                return Next.ContainingMemberOrLambda;
            } 676886" />
<Node Id="10286:[8761..8796).1" Label="RoslynDebug.Assert(Next is object); 676887" />
<Node Id="10286:[8821..8850).1" Label="Next.ContainingMemberOrLambda 676888" />
<Node Id="10307:[1439..1480).26" Label="get { return _containingMemberOrLambda; } 676889" />
<Node Id="10286:[8814..8851).1" Label="return Next.ContainingMemberOrLambda; 676890" />
<Node Id="10286:[15616..15690).51" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 676891" />
<Node Id="10286:[15616..15690).52" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 676892" />
<Node Id="10286:[15715..15910).11" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 676893" />
<Node Id="10286:[23161..23181).11" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 676894" />
<Node Id="10286:[23281..23301).11" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 676895" />
<Node Id="10286:[23380..23684).71" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 676896" />
<Node Id="10286:[23893..24026).21" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 676897" />
<Node Id="10286:[24545..24641).21" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 676898" />
<Node Id="10286:[24655..25349).11" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 676899" />
<Node Id="10286:[26910..26935).11" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 676900" />
<Node Id="10286:[26952..26974).11" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 676901" />
<Node Id="10286:[27002..27022).11" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 676902" />
<Node Id="10286:[27048..27088).41" Label="RoslynDebug.Assert(diagnostics != null); 676903" />
<Node Id="10286:[27048..27088).42" Label="RoslynDebug.Assert(diagnostics != null); 676904" />
<Node Id="10286:[27208..27236).21" Label="DiagnosticInfo? info = null; 676905" />
<Node Id="10286:[27250..27722).11" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 676906" />
<Node Id="10286:[27738..27845).31" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 676907" />
<Node Id="10286:[27738..27845).32" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 676908" />
<Node Id="10286:[27861..27873).11" Label="return kind; 676909" />
<Node Id="10286:[26281..26812).11" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 676910" />
<Node Id="10286:[26450..26769).11" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 676911" />
<Node Id="10319:[51817..51842).12" Label="param UnwrapAlias(DiagnosticBag diagnostics) 676912" />
<Node Id="10319:[51844..51861).12" Label="param UnwrapAlias(SyntaxNode syntax) 676913" />
<Node Id="10319:[51863..51909).12" Label="param UnwrapAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 676914" />
<Node Id="10319:[51698..52285).12" Label="param UnwrapAlias(this) 676915" />
<Node Id="10319:[51939..51953).12" Label="symbol.IsAlias 676916" />
<Node Id="10287:[1680..1716).12" Label="=$ _symbol?.Kind == SymbolKind.Alias 676917" />
<Node Id="10287:[1683..1690).11" Label="_symbol 676918" />
<Node Id="10287:[1683..1716).23" Label="_symbol?.Kind == SymbolKind.Alias 676919" />
<Node Id="10319:[51935..52244).23" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 676920" />
<Node Id="10319:[65672..65683).1" Label="return arg; 676921" />
<Node Id="10319:[64902..64973).6" Label="args.Add(BindTypeArgument(argSyntax, diagnostics, basesBeingResolved)); 676922" />
<Node Id="10319:[65004..65037).1" Label="return args.ToImmutableAndFree(); 676923" />
<Node Id="10319:[59736..60021).1" Label="ConstructNamedType(
                    unconstructedType,
                    node,
                    typeArguments,
                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),
                    basesBeingResolved,
                    diagnostics) 676924" />
<Node Id="10319:[69844..69864).1" Label="param ConstructNamedType(NamedTypeSymbol type) 676925" />
<Node Id="10319:[69879..69900).1" Label="param ConstructNamedType(SyntaxNode typeSyntax) 676926" />
<Node Id="10319:[69915..69966).1" Label="param ConstructNamedType(SeparatedSyntaxList$TypeSyntax$ typeArgumentsSyntax) 676927" />
<Node Id="10319:[69981..70030).1" Label="param ConstructNamedType(ImmutableArray$TypeWithAnnotations$ typeArguments) 676928" />
<Node Id="10319:[70045..70084).1" Label="param ConstructNamedType(ConsList$TypeSymbol$ basesBeingResolved) 676929" />
<Node Id="10319:[70099..70124).1" Label="param ConstructNamedType(DiagnosticBag diagnostics) 676930" />
<Node Id="10319:[69787..70686).1" Label="param ConstructNamedType(this) 676931" />
<Node Id="10319:[70150..70187).1" Label="Debug.Assert(!typeArguments.IsEmpty); 676932" />
<Node Id="10319:[70201..70238).1" Label="type = type.Construct(typeArguments); 676933" />
<Node Id="10319:[70201..70238).2" Label="type = type.Construct(typeArguments); 676934" />
<Node Id="10319:[70258..70280).1" Label="ShouldCheckConstraints 676935" />
<Node Id="10319:[70990..71107).1" Label="get
            {
                return !this.Flags.Includes(BinderFlags.SuppressConstraintChecks);
            } 676936" />
<Node Id="10319:[71026..71092).1" Label="return !this.Flags.Includes(BinderFlags.SuppressConstraintChecks); 676937" />
<Node Id="10319:[71026..71092).2" Label="return !this.Flags.Includes(BinderFlags.SuppressConstraintChecks); 676938" />
<Node Id="10319:[71034..71091).1" Label="this.Flags.Includes(BinderFlags.SuppressConstraintChecks) 676939" />
<Node Id="10298:[471..492).63" Label="param Includes(this BinderFlags self) 676940" />
<Node Id="10298:[494..511).63" Label="param Includes(BinderFlags other) 676941" />
<Node Id="10319:[70254..70647).1" Label="if (ShouldCheckConstraints && ConstraintsHelper.RequiresChecking(type))
            {
                bool includeNullability = Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes);
                type.CheckConstraintsForNamedType(this.Conversions, includeNullability, typeSyntax, typeArgumentsSyntax, this.Compilation, basesBeingResolved, diagnostics);
            } 676942" />
<Node Id="10319:[70663..70675).1" Label="return type; 676943" />
<Node Id="10319:[60053..60600).1" Label="if (options.IsAttributeTypeLookup())
            {
                // Generic type cannot be an attribute type.
                // Parser error has already been reported, just wrap the result type with error type symbol.
                Debug.Assert(unconstructedType.IsErrorType());
                Debug.Assert(resultType.IsErrorType());
                resultType = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(resultType), resultType,
                    LookupResultKind.NotAnAttributeType, errorInfo: null);
            } 676944" />
<Node Id="10319:[60057..60088).1" Label="options.IsAttributeTypeLookup() 676945" />
<Node Id="10353:[7504..7530).6" Label="param IsAttributeTypeLookup(this LookupOptions options) 676946" />
<Node Id="10319:[60616..60733).1" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(node.TypeArgumentList.GreaterThanToken), resultType); 676947" />
<Node Id="10319:[60650..60719).1" Label="AreNullableAnnotationsEnabled(node.TypeArgumentList.GreaterThanToken) 676948" />
<Node Id="10286:[10010..10027).13" Label="param AreNullableAnnotationsEnabled(SyntaxToken token) 676949" />
<Node Id="10286:[9966..10197).13" Label="param AreNullableAnnotationsEnabled(this) 676950" />
<Node Id="10319:[60616..60733).4" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(node.TypeArgumentList.GreaterThanToken), resultType); 676951" />
<Node Id="10319:[60616..60733).5" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(node.TypeArgumentList.GreaterThanToken), resultType); 676952" />
<Node Id="10319:[60616..60733).7" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(node.TypeArgumentList.GreaterThanToken), resultType); 676953" />
<Node Id="10287:[791..833).23" Label="Debug.Assert(typeWithAnnotations.HasType); 676954" />
<Node Id="10319:[20745..20878).8" Label="return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null); 676955" />
<Node Id="10286:[21563..21583).12" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 676956" />
<Node Id="10286:[22110..22130).12" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 676957" />
<Node Id="10286:[15616..15690).56" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 676958" />
<Node Id="10286:[15616..15690).57" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 676959" />
<Node Id="10286:[15715..15910).12" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 676960" />
<Node Id="10286:[23161..23181).12" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 676961" />
<Node Id="10286:[23281..23301).12" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 676962" />
<Node Id="10286:[23380..23684).78" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 676963" />
<Node Id="10286:[23893..24026).23" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 676964" />
<Node Id="10286:[24545..24641).23" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 676965" />
<Node Id="10286:[24655..25349).12" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 676966" />
<Node Id="10286:[26910..26935).12" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 676967" />
<Node Id="10286:[26952..26974).12" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 676968" />
<Node Id="10286:[27002..27022).12" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 676969" />
<Node Id="10286:[27048..27088).45" Label="RoslynDebug.Assert(diagnostics != null); 676970" />
<Node Id="10286:[27048..27088).46" Label="RoslynDebug.Assert(diagnostics != null); 676971" />
<Node Id="10286:[27208..27236).23" Label="DiagnosticInfo? info = null; 676972" />
<Node Id="10286:[27250..27722).12" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 676973" />
<Node Id="10286:[27738..27845).34" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 676974" />
<Node Id="10286:[27738..27845).35" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 676975" />
<Node Id="10286:[27861..27873).12" Label="return kind; 676976" />
<Node Id="10286:[26281..26812).12" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 676977" />
<Node Id="10286:[26450..26769).12" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 676978" />
<Node Id="10287:[1680..1716).13" Label="=$ _symbol?.Kind == SymbolKind.Alias 676979" />
<Node Id="10287:[1683..1690).12" Label="_symbol 676980" />
<Node Id="10287:[1683..1716).25" Label="_symbol?.Kind == SymbolKind.Alias 676981" />
<Node Id="10319:[51935..52244).25" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 676982" />
<Node Id="10313:[1494..2257).6" Label="if (!typeParameters.IsDefaultOrEmpty)
            {
                tpNames = PooledHashSet$string$.GetInstance();
                foreach (var tp in typeParameters)
                {
                    var name = tp.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (!tpNames.Add(name))
                    {
                        // Type parameter declaration name conflicts are detected elsewhere
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);
                    }
                }
            } 676983" />
<Node Id="10313:[2563..2675).16" Label="if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    } 676984" />
<Node Id="10313:[2699..3019).21" Label="if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    } 676985" />
<Node Id="10313:[2699..3019).22" Label="if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    } 676986" />
<Node Id="10313:[3378..3434).17" Label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 676987" />
<Node Id="10313:[735..760).6" Label="param ValidateDeclarationNameConflictsInScope(DiagnosticBag diagnostics) 676988" />
<Node Id="10313:[840..920).31" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 676989" />
<Node Id="10313:[840..920).34" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 676990" />
<Node Id="10313:[3733..3747).6" Label="param ValidateNameConflictsInScope(Symbol? symbol) 676991" />
<Node Id="10313:[3749..3766).6" Label="param ValidateNameConflictsInScope(Location location) 676992" />
<Node Id="10313:[3768..3779).6" Label="param ValidateNameConflictsInScope(string name) 676993" />
<Node Id="10313:[3781..3806).6" Label="param ValidateNameConflictsInScope(DiagnosticBag diagnostics) 676994" />
<Node Id="10313:[3832..3924).16" Label="if (string.IsNullOrEmpty(name))
            {
                return false;
            } 676995" />
<Node Id="10313:[4210..4315).6" Label="if (binder is InContainerBinder)
                {
                    return false;
                } 676996" />
<Node Id="10313:[4335..4374).6" Label="var scope = binder as LocalScopeBinder; 676997" />
<Node Id="10313:[4392..4543).21" Label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)
                {
                    return true;
                } 676998" />
<Node Id="10313:[4392..4543).22" Label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)
                {
                    return true;
                } 676999" />
<Node Id="10313:[4698..4727).6" Label="binder.IsNestedFunctionBinder 677000" />
<Node Id="10286:[8381..8389).6" Label="=$ false 677001" />
<Node Id="10286:[8384..8389).11" Label="false 677002" />
<Node Id="10313:[4676..4801).16" Label="if (allowShadowing && binder.IsNestedFunctionBinder)
                {
                    return false;
                } 677003" />
<Node Id="10313:[5488..5662).26" Label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&
                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 677004" />
<Node Id="10313:[5488..5662).27" Label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&
                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 677005" />
<Node Id="10313:[4821..5028).11" Label="if (binder.IsLastBinderWithinMember())
                {
                    // Declarations within a member do not conflict with declarations outside.
                    return false;
                } 677006" />
<Node Id="10313:[4996..5009).11" Label="return false; 677007" />
<Node Id="10313:[840..920).35" Label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 677008" />
<Node Id="10313:[3537..3552).6" Label="pNames?.Free(); 677009" />
<Node Id="10319:[73736..73751).11" Label="param GetSpecialType(SyntaxNode node) 677010" />
<Node Id="10319:[73882..73975).61" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 677011" />
<Node Id="10319:[76360..76385).14" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 677012" />
<Node Id="10319:[76387..76402).14" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 677013" />
<Node Id="10319:[76494..76582).53" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 677014" />
<Node Id="10287:[791..833).25" Label="Debug.Assert(typeWithAnnotations.HasType); 677015" />
<Node Id="10286:[15616..15690).61" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 677016" />
<Node Id="10286:[15616..15690).62" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 677017" />
<Node Id="10286:[15715..15910).13" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 677018" />
<Node Id="10286:[23161..23181).13" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 677019" />
<Node Id="10286:[23281..23301).13" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 677020" />
<Node Id="10286:[23380..23684).85" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 677021" />
<Node Id="10286:[23893..24026).25" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 677022" />
<Node Id="10286:[24545..24641).25" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 677023" />
<Node Id="10286:[24655..25349).13" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 677024" />
<Node Id="10286:[26910..26935).13" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 677025" />
<Node Id="10286:[26952..26974).13" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 677026" />
<Node Id="10286:[27002..27022).13" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 677027" />
<Node Id="10286:[27048..27088).49" Label="RoslynDebug.Assert(diagnostics != null); 677028" />
<Node Id="10286:[27048..27088).50" Label="RoslynDebug.Assert(diagnostics != null); 677029" />
<Node Id="10286:[27208..27236).25" Label="DiagnosticInfo? info = null; 677030" />
<Node Id="10286:[27250..27722).13" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 677031" />
<Node Id="10286:[27738..27845).37" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 677032" />
<Node Id="10286:[27738..27845).38" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 677033" />
<Node Id="10286:[27861..27873).13" Label="return kind; 677034" />
<Node Id="10286:[26281..26812).13" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 677035" />
<Node Id="10286:[26450..26769).13" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 677036" />
<Node Id="10287:[1683..1690).13" Label="_symbol 677037" />
<Node Id="10287:[1683..1716).27" Label="_symbol?.Kind == SymbolKind.Alias 677038" />
<Node Id="10319:[51935..52244).27" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 677039" />
<Node Id="10845:[522..547).2" Label="param TypeConversions(AssemblySymbol corLibrary) 677040" />
<Node Id="10845:[549..580).2" Label="param TypeConversions(bool includeNullability = false) 677041" />
<Node Id="10845:[499..728).3" Label="param TypeConversions(this) 677042" />
<Node Id="10845:[602..612).2" Label="corLibrary 677043" />
<Node Id="10845:[637..638).3" Label="0 677044" />
<Node Id="10845:[660..678).2" Label="includeNullability 677045" />
<Node Id="10845:[701..705).3" Label="null 677046" />
<Node Id="10845:[499..728).4" Label="param TypeConversions(this) 677047" />
<Node Id="10845:[764..789).2" Label="param TypeConversions(AssemblySymbol corLibrary) 677048" />
<Node Id="10845:[791..816).2" Label="param TypeConversions(int currentRecursionDepth) 677049" />
<Node Id="10845:[818..841).2" Label="param TypeConversions(bool includeNullability) 677050" />
<Node Id="10845:[843..878).2" Label="param TypeConversions(TypeConversions otherNullabilityOpt) 677051" />
<Node Id="10845:[740..997).3" Label="param TypeConversions(this) 677052" />
<Node Id="10845:[900..910).2" Label="corLibrary 677053" />
<Node Id="10845:[912..933).2" Label="currentRecursionDepth 677054" />
<Node Id="10845:[935..953).2" Label="includeNullability 677055" />
<Node Id="10845:[955..974).2" Label="otherNullabilityOpt 677056" />
<Node Id="10845:[740..997).4" Label="param TypeConversions(this) 677057" />
<Node Id="10843:[1173..1198).2" Label="param ConversionsBase(AssemblySymbol corLibrary) 677058" />
<Node Id="10843:[1200..1225).2" Label="param ConversionsBase(int currentRecursionDepth) 677059" />
<Node Id="10843:[1227..1250).2" Label="param ConversionsBase(bool includeNullability) 677060" />
<Node Id="10843:[1252..1287).2" Label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 677061" />
<Node Id="10843:[1147..1833).2" Label="param ConversionsBase(this) 677062" />
<Node Id="10843:[734..744).2" Label="corLibrary 677063" />
<Node Id="10843:[778..799).2" Label="currentRecursionDepth 677064" />
<Node Id="10843:[835..853).2" Label="IncludeNullability 677065" />
<Node Id="10843:[1113..1134).2" Label="_lazyOtherNullability 677066" />
<Node Id="10843:[1313..1354).5" Label="Debug.Assert((object)corLibrary != null); 677067" />
<Node Id="10843:[1313..1354).6" Label="Debug.Assert((object)corLibrary != null); 677068" />
<Node Id="10843:[1368..1474).6" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 677069" />
<Node Id="10843:[1368..1474).7" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 677070" />
<Node Id="10843:[1488..1600).6" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 677071" />
<Node Id="10843:[1488..1600).7" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 677072" />
<Node Id="10843:[1616..1631).2" Label="this.corLibrary 677073" />
<Node Id="10843:[1659..1685).2" Label="this.currentRecursionDepth 677074" />
<Node Id="10843:[1724..1742).2" Label="IncludeNullability 677075" />
<Node Id="10843:[1778..1799).2" Label="_lazyOtherNullability 677076" />
<Node Id="25002:[4395..4432).110" Label="var diagnostics = c.GetDiagnostics(); 677077" />
<Node Id="25002:[4446..4475).1" Label="diagnostics.Verify(expected); 677078" />
<Node Id="25002:[4446..4475).2" Label="diagnostics.Verify(expected); 677079" />
<Node Id="25002:[4446..4474).1" Label="diagnostics.Verify(expected) 677080" />
<Node Id="25002:[2296..2334).1" Label="param Verify(this ImmutableArray$Diagnostic$ actual) 677081" />
<Node Id="25002:[2336..2375).1" Label="param Verify(params DiagnosticDescription[] expected) 677082" />
<Node Id="25002:[2401..2451).1" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 677083" />
<Node Id="25002:[2401..2451).2" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 677084" />
<Node Id="25002:[2401..2450).1" Label="Verify((IEnumerable$Diagnostic$)actual, expected) 677085" />
<Node Id="25002:[1554..1589).1" Label="param Verify(this IEnumerable$Diagnostic$ actual) 677086" />
<Node Id="25002:[1591..1630).1" Label="param Verify(params DiagnosticDescription[] expected) 677087" />
<Node Id="25002:[1656..1703).1" Label="Verify(actual, expected, errorCodeOnly: false); 677088" />
<Node Id="25002:[1656..1703).2" Label="Verify(actual, expected, errorCodeOnly: false); 677089" />
<Node Id="25002:[1656..1703).3" Label="Verify(actual, expected, errorCodeOnly: false); 677090" />
<Node Id="25002:[1656..1702).1" Label="Verify(actual, expected, errorCodeOnly: false) 677091" />
<Node Id="25002:[2501..2531).1" Label="param Verify(IEnumerable$Diagnostic$ actual) 677092" />
<Node Id="25002:[2533..2565).1" Label="param Verify(DiagnosticDescription[] expected) 677093" />
<Node Id="25002:[2567..2585).1" Label="param Verify(bool errorCodeOnly) 677094" />
<Node Id="25002:[2611..2759).1" Label="if (expected == null)
            {
                throw new ArgumentException('Must specify expected errors.', nameof(expected));
            } 677095" />
<Node Id="25002:[2611..2759).2" Label="if (expected == null)
            {
                throw new ArgumentException('Must specify expected errors.', nameof(expected));
            } 677096" />
<Node Id="25002:[2775..2867).1" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 677097" />
<Node Id="25002:[2881..2977).1" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 677098" />
<Node Id="25002:[2991..3166).1" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 677099" />
<Node Id="25002:[2991..3166).2" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 677100" />
<Node Id="25002:[2991..3166).4" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 677101" />
<Node Id="25002:[3341..3730).1" Label="foreach (var d in expected)
            {
                int index = unmatched.IndexOf(d);
                if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                }
            } 677102" />
<Node Id="25002:[3840..3992).1" Label="if (unmatched.Count $ 0)
            {
                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
            } 677103" />
<Node Id="25002:[3840..3992).2" Label="if (unmatched.Count $ 0)
            {
                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
            } 677104" />
<Node Id="25002:[4102..4181).1" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 677105" />
<Node Id="25003:[747..750).1" Label="{ } 677106" />
<Node Id="25003:[740..750).1" Label="None = { } 677107" />
<Node Id="25003:[814..818).1" Label="null 677108" />
<Node Id="25003:[808..818).1" Label="Any = null 677109" />
<Node Id="25002:[4102..4181).3" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 677110" />
<Node Id="25002:[4102..4181).4" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 677111" />
<Node Id="25002:[4126..4179).1" Label="DiagnosticDescription.GetAssertText(expected, actual) 677112" />
<Node Id="25003:[17577..17609).1" Label="param GetAssertText(DiagnosticDescription[] expected) 677113" />
<Node Id="25003:[17611..17641).1" Label="param GetAssertText(IEnumerable$Diagnostic$ actual) 677114" />
<Node Id="25003:[17667..17688).1" Label="const int CSharp = 1; 677115" />
<Node Id="25003:[17702..17728).1" Label="const int VisualBasic = 2; 677116" />
<Node Id="25003:[17742..17827).1" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 677117" />
<Node Id="25003:[17742..17827).2" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 677118" />
<Node Id="25003:[17757..17803).1" Label="actual.Any() && actual.First() is CSDiagnostic 677119" />
<Node Id="25003:[17742..17827).4" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 677120" />
<Node Id="25003:[17841..17904).1" Label="var includeDiagnosticMessagesAsComments = (language == CSharp); 677121" />
<Node Id="25003:[17918..17965).1" Label="int indentDepth = (language == CSharp) ? 4 : 1; 677122" />
<Node Id="25003:[17936..17956).1" Label="(language == CSharp) 677123" />
<Node Id="25003:[17979..18071).1" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 677124" />
<Node Id="25003:[18085..18181).1" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 677125" />
<Node Id="25003:[18197..18490).1" Label="if (IsSortedOrEmpty(expected))
            {
                // If this is a new test (empty expectations) or a test that's already sorted,
                // we sort the actual diagnostics to minimize diff noise as diagnostics change.
                actual = Sort(actual);
            } 677126" />
<Node Id="25003:[18201..18226).1" Label="IsSortedOrEmpty(expected) 677127" />
<Node Id="25003:[21605..21640).1" Label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 677128" />
<Node Id="25003:[23096..23122).1" Label="new LinePositionComparer() 677129" />
<Node Id="25003:[22962..23812).1" Label="param LinePositionComparer(this) 677130" />
<Node Id="25003:[23085..23122).1" Label="Instance = new LinePositionComparer() 677131" />
<Node Id="25003:[21666..21711).1" Label="var comparer = LinePositionComparer.Instance; 677132" />
<Node Id="25003:[21725..21759).1" Label="DiagnosticDescription last = null; 677133" />
<Node Id="25003:[21773..22187).1" Label="foreach (var diagnostic in diagnostics)
            {
                if (diagnostic._startPosition == null)
                {
                    return false;
                }
                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                }
                last = diagnostic;
            } 677134" />
<Node Id="25003:[22201..22213).1" Label="return true; 677135" />
<Node Id="25003:[18197..18490).2" Label="if (IsSortedOrEmpty(expected))
            {
                // If this is a new test (empty expectations) or a test that's already sorted,
                // we sort the actual diagnostics to minimize diff noise as diagnostics change.
                actual = Sort(actual);
            } 677136" />
<Node Id="25003:[18453..18475).1" Label="actual = Sort(actual); 677137" />
<Node Id="25003:[18462..18474).1" Label="Sort(actual) 677138" />
<Node Id="25003:[21372..21407).1" Label="param Sort(IEnumerable$Diagnostic$ diagnostics) 677139" />
<Node Id="25003:[21433..21546).1" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 677140" />
<Node Id="25003:[21433..21546).2" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 677141" />
<Node Id="25003:[21433..21546).4" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 677142" />
<Node Id="25003:[21433..21546).5" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 677143" />
<Node Id="25003:[18506..18543).1" Label="var assertText = new StringBuilder(); 677144" />
<Node Id="25003:[18557..18581).1" Label="assertText.AppendLine(); 677145" />
<Node Id="25003:[18658..18664).1" Label="int i; 677146" />
<Node Id="25003:[18678..18713).1" Label="assertText.AppendLine('Expected:'); 677147" />
<Node Id="25003:[18678..18713).3" Label="assertText.AppendLine('Expected:'); 677148" />
<Node Id="25003:[18727..18781).1" Label="var expectedText = ArrayBuilder$string$.GetInstance(); 677149" />
<Node Id="25003:[18795..18929).1" Label="foreach (var d in expected)
            {
                expectedText.Add(GetDiagnosticDescription(d, indentDepth));
            } 677150" />
<Node Id="25003:[18943..18992).1" Label="GetCommaSeparatedLines(assertText, expectedText); 677151" />
<Node Id="25003:[18943..18992).2" Label="GetCommaSeparatedLines(assertText, expectedText); 677152" />
<Node Id="25003:[18943..18991).1" Label="GetCommaSeparatedLines(assertText, expectedText) 677153" />
<Node Id="25003:[22599..22615).1" Label="param GetCommaSeparatedLines(StringBuilder sb) 677154" />
<Node Id="25003:[22617..22643).1" Label="param GetCommaSeparatedLines(ArrayBuilder$string$ lines) 677155" />
<Node Id="25003:[22669..22689).1" Label="int n = lines.Count; 677156" />
<Node Id="25003:[22703..22939).1" Label="for (int i = 0; i $ n; i++)
            {
                sb.Append(lines[i]);
                if (i $ n - 1)
                {
                    sb.Append(',');
                }
                sb.AppendLine();
            } 677157" />
<Node Id="25003:[22703..22939).3" Label="for (int i = 0; i $ n; i++)
            {
                sb.Append(lines[i]);
                if (i $ n - 1)
                {
                    sb.Append(',');
                }
                sb.AppendLine();
            } 677158" />
<Node Id="25003:[18943..18992).3" Label="GetCommaSeparatedLines(assertText, expectedText); 677159" />
<Node Id="25003:[19106..19139).1" Label="assertText.AppendLine('Actual:'); 677160" />
<Node Id="25003:[19106..19139).3" Label="assertText.AppendLine('Actual:'); 677161" />
<Node Id="25003:[19153..19205).1" Label="var actualText = ArrayBuilder$string$.GetInstance(); 677162" />
<Node Id="25003:[19219..19250).1" Label="var e = actual.GetEnumerator(); 677163" />
<Node Id="25003:[19264..20938).1" Label="for (i = 0; e.MoveNext(); i++)
            {
                Diagnostic d = e.Current;
                string message = d.ToString();
                if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                }

                if (i $ 0)
                {
                    assertText.AppendLine(',');
                }

                if (includeDiagnosticMessagesAsComments)
                {
                    Indent(assertText, indentDepth);
                    assertText.Append('// ');
                    assertText.AppendLine(d.ToString());
                    var l = d.Location;
                    if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    }
                }

                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);
                var diffDescription = description;
                var idx = Array.IndexOf(expected, description);
                if (idx != -1)
                {
                    diffDescription = expected[idx];
                }
                assertText.Append(GetDiagnosticDescription(description, indentDepth));
                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));
            } 677164" />
<Node Id="25003:[19264..20938).3" Label="for (i = 0; e.MoveNext(); i++)
            {
                Diagnostic d = e.Current;
                string message = d.ToString();
                if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                }

                if (i $ 0)
                {
                    assertText.AppendLine(',');
                }

                if (includeDiagnosticMessagesAsComments)
                {
                    Indent(assertText, indentDepth);
                    assertText.Append('// ');
                    assertText.AppendLine(d.ToString());
                    var l = d.Location;
                    if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    }
                }

                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);
                var diffDescription = description;
                var idx = Array.IndexOf(expected, description);
                if (idx != -1)
                {
                    diffDescription = expected[idx];
                }
                assertText.Append(GetDiagnosticDescription(description, indentDepth));
                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));
            } 677165" />
<Node Id="25003:[20952..21034).1" Label="if (i $ 0)
            {
                assertText.AppendLine();
            } 677166" />
<Node Id="25003:[20952..21034).2" Label="if (i $ 0)
            {
                assertText.AppendLine();
            } 677167" />
<Node Id="25003:[21050..21081).1" Label="assertText.AppendLine('Diff:'); 677168" />
<Node Id="25003:[21050..21081).3" Label="assertText.AppendLine('Diff:'); 677169" />
<Node Id="25003:[21095..21192).1" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 677170" />
<Node Id="25003:[21095..21192).2" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 677171" />
<Node Id="25012:[3121..3141).1" Label="new[] { '\r', '\n' } 677172" />
<Node Id="25012:[3129..3133).1" Label="'\r' 677173" />
<Node Id="25012:[3135..3139).1" Label="'\n' 677174" />
<Node Id="25012:[3121..3141).4" Label="new[] { '\r', '\n' } 677175" />
<Node Id="25012:[3121..3141).5" Label="new[] { '\r', '\n' } 677176" />
<Node Id="25012:[3102..3141).1" Label="s_lineSplitChars = new[] { '\r', '\n' } 677177" />
<Node Id="25003:[21095..21192).3" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 677178" />
<Node Id="25003:[21095..21192).4" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 677179" />
<Node Id="25003:[21113..21190).1" Label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 677180" />
<Node Id="25012:[2473..2496).1" Label="param DiffReport(IEnumerable$T$ expected) 677181" />
<Node Id="25012:[2498..2519).1" Label="param DiffReport(IEnumerable$T$ actual) 677182" />
<Node Id="25012:[2521..2537).1" Label="param DiffReport(string separator) 677183" />
<Node Id="25012:[2539..2575).1" Label="param DiffReport(IEqualityComparer$T$ comparer = null) 677184" />
<Node Id="25012:[2577..2608).1" Label="param DiffReport(Func$T, string$ toString = null) 677185" />
<Node Id="25012:[2634..2703).1" Label="var lcs = (comparer != null) ? new LCS$T$(comparer) : LCS$T$.Default; 677186" />
<Node Id="25012:[2634..2703).2" Label="var lcs = (comparer != null) ? new LCS$T$(comparer) : LCS$T$.Default; 677187" />
<Node Id="25012:[2644..2662).1" Label="(comparer != null) 677188" />
<Node Id="25012:[1074..1101).1" Label="EqualityComparer$T$.Default 677189" />
<Node Id="25012:[1063..1102).1" Label="new LCS$T$(EqualityComparer$T$.Default) 677190" />
<Node Id="25012:[1194..1223).1" Label="param LCS(IEqualityComparer$T$ comparer) 677191" />
<Node Id="25012:[1183..1293).1" Label="param LCS(this) 677192" />
<Node Id="25012:[4230..4231).1" Label="1 677193" />
<Node Id="25012:[4217..4231).1" Label="DeleteCost = 1 677194" />
<Node Id="25012:[4277..4278).1" Label="1 677195" />
<Node Id="25012:[4264..4278).1" Label="InsertCost = 1 677196" />
<Node Id="25012:[4324..4325).1" Label="2 677197" />
<Node Id="25012:[4311..4325).1" Label="UpdateCost = 2 677198" />
<Node Id="25012:[3676..10647).1" Label="param LongestCommonSubsequence(this) 677199" />
<Node Id="25012:[1157..1166).1" Label="_comparer 677200" />
<Node Id="25012:[1257..1266).1" Label="_comparer 677201" />
<Node Id="25012:[1053..1102).1" Label="Default = new LCS$T$(EqualityComparer$T$.Default) 677202" />
<Node Id="25012:[2717..2783).1" Label="toString = toString ?? new Func$T, string$(obj =$ obj.ToString()); 677203" />
<Node Id="25012:[2717..2783).3" Label="toString = toString ?? new Func$T, string$(obj =$ obj.ToString()); 677204" />
<Node Id="25012:[2799..2869).1" Label="IList$T$ expectedList = expected as IList$T$ ?? new List$T$(expected); 677205" />
<Node Id="25012:[2883..2947).1" Label="IList$T$ actualList = actual as IList$T$ ?? new List$T$(actual); 677206" />
<Node Id="25012:[2963..3048).1" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 677207" />
<Node Id="25012:[2963..3048).2" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 677208" />
<Node Id="25012:[2963..3048).3" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 677209" />
<Node Id="25012:[2963..3048).4" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 677210" />
<Node Id="25012:[2993..3046).1" Label="lcs.CalculateDiff(expectedList, actualList, toString) 677211" />
<Node Id="25012:[1574..1592).1" Label="param CalculateDiff(IList$T$ sequenceA) 677212" />
<Node Id="25012:[1594..1612).1" Label="param CalculateDiff(IList$T$ sequenceB) 677213" />
<Node Id="25012:[1614..1638).1" Label="param CalculateDiff(Func$T, string$ toString) 677214" />
<Node Id="25012:[1533..2415).1" Label="param CalculateDiff(this) 677215" />
<Node Id="25012:[1672..2400).1" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 677216" />
<Node Id="25012:[1672..2400).2" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 677217" />
<Node Id="25012:[1672..2400).3" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 677218" />
<Node Id="25012:[1672..2400).4" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 677219" />
<Node Id="25012:[1693..1757).1" Label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 677220" />
<Node Id="25012:[5394..5413).1" Label="param GetEdits(TSequence sequenceA) 677221" />
<Node Id="25012:[5415..5426).1" Label="param GetEdits(int lengthA) 677222" />
<Node Id="25012:[5428..5447).1" Label="param GetEdits(TSequence sequenceB) 677223" />
<Node Id="25012:[5449..5460).1" Label="param GetEdits(int lengthB) 677224" />
<Node Id="25012:[5357..6686).1" Label="param GetEdits(this) 677225" />
<Node Id="25012:[5494..5563).1" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 677226" />
<Node Id="25012:[5494..5563).2" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 677227" />
<Node Id="25012:[5494..5563).3" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 677228" />
<Node Id="25012:[5494..5563).4" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 677229" />
<Node Id="25012:[5505..5562).1" Label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 677230" />
<Node Id="25012:[9402..9421).1" Label="param ComputeCostMatrix(TSequence sequenceA) 677231" />
<Node Id="25012:[9423..9434).1" Label="param ComputeCostMatrix(int lengthA) 677232" />
<Node Id="25012:[9436..9455).1" Label="param ComputeCostMatrix(TSequence sequenceB) 677233" />
<Node Id="25012:[9457..9468).1" Label="param ComputeCostMatrix(int lengthB) 677234" />
<Node Id="25012:[9369..10636).1" Label="param ComputeCostMatrix(this) 677235" />
<Node Id="25012:[9502..9523).1" Label="var la = lengthA + 1; 677236" />
<Node Id="25012:[9502..9523).2" Label="var la = lengthA + 1; 677237" />
<Node Id="25012:[9541..9562).1" Label="var lb = lengthB + 1; 677238" />
<Node Id="25012:[9541..9562).2" Label="var lb = lengthB + 1; 677239" />
<Node Id="25012:[9740..9764).1" Label="var d = new int[la, lb]; 677240" />
<Node Id="25012:[9784..9796).1" Label="d[0, 0] = 0; 677241" />
<Node Id="25012:[9784..9791).1" Label="d[0, 0] 677242" />
<Node Id="25012:[9814..9943).1" Label="for (int i = 1; i $= lengthA; i++)
                {
                    d[i, 0] = d[i - 1, 0] + DeleteCost;
                } 677243" />
<Node Id="25012:[9814..9943).3" Label="for (int i = 1; i $= lengthA; i++)
                {
                    d[i, 0] = d[i - 1, 0] + DeleteCost;
                } 677244" />
<Node Id="25012:[9963..10092).1" Label="for (int j = 1; j $= lengthB; j++)
                {
                    d[0, j] = d[0, j - 1] + InsertCost;
                } 677245" />
<Node Id="25012:[9963..10092).3" Label="for (int j = 1; j $= lengthB; j++)
                {
                    d[0, j] = d[0, j - 1] + InsertCost;
                } 677246" />
<Node Id="25012:[10112..10592).1" Label="for (int i = 1; i $= lengthA; i++)
                {
                    for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    }
                } 677247" />
<Node Id="25012:[10112..10592).3" Label="for (int i = 1; i $= lengthA; i++)
                {
                    for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    }
                } 677248" />
<Node Id="25012:[10612..10621).1" Label="return d; 677249" />
<Node Id="25012:[5581..5597).1" Label="int i = lengthA; 677250" />
<Node Id="25012:[5615..5631).1" Label="int j = lengthB; 677251" />
<Node Id="25012:[5651..6341).1" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 677252" />
<Node Id="25012:[5651..6341).2" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 677253" />
<Node Id="25012:[6361..6506).1" Label="while (i $ 0)
                {
                    i--;
                    yield return new Edit(EditKind.Delete, i, -1);
                } 677254" />
<Node Id="25012:[6361..6506).2" Label="while (i $ 0)
                {
                    i--;
                    yield return new Edit(EditKind.Delete, i, -1);
                } 677255" />
<Node Id="25012:[6526..6671).1" Label="while (j $ 0)
                {
                    j--;
                    yield return new Edit(EditKind.Insert, -1, j);
                } 677256" />
<Node Id="25012:[6526..6671).2" Label="while (j $ 0)
                {
                    j--;
                    yield return new Edit(EditKind.Insert, -1, j);
                } 677257" />
<Node Id="25012:[5357..6686).2" Label="param GetEdits(this) 677258" />
<Node Id="25012:[1672..2400).5" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 677259" />
<Node Id="25012:[1533..2415).2" Label="param CalculateDiff(this) 677260" />
<Node Id="25012:[2963..3048).5" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 677261" />
<Node Id="25012:[2963..3048).7" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 677262" />
<Node Id="25003:[21095..21192).10" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 677263" />
<Node Id="25003:[21208..21226).1" Label="actualText.Free(); 677264" />
<Node Id="25003:[21240..21260).1" Label="expectedText.Free(); 677265" />
<Node Id="25003:[21276..21305).1" Label="return assertText.ToString(); 677266" />
<Node Id="25002:[4102..4181).5" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 677267" />
<Node Id="25002:[2401..2451).3" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 677268" />
<Node Id="25002:[4446..4475).3" Label="diagnostics.Verify(expected); 677269" />
<Node Id="25002:[4489..4523).1" Label="VerifyAssemblyIds(c, diagnostics); 677270" />
<Node Id="25002:[4489..4523).2" Label="VerifyAssemblyIds(c, diagnostics); 677271" />
<Node Id="25002:[4489..4522).1" Label="VerifyAssemblyIds(c, diagnostics) 677272" />
<Node Id="25002:[4637..4651).1" Label="param VerifyAssemblyIds(TCompilation c) 677273" />
<Node Id="25002:[4653..4691).1" Label="param VerifyAssemblyIds(ImmutableArray$Diagnostic$ diagnostics) 677274" />
<Node Id="25002:[4750..5836).1" Label="foreach (var diagnostic in diagnostics)
            {
                // If this is a diagnostic about a missing assembly, make sure that we can get back
                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about
                // a missing assembly, make sure we get no results back.
                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.False(assemblyIds.IsEmpty);

                    var diagnosticMessage = diagnostic.GetMessage();
                    foreach (var id in assemblyIds)
                    {
                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);
                    }
                }
                else
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.True(assemblyIds.IsEmpty);
                }
            } 677275" />
<Node Id="25002:[4489..4523).3" Label="VerifyAssemblyIds(c, diagnostics); 677276" />
<Node Id="25002:[4539..4548).1" Label="return c; 677277" />
</Nodes>
<Links>
<Link Source="25014:[390..448).1" Target="EXTERNAL" />
<Link Source="25014:[390..448).1" Target="25014:[387..448).1" />
<Link Source="28001:[588..156578).1" Target="25014:[387..448).1" />
<Link Source="21002:[772..793).1" Target="21002:[790..793).1" />
<Link Source="21002:[825..848).1" Target="21002:[845..848).1" />
<Link Source="21002:[3098..25375).1" Target="21002:[3243..25375).1" />
<Link Source="21002:[678..25421).1" Target="28001:[588..156578).1" />
<Link Source="21003:[1308..2835).1" Target="21003:[1338..2835).1" />
<Link Source="21003:[2871..3440).1" Target="21003:[2908..3440).1" />
<Link Source="21003:[3476..3915).1" Target="21003:[3516..3915).1" />
<Link Source="21003:[4192..4448).1" Target="21003:[4223..4448).1" />
<Link Source="21003:[4484..4746).1" Target="21003:[4518..4746).1" />
<Link Source="21003:[4782..5071).1" Target="21003:[4813..5071).1" />
<Link Source="21003:[5107..5397).1" Target="21003:[5142..5397).1" />
<Link Source="21003:[5433..5718).1" Target="21003:[5462..5718).1" />
<Link Source="21003:[5754..6038).1" Target="21003:[5787..6038).1" />
<Link Source="21003:[6074..6460).1" Target="21003:[6109..6460).1" />
<Link Source="21003:[6496..6920).1" Target="21003:[6535..6920).1" />
<Link Source="21003:[6956..7250).1" Target="21003:[6993..7250).1" />
<Link Source="21003:[7286..7557).1" Target="21003:[7321..7557).1" />
<Link Source="21003:[7593..7980).1" Target="21003:[7631..7980).1" />
<Link Source="21003:[8016..8155).1" Target="21003:[8047..8155).1" />
<Link Source="21003:[8191..8359).1" Target="21003:[8220..8359).1" />
<Link Source="21003:[8395..20279).1" Target="21003:[8415..20279).1" />
<Link Source="21003:[20315..20617).1" Target="21003:[20353..20617).1" />
<Link Source="21003:[20653..21473).1" Target="21003:[20689..21473).1" />
<Link Source="25004:[2227..2317).1" Target="EXTERNAL" />
<Link Source="25004:[2332..2368).1" Target="EXTERNAL" />
<Link Source="25004:[2183..2369).1" Target="25004:[2227..2317).1" />
<Link Source="25004:[2183..2369).1" Target="25004:[2332..2368).1" />
<Link Source="25004:[2183..2369).1" Target="EXTERNAL" />
<Link Source="25004:[2155..2369).1" Target="25004:[2183..2369).1" />
<Link Source="25004:[2602..2696).1" Target="EXTERNAL" />
<Link Source="25004:[2711..2747).1" Target="EXTERNAL" />
<Link Source="25004:[2558..2748).1" Target="25004:[2602..2696).1" />
<Link Source="25004:[2558..2748).1" Target="25004:[2711..2747).1" />
<Link Source="25004:[2558..2748).1" Target="25004:[2183..2369).1" />
<Link Source="25004:[2531..2748).1" Target="25004:[2558..2748).1" />
<Link Source="25004:[2914..2947).1" Target="EXTERNAL" />
<Link Source="25004:[3094..3171).1" Target="25004:[2914..2947).1" />
<Link Source="25004:[3077..3172).1" Target="25004:[3094..3171).1" />
<Link Source="25004:[3077..3172).1" Target="25004:[2914..2947).1" />
<Link Source="25004:[2894..3172).1" Target="25004:[3077..3172).1" />
<Link Source="25004:[5182..5218).1" Target="EXTERNAL" />
<Link Source="25004:[3446..5219).1" Target="25004:[3490..5167).1" />
<Link Source="25004:[3446..5219).1" Target="25004:[5182..5218).1" />
<Link Source="25004:[3432..5219).1" Target="25004:[3446..5219).1" />
<Link Source="25004:[5576..5645).1" Target="EXTERNAL" />
<Link Source="25004:[5660..5696).1" Target="EXTERNAL" />
<Link Source="25004:[5532..5697).1" Target="25004:[5576..5645).1" />
<Link Source="25004:[5532..5697).1" Target="25004:[5660..5696).1" />
<Link Source="25004:[5532..5697).1" Target="EXTERNAL" />
<Link Source="25004:[5508..5697).1" Target="25004:[5532..5697).1" />
<Link Source="25004:[6321..6439).1" Target="EXTERNAL" />
<Link Source="25004:[6458..6494).1" Target="EXTERNAL" />
<Link Source="25004:[6275..6495).1" Target="25004:[6321..6439).1" />
<Link Source="25004:[6275..6495).1" Target="25004:[6458..6494).1" />
<Link Source="25004:[6275..6495).1" Target="25004:[2558..2748).1" />
<Link Source="25004:[6244..6495).1" Target="25004:[6275..6495).1" />
<Link Source="25004:[6714..6838).1" Target="EXTERNAL" />
<Link Source="25004:[6853..6889).1" Target="EXTERNAL" />
<Link Source="25004:[6672..6890).1" Target="25004:[6714..6838).1" />
<Link Source="25004:[6672..6890).1" Target="25004:[6853..6889).1" />
<Link Source="25004:[6672..6890).1" Target="25004:[6275..6495).1" />
<Link Source="25004:[6637..6890).1" Target="25004:[6672..6890).1" />
<Link Source="25004:[7130..7249).1" Target="EXTERNAL" />
<Link Source="25004:[7264..7300).1" Target="EXTERNAL" />
<Link Source="25004:[7088..7301).1" Target="25004:[7130..7249).1" />
<Link Source="25004:[7088..7301).1" Target="25004:[7264..7300).1" />
<Link Source="25004:[7088..7301).1" Target="25004:[6672..6890).1" />
<Link Source="25004:[7066..7301).1" Target="25004:[7088..7301).1" />
<Link Source="25004:[7532..7667).1" Target="EXTERNAL" />
<Link Source="25004:[7682..7718).1" Target="EXTERNAL" />
<Link Source="25004:[7490..7719).1" Target="25004:[7532..7667).1" />
<Link Source="25004:[7490..7719).1" Target="25004:[7682..7718).1" />
<Link Source="25004:[7490..7719).1" Target="EXTERNAL" />
<Link Source="25004:[7464..7719).1" Target="25004:[7490..7719).1" />
<Link Source="25004:[7940..8064).1" Target="EXTERNAL" />
<Link Source="25004:[8079..8115).1" Target="EXTERNAL" />
<Link Source="25004:[7898..8116).1" Target="25004:[7940..8064).1" />
<Link Source="25004:[7898..8116).1" Target="25004:[8079..8115).1" />
<Link Source="25004:[7898..8116).1" Target="EXTERNAL" />
<Link Source="25004:[7877..8116).1" Target="25004:[7898..8116).1" />
<Link Source="25004:[8324..8442).1" Target="EXTERNAL" />
<Link Source="25004:[8457..8493).1" Target="EXTERNAL" />
<Link Source="25004:[8282..8494).1" Target="25004:[8324..8442).1" />
<Link Source="25004:[8282..8494).1" Target="25004:[8457..8493).1" />
<Link Source="25004:[8282..8494).1" Target="EXTERNAL" />
<Link Source="25004:[8264..8494).1" Target="25004:[8282..8494).1" />
<Link Source="25004:[8694..8807).1" Target="EXTERNAL" />
<Link Source="25004:[8822..8858).1" Target="EXTERNAL" />
<Link Source="25004:[8652..8859).1" Target="25004:[8694..8807).1" />
<Link Source="25004:[8652..8859).1" Target="25004:[8822..8858).1" />
<Link Source="25004:[8652..8859).1" Target="25004:[7088..7301).1" />
<Link Source="25004:[8636..8859).1" Target="25004:[8652..8859).1" />
<Link Source="25004:[9063..9214).1" Target="EXTERNAL" />
<Link Source="25004:[9229..9265).1" Target="EXTERNAL" />
<Link Source="25004:[9021..9266).1" Target="25004:[9063..9214).1" />
<Link Source="25004:[9021..9266).1" Target="25004:[9229..9265).1" />
<Link Source="25004:[9021..9266).1" Target="EXTERNAL" />
<Link Source="25004:[8997..9266).1" Target="25004:[9021..9266).1" />
<Link Source="25004:[10404..10440).1" Target="EXTERNAL" />
<Link Source="25004:[9436..10441).1" Target="25004:[9478..10389).1" />
<Link Source="25004:[9436..10441).1" Target="25004:[10404..10440).1" />
<Link Source="25004:[9420..10441).1" Target="25004:[9436..10441).1" />
<Link Source="25004:[10811..10967).1" Target="EXTERNAL" />
<Link Source="25004:[10982..11018).1" Target="EXTERNAL" />
<Link Source="25004:[10769..11019).1" Target="25004:[10811..10967).1" />
<Link Source="25004:[10769..11019).1" Target="25004:[10982..11018).1" />
<Link Source="25004:[10769..11019).1" Target="25004:[8652..8859).1" />
<Link Source="25004:[10749..11019).1" Target="25004:[10769..11019).1" />
<Link Source="25004:[11415..11589).1" Target="EXTERNAL" />
<Link Source="25004:[11604..11640).1" Target="EXTERNAL" />
<Link Source="25004:[11373..11641).1" Target="25004:[11415..11589).1" />
<Link Source="25004:[11373..11641).1" Target="25004:[11604..11640).1" />
<Link Source="25004:[11373..11641).1" Target="EXTERNAL" />
<Link Source="25004:[11345..11641).1" Target="25004:[11373..11641).1" />
<Link Source="25004:[12432..12560).1" Target="EXTERNAL" />
<Link Source="25004:[12575..12611).1" Target="EXTERNAL" />
<Link Source="25004:[12390..12612).1" Target="25004:[12432..12560).1" />
<Link Source="25004:[12390..12612).1" Target="25004:[12575..12611).1" />
<Link Source="25004:[12390..12612).1" Target="EXTERNAL" />
<Link Source="25004:[12369..12612).1" Target="25004:[12390..12612).1" />
<Link Source="25004:[12815..12944).1" Target="EXTERNAL" />
<Link Source="25004:[12959..12995).1" Target="EXTERNAL" />
<Link Source="25004:[12773..12996).1" Target="25004:[12815..12944).1" />
<Link Source="25004:[12773..12996).1" Target="25004:[12959..12995).1" />
<Link Source="25004:[12773..12996).1" Target="EXTERNAL" />
<Link Source="25004:[12760..12996).1" Target="25004:[12773..12996).1" />
<Link Source="25004:[13204..13343).1" Target="EXTERNAL" />
<Link Source="25004:[13358..13394).1" Target="EXTERNAL" />
<Link Source="25004:[13162..13395).1" Target="25004:[13204..13343).1" />
<Link Source="25004:[13162..13395).1" Target="25004:[13358..13394).1" />
<Link Source="25004:[13162..13395).1" Target="EXTERNAL" />
<Link Source="25004:[13138..13395).1" Target="25004:[13162..13395).1" />
<Link Source="25004:[13621..13796).1" Target="EXTERNAL" />
<Link Source="25004:[13811..13847).1" Target="EXTERNAL" />
<Link Source="25004:[13579..13848).1" Target="25004:[13621..13796).1" />
<Link Source="25004:[13579..13848).1" Target="25004:[13811..13847).1" />
<Link Source="25004:[13579..13848).1" Target="EXTERNAL" />
<Link Source="25004:[13551..13848).1" Target="25004:[13579..13848).1" />
<Link Source="25004:[14066..14175).1" Target="EXTERNAL" />
<Link Source="25004:[14190..14226).1" Target="EXTERNAL" />
<Link Source="25004:[14024..14227).1" Target="25004:[14066..14175).1" />
<Link Source="25004:[14024..14227).1" Target="25004:[14190..14226).1" />
<Link Source="25004:[14024..14227).1" Target="25004:[10769..11019).1" />
<Link Source="25004:[14010..14227).1" Target="25004:[14024..14227).1" />
<Link Source="25004:[14421..14531).1" Target="EXTERNAL" />
<Link Source="25004:[14546..14582).1" Target="EXTERNAL" />
<Link Source="25004:[14379..14583).1" Target="25004:[14421..14531).1" />
<Link Source="25004:[14379..14583).1" Target="25004:[14546..14582).1" />
<Link Source="25004:[14379..14583).1" Target="25004:[14024..14227).1" />
<Link Source="25004:[14361..14583).1" Target="25004:[14379..14583).1" />
<Link Source="25004:[14798..14913).1" Target="EXTERNAL" />
<Link Source="25004:[14928..14964).1" Target="EXTERNAL" />
<Link Source="25004:[14756..14965).1" Target="25004:[14798..14913).1" />
<Link Source="25004:[14756..14965).1" Target="25004:[14928..14964).1" />
<Link Source="25004:[14756..14965).1" Target="25004:[14379..14583).1" />
<Link Source="25004:[14725..14965).1" Target="25004:[14756..14965).1" />
<Link Source="25004:[15193..15301).1" Target="EXTERNAL" />
<Link Source="25004:[15316..15352).1" Target="EXTERNAL" />
<Link Source="25004:[15151..15353).1" Target="25004:[15193..15301).1" />
<Link Source="25004:[15151..15353).1" Target="25004:[15316..15352).1" />
<Link Source="25004:[15151..15353).1" Target="25004:[14756..14965).1" />
<Link Source="25004:[15133..15353).1" Target="25004:[15151..15353).1" />
<Link Source="25004:[15554..15670).1" Target="EXTERNAL" />
<Link Source="25004:[15685..15721).1" Target="EXTERNAL" />
<Link Source="25004:[15512..15722).1" Target="25004:[15554..15670).1" />
<Link Source="25004:[15512..15722).1" Target="25004:[15685..15721).1" />
<Link Source="25004:[15512..15722).1" Target="EXTERNAL" />
<Link Source="25004:[15495..15722).1" Target="25004:[15512..15722).1" />
<Link Source="25004:[15925..16050).1" Target="EXTERNAL" />
<Link Source="25004:[16065..16101).1" Target="EXTERNAL" />
<Link Source="25004:[15883..16102).1" Target="25004:[15925..16050).1" />
<Link Source="25004:[15883..16102).1" Target="25004:[16065..16101).1" />
<Link Source="25004:[15883..16102).1" Target="EXTERNAL" />
<Link Source="25004:[15862..16102).1" Target="25004:[15883..16102).1" />
<Link Source="25004:[16314..16416).1" Target="EXTERNAL" />
<Link Source="25004:[16431..16467).1" Target="EXTERNAL" />
<Link Source="25004:[16272..16468).1" Target="25004:[16314..16416).1" />
<Link Source="25004:[16272..16468).1" Target="25004:[16431..16467).1" />
<Link Source="25004:[16272..16468).1" Target="25004:[15151..15353).1" />
<Link Source="25004:[16250..16468).1" Target="25004:[16272..16468).1" />
<Link Source="25004:[16687..16800).1" Target="EXTERNAL" />
<Link Source="25004:[16815..16851).1" Target="EXTERNAL" />
<Link Source="25004:[16645..16852).1" Target="25004:[16687..16800).1" />
<Link Source="25004:[16645..16852).1" Target="25004:[16815..16851).1" />
<Link Source="25004:[16645..16852).1" Target="EXTERNAL" />
<Link Source="25004:[16618..16852).1" Target="25004:[16645..16852).1" />
<Link Source="25004:[17083..17200).1" Target="EXTERNAL" />
<Link Source="25004:[17215..17251).1" Target="EXTERNAL" />
<Link Source="25004:[17041..17252).1" Target="25004:[17083..17200).1" />
<Link Source="25004:[17041..17252).1" Target="25004:[17215..17251).1" />
<Link Source="25004:[17041..17252).1" Target="EXTERNAL" />
<Link Source="25004:[17012..17252).1" Target="25004:[17041..17252).1" />
<Link Source="25004:[17497..17625).1" Target="EXTERNAL" />
<Link Source="25004:[17640..17676).1" Target="EXTERNAL" />
<Link Source="25004:[17455..17677).1" Target="25004:[17497..17625).1" />
<Link Source="25004:[17455..17677).1" Target="25004:[17640..17676).1" />
<Link Source="25004:[17455..17677).1" Target="EXTERNAL" />
<Link Source="25004:[17421..17677).1" Target="25004:[17455..17677).1" />
<Link Source="25004:[17911..18059).1" Target="EXTERNAL" />
<Link Source="25004:[18074..18110).1" Target="EXTERNAL" />
<Link Source="25004:[17869..18111).1" Target="25004:[17911..18059).1" />
<Link Source="25004:[17869..18111).1" Target="25004:[18074..18110).1" />
<Link Source="25004:[17869..18111).1" Target="25004:[16272..16468).1" />
<Link Source="25004:[17850..18111).1" Target="25004:[17869..18111).1" />
<Link Source="25004:[18321..18481).1" Target="EXTERNAL" />
<Link Source="25004:[18496..18532).1" Target="EXTERNAL" />
<Link Source="25004:[18279..18533).1" Target="25004:[18321..18481).1" />
<Link Source="25004:[18279..18533).1" Target="25004:[18496..18532).1" />
<Link Source="25004:[18279..18533).1" Target="EXTERNAL" />
<Link Source="25004:[18255..18533).1" Target="25004:[18279..18533).1" />
<Link Source="25004:[18754..18880).1" Target="EXTERNAL" />
<Link Source="25004:[18895..18931).1" Target="EXTERNAL" />
<Link Source="25004:[18712..18932).1" Target="25004:[18754..18880).1" />
<Link Source="25004:[18712..18932).1" Target="25004:[18895..18931).1" />
<Link Source="25004:[18712..18932).1" Target="EXTERNAL" />
<Link Source="25004:[18687..18932).1" Target="25004:[18712..18932).1" />
<Link Source="25004:[19120..19147).1" Target="25004:[19130..19147).1" />
<Link Source="25004:[19094..19148).5" Target="25004:[19120..19147).1" />
<Link Source="25004:[19094..19148).5" Target="25004:[19094..19148).1" />
<Link Source="25004:[19081..19148).1" Target="25004:[19094..19148).5" />
<Link Source="25004:[10673..10688).1" Target="EXTERNAL" />
<Link Source="25004:[10673..10688).1" Target="21003:[51329..51357).1" />
<Link Source="21003:[51307..51358).1" Target="25004:[10673..10688).1" />
<Link Source="21003:[51307..51358).1" Target="EXTERNAL" />
<Link Source="21003:[51292..51358).1" Target="21003:[51307..51358).1" />
<Link Source="21003:[56524..56550).1" Target="21003:[56538..56550).1" />
<Link Source="21003:[56584..56609).1" Target="21003:[56596..56609).1" />
<Link Source="21003:[92381..99056).1" Target="21003:[92394..99056).1" />
<Link Source="21003:[101743..102290).1" Target="21003:[101764..102290).1" />
<Link Source="21003:[1215..102298).1" Target="21002:[678..25421).1" />
<Link Source="25015:[917..26825).1" Target="21003:[1215..102298).1" />
<Link Source="25004:[926..968).1" Target="25015:[917..26825).1" />
<Link Source="25004:[908..913).1" Target="25004:[926..968).1" />
<Link Source="25004:[908..913).1" Target="25015:[917..26825).1" />
<Link Source="25014:[387..448).372" Target="25014:[387..448).1" />
<Link Source="25014:[387..448).372" Target="25014:[390..448).1" />
<Link Source="25014:[387..448).372" Target="25004:[908..913).1" />
<Link Source="28001:[21417..21907).1" Target="25014:[387..448).1" />
<Link Source="28001:[21494..21836).1" Target="25014:[387..448).1" />
<Link Source="28001:[21850..21896).1" Target="28001:[21494..21836).1" />
<Link Source="28001:[21850..21896).1" Target="25014:[387..448).1" />
<Link Source="28001:[21868..21874).1" Target="25014:[387..448).1" />
<Link Source="21004:[2251..2264).1" Target="28001:[21850..21896).1" />
<Link Source="21004:[2251..2264).1" Target="28001:[21868..21874).1" />
<Link Source="21004:[2290..2296).1" Target="21004:[2251..2264).1" />
<Link Source="21004:[2290..2296).1" Target="28001:[21868..21874).1" />
<Link Source="21004:[2269..2297).1" Target="28001:[21868..21874).1" />
<Link Source="21004:[839..851).1" Target="21004:[2290..2296).1" />
<Link Source="21004:[839..851).1" Target="21004:[2269..2297).1" />
<Link Source="21004:[814..902).1" Target="21004:[2269..2297).1" />
<Link Source="21004:[877..882).1" Target="21004:[839..851).1" />
<Link Source="21004:[877..882).1" Target="21004:[814..902).1" />
<Link Source="21004:[877..882).1" Target="21004:[2269..2297).1" />
<Link Source="28001:[21850..21896).2" Target="21004:[2269..2297).1" />
<Link Source="28001:[21850..21896).2" Target="25014:[387..448).1" />
<Link Source="28001:[21850..21896).4" Target="25014:[387..448).1" />
<Link Source="28001:[21850..21875).1" Target="25014:[387..448).1" />
<Link Source="21003:[44736..44759).1" Target="28001:[21850..21896).2" />
<Link Source="21003:[44736..44759).1" Target="28001:[21850..21875).1" />
<Link Source="21003:[44774..44822).1" Target="28001:[21850..21896).4" />
<Link Source="21003:[44774..44822).1" Target="28001:[21850..21875).1" />
<Link Source="21003:[44837..44876).1" Target="28001:[21850..21896).4" />
<Link Source="21003:[44837..44876).1" Target="28001:[21850..21875).1" />
<Link Source="21003:[44891..44929).1" Target="28001:[21850..21896).4" />
<Link Source="21003:[44891..44929).1" Target="28001:[21850..21875).1" />
<Link Source="21003:[44944..45002).1" Target="28001:[21850..21896).4" />
<Link Source="21003:[44944..45002).1" Target="28001:[21850..21875).1" />
<Link Source="21003:[45017..45041).1" Target="28001:[21850..21896).4" />
<Link Source="21003:[45017..45041).1" Target="28001:[21850..21875).1" />
<Link Source="21003:[45056..45082).1" Target="28001:[21850..21896).4" />
<Link Source="21003:[45056..45082).1" Target="28001:[21850..21875).1" />
<Link Source="21003:[45097..45128).1" Target="28001:[21850..21896).4" />
<Link Source="21003:[45097..45128).1" Target="28001:[21850..21875).1" />
<Link Source="21003:[45156..45162).1" Target="21003:[44736..44759).1" />
<Link Source="21003:[45156..45162).1" Target="28001:[21850..21875).1" />
<Link Source="21003:[45198..45213).1" Target="21003:[44944..45002).1" />
<Link Source="21003:[45198..45213).1" Target="28001:[21850..21875).1" />
<Link Source="21003:[45215..45225).1" Target="21003:[44774..44822).1" />
<Link Source="21003:[45215..45225).1" Target="28001:[21850..21875).1" />
<Link Source="21003:[45164..45226).1" Target="28001:[21850..21875).1" />
<Link Source="25005:[9600..9618).1" Target="21003:[45198..45213).1" />
<Link Source="25005:[9600..9618).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9620..9671).1" Target="21003:[45215..45225).1" />
<Link Source="25005:[9620..9671).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9697..9732).1" Target="25005:[9600..9618).1" />
<Link Source="25005:[9697..9732).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9714..9731).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[7569..7600).1" Target="25005:[9697..9732).1" />
<Link Source="25005:[7569..7600).1" Target="25005:[9714..9731).1" />
<Link Source="25005:[7605..9525).1" Target="25005:[7569..7600).1" />
<Link Source="25005:[7605..9525).1" Target="25005:[9714..9731).1" />
<Link Source="25005:[8889..8907).1" Target="25005:[7605..9525).1" />
<Link Source="25005:[6208..6241).1" Target="EXTERNAL" />
<Link Source="25005:[6208..6241).1" Target="25005:[8889..8907).1" />
<Link Source="25005:[6270..6298).1" Target="25005:[6208..6241).1" />
<Link Source="25005:[4543..4693).1" Target="25005:[6270..6298).1" />
<Link Source="25005:[4648..4670).1" Target="25005:[6270..6298).1" />
<Link Source="25004:[12011..12051).1" Target="EXTERNAL" />
<Link Source="25004:[12011..12051).1" Target="25005:[4648..4670).1" />
<Link Source="25005:[4543..4693).7" Target="25004:[12011..12051).1" />
<Link Source="25005:[4543..4693).7" Target="25005:[4543..4693).1" />
<Link Source="25005:[4543..4693).7" Target="25005:[6270..6298).1" />
<Link Source="25005:[6208..6298).1" Target="25005:[4543..4693).7" />
<Link Source="25005:[6208..6298).1" Target="25005:[8889..8907).1" />
<Link Source="25005:[9746..9845).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9746..9845).2" Target="25005:[9620..9671).1" />
<Link Source="25005:[9746..9845).2" Target="25005:[9746..9845).1" />
<Link Source="25005:[9746..9845).2" Target="21003:[45164..45226).1" />
<Link Source="25005:[9812..9830).1" Target="25005:[6208..6298).1" />
<Link Source="25005:[9812..9830).1" Target="25005:[9746..9845).2" />
<Link Source="21003:[45228..45235).1" Target="21003:[44837..44876).1" />
<Link Source="21003:[45228..45235).1" Target="28001:[21850..21875).1" />
<Link Source="21003:[45237..45249).1" Target="21003:[44891..44929).1" />
<Link Source="21003:[45237..45249).1" Target="28001:[21850..21875).1" />
<Link Source="21003:[45251..45263).1" Target="21003:[45017..45041).1" />
<Link Source="21003:[45251..45263).1" Target="28001:[21850..21875).1" />
<Link Source="21003:[45265..45279).1" Target="21003:[45056..45082).1" />
<Link Source="21003:[45265..45279).1" Target="28001:[21850..21875).1" />
<Link Source="21003:[45281..45299).1" Target="21003:[45097..45128).1" />
<Link Source="21003:[45281..45299).1" Target="28001:[21850..21875).1" />
<Link Source="21003:[45133..45300).1" Target="28001:[21850..21875).1" />
<Link Source="21003:[45382..45405).1" Target="21003:[45156..45162).1" />
<Link Source="21003:[45382..45405).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45420..45468).1" Target="25005:[9812..9830).1" />
<Link Source="21003:[45420..45468).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45483..45522).1" Target="21003:[45228..45235).1" />
<Link Source="21003:[45483..45522).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45537..45575).1" Target="21003:[45237..45249).1" />
<Link Source="21003:[45537..45575).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45590..45614).1" Target="21003:[45251..45263).1" />
<Link Source="21003:[45590..45614).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45629..45655).1" Target="21003:[45265..45279).1" />
<Link Source="21003:[45629..45655).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45670..45701).1" Target="21003:[45281..45299).1" />
<Link Source="21003:[45670..45701).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45728..45734).1" Target="21003:[45382..45405).1" />
<Link Source="21003:[45728..45734).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45736..45746).1" Target="21003:[45420..45468).1" />
<Link Source="21003:[45736..45746).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45748..45755).1" Target="21003:[45483..45522).1" />
<Link Source="21003:[45748..45755).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45757..45769).1" Target="21003:[45537..45575).1" />
<Link Source="21003:[45757..45769).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45771..45783).1" Target="21003:[45590..45614).1" />
<Link Source="21003:[45771..45783).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45785..45799).1" Target="21003:[45629..45655).1" />
<Link Source="21003:[45785..45799).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45801..45819).1" Target="21003:[45670..45701).1" />
<Link Source="21003:[45801..45819).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45842..45846).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45821..45846).1" Target="21003:[45842..45846).1" />
<Link Source="21003:[45821..45846).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45706..45847).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45929..45952).1" Target="21003:[45728..45734).1" />
<Link Source="21003:[45929..45952).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[45967..46008).1" Target="21003:[45736..45746).1" />
<Link Source="21003:[45967..46008).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46023..46055).1" Target="21003:[45748..45755).1" />
<Link Source="21003:[46023..46055).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46070..46101).1" Target="21003:[45757..45769).1" />
<Link Source="21003:[46070..46101).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46116..46135).1" Target="21003:[45771..45783).1" />
<Link Source="21003:[46116..46135).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46150..46171).1" Target="21003:[45785..45799).1" />
<Link Source="21003:[46150..46171).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46186..46209).1" Target="21003:[45801..45819).1" />
<Link Source="21003:[46186..46209).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46224..46254).1" Target="21003:[45821..45846).1" />
<Link Source="21003:[46224..46254).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46280..46350).1" Target="21003:[46070..46101).1" />
<Link Source="21003:[46280..46350).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46280..46350).2" Target="21003:[46150..46171).1" />
<Link Source="21003:[46280..46350).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[46298..46349).1" Target="21003:[45706..45847).1" />
<Link Source="21004:[949..980).1" Target="21003:[46280..46350).1" />
<Link Source="21004:[949..980).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[982..1008).1" Target="21003:[46280..46350).2" />
<Link Source="21004:[982..1008).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[914..2190).1" Target="21003:[45929..45952).1" />
<Link Source="21004:[914..2190).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[1034..2179).1" Target="21004:[914..2190).1" />
<Link Source="21004:[1034..2179).1" Target="21004:[877..882).1" />
<Link Source="21004:[1034..2179).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[1122..1208).1" Target="21004:[1034..2179).1" />
<Link Source="21004:[1122..1208).3" Target="21004:[982..1008).1" />
<Link Source="21004:[1122..1208).3" Target="21004:[1034..2179).1" />
<Link Source="21004:[1122..1208).4" Target="21004:[949..980).1" />
<Link Source="21004:[1122..1208).4" Target="21004:[1034..2179).1" />
<Link Source="21004:[1137..1205).1" Target="21004:[1034..2179).1" />
<Link Source="21003:[34078..34089).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[34078..34089).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34091..34111).1" Target="21004:[1122..1208).3" />
<Link Source="21003:[34091..34111).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34113..34146).1" Target="21004:[1122..1208).4" />
<Link Source="21003:[34113..34146).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34148..34172).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[34148..34172).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34198..34304).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34198..34304).2" Target="21003:[34113..34146).1" />
<Link Source="21003:[34198..34304).2" Target="21003:[34198..34304).1" />
<Link Source="21003:[34198..34304).2" Target="21004:[1137..1205).1" />
<Link Source="21010:[590..618).1" Target="EXTERNAL" />
<Link Source="21010:[620..662).1" Target="EXTERNAL" />
<Link Source="21010:[567..663).5" Target="21010:[590..618).1" />
<Link Source="21010:[567..663).5" Target="21010:[620..662).1" />
<Link Source="21010:[567..663).5" Target="21010:[567..663).1" />
<Link Source="21010:[557..663).1" Target="21010:[567..663).5" />
<Link Source="21010:[742..763).1" Target="EXTERNAL" />
<Link Source="21010:[725..764).1" Target="21010:[557..663).1" />
<Link Source="21010:[725..764).1" Target="21010:[567..663).5" />
<Link Source="21010:[725..764).1" Target="21010:[742..763).1" />
<Link Source="21010:[716..764).1" Target="21010:[725..764).1" />
<Link Source="21010:[856..879).1" Target="EXTERNAL" />
<Link Source="21010:[828..880).1" Target="21010:[557..663).1" />
<Link Source="21010:[828..880).1" Target="21010:[567..663).5" />
<Link Source="21010:[828..880).1" Target="21010:[856..879).1" />
<Link Source="21010:[817..880).1" Target="21010:[828..880).1" />
<Link Source="21010:[972..995).1" Target="EXTERNAL" />
<Link Source="21010:[944..996).1" Target="21010:[557..663).1" />
<Link Source="21010:[944..996).1" Target="21010:[567..663).5" />
<Link Source="21010:[944..996).1" Target="21010:[972..995).1" />
<Link Source="21010:[933..996).1" Target="21010:[944..996).1" />
<Link Source="21010:[1090..1115).1" Target="EXTERNAL" />
<Link Source="21010:[1062..1116).1" Target="21010:[557..663).1" />
<Link Source="21010:[1062..1116).1" Target="21010:[567..663).5" />
<Link Source="21010:[1062..1116).1" Target="21010:[1090..1115).1" />
<Link Source="21010:[1049..1116).1" Target="21010:[1062..1116).1" />
<Link Source="21010:[1210..1235).1" Target="EXTERNAL" />
<Link Source="21010:[1182..1236).1" Target="21010:[557..663).1" />
<Link Source="21010:[1182..1236).1" Target="21010:[567..663).5" />
<Link Source="21010:[1182..1236).1" Target="21010:[1210..1235).1" />
<Link Source="21010:[1169..1236).1" Target="21010:[1182..1236).1" />
<Link Source="21010:[1330..1355).1" Target="EXTERNAL" />
<Link Source="21010:[1302..1356).1" Target="21010:[557..663).1" />
<Link Source="21010:[1302..1356).1" Target="21010:[567..663).5" />
<Link Source="21010:[1302..1356).1" Target="21010:[1330..1355).1" />
<Link Source="21010:[1289..1356).1" Target="21010:[1302..1356).1" />
<Link Source="21010:[1454..1477).1" Target="EXTERNAL" />
<Link Source="21010:[1426..1478).1" Target="21010:[557..663).1" />
<Link Source="21010:[1426..1478).1" Target="21010:[567..663).5" />
<Link Source="21010:[1426..1478).1" Target="21010:[1454..1477).1" />
<Link Source="21010:[1409..1478).1" Target="21010:[1426..1478).1" />
<Link Source="21010:[1576..1599).1" Target="EXTERNAL" />
<Link Source="21010:[1548..1600).1" Target="21010:[557..663).1" />
<Link Source="21010:[1548..1600).1" Target="21010:[567..663).5" />
<Link Source="21010:[1548..1600).1" Target="21010:[1576..1599).1" />
<Link Source="21010:[1531..1600).1" Target="21010:[1548..1600).1" />
<Link Source="21010:[1692..1715).1" Target="EXTERNAL" />
<Link Source="21010:[1664..1716).1" Target="21010:[557..663).1" />
<Link Source="21010:[1664..1716).1" Target="21010:[567..663).5" />
<Link Source="21010:[1664..1716).1" Target="21010:[1692..1715).1" />
<Link Source="21010:[1653..1716).1" Target="21010:[1664..1716).1" />
<Link Source="21010:[1808..1831).1" Target="EXTERNAL" />
<Link Source="21010:[1780..1832).1" Target="21010:[557..663).1" />
<Link Source="21010:[1780..1832).1" Target="21010:[567..663).5" />
<Link Source="21010:[1780..1832).1" Target="21010:[1808..1831).1" />
<Link Source="21010:[1769..1832).1" Target="21010:[1780..1832).1" />
<Link Source="21010:[1950..1976).1" Target="EXTERNAL" />
<Link Source="21010:[1920..1977).1" Target="21010:[557..663).1" />
<Link Source="21010:[1920..1977).1" Target="21010:[567..663).5" />
<Link Source="21010:[1920..1977).1" Target="21010:[1950..1976).1" />
<Link Source="21010:[1885..1977).1" Target="21010:[1920..1977).1" />
<Link Source="21010:[2060..2067).1" Target="21010:[557..663).1" />
<Link Source="21010:[7783..7814).1" Target="21010:[2060..2067).1" />
<Link Source="21010:[7783..7814).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7816..7830).1" Target="21010:[2080..2109).1" />
<Link Source="21010:[7816..7830).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7832..7853).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).1" Target="21010:[7783..7814).1" />
<Link Source="21010:[7879..7992).1" Target="21010:[567..663).5" />
<Link Source="21010:[7879..7992).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).2" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).3" Target="21010:[7816..7830).1" />
<Link Source="21010:[7879..7992).3" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).4" Target="21010:[7832..7853).1" />
<Link Source="21010:[7879..7992).4" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).5" Target="21010:[7879..7992).3" />
<Link Source="21010:[7879..7992).5" Target="21010:[7879..7992).4" />
<Link Source="21010:[7879..7992).5" Target="21010:[2060..2110).1" />
<Link Source="21010:[7931..7989).1" Target="21010:[7879..7992).5" />
<Link Source="21010:[7931..7989).1" Target="21010:[7879..7992).2" />
<Link Source="21010:[7931..7989).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).2" />
<Link Source="21010:[7879..7992).9" Target="21010:[567..663).5" />
<Link Source="21010:[7879..7992).9" Target="21010:[7931..7989).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).5" />
<Link Source="21010:[7879..7992).9" Target="21010:[2060..2110).1" />
<Link Source="21010:[2030..2110).1" Target="21010:[7879..7992).9" />
<Link Source="21010:[2227..2274).1" Target="EXTERNAL" />
<Link Source="21010:[2227..2292).1" Target="21010:[2227..2274).1" />
<Link Source="21010:[2227..2296).1" Target="21010:[2227..2292).1" />
<Link Source="21010:[2227..2296).1" Target="21010:[2295..2296).1" />
<Link Source="21010:[2199..2297).1" Target="21010:[557..663).1" />
<Link Source="21010:[2199..2297).1" Target="21010:[567..663).5" />
<Link Source="21010:[2199..2297).1" Target="21010:[2227..2296).1" />
<Link Source="21010:[2163..2297).1" Target="21010:[2199..2297).1" />
<Link Source="21010:[2401..2450).1" Target="EXTERNAL" />
<Link Source="21010:[2401..2468).1" Target="21010:[2401..2450).1" />
<Link Source="21010:[2373..2469).1" Target="21010:[557..663).1" />
<Link Source="21010:[2373..2469).1" Target="21010:[567..663).5" />
<Link Source="21010:[2373..2469).1" Target="21010:[2401..2468).1" />
<Link Source="21010:[2350..2469).1" Target="21010:[2373..2469).1" />
<Link Source="21010:[2576..2599).1" Target="EXTERNAL" />
<Link Source="21010:[2548..2600).1" Target="21010:[557..663).1" />
<Link Source="21010:[2548..2600).1" Target="21010:[567..663).5" />
<Link Source="21010:[2548..2600).1" Target="21010:[2576..2599).1" />
<Link Source="21010:[2522..2600).1" Target="21010:[2548..2600).1" />
<Link Source="21010:[2655..2705).1" Target="21010:[1531..1600).1" />
<Link Source="21010:[2774..2838).1" Target="21010:[2799..2838).1" />
<Link Source="21010:[2954..2982).1" Target="EXTERNAL" />
<Link Source="21010:[2984..3025).1" Target="EXTERNAL" />
<Link Source="21010:[3027..3067).1" Target="EXTERNAL" />
<Link Source="21010:[2931..3068).3" Target="21010:[2954..2982).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[2984..3025).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[3027..3067).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[2931..3068).1" />
<Link Source="21010:[3082..3104).1" Target="21010:[2774..2838).1" />
<Link Source="21010:[2931..3105).1" Target="21010:[2931..3068).3" />
<Link Source="21010:[2931..3105).1" Target="21010:[3082..3104).1" />
<Link Source="21010:[2931..3105).1" Target="21010:[2799..2838).1" />
<Link Source="21010:[2891..3105).1" Target="21010:[2931..3105).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3487..3556).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3524..3544).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3546..3552).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[817..880).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[567..663).5" />
<Link Source="21010:[3465..3557).1" Target="21010:[828..880).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[3487..3556).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[3487..3556).2" />
<Link Source="21010:[3436..3557).1" Target="21010:[3465..3557).1" />
<Link Source="21010:[3612..3656).1" Target="21010:[1289..1356).1" />
<Link Source="21010:[3709..3748).1" Target="21010:[1653..1716).1" />
<Link Source="21010:[3801..3844).1" Target="21010:[1653..1716).1" />
<Link Source="21010:[3897..3943).1" Target="21010:[1531..1600).1" />
<Link Source="21010:[4035..4070).1" Target="EXTERNAL" />
<Link Source="21010:[4072..4097).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).1" Target="21010:[4035..4070).1" />
<Link Source="21010:[10204..10225).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10227..10262).1" Target="21010:[4072..4097).1" />
<Link Source="21010:[10227..10262).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10264..10288).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10335..10345).1" Target="21010:[10204..10225).1" />
<Link Source="21010:[10335..10345).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10347..10383).1" Target="21010:[10227..10262).1" />
<Link Source="21010:[10347..10383).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10385..10425).1" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10427..10451).1" Target="21010:[10264..10288).1" />
<Link Source="21010:[10427..10451).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10306..10452).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10335..10345).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10347..10383).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10385..10425).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10427..10451).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10306..10452).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[4017..4098).1" />
<Link Source="21010:[4004..4098).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[4188..4217).1" Target="EXTERNAL" />
<Link Source="21010:[4219..4244).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).2" Target="21010:[4188..4217).1" />
<Link Source="21010:[10204..10225).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10227..10262).2" Target="21010:[4219..4244).1" />
<Link Source="21010:[10227..10262).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10264..10288).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10335..10345).2" Target="21010:[10204..10225).2" />
<Link Source="21010:[10335..10345).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10347..10383).2" Target="21010:[10227..10262).2" />
<Link Source="21010:[10347..10383).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10385..10425).2" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10427..10451).2" Target="21010:[10264..10288).2" />
<Link Source="21010:[10427..10451).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10306..10452).49" Target="21010:[4170..4245).1" />
<Link Source="21010:[10306..10452).95" Target="21010:[10335..10345).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10347..10383).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10385..10425).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10427..10451).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10306..10452).49" />
<Link Source="21010:[10306..10452).95" Target="21010:[4170..4245).1" />
<Link Source="21010:[4157..4245).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[4324..4358).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[4324..4358).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[4324..4358).1" Target="21010:[4353..4357).1" />
<Link Source="21010:[4306..4358).1" Target="21010:[4324..4358).1" />
<Link Source="21010:[4437..4471).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[4437..4471).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[4437..4471).1" Target="21010:[4466..4470).1" />
<Link Source="21010:[4419..4471).1" Target="21010:[4437..4471).1" />
<Link Source="21010:[4561..4596).1" Target="EXTERNAL" />
<Link Source="21010:[4598..4621).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).3" Target="21010:[4561..4596).1" />
<Link Source="21010:[10204..10225).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10227..10262).3" Target="21010:[4598..4621).1" />
<Link Source="21010:[10227..10262).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10264..10288).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10335..10345).3" Target="21010:[10204..10225).3" />
<Link Source="21010:[10335..10345).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10347..10383).3" Target="21010:[10227..10262).3" />
<Link Source="21010:[10347..10383).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10385..10425).3" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10427..10451).3" Target="21010:[10264..10288).3" />
<Link Source="21010:[10427..10451).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10306..10452).97" Target="21010:[4543..4622).1" />
<Link Source="21010:[10306..10452).143" Target="21010:[10335..10345).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10347..10383).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10385..10425).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10427..10451).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10306..10452).97" />
<Link Source="21010:[10306..10452).143" Target="21010:[4543..4622).1" />
<Link Source="21010:[4532..4622).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[4710..4739).1" Target="EXTERNAL" />
<Link Source="21010:[4741..4764).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).4" Target="21010:[4710..4739).1" />
<Link Source="21010:[10204..10225).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10227..10262).4" Target="21010:[4741..4764).1" />
<Link Source="21010:[10227..10262).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10264..10288).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10335..10345).4" Target="21010:[10204..10225).4" />
<Link Source="21010:[10335..10345).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10347..10383).4" Target="21010:[10227..10262).4" />
<Link Source="21010:[10347..10383).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10385..10425).4" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10427..10451).4" Target="21010:[10264..10288).4" />
<Link Source="21010:[10427..10451).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10306..10452).145" Target="21010:[4692..4765).1" />
<Link Source="21010:[10306..10452).191" Target="21010:[10335..10345).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10347..10383).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10385..10425).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10427..10451).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10306..10452).145" />
<Link Source="21010:[10306..10452).191" Target="21010:[4692..4765).1" />
<Link Source="21010:[4681..4765).1" Target="21010:[10306..10452).191" />
<Link Source="21010:[4859..4892).1" Target="EXTERNAL" />
<Link Source="21010:[4894..4919).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).5" Target="21010:[4859..4892).1" />
<Link Source="21010:[10204..10225).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10227..10262).5" Target="21010:[4894..4919).1" />
<Link Source="21010:[10227..10262).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10264..10288).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10335..10345).5" Target="21010:[10204..10225).5" />
<Link Source="21010:[10335..10345).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10347..10383).5" Target="21010:[10227..10262).5" />
<Link Source="21010:[10347..10383).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10385..10425).5" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10427..10451).5" Target="21010:[10264..10288).5" />
<Link Source="21010:[10427..10451).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10306..10452).193" Target="21010:[4841..4920).1" />
<Link Source="21010:[10306..10452).239" Target="21010:[10335..10345).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10347..10383).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10385..10425).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10427..10451).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10306..10452).193" />
<Link Source="21010:[10306..10452).239" Target="21010:[4841..4920).1" />
<Link Source="21010:[4826..4920).1" Target="21010:[10306..10452).239" />
<Link Source="21010:[5010..5043).1" Target="EXTERNAL" />
<Link Source="21010:[5045..5068).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).6" Target="21010:[5010..5043).1" />
<Link Source="21010:[10204..10225).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10227..10262).6" Target="21010:[5045..5068).1" />
<Link Source="21010:[10227..10262).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10264..10288).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10335..10345).6" Target="21010:[10204..10225).6" />
<Link Source="21010:[10335..10345).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10347..10383).6" Target="21010:[10227..10262).6" />
<Link Source="21010:[10347..10383).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10385..10425).6" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10427..10451).6" Target="21010:[10264..10288).6" />
<Link Source="21010:[10427..10451).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10306..10452).241" Target="21010:[4992..5069).1" />
<Link Source="21010:[10306..10452).287" Target="21010:[10335..10345).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10347..10383).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10385..10425).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10427..10451).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10306..10452).241" />
<Link Source="21010:[10306..10452).287" Target="21010:[4992..5069).1" />
<Link Source="21010:[4979..5069).1" Target="21010:[10306..10452).287" />
<Link Source="21010:[5164..5184).1" Target="EXTERNAL" />
<Link Source="21010:[5186..5211).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).7" Target="21010:[5164..5184).1" />
<Link Source="21010:[10204..10225).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10227..10262).7" Target="21010:[5186..5211).1" />
<Link Source="21010:[10227..10262).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10264..10288).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10335..10345).7" Target="21010:[10204..10225).7" />
<Link Source="21010:[10335..10345).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10347..10383).7" Target="21010:[10227..10262).7" />
<Link Source="21010:[10347..10383).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10385..10425).7" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10427..10451).7" Target="21010:[10264..10288).7" />
<Link Source="21010:[10427..10451).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10306..10452).289" Target="21010:[5146..5212).1" />
<Link Source="21010:[10306..10452).335" Target="21010:[10335..10345).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10347..10383).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10385..10425).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10427..10451).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10306..10452).289" />
<Link Source="21010:[10306..10452).335" Target="21010:[5146..5212).1" />
<Link Source="21010:[5130..5212).1" Target="21010:[10306..10452).335" />
<Link Source="21010:[5303..5323).1" Target="EXTERNAL" />
<Link Source="21010:[5325..5348).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).8" Target="21010:[5303..5323).1" />
<Link Source="21010:[10204..10225).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10227..10262).8" Target="21010:[5325..5348).1" />
<Link Source="21010:[10227..10262).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10264..10288).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10335..10345).8" Target="21010:[10204..10225).8" />
<Link Source="21010:[10335..10345).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10347..10383).8" Target="21010:[10227..10262).8" />
<Link Source="21010:[10347..10383).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10385..10425).8" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10427..10451).8" Target="21010:[10264..10288).8" />
<Link Source="21010:[10427..10451).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10306..10452).337" Target="21010:[5285..5349).1" />
<Link Source="21010:[10306..10452).383" Target="21010:[10335..10345).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10347..10383).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10385..10425).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10427..10451).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10306..10452).337" />
<Link Source="21010:[10306..10452).383" Target="21010:[5285..5349).1" />
<Link Source="21010:[5271..5349).1" Target="21010:[10306..10452).383" />
<Link Source="21010:[5429..5461).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[5429..5461).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[5429..5461).1" Target="21010:[5456..5460).1" />
<Link Source="21010:[5410..5461).1" Target="21010:[5429..5461).1" />
<Link Source="21010:[5539..5571).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[5539..5571).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[5539..5571).1" Target="21010:[5566..5570).1" />
<Link Source="21010:[5520..5571).1" Target="21010:[5539..5571).1" />
<Link Source="21010:[5649..5679).1" Target="21010:[4532..4622).1" />
<Link Source="21010:[5649..5679).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[5649..5679).1" Target="21010:[5674..5678).1" />
<Link Source="21010:[5632..5679).1" Target="21010:[5649..5679).1" />
<Link Source="21010:[5755..5785).1" Target="21010:[4681..4765).1" />
<Link Source="21010:[5755..5785).1" Target="21010:[10306..10452).191" />
<Link Source="21010:[5755..5785).1" Target="21010:[5780..5784).1" />
<Link Source="21010:[5738..5785).1" Target="21010:[5755..5785).1" />
<Link Source="21010:[5900..5951).1" Target="EXTERNAL" />
<Link Source="21010:[5866..5952).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[5866..5952).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[5866..5952).1" Target="21010:[5900..5951).1" />
<Link Source="21010:[5866..5952).1" Target="EXTERNAL" />
<Link Source="21010:[5846..5952).1" Target="21010:[5866..5952).1" />
<Link Source="21010:[6065..6116).1" Target="EXTERNAL" />
<Link Source="21010:[6031..6117).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[6031..6117).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[6031..6117).1" Target="21010:[6065..6116).1" />
<Link Source="21010:[6031..6117).1" Target="EXTERNAL" />
<Link Source="21010:[6011..6117).1" Target="21010:[6031..6117).1" />
<Link Source="21010:[6236..6287).1" Target="EXTERNAL" />
<Link Source="21010:[6199..6288).1" Target="21010:[5130..5212).1" />
<Link Source="21010:[6199..6288).1" Target="21010:[10306..10452).335" />
<Link Source="21010:[6199..6288).1" Target="21010:[6236..6287).1" />
<Link Source="21010:[6199..6288).1" Target="EXTERNAL" />
<Link Source="21010:[6176..6288).1" Target="21010:[6199..6288).1" />
<Link Source="21010:[6397..6448).1" Target="EXTERNAL" />
<Link Source="21010:[6365..6449).1" Target="21010:[4532..4622).1" />
<Link Source="21010:[6365..6449).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[6365..6449).1" Target="21010:[6397..6448).1" />
<Link Source="21010:[6365..6449).1" Target="EXTERNAL" />
<Link Source="21010:[6347..6449).1" Target="21010:[6365..6449).1" />
<Link Source="21010:[6560..6586).1" Target="EXTERNAL" />
<Link Source="21010:[6513..6587).1" Target="EXTERNAL" />
<Link Source="21010:[6513..6587).1" Target="21010:[6560..6586).1" />
<Link Source="21010:[6497..6587).1" Target="21010:[6513..6587).1" />
<Link Source="21003:[34259..34289).1" Target="21010:[557..663).1" />
<Link Source="21003:[34259..34289).1" Target="21003:[34198..34304).2" />
<Link Source="21003:[34320..34386).1" Target="21003:[34078..34089).1" />
<Link Source="21003:[34320..34386).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).2" Target="EXTERNAL" />
<Link Source="21003:[34320..34386).2" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).3" Target="21003:[34320..34386).2" />
<Link Source="21003:[34320..34386).3" Target="21003:[34148..34172).1" />
<Link Source="21003:[34320..34386).3" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).5" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).1" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).3" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).5" />
<Link Source="21003:[34320..34386).7" Target="EXTERNAL" />
<Link Source="21003:[34320..34386).7" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).1" Target="21003:[34320..34386).7" />
<Link Source="21003:[34400..34487).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).2" Target="21003:[34259..34289).1" />
<Link Source="21003:[34400..34487).2" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).3" Target="21003:[34091..34111).1" />
<Link Source="21003:[34400..34487).3" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).4" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).1" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).2" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).3" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).4" />
<Link Source="21003:[34400..34487).6" Target="21003:[34320..34386).7" />
<Link Source="21003:[34400..34487).6" Target="21010:[567..663).5" />
<Link Source="21003:[34400..34487).6" Target="21004:[1137..1205).1" />
<Link Source="21003:[34407..34486).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34554..34569).1" Target="21003:[34400..34487).6" />
<Link Source="21003:[34554..34569).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34595..34627).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34641..34667).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34554..34569).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34400..34487).6" />
<Link Source="21003:[34641..34667).3" Target="21003:[34641..34667).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34681..34706).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).2" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34641..34667).3" />
<Link Source="21003:[34681..34706).4" Target="21003:[34400..34487).6" />
<Link Source="21003:[34681..34706).4" Target="21003:[34641..34667).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34681..34706).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34681..34706).2" />
<Link Source="21003:[34681..34706).4" Target="21003:[34595..34627).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34407..34486).1" />
<Link Source="21003:[34720..34740).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34720..34740).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34754..34818).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).2" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34754..34818).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34754..34818).2" />
<Link Source="21003:[34754..34818).4" Target="21003:[34595..34627).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34720..34735).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34407..34486).1" />
<Link Source="21003:[34832..34844).1" Target="21003:[34554..34569).1" />
<Link Source="21003:[34832..34844).1" Target="21003:[34407..34486).1" />
<Link Source="21004:[1129..1207).1" Target="21003:[34832..34844).1" />
<Link Source="21004:[1129..1207).1" Target="21004:[1122..1208).1" />
<Link Source="21004:[1129..1207).1" Target="21004:[1034..2179).1" />
<Link Source="21003:[46280..46350).3" Target="21004:[1122..1208).1" />
<Link Source="21003:[46280..46350).3" Target="21003:[45706..45847).1" />
<Link Source="21003:[46366..46650).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[46023..46055).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[46366..46650).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[46419..46533).1" Target="21003:[46280..46350).3" />
<Link Source="21003:[46419..46533).1" Target="21003:[46366..46650).2" />
<Link Source="21003:[46419..46533).2" Target="21003:[46366..46650).2" />
<Link Source="21003:[46419..46533).4" Target="21003:[46419..46533).1" />
<Link Source="21003:[46419..46533).4" Target="21003:[46419..46533).2" />
<Link Source="21003:[46419..46533).4" Target="21004:[1122..1208).1" />
<Link Source="21003:[46419..46533).4" Target="21004:[1129..1207).1" />
<Link Source="21003:[46419..46533).4" Target="21003:[34400..34487).6" />
<Link Source="21003:[46419..46533).4" Target="21003:[46366..46650).2" />
<Link Source="21003:[46563..46584).1" Target="21003:[46419..46533).4" />
<Link Source="21003:[46563..46584).1" Target="21003:[46366..46650).2" />
<Link Source="21003:[46553..46635).1" Target="21010:[4004..4098).1" />
<Link Source="21003:[46553..46635).1" Target="21003:[46563..46584).1" />
<Link Source="21003:[46755..46872).1" Target="EXTERNAL" />
<Link Source="21003:[46755..46872).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46888..47066).1" Target="21003:[46224..46254).1" />
<Link Source="21003:[46888..47066).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46116..46135).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46280..46350).3" />
<Link Source="21003:[47082..47319).1" Target="21003:[45967..46008).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46553..46635).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47333..47400).1" Target="21003:[47082..47319).1" />
<Link Source="21003:[47333..47400).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47333..47399).1" Target="21003:[45706..45847).1" />
<Link Source="25006:[11552..11587).1" Target="21003:[47333..47400).1" />
<Link Source="25006:[11552..11587).1" Target="21003:[47333..47399).1" />
<Link Source="25006:[11613..11696).1" Target="EXTERNAL" />
<Link Source="25006:[11613..11696).1" Target="21003:[47333..47399).1" />
<Link Source="25006:[11674..11681).1" Target="25006:[11613..11696).1" />
<Link Source="21003:[47333..47400).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[47082..47319).1" />
<Link Source="21003:[47414..47458).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[47414..47458).1" Target="21004:[1129..1207).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[34400..34487).6" />
<Link Source="21003:[47414..47458).1" Target="25005:[4543..4693).7" />
<Link Source="21003:[47414..47458).1" Target="EXTERNAL" />
<Link Source="21003:[47414..47458).1" Target="21010:[10306..10452).47" />
<Link Source="21003:[47414..47458).1" Target="25005:[4543..4693).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47414..47458).2" Target="21003:[45706..45847).1" />
<Link Source="25004:[1041..1077).1" Target="21003:[47414..47458).2" />
<Link Source="21003:[47414..47458).4" Target="21003:[47414..47458).1" />
<Link Source="21003:[47414..47458).4" Target="25004:[1041..1077).1" />
<Link Source="21003:[47414..47458).4" Target="21003:[45706..45847).1" />
<Link Source="21003:[47689..47930).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[47689..47930).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47717..47747).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[48025..48054).1" Target="21003:[47689..47930).1" />
<Link Source="21003:[48025..48054).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48175..48211).1" Target="21003:[48025..48054).1" />
<Link Source="21003:[48175..48211).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[48175..48211).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48225..48313).1" Target="21003:[48175..48211).1" />
<Link Source="21003:[48225..48313).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[48225..48313).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48327..48378).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[48175..48211).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[48327..48378).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[47414..47458).4" />
<Link Source="21003:[48327..48378).2" Target="21003:[47717..47747).1" />
<Link Source="21003:[48392..48469).1" Target="EXTERNAL" />
<Link Source="21003:[48392..48469).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48392..48469).2" Target="21003:[48327..48378).2" />
<Link Source="21003:[48392..48469).2" Target="21003:[48392..48469).1" />
<Link Source="21003:[48392..48469).2" Target="21003:[47717..47747).1" />
<Link Source="21003:[47689..47930).3" Target="21003:[46186..46209).1" />
<Link Source="21003:[47689..47930).3" Target="21003:[48392..48469).2" />
<Link Source="21003:[47689..47930).3" Target="21003:[45706..45847).1" />
<Link Source="21003:[47944..47963).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[47944..47963).1" Target="21003:[45706..45847).1" />
<Link Source="28001:[21850..21895).1" Target="25014:[387..448).1" />
<Link Source="25002:[4263..4282).1" Target="21003:[47944..47963).1" />
<Link Source="25002:[4263..4282).1" Target="28001:[21850..21895).1" />
<Link Source="25002:[4284..4323).1" Target="28001:[21850..21896).4" />
<Link Source="25002:[4284..4323).1" Target="28001:[21850..21895).1" />
<Link Source="25002:[4395..4432).1" Target="28001:[21850..21895).1" />
<Link Source="10345:[975..1032).1" Target="EXTERNAL" />
<Link Source="10345:[1047..1101).1" Target="EXTERNAL" />
<Link Source="10345:[1116..1166).1" Target="EXTERNAL" />
<Link Source="10345:[1753..1782).1" Target="10345:[956..960).1" />
<Link Source="10345:[1753..1782).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1797..1861).1" Target="10345:[975..1032).1" />
<Link Source="10345:[1797..1861).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1876..1931).1" Target="10345:[1047..1101).1" />
<Link Source="10345:[1876..1931).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1946..1998).1" Target="10345:[1116..1166).1" />
<Link Source="10345:[1946..1998).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2013..2038).1" Target="10345:[1181..1185).1" />
<Link Source="10345:[2013..2038).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1723..2412).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1234..1246).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1234..1246).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1288..1300).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1288..1300).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1531..1543).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1531..1543).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2064..2099).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[1797..1861).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[2064..2099).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[930..1186).1" />
<Link Source="10345:[2113..2145).1" Target="10345:[1876..1931).1" />
<Link Source="10345:[2113..2145).1" Target="EXTERNAL" />
<Link Source="10345:[2113..2145).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2159..2192).1" Target="10345:[1946..1998).1" />
<Link Source="10345:[2159..2192).1" Target="EXTERNAL" />
<Link Source="10345:[2159..2192).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[1753..1782).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[1797..1861).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[1876..1931).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[2013..2038).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[1946..1998).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[930..1186).1" />
<Link Source="10345:[922..1186).1" Target="10345:[930..1186).1" />
<Link Source="25002:[4395..4432).3" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).3" Target="25002:[4263..4282).1" />
<Link Source="25002:[4395..4432).3" Target="21003:[48392..48469).2" />
<Link Source="25002:[4395..4432).3" Target="28001:[21850..21895).1" />
<Link Source="10345:[13089..13118).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[13089..13118).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13144..13184).1" Target="10345:[13089..13118).1" />
<Link Source="10345:[13144..13184).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[13144..13184).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).2" Target="10345:[13144..13184).1" />
<Link Source="10345:[13200..13326).2" Target="25002:[4395..4432).3" />
<Link Source="10345:[13200..13326).2" Target="10345:[13200..13326).1" />
<Link Source="10345:[13200..13326).2" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).4" Target="10345:[13089..13118).1" />
<Link Source="10345:[13200..13326).4" Target="25002:[4395..4432).3" />
<Link Source="10345:[13200..13326).4" Target="10345:[13200..13326).1" />
<Link Source="10345:[13200..13326).4" Target="25002:[4395..4432).1" />
<Link Source="10345:[13298..13311).1" Target="10345:[922..1186).1" />
<Link Source="10345:[13298..13311).1" Target="10345:[13200..13326).2" />
<Link Source="25002:[4395..4432).6" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).6" Target="10345:[13298..13311).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2208..2220).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2331..2343).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2249..2266).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2296..2307).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2372..2390).1" />
<Link Source="25002:[4395..4432).6" Target="EXTERNAL" />
<Link Source="25002:[4395..4432).6" Target="28001:[21850..21895).1" />
<Link Source="10345:[24530..24565).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[24530..24565).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24507..26254).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[24507..26254).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24591..26243).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24636..24685).1" Target="10345:[24530..24565).1" />
<Link Source="10345:[24636..24685).1" Target="25002:[4395..4432).6" />
<Link Source="10345:[24636..24685).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24507..26254).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24636..24685).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[24768..26149).1" Target="10345:[24703..24750).1" />
<Link Source="10345:[24768..26149).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[26025..26098).1" Target="EXTERNAL" />
<Link Source="10345:[26025..26098).1" Target="10345:[24768..26149).1" />
<Link Source="10345:[26169..26228).1" Target="10345:[24703..24750).1" />
<Link Source="10345:[26169..26228).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[26169..26228).2" Target="10345:[24530..24565).1" />
<Link Source="10345:[26169..26228).2" Target="10345:[24591..26243).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[24507..26254).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26025..26098).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26169..26228).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26169..26228).2" />
<Link Source="10345:[26169..26228).3" Target="10345:[24591..26243).1" />
<Link Source="10345:[24932..25204).1" Target="EXTERNAL" />
<Link Source="10345:[24932..25204).1" Target="10345:[26169..26228).3" />
<Link Source="10345:[25064..25074).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[26266..28173).1" Target="10345:[24507..26254).1" />
<Link Source="10345:[26266..28173).1" Target="10345:[25064..25074).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[26266..28173).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[922..1186).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[25064..25074).1" />
<Link Source="10345:[26365..26372).1" Target="10345:[26314..26387).1" />
<Link Source="10345:[25064..25075).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[25109..25173).1" Target="EXTERNAL" />
<Link Source="10345:[25109..25173).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[25858..25865).1" Target="10345:[25109..25173).1" />
<Link Source="10298:[471..492).1" Target="25002:[4395..4432).3" />
<Link Source="10298:[471..492).1" Target="25002:[4395..4432).1" />
<Link Source="10298:[494..511).1" Target="25002:[4395..4432).3" />
<Link Source="10298:[494..511).1" Target="25002:[4395..4432).1" />
<Link Source="10298:[537..568).1" Target="10298:[471..492).1" />
<Link Source="10298:[537..568).1" Target="10298:[494..511).1" />
<Link Source="10298:[537..568).1" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).10" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).10" Target="10298:[537..568).1" />
<Link Source="25002:[4395..4432).10" Target="10345:[25109..25173).1" />
<Link Source="25002:[4395..4432).10" Target="28001:[21850..21895).1" />
<Link Source="10292:[1704..1721).1" Target="10292:[1720..1721).1" />
<Link Source="10292:[1752..1769).1" Target="10292:[1768..1769).1" />
<Link Source="10292:[1963..1993).1" Target="10292:[1992..1993).1" />
<Link Source="10306:[388923..389344).1" Target="10306:[388969..389344).1" />
<Link Source="10306:[389480..389543).1" Target="EXTERNAL" />
<Link Source="10306:[389562..389646).1" Target="EXTERNAL" />
<Link Source="10306:[389708..389839).1" Target="EXTERNAL" />
<Link Source="10306:[389665..389839).1" Target="10306:[389708..389839).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389480..389543).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389562..389646).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389665..389839).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389438..389840).1" />
<Link Source="10306:[389401..389840).1" Target="10306:[389438..389840).17" />
<Link Source="10310:[84458..84496).1" Target="10310:[84494..84496).1" />
<Link Source="10316:[772..830).1" Target="10316:[802..830).1" />
<Link Source="10319:[69620..69663).1" Target="10319:[69643..69663).1" />
<Link Source="10319:[69727..69774).1" Target="10319:[69752..69774).1" />
<Link Source="10286:[30925..30954).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[30925..30954).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[30969..31000).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[30969..31000).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31015..31040).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31015..31040).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31055..31080).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31055..31080).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31095..31126).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31095..31126).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).2" Target="10286:[31055..31080).1" />
<Link Source="10286:[31152..31210).2" Target="10286:[31152..31210).1" />
<Link Source="10286:[31152..31210).2" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).4" Target="10286:[31095..31126).1" />
<Link Source="10286:[31152..31210).4" Target="10286:[31152..31210).1" />
<Link Source="10286:[31152..31210).4" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).5" Target="10286:[31152..31210).2" />
<Link Source="10286:[31152..31210).5" Target="10286:[31152..31210).4" />
<Link Source="10286:[31152..31210).5" Target="25002:[4395..4432).1" />
<Link Source="10286:[31515..31598).1" Target="10286:[30969..31000).1" />
<Link Source="10286:[31515..31598).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).1" Target="10286:[30925..30954).1" />
<Link Source="10286:[31614..31710).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).2" Target="10286:[30969..31000).1" />
<Link Source="10286:[31614..31710).2" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).3" Target="10286:[31015..31040).1" />
<Link Source="10286:[31614..31710).3" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).4" Target="10286:[31055..31080).1" />
<Link Source="10286:[31614..31710).4" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).5" Target="10286:[31095..31126).1" />
<Link Source="10286:[31614..31710).5" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).6" Target="10286:[31515..31598).1" />
<Link Source="10286:[31614..31710).6" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31709).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[80080..80109).1" Target="10286:[31614..31710).1" />
<Link Source="10319:[80080..80109).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80111..80133).1" Target="10286:[31614..31710).2" />
<Link Source="10319:[80111..80133).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80135..80160).1" Target="10286:[31614..31710).3" />
<Link Source="10319:[80135..80160).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80162..80186).1" Target="10286:[31614..31710).4" />
<Link Source="10319:[80162..80186).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80188..80212).1" Target="10286:[31614..31710).5" />
<Link Source="10319:[80188..80212).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80214..80237).1" Target="10286:[31614..31710).6" />
<Link Source="10319:[80214..80237).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).2" Target="10319:[80188..80212).1" />
<Link Source="10319:[80263..80315).2" Target="10319:[80263..80315).1" />
<Link Source="10319:[80263..80315).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).4" Target="10319:[80162..80186).1" />
<Link Source="10319:[80263..80315).4" Target="10319:[80263..80315).1" />
<Link Source="10319:[80263..80315).4" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).5" Target="10319:[80263..80315).2" />
<Link Source="10319:[80263..80315).5" Target="10319:[80263..80315).4" />
<Link Source="10319:[80263..80315).5" Target="10286:[31614..31709).1" />
<Link Source="10319:[80331..80364).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).1" Target="10319:[80080..80109).1" />
<Link Source="10319:[80378..80479).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).2" Target="10319:[80111..80133).1" />
<Link Source="10319:[80378..80479).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).3" Target="10319:[80331..80364).1" />
<Link Source="10319:[80378..80479).3" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).4" Target="10319:[80214..80237).1" />
<Link Source="10319:[80378..80479).4" Target="10286:[31614..31709).1" />
<Link Source="10319:[80400..80478).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80843..80872).1" Target="10319:[80378..80479).1" />
<Link Source="10319:[80843..80872).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80874..80896).1" Target="10319:[80378..80479).2" />
<Link Source="10319:[80874..80896).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80898..80931).1" Target="10319:[80378..80479).3" />
<Link Source="10319:[80898..80931).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80933..80956).1" Target="10319:[80378..80479).4" />
<Link Source="10319:[80933..80956).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).1" Target="10319:[80874..80896).1" />
<Link Source="10319:[80982..81047).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).2" Target="10319:[80982..81047).1" />
<Link Source="10319:[80982..81047).2" Target="10319:[80843..80872).1" />
<Link Source="10319:[80982..81047).2" Target="25002:[4395..4432).10" />
<Link Source="10319:[80982..81047).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).3" Target="10319:[80400..80478).1" />
<Link Source="10060:[2841..2854).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2841..2854).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2856..2875).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[2901..2932).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[2948..3467).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2948..3467).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3483..3502).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[3553..4223).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[3553..4223).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[4243..4274).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[4243..4274).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).1" Target="10060:[4243..4274).1" />
<Link Source="10060:[3518..4328).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[4344..4356).1" Target="10319:[80982..81047).3" />
<Link Source="10319:[80982..81047).8" Target="10060:[3483..3502).1" />
<Link Source="10319:[80982..81047).8" Target="10060:[4344..4356).1" />
<Link Source="10319:[80982..81047).8" Target="10319:[80400..80478).1" />
<Link Source="10060:[2841..2854).2" Target="10060:[3483..3502).1" />
<Link Source="10060:[2841..2854).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).2" Target="10060:[3483..3502).1" />
<Link Source="10060:[2856..2875).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).3" Target="10060:[2841..2854).2" />
<Link Source="10060:[2901..2932).3" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[2948..3467).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[3553..4223).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[4243..4274).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).2" Target="10060:[4243..4274).2" />
<Link Source="10060:[3518..4328).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).3" Target="10060:[4243..4274).2" />
<Link Source="10060:[3553..4223).3" Target="10060:[3518..4328).2" />
<Link Source="10319:[80982..81047).15" Target="10319:[80843..80872).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80982..81047).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80982..81047).2" />
<Link Source="10319:[80982..81047).15" Target="10060:[4344..4356).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80400..80478).1" />
<Link Source="10319:[81063..82500).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[81063..82500).2" Target="10319:[80982..81047).15" />
<Link Source="10319:[81063..82500).2" Target="10319:[81063..82500).1" />
<Link Source="10319:[81063..82500).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[81129..81207).1" Target="10319:[80982..81047).15" />
<Link Source="10319:[81129..81207).1" Target="10319:[81063..82500).2" />
<Link Source="10319:[81129..81207).2" Target="10319:[81063..82500).2" />
<Link Source="10060:[2841..2854).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2841..2854).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2856..2875).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[2901..2932).7" Target="10060:[2841..2854).4" />
<Link Source="10060:[2901..2932).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).4" Target="10060:[2841..2854).4" />
<Link Source="10060:[2948..3467).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2948..3467).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[3483..3502).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).6" Target="10060:[2841..2854).4" />
<Link Source="10060:[3553..4223).6" Target="10319:[81129..81207).1" />
<Link Source="10060:[3553..4223).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).6" Target="10060:[2841..2854).4" />
<Link Source="10060:[4243..4274).6" Target="10319:[81129..81207).1" />
<Link Source="10060:[4243..4274).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[3518..4328).6" Target="10060:[4243..4274).6" />
<Link Source="10060:[3518..4328).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[2841..2854).5" Target="10060:[3483..3502).7" />
<Link Source="10060:[2841..2854).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).5" Target="10060:[3483..3502).7" />
<Link Source="10060:[2856..2875).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[2901..2932).9" Target="10060:[2841..2854).5" />
<Link Source="10060:[2901..2932).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).5" Target="10060:[2841..2854).5" />
<Link Source="10060:[2948..3467).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).7" Target="10060:[2841..2854).5" />
<Link Source="10060:[3553..4223).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).7" Target="10060:[2841..2854).5" />
<Link Source="10060:[4243..4274).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[3518..4328).7" Target="10060:[4243..4274).7" />
<Link Source="10060:[3518..4328).7" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).1" Target="10319:[81063..82500).2" />
<Link Source="10319:[81225..82039).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).2" Target="10319:[81225..82039).1" />
<Link Source="10319:[81225..82039).2" Target="10319:[81063..82500).2" />
<Link Source="10319:[82516..82536).1" Target="10319:[80982..81047).15" />
<Link Source="10319:[82516..82536).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80495..80738).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80495..80738).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[80495..80738).2" Target="10319:[80495..80738).1" />
<Link Source="10319:[80495..80738).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80754..80774).1" Target="10319:[82516..82536).1" />
<Link Source="10319:[80754..80774).1" Target="10286:[31614..31709).1" />
<Link Source="10060:[2841..2854).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2841..2854).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).17" Target="10060:[2841..2854).9" />
<Link Source="10060:[2901..2932).17" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).9" Target="10060:[2841..2854).9" />
<Link Source="10060:[2948..3467).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).11" Target="10060:[2841..2854).9" />
<Link Source="10060:[3553..4223).11" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).11" Target="10060:[2841..2854).9" />
<Link Source="10060:[4243..4274).11" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).11" Target="10060:[4243..4274).11" />
<Link Source="10060:[3518..4328).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[2841..2854).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[2856..2875).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[2901..2932).19" Target="10060:[2841..2854).10" />
<Link Source="10060:[2901..2932).19" Target="10060:[3483..3502).7" />
<Link Source="10060:[2948..3467).10" Target="10060:[2841..2854).10" />
<Link Source="10060:[2948..3467).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[3553..4223).12" Target="10060:[2841..2854).10" />
<Link Source="10060:[3553..4223).12" Target="10060:[3483..3502).7" />
<Link Source="10060:[4243..4274).12" Target="10060:[2841..2854).10" />
<Link Source="10060:[4243..4274).12" Target="10060:[3483..3502).7" />
<Link Source="10060:[3518..4328).12" Target="10060:[4243..4274).12" />
<Link Source="10060:[3518..4328).12" Target="10060:[3483..3502).7" />
<Link Source="10319:[81225..82039).4" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).5" Target="10060:[3483..3502).7" />
<Link Source="10319:[81225..82039).5" Target="10319:[81225..82039).4" />
<Link Source="10319:[81225..82039).5" Target="10319:[81129..81207).2" />
<Link Source="10319:[82516..82536).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[82516..82536).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[80495..80738).5" Target="10060:[3483..3502).7" />
<Link Source="10319:[80495..80738).5" Target="10319:[80495..80738).1" />
<Link Source="10319:[80495..80738).5" Target="10286:[31614..31709).1" />
<Link Source="10319:[80754..80774).2" Target="10319:[82516..82536).2" />
<Link Source="10319:[80754..80774).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[81225..82039).7" Target="10060:[3483..3502).7" />
<Link Source="10319:[82516..82536).3" Target="10060:[3483..3502).7" />
<Link Source="10319:[82516..82536).3" Target="10319:[80400..80478).1" />
<Link Source="10319:[80754..80774).3" Target="10319:[82516..82536).3" />
<Link Source="10319:[80754..80774).3" Target="10286:[31614..31709).1" />
<Link Source="10076:[2308..2337).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2308..2337).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2339..2360).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2339..2360).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2362..2386).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2362..2386).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2285..3386).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2285..3386).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1715..1727).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1715..1727).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1773..1785).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1773..1785).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1824..1835).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1824..1835).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1883..1903).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1883..1903).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1936..1956).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1936..1956).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2247..2272).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2247..2272).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2412..2424).1" Target="10076:[2308..2337).1" />
<Link Source="10076:[2412..2424).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2412..2424).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2453..2464).1" Target="10076:[2339..2360).1" />
<Link Source="10076:[2453..2464).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2453..2464).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2492..2512).1" Target="10076:[2362..2386).1" />
<Link Source="10076:[2492..2512).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2492..2512).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2658).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2551..2658).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2658).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2551..2658).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2551..2658).3" />
<Link Source="10076:[2551..2658).5" Target="10076:[1715..1727).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2412..2424).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2453..2464).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[1883..1903).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2492..2512).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2247..2272).1" />
<Link Source="10076:[2551..2658).5" Target="10060:[3483..3502).7" />
<Link Source="10076:[2551..2658).5" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2576).1" Target="10076:[2551..2658).5" />
<Link Source="10076:[2551..2576).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2551..2576).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3236..3299).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3236..3248).1" Target="10076:[3236..3299).1" />
<Link Source="10076:[3236..3248).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[3236..3248).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3315..3375).1" Target="10076:[2308..2337).1" />
<Link Source="10076:[3315..3375).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3315..3375).2" Target="25002:[4395..4432).1" />
<Link Source="10076:[3338..3374).1" Target="25002:[4395..4432).1" />
<Link Source="10325:[645..674).1" Target="10076:[3315..3375).1" />
<Link Source="10325:[645..674).1" Target="10076:[3338..3374).1" />
<Link Source="10325:[616..730).1" Target="10076:[3315..3375).2" />
<Link Source="10325:[616..730).1" Target="10076:[3338..3374).1" />
<Link Source="10325:[696..707).1" Target="10325:[645..674).1" />
<Link Source="10325:[696..707).1" Target="10076:[3338..3374).1" />
<Link Source="10325:[616..730).2" Target="10076:[3338..3374).1" />
<Link Source="10286:[939..968).1" Target="10325:[696..707).1" />
<Link Source="10286:[939..968).1" Target="10325:[616..730).2" />
<Link Source="10286:[923..1219).1" Target="10325:[616..730).1" />
<Link Source="10286:[923..1219).1" Target="10325:[616..730).2" />
<Link Source="10286:[726..773).1" Target="10286:[923..1219).1" />
<Link Source="10286:[726..773).1" Target="10325:[616..730).2" />
<Link Source="10286:[815..820).1" Target="10286:[923..1219).1" />
<Link Source="10286:[815..820).1" Target="10325:[616..730).2" />
<Link Source="10286:[2975..3015).1" Target="10286:[923..1219).1" />
<Link Source="10286:[2975..3015).1" Target="10325:[616..730).2" />
<Link Source="10286:[17802..17818).1" Target="10286:[923..1219).1" />
<Link Source="10286:[17802..17818).1" Target="10325:[616..730).2" />
<Link Source="10286:[18200..18223).1" Target="10286:[923..1219).1" />
<Link Source="10286:[18200..18223).1" Target="10325:[616..730).2" />
<Link Source="10286:[994..1034).1" Target="10325:[616..730).2" />
<Link Source="10286:[994..1034).2" Target="10286:[939..968).1" />
<Link Source="10286:[994..1034).2" Target="10286:[994..1034).1" />
<Link Source="10286:[994..1034).2" Target="10325:[616..730).2" />
<Link Source="10286:[1048..1096).1" Target="10286:[923..1219).1" />
<Link Source="10286:[1048..1096).1" Target="10325:[616..730).2" />
<Link Source="10286:[1048..1096).2" Target="10286:[1048..1096).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[726..773).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[815..820).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[2975..3015).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[17802..17818).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[18200..18223).1" />
<Link Source="10286:[1048..1096).2" Target="10325:[616..730).2" />
<Link Source="10286:[1110..1120).1" Target="10286:[939..968).1" />
<Link Source="10286:[1110..1120).1" Target="10076:[2551..2658).5" />
<Link Source="10286:[1110..1120).1" Target="10076:[2551..2576).1" />
<Link Source="10286:[1110..1120).1" Target="10076:[3236..3248).1" />
<Link Source="10286:[1110..1120).1" Target="10286:[923..1219).1" />
<Link Source="10286:[1110..1120).1" Target="10325:[616..730).2" />
<Link Source="10286:[1177..1193).1" Target="10286:[939..968).1" />
<Link Source="10286:[1177..1193).1" Target="10286:[923..1219).1" />
<Link Source="10286:[1177..1193).1" Target="10325:[616..730).2" />
<Link Source="10076:[3315..3335).1" Target="10076:[3315..3375).2" />
<Link Source="10076:[3315..3335).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[3315..3335).1" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).19" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).19" Target="10076:[2551..2658).5" />
<Link Source="25002:[4395..4432).19" Target="10076:[2551..2576).1" />
<Link Source="25002:[4395..4432).19" Target="10076:[3236..3248).1" />
<Link Source="25002:[4395..4432).19" Target="10076:[3315..3335).1" />
<Link Source="25002:[4395..4432).19" Target="10076:[3236..3299).1" />
<Link Source="25002:[4395..4432).19" Target="10286:[1048..1096).2" />
<Link Source="25002:[4395..4432).19" Target="10286:[1110..1120).1" />
<Link Source="25002:[4395..4432).19" Target="10286:[1177..1193).1" />
<Link Source="25002:[4395..4432).19" Target="28001:[21850..21895).1" />
<Link Source="10076:[7557..7578).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[7557..7578).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[7580..7600).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[7580..7600).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[7524..8834).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[7524..8834).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[7626..8823).1" Target="10076:[7557..7578).1" />
<Link Source="10076:[7626..8823).1" Target="25002:[4395..4432).19" />
<Link Source="10076:[7626..8823).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[8351..8419).1" Target="10076:[7524..8834).1" />
<Link Source="10076:[8351..8419).1" Target="10076:[7626..8823).1" />
<Link Source="10076:[8351..8419).3" Target="10076:[7626..8823).1" />
<Link Source="10077:[909..930).1" Target="10076:[8351..8419).1" />
<Link Source="10077:[909..930).1" Target="10076:[8351..8419).3" />
<Link Source="10077:[879..998).1" Target="10076:[8351..8419).1" />
<Link Source="10077:[879..998).1" Target="10076:[8351..8419).3" />
<Link Source="10077:[879..998).2" Target="10076:[8351..8419).3" />
<Link Source="10077:[698..707).1" Target="10077:[879..998).2" />
<Link Source="10077:[698..707).1" Target="10076:[8351..8419).3" />
<Link Source="10077:[747..768).1" Target="10077:[879..998).2" />
<Link Source="10077:[747..768).1" Target="10076:[8351..8419).3" />
<Link Source="10077:[798..808).1" Target="10077:[879..998).2" />
<Link Source="10077:[798..808).1" Target="10076:[8351..8419).3" />
<Link Source="10077:[854..862).1" Target="10077:[879..998).2" />
<Link Source="10077:[854..862).1" Target="10076:[8351..8419).3" />
<Link Source="10077:[964..972).1" Target="10077:[909..930).1" />
<Link Source="10077:[964..972).1" Target="10077:[879..998).2" />
<Link Source="10077:[964..972).1" Target="10076:[8351..8419).3" />
<Link Source="10076:[8351..8419).4" Target="10076:[8351..8419).1" />
<Link Source="10076:[8351..8419).4" Target="10077:[879..998).2" />
<Link Source="10076:[8351..8419).4" Target="10077:[698..707).1" />
<Link Source="10076:[8351..8419).4" Target="10077:[747..768).1" />
<Link Source="10076:[8351..8419).4" Target="10077:[798..808).1" />
<Link Source="10076:[8351..8419).4" Target="10077:[854..862).1" />
<Link Source="10076:[8351..8419).4" Target="10077:[964..972).1" />
<Link Source="10076:[8351..8419).4" Target="10076:[7626..8823).1" />
<Link Source="10076:[8445..8479).1" Target="10076:[7626..8823).1" />
<Link Source="10076:[8445..8478).1" Target="10076:[7626..8823).1" />
<Link Source="10077:[1039..1051).1" Target="10076:[8445..8479).1" />
<Link Source="10077:[1039..1051).1" Target="10076:[8445..8478).1" />
<Link Source="10077:[1053..1090).1" Target="10076:[8445..8479).1" />
<Link Source="10077:[1053..1090).1" Target="10076:[8445..8478).1" />
<Link Source="10077:[1092..1108).1" Target="10076:[8445..8479).1" />
<Link Source="10077:[1092..1108).1" Target="10076:[8445..8478).1" />
<Link Source="10077:[1014..1370).1" Target="10076:[8351..8419).4" />
<Link Source="10077:[1014..1370).1" Target="10076:[8445..8478).1" />
<Link Source="10077:[1142..1210).1" Target="10076:[8445..8478).1" />
<Link Source="10077:[1142..1210).2" Target="10077:[1053..1090).1" />
<Link Source="10077:[1142..1210).2" Target="10077:[1142..1210).1" />
<Link Source="10077:[1142..1210).2" Target="10076:[8445..8478).1" />
<Link Source="10077:[1142..1210).4" Target="10077:[1092..1108).1" />
<Link Source="10077:[1142..1210).4" Target="10077:[1142..1210).1" />
<Link Source="10077:[1142..1210).4" Target="10076:[8445..8478).1" />
<Link Source="10077:[1142..1210).5" Target="10077:[1142..1210).2" />
<Link Source="10077:[1142..1210).5" Target="10077:[1142..1210).4" />
<Link Source="10077:[1142..1210).5" Target="10076:[8445..8478).1" />
<Link Source="10077:[1230..1239).1" Target="10077:[1039..1051).1" />
<Link Source="10077:[1230..1239).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1230..1239).1" Target="10076:[8445..8478).1" />
<Link Source="10077:[1269..1290).1" Target="10077:[1053..1090).1" />
<Link Source="10077:[1269..1290).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1269..1290).1" Target="10076:[8445..8478).1" />
<Link Source="10077:[1332..1342).1" Target="10077:[1092..1108).1" />
<Link Source="10077:[1332..1342).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1332..1342).1" Target="10076:[8445..8478).1" />
<Link Source="10076:[8505..8617).1" Target="10076:[7557..7578).1" />
<Link Source="10076:[8505..8617).1" Target="10076:[7626..8823).1" />
<Link Source="10076:[8505..8617).2" Target="10076:[7580..7600).1" />
<Link Source="10076:[8505..8617).2" Target="10076:[7626..8823).1" />
<Link Source="10076:[8607..8615).1" Target="10076:[7626..8823).1" />
<Link Source="10076:[3592..3700).1" Target="10076:[7524..8834).1" />
<Link Source="10076:[3592..3700).1" Target="10076:[8607..8615).1" />
<Link Source="10076:[3628..3685).1" Target="10076:[3592..3700).1" />
<Link Source="10076:[3628..3685).1" Target="10076:[8351..8419).4" />
<Link Source="10076:[3628..3685).1" Target="10077:[1230..1239).1" />
<Link Source="10076:[3628..3685).1" Target="10077:[1269..1290).1" />
<Link Source="10076:[3628..3685).1" Target="10077:[1332..1342).1" />
<Link Source="10076:[3628..3685).1" Target="EXTERNAL" />
<Link Source="10076:[3628..3685).1" Target="10076:[8607..8615).1" />
<Link Source="10076:[8505..8617).3" Target="10076:[3628..3685).1" />
<Link Source="10076:[8505..8617).3" Target="10076:[7626..8823).1" />
<Link Source="10076:[8521..8616).1" Target="10076:[7626..8823).1" />
<Link Source="10077:[39298..39335).1" Target="10076:[8505..8617).1" />
<Link Source="10077:[39298..39335).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[39337..39349).1" Target="10076:[8505..8617).2" />
<Link Source="10077:[39337..39349).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[39351..39364).1" Target="10076:[8505..8617).3" />
<Link Source="10077:[39351..39364).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[39261..44091).1" Target="10076:[8351..8419).4" />
<Link Source="10077:[39261..44091).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[39421..39431).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[1641..1732).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1641..1732).1" Target="10077:[39421..39431).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[1641..1732).1" />
<Link Source="10077:[1685..1713).1" Target="10076:[8351..8419).4" />
<Link Source="10077:[1685..1713).1" Target="10077:[1230..1239).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[1269..1290).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[1332..1342).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[39421..39431).1" />
<Link Source="10077:[39398..39590).1" Target="10077:[1685..1713).1" />
<Link Source="10077:[39398..39590).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[39398..39590).2" Target="10076:[8521..8616).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39298..39335).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39398..39590).1" />
<Link Source="10077:[39398..39590).5" Target="10076:[8521..8616).1" />
<Link Source="10077:[39626..39633).1" Target="10077:[39337..39349).1" />
<Link Source="10077:[39626..39633).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[39766..39774).1" Target="10077:[39351..39364).1" />
<Link Source="10077:[39766..39774).1" Target="10077:[39626..39633).1" />
<Link Source="10077:[39610..39829).1" Target="EXTERNAL" />
<Link Source="10077:[39610..39829).1" Target="10077:[39766..39774).1" />
<Link Source="10077:[39877..39936).1" Target="10077:[39298..39335).1" />
<Link Source="10077:[39877..39936).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[39877..39936).2" Target="10077:[39610..39829).1" />
<Link Source="10077:[39877..39936).2" Target="10076:[8521..8616).1" />
<Link Source="10077:[39887..39935).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[44159..44180).1" Target="10077:[39877..39936).1" />
<Link Source="10077:[44159..44180).1" Target="10077:[39887..39935).1" />
<Link Source="10077:[44182..44197).1" Target="10077:[39877..39936).2" />
<Link Source="10077:[44182..44197).1" Target="10077:[39887..39935).1" />
<Link Source="10077:[44231..44317).1" Target="10077:[44182..44197).1" />
<Link Source="10077:[44231..44317).1" Target="10077:[39887..39935).1" />
<Link Source="10077:[44231..44317).3" Target="10077:[39887..39935).1" />
<Link Source="10077:[44335..44374).1" Target="10077:[44159..44180).1" />
<Link Source="10077:[44335..44374).1" Target="10077:[39887..39935).1" />
<Link Source="10077:[44335..44374).2" Target="10077:[44182..44197).1" />
<Link Source="10077:[44335..44374).2" Target="10077:[39887..39935).1" />
<Link Source="10077:[44335..44374).3" Target="10077:[39887..39935).1" />
<Link Source="10077:[44342..44373).1" Target="10077:[39887..39935).1" />
<Link Source="10076:[875..902).1" Target="10077:[44335..44374).1" />
<Link Source="10076:[875..902).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[904..919).1" Target="10077:[44335..44374).2" />
<Link Source="10076:[904..919).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[853..1034).1" Target="10077:[44335..44374).3" />
<Link Source="10076:[853..1034).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[953..968).1" Target="10076:[875..902).1" />
<Link Source="10076:[953..968).1" Target="10076:[853..1034).1" />
<Link Source="10076:[953..968).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[1000..1010).1" Target="10076:[904..919).1" />
<Link Source="10076:[1000..1010).1" Target="10076:[853..1034).1" />
<Link Source="10076:[1000..1010).1" Target="10077:[44342..44373).1" />
<Link Source="10077:[39877..39936).3" Target="10077:[44335..44374).3" />
<Link Source="10077:[39877..39936).3" Target="10076:[8521..8616).1" />
<Link Source="10077:[39956..39970).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[39993..40004).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[2066..2158).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[2066..2158).1" Target="10077:[39993..40004).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[2066..2158).1" />
<Link Source="10077:[2110..2139).1" Target="10076:[8351..8419).4" />
<Link Source="10077:[2110..2139).1" Target="10077:[1230..1239).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[1269..1290).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[1332..1342).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[39993..40004).1" />
<Link Source="10077:[39988..44042).1" Target="10077:[2110..2139).1" />
<Link Source="10077:[39988..44042).1" Target="10076:[8521..8616).1" />
<Link Source="10077:[39988..44042).2" Target="10077:[39877..39936).3" />
<Link Source="10077:[39988..44042).2" Target="10076:[8521..8616).1" />
<Link Source="10077:[39988..44042).3" Target="10077:[39956..39970).1" />
<Link Source="10077:[39988..44042).3" Target="10076:[8521..8616).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).2" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).3" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).1" />
<Link Source="10077:[39988..44042).4" Target="10076:[953..968).1" />
<Link Source="10077:[39988..44042).4" Target="10076:[1000..1010).1" />
<Link Source="10077:[39988..44042).4" Target="10076:[8351..8419).4" />
<Link Source="10077:[39988..44042).4" Target="10077:[1230..1239).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[1269..1290).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[1332..1342).1" />
<Link Source="10077:[39988..44042).4" Target="10076:[8521..8616).1" />
<Link Source="10077:[39988..44042).5" Target="10076:[8521..8616).1" />
<Link Source="10076:[1241..1380).1" Target="10077:[39988..44042).4" />
<Link Source="10076:[1241..1380).1" Target="10077:[39988..44042).5" />
<Link Source="10076:[1307..1365).1" Target="10076:[1241..1380).1" />
<Link Source="10076:[1307..1365).1" Target="10077:[39988..44042).4" />
<Link Source="10076:[1307..1365).1" Target="10077:[39988..44042).5" />
<Link Source="10077:[40084..40108).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[1843..1943).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1843..1943).1" Target="10077:[40084..40108).1" />
<Link Source="10077:[1887..1924).1" Target="10077:[1843..1943).1" />
<Link Source="10077:[1887..1924).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[1887..1924).1" Target="10077:[40084..40108).1" />
<Link Source="10077:[40075..40109).1" Target="10077:[1887..1924).1" />
<Link Source="10077:[40075..40109).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[40133..43967).1" Target="10077:[39351..39364).1" />
<Link Source="10077:[40133..43967).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[43302..43313).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[1456..1548).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1456..1548).1" Target="10077:[43302..43313).1" />
<Link Source="10077:[1500..1529).1" Target="10077:[1456..1548).1" />
<Link Source="10077:[1500..1529).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[1500..1529).1" Target="10077:[43302..43313).1" />
<Link Source="10077:[43271..43374).1" Target="10077:[1500..1529).1" />
<Link Source="10077:[43271..43374).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).3" Target="10077:[40075..40109).1" />
<Link Source="10077:[43271..43374).3" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).4" Target="10077:[39298..39335).1" />
<Link Source="10077:[43271..43374).4" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).5" Target="10077:[39337..39349).1" />
<Link Source="10077:[43271..43374).5" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).6" Target="10077:[40133..43967).1" />
<Link Source="10077:[43280..43373).1" Target="10077:[40133..43967).1" />
<Link Source="10346:[1426..1457).1" Target="10077:[43271..43374).1" />
<Link Source="10346:[1426..1457).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1459..1470).1" Target="10077:[43271..43374).3" />
<Link Source="10346:[1459..1470).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1472..1506).1" Target="10077:[43271..43374).4" />
<Link Source="10346:[1472..1506).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1508..1520).1" Target="10077:[43271..43374).5" />
<Link Source="10346:[1508..1520).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1399..2435).1" Target="10077:[43271..43374).6" />
<Link Source="10346:[1399..2435).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1542..1546).1" Target="10346:[1459..1470).1" />
<Link Source="10346:[1542..1546).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1399..2435).2" Target="10077:[43280..43373).1" />
<Link Source="10286:[1247..1258).1" Target="10346:[1542..1546).1" />
<Link Source="10286:[1247..1258).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1231..1520).1" Target="10346:[1399..2435).1" />
<Link Source="10286:[1231..1520).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1260..1291).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1317..1350).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1317..1350).2" Target="10286:[1247..1258).1" />
<Link Source="10286:[1317..1350).2" Target="10286:[1317..1350).1" />
<Link Source="10286:[1317..1350).2" Target="10346:[1399..2435).2" />
<Link Source="10286:[1364..1368).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1364..1368).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1364..1368).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1390..1400).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1390..1400).1" Target="10076:[1307..1365).1" />
<Link Source="10286:[1390..1400).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1390..1400).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1428..1444).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1428..1444).1" Target="10076:[1307..1365).1" />
<Link Source="10286:[1428..1444).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1428..1444).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1478..1494).1" Target="10286:[1260..1291).1" />
<Link Source="10286:[1478..1494).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1478..1494).1" Target="10346:[1399..2435).2" />
<Link Source="10346:[858..868).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[858..868).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[932..947).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[932..947).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[974..986).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[974..986).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1017..1033).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1017..1033).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1074..1100).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1074..1100).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1572..1612).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1572..1612).2" Target="10346:[1426..1457).1" />
<Link Source="10346:[1572..1612).2" Target="10346:[1572..1612).1" />
<Link Source="10346:[1572..1612).2" Target="10077:[43280..43373).1" />
<Link Source="10346:[1626..1666).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1626..1666).2" Target="10346:[1472..1506).1" />
<Link Source="10346:[1626..1666).2" Target="10346:[1626..1666).1" />
<Link Source="10346:[1626..1666).2" Target="10077:[43280..43373).1" />
<Link Source="10346:[1682..1692).1" Target="10346:[1426..1457).1" />
<Link Source="10346:[1682..1692).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1682..1692).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1508..1520).1" />
<Link Source="10346:[1719..1832).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1719..1734).1" Target="10346:[1719..1832).1" />
<Link Source="10346:[1719..1734).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1719..1734).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1848..2424).1" Target="10346:[1508..1520).1" />
<Link Source="10346:[1848..2424).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1894..2409).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1894..2409).1" Target="10076:[1307..1365).1" />
<Link Source="10346:[1894..2409).1" Target="10346:[1848..2424).1" />
<Link Source="10346:[1994..2057).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1994..2057).1" Target="10346:[1894..2409).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1994..2057).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1894..2409).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1399..2435).1" />
<Link Source="10077:[43503..43514).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[1456..1548).2" Target="10077:[39261..44091).1" />
<Link Source="10077:[1456..1548).2" Target="10077:[43503..43514).1" />
<Link Source="10077:[1500..1529).2" Target="10077:[1456..1548).2" />
<Link Source="10077:[1500..1529).2" Target="10346:[1894..2409).1" />
<Link Source="10077:[1500..1529).2" Target="10077:[43503..43514).1" />
<Link Source="10077:[43402..43944).1" Target="10077:[1500..1529).2" />
<Link Source="10077:[43402..43944).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[43402..43944).3" Target="10077:[39298..39335).1" />
<Link Source="10077:[43402..43944).3" Target="10077:[40133..43967).1" />
<Link Source="10077:[43402..43944).4" Target="10077:[40133..43967).1" />
<Link Source="10077:[43991..44002).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[2110..2139).2" Target="10077:[43991..44002).1" />
<Link Source="10077:[2110..2139).2" Target="10077:[43402..43944).1" />
<Link Source="10077:[43991..44023).1" Target="10077:[2110..2139).2" />
<Link Source="10077:[43991..44023).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[43991..44023).2" Target="10077:[39877..39936).3" />
<Link Source="10077:[43991..44023).2" Target="10076:[1307..1365).1" />
<Link Source="10077:[43991..44023).3" Target="10077:[43271..43374).6" />
<Link Source="10077:[43991..44023).3" Target="10076:[1307..1365).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).2" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).3" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).1" />
<Link Source="10077:[43991..44023).4" Target="10076:[953..968).1" />
<Link Source="10077:[43991..44023).4" Target="10076:[1000..1010).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1428..1444).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1390..1400).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1364..1368).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1478..1494).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1231..1520).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1682..1692).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1719..1734).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[974..986).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1017..1033).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1074..1100).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[2079..2092).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[43402..43944).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1719..1832).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1894..2409).1" />
<Link Source="10077:[43991..44023).4" Target="10076:[1307..1365).1" />
<Link Source="10077:[43991..44023).5" Target="10076:[1307..1365).1" />
<Link Source="10077:[44062..44076).1" Target="10077:[43271..43374).6" />
<Link Source="10077:[44062..44076).1" Target="10076:[8521..8616).1" />
<Link Source="10076:[8643..8683).1" Target="10076:[8351..8419).4" />
<Link Source="10076:[8643..8683).1" Target="10076:[7626..8823).1" />
<Link Source="10076:[8643..8683).2" Target="10076:[7524..8834).1" />
<Link Source="10076:[8643..8683).2" Target="10077:[43991..44023).4" />
<Link Source="10076:[8643..8683).2" Target="10076:[8643..8683).1" />
<Link Source="10076:[8643..8683).2" Target="10076:[7626..8823).1" />
<Link Source="10076:[8709..8723).1" Target="10077:[44062..44076).1" />
<Link Source="10076:[8709..8723).1" Target="10076:[7626..8823).1" />
<Link Source="25002:[4395..4432).22" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).22" Target="10076:[8709..8723).1" />
<Link Source="25002:[4395..4432).22" Target="10076:[8643..8683).2" />
<Link Source="25002:[4395..4432).22" Target="28001:[21850..21895).1" />
<Link Source="10346:[3460..3499).1" Target="25002:[4395..4432).3" />
<Link Source="10346:[3460..3499).1" Target="25002:[4395..4432).1" />
<Link Source="10346:[3423..3863).1" Target="25002:[4395..4432).3" />
<Link Source="10346:[3423..3863).1" Target="25002:[4395..4432).1" />
<Link Source="10346:[3525..3638).1" Target="25002:[4395..4432).1" />
<Link Source="10346:[3525..3638).2" Target="10346:[3423..3863).1" />
<Link Source="10346:[3525..3638).2" Target="25002:[4395..4432).22" />
<Link Source="10346:[3525..3638).2" Target="10346:[3525..3638).1" />
<Link Source="10346:[3525..3638).2" Target="25002:[4395..4432).1" />
<Link Source="10346:[3654..3816).1" Target="25002:[4395..4432).1" />
<Link Source="10346:[3654..3816).2" Target="10346:[3423..3863).1" />
<Link Source="10346:[3654..3816).2" Target="25002:[4395..4432).22" />
<Link Source="10346:[3654..3816).2" Target="10346:[3654..3816).1" />
<Link Source="10346:[3654..3816).2" Target="25002:[4395..4432).1" />
<Link Source="10346:[3712..3801).1" Target="10346:[3423..3863).1" />
<Link Source="10346:[3712..3801).1" Target="25002:[4395..4432).22" />
<Link Source="10346:[3712..3801).1" Target="10346:[3654..3816).2" />
<Link Source="10346:[3712..3801).2" Target="10346:[3460..3499).1" />
<Link Source="10346:[3712..3801).2" Target="10346:[3654..3816).2" />
<Link Source="10346:[3712..3801).4" Target="10346:[3654..3816).2" />
<Link Source="10345:[2889..2923).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[2889..2923).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[2938..2962).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[2938..2962).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[2977..3016).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[2977..3016).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3031..3043).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[3031..3043).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3069..3118).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3102..3117).1" Target="10345:[3069..3118).1" />
<Link Source="10345:[3102..3117).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3132..3193).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3171..3192).1" Target="10345:[3132..3193).1" />
<Link Source="10345:[3171..3192).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3207..4163).1" Target="10345:[2889..2923).1" />
<Link Source="10345:[3207..4163).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[3207..4163).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3299..3362).1" Target="10345:[2889..2923).1" />
<Link Source="10345:[3299..3362).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3476..3483).1" Target="10345:[3031..3043).1" />
<Link Source="10345:[3476..3483).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3530..3552).1" Target="10345:[3299..3362).1" />
<Link Source="10345:[3530..3552).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3530..3552).1" Target="10345:[3476..3483).1" />
<Link Source="10345:[3458..3553).1" Target="10345:[3299..3362).1" />
<Link Source="10345:[3458..3553).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3458..3553).1" Target="10345:[3530..3552).1" />
<Link Source="10345:[3571..3619).1" Target="10345:[3299..3362).1" />
<Link Source="10345:[3571..3619).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[4179..4307).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[4179..4307).2" Target="10345:[3458..3553).1" />
<Link Source="10345:[4179..4307).2" Target="10345:[3207..4163).1" />
<Link Source="10345:[4179..4307).2" Target="10345:[4179..4307).1" />
<Link Source="10345:[4179..4307).2" Target="10346:[3712..3801).4" />
<Link Source="10345:[4524..4562).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[4578..4615).1" Target="10345:[2938..2962).1" />
<Link Source="10345:[4578..4615).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[4578..4615).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[4631..4714).1" Target="10345:[3571..3619).1" />
<Link Source="10345:[4631..4714).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[4631..4714).2" Target="10345:[2938..2962).1" />
<Link Source="10345:[4631..4714).2" Target="10346:[3712..3801).4" />
<Link Source="10345:[4631..4714).3" Target="10345:[4524..4562).1" />
<Link Source="10345:[4631..4714).3" Target="10346:[3712..3801).4" />
<Link Source="10345:[4651..4713).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[22236..22285).1" Target="10345:[4631..4714).1" />
<Link Source="10345:[22236..22285).1" Target="10345:[4651..4713).1" />
<Link Source="10345:[22300..22324).1" Target="10345:[4631..4714).2" />
<Link Source="10345:[22300..22324).1" Target="10345:[4651..4713).1" />
<Link Source="10345:[22339..22364).1" Target="10345:[4631..4714).3" />
<Link Source="10345:[22339..22364).1" Target="10345:[4651..4713).1" />
<Link Source="10345:[22390..22441).1" Target="10345:[22300..22324).1" />
<Link Source="10345:[22390..22441).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[22390..22441).1" Target="10345:[4651..4713).1" />
<Link Source="10345:[22457..22528).1" Target="10345:[4651..4713).1" />
<Link Source="10345:[22544..23796).1" Target="10345:[22236..22285).1" />
<Link Source="10345:[22544..23796).1" Target="10345:[4651..4713).1" />
<Link Source="10345:[22544..23796).2" Target="10345:[22544..23796).1" />
<Link Source="10345:[22544..23796).2" Target="10345:[3207..4163).1" />
<Link Source="10345:[22544..23796).2" Target="10345:[3530..3552).1" />
<Link Source="10345:[22544..23796).2" Target="10345:[4651..4713).1" />
<Link Source="10345:[23812..23848).1" Target="10345:[22457..22528).1" />
<Link Source="10345:[23812..23848).1" Target="10345:[4651..4713).1" />
<Link Source="10345:[4631..4714).4" Target="10345:[23812..23848).1" />
<Link Source="10345:[4631..4714).4" Target="10346:[3712..3801).4" />
<Link Source="10345:[4728..4802).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[4816..4896).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[4910..12753).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[4910..12753).2" Target="10345:[3458..3553).1" />
<Link Source="10345:[4910..12753).2" Target="10345:[3207..4163).1" />
<Link Source="10345:[4910..12753).2" Target="10345:[4910..12753).1" />
<Link Source="10345:[4910..12753).2" Target="10346:[3712..3801).4" />
<Link Source="10345:[5177..5197).1" Target="10345:[4910..12753).2" />
<Link Source="10345:[5215..6073).1" Target="10345:[2889..2923).1" />
<Link Source="10345:[5215..6073).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[5215..6073).1" Target="10345:[3530..3552).1" />
<Link Source="10345:[5215..6073).1" Target="EXTERNAL" />
<Link Source="10345:[5215..6073).1" Target="10345:[4910..12753).2" />
<Link Source="10345:[5535..5955).1" Target="10345:[5215..6073).1" />
<Link Source="10345:[5535..5955).2" Target="10345:[4631..4714).4" />
<Link Source="10345:[5535..5955).2" Target="10345:[23812..23848).1" />
<Link Source="10345:[5535..5955).2" Target="10345:[5535..5955).1" />
<Link Source="10345:[5535..5955).2" Target="10345:[5215..6073).1" />
<Link Source="10345:[5549..5574).1" Target="10345:[5535..5955).2" />
<Link Source="10345:[5549..5574).1" Target="10345:[5215..6073).1" />
<Link Source="10345:[6014..6030).1" Target="10345:[5215..6073).1" />
<Link Source="10346:[3331..3400).1" Target="10345:[2938..2962).1" />
<Link Source="10346:[3331..3400).1" Target="10345:[6014..6030).1" />
<Link Source="10346:[3367..3385).1" Target="10346:[3331..3400).1" />
<Link Source="10346:[3367..3385).1" Target="10345:[3207..4163).1" />
<Link Source="10346:[3367..3385).1" Target="10345:[6014..6030).1" />
<Link Source="10345:[5977..6054).1" Target="10346:[3367..3385).1" />
<Link Source="10345:[5977..6054).1" Target="10345:[5215..6073).1" />
<Link Source="10345:[5977..6054).3" Target="10345:[2938..2962).1" />
<Link Source="10345:[5977..6054).3" Target="10345:[3207..4163).1" />
<Link Source="10345:[5977..6054).3" Target="10345:[5215..6073).1" />
<Link Source="10345:[5977..6054).4" Target="10345:[5549..5574).1" />
<Link Source="10345:[5977..6054).4" Target="10345:[5215..6073).1" />
<Link Source="10345:[5977..6054).5" Target="10345:[5215..6073).1" />
<Link Source="10345:[5992..6053).1" Target="10345:[5215..6073).1" />
<Link Source="10346:[2571..2602).1" Target="10345:[5977..6054).1" />
<Link Source="10346:[2571..2602).1" Target="10345:[5992..6053).1" />
<Link Source="10346:[2604..2615).1" Target="10345:[5977..6054).3" />
<Link Source="10346:[2604..2615).1" Target="10345:[5992..6053).1" />
<Link Source="10346:[2617..2639).1" Target="10345:[5977..6054).4" />
<Link Source="10346:[2617..2639).1" Target="10345:[5992..6053).1" />
<Link Source="10346:[2544..2854).1" Target="10345:[5977..6054).5" />
<Link Source="10346:[2544..2854).1" Target="10345:[5992..6053).1" />
<Link Source="10346:[2661..2665).1" Target="10346:[2604..2615).1" />
<Link Source="10346:[2661..2665).1" Target="10345:[5992..6053).1" />
<Link Source="10346:[2544..2854).2" Target="10345:[5992..6053).1" />
<Link Source="10286:[1247..1258).2" Target="10346:[2661..2665).1" />
<Link Source="10286:[1247..1258).2" Target="10346:[2544..2854).2" />
<Link Source="10286:[1317..1350).5" Target="10346:[2544..2854).2" />
<Link Source="10286:[1317..1350).6" Target="10286:[1247..1258).2" />
<Link Source="10286:[1317..1350).6" Target="10286:[1317..1350).5" />
<Link Source="10286:[1317..1350).6" Target="10346:[2544..2854).2" />
<Link Source="10346:[858..868).2" Target="10346:[2544..2854).1" />
<Link Source="10346:[858..868).2" Target="10345:[5992..6053).1" />
<Link Source="10346:[932..947).2" Target="10346:[2544..2854).1" />
<Link Source="10346:[932..947).2" Target="10345:[5992..6053).1" />
<Link Source="10346:[2691..2750).1" Target="10345:[5992..6053).1" />
<Link Source="10346:[2691..2750).2" Target="10346:[2571..2602).1" />
<Link Source="10346:[2691..2750).2" Target="10346:[2691..2750).1" />
<Link Source="10346:[2691..2750).2" Target="10345:[5992..6053).1" />
<Link Source="10346:[2766..2776).1" Target="10346:[2571..2602).1" />
<Link Source="10346:[2766..2776).1" Target="10346:[2544..2854).1" />
<Link Source="10346:[2766..2776).1" Target="10345:[5992..6053).1" />
<Link Source="10346:[2803..2843).1" Target="10346:[2617..2639).1" />
<Link Source="10346:[2803..2843).1" Target="10345:[5992..6053).1" />
<Link Source="10346:[2803..2815).1" Target="10346:[2803..2843).1" />
<Link Source="10346:[2803..2815).1" Target="10346:[2544..2854).1" />
<Link Source="10346:[2803..2815).1" Target="10345:[5992..6053).1" />
<Link Source="10345:[6093..6197).1" Target="10345:[4910..12753).2" />
<Link Source="10345:[6217..12698).1" Target="10345:[3458..3553).1" />
<Link Source="10345:[6217..12698).1" Target="10345:[4910..12753).2" />
<Link Source="10345:[6305..6346).1" Target="10345:[6217..12698).1" />
<Link Source="10345:[6305..6346).2" Target="10345:[4578..4615).1" />
<Link Source="10345:[6305..6346).2" Target="10345:[6305..6346).1" />
<Link Source="10345:[6305..6346).2" Target="10345:[3207..4163).1" />
<Link Source="10345:[6305..6346).2" Target="10345:[3530..3552).1" />
<Link Source="10345:[6305..6346).2" Target="10345:[6217..12698).1" />
<Link Source="10345:[6370..12679).1" Target="10345:[6217..12698).1" />
<Link Source="10345:[6370..12679).2" Target="10345:[6217..12698).1" />
<Link Source="10345:[6370..12679).2" Target="10345:[6305..6346).2" />
<Link Source="10345:[6370..12679).2" Target="10345:[6370..12679).1" />
<Link Source="10345:[9317..9540).1" Target="10345:[6217..12698).1" />
<Link Source="10345:[9317..9540).1" Target="10345:[6305..6346).2" />
<Link Source="10345:[9317..9540).1" Target="10345:[6370..12679).2" />
<Link Source="10345:[9568..9663).1" Target="EXTERNAL" />
<Link Source="10345:[9568..9663).1" Target="10345:[6370..12679).2" />
<Link Source="10345:[9592..9662).1" Target="10345:[6370..12679).2" />
<Link Source="10307:[2552..2569).1" Target="10345:[9568..9663).1" />
<Link Source="10307:[2552..2569).1" Target="10345:[9592..9662).1" />
<Link Source="10307:[2516..2720).1" Target="10345:[5977..6054).5" />
<Link Source="10307:[2516..2720).1" Target="10345:[9592..9662).1" />
<Link Source="10307:[2595..2709).1" Target="10307:[2516..2720).1" />
<Link Source="10307:[2595..2709).1" Target="10286:[1247..1258).2" />
<Link Source="10307:[2595..2709).1" Target="10345:[9592..9662).1" />
<Link Source="10307:[2595..2709).2" Target="10307:[2552..2569).1" />
<Link Source="10307:[2595..2709).2" Target="10345:[9592..9662).1" />
<Link Source="10307:[2602..2628).1" Target="10345:[9592..9662).1" />
<Link Source="10298:[471..492).6" Target="10307:[2595..2709).1" />
<Link Source="10298:[471..492).6" Target="10307:[2602..2628).1" />
<Link Source="10298:[494..511).6" Target="10307:[2595..2709).2" />
<Link Source="10298:[494..511).6" Target="10307:[2602..2628).1" />
<Link Source="10298:[537..568).16" Target="10298:[471..492).6" />
<Link Source="10298:[537..568).16" Target="10298:[494..511).6" />
<Link Source="10298:[537..568).16" Target="10307:[2602..2628).1" />
<Link Source="10307:[2672..2708).1" Target="10298:[537..568).16" />
<Link Source="10286:[1549..1560).1" Target="10298:[537..568).16" />
<Link Source="10286:[1549..1560).1" Target="10307:[2672..2708).1" />
<Link Source="10286:[1562..1579).1" Target="10298:[537..568).16" />
<Link Source="10286:[1562..1579).1" Target="10307:[2672..2708).1" />
<Link Source="10286:[1532..2083).1" Target="10298:[537..568).16" />
<Link Source="10286:[1532..2083).1" Target="10307:[2672..2708).1" />
<Link Source="10286:[1605..1638).1" Target="10307:[2672..2708).1" />
<Link Source="10286:[1605..1638).2" Target="10286:[1549..1560).1" />
<Link Source="10286:[1605..1638).2" Target="10286:[1605..1638).1" />
<Link Source="10286:[1605..1638).2" Target="10307:[2672..2708).1" />
<Link Source="10286:[1688..1781).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[1688..1781).1" Target="10307:[2672..2708).1" />
<Link Source="10286:[1688..1781).2" Target="EXTERNAL" />
<Link Source="10286:[1688..1781).2" Target="10307:[2672..2708).1" />
<Link Source="10286:[1708..1779).1" Target="10307:[2672..2708).1" />
<Link Source="10298:[471..492).7" Target="10286:[1688..1781).1" />
<Link Source="10298:[471..492).7" Target="10286:[1708..1779).1" />
<Link Source="10298:[494..511).7" Target="10286:[1688..1781).2" />
<Link Source="10298:[494..511).7" Target="10286:[1708..1779).1" />
<Link Source="10286:[1820..1963).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[1820..1963).1" Target="10307:[2672..2708).1" />
<Link Source="10286:[1820..1963).2" Target="EXTERNAL" />
<Link Source="10286:[1820..1963).2" Target="10307:[2672..2708).1" />
<Link Source="10286:[1840..1888).1" Target="10307:[2672..2708).1" />
<Link Source="10298:[471..492).8" Target="10286:[1820..1963).1" />
<Link Source="10298:[471..492).8" Target="10286:[1840..1888).1" />
<Link Source="10298:[494..511).8" Target="10286:[1820..1963).2" />
<Link Source="10298:[494..511).8" Target="10286:[1840..1888).1" />
<Link Source="10286:[1977..1981).1" Target="10286:[1549..1560).1" />
<Link Source="10286:[1977..1981).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[1977..1981).1" Target="10307:[2672..2708).1" />
<Link Source="10286:[2003..2013).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[2003..2013).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[2003..2013).1" Target="10307:[2672..2708).1" />
<Link Source="10286:[2036..2052).1" Target="10286:[1549..1560).1" />
<Link Source="10286:[2036..2052).1" Target="10286:[1247..1258).2" />
<Link Source="10286:[2036..2052).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[2036..2052).1" Target="10307:[2672..2708).1" />
<Link Source="10345:[9689..9824).1" Target="10345:[6217..12698).1" />
<Link Source="10345:[9689..9824).1" Target="10345:[6305..6346).2" />
<Link Source="10345:[9689..9824).1" Target="10345:[6370..12679).2" />
<Link Source="10345:[9689..9824).2" Target="10345:[4524..4562).1" />
<Link Source="10345:[9689..9824).2" Target="10345:[6370..12679).2" />
<Link Source="10345:[9689..9824).3" Target="10345:[2977..3016).1" />
<Link Source="10345:[9689..9824).3" Target="10345:[6370..12679).2" />
<Link Source="10345:[9704..9801).1" Target="10345:[6370..12679).2" />
<Link Source="10319:[17798..17821).1" Target="10345:[9689..9824).1" />
<Link Source="10319:[17798..17821).1" Target="10345:[9704..9801).1" />
<Link Source="10319:[17823..17848).1" Target="10345:[9689..9824).2" />
<Link Source="10319:[17823..17848).1" Target="10345:[9704..9801).1" />
<Link Source="10319:[17850..17896).1" Target="10345:[9689..9824).3" />
<Link Source="10319:[17850..17896).1" Target="10345:[9704..9801).1" />
<Link Source="10319:[17719..18035).1" Target="10298:[537..568).16" />
<Link Source="10319:[17719..18035).1" Target="10345:[9704..9801).1" />
<Link Source="10319:[17922..18024).1" Target="10319:[17798..17821).1" />
<Link Source="10319:[17922..18024).1" Target="10345:[9704..9801).1" />
<Link Source="10319:[17922..18024).2" Target="10319:[17823..17848).1" />
<Link Source="10319:[17922..18024).2" Target="10345:[9704..9801).1" />
<Link Source="10319:[17922..18024).3" Target="10319:[17850..17896).1" />
<Link Source="10319:[17922..18024).3" Target="10345:[9704..9801).1" />
<Link Source="10319:[17922..18024).4" Target="10345:[9704..9801).1" />
<Link Source="10319:[17922..18024).5" Target="10319:[17850..17896).1" />
<Link Source="10319:[17922..18024).5" Target="10319:[17922..18024).4" />
<Link Source="10319:[17922..18024).5" Target="10345:[9704..9801).1" />
<Link Source="10319:[17929..18023).1" Target="10345:[9704..9801).1" />
<Link Source="10319:[18431..18454).1" Target="10319:[17922..18024).1" />
<Link Source="10319:[18431..18454).1" Target="10319:[17929..18023).1" />
<Link Source="10319:[18456..18481).1" Target="10319:[17922..18024).2" />
<Link Source="10319:[18456..18481).1" Target="10319:[17929..18023).1" />
<Link Source="10319:[18483..18522).1" Target="10319:[17922..18024).3" />
<Link Source="10319:[18483..18522).1" Target="10319:[17929..18023).1" />
<Link Source="10319:[18524..18555).1" Target="10319:[17922..18024).5" />
<Link Source="10319:[18524..18555).1" Target="10319:[17929..18023).1" />
<Link Source="10319:[18300..18837).1" Target="10319:[17719..18035).1" />
<Link Source="10319:[18300..18837).1" Target="10319:[17929..18023).1" />
<Link Source="10319:[18581..18696).1" Target="10319:[18431..18454).1" />
<Link Source="10319:[18581..18696).1" Target="10319:[17929..18023).1" />
<Link Source="10319:[18581..18696).2" Target="10319:[18456..18481).1" />
<Link Source="10319:[18581..18696).2" Target="10319:[17929..18023).1" />
<Link Source="10319:[18581..18696).3" Target="10319:[18483..18522).1" />
<Link Source="10319:[18581..18696).3" Target="10319:[17929..18023).1" />
<Link Source="10319:[18581..18696).4" Target="10319:[18524..18555).1" />
<Link Source="10319:[18581..18696).4" Target="10319:[17929..18023).1" />
<Link Source="10319:[18594..18695).1" Target="10319:[17929..18023).1" />
<Link Source="10319:[20002..20025).1" Target="10319:[18581..18696).1" />
<Link Source="10319:[20002..20025).1" Target="10319:[18594..18695).1" />
<Link Source="10319:[20027..20052).1" Target="10319:[18581..18696).2" />
<Link Source="10319:[20027..20052).1" Target="10319:[18594..18695).1" />
<Link Source="10319:[20054..20093).1" Target="10319:[18581..18696).3" />
<Link Source="10319:[20054..20093).1" Target="10319:[18594..18695).1" />
<Link Source="10319:[20095..20126).1" Target="10319:[18581..18696).4" />
<Link Source="10319:[20095..20126).1" Target="10319:[18594..18695).1" />
<Link Source="10319:[19916..30085).1" Target="10319:[18300..18837).1" />
<Link Source="10319:[19916..30085).1" Target="10319:[18594..18695).1" />
<Link Source="10319:[20152..24647).1" Target="10319:[20002..20025).1" />
<Link Source="10319:[20152..24647).1" Target="10345:[6305..6346).2" />
<Link Source="10319:[20152..24647).1" Target="10319:[18594..18695).1" />
<Link Source="10319:[20508..20675).1" Target="10319:[20002..20025).1" />
<Link Source="10319:[20508..20675).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).2" Target="10319:[20027..20052).1" />
<Link Source="10319:[20508..20675).2" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).3" Target="10319:[20054..20093).1" />
<Link Source="10319:[20508..20675).3" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).4" Target="10319:[20095..20126).1" />
<Link Source="10319:[20508..20675).4" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).5" Target="10319:[20152..24647).1" />
<Link Source="10319:[20515..20674).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[41849..41874).1" Target="10319:[20508..20675).1" />
<Link Source="10319:[41849..41874).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41889..41914).1" Target="10319:[20508..20675).2" />
<Link Source="10319:[41889..41914).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41929..41968).1" Target="10319:[20508..20675).3" />
<Link Source="10319:[41929..41968).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41983..42014).1" Target="10319:[20508..20675).4" />
<Link Source="10319:[41983..42014).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42029..42063).1" Target="10319:[20508..20675).5" />
<Link Source="10319:[42029..42063).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41732..45579).1" Target="10319:[19916..30085).1" />
<Link Source="10319:[41732..45579).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42478..42805).1" Target="10319:[42089..42141).1" />
<Link Source="10319:[42478..42805).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[42821..42938).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).3" Target="10319:[42089..42141).1" />
<Link Source="10319:[42821..42938).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).6" Target="10319:[41889..41914).1" />
<Link Source="10319:[42821..42938).6" Target="10319:[20515..20674).1" />
<Link Source="10319:[42839..42937).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[63849..63870).1" Target="10319:[42821..42938).1" />
<Link Source="10319:[63849..63870).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63885..63919).1" Target="10319:[42821..42938).2" />
<Link Source="10319:[63885..63919).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63934..63945).1" Target="10319:[42821..42938).3" />
<Link Source="10319:[63934..63945).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63960..63969).1" Target="10319:[42821..42938).4" />
<Link Source="10319:[63960..63969).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63984..64009).1" Target="10319:[42821..42938).6" />
<Link Source="10319:[63984..64009).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63768..64484).1" Target="10319:[41732..45579).1" />
<Link Source="10319:[63768..64484).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[64035..64445).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[63885..63919).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[64035..64445).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[42839..42937).1" />
<Link Source="10319:[64461..64473).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[42821..42938).7" Target="10319:[64461..64473).1" />
<Link Source="10319:[42821..42938).7" Target="10319:[20515..20674).1" />
<Link Source="10319:[42952..43079).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42952..43079).2" Target="10319:[42821..42938).7" />
<Link Source="10319:[42952..43079).2" Target="10319:[42952..43079).1" />
<Link Source="10319:[42952..43079).2" Target="10319:[20515..20674).1" />
<Link Source="10354:[10975..11012).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[11026..11097).1" Target="10354:[10975..11012).1" />
<Link Source="10354:[11026..11097).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[11026..11097).3" Target="10354:[10826..10838).1" />
<Link Source="10354:[11142..11154).1" Target="10354:[11026..11097).1" />
<Link Source="10354:[11142..11154).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[10809..10838).1" Target="10354:[11142..11154).1" />
<Link Source="10319:[43108..43134).1" Target="10319:[20515..20674).1" />
<Link Source="10354:[11244..11285).1" Target="10354:[10809..10838).1" />
<Link Source="10354:[11244..11285).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[11244..11285).2" Target="10354:[10809..10838).1" />
<Link Source="10354:[11244..11285).2" Target="10354:[11026..11097).1" />
<Link Source="10354:[11244..11285).2" Target="10319:[43108..43134).1" />
<Link Source="10354:[11244..11285).3" Target="10319:[43108..43134).1" />
<Link Source="10354:[3419..3448).1" Target="10354:[11244..11285).2" />
<Link Source="10354:[3419..3448).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3398..3626).1" Target="10354:[11244..11285).1" />
<Link Source="10354:[3398..3626).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3068..3073).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3068..3073).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3200..3211).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3200..3211).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3319..3325).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3319..3325).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3380..3385).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3380..3385).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3474..3479).1" Target="10354:[3419..3448).1" />
<Link Source="10354:[3474..3479).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3474..3479).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3501..3506).1" Target="EXTERNAL" />
<Link Source="10354:[3501..3506).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3501..3506).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3546..3587).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3546..3557).1" Target="10354:[3546..3587).1" />
<Link Source="10354:[3546..3557).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3546..3557).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3601..3615).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3601..3607).1" Target="10354:[3601..3615).1" />
<Link Source="10354:[3601..3607).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3601..3607).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[11244..11285).4" Target="10354:[11244..11285).2" />
<Link Source="10354:[11244..11285).4" Target="10354:[11244..11285).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3501..3506).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3546..3557).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3601..3607).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3474..3479).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3546..3587).1" />
<Link Source="10354:[11244..11285).4" Target="10319:[43108..43134).1" />
<Link Source="10354:[11312..11328).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[3684..3818).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[3684..3818).1" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).1" Target="10354:[3684..3818).1" />
<Link Source="10354:[3720..3803).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).1" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).1" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).2" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).3" Target="10354:[3684..3818).1" />
<Link Source="10354:[3720..3803).3" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).3" Target="10354:[3720..3803).2" />
<Link Source="10354:[3720..3803).3" Target="10354:[11312..11328).1" />
<Link Source="10354:[11299..11330).1" Target="10354:[3720..3803).1" />
<Link Source="10354:[11299..11330).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[11344..11360).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[11344..11360).1" Target="10319:[43108..43134).1" />
<Link Source="10319:[43095..43135).1" Target="10354:[11344..11360).1" />
<Link Source="10319:[43095..43135).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43149..43246).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[43149..43246).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[41849..41874).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[20152..24647).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43173..43245).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[50313..50328).1" Target="10319:[43149..43246).1" />
<Link Source="10319:[50313..50328).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[50330..50355).1" Target="10319:[43149..43246).2" />
<Link Source="10319:[50330..50355).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[50381..51340).1" Target="10319:[50313..50328).1" />
<Link Source="10319:[50381..51340).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[51282..51325).1" Target="EXTERNAL" />
<Link Source="10319:[51282..51325).1" Target="10319:[50381..51340).1" />
<Link Source="10319:[43262..43312).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).1" Target="10319:[43095..43135).1" />
<Link Source="10319:[43326..43490).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[43326..43490).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).3" Target="10319:[42089..42141).1" />
<Link Source="10319:[43326..43490).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).6" Target="10319:[41929..41968).1" />
<Link Source="10319:[43326..43490).6" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).7" Target="10319:[51282..51325).1" />
<Link Source="10319:[43326..43490).7" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).10" Target="10319:[43262..43312).1" />
<Link Source="10319:[43326..43490).10" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43489).1" Target="10319:[20515..20674).1" />
<Link Source="10312:[994..1013).1" Target="10319:[43326..43490).1" />
<Link Source="10312:[994..1013).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1028..1062).1" Target="10319:[43326..43490).2" />
<Link Source="10312:[1028..1062).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1077..1093).1" Target="10319:[43326..43490).3" />
<Link Source="10312:[1077..1093).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1108..1117).1" Target="10319:[43326..43490).4" />
<Link Source="10312:[1108..1117).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1132..1171).1" Target="10319:[43326..43490).6" />
<Link Source="10312:[1132..1171).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1186..1207).1" Target="10319:[43326..43490).7" />
<Link Source="10312:[1186..1207).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1222..1235).1" Target="10319:[43326..43490).4" />
<Link Source="10312:[1222..1235).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1250..1296).1" Target="10319:[43326..43490).10" />
<Link Source="10312:[1250..1296).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[942..1750).1" Target="10319:[41732..45579).1" />
<Link Source="10312:[942..1750).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1322..1739).1" Target="10312:[1186..1207).1" />
<Link Source="10312:[1322..1739).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1326..1357).1" Target="10319:[43326..43489).1" />
<Link Source="10353:[7504..7530).1" Target="10312:[1322..1739).1" />
<Link Source="10353:[7504..7530).1" Target="10312:[1326..1357).1" />
<Link Source="10353:[7556..7642).1" Target="10353:[7504..7530).1" />
<Link Source="10353:[7556..7642).1" Target="EXTERNAL" />
<Link Source="10353:[7556..7642).1" Target="10312:[1326..1357).1" />
<Link Source="10312:[1585..1724).1" Target="10312:[994..1013).1" />
<Link Source="10312:[1585..1724).1" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).2" Target="10312:[1028..1062).1" />
<Link Source="10312:[1585..1724).2" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).3" Target="10312:[1077..1093).1" />
<Link Source="10312:[1585..1724).3" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).4" Target="10312:[1108..1117).1" />
<Link Source="10312:[1585..1724).4" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).5" Target="10312:[1132..1171).1" />
<Link Source="10312:[1585..1724).5" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).6" Target="10312:[1186..1207).1" />
<Link Source="10312:[1585..1724).6" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).7" Target="10312:[1222..1235).1" />
<Link Source="10312:[1585..1724).7" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).8" Target="10312:[1250..1296).1" />
<Link Source="10312:[1585..1724).8" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1723).1" Target="10353:[7556..7642).1" />
<Link Source="10312:[5721..5740).1" Target="10312:[1585..1724).1" />
<Link Source="10312:[5721..5740).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5755..5789).1" Target="10312:[1585..1724).2" />
<Link Source="10312:[5755..5789).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5804..5815).1" Target="10312:[1585..1724).3" />
<Link Source="10312:[5804..5815).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5830..5839).1" Target="10312:[1585..1724).4" />
<Link Source="10312:[5830..5839).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5854..5893).1" Target="10312:[1585..1724).5" />
<Link Source="10312:[5854..5893).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5908..5929).1" Target="10312:[1585..1724).6" />
<Link Source="10312:[5908..5929).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5944..5957).1" Target="10312:[1585..1724).7" />
<Link Source="10312:[5944..5957).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5972..6018).1" Target="10312:[1585..1724).8" />
<Link Source="10312:[5972..6018).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5663..6444).1" Target="10312:[942..1750).1" />
<Link Source="10312:[5663..6444).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[6044..6433).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[5755..5789).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[6044..6433).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[1585..1723).1" />
<Link Source="10312:[6110..6221).1" Target="10312:[5721..5740).1" />
<Link Source="10312:[6110..6221).1" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).2" Target="10312:[5804..5815).1" />
<Link Source="10312:[6110..6221).2" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).3" Target="10312:[5830..5839).1" />
<Link Source="10312:[6110..6221).3" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).4" Target="10312:[5854..5893).1" />
<Link Source="10312:[6110..6221).4" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).5" Target="10312:[5908..5929).1" />
<Link Source="10312:[6110..6221).5" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).6" Target="10312:[5944..5957).1" />
<Link Source="10312:[6110..6221).6" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).7" Target="10312:[5972..6018).1" />
<Link Source="10312:[6110..6221).7" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6220).1" Target="10312:[6044..6433).2" />
<Link Source="10312:[3696..3715).1" Target="10312:[6110..6221).1" />
<Link Source="10312:[3696..3715).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3717..3728).1" Target="10312:[6110..6221).2" />
<Link Source="10312:[3717..3728).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3730..3739).1" Target="10312:[6110..6221).3" />
<Link Source="10312:[3730..3739).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3741..3780).1" Target="10312:[6110..6221).4" />
<Link Source="10312:[3741..3780).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3782..3803).1" Target="10312:[6110..6221).5" />
<Link Source="10312:[3782..3803).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3805..3818).1" Target="10312:[6110..6221).6" />
<Link Source="10312:[3805..3818).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3820..3866).1" Target="10312:[6110..6221).7" />
<Link Source="10312:[3820..3866).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3645..5112).1" Target="10312:[5663..6444).1" />
<Link Source="10312:[3645..5112).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3905..3919).1" Target="10312:[6110..6220).1" />
<Link Source="10354:[3684..3818).2" Target="10312:[3696..3715).1" />
<Link Source="10354:[3684..3818).2" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).9" Target="10354:[3684..3818).2" />
<Link Source="10354:[3720..3803).9" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).9" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).9" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).10" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).11" Target="10354:[3684..3818).2" />
<Link Source="10354:[3720..3803).11" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).11" Target="10354:[3720..3803).10" />
<Link Source="10354:[3720..3803).11" Target="10312:[3905..3919).1" />
<Link Source="10312:[3892..3921).1" Target="10354:[3720..3803).9" />
<Link Source="10312:[3892..3921).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3935..3968).1" Target="10312:[3782..3803).1" />
<Link Source="10312:[3935..3968).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3948..3966).1" Target="10312:[6110..6220).1" />
<Link Source="10353:[4698..4724).1" Target="10312:[3935..3968).1" />
<Link Source="10353:[4698..4724).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4750..4847).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[4750..4847).1" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4863..5000).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[4863..5000).1" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4863..5000).2" Target="10312:[3948..3966).1" />
<Link Source="10353:[5079..5183).1" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5197..5323).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[5197..5323).1" Target="10353:[5079..5183).1" />
<Link Source="10353:[5197..5323).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).1" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).2" Target="10353:[4698..4724).1" />
<Link Source="10353:[5485..5759).2" Target="10353:[5485..5759).1" />
<Link Source="10353:[5485..5759).2" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).3" Target="10312:[3948..3966).1" />
<Link Source="10353:[5775..5979).1" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5775..5979).3" Target="10353:[4698..4724).1" />
<Link Source="10353:[5775..5979).3" Target="10353:[5775..5979).1" />
<Link Source="10353:[5775..5979).3" Target="10312:[3948..3966).1" />
<Link Source="10353:[5995..6029).1" Target="10353:[5775..5979).3" />
<Link Source="10353:[5995..6029).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[6002..6028).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[6343..6358).1" Target="10353:[5995..6029).1" />
<Link Source="10353:[6343..6358).1" Target="10353:[6002..6028).1" />
<Link Source="10353:[6384..6410).1" Target="10353:[6002..6028).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6343..6358).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6384..6410).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6002..6028).1" />
<Link Source="10312:[3984..4005).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).1" Target="10312:[3645..5112).1" />
<Link Source="10312:[4019..5073).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).2" Target="10312:[6110..6220).1" />
<Link Source="10312:[4060..4080).1" Target="10312:[6110..6220).1" />
<Link Source="10354:[4919..5009).1" Target="10312:[3696..3715).1" />
<Link Source="10354:[4919..5009).1" Target="10312:[4060..4080).1" />
<Link Source="10354:[4962..4966).1" Target="10312:[4060..4080).1" />
<Link Source="10354:[4058..4122).1" Target="10354:[4919..5009).1" />
<Link Source="10354:[4058..4122).1" Target="10354:[4962..4966).1" />
<Link Source="10354:[4094..4107).1" Target="10354:[4058..4122).1" />
<Link Source="10354:[4094..4107).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[4094..4107).1" Target="10354:[4962..4966).1" />
<Link Source="10354:[4955..4994).1" Target="10354:[4094..4107).1" />
<Link Source="10354:[4955..4994).1" Target="10312:[4060..4080).1" />
<Link Source="10312:[4019..5073).4" Target="10354:[4955..4994).1" />
<Link Source="10312:[4019..5073).4" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).5" Target="10312:[4019..5073).1" />
<Link Source="10312:[4019..5073).5" Target="10312:[4019..5073).4" />
<Link Source="10312:[4019..5073).5" Target="10312:[6110..6220).1" />
<Link Source="10312:[4134..4806).1" Target="10312:[4019..5073).5" />
<Link Source="10312:[4134..4806).2" Target="10312:[3984..4005).1" />
<Link Source="10312:[4134..4806).2" Target="10312:[4134..4806).1" />
<Link Source="10312:[4134..4806).2" Target="10312:[4019..5073).5" />
<Link Source="10312:[4534..4658).1" Target="10312:[3696..3715).1" />
<Link Source="10312:[4534..4658).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).2" Target="10312:[3717..3728).1" />
<Link Source="10312:[4534..4658).2" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).3" Target="10312:[3730..3739).1" />
<Link Source="10312:[4534..4658).3" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).4" Target="10312:[3741..3780).1" />
<Link Source="10312:[4534..4658).4" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).5" Target="10312:[3782..3803).1" />
<Link Source="10312:[4534..4658).5" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).6" Target="10312:[3645..5112).1" />
<Link Source="10312:[4534..4658).6" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).7" Target="10312:[3805..3818).1" />
<Link Source="10312:[4534..4658).7" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).8" Target="10312:[3820..3866).1" />
<Link Source="10312:[4534..4658).8" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4657).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[5188..5207).1" Target="10312:[4534..4658).1" />
<Link Source="10312:[5188..5207).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5209..5220).1" Target="10312:[4534..4658).2" />
<Link Source="10312:[5209..5220).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5222..5231).1" Target="10312:[4534..4658).3" />
<Link Source="10312:[5222..5231).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5233..5272).1" Target="10312:[4534..4658).4" />
<Link Source="10312:[5233..5272).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5274..5295).1" Target="10312:[4534..4658).5" />
<Link Source="10312:[5274..5295).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5297..5318).1" Target="10312:[4534..4658).6" />
<Link Source="10312:[5297..5318).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5320..5333).1" Target="10312:[4534..4658).7" />
<Link Source="10312:[5320..5333).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5335..5381).1" Target="10312:[4534..4658).8" />
<Link Source="10312:[5335..5381).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5124..5404).1" Target="10312:[4019..5073).1" />
<Link Source="10312:[5124..5404).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[4534..4658).9" Target="10312:[4134..4806).2" />
<Link Source="10312:[4685..4699).1" Target="10312:[4134..4806).2" />
<Link Source="10354:[3684..3818).3" Target="10312:[3696..3715).1" />
<Link Source="10354:[3684..3818).3" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).17" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).17" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).17" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).17" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).18" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).19" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).19" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).19" Target="10354:[3720..3803).18" />
<Link Source="10354:[3720..3803).19" Target="10312:[4685..4699).1" />
<Link Source="10312:[4680..4787).1" Target="10354:[3720..3803).17" />
<Link Source="10312:[4680..4787).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[4826..5058).1" Target="10312:[3782..3803).1" />
<Link Source="10312:[4826..5058).1" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).1" Target="10312:[4019..5073).5" />
<Link Source="10312:[4826..5058).2" Target="10312:[4019..5073).5" />
<Link Source="10312:[4019..5073).7" Target="10312:[4019..5073).1" />
<Link Source="10312:[4019..5073).7" Target="10286:[1977..1981).1" />
<Link Source="10312:[4019..5073).7" Target="10312:[4019..5073).5" />
<Link Source="10312:[4134..4806).4" Target="10312:[4019..5073).7" />
<Link Source="10312:[4134..4806).5" Target="10312:[3984..4005).1" />
<Link Source="10312:[4134..4806).5" Target="10312:[4134..4806).4" />
<Link Source="10312:[4134..4806).5" Target="10312:[4019..5073).7" />
<Link Source="10312:[4534..4658).10" Target="10312:[3696..3715).1" />
<Link Source="10312:[4534..4658).10" Target="10312:[4134..4806).5" />
<Link Source="10312:[4534..4658).11" Target="10312:[3717..3728).1" />
<Link Source="10312:[4534..4658).11" Target="10312:[4134..4806).5" />
<Link Source="10312:[4534..4658).12" Target="10312:[3730..3739).1" />
<Link Source="10312:[4534..4658).12" Target="10312:[4134..4806).5" />
<Link Source="10312:[4534..4658).13" Target="10312:[3741..3780).1" />
<Link Source="10312:[4534..4658).13" Target="10312:[4134..4806).5" />
<Link Source="10312:[4534..4658).14" Target="10312:[3782..3803).1" />
<Link Source="10312:[4534..4658).14" Target="10312:[4134..4806).5" />
<Link Source="10312:[4534..4658).15" Target="10312:[3645..5112).1" />
<Link Source="10312:[4534..4658).15" Target="10312:[4134..4806).5" />
<Link Source="10312:[4534..4658).16" Target="10312:[3805..3818).1" />
<Link Source="10312:[4534..4658).16" Target="10312:[4134..4806).5" />
<Link Source="10312:[4534..4658).17" Target="10312:[5335..5381).1" />
<Link Source="10312:[4534..4658).17" Target="10312:[4134..4806).5" />
<Link Source="10312:[4534..4657).2" Target="10312:[4134..4806).5" />
<Link Source="10346:[10629..10648).1" Target="10312:[4534..4658).10" />
<Link Source="10346:[10629..10648).1" Target="10312:[4534..4657).2" />
<Link Source="10346:[10650..10661).1" Target="10312:[4534..4658).11" />
<Link Source="10346:[10650..10661).1" Target="10312:[4534..4657).2" />
<Link Source="10346:[10663..10672).1" Target="10312:[4534..4658).12" />
<Link Source="10346:[10663..10672).1" Target="10312:[4534..4657).2" />
<Link Source="10346:[10674..10713).1" Target="10312:[4534..4658).13" />
<Link Source="10346:[10674..10713).1" Target="10312:[4534..4657).2" />
<Link Source="10346:[10715..10736).1" Target="10312:[4534..4658).14" />
<Link Source="10346:[10715..10736).1" Target="10312:[4534..4657).2" />
<Link Source="10346:[10738..10759).1" Target="10312:[4534..4658).15" />
<Link Source="10346:[10738..10759).1" Target="10312:[4534..4657).2" />
<Link Source="10346:[10761..10774).1" Target="10312:[4534..4658).16" />
<Link Source="10346:[10761..10774).1" Target="10312:[4534..4657).2" />
<Link Source="10346:[10776..10822).1" Target="10312:[4534..4658).17" />
<Link Source="10346:[10776..10822).1" Target="10312:[4534..4657).2" />
<Link Source="10346:[10564..12467).1" Target="10312:[4019..5073).7" />
<Link Source="10346:[10564..12467).1" Target="10312:[4534..4657).2" />
<Link Source="10346:[10861..10875).1" Target="10312:[4534..4657).2" />
<Link Source="10354:[3684..3818).4" Target="10346:[10629..10648).1" />
<Link Source="10354:[3684..3818).4" Target="10346:[10861..10875).1" />
<Link Source="10354:[3720..3803).25" Target="10354:[3684..3818).4" />
<Link Source="10354:[3720..3803).25" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).25" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).25" Target="10346:[10861..10875).1" />
<Link Source="10354:[3720..3803).26" Target="10346:[10861..10875).1" />
<Link Source="10354:[3720..3803).27" Target="10354:[3684..3818).4" />
<Link Source="10354:[3720..3803).27" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).27" Target="10354:[3720..3803).26" />
<Link Source="10354:[3720..3803).27" Target="10346:[10861..10875).1" />
<Link Source="10346:[10848..10877).1" Target="10354:[3720..3803).25" />
<Link Source="10346:[10848..10877).1" Target="10312:[4534..4657).2" />
<Link Source="10346:[10897..10914).1" Target="10312:[4534..4657).2" />
<Link Source="10346:[7666..7775).1" Target="10346:[10564..12467).1" />
<Link Source="10346:[7666..7775).1" Target="10346:[10897..10914).1" />
<Link Source="10346:[7672..7773).1" Target="10346:[7666..7775).1" />
<Link Source="10346:[7672..7773).1" Target="10346:[2766..2776).1" />
<Link Source="10346:[7672..7773).1" Target="10319:[50381..51340).1" />
<Link Source="10346:[7672..7773).1" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).1" Target="10346:[10897..10914).1" />
<Link Source="10346:[10893..11127).1" Target="10346:[7672..7773).1" />
<Link Source="10346:[10893..11127).1" Target="10312:[4534..4657).2" />
<Link Source="10346:[11143..11188).1" Target="10346:[10674..10713).1" />
<Link Source="10346:[11143..11188).1" Target="10312:[4534..4657).2" />
<Link Source="10346:[11157..11187).1" Target="10312:[4534..4657).2" />
<Link Source="10346:[3460..3499).2" Target="10346:[11143..11188).1" />
<Link Source="10346:[3460..3499).2" Target="10346:[11157..11187).1" />
<Link Source="10346:[3423..3863).2" Target="10346:[10564..12467).1" />
<Link Source="10346:[3423..3863).2" Target="10346:[11157..11187).1" />
<Link Source="10346:[3525..3638).10" Target="10346:[11157..11187).1" />
<Link Source="10346:[3525..3638).11" Target="10346:[3423..3863).2" />
<Link Source="10346:[3525..3638).11" Target="10346:[2803..2815).1" />
<Link Source="10346:[3525..3638).11" Target="10346:[3525..3638).10" />
<Link Source="10346:[3525..3638).11" Target="10346:[11157..11187).1" />
<Link Source="10346:[3654..3816).5" Target="10346:[3423..3863).2" />
<Link Source="10346:[3654..3816).5" Target="10346:[2803..2815).1" />
<Link Source="10346:[3654..3816).5" Target="10346:[11157..11187).1" />
<Link Source="10346:[3832..3852).1" Target="10346:[3423..3863).2" />
<Link Source="10346:[3832..3852).1" Target="10346:[2803..2815).1" />
<Link Source="10346:[3832..3852).1" Target="10346:[11157..11187).1" />
<Link Source="10346:[11143..11188).2" Target="10346:[3832..3852).1" />
<Link Source="10346:[11143..11188).2" Target="10312:[4534..4657).2" />
<Link Source="10346:[11258..12246).1" Target="10346:[10715..10736).1" />
<Link Source="10346:[11258..12246).1" Target="EXTERNAL" />
<Link Source="10346:[11258..12246).1" Target="10312:[4534..4657).2" />
<Link Source="10346:[11258..12246).2" Target="10312:[4534..4657).2" />
<Link Source="10346:[11258..12246).5" Target="10346:[10564..12467).1" />
<Link Source="10346:[11258..12246).5" Target="10346:[2766..2776).1" />
<Link Source="10346:[11258..12246).5" Target="10346:[11258..12246).2" />
<Link Source="10346:[11258..12246).5" Target="10312:[4534..4657).2" />
<Link Source="10346:[11258..12246).6" Target="10346:[11258..12246).1" />
<Link Source="10346:[11258..12246).6" Target="10346:[11258..12246).5" />
<Link Source="10346:[11258..12246).6" Target="10312:[4534..4657).2" />
<Link Source="10346:[11369..11508).1" Target="10346:[10629..10648).1" />
<Link Source="10346:[11369..11508).1" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).2" Target="10346:[10564..12467).1" />
<Link Source="10346:[11369..11508).2" Target="10346:[2766..2776).1" />
<Link Source="10346:[11369..11508).2" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).3" Target="10346:[10650..10661).1" />
<Link Source="10346:[11369..11508).3" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).4" Target="10346:[10663..10672).1" />
<Link Source="10346:[11369..11508).4" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).5" Target="10346:[10674..10713).1" />
<Link Source="10346:[11369..11508).5" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).6" Target="10346:[10715..10736).1" />
<Link Source="10346:[11369..11508).6" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).7" Target="10346:[10738..10759).1" />
<Link Source="10346:[11369..11508).7" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).8" Target="10346:[10761..10774).1" />
<Link Source="10346:[11369..11508).8" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).9" Target="10346:[10776..10822).1" />
<Link Source="10346:[11369..11508).9" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11507).1" Target="10346:[11258..12246).6" />
<Link Source="10312:[7652..7671).1" Target="10346:[11369..11508).1" />
<Link Source="10312:[7652..7671).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7673..7703).1" Target="10346:[11369..11508).2" />
<Link Source="10312:[7673..7703).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7705..7716).1" Target="10346:[11369..11508).3" />
<Link Source="10312:[7705..7716).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7718..7727).1" Target="10346:[11369..11508).4" />
<Link Source="10312:[7718..7727).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7729..7768).1" Target="10346:[11369..11508).5" />
<Link Source="10312:[7729..7768).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7770..7791).1" Target="10346:[11369..11508).6" />
<Link Source="10312:[7770..7791).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7793..7814).1" Target="10346:[11369..11508).7" />
<Link Source="10312:[7793..7814).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7816..7829).1" Target="10346:[11369..11508).8" />
<Link Source="10312:[7816..7829).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7831..7877).1" Target="10346:[11369..11508).9" />
<Link Source="10312:[7831..7877).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7615..8420).1" Target="10346:[10564..12467).1" />
<Link Source="10312:[7615..8420).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7903..7936).1" Target="10312:[7770..7791).1" />
<Link Source="10312:[7903..7936).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7916..7934).1" Target="10346:[11369..11507).1" />
<Link Source="10353:[4698..4724).2" Target="10312:[7903..7936).1" />
<Link Source="10353:[4698..4724).2" Target="10312:[7916..7934).1" />
<Link Source="10353:[4750..4847).3" Target="10353:[4698..4724).2" />
<Link Source="10353:[4750..4847).3" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).3" Target="10312:[7916..7934).1" />
<Link Source="10353:[4863..5000).5" Target="10353:[4698..4724).2" />
<Link Source="10353:[4863..5000).5" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).5" Target="10312:[7916..7934).1" />
<Link Source="10353:[4863..5000).6" Target="10312:[7916..7934).1" />
<Link Source="10353:[5079..5183).3" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).3" Target="10312:[7916..7934).1" />
<Link Source="10353:[5197..5323).4" Target="10353:[4698..4724).2" />
<Link Source="10353:[5197..5323).4" Target="10353:[5079..5183).3" />
<Link Source="10353:[5197..5323).4" Target="10312:[7916..7934).1" />
<Link Source="10353:[5485..5759).7" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).7" Target="10312:[7916..7934).1" />
<Link Source="10353:[5485..5759).8" Target="10353:[4698..4724).2" />
<Link Source="10353:[5485..5759).8" Target="10353:[5485..5759).7" />
<Link Source="10353:[5485..5759).8" Target="10312:[7916..7934).1" />
<Link Source="10353:[5485..5759).9" Target="10312:[7916..7934).1" />
<Link Source="10353:[5775..5979).5" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).5" Target="10312:[7916..7934).1" />
<Link Source="10353:[5775..5979).7" Target="10353:[4698..4724).2" />
<Link Source="10353:[5775..5979).7" Target="10353:[5775..5979).5" />
<Link Source="10353:[5775..5979).7" Target="10312:[7916..7934).1" />
<Link Source="10353:[5995..6029).4" Target="10353:[5775..5979).7" />
<Link Source="10353:[5995..6029).4" Target="10312:[7916..7934).1" />
<Link Source="10353:[6002..6028).2" Target="10312:[7916..7934).1" />
<Link Source="10353:[6343..6358).2" Target="10353:[5995..6029).4" />
<Link Source="10353:[6343..6358).2" Target="10353:[6002..6028).2" />
<Link Source="10353:[6384..6410).7" Target="10353:[6002..6028).2" />
<Link Source="10353:[6384..6410).8" Target="10353:[6343..6358).2" />
<Link Source="10353:[6384..6410).8" Target="10353:[6384..6410).7" />
<Link Source="10353:[6384..6410).8" Target="10353:[6002..6028).2" />
<Link Source="10312:[7952..7977).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7952..7977).2" Target="10312:[7718..7727).1" />
<Link Source="10312:[7952..7977).2" Target="10312:[7952..7977).1" />
<Link Source="10312:[7952..7977).2" Target="10346:[11369..11507).1" />
<Link Source="10312:[7991..8409).1" Target="10312:[7673..7703).1" />
<Link Source="10312:[7991..8409).1" Target="10319:[50381..51340).1" />
<Link Source="10312:[7991..8409).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[8049..8181).1" Target="10312:[7652..7671).1" />
<Link Source="10312:[8049..8181).1" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).2" Target="10312:[7673..7703).1" />
<Link Source="10312:[8049..8181).2" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).3" Target="10312:[7705..7716).1" />
<Link Source="10312:[8049..8181).3" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).4" Target="10312:[7718..7727).1" />
<Link Source="10312:[8049..8181).4" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).5" Target="10312:[7770..7791).1" />
<Link Source="10312:[8049..8181).5" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).6" Target="10312:[7793..7814).1" />
<Link Source="10312:[8049..8181).6" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).7" Target="10312:[7816..7829).1" />
<Link Source="10312:[8049..8181).7" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).8" Target="10312:[7831..7877).1" />
<Link Source="10312:[8049..8181).8" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8180).1" Target="10312:[7991..8409).1" />
<Link Source="10312:[18976..18995).1" Target="10312:[8049..8181).1" />
<Link Source="10312:[18976..18995).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[18997..19015).1" Target="10312:[8049..8181).2" />
<Link Source="10312:[18997..19015).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19017..19028).1" Target="10312:[8049..8181).3" />
<Link Source="10312:[19017..19028).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19030..19039).1" Target="10312:[8049..8181).4" />
<Link Source="10312:[19030..19039).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19041..19062).1" Target="10312:[8049..8181).5" />
<Link Source="10312:[19041..19062).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19064..19085).1" Target="10312:[8049..8181).6" />
<Link Source="10312:[19064..19085).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19087..19100).1" Target="10312:[8049..8181).7" />
<Link Source="10312:[19087..19100).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19102..19148).1" Target="10312:[8049..8181).8" />
<Link Source="10312:[19102..19148).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).1" Target="10312:[18997..19015).1" />
<Link Source="10312:[19174..19243).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).2" Target="10312:[19017..19028).1" />
<Link Source="10312:[19174..19243).2" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).3" Target="10312:[19041..19062).1" />
<Link Source="10312:[19174..19243).3" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).4" Target="10312:[19064..19085).1" />
<Link Source="10312:[19174..19243).4" Target="10312:[8049..8180).1" />
<Link Source="10312:[19188..19242).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[61540..61570).1" Target="10312:[19174..19243).1" />
<Link Source="10312:[61540..61570).1" Target="10312:[19188..19242).1" />
<Link Source="10312:[61572..61583).1" Target="10312:[19174..19243).2" />
<Link Source="10312:[61572..61583).1" Target="10312:[19188..19242).1" />
<Link Source="10312:[61585..61606).1" Target="10312:[19174..19243).3" />
<Link Source="10312:[61585..61606).1" Target="10312:[19188..19242).1" />
<Link Source="10312:[61608..61629).1" Target="10312:[19174..19243).4" />
<Link Source="10312:[61608..61629).1" Target="10312:[19188..19242).1" />
<Link Source="10312:[61655..62327).1" Target="10312:[61585..61606).1" />
<Link Source="10312:[61655..62327).1" Target="EXTERNAL" />
<Link Source="10312:[61655..62327).1" Target="10312:[19188..19242).1" />
<Link Source="10312:[61655..62327).2" Target="10312:[19188..19242).1" />
<Link Source="10312:[61655..62327).4" Target="10312:[61655..62327).1" />
<Link Source="10312:[61655..62327).4" Target="10312:[61540..61570).1" />
<Link Source="10312:[61655..62327).4" Target="10312:[19188..19242).1" />
<Link Source="10312:[61874..62327).1" Target="10312:[61540..61570).1" />
<Link Source="10312:[61874..62327).1" Target="10319:[50381..51340).1" />
<Link Source="10312:[61874..62327).1" Target="EXTERNAL" />
<Link Source="10312:[61874..62327).1" Target="10312:[61655..62327).4" />
<Link Source="10312:[62098..62327).1" Target="10312:[61585..61606).1" />
<Link Source="10312:[62098..62327).1" Target="EXTERNAL" />
<Link Source="10312:[62098..62327).1" Target="10312:[61874..62327).1" />
<Link Source="10312:[62098..62327).2" Target="10312:[61874..62327).1" />
<Link Source="10312:[62279..62312).1" Target="10312:[61572..61583).1" />
<Link Source="10312:[62279..62312).1" Target="10312:[62098..62327).1" />
<Link Source="10312:[19259..19531).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[19259..19531).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19326..19460).1" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).2" Target="10312:[19030..19039).1" />
<Link Source="10312:[19326..19460).2" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).3" Target="10312:[19041..19062).1" />
<Link Source="10312:[19326..19460).3" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).6" Target="10312:[19087..19100).1" />
<Link Source="10312:[19326..19460).6" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).7" Target="10312:[19102..19148).1" />
<Link Source="10312:[19326..19460).7" Target="10312:[19259..19531).1" />
<Link Source="10312:[19366..19459).1" Target="10312:[19259..19531).1" />
<Link Source="10312:[63424..63437).1" Target="10312:[19326..19460).1" />
<Link Source="10312:[63424..63437).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63439..63448).1" Target="10312:[19326..19460).2" />
<Link Source="10312:[63439..63448).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63450..63471).1" Target="10312:[19326..19460).3" />
<Link Source="10312:[63450..63471).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63473..63501).1" Target="10312:[19326..19460).1" />
<Link Source="10312:[63473..63501).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63503..63516).1" Target="10312:[19326..19460).6" />
<Link Source="10312:[63503..63516).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63518..63564).1" Target="10312:[19326..19460).7" />
<Link Source="10312:[63518..63564).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63566..63612).1" Target="10312:[19326..19460).1" />
<Link Source="10312:[63566..63612).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63381..70761).1" Target="10312:[19064..19085).1" />
<Link Source="10312:[63381..70761).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63638..63668).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63682..63706).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63859..64015).1" Target="10312:[63424..63437).1" />
<Link Source="10312:[63859..64015).1" Target="10319:[50381..51340).1" />
<Link Source="10312:[63859..64015).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[63859..64015).1" Target="EXTERNAL" />
<Link Source="10312:[63859..64015).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63881..63912).1" Target="10312:[63859..64015).1" />
<Link Source="10312:[63881..63912).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[64121..69285).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[64121..69285).1" Target="10319:[50381..51340).1" />
<Link Source="10312:[64121..69285).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[64121..69285).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[63381..70761).1" />
<Link Source="10312:[64121..69285).2" Target="10286:[2036..2052).1" />
<Link Source="10312:[64121..69285).2" Target="10319:[50381..51340).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[64121..69285).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[62279..62312).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[19366..19459).1" />
<Link Source="10312:[64121..69285).3" Target="10312:[63881..63912).1" />
<Link Source="10312:[64121..69285).3" Target="10312:[19366..19459).1" />
<Link Source="10312:[64353..69285).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[64353..69285).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).2" Target="10312:[63439..63448).1" />
<Link Source="10312:[64353..69285).2" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).3" Target="10312:[63503..63516).1" />
<Link Source="10312:[64353..69285).3" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).4" Target="10312:[63450..63471).1" />
<Link Source="10312:[64353..69285).4" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).5" Target="10312:[63682..63706).1" />
<Link Source="10312:[64353..69285).5" Target="10312:[64121..69285).2" />
<Link Source="10312:[64357..64415).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[80978..80991).1" Target="10312:[64353..69285).1" />
<Link Source="10312:[80978..80991).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[80993..81002).1" Target="10312:[64353..69285).2" />
<Link Source="10312:[80993..81002).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81004..81017).1" Target="10312:[64353..69285).3" />
<Link Source="10312:[81004..81017).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81019..81040).1" Target="10312:[64353..69285).4" />
<Link Source="10312:[81019..81040).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81042..81069).1" Target="10312:[64353..69285).5" />
<Link Source="10312:[81042..81069).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81095..84034).1" Target="10312:[80978..80991).1" />
<Link Source="10312:[81095..84034).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[81095..84034).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[83750..83991).1" Target="10312:[81095..84034).1" />
<Link Source="10312:[83750..83991).2" Target="10312:[80993..81002).1" />
<Link Source="10312:[83750..83991).2" Target="10312:[83750..83991).1" />
<Link Source="10312:[83750..83991).2" Target="10312:[81095..84034).1" />
<Link Source="10312:[84050..84066).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[84080..84093).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[64353..69285).6" Target="10312:[84080..84093).1" />
<Link Source="10312:[64353..69285).6" Target="10312:[64121..69285).2" />
<Link Source="10312:[64537..64543).1" Target="10312:[64353..69285).6" />
<Link Source="10306:[3196..3249).1" Target="10312:[63381..70761).1" />
<Link Source="10306:[3196..3249).1" Target="10312:[64537..64543).1" />
<Link Source="10306:[3202..3247).1" Target="10306:[3196..3249).1" />
<Link Source="10306:[3202..3247).1" Target="10286:[2003..2013).1" />
<Link Source="10306:[3202..3247).1" Target="10312:[64537..64543).1" />
<Link Source="10306:[3202..3247).2" Target="EXTERNAL" />
<Link Source="10306:[3202..3247).2" Target="10312:[64537..64543).1" />
<Link Source="10306:[3209..3246).1" Target="10312:[64537..64543).1" />
<Link Source="10298:[471..492).9" Target="10306:[3202..3247).1" />
<Link Source="10298:[471..492).9" Target="10306:[3209..3246).1" />
<Link Source="10298:[494..511).9" Target="10306:[3202..3247).2" />
<Link Source="10298:[494..511).9" Target="10306:[3209..3246).1" />
<Link Source="10312:[64532..69285).1" Target="10298:[471..492).9" />
<Link Source="10312:[64532..69285).1" Target="10312:[64353..69285).6" />
<Link Source="10312:[65229..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[65229..69285).1" Target="EXTERNAL" />
<Link Source="10312:[65229..69285).1" Target="10312:[64532..69285).1" />
<Link Source="10312:[65229..69285).2" Target="10312:[64532..69285).1" />
<Link Source="10312:[65474..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[65474..69285).1" Target="EXTERNAL" />
<Link Source="10312:[65474..69285).1" Target="10312:[65229..69285).1" />
<Link Source="10312:[65474..69285).2" Target="10312:[65229..69285).1" />
<Link Source="10312:[65730..65736).1" Target="10312:[65474..69285).1" />
<Link Source="10312:[65726..69285).1" Target="10312:[65730..65736).1" />
<Link Source="10312:[65726..69285).1" Target="10312:[65474..69285).1" />
<Link Source="10312:[66182..66188).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).1" Target="10312:[66182..66188).1" />
<Link Source="10312:[66177..69285).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).2" Target="10312:[63881..63912).1" />
<Link Source="10312:[66177..69285).2" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).3" Target="10312:[63450..63471).1" />
<Link Source="10312:[66177..69285).3" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).4" Target="10312:[63473..63501).1" />
<Link Source="10312:[66177..69285).4" Target="10312:[65726..69285).1" />
<Link Source="10312:[66291..66342).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[75301..75322).1" Target="10312:[66177..69285).3" />
<Link Source="10312:[75301..75322).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75324..75352).1" Target="10312:[66177..69285).4" />
<Link Source="10312:[75324..75352).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).1" Target="10312:[75301..75322).1" />
<Link Source="10312:[75735..75866).1" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).2" Target="10312:[66291..66342).1" />
<Link Source="10312:[75742..75804).1" Target="10312:[75735..75866).1" />
<Link Source="10312:[75742..75804).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).4" Target="10312:[75324..75352).1" />
<Link Source="10312:[75735..75866).4" Target="10312:[75742..75804).1" />
<Link Source="10312:[66177..69285).7" Target="10312:[63638..63668).1" />
<Link Source="10312:[66177..69285).7" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).8" Target="10312:[63518..63564).1" />
<Link Source="10312:[66177..69285).8" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).9" Target="10312:[63566..63612).1" />
<Link Source="10312:[66177..69285).9" Target="10312:[65726..69285).1" />
<Link Source="10312:[66215..66540).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[77528..77541).1" Target="10312:[66177..69285).2" />
<Link Source="10312:[77528..77541).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77543..77571).1" Target="10312:[75735..75866).4" />
<Link Source="10312:[77543..77571).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77573..77604).1" Target="10312:[66177..69285).7" />
<Link Source="10312:[77573..77604).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77606..77652).1" Target="10312:[66177..69285).8" />
<Link Source="10312:[77606..77652).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77654..77700).1" Target="10312:[66177..69285).9" />
<Link Source="10312:[77654..77700).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77501..78044).1" Target="10312:[63381..70761).1" />
<Link Source="10312:[77501..78044).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77726..77892).1" Target="10312:[77501..78044).1" />
<Link Source="10312:[77726..77892).1" Target="10286:[2003..2013).1" />
<Link Source="10312:[77726..77892).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77726..77892).2" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).2" Target="10312:[66215..66540).1" />
<Link Source="10312:[77730..77782).1" Target="10312:[66215..66540).1" />
<Link Source="10298:[471..492).12" Target="10312:[77726..77892).1" />
<Link Source="10298:[471..492).12" Target="10312:[77730..77782).1" />
<Link Source="10298:[494..511).12" Target="10312:[77726..77892).2" />
<Link Source="10298:[494..511).12" Target="10312:[77730..77782).1" />
<Link Source="10312:[77908..78033).1" Target="10312:[77528..77541).1" />
<Link Source="10312:[77908..78033).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).2" Target="10312:[77543..77571).1" />
<Link Source="10312:[77908..78033).2" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).3" Target="10312:[77573..77604).1" />
<Link Source="10312:[77908..78033).3" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).4" Target="10312:[77606..77652).1" />
<Link Source="10312:[77908..78033).4" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).5" Target="10312:[77654..77700).1" />
<Link Source="10312:[77908..78033).5" Target="10312:[66215..66540).1" />
<Link Source="10312:[77915..78032).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[78387..78400).1" Target="10312:[77908..78033).1" />
<Link Source="10312:[78387..78400).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78402..78430).1" Target="10312:[77908..78033).2" />
<Link Source="10312:[78402..78430).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78432..78463).1" Target="10312:[77908..78033).3" />
<Link Source="10312:[78432..78463).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78465..78511).1" Target="10312:[77908..78033).4" />
<Link Source="10312:[78465..78511).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78513..78552).1" Target="10312:[77908..78033).5" />
<Link Source="10312:[78513..78552).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78346..78783).1" Target="10312:[77501..78044).1" />
<Link Source="10312:[78346..78783).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).1" Target="10312:[78387..78400).1" />
<Link Source="10312:[78642..78772).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).2" Target="10312:[78402..78430).1" />
<Link Source="10312:[78642..78772).2" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).3" Target="10312:[78432..78463).1" />
<Link Source="10312:[78642..78772).3" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).4" Target="10312:[78465..78511).1" />
<Link Source="10312:[78642..78772).4" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).5" Target="10312:[78513..78552).1" />
<Link Source="10312:[78642..78772).5" Target="10312:[77915..78032).1" />
<Link Source="10312:[78649..78771).1" Target="10312:[77915..78032).1" />
<Link Source="10346:[8019..8032).1" Target="10312:[78642..78772).1" />
<Link Source="10346:[8019..8032).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8034..8062).1" Target="10312:[78642..78772).2" />
<Link Source="10346:[8034..8062).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8064..8095).1" Target="10312:[78642..78772).3" />
<Link Source="10346:[8064..8095).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8097..8143).1" Target="10312:[78642..78772).4" />
<Link Source="10346:[8097..8143).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8145..8184).1" Target="10312:[78642..78772).5" />
<Link Source="10346:[8145..8184).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[7977..8737).1" Target="10312:[78346..78783).1" />
<Link Source="10346:[7977..8737).1" Target="10286:[1977..1981).1" />
<Link Source="10346:[7977..8737).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8210..8251).1" Target="10346:[7977..8737).1" />
<Link Source="10346:[8210..8251).1" Target="10346:[2766..2776).1" />
<Link Source="10346:[8210..8251).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8265..8726).1" Target="10312:[78649..78771).1" />
<Link Source="10346:[8265..8726).2" Target="10346:[8210..8251).1" />
<Link Source="10346:[8265..8726).2" Target="10346:[8265..8726).1" />
<Link Source="10346:[8265..8726).2" Target="10312:[78649..78771).1" />
<Link Source="10346:[8516..8646).1" Target="10346:[8019..8032).1" />
<Link Source="10346:[8516..8646).1" Target="10346:[8265..8726).2" />
<Link Source="10346:[8516..8646).2" Target="10346:[8034..8062).1" />
<Link Source="10346:[8516..8646).2" Target="10346:[8265..8726).2" />
<Link Source="10346:[8516..8646).3" Target="10346:[8064..8095).1" />
<Link Source="10346:[8516..8646).3" Target="10346:[8265..8726).2" />
<Link Source="10346:[8516..8646).4" Target="10346:[8097..8143).1" />
<Link Source="10346:[8516..8646).4" Target="10346:[8265..8726).2" />
<Link Source="10346:[8516..8646).5" Target="10346:[8145..8184).1" />
<Link Source="10346:[8516..8646).5" Target="10346:[8265..8726).2" />
<Link Source="10346:[8523..8645).1" Target="10346:[8265..8726).2" />
<Link Source="10325:[1906..1919).1" Target="10346:[8516..8646).1" />
<Link Source="10325:[1906..1919).1" Target="10346:[8523..8645).1" />
<Link Source="10325:[1921..1949).1" Target="10346:[8516..8646).2" />
<Link Source="10325:[1921..1949).1" Target="10346:[8523..8645).1" />
<Link Source="10325:[1951..1982).1" Target="10346:[8516..8646).3" />
<Link Source="10325:[1951..1982).1" Target="10346:[8523..8645).1" />
<Link Source="10325:[1984..2031).1" Target="10346:[8516..8646).4" />
<Link Source="10325:[1984..2031).1" Target="10346:[8523..8645).1" />
<Link Source="10325:[2033..2072).1" Target="10346:[8516..8646).5" />
<Link Source="10325:[2033..2072).1" Target="10346:[8523..8645).1" />
<Link Source="10325:[1864..2245).1" Target="10346:[7977..8737).1" />
<Link Source="10325:[1864..2245).1" Target="10286:[1247..1258).2" />
<Link Source="10325:[1864..2245).1" Target="10346:[8523..8645).1" />
<Link Source="10325:[2098..2129).1" Target="10346:[8523..8645).1" />
<Link Source="10325:[2143..2234).1" Target="10325:[1906..1919).1" />
<Link Source="10325:[2143..2234).1" Target="10346:[8523..8645).1" />
<Link Source="10325:[2143..2234).2" Target="10325:[1864..2245).1" />
<Link Source="10325:[2143..2234).2" Target="10312:[64121..69285).2" />
<Link Source="10325:[2143..2234).2" Target="10346:[8523..8645).1" />
<Link Source="10325:[2143..2234).3" Target="10325:[1984..2031).1" />
<Link Source="10325:[2143..2234).3" Target="10346:[8523..8645).1" />
<Link Source="10325:[2150..2233).1" Target="10346:[8523..8645).1" />
<Link Source="10286:[29357..29370).1" Target="10325:[2143..2234).1" />
<Link Source="10286:[29357..29370).1" Target="10325:[2150..2233).1" />
<Link Source="10286:[29385..29406).1" Target="10325:[2143..2234).2" />
<Link Source="10286:[29385..29406).1" Target="10325:[2150..2233).1" />
<Link Source="10286:[29421..29468).1" Target="10325:[2143..2234).3" />
<Link Source="10286:[29421..29468).1" Target="10325:[2150..2233).1" />
<Link Source="10286:[29494..29572).1" Target="10286:[29357..29370).1" />
<Link Source="10286:[29494..29572).1" Target="10325:[2150..2233).1" />
<Link Source="10286:[29494..29572).2" Target="10286:[29385..29406).1" />
<Link Source="10286:[29494..29572).2" Target="10325:[2150..2233).1" />
<Link Source="10286:[29494..29572).3" Target="10286:[29421..29468).1" />
<Link Source="10286:[29494..29572).3" Target="10325:[2150..2233).1" />
<Link Source="10286:[29501..29571).1" Target="10325:[2150..2233).1" />
<Link Source="10060:[826..839).1" Target="10286:[29494..29572).1" />
<Link Source="10060:[826..839).1" Target="10286:[29501..29571).1" />
<Link Source="10060:[854..875).1" Target="10286:[29494..29572).2" />
<Link Source="10060:[854..875).1" Target="10286:[29501..29571).1" />
<Link Source="10060:[890..936).1" Target="10286:[29494..29572).3" />
<Link Source="10060:[890..936).1" Target="10286:[29501..29571).1" />
<Link Source="10060:[962..990).1" Target="10286:[29501..29571).1" />
<Link Source="10060:[1004..1137).1" Target="10060:[826..839).1" />
<Link Source="10060:[1004..1137).1" Target="10286:[29501..29571).1" />
<Link Source="10060:[1004..1137).2" Target="10060:[854..875).1" />
<Link Source="10060:[1004..1137).2" Target="10286:[29501..29571).1" />
<Link Source="10060:[1004..1137).3" Target="10286:[29501..29571).1" />
<Link Source="10060:[1004..1137).5" Target="10060:[962..990).1" />
<Link Source="10060:[1004..1137).5" Target="10286:[29501..29571).1" />
<Link Source="10060:[1004..1137).6" Target="10060:[854..875).1" />
<Link Source="10060:[1004..1137).6" Target="10312:[64121..69285).2" />
<Link Source="10060:[1004..1137).6" Target="10286:[29501..29571).1" />
<Link Source="10060:[1004..1137).7" Target="10060:[890..936).1" />
<Link Source="10060:[1004..1137).7" Target="10286:[29501..29571).1" />
<Link Source="10060:[1011..1136).1" Target="10286:[29501..29571).1" />
<Link Source="10060:[5593..5606).1" Target="10060:[1004..1137).1" />
<Link Source="10060:[5593..5606).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[5621..5634).1" Target="10060:[1004..1137).2" />
<Link Source="10060:[5621..5634).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[5691..5716).1" Target="10060:[1004..1137).3" />
<Link Source="10060:[5691..5716).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[5731..5762).1" Target="10060:[1004..1137).5" />
<Link Source="10060:[5731..5762).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[5777..5806).1" Target="10060:[1004..1137).6" />
<Link Source="10060:[5777..5806).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[5821..5867).1" Target="10060:[1004..1137).7" />
<Link Source="10060:[5821..5867).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[5882..5928).1" Target="10060:[1004..1137).3" />
<Link Source="10060:[5882..5928).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[5954..5991).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[5593..5606).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[5954..5991).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[1011..1136).1" />
<Link Source="10060:[6005..6042).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[5621..5634).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[6005..6042).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[1011..1136).1" />
<Link Source="10060:[6056..6090).1" Target="10060:[5621..5634).1" />
<Link Source="10060:[6056..6090).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[6056..6090).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[6104..6172).1" Target="10060:[5621..5634).1" />
<Link Source="10060:[6104..6172).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[6188..6219).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[6235..9907).1" Target="10060:[5593..5606).1" />
<Link Source="10060:[6235..9907).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[6235..9907).1" Target="10060:[1011..1136).1" />
<Link Source="10060:[8992..9004).1" Target="10060:[6235..9907).1" />
<Link Source="10312:[66177..69285).11" Target="10312:[66177..69285).1" />
<Link Source="10312:[66177..69285).11" Target="10060:[8992..9004).1" />
<Link Source="10312:[66177..69285).11" Target="10312:[65726..69285).1" />
<Link Source="10312:[67587..67593).1" Target="10312:[66177..69285).11" />
<Link Source="10312:[67582..69285).1" Target="10312:[67587..67593).1" />
<Link Source="10312:[67582..69285).1" Target="10312:[66177..69285).11" />
<Link Source="10312:[67582..69285).2" Target="10312:[63881..63912).1" />
<Link Source="10312:[67582..69285).2" Target="10312:[66177..69285).11" />
<Link Source="10312:[67858..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[67858..69285).1" Target="EXTERNAL" />
<Link Source="10312:[67858..69285).1" Target="10312:[67582..69285).1" />
<Link Source="10312:[67858..69285).2" Target="10312:[67582..69285).1" />
<Link Source="10312:[68183..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68183..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68183..69285).1" Target="10312:[67858..69285).1" />
<Link Source="10312:[68183..69285).2" Target="10312:[67858..69285).1" />
<Link Source="10312:[68512..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68512..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68512..69285).1" Target="10312:[68183..69285).1" />
<Link Source="10312:[68512..69285).2" Target="10312:[68183..69285).1" />
<Link Source="10312:[68882..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68882..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68882..69285).1" Target="10312:[68512..69285).1" />
<Link Source="10312:[68882..69285).2" Target="10312:[68512..69285).1" />
<Link Source="10312:[69237..69270).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[69237..69270).1" Target="10312:[68882..69285).1" />
<Link Source="10312:[69244..69269).1" Target="10312:[68882..69285).1" />
<Link Source="10354:[5400..5413).1" Target="10312:[69237..69270).1" />
<Link Source="10354:[5400..5413).1" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).1" Target="EXTERNAL" />
<Link Source="10354:[5439..5508).1" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).2" Target="10354:[5400..5413).1" />
<Link Source="10354:[5439..5508).2" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).3" Target="10312:[69244..69269).1" />
<Link Source="10354:[5446..5507).1" Target="10312:[69244..69269).1" />
<Link Source="10368:[1076..1097).1" Target="10354:[5439..5508).1" />
<Link Source="10368:[1076..1097).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1099..1112).1" Target="10354:[5439..5508).2" />
<Link Source="10368:[1099..1112).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1114..1134).1" Target="10354:[5439..5508).3" />
<Link Source="10368:[1114..1134).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1048..1256).1" Target="10354:[5439..5508).3" />
<Link Source="10368:[1048..1256).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1160..1169).1" Target="10368:[1076..1097).1" />
<Link Source="10368:[1160..1169).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1160..1169).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1191..1202).1" Target="10368:[1099..1112).1" />
<Link Source="10368:[1191..1202).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1191..1202).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1226..1236).1" Target="10368:[1114..1134).1" />
<Link Source="10368:[1226..1236).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1226..1236).1" Target="10354:[5446..5507).1" />
<Link Source="10312:[69237..69270).2" Target="10354:[5439..5508).3" />
<Link Source="10312:[69237..69270).2" Target="10312:[68882..69285).1" />
<Link Source="10312:[19478..19516).1" Target="10312:[69237..69270).2" />
<Link Source="10312:[19478..19516).1" Target="10312:[19259..19531).1" />
<Link Source="10312:[19478..19515).1" Target="10312:[19259..19531).1" />
<Link Source="10354:[10217..10242).1" Target="10312:[19478..19516).1" />
<Link Source="10354:[10217..10242).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[10192..10676).1" Target="10312:[18976..18995).1" />
<Link Source="10354:[10192..10676).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[10272..10276).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[4058..4122).3" Target="10354:[10192..10676).1" />
<Link Source="10354:[4058..4122).3" Target="10354:[10272..10276).1" />
<Link Source="10354:[10268..10665).1" Target="10354:[4058..4122).3" />
<Link Source="10354:[10268..10665).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[10268..10665).2" Target="10354:[10268..10665).1" />
<Link Source="10354:[10268..10665).2" Target="10354:[10217..10242).1" />
<Link Source="10354:[10268..10665).2" Target="10368:[1160..1169).1" />
<Link Source="10354:[10268..10665).2" Target="10312:[19478..19515).1" />
<Link Source="10354:[10404..10408).1" Target="10354:[10268..10665).2" />
<Link Source="10354:[10386..10665).1" Target="10354:[10404..10408).1" />
<Link Source="10354:[10386..10665).1" Target="10354:[10268..10665).2" />
<Link Source="10354:[10442..10463).1" Target="10354:[10217..10242).1" />
<Link Source="10354:[10442..10463).1" Target="10354:[10386..10665).1" />
<Link Source="10354:[10442..10462).1" Target="10354:[10386..10665).1" />
<Link Source="10354:[8131..8155).1" Target="10354:[10442..10463).1" />
<Link Source="10354:[8131..8155).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8109..8324).1" Target="10354:[10192..10676).1" />
<Link Source="10354:[8109..8324).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8181..8186).1" Target="10368:[1160..1169).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[8214..8234).1" Target="10354:[8181..8186).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8248..8278).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8248..8278).1" Target="10368:[1191..1202).1" />
<Link Source="10354:[8248..8278).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8109..8324).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8214..8234).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8248..8278).1" />
<Link Source="10354:[8248..8278).2" Target="10312:[67582..69285).2" />
<Link Source="10354:[8248..8278).2" Target="10354:[10442..10462).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8292..8298).1" Target="10368:[1226..1236).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[10442..10463).2" Target="10354:[10386..10665).1" />
<Link Source="10312:[19478..19516).2" Target="10312:[19259..19531).1" />
<Link Source="10312:[19259..19531).4" Target="10312:[19259..19531).1" />
<Link Source="10312:[19259..19531).4" Target="10354:[8248..8278).2" />
<Link Source="10312:[19259..19531).4" Target="10354:[8292..8298).1" />
<Link Source="10312:[19259..19531).4" Target="10312:[8049..8180).1" />
<Link Source="10312:[8049..8181).9" Target="10312:[7991..8409).1" />
<Link Source="10346:[11369..11508).10" Target="10346:[11258..12246).6" />
<Link Source="10346:[11532..11552).1" Target="10346:[11258..12246).6" />
<Link Source="10354:[4919..5009).3" Target="10346:[10629..10648).1" />
<Link Source="10354:[4919..5009).3" Target="10346:[11532..11552).1" />
<Link Source="10354:[4094..4107).5" Target="10354:[4919..5009).3" />
<Link Source="10354:[4094..4107).5" Target="10354:[8248..8278).2" />
<Link Source="10354:[4094..4107).5" Target="10346:[11532..11552).1" />
<Link Source="10346:[11528..12231).1" Target="10354:[4094..4107).5" />
<Link Source="10346:[11528..12231).1" Target="10346:[11258..12246).6" />
<Link Source="10346:[11665..12181).1" Target="10346:[11528..12231).1" />
<Link Source="10346:[11665..12181).2" Target="10346:[10663..10672).1" />
<Link Source="10346:[11665..12181).2" Target="10346:[11665..12181).1" />
<Link Source="10346:[11665..12181).2" Target="10346:[11528..12231).1" />
<Link Source="10346:[11665..12181).3" Target="10346:[10650..10661).1" />
<Link Source="10346:[11665..12181).3" Target="10346:[11528..12231).1" />
<Link Source="10346:[11710..11746).1" Target="10346:[11528..12231).1" />
<Link Source="10286:[2155..2260).1" Target="10346:[10738..10759).1" />
<Link Source="10286:[2155..2260).1" Target="10346:[11710..11746).1" />
<Link Source="10286:[2191..2245).1" Target="10286:[2155..2260).1" />
<Link Source="10286:[2191..2245).1" Target="10286:[2003..2013).1" />
<Link Source="10286:[2191..2245).1" Target="10346:[11710..11746).1" />
<Link Source="10286:[2191..2245).2" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).2" Target="10346:[11710..11746).1" />
<Link Source="10286:[2198..2244).1" Target="10346:[11710..11746).1" />
<Link Source="10298:[471..492).14" Target="10286:[2191..2245).1" />
<Link Source="10298:[471..492).14" Target="10286:[2198..2244).1" />
<Link Source="10298:[494..511).14" Target="10286:[2191..2245).2" />
<Link Source="10298:[494..511).14" Target="10286:[2198..2244).1" />
<Link Source="10346:[11665..12181).4" Target="10298:[471..492).14" />
<Link Source="10346:[11665..12181).4" Target="10346:[11528..12231).1" />
<Link Source="10346:[11683..11747).1" Target="10346:[11528..12231).1" />
<Link Source="10345:[28212..28223).1" Target="10346:[11665..12181).3" />
<Link Source="10345:[28212..28223).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28225..28251).1" Target="10346:[11665..12181).4" />
<Link Source="10345:[28225..28251).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28185..28951).1" Target="10346:[11143..11188).2" />
<Link Source="10345:[28185..28951).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28277..28305).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28300..28304).1" Target="10345:[28277..28305).1" />
<Link Source="10345:[28300..28304).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28319..28911).1" Target="10345:[28212..28223).1" />
<Link Source="10345:[28319..28911).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28319..28911).2" Target="10345:[28277..28305).1" />
<Link Source="10345:[28319..28911).2" Target="10346:[11683..11747).1" />
<Link Source="10345:[28319..28911).3" Target="10345:[28185..28951).1" />
<Link Source="10345:[28319..28911).3" Target="10354:[8248..8278).2" />
<Link Source="10345:[28319..28911).3" Target="10345:[28319..28911).1" />
<Link Source="10345:[28319..28911).3" Target="10345:[28319..28911).2" />
<Link Source="10345:[28319..28911).3" Target="10354:[8292..8298).1" />
<Link Source="10345:[28319..28911).3" Target="10345:[28300..28304).1" />
<Link Source="10345:[28319..28911).3" Target="10346:[11683..11747).1" />
<Link Source="10345:[28927..28940).1" Target="10346:[11683..11747).1" />
<Link Source="10346:[11665..12181).6" Target="10345:[28927..28940).1" />
<Link Source="10346:[11665..12181).6" Target="10346:[11528..12231).1" />
<Link Source="10346:[11665..12181).7" Target="10346:[11665..12181).2" />
<Link Source="10346:[11665..12181).7" Target="10346:[11665..12181).6" />
<Link Source="10346:[11665..12181).7" Target="10346:[11528..12231).1" />
<Link Source="10346:[12205..12212).1" Target="10346:[11528..12231).1" />
<Link Source="10312:[4534..4658).18" Target="10312:[4134..4806).5" />
<Link Source="10312:[4685..4699).2" Target="10312:[4134..4806).5" />
<Link Source="10354:[3684..3818).5" Target="10312:[3696..3715).1" />
<Link Source="10354:[3684..3818).5" Target="10312:[4685..4699).2" />
<Link Source="10354:[3720..3803).33" Target="10354:[3684..3818).5" />
<Link Source="10354:[3720..3803).33" Target="10345:[28319..28911).3" />
<Link Source="10354:[3720..3803).33" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).33" Target="10312:[4685..4699).2" />
<Link Source="10312:[4680..4787).3" Target="10354:[3720..3803).33" />
<Link Source="10312:[4680..4787).3" Target="10312:[4134..4806).5" />
<Link Source="10312:[4749..4764).1" Target="10312:[4019..5073).7" />
<Link Source="10312:[4749..4764).1" Target="10312:[4680..4787).3" />
<Link Source="10312:[4826..5058).6" Target="10312:[3782..3803).1" />
<Link Source="10312:[4826..5058).6" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).6" Target="10312:[4019..5073).7" />
<Link Source="10312:[4826..5058).7" Target="10312:[4019..5073).7" />
<Link Source="10312:[5087..5101).1" Target="10312:[4749..4764).1" />
<Link Source="10312:[5087..5101).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[1585..1724).9" Target="10353:[7556..7642).1" />
<Link Source="10319:[43504..43546).1" Target="10319:[41889..41914).1" />
<Link Source="10319:[43504..43546).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).2" Target="10319:[41849..41874).1" />
<Link Source="10319:[43504..43546).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).3" Target="10060:[5821..5867).1" />
<Link Source="10319:[43504..43546).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).1" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).2" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).3" />
<Link Source="10319:[43504..43546).4" Target="10345:[4524..4562).1" />
<Link Source="10319:[43504..43546).4" Target="10345:[28319..28911).3" />
<Link Source="10319:[43504..43546).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[43562..43590).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[43799..44676).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).3" Target="10319:[43095..43135).1" />
<Link Source="10319:[43799..44676).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43853..43873).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41088..41107).1" Target="10319:[43799..44676).3" />
<Link Source="10319:[41088..41107).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41138..41158).1" Target="10319:[43853..43873).1" />
<Link Source="10354:[4919..5009).5" Target="10319:[41088..41107).1" />
<Link Source="10354:[4919..5009).5" Target="10319:[41138..41158).1" />
<Link Source="10354:[4962..4966).5" Target="10319:[41138..41158).1" />
<Link Source="10354:[4058..4122).7" Target="10354:[4919..5009).5" />
<Link Source="10354:[4058..4122).7" Target="10354:[4962..4966).5" />
<Link Source="10354:[4094..4107).7" Target="10354:[4058..4122).7" />
<Link Source="10354:[4094..4107).7" Target="10319:[43504..43546).4" />
<Link Source="10354:[4094..4107).7" Target="10354:[4962..4966).5" />
<Link Source="10319:[41133..41220).1" Target="10354:[4094..4107).7" />
<Link Source="10319:[41133..41220).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41254..41268).1" Target="10319:[43853..43873).1" />
<Link Source="10354:[4525..4595).1" Target="10319:[41088..41107).1" />
<Link Source="10354:[4525..4595).1" Target="10319:[41254..41268).1" />
<Link Source="10354:[4561..4580).1" Target="10354:[4525..4595).1" />
<Link Source="10354:[4561..4580).1" Target="10319:[43504..43546).4" />
<Link Source="10354:[4561..4580).1" Target="10319:[41254..41268).1" />
<Link Source="10319:[41236..41680).1" Target="10354:[4561..4580).1" />
<Link Source="10319:[41236..41680).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41302..41665).1" Target="10319:[41236..41680).1" />
<Link Source="10319:[41302..41665).1" Target="10319:[43504..43546).4" />
<Link Source="10319:[41696..41709).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[43799..44676).4" Target="10319:[41696..41709).1" />
<Link Source="10319:[43799..44676).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).5" Target="10319:[43799..44676).2" />
<Link Source="10319:[43799..44676).5" Target="10319:[43799..44676).4" />
<Link Source="10319:[43799..44676).5" Target="10319:[20515..20674).1" />
<Link Source="10319:[43907..44661).1" Target="10319:[43799..44676).5" />
<Link Source="10319:[43907..44661).2" Target="10319:[41849..41874).1" />
<Link Source="10319:[43907..44661).2" Target="10319:[43504..43546).4" />
<Link Source="10319:[43907..44661).2" Target="10319:[43907..44661).1" />
<Link Source="10319:[43907..44661).2" Target="10319:[43799..44676).5" />
<Link Source="10319:[44578..44642).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[44578..44642).1" Target="10319:[43907..44661).2" />
<Link Source="10319:[44578..44642).2" Target="10319:[41889..41914).1" />
<Link Source="10319:[44578..44642).2" Target="10319:[43907..44661).2" />
<Link Source="10319:[44594..44641).1" Target="10319:[43907..44661).2" />
<Link Source="10319:[45850..45875).1" Target="10319:[44578..44642).1" />
<Link Source="10319:[45850..45875).1" Target="10319:[44594..44641).1" />
<Link Source="10319:[45877..45902).1" Target="10319:[44578..44642).2" />
<Link Source="10319:[45877..45902).1" Target="10319:[44594..44641).1" />
<Link Source="10319:[45797..47405).1" Target="10319:[41732..45579).1" />
<Link Source="10319:[45797..47405).1" Target="10319:[44594..44641).1" />
<Link Source="10319:[45928..45952).1" Target="10319:[44594..44641).1" />
<Link Source="10319:[45966..46327).1" Target="10319:[45850..45875).1" />
<Link Source="10319:[45966..46327).1" Target="10319:[43504..43546).4" />
<Link Source="10319:[45966..46327).1" Target="10319:[44594..44641).1" />
<Link Source="10319:[46300..46312).1" Target="10319:[45966..46327).1" />
<Link Source="10319:[44692..45392).1" Target="10319:[46300..46312).1" />
<Link Source="10319:[44692..45392).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[44751..44765).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).1" Target="10319:[43095..43135).1" />
<Link Source="10319:[44785..44930).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).2" Target="10319:[42089..42141).1" />
<Link Source="10319:[44785..44930).2" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).3" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).5" Target="10319:[41849..41874).1" />
<Link Source="10319:[44785..44930).5" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).6" Target="10319:[41889..41914).1" />
<Link Source="10319:[44785..44930).6" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).7" Target="10319:[41983..42014).1" />
<Link Source="10319:[44785..44930).7" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).8" Target="10319:[44751..44765).1" />
<Link Source="10319:[44785..44930).8" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).9" Target="10319:[42029..42063).1" />
<Link Source="10319:[44785..44930).9" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).10" Target="10319:[51282..51325).1" />
<Link Source="10319:[44785..44930).10" Target="10319:[44692..45392).1" />
<Link Source="10319:[44801..44929).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[84167..84186).1" Target="10319:[44785..44930).1" />
<Link Source="10319:[84167..84186).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84201..84218).1" Target="10319:[44785..44930).2" />
<Link Source="10319:[84201..84218).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84233..84242).1" Target="10319:[44785..44930).3" />
<Link Source="10319:[84233..84242).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84257..84273).1" Target="10319:[44785..44930).5" />
<Link Source="10319:[84257..84273).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84288..84313).1" Target="10319:[44785..44930).6" />
<Link Source="10319:[84288..84313).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84328..84359).1" Target="10319:[44785..44930).7" />
<Link Source="10319:[84328..84359).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84374..84391).1" Target="10319:[44785..44930).8" />
<Link Source="10319:[84374..84391).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84406..84447).1" Target="10319:[44785..44930).9" />
<Link Source="10319:[84406..84447).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84462..84508).1" Target="10319:[44785..44930).10" />
<Link Source="10319:[84462..84508).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84124..109887).1" Target="10319:[41732..45579).1" />
<Link Source="10319:[84124..109887).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).1" Target="10319:[84167..84186).1" />
<Link Source="10319:[84534..84675).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).2" Target="10319:[84201..84218).1" />
<Link Source="10319:[84534..84675).2" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).3" Target="10319:[84233..84242).1" />
<Link Source="10319:[84534..84675).3" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).4" Target="10319:[84257..84273).1" />
<Link Source="10319:[84534..84675).4" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).5" Target="10319:[84288..84313).1" />
<Link Source="10319:[84534..84675).5" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).6" Target="10319:[84328..84359).1" />
<Link Source="10319:[84534..84675).6" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).7" Target="10319:[84374..84391).1" />
<Link Source="10319:[84534..84675).7" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).8" Target="10319:[84406..84447).1" />
<Link Source="10319:[84534..84675).8" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).9" Target="10319:[84462..84508).1" />
<Link Source="10319:[84534..84675).9" Target="10319:[44801..44929).1" />
<Link Source="10319:[84550..84674).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84907..109876).1" Target="10319:[84534..84675).1" />
<Link Source="10319:[84907..109876).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).2" Target="10319:[84534..84675).2" />
<Link Source="10319:[84907..109876).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).3" Target="10319:[84534..84675).3" />
<Link Source="10319:[84907..109876).3" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).4" Target="10319:[84534..84675).4" />
<Link Source="10319:[84907..109876).4" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).5" Target="10319:[84534..84675).5" />
<Link Source="10319:[84907..109876).5" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).6" Target="10319:[84534..84675).6" />
<Link Source="10319:[84907..109876).6" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).7" Target="10319:[84534..84675).7" />
<Link Source="10319:[84907..109876).7" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).8" Target="10319:[84534..84675).8" />
<Link Source="10319:[84907..109876).8" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).9" Target="10319:[84534..84675).9" />
<Link Source="10319:[84907..109876).9" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).10" Target="10319:[84124..109887).1" />
<Link Source="10319:[84907..109876).10" Target="10319:[84550..84674).1" />
<Link Source="10319:[85320..85348).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85320..85348).2" Target="10319:[84907..109876).4" />
<Link Source="10319:[85320..85348).2" Target="10319:[85320..85348).1" />
<Link Source="10319:[85320..85348).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[85366..85400).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85366..85400).2" Target="10319:[84907..109876).5" />
<Link Source="10319:[85366..85400).2" Target="10319:[85366..85400).1" />
<Link Source="10319:[85366..85400).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[85434..85448).1" Target="10319:[84550..84674).1" />
<Link Source="10354:[4525..4595).2" Target="10319:[84907..109876).1" />
<Link Source="10354:[4525..4595).2" Target="10319:[85434..85448).1" />
<Link Source="10354:[4561..4580).2" Target="10354:[4525..4595).2" />
<Link Source="10354:[4561..4580).2" Target="10319:[43504..43546).4" />
<Link Source="10354:[4561..4580).2" Target="10319:[85434..85448).1" />
<Link Source="10319:[85420..85449).1" Target="10354:[4561..4580).2" />
<Link Source="10319:[85420..85449).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85467..85484).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85508..85528).1" Target="10319:[84550..84674).1" />
<Link Source="10354:[4919..5009).6" Target="10319:[84907..109876).1" />
<Link Source="10354:[4919..5009).6" Target="10319:[85508..85528).1" />
<Link Source="10319:[85504..106825).1" Target="10354:[4919..5009).6" />
<Link Source="10319:[85504..106825).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85570..106806).1" Target="10319:[85504..106825).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[85420..85449).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[43504..43546).4" />
<Link Source="10319:[85570..106806).2" Target="10319:[85570..106806).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[85504..106825).1" />
<Link Source="10319:[103953..103983).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104078..104122).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[104078..104122).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104148..106735).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104148..106735).2" Target="10319:[104078..104122).1" />
<Link Source="10319:[104148..106735).2" Target="10319:[104148..106735).1" />
<Link Source="10319:[104148..106735).2" Target="10319:[85570..106806).2" />
<Link Source="10319:[104874..105336).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[104874..105336).1" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).1" Target="10319:[104148..106735).2" />
<Link Source="10319:[105368..106708).1" Target="10319:[84907..109876).6" />
<Link Source="10319:[105368..106708).1" Target="10319:[104148..106735).2" />
<Link Source="10319:[105465..105535).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[105465..105535).1" Target="10319:[105368..106708).1" />
<Link Source="10319:[105465..105535).2" Target="10319:[84907..109876).5" />
<Link Source="10319:[105465..105535).2" Target="10319:[105368..106708).1" />
<Link Source="10319:[105465..105535).3" Target="10319:[84907..109876).4" />
<Link Source="10319:[105465..105535).3" Target="10319:[105368..106708).1" />
<Link Source="10319:[105476..105534).1" Target="10319:[105368..106708).1" />
<Link Source="10319:[76345..76358).1" Target="10319:[105465..105535).1" />
<Link Source="10319:[76345..76358).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76360..76385).1" Target="10319:[105465..105535).2" />
<Link Source="10319:[76360..76385).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76387..76402).1" Target="10319:[105465..105535).3" />
<Link Source="10319:[76387..76402).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76428..76480).1" Target="10319:[76345..76358).1" />
<Link Source="10319:[76428..76480).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[76428..76480).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76494..76582).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[76428..76480).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[76494..76582).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[105476..105534).1" />
<Link Source="10319:[106763..106783).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[106763..106783).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[84691..84861).1" Target="10319:[106763..106783).1" />
<Link Source="10319:[84691..84861).1" Target="10319:[76428..76480).1" />
<Link Source="10319:[84691..84861).1" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84877..84891).1" Target="10319:[106763..106783).1" />
<Link Source="10319:[84877..84891).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[44948..45377).1" Target="10319:[84877..84891).1" />
<Link Source="10319:[44948..45377).1" Target="10319:[76428..76480).1" />
<Link Source="10319:[44948..45377).1" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[45408..45421).1" Target="10319:[20515..20674).1" />
<Link Source="10354:[11383..11549).1" Target="10319:[43095..43135).1" />
<Link Source="10354:[11383..11549).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[11428..11440).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[3841..3991).1" Target="10354:[11383..11549).1" />
<Link Source="10354:[3841..3991).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3887..3892).1" Target="EXTERNAL" />
<Link Source="10354:[3887..3892).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3887..3892).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3932..3952).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3932..3952).1" Target="10319:[76428..76480).1" />
<Link Source="10354:[3932..3952).1" Target="10354:[3887..3892).1" />
<Link Source="10354:[3932..3952).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3966..3980).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[3966..3980).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[11428..11441).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[11455..11538).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[11383..11549).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[3932..3952).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[11455..11538).1" />
<Link Source="10354:[11455..11538).2" Target="10319:[45408..45421).1" />
<Link Source="10354:[11506..11523).1" Target="10354:[11383..11549).1" />
<Link Source="10354:[11506..11523).1" Target="10354:[11455..11538).2" />
<Link Source="10354:[11506..11523).2" Target="10354:[11383..11549).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[3932..3952).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[11506..11523).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[3966..3972).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[11455..11538).2" />
<Link Source="10319:[45408..45422).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[45436..45568).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[45436..45568).1" Target="10354:[11506..11523).2" />
<Link Source="10319:[45436..45568).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[45505..45551).1" Target="10319:[20515..20674).1" />
<Link Source="10286:[10010..10027).1" Target="10319:[45436..45568).1" />
<Link Source="10286:[10010..10027).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[9966..10197).1" Target="10319:[41732..45579).1" />
<Link Source="10286:[9966..10197).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[10053..10100).1" Target="10286:[10010..10027).1" />
<Link Source="10286:[10053..10100).1" Target="10354:[11506..11523).2" />
<Link Source="10286:[10053..10100).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[10114..10186).1" Target="10286:[10010..10027).1" />
<Link Source="10286:[10114..10186).1" Target="10354:[11506..11523).2" />
<Link Source="10286:[10114..10186).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[10121..10185).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[9073..9094).1" Target="10286:[10114..10186).1" />
<Link Source="10286:[9073..9094).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9096..9108).1" Target="10286:[10114..10186).1" />
<Link Source="10286:[9096..9108).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9029..9954).1" Target="10286:[9966..10197).1" />
<Link Source="10286:[9029..9954).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9134..9189).1" Target="10286:[9073..9094).1" />
<Link Source="10286:[9134..9189).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9203..9282).1" Target="10286:[9096..9108).1" />
<Link Source="10286:[9203..9282).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[9134..9189).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[9203..9282).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[10053..10100).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[10121..10185).1" />
<Link Source="10286:[9305..9942).1" Target="10286:[9203..9282).2" />
<Link Source="10286:[9305..9942).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9298..9943).1" Target="10286:[9029..9954).1" />
<Link Source="10286:[9298..9943).1" Target="10286:[2036..2052).1" />
<Link Source="10286:[9298..9943).1" Target="10286:[9203..9282).2" />
<Link Source="10286:[9298..9943).1" Target="10286:[9305..9942).1" />
<Link Source="10286:[9298..9943).2" Target="EXTERNAL" />
<Link Source="10286:[9298..9943).2" Target="10286:[9305..9942).1" />
<Link Source="10286:[9798..9837).1" Target="10286:[9305..9942).1" />
<Link Source="10286:[10465..10663).1" Target="10286:[9029..9954).1" />
<Link Source="10286:[10465..10663).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[10465..10663).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[1977..1981).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10551..10586).2" Target="10286:[10551..10586).1" />
<Link Source="10286:[10551..10586).2" Target="10286:[1247..1258).2" />
<Link Source="10286:[10551..10586).2" Target="10346:[2544..2854).1" />
<Link Source="10286:[10551..10586).2" Target="10346:[2766..2776).1" />
<Link Source="10286:[10551..10586).2" Target="10346:[932..947).2" />
<Link Source="10286:[10551..10586).2" Target="10346:[2803..2815).1" />
<Link Source="10286:[10551..10586).2" Target="10286:[9298..9943).1" />
<Link Source="10286:[10551..10586).2" Target="10286:[9798..9837).1" />
<Link Source="10286:[10607..10651).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10465..10663).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[1977..1981).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10607..10651).1" />
<Link Source="10286:[10551..10586).3" Target="10286:[10465..10663).2" />
<Link Source="10286:[10551..10586).3" Target="10286:[10551..10586).2" />
<Link Source="10286:[10551..10586).3" Target="10286:[10607..10651).1" />
<Link Source="10325:[4462..4594).1" Target="10286:[10465..10663).2" />
<Link Source="10325:[4462..4594).1" Target="10286:[10551..10586).3" />
<Link Source="10325:[4462..4594).1" Target="10286:[10607..10651).1" />
<Link Source="10325:[4556..4582).1" Target="10286:[10607..10651).1" />
<Link Source="10286:[10675..11259).1" Target="10325:[4462..4594).1" />
<Link Source="10286:[10675..11259).1" Target="10325:[4556..4582).1" />
<Link Source="10286:[10741..11248).1" Target="10286:[10675..11259).1" />
<Link Source="10286:[10741..11248).1" Target="10286:[10551..10586).3" />
<Link Source="10286:[10741..11248).1" Target="10325:[4556..4582).1" />
<Link Source="10286:[11085..11098).1" Target="10286:[10741..11248).1" />
<Link Source="10325:[4549..4583).1" Target="10286:[11085..11098).1" />
<Link Source="10325:[4549..4583).1" Target="10286:[10607..10651).1" />
<Link Source="10286:[10600..10652).1" Target="10325:[4549..4583).1" />
<Link Source="10286:[10600..10652).1" Target="10286:[10607..10651).1" />
<Link Source="10319:[45436..45568).4" Target="10319:[84877..84891).1" />
<Link Source="10319:[45436..45568).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[45443..45567).1" Target="10319:[20515..20674).1" />
<Link Source="10287:[2306..2328).1" Target="10286:[10600..10652).1" />
<Link Source="10287:[2306..2328).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2330..2343).1" Target="10319:[45436..45568).4" />
<Link Source="10287:[2330..2343).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2377..2471).1" Target="10287:[2330..2343).1" />
<Link Source="10287:[2377..2471).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2489..2521).1" Target="10287:[2330..2343).1" />
<Link Source="10287:[2489..2521).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2539..2781).1" Target="10287:[2489..2521).1" />
<Link Source="10287:[2539..2781).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2546..2558).1" Target="10287:[2539..2781).1" />
<Link Source="10287:[2546..2558).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2539..2781).3" Target="10287:[2306..2328).1" />
<Link Source="10287:[2539..2781).3" Target="10287:[2546..2558).1" />
<Link Source="10287:[2582..2656).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[1144..1157).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[1144..1157).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1159..1181).1" Target="10287:[2539..2781).3" />
<Link Source="10287:[1159..1181).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1092..1409).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[1092..1409).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1215..1253).1" Target="10287:[1144..1157).1" />
<Link Source="10287:[1215..1253).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1271..1302).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1271..1291).1" Target="10287:[1271..1302).1" />
<Link Source="10287:[1271..1291).1" Target="10287:[1092..1409).1" />
<Link Source="10287:[1271..1291).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1320..1327).1" Target="10287:[1144..1157).1" />
<Link Source="10287:[1320..1327).1" Target="10287:[1092..1409).1" />
<Link Source="10287:[1320..1327).1" Target="10287:[2582..2656).1" />
<Link Source="10287:[1355..1373).1" Target="10287:[1159..1181).1" />
<Link Source="10287:[1355..1373).1" Target="10287:[1092..1409).1" />
<Link Source="10287:[1355..1373).1" Target="10287:[2582..2656).1" />
<Link Source="10319:[18724..18740).1" Target="10319:[17929..18023).1" />
<Link Source="10287:[1857..1908).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[1857..1908).1" Target="10319:[18724..18740).1" />
<Link Source="10287:[1893..1908).1" Target="10287:[1857..1908).1" />
<Link Source="10287:[1893..1908).1" Target="10287:[1320..1327).1" />
<Link Source="10287:[1893..1908).1" Target="10319:[18724..18740).1" />
<Link Source="10287:[1860..1908).1" Target="10287:[1857..1908).1" />
<Link Source="10287:[1860..1908).1" Target="10287:[1271..1291).1" />
<Link Source="10287:[1860..1908).1" Target="10287:[1271..1302).1" />
<Link Source="10287:[1860..1908).1" Target="10287:[1893..1908).1" />
<Link Source="10287:[1860..1908).1" Target="10319:[18724..18740).1" />
<Link Source="10319:[18710..18742).1" Target="10287:[1860..1908).1" />
<Link Source="10319:[18710..18742).1" Target="10319:[17929..18023).1" />
<Link Source="10319:[18758..18826).1" Target="10287:[2546..2558).1" />
<Link Source="10319:[18758..18826).1" Target="10319:[17929..18023).1" />
<Link Source="10319:[18758..18826).2" Target="10319:[18456..18481).1" />
<Link Source="10319:[18758..18826).2" Target="10319:[17929..18023).1" />
<Link Source="10319:[18758..18826).3" Target="10319:[18431..18454).1" />
<Link Source="10319:[18758..18826).3" Target="10319:[17929..18023).1" />
<Link Source="10319:[18758..18826).4" Target="10319:[18483..18522).1" />
<Link Source="10319:[18758..18826).4" Target="10319:[17929..18023).1" />
<Link Source="10319:[18765..18825).1" Target="10319:[17929..18023).1" />
<Link Source="10319:[51762..51815).1" Target="10319:[18758..18826).1" />
<Link Source="10319:[51762..51815).1" Target="10319:[18765..18825).1" />
<Link Source="10319:[51817..51842).1" Target="10319:[18758..18826).2" />
<Link Source="10319:[51817..51842).1" Target="10319:[18765..18825).1" />
<Link Source="10319:[51844..51861).1" Target="10319:[18758..18826).3" />
<Link Source="10319:[51844..51861).1" Target="10319:[18765..18825).1" />
<Link Source="10319:[51863..51909).1" Target="10319:[18758..18826).4" />
<Link Source="10319:[51863..51909).1" Target="10319:[18765..18825).1" />
<Link Source="10319:[51698..52285).1" Target="10319:[18300..18837).1" />
<Link Source="10319:[51698..52285).1" Target="10319:[18765..18825).1" />
<Link Source="10319:[51939..51953).1" Target="10319:[18765..18825).1" />
<Link Source="10287:[1680..1716).1" Target="10319:[51762..51815).1" />
<Link Source="10287:[1680..1716).1" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).1" Target="10287:[1680..1716).1" />
<Link Source="10287:[1683..1716).1" Target="10287:[1320..1327).1" />
<Link Source="10287:[1683..1716).1" Target="10286:[10551..10586).3" />
<Link Source="10287:[1683..1716).1" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).1" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).1" Target="10287:[1683..1716).1" />
<Link Source="10319:[51935..52244).1" Target="10319:[18765..18825).1" />
<Link Source="10319:[52260..52274).1" Target="10319:[51762..51815).1" />
<Link Source="10319:[52260..52274).1" Target="10319:[18765..18825).1" />
<Link Source="10345:[9704..9823).1" Target="10345:[6370..12679).2" />
<Link Source="10287:[1784..1818).1" Target="10319:[52260..52274).1" />
<Link Source="10287:[1784..1818).1" Target="10345:[9704..9823).1" />
<Link Source="10287:[1787..1793).1" Target="10345:[9704..9823).1" />
<Link Source="10287:[1535..1573).1" Target="10287:[1784..1818).1" />
<Link Source="10287:[1535..1573).1" Target="10287:[1787..1793).1" />
<Link Source="10287:[1538..1573).1" Target="10287:[1535..1573).1" />
<Link Source="10287:[1538..1573).1" Target="10287:[1320..1327).1" />
<Link Source="10287:[1538..1573).1" Target="10287:[1787..1793).1" />
<Link Source="10287:[1787..1818).1" Target="10287:[1538..1573).1" />
<Link Source="10287:[1787..1818).1" Target="10345:[9704..9823).1" />
<Link Source="10345:[9850..12656).1" Target="10287:[1787..1818).1" />
<Link Source="10345:[9850..12656).1" Target="10286:[10551..10586).3" />
<Link Source="10345:[9850..12656).1" Target="EXTERNAL" />
<Link Source="10345:[9850..12656).1" Target="10345:[6370..12679).2" />
<Link Source="10345:[9949..10705).1" Target="10345:[9850..12656).1" />
<Link Source="10345:[10221..10705).1" Target="10287:[1787..1818).1" />
<Link Source="10345:[10221..10705).1" Target="10345:[9949..10705).1" />
<Link Source="10345:[10221..10705).2" Target="10345:[6093..6197).1" />
<Link Source="10345:[10221..10705).2" Target="10345:[10221..10705).1" />
<Link Source="10345:[10221..10705).2" Target="10286:[10551..10586).3" />
<Link Source="10345:[10221..10705).2" Target="10345:[9949..10705).1" />
<Link Source="10345:[10538..10565).1" Target="10287:[1787..1818).1" />
<Link Source="10345:[10538..10565).1" Target="10345:[10221..10705).2" />
<Link Source="10345:[10599..10674).1" Target="10287:[1787..1818).1" />
<Link Source="10345:[10599..10674).1" Target="10345:[10221..10705).2" />
<Link Source="10345:[10599..10674).2" Target="10345:[6217..12698).1" />
<Link Source="10345:[10599..10674).2" Target="10345:[10221..10705).2" />
<Link Source="10345:[10599..10674).3" Target="10345:[10221..10705).2" />
<Link Source="10345:[10610..10672).1" Target="10345:[10221..10705).2" />
<Link Source="10361:[603..640).1" Target="10345:[10599..10674).1" />
<Link Source="10361:[603..640).1" Target="10345:[10610..10672).1" />
<Link Source="10361:[642..677).1" Target="10345:[10599..10674).2" />
<Link Source="10361:[642..677).1" Target="10345:[10610..10672).1" />
<Link Source="10361:[563..804).1" Target="10345:[10599..10674).3" />
<Link Source="10361:[563..804).1" Target="10345:[10610..10672).1" />
<Link Source="10361:[703..723).1" Target="10361:[603..640).1" />
<Link Source="10361:[703..723).1" Target="10361:[563..804).1" />
<Link Source="10361:[703..723).1" Target="10345:[10610..10672).1" />
<Link Source="10361:[756..775).1" Target="10361:[642..677).1" />
<Link Source="10361:[756..775).1" Target="10361:[563..804).1" />
<Link Source="10361:[756..775).1" Target="10345:[10610..10672).1" />
<Link Source="10345:[10599..10674).5" Target="10345:[4728..4802).1" />
<Link Source="10345:[10599..10674).5" Target="10345:[10599..10674).3" />
<Link Source="10345:[10599..10674).5" Target="10361:[703..723).1" />
<Link Source="10345:[10599..10674).5" Target="10361:[756..775).1" />
<Link Source="10345:[10599..10674).5" Target="10345:[10538..10565).1" />
<Link Source="10345:[10599..10674).5" Target="10345:[10221..10705).2" />
<Link Source="10345:[12718..12738).1" Target="10345:[6093..6197).1" />
<Link Source="10345:[12718..12738).1" Target="10345:[10599..10674).5" />
<Link Source="10345:[12718..12738).1" Target="10345:[4910..12753).2" />
<Link Source="10345:[12769..12877).1" Target="10345:[4524..4562).1" />
<Link Source="10345:[12769..12877).1" Target="10345:[12718..12738).1" />
<Link Source="10345:[12769..12877).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[12843..12862).1" Target="10345:[12769..12877).1" />
<Link Source="10345:[12893..13027).1" Target="10345:[4578..4615).1" />
<Link Source="10345:[12893..13027).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[12893..13027).2" Target="10345:[4816..4896).1" />
<Link Source="10345:[12893..13027).2" Target="10346:[3712..3801).4" />
<Link Source="10345:[12893..13027).5" Target="10345:[4728..4802).1" />
<Link Source="10345:[12893..13027).5" Target="10345:[12718..12738).1" />
<Link Source="10345:[12893..13027).5" Target="10346:[3712..3801).4" />
<Link Source="10345:[12893..13027).7" Target="10345:[4631..4714).4" />
<Link Source="10345:[12893..13027).7" Target="10346:[3712..3801).4" />
<Link Source="10345:[12893..13027).8" Target="10345:[12843..12862).1" />
<Link Source="10345:[12893..13027).8" Target="10346:[3712..3801).4" />
<Link Source="10345:[12893..13027).9" Target="10346:[3712..3801).4" />
<Link Source="10345:[12900..13026).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[1753..1782).2" Target="10345:[12893..13027).1" />
<Link Source="10345:[1753..1782).2" Target="10345:[12900..13026).1" />
<Link Source="10345:[1797..1861).2" Target="10345:[12893..13027).2" />
<Link Source="10345:[1797..1861).2" Target="10345:[12900..13026).1" />
<Link Source="10345:[1876..1931).2" Target="10345:[12893..13027).5" />
<Link Source="10345:[1876..1931).2" Target="10345:[12900..13026).1" />
<Link Source="10345:[1946..1998).2" Target="10345:[12893..13027).7" />
<Link Source="10345:[1946..1998).2" Target="10345:[12900..13026).1" />
<Link Source="10345:[2013..2038).2" Target="10345:[12893..13027).8" />
<Link Source="10345:[2013..2038).2" Target="10345:[12900..13026).1" />
<Link Source="10345:[1723..2412).2" Target="10345:[12893..13027).9" />
<Link Source="10345:[1723..2412).2" Target="10345:[12900..13026).1" />
<Link Source="10345:[1234..1246).2" Target="10345:[1723..2412).2" />
<Link Source="10345:[1234..1246).2" Target="10345:[12900..13026).1" />
<Link Source="10345:[1288..1300).2" Target="10345:[1723..2412).2" />
<Link Source="10345:[1288..1300).2" Target="10345:[12900..13026).1" />
<Link Source="10345:[1531..1543).2" Target="10345:[1723..2412).2" />
<Link Source="10345:[1531..1543).2" Target="10345:[12900..13026).1" />
<Link Source="10345:[2064..2099).5" Target="10345:[12900..13026).1" />
<Link Source="10345:[2064..2099).6" Target="10345:[1797..1861).2" />
<Link Source="10345:[2064..2099).6" Target="10345:[2064..2099).5" />
<Link Source="10345:[2064..2099).6" Target="10345:[12900..13026).1" />
<Link Source="10345:[2113..2145).3" Target="10345:[1876..1931).2" />
<Link Source="10345:[2113..2145).3" Target="10345:[12893..13027).5" />
<Link Source="10345:[2113..2145).3" Target="10345:[12900..13026).1" />
<Link Source="10345:[2159..2192).3" Target="10345:[1946..1998).2" />
<Link Source="10345:[2159..2192).3" Target="10345:[23812..23848).1" />
<Link Source="10345:[2159..2192).3" Target="10345:[12900..13026).1" />
<Link Source="10346:[3712..3801).6" Target="10346:[3712..3801).2" />
<Link Source="10346:[3712..3801).6" Target="10345:[12893..13027).9" />
<Link Source="10346:[3712..3801).6" Target="10345:[12718..12738).1" />
<Link Source="10346:[3712..3801).6" Target="10345:[1753..1782).2" />
<Link Source="10346:[3712..3801).6" Target="10345:[2013..2038).2" />
<Link Source="10346:[3712..3801).6" Target="10345:[1797..1861).2" />
<Link Source="10346:[3712..3801).6" Target="10345:[1876..1931).2" />
<Link Source="10346:[3712..3801).6" Target="10345:[1946..1998).2" />
<Link Source="10346:[3712..3801).6" Target="10345:[12893..13027).2" />
<Link Source="10346:[3712..3801).6" Target="10345:[12893..13027).5" />
<Link Source="10346:[3712..3801).6" Target="10345:[23812..23848).1" />
<Link Source="10346:[3712..3801).6" Target="10345:[22457..22528).1" />
<Link Source="10346:[3712..3801).6" Target="10346:[3654..3816).2" />
<Link Source="10345:[25064..25074).2" Target="10346:[3712..3801).6" />
<Link Source="10345:[26266..28173).2" Target="10345:[24507..26254).1" />
<Link Source="10345:[26266..28173).2" Target="10345:[25064..25074).2" />
<Link Source="10345:[26314..26387).3" Target="10345:[26266..28173).2" />
<Link Source="10345:[26314..26387).3" Target="10345:[5549..5574).1" />
<Link Source="10345:[26314..26387).3" Target="10345:[25064..25074).2" />
<Link Source="10345:[26403..26475).1" Target="10345:[26266..28173).2" />
<Link Source="10345:[26403..26475).1" Target="10346:[3712..3801).6" />
<Link Source="10345:[26403..26475).1" Target="10345:[25064..25074).2" />
<Link Source="10345:[26994..27050).1" Target="10345:[26266..28173).2" />
<Link Source="10345:[26994..27050).1" Target="10346:[3712..3801).6" />
<Link Source="10345:[26994..27050).1" Target="10345:[25064..25074).2" />
<Link Source="10345:[27064..27114).1" Target="10345:[26994..27050).1" />
<Link Source="10345:[27064..27114).1" Target="10345:[25064..25074).2" />
<Link Source="10345:[27064..27114).2" Target="10345:[25064..25074).2" />
<Link Source="10345:[27082..27113).1" Target="10345:[25064..25074).2" />
<Link Source="10845:[522..547).1" Target="10345:[27064..27114).1" />
<Link Source="10845:[522..547).1" Target="10345:[27082..27113).1" />
<Link Source="10845:[549..580).1" Target="10345:[27064..27114).2" />
<Link Source="10845:[549..580).1" Target="10345:[27082..27113).1" />
<Link Source="10845:[499..728).1" Target="10345:[27064..27114).2" />
<Link Source="10845:[499..728).1" Target="10345:[27082..27113).1" />
<Link Source="10845:[602..612).1" Target="10845:[522..547).1" />
<Link Source="10845:[602..612).1" Target="10345:[27082..27113).1" />
<Link Source="10845:[637..638).1" Target="10345:[27082..27113).1" />
<Link Source="10845:[660..678).1" Target="10845:[549..580).1" />
<Link Source="10845:[660..678).1" Target="10345:[27082..27113).1" />
<Link Source="10845:[701..705).1" Target="10345:[27082..27113).1" />
<Link Source="10845:[499..728).2" Target="10345:[27082..27113).1" />
<Link Source="10845:[764..789).1" Target="10845:[602..612).1" />
<Link Source="10845:[764..789).1" Target="10845:[499..728).2" />
<Link Source="10845:[791..816).1" Target="10845:[637..638).1" />
<Link Source="10845:[791..816).1" Target="10845:[499..728).2" />
<Link Source="10845:[818..841).1" Target="10845:[660..678).1" />
<Link Source="10845:[818..841).1" Target="10845:[499..728).2" />
<Link Source="10845:[843..878).1" Target="10845:[701..705).1" />
<Link Source="10845:[843..878).1" Target="10845:[499..728).2" />
<Link Source="10845:[740..997).1" Target="10845:[499..728).1" />
<Link Source="10845:[740..997).1" Target="10845:[499..728).2" />
<Link Source="10843:[661..687).1" Target="10843:[685..687).1" />
<Link Source="10843:[82071..82080).1" Target="10843:[82075..82080).1" />
<Link Source="10843:[82110..82118).1" Target="10843:[82114..82118).1" />
<Link Source="10843:[82447..82485).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82447..82485).2" Target="10843:[82447..82485).1" />
<Link Source="10843:[82447..82485).4" Target="10843:[82110..82118).1" />
<Link Source="10843:[82447..82485).4" Target="10843:[82447..82485).1" />
<Link Source="10843:[82519..82557).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82519..82557).2" Target="10843:[82519..82557).1" />
<Link Source="10843:[82519..82557).4" Target="10843:[82110..82118).1" />
<Link Source="10843:[82519..82557).4" Target="10843:[82519..82557).1" />
<Link Source="10843:[82591..82629).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82591..82629).2" Target="10843:[82591..82629).1" />
<Link Source="10843:[82591..82629).6" Target="10843:[82110..82118).1" />
<Link Source="10843:[82591..82629).6" Target="10843:[82591..82629).1" />
<Link Source="10843:[82663..82701).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82663..82701).2" Target="10843:[82663..82701).1" />
<Link Source="10843:[82663..82701).6" Target="10843:[82110..82118).1" />
<Link Source="10843:[82663..82701).6" Target="10843:[82663..82701).1" />
<Link Source="10843:[82735..82773).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82735..82773).2" Target="10843:[82735..82773).1" />
<Link Source="10843:[82735..82773).8" Target="10843:[82110..82118).1" />
<Link Source="10843:[82735..82773).8" Target="10843:[82735..82773).1" />
<Link Source="10843:[82807..82845).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82807..82845).2" Target="10843:[82807..82845).1" />
<Link Source="10843:[82807..82845).8" Target="10843:[82110..82118).1" />
<Link Source="10843:[82807..82845).8" Target="10843:[82807..82845).1" />
<Link Source="10843:[82879..82917).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82879..82917).2" Target="10843:[82879..82917).1" />
<Link Source="10843:[82879..82917).11" Target="10843:[82110..82118).1" />
<Link Source="10843:[82879..82917).11" Target="10843:[82879..82917).1" />
<Link Source="10843:[82951..82989).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82951..82989).2" Target="10843:[82951..82989).1" />
<Link Source="10843:[82951..82989).11" Target="10843:[82110..82118).1" />
<Link Source="10843:[82951..82989).11" Target="10843:[82951..82989).1" />
<Link Source="10843:[83023..83061).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83023..83061).2" Target="10843:[83023..83061).1" />
<Link Source="10843:[83023..83061).5" Target="10843:[82110..82118).1" />
<Link Source="10843:[83023..83061).5" Target="10843:[83023..83061).1" />
<Link Source="10843:[83095..83133).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83095..83133).2" Target="10843:[83095..83133).1" />
<Link Source="10843:[83095..83133).12" Target="10843:[82110..82118).1" />
<Link Source="10843:[83095..83133).12" Target="10843:[83095..83133).1" />
<Link Source="10843:[83167..83205).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83167..83205).2" Target="10843:[83167..83205).1" />
<Link Source="10843:[83239..83277).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83239..83277).2" Target="10843:[83239..83277).1" />
<Link Source="10843:[82333..83288).2" Target="10843:[82447..82485).1" />
<Link Source="10843:[82333..83288).2" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).3" Target="10843:[82519..82557).1" />
<Link Source="10843:[82333..83288).3" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).4" Target="10843:[82591..82629).1" />
<Link Source="10843:[82333..83288).4" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).5" Target="10843:[82663..82701).1" />
<Link Source="10843:[82333..83288).5" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).6" Target="10843:[82735..82773).1" />
<Link Source="10843:[82333..83288).6" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).7" Target="10843:[82807..82845).1" />
<Link Source="10843:[82333..83288).7" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).8" Target="10843:[82879..82917).1" />
<Link Source="10843:[82333..83288).8" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).9" Target="10843:[82951..82989).1" />
<Link Source="10843:[82333..83288).9" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).10" Target="10843:[83023..83061).1" />
<Link Source="10843:[82333..83288).10" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).11" Target="10843:[83095..83133).1" />
<Link Source="10843:[82333..83288).11" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).12" Target="10843:[83167..83205).1" />
<Link Source="10843:[82333..83288).12" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).13" Target="10843:[83239..83277).1" />
<Link Source="10843:[82333..83288).13" Target="10843:[82333..83288).1" />
<Link Source="10843:[82293..83288).1" Target="10843:[82333..83288).1" />
<Link Source="10843:[83487..83525).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83487..83525).2" Target="10843:[83487..83525).1" />
<Link Source="10843:[83487..83525).3" Target="10843:[82110..82118).1" />
<Link Source="10843:[83487..83525).3" Target="10843:[83487..83525).1" />
<Link Source="10843:[83559..83597).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83559..83597).2" Target="10843:[83559..83597).1" />
<Link Source="10843:[83559..83597).3" Target="10843:[82071..82080).1" />
<Link Source="10843:[83559..83597).3" Target="10843:[83559..83597).1" />
<Link Source="10843:[83631..83669).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83631..83669).2" Target="10843:[83631..83669).1" />
<Link Source="10843:[83631..83669).4" Target="10843:[82071..82080).1" />
<Link Source="10843:[83631..83669).4" Target="10843:[83631..83669).1" />
<Link Source="10843:[83703..83741).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83703..83741).2" Target="10843:[83703..83741).1" />
<Link Source="10843:[83703..83741).5" Target="10843:[82071..82080).1" />
<Link Source="10843:[83703..83741).5" Target="10843:[83703..83741).1" />
<Link Source="10843:[83775..83813).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83775..83813).2" Target="10843:[83775..83813).1" />
<Link Source="10843:[83775..83813).6" Target="10843:[82071..82080).1" />
<Link Source="10843:[83775..83813).6" Target="10843:[83775..83813).1" />
<Link Source="10843:[83847..83885).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83847..83885).2" Target="10843:[83847..83885).1" />
<Link Source="10843:[83847..83885).7" Target="10843:[82071..82080).1" />
<Link Source="10843:[83847..83885).7" Target="10843:[83847..83885).1" />
<Link Source="10843:[83919..83957).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83919..83957).2" Target="10843:[83919..83957).1" />
<Link Source="10843:[83919..83957).8" Target="10843:[82071..82080).1" />
<Link Source="10843:[83919..83957).8" Target="10843:[83919..83957).1" />
<Link Source="10843:[83991..84029).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83991..84029).2" Target="10843:[83991..84029).1" />
<Link Source="10843:[83991..84029).9" Target="10843:[82071..82080).1" />
<Link Source="10843:[83991..84029).9" Target="10843:[83991..84029).1" />
<Link Source="10843:[84063..84101).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[84063..84101).2" Target="10843:[84063..84101).1" />
<Link Source="10843:[84063..84101).5" Target="10843:[82071..82080).1" />
<Link Source="10843:[84063..84101).5" Target="10843:[84063..84101).1" />
<Link Source="10843:[84135..84173).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[84135..84173).2" Target="10843:[84135..84173).1" />
<Link Source="10843:[84135..84173).11" Target="10843:[82071..82080).1" />
<Link Source="10843:[84135..84173).11" Target="10843:[84135..84173).1" />
<Link Source="10843:[84207..84245).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[84207..84245).2" Target="10843:[84207..84245).1" />
<Link Source="10843:[84207..84245).12" Target="10843:[82071..82080).1" />
<Link Source="10843:[84207..84245).12" Target="10843:[84207..84245).1" />
<Link Source="10843:[84279..84317).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[84279..84317).2" Target="10843:[84279..84317).1" />
<Link Source="10843:[84279..84317).13" Target="10843:[82071..82080).1" />
<Link Source="10843:[84279..84317).13" Target="10843:[84279..84317).1" />
<Link Source="10843:[83373..84328).2" Target="10843:[83487..83525).1" />
<Link Source="10843:[83373..84328).2" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).3" Target="10843:[83559..83597).1" />
<Link Source="10843:[83373..84328).3" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).4" Target="10843:[83631..83669).1" />
<Link Source="10843:[83373..84328).4" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).5" Target="10843:[83703..83741).1" />
<Link Source="10843:[83373..84328).5" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).6" Target="10843:[83775..83813).1" />
<Link Source="10843:[83373..84328).6" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).7" Target="10843:[83847..83885).1" />
<Link Source="10843:[83373..84328).7" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).8" Target="10843:[83919..83957).1" />
<Link Source="10843:[83373..84328).8" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).9" Target="10843:[83991..84029).1" />
<Link Source="10843:[83373..84328).9" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).10" Target="10843:[84063..84101).1" />
<Link Source="10843:[83373..84328).10" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).11" Target="10843:[84135..84173).1" />
<Link Source="10843:[83373..84328).11" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).12" Target="10843:[84207..84245).1" />
<Link Source="10843:[83373..84328).12" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).13" Target="10843:[84279..84317).1" />
<Link Source="10843:[83373..84328).13" Target="10843:[83373..84328).1" />
<Link Source="10843:[83333..84328).1" Target="10843:[83373..84328).1" />
<Link Source="10845:[900..910).1" Target="10845:[764..789).1" />
<Link Source="10845:[900..910).1" Target="10845:[499..728).2" />
<Link Source="10845:[912..933).1" Target="10845:[791..816).1" />
<Link Source="10845:[912..933).1" Target="10845:[499..728).2" />
<Link Source="10845:[935..953).1" Target="10845:[818..841).1" />
<Link Source="10845:[935..953).1" Target="10845:[499..728).2" />
<Link Source="10845:[955..974).1" Target="10845:[843..878).1" />
<Link Source="10845:[955..974).1" Target="10845:[499..728).2" />
<Link Source="10845:[740..997).2" Target="10845:[499..728).2" />
<Link Source="10843:[1173..1198).1" Target="10845:[900..910).1" />
<Link Source="10843:[1173..1198).1" Target="10845:[740..997).2" />
<Link Source="10843:[1200..1225).1" Target="10845:[912..933).1" />
<Link Source="10843:[1200..1225).1" Target="10845:[740..997).2" />
<Link Source="10843:[1227..1250).1" Target="10845:[935..953).1" />
<Link Source="10843:[1227..1250).1" Target="10845:[740..997).2" />
<Link Source="10843:[1252..1287).1" Target="10845:[955..974).1" />
<Link Source="10843:[1252..1287).1" Target="10845:[740..997).2" />
<Link Source="10843:[1147..1833).1" Target="10845:[740..997).1" />
<Link Source="10843:[1147..1833).1" Target="10845:[740..997).2" />
<Link Source="10843:[734..744).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[734..744).1" Target="10845:[740..997).2" />
<Link Source="10843:[778..799).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[778..799).1" Target="10845:[740..997).2" />
<Link Source="10843:[835..853).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[835..853).1" Target="10845:[740..997).2" />
<Link Source="10843:[1113..1134).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1113..1134).1" Target="10845:[740..997).2" />
<Link Source="10843:[1313..1354).1" Target="10845:[740..997).2" />
<Link Source="10843:[1313..1354).2" Target="10843:[1173..1198).1" />
<Link Source="10843:[1313..1354).2" Target="10843:[1313..1354).1" />
<Link Source="10843:[1313..1354).2" Target="10845:[740..997).2" />
<Link Source="10843:[1368..1474).1" Target="10845:[740..997).2" />
<Link Source="10843:[1368..1474).2" Target="10843:[1252..1287).1" />
<Link Source="10843:[1368..1474).2" Target="10843:[1368..1474).1" />
<Link Source="10843:[1368..1474).2" Target="10845:[740..997).2" />
<Link Source="10843:[1488..1600).1" Target="10845:[740..997).2" />
<Link Source="10843:[1488..1600).2" Target="10843:[1252..1287).1" />
<Link Source="10843:[1488..1600).2" Target="10843:[1488..1600).1" />
<Link Source="10843:[1488..1600).2" Target="10845:[740..997).2" />
<Link Source="10843:[1616..1631).1" Target="10843:[1173..1198).1" />
<Link Source="10843:[1616..1631).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1616..1631).1" Target="10845:[740..997).2" />
<Link Source="10843:[1659..1685).1" Target="10843:[1200..1225).1" />
<Link Source="10843:[1659..1685).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1659..1685).1" Target="10845:[740..997).2" />
<Link Source="10843:[1724..1742).1" Target="10843:[1227..1250).1" />
<Link Source="10843:[1724..1742).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1724..1742).1" Target="10845:[740..997).2" />
<Link Source="10843:[1778..1799).1" Target="10843:[1252..1287).1" />
<Link Source="10843:[1778..1799).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1778..1799).1" Target="10845:[740..997).2" />
<Link Source="10345:[27128..27705).1" Target="10345:[26266..28173).2" />
<Link Source="10345:[27128..27705).1" Target="10346:[3712..3801).6" />
<Link Source="10345:[27128..27705).1" Target="10345:[25064..25074).2" />
<Link Source="10345:[27264..27690).1" Target="10345:[27128..27705).1" />
<Link Source="10345:[27264..27690).1" Target="10346:[3712..3801).6" />
<Link Source="10345:[27773..27973).1" Target="10345:[26266..28173).2" />
<Link Source="10345:[27773..27973).1" Target="10346:[3712..3801).6" />
<Link Source="10345:[27773..27973).1" Target="10345:[25064..25074).2" />
<Link Source="10345:[27989..28162).1" Target="10345:[25064..25074).2" />
<Link Source="10345:[27989..28162).2" Target="10345:[26266..28173).2" />
<Link Source="10345:[27989..28162).2" Target="10346:[3712..3801).6" />
<Link Source="10345:[27989..28162).2" Target="10345:[27989..28162).1" />
<Link Source="10345:[27989..28162).2" Target="10345:[25064..25074).2" />
<Link Source="10345:[25064..25075).2" Target="10346:[3712..3801).6" />
<Link Source="10345:[25858..25865).2" Target="10346:[3712..3801).6" />
<Link Source="10076:[4437..4452).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4437..4452).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4454..4498).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4454..4498).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4500..4523).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4500..4523).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4411..5059).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4411..5059).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4549..4579).1" Target="10076:[4437..4452).1" />
<Link Source="10076:[4549..4579).1" Target="10346:[3712..3801).6" />
<Link Source="10076:[4549..4579).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4821..4829).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3592..3700).2" Target="10076:[4411..5059).1" />
<Link Source="10076:[3592..3700).2" Target="10076:[4821..4829).1" />
<Link Source="10076:[3628..3685).3" Target="10076:[3592..3700).2" />
<Link Source="10076:[3628..3685).3" Target="10346:[3712..3801).6" />
<Link Source="10076:[3628..3685).3" Target="EXTERNAL" />
<Link Source="10076:[3628..3685).3" Target="10076:[4821..4829).1" />
<Link Source="10076:[4815..4966).1" Target="10076:[3628..3685).3" />
<Link Source="10076:[4815..4966).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).4" Target="10076:[4437..4452).1" />
<Link Source="10076:[4815..4966).4" Target="10346:[3712..3801).6" />
<Link Source="10076:[4815..4966).4" Target="10076:[4815..4966).3" />
<Link Source="10076:[4815..4966).4" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).5" Target="10076:[4815..4966).1" />
<Link Source="10076:[4815..4966).5" Target="10076:[4815..4966).4" />
<Link Source="10076:[4815..4966).5" Target="25002:[4395..4432).1" />
<Link Source="10076:[4932..4951).1" Target="10076:[4437..4452).1" />
<Link Source="10076:[4932..4951).1" Target="10346:[3712..3801).6" />
<Link Source="10076:[4932..4951).1" Target="10076:[4815..4966).5" />
<Link Source="10076:[4982..5048).1" Target="10076:[4932..4951).1" />
<Link Source="10076:[4982..5048).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).2" Target="10076:[4549..4579).1" />
<Link Source="10076:[4982..5048).2" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).3" Target="10076:[4454..4498).1" />
<Link Source="10076:[4982..5048).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).4" Target="10076:[4500..4523).1" />
<Link Source="10076:[4982..5048).4" Target="25002:[4395..4432).1" />
<Link Source="10076:[4989..5047).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[5097..5112).1" Target="10076:[4982..5048).1" />
<Link Source="10076:[5097..5112).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5114..5126).1" Target="10076:[4982..5048).2" />
<Link Source="10076:[5114..5126).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5128..5172).1" Target="10076:[4982..5048).3" />
<Link Source="10076:[5128..5172).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5174..5197).1" Target="10076:[4982..5048).4" />
<Link Source="10076:[5174..5197).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5071..5759).1" Target="10076:[4411..5059).1" />
<Link Source="10076:[5071..5759).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5223..5250).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[5097..5112).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).1" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).2" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).2" Target="10346:[3712..3801).6" />
<Link Source="10076:[5277..5448).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5470..5538).1" Target="10076:[5071..5759).1" />
<Link Source="10076:[5470..5538).1" Target="10346:[3712..3801).6" />
<Link Source="10076:[5470..5538).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).1" Target="10076:[5114..5126).1" />
<Link Source="10076:[5552..5614).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).2" Target="10076:[5128..5172).1" />
<Link Source="10076:[5552..5614).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).3" Target="10076:[5174..5197).1" />
<Link Source="10076:[5552..5614).3" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5613).1" Target="10076:[4989..5047).1" />
<Link Source="10077:[1039..1051).2" Target="10076:[5552..5614).1" />
<Link Source="10077:[1039..1051).2" Target="10076:[5552..5613).1" />
<Link Source="10077:[1053..1090).2" Target="10076:[5552..5614).2" />
<Link Source="10077:[1053..1090).2" Target="10076:[5552..5613).1" />
<Link Source="10077:[1092..1108).2" Target="10076:[5552..5614).3" />
<Link Source="10077:[1092..1108).2" Target="10076:[5552..5613).1" />
<Link Source="10077:[1014..1370).2" Target="10076:[5470..5538).1" />
<Link Source="10077:[1014..1370).2" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).8" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).9" Target="10077:[1053..1090).2" />
<Link Source="10077:[1142..1210).9" Target="10077:[1142..1210).8" />
<Link Source="10077:[1142..1210).9" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).11" Target="10077:[1092..1108).2" />
<Link Source="10077:[1142..1210).11" Target="10077:[1142..1210).8" />
<Link Source="10077:[1142..1210).11" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).12" Target="10077:[1142..1210).9" />
<Link Source="10077:[1142..1210).12" Target="10077:[1142..1210).11" />
<Link Source="10077:[1142..1210).12" Target="10076:[5552..5613).1" />
<Link Source="10077:[1230..1239).2" Target="10077:[1039..1051).2" />
<Link Source="10077:[1230..1239).2" Target="10077:[1014..1370).2" />
<Link Source="10077:[1230..1239).2" Target="10076:[5552..5613).1" />
<Link Source="10077:[1269..1290).2" Target="10077:[1053..1090).2" />
<Link Source="10077:[1269..1290).2" Target="10077:[1014..1370).2" />
<Link Source="10077:[1269..1290).2" Target="10076:[5552..5613).1" />
<Link Source="10077:[1332..1342).2" Target="10077:[1092..1108).2" />
<Link Source="10077:[1332..1342).2" Target="10077:[1014..1370).2" />
<Link Source="10077:[1332..1342).2" Target="10076:[5552..5613).1" />
<Link Source="10076:[5552..5614).4" Target="10076:[4989..5047).1" />
<Link Source="10076:[5628..5664).1" Target="10076:[5097..5112).1" />
<Link Source="10076:[5628..5664).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5644..5663).1" Target="10076:[4989..5047).1" />
<Link Source="10077:[2693..2708).1" Target="10076:[5628..5664).1" />
<Link Source="10077:[2693..2708).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2664..2780).1" Target="10076:[5470..5538).1" />
<Link Source="10077:[2664..2780).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2742..2765).1" Target="10077:[2693..2708).1" />
<Link Source="10077:[2742..2765).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2749..2764).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2877..2892).1" Target="10077:[2742..2765).1" />
<Link Source="10077:[2877..2892).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2852..2986).1" Target="10077:[2664..2780).1" />
<Link Source="10077:[2852..2986).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).1" Target="10077:[2852..2986).1" />
<Link Source="10077:[2926..2971).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2926..2971).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2877..2892).1" />
<Link Source="10077:[2926..2971).2" Target="10076:[5470..5538).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[1230..1239).2" />
<Link Source="10077:[2926..2971).2" Target="10077:[1269..1290).2" />
<Link Source="10077:[2926..2971).2" Target="10077:[1332..1342).2" />
<Link Source="10077:[2926..2971).2" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).3" Target="10077:[2749..2764).1" />
<Link Source="10077:[34617..34644).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[34617..34644).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[34572..34731).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[34572..34731).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[34678..34716).1" Target="10077:[34617..34644).1" />
<Link Source="10077:[34678..34716).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[34685..34715).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[31025..31053).1" Target="10077:[34678..34716).1" />
<Link Source="10077:[31025..31053).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[30985..32417).1" Target="10077:[34572..34731).1" />
<Link Source="10077:[30985..32417).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[31087..31238).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[31087..31238).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[31087..31238).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).3" Target="10077:[31087..31238).1" />
<Link Source="10077:[31087..31238).3" Target="10077:[31087..31238).2" />
<Link Source="10077:[31087..31238).3" Target="10077:[2926..2971).2" />
<Link Source="10077:[31087..31238).3" Target="10077:[34685..34715).1" />
<Link Source="10077:[31258..31297).1" Target="10077:[39610..39829).1" />
<Link Source="10077:[31258..31297).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).2" Target="10077:[31490..32331).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).6" Target="10077:[30985..32417).1" />
<Link Source="10077:[31490..32331).6" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).6" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).7" Target="10077:[31025..31053).1" />
<Link Source="10077:[31490..32331).7" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).7" Target="10077:[34685..34715).1" />
<Link Source="10077:[31842..31894).1" Target="EXTERNAL" />
<Link Source="10077:[31842..31894).1" Target="10077:[31490..32331).2" />
<Link Source="10077:[32351..32402).1" Target="10077:[31025..31053).1" />
<Link Source="10077:[32351..32402).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[32351..32402).2" Target="10077:[31842..31894).1" />
<Link Source="10077:[32351..32402).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[32358..32401).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[32474..32502).1" Target="10077:[32351..32402).1" />
<Link Source="10077:[32474..32502).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32504..32523).1" Target="10077:[32351..32402).2" />
<Link Source="10077:[32504..32523).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32433..34556).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[32433..34556).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32557..32607).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[32557..32607).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32557..32607).2" Target="10077:[32504..32523).1" />
<Link Source="10077:[32557..32607).2" Target="10077:[32358..32401).1" />
<Link Source="10077:[32567..32606).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[44159..44180).2" Target="10077:[32557..32607).1" />
<Link Source="10077:[44159..44180).2" Target="10077:[32567..32606).1" />
<Link Source="10077:[44182..44197).2" Target="10077:[32557..32607).2" />
<Link Source="10077:[44182..44197).2" Target="10077:[32567..32606).1" />
<Link Source="10077:[44231..44317).9" Target="10077:[44182..44197).2" />
<Link Source="10077:[44231..44317).9" Target="10077:[32567..32606).1" />
<Link Source="10077:[44231..44317).11" Target="10077:[32567..32606).1" />
<Link Source="10077:[44335..44374).7" Target="10077:[32567..32606).1" />
<Link Source="10077:[44342..44373).2" Target="10077:[32567..32606).1" />
<Link Source="10076:[853..1034).2" Target="10077:[44335..44374).7" />
<Link Source="10076:[853..1034).2" Target="10077:[44342..44373).2" />
<Link Source="10077:[32557..32607).3" Target="10077:[44335..44374).7" />
<Link Source="10077:[32557..32607).3" Target="10077:[32358..32401).1" />
<Link Source="10077:[32627..32647).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32670..32681).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[2066..2158).3" Target="10077:[32433..34556).1" />
<Link Source="10077:[2066..2158).3" Target="10077:[32670..32681).1" />
<Link Source="10077:[2110..2139).3" Target="10077:[2066..2158).3" />
<Link Source="10077:[2110..2139).3" Target="10077:[31490..32331).6" />
<Link Source="10077:[2110..2139).3" Target="10077:[32670..32681).1" />
<Link Source="10077:[32665..34501).1" Target="10077:[2110..2139).3" />
<Link Source="10077:[32665..34501).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).2" Target="10077:[32557..32607).3" />
<Link Source="10077:[32665..34501).2" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).3" Target="10077:[32627..32647).1" />
<Link Source="10077:[32665..34501).3" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).2" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).3" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).1" />
<Link Source="10077:[32665..34501).4" Target="10077:[44159..44180).2" />
<Link Source="10077:[32665..34501).4" Target="10077:[44182..44197).2" />
<Link Source="10077:[32665..34501).4" Target="10077:[31490..32331).6" />
<Link Source="10077:[32665..34501).4" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).5" Target="10077:[32358..32401).1" />
<Link Source="10077:[33226..33266).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[33226..33266).1" Target="10077:[32665..34501).4" />
<Link Source="10077:[33241..33265).1" Target="10077:[32665..34501).4" />
<Link Source="10077:[2877..2892).2" Target="10077:[33226..33266).1" />
<Link Source="10077:[2877..2892).2" Target="10077:[33241..33265).1" />
<Link Source="10077:[39020..39048).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[39020..39048).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[38976..39245).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[38976..39245).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[39082..39230).1" Target="10077:[39020..39048).1" />
<Link Source="10077:[39082..39230).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[39170..39187).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[44823..44854).1" Target="10077:[39082..39230).1" />
<Link Source="10077:[44823..44854).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44800..46356).1" Target="10077:[38976..39245).1" />
<Link Source="10077:[44800..46356).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44888..44934).1" Target="10077:[44823..44854).1" />
<Link Source="10077:[44888..44934).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[44888..44934).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44954..44972).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44966..44971).1" Target="10077:[44954..44972).1" />
<Link Source="10077:[44966..44971).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44990..45616).1" Target="10077:[44823..44854).1" />
<Link Source="10077:[44990..45616).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[44990..45616).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44800..46356).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44990..45616).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44888..44934).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[45553..45597).1" Target="10077:[44800..46356).1" />
<Link Source="10077:[45553..45597).1" Target="10077:[44990..45616).1" />
<Link Source="10077:[45553..45597).1" Target="10077:[45331..45616).1" />
<Link Source="10077:[45553..45597).2" Target="10077:[45331..45616).1" />
<Link Source="10077:[45636..45660).1" Target="10077:[45553..45597).1" />
<Link Source="10077:[45636..45660).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[45678..46310).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[45636..45660).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[45678..46310).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[39170..39187).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[45636..45660).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[44823..44854).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[39170..39187).1" />
<Link Source="10077:[46088..46248).1" Target="10077:[45636..45660).1" />
<Link Source="10077:[46088..46248).1" Target="10077:[45678..46310).2" />
<Link Source="10077:[46088..46248).2" Target="EXTERNAL" />
<Link Source="10077:[46088..46248).2" Target="10077:[45678..46310).2" />
<Link Source="10077:[46272..46291).1" Target="10077:[45636..45660).1" />
<Link Source="10077:[46272..46291).1" Target="10077:[46088..46248).1" />
<Link Source="10077:[46272..46291).1" Target="10077:[45678..46310).2" />
<Link Source="10077:[46328..46341).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[39082..39230).3" Target="10077:[46328..46341).1" />
<Link Source="10077:[39082..39230).3" Target="10077:[33241..33265).1" />
<Link Source="10077:[39220..39228).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[2243..2331).1" Target="10077:[38976..39245).1" />
<Link Source="10077:[2243..2331).1" Target="10077:[39220..39228).1" />
<Link Source="10077:[2294..2311).1" Target="10077:[39220..39228).1" />
<Link Source="10076:[3592..3700).3" Target="10077:[2243..2331).1" />
<Link Source="10076:[3592..3700).3" Target="10077:[46272..46291).1" />
<Link Source="10076:[3592..3700).3" Target="10077:[2294..2311).1" />
<Link Source="10077:[2287..2312).1" Target="10076:[3592..3700).3" />
<Link Source="10077:[2287..2312).1" Target="10077:[39220..39228).1" />
<Link Source="10077:[39089..39229).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[39298..39335).2" Target="10077:[39082..39230).1" />
<Link Source="10077:[39298..39335).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39337..39349).2" Target="10077:[39082..39230).3" />
<Link Source="10077:[39337..39349).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39351..39364).2" Target="10077:[2287..2312).1" />
<Link Source="10077:[39351..39364).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39261..44091).2" Target="10077:[38976..39245).1" />
<Link Source="10077:[39261..44091).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39421..39431).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[1641..1732).2" Target="10077:[39261..44091).2" />
<Link Source="10077:[1641..1732).2" Target="10077:[39421..39431).2" />
<Link Source="10077:[1685..1713).2" Target="10077:[1641..1732).2" />
<Link Source="10077:[1685..1713).2" Target="10077:[46272..46291).1" />
<Link Source="10077:[1685..1713).2" Target="10077:[39421..39431).2" />
<Link Source="10077:[39398..39590).7" Target="10077:[1685..1713).2" />
<Link Source="10077:[39398..39590).7" Target="10077:[39089..39229).1" />
<Link Source="10077:[39398..39590).8" Target="10077:[39089..39229).1" />
<Link Source="10077:[39766..39774).2" Target="10077:[39351..39364).2" />
<Link Source="10077:[39766..39774).2" Target="10077:[39337..39349).2" />
<Link Source="10077:[44231..44317).17" Target="10077:[39766..39774).2" />
<Link Source="10077:[44231..44317).17" Target="10077:[39089..39229).1" />
<Link Source="10077:[44231..44317).19" Target="10077:[39089..39229).1" />
<Link Source="10077:[2110..2139).4" Target="10077:[39261..44091).2" />
<Link Source="10077:[2110..2139).4" Target="10077:[46272..46291).1" />
<Link Source="10077:[2110..2139).4" Target="10077:[39089..39229).1" />
<Link Source="10076:[1089..1109).1" Target="10077:[39766..39774).2" />
<Link Source="10076:[1089..1109).1" Target="10077:[39089..39229).1" />
<Link Source="10076:[1050..1225).1" Target="10077:[39766..39774).2" />
<Link Source="10076:[1050..1225).1" Target="10077:[39089..39229).1" />
<Link Source="10076:[1143..1210).1" Target="10076:[1050..1225).1" />
<Link Source="10076:[1143..1210).1" Target="10077:[39766..39774).2" />
<Link Source="10076:[1143..1210).1" Target="10076:[1089..1109).1" />
<Link Source="10076:[1143..1210).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[33290..34322).1" Target="10077:[32504..32523).1" />
<Link Source="10077:[33290..34322).1" Target="10077:[39766..39774).2" />
<Link Source="10077:[33290..34322).1" Target="10077:[32665..34501).4" />
<Link Source="10077:[33414..33451).1" Target="10077:[33290..34322).1" />
<Link Source="10346:[7369..7588).1" Target="10076:[1143..1210).1" />
<Link Source="10346:[7369..7588).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7405..7454).1" Target="10346:[7369..7588).1" />
<Link Source="10346:[7405..7454).1" Target="10076:[1143..1210).1" />
<Link Source="10346:[7405..7454).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7472..7573).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7472..7573).2" Target="10346:[7405..7454).1" />
<Link Source="10346:[7472..7573).2" Target="10346:[7472..7573).1" />
<Link Source="10346:[7472..7573).2" Target="10077:[33414..33451).1" />
<Link Source="10346:[7479..7503).1" Target="10346:[7472..7573).2" />
<Link Source="10346:[7479..7503).1" Target="10077:[33414..33451).1" />
<Link Source="10077:[33373..33481).1" Target="10346:[7479..7503).1" />
<Link Source="10077:[33373..33481).1" Target="10077:[33290..34322).1" />
<Link Source="10077:[33373..33481).2" Target="10077:[32474..32502).1" />
<Link Source="10077:[33373..33481).2" Target="10077:[33290..34322).1" />
<Link Source="10077:[33509..34299).1" Target="10077:[32504..32523).1" />
<Link Source="10077:[33509..34299).1" Target="EXTERNAL" />
<Link Source="10077:[33509..34299).1" Target="10077:[33290..34322).1" />
<Link Source="10077:[33969..34032).1" Target="10077:[33373..33481).1" />
<Link Source="10077:[33969..34032).1" Target="10077:[33509..34299).1" />
<Link Source="10077:[33969..34032).2" Target="10076:[1143..1210).1" />
<Link Source="10077:[33969..34032).2" Target="10077:[33509..34299).1" />
<Link Source="10077:[33969..34032).3" Target="10077:[33509..34299).1" />
<Link Source="10077:[33984..34031).1" Target="10077:[33509..34299).1" />
<Link Source="10346:[2571..2602).2" Target="10077:[33969..34032).1" />
<Link Source="10346:[2571..2602).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[2604..2615).2" Target="10077:[33969..34032).2" />
<Link Source="10346:[2604..2615).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[2617..2639).2" Target="10077:[33969..34032).3" />
<Link Source="10346:[2617..2639).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[2544..2854).3" Target="10077:[33969..34032).3" />
<Link Source="10346:[2544..2854).3" Target="10077:[33984..34031).1" />
<Link Source="10286:[1317..1350).9" Target="10077:[33984..34031).1" />
<Link Source="10286:[1317..1350).10" Target="10346:[2604..2615).2" />
<Link Source="10286:[1317..1350).10" Target="10286:[1317..1350).9" />
<Link Source="10286:[1317..1350).10" Target="10077:[33984..34031).1" />
<Link Source="10286:[1390..1400).3" Target="10346:[2604..2615).2" />
<Link Source="10286:[1390..1400).3" Target="10077:[33373..33481).1" />
<Link Source="10286:[1390..1400).3" Target="10346:[2544..2854).3" />
<Link Source="10286:[1390..1400).3" Target="10077:[33984..34031).1" />
<Link Source="10286:[1428..1444).3" Target="10346:[2604..2615).2" />
<Link Source="10286:[1428..1444).3" Target="10077:[33373..33481).1" />
<Link Source="10286:[1428..1444).3" Target="10346:[2544..2854).3" />
<Link Source="10286:[1428..1444).3" Target="10077:[33984..34031).1" />
<Link Source="10346:[858..868).3" Target="10346:[2544..2854).3" />
<Link Source="10346:[858..868).3" Target="10077:[33984..34031).1" />
<Link Source="10346:[2691..2750).6" Target="10077:[33984..34031).1" />
<Link Source="10346:[2691..2750).7" Target="10346:[2571..2602).2" />
<Link Source="10346:[2691..2750).7" Target="10346:[2691..2750).6" />
<Link Source="10346:[2691..2750).7" Target="10077:[33984..34031).1" />
<Link Source="10077:[34064..34272).1" Target="10077:[33509..34299).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[32474..32502).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[33373..33481).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[34064..34272).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[33509..34299).1" />
<Link Source="10077:[34346..34420).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[34346..34420).1" Target="10077:[33373..33481).1" />
<Link Source="10077:[34346..34420).1" Target="10077:[32665..34501).4" />
<Link Source="10077:[34361..34419).1" Target="10077:[32665..34501).4" />
<Link Source="10307:[3496..3521).1" Target="10077:[34346..34420).1" />
<Link Source="10307:[3496..3521).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3452..3756).1" Target="10077:[33969..34032).3" />
<Link Source="10307:[3452..3756).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).1" Target="10307:[3452..3756).1" />
<Link Source="10307:[3547..3745).1" Target="10286:[1390..1400).3" />
<Link Source="10307:[3547..3745).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).2" Target="EXTERNAL" />
<Link Source="10307:[3547..3745).2" Target="10077:[34361..34419).1" />
<Link Source="10307:[3555..3600).1" Target="10077:[34361..34419).1" />
<Link Source="10298:[471..492).15" Target="10307:[3547..3745).1" />
<Link Source="10298:[471..492).15" Target="10307:[3555..3600).1" />
<Link Source="10298:[494..511).15" Target="10307:[3547..3745).2" />
<Link Source="10298:[494..511).15" Target="10307:[3555..3600).1" />
<Link Source="10307:[3547..3745).4" Target="10307:[3496..3521).1" />
<Link Source="10307:[3547..3745).4" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).7" Target="10298:[471..492).15" />
<Link Source="10307:[3547..3745).7" Target="10307:[3547..3745).4" />
<Link Source="10307:[3547..3745).7" Target="10077:[34361..34419).1" />
<Link Source="10307:[3554..3645).1" Target="10307:[3547..3745).7" />
<Link Source="10307:[3554..3645).1" Target="10077:[34361..34419).1" />
<Link Source="10077:[34444..34455).1" Target="10077:[32665..34501).4" />
<Link Source="10077:[2110..2139).5" Target="10077:[34444..34455).1" />
<Link Source="10077:[2110..2139).5" Target="10307:[3547..3745).4" />
<Link Source="10077:[34444..34482).1" Target="10077:[2110..2139).5" />
<Link Source="10077:[34444..34482).1" Target="10077:[32665..34501).4" />
<Link Source="10077:[34444..34482).2" Target="10077:[32557..32607).3" />
<Link Source="10077:[34444..34482).2" Target="10077:[32665..34501).4" />
<Link Source="10077:[34444..34482).3" Target="10307:[3554..3645).1" />
<Link Source="10077:[34444..34482).3" Target="10077:[32665..34501).4" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).2" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).3" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).1" />
<Link Source="10077:[34444..34482).4" Target="10077:[44159..44180).2" />
<Link Source="10077:[34444..34482).4" Target="10077:[44182..44197).2" />
<Link Source="10077:[34444..34482).4" Target="10286:[1428..1444).3" />
<Link Source="10077:[34444..34482).4" Target="10286:[1390..1400).3" />
<Link Source="10077:[34444..34482).4" Target="10346:[2604..2615).2" />
<Link Source="10077:[34444..34482).4" Target="10346:[2544..2854).3" />
<Link Source="10077:[34444..34482).4" Target="10346:[2571..2602).2" />
<Link Source="10077:[34444..34482).4" Target="10346:[2617..2639).2" />
<Link Source="10077:[34444..34482).4" Target="10307:[3547..3745).4" />
<Link Source="10077:[34444..34482).4" Target="10077:[32665..34501).4" />
<Link Source="10077:[34444..34482).5" Target="10077:[32665..34501).4" />
<Link Source="10077:[34521..34541).1" Target="10307:[3554..3645).1" />
<Link Source="10077:[34521..34541).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[2926..2971).12" Target="10077:[2926..2971).2" />
<Link Source="10077:[2926..2971).12" Target="10077:[34521..34541).1" />
<Link Source="10077:[2926..2971).12" Target="10077:[34444..34482).4" />
<Link Source="10077:[2926..2971).12" Target="10077:[2749..2764).1" />
<Link Source="10076:[5678..5718).1" Target="10076:[5470..5538).1" />
<Link Source="10076:[5678..5718).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5678..5718).2" Target="10076:[5071..5759).1" />
<Link Source="10076:[5678..5718).2" Target="10077:[2926..2971).12" />
<Link Source="10076:[5678..5718).2" Target="10076:[5678..5718).1" />
<Link Source="10076:[5678..5718).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5734..5748).1" Target="10077:[2926..2971).12" />
<Link Source="10076:[5734..5748).1" Target="10076:[4989..5047).1" />
<Link Source="25002:[4395..4432).29" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).29" Target="10076:[5734..5748).1" />
<Link Source="25002:[4395..4432).29" Target="10076:[5678..5718).2" />
<Link Source="25002:[4395..4432).29" Target="28001:[21850..21895).1" />
<Link Source="10076:[5223..5250).6" Target="25002:[4395..4432).29" />
<Link Source="10076:[5223..5250).6" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).6" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).6" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).6" Target="25002:[4395..4432).29" />
<Link Source="10076:[5277..5448).6" Target="10076:[4989..5047).1" />
<Link Source="10076:[5391..5433).1" Target="10076:[5174..5197).1" />
<Link Source="10076:[5391..5433).1" Target="10076:[5277..5448).6" />
<Link Source="10076:[5391..5433).2" Target="10076:[5277..5448).6" />
<Link Source="10077:[4637..4671).1" Target="10076:[5391..5433).1" />
<Link Source="10077:[4637..4671).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4591..7075).1" Target="10076:[5391..5433).1" />
<Link Source="10077:[4591..7075).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4705..4866).1" Target="10077:[4591..7075).1" />
<Link Source="10077:[4705..4866).1" Target="10076:[5391..5433).1" />
<Link Source="10077:[4705..4866).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4705..4866).2" Target="10077:[4637..4671).1" />
<Link Source="10077:[4705..4866).2" Target="10077:[2926..2971).3" />
<Link Source="10077:[4705..4866).3" Target="10077:[4705..4866).1" />
<Link Source="10077:[4705..4866).3" Target="10077:[4705..4866).2" />
<Link Source="10077:[4705..4866).3" Target="10076:[5391..5433).1" />
<Link Source="10077:[4705..4866).3" Target="10077:[2926..2971).3" />
<Link Source="10077:[4886..4902).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4920..5555).1" Target="10077:[4591..7075).1" />
<Link Source="10077:[4920..5555).1" Target="10077:[4705..4866).3" />
<Link Source="10077:[4920..5555).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4920..5555).2" Target="10077:[4637..4671).1" />
<Link Source="10077:[4920..5555).2" Target="10077:[2926..2971).3" />
<Link Source="10077:[5083..5555).1" Target="10077:[4591..7075).1" />
<Link Source="10077:[5083..5555).1" Target="10077:[4920..5555).1" />
<Link Source="10077:[5083..5555).2" Target="10077:[4637..4671).1" />
<Link Source="10077:[5083..5555).2" Target="10077:[4920..5555).1" />
<Link Source="10077:[5511..5536).1" Target="10077:[39766..39774).2" />
<Link Source="10077:[5511..5536).1" Target="10077:[5083..5555).1" />
<Link Source="10077:[5575..5625).1" Target="10077:[4637..4671).1" />
<Link Source="10077:[5575..5625).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[5575..5625).2" Target="10077:[5511..5536).1" />
<Link Source="10077:[5575..5625).2" Target="10077:[2926..2971).3" />
<Link Source="10077:[5585..5624).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[44159..44180).4" Target="10077:[5575..5625).1" />
<Link Source="10077:[44159..44180).4" Target="10077:[5585..5624).1" />
<Link Source="10077:[44182..44197).4" Target="10077:[5575..5625).2" />
<Link Source="10077:[44182..44197).4" Target="10077:[5585..5624).1" />
<Link Source="10077:[44231..44317).25" Target="10077:[44182..44197).4" />
<Link Source="10077:[44231..44317).25" Target="10077:[5585..5624).1" />
<Link Source="10077:[44231..44317).27" Target="10077:[5585..5624).1" />
<Link Source="10077:[44335..44374).15" Target="10077:[5585..5624).1" />
<Link Source="10077:[44342..44373).4" Target="10077:[5585..5624).1" />
<Link Source="10076:[853..1034).4" Target="10077:[44335..44374).15" />
<Link Source="10076:[853..1034).4" Target="10077:[44342..44373).4" />
<Link Source="10077:[5575..5625).3" Target="10077:[44335..44374).15" />
<Link Source="10077:[5575..5625).3" Target="10077:[2926..2971).3" />
<Link Source="10077:[5645..5665).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[5688..5699).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2066..2158).6" Target="10077:[4591..7075).1" />
<Link Source="10077:[2066..2158).6" Target="10077:[5688..5699).1" />
<Link Source="10077:[2110..2139).6" Target="10077:[2066..2158).6" />
<Link Source="10077:[2110..2139).6" Target="10077:[5083..5555).1" />
<Link Source="10077:[2110..2139).6" Target="10077:[5688..5699).1" />
<Link Source="10077:[5683..7020).1" Target="10077:[2110..2139).6" />
<Link Source="10077:[5683..7020).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[5683..7020).2" Target="10077:[5575..5625).3" />
<Link Source="10077:[5683..7020).2" Target="10077:[2926..2971).3" />
<Link Source="10077:[5683..7020).3" Target="10077:[5645..5665).1" />
<Link Source="10077:[5683..7020).3" Target="10077:[2926..2971).3" />
<Link Source="10077:[5683..7020).4" Target="10077:[5683..7020).2" />
<Link Source="10077:[5683..7020).4" Target="10077:[5683..7020).3" />
<Link Source="10077:[5683..7020).4" Target="10077:[5683..7020).1" />
<Link Source="10077:[5683..7020).4" Target="10077:[44159..44180).4" />
<Link Source="10077:[5683..7020).4" Target="10077:[44182..44197).4" />
<Link Source="10077:[5683..7020).4" Target="10077:[5083..5555).1" />
<Link Source="10077:[5683..7020).4" Target="10077:[2926..2971).3" />
<Link Source="10077:[5683..7020).5" Target="10077:[2926..2971).3" />
<Link Source="10077:[5776..5836).1" Target="10077:[4637..4671).1" />
<Link Source="10077:[5776..5836).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[5858..6188).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[5858..6188).2" Target="10077:[5776..5836).1" />
<Link Source="10077:[5858..6188).2" Target="10077:[5858..6188).1" />
<Link Source="10077:[5858..6188).2" Target="10077:[5683..7020).4" />
<Link Source="10077:[5930..6023).1" Target="10077:[5776..5836).1" />
<Link Source="10077:[5930..6023).1" Target="10077:[5858..6188).2" />
<Link Source="10077:[5930..6023).2" Target="EXTERNAL" />
<Link Source="10077:[5930..6023).2" Target="10077:[5858..6188).2" />
<Link Source="10077:[5945..6022).1" Target="10077:[5858..6188).2" />
<Link Source="10077:[32474..32502).2" Target="10077:[5930..6023).1" />
<Link Source="10077:[32474..32502).2" Target="10077:[5945..6022).1" />
<Link Source="10077:[32504..32523).2" Target="10077:[5930..6023).2" />
<Link Source="10077:[32504..32523).2" Target="10077:[5945..6022).1" />
<Link Source="10077:[44231..44317).33" Target="10077:[32504..32523).2" />
<Link Source="10077:[44231..44317).33" Target="10077:[5945..6022).1" />
<Link Source="10077:[44231..44317).35" Target="10077:[5945..6022).1" />
<Link Source="10077:[6212..6251).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6275..6566).1" Target="10077:[5511..5536).1" />
<Link Source="10077:[6275..6566).1" Target="10077:[39766..39774).2" />
<Link Source="10077:[6275..6566).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6590..6839).1" Target="10077:[5511..5536).1" />
<Link Source="10077:[6590..6839).1" Target="EXTERNAL" />
<Link Source="10077:[6590..6839).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6863..6941).1" Target="10077:[4637..4671).1" />
<Link Source="10077:[6863..6941).1" Target="10077:[32474..32502).2" />
<Link Source="10077:[6863..6941).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6878..6940).1" Target="10077:[5683..7020).4" />
<Link Source="10307:[3496..3521).2" Target="10077:[6863..6941).1" />
<Link Source="10307:[3496..3521).2" Target="10077:[6878..6940).1" />
<Link Source="10307:[3452..3756).2" Target="10077:[32474..32502).2" />
<Link Source="10307:[3452..3756).2" Target="10077:[6878..6940).1" />
<Link Source="10077:[6963..6974).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[2110..2139).8" Target="10077:[6963..6974).1" />
<Link Source="10077:[2110..2139).8" Target="10307:[3496..3521).2" />
<Link Source="10077:[6963..7001).1" Target="10077:[2110..2139).8" />
<Link Source="10077:[6963..7001).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6963..7001).2" Target="10077:[5575..5625).3" />
<Link Source="10077:[6963..7001).2" Target="10077:[5683..7020).4" />
<Link Source="10077:[6963..7001).3" Target="10307:[3496..3521).2" />
<Link Source="10077:[6963..7001).3" Target="10077:[5683..7020).4" />
<Link Source="10077:[6963..7001).5" Target="10077:[5683..7020).4" />
<Link Source="10077:[7040..7060).1" Target="10307:[3496..3521).2" />
<Link Source="10077:[7040..7060).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2926..2971).19" Target="10076:[5391..5433).1" />
<Link Source="10077:[2926..2971).19" Target="10077:[7040..7060).1" />
<Link Source="10077:[2926..2971).19" Target="10077:[6963..7001).1" />
<Link Source="10077:[2926..2971).19" Target="10077:[2749..2764).1" />
<Link Source="10307:[3228..3245).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3228..3245).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3247..3264).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3247..3264).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3165..3440).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3165..3440).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3290..3331).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3290..3331).2" Target="10307:[3247..3264).1" />
<Link Source="10307:[3290..3331).2" Target="10307:[3290..3331).1" />
<Link Source="10307:[3290..3331).2" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).1" Target="10307:[3165..3440).1" />
<Link Source="10307:[3345..3429).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).2" Target="10307:[3165..3440).1" />
<Link Source="10307:[3345..3429).2" Target="10077:[2926..2971).19" />
<Link Source="10307:[3345..3429).2" Target="10307:[3228..3245).1" />
<Link Source="10307:[3345..3429).2" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).4" Target="10307:[3247..3264).1" />
<Link Source="10307:[3345..3429).4" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).5" Target="25002:[4395..4432).1" />
<Link Source="10307:[3352..3428).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[1072..1083).1" Target="10307:[3345..3429).1" />
<Link Source="10307:[1072..1083).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1085..1102).1" Target="10307:[3345..3429).2" />
<Link Source="10307:[1085..1102).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1104..1135).1" Target="10307:[3345..3429).4" />
<Link Source="10307:[1104..1135).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1028..1341).1" Target="10307:[3345..3429).5" />
<Link Source="10307:[1028..1341).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1161..1165).1" Target="10307:[1072..1083).1" />
<Link Source="10307:[1161..1165).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1167..1172).1" Target="10307:[1085..1102).1" />
<Link Source="10307:[1167..1172).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1028..1341).2" Target="10307:[3352..3428).1" />
<Link Source="10286:[1549..1560).2" Target="10307:[1161..1165).1" />
<Link Source="10286:[1549..1560).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1562..1579).2" Target="10307:[1167..1172).1" />
<Link Source="10286:[1562..1579).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1532..2083).2" Target="10307:[1028..1341).1" />
<Link Source="10286:[1532..2083).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[726..773).6" Target="10286:[1532..2083).2" />
<Link Source="10286:[726..773).6" Target="10307:[1028..1341).2" />
<Link Source="10286:[815..820).6" Target="10286:[1532..2083).2" />
<Link Source="10286:[815..820).6" Target="10307:[1028..1341).2" />
<Link Source="10286:[2975..3015).6" Target="10286:[1532..2083).2" />
<Link Source="10286:[2975..3015).6" Target="10307:[1028..1341).2" />
<Link Source="10286:[17802..17818).6" Target="10286:[1532..2083).2" />
<Link Source="10286:[17802..17818).6" Target="10307:[1028..1341).2" />
<Link Source="10286:[18200..18223).6" Target="10286:[1532..2083).2" />
<Link Source="10286:[18200..18223).6" Target="10307:[1028..1341).2" />
<Link Source="10286:[1605..1638).5" Target="10307:[1028..1341).2" />
<Link Source="10286:[1605..1638).6" Target="10286:[1549..1560).2" />
<Link Source="10286:[1605..1638).6" Target="10286:[1605..1638).5" />
<Link Source="10286:[1605..1638).6" Target="10307:[1028..1341).2" />
<Link Source="10286:[1688..1781).7" Target="10286:[1562..1579).2" />
<Link Source="10286:[1688..1781).7" Target="10307:[1028..1341).2" />
<Link Source="10286:[1688..1781).8" Target="EXTERNAL" />
<Link Source="10286:[1688..1781).8" Target="10307:[1028..1341).2" />
<Link Source="10286:[1708..1779).2" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).17" Target="10286:[1688..1781).7" />
<Link Source="10298:[471..492).17" Target="10286:[1708..1779).2" />
<Link Source="10298:[494..511).17" Target="10286:[1688..1781).8" />
<Link Source="10298:[494..511).17" Target="10286:[1708..1779).2" />
<Link Source="10286:[1820..1963).7" Target="10286:[1562..1579).2" />
<Link Source="10286:[1820..1963).7" Target="10307:[1028..1341).2" />
<Link Source="10286:[1820..1963).8" Target="EXTERNAL" />
<Link Source="10286:[1820..1963).8" Target="10307:[1028..1341).2" />
<Link Source="10286:[1840..1888).2" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).18" Target="10286:[1820..1963).7" />
<Link Source="10298:[471..492).18" Target="10286:[1840..1888).2" />
<Link Source="10298:[494..511).18" Target="10286:[1820..1963).8" />
<Link Source="10298:[494..511).18" Target="10286:[1840..1888).2" />
<Link Source="10286:[1977..1981).2" Target="10286:[1549..1560).2" />
<Link Source="10286:[1977..1981).2" Target="10286:[1532..2083).2" />
<Link Source="10286:[1977..1981).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[2036..2052).2" Target="10286:[1549..1560).2" />
<Link Source="10286:[2036..2052).2" Target="10077:[2926..2971).19" />
<Link Source="10286:[2036..2052).2" Target="10286:[1532..2083).2" />
<Link Source="10286:[2036..2052).2" Target="10307:[1028..1341).2" />
<Link Source="10307:[683..708).1" Target="10307:[1028..1341).1" />
<Link Source="10307:[683..708).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1206..1253).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[1104..1135).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[1206..1253).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[3352..3428).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[1104..1135).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[1028..1341).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[3352..3428).1" />
<Link Source="25002:[4395..4432).35" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).35" Target="10307:[3345..3429).5" />
<Link Source="25002:[4395..4432).35" Target="10077:[2926..2971).19" />
<Link Source="25002:[4395..4432).35" Target="10286:[2036..2052).2" />
<Link Source="25002:[4395..4432).35" Target="10286:[1562..1579).2" />
<Link Source="25002:[4395..4432).35" Target="10286:[1977..1981).2" />
<Link Source="25002:[4395..4432).35" Target="10286:[17802..17818).6" />
<Link Source="25002:[4395..4432).35" Target="10286:[18200..18223).6" />
<Link Source="25002:[4395..4432).35" Target="10307:[1273..1298).1" />
<Link Source="25002:[4395..4432).35" Target="28001:[21850..21895).1" />
<Link Source="10319:[13685..13708).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13685..13708).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13710..13735).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13710..13735).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13737..13783).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13737..13783).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13785..13824).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13785..13824).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13647..14061).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13647..14061).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).1" Target="10319:[13685..13708).1" />
<Link Source="10319:[13850..13948).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).2" Target="10319:[13710..13735).1" />
<Link Source="10319:[13850..13948).2" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).3" Target="10319:[13737..13783).1" />
<Link Source="10319:[13850..13948).3" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).4" Target="10319:[13785..13824).1" />
<Link Source="10319:[13850..13948).4" Target="25002:[4395..4432).1" />
<Link Source="10319:[13863..13947).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[14931..14954).1" Target="10319:[13850..13948).1" />
<Link Source="10319:[14931..14954).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14956..14981).1" Target="10319:[13850..13948).2" />
<Link Source="10319:[14956..14981).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14983..15029).1" Target="10319:[13850..13948).3" />
<Link Source="10319:[14983..15029).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15031..15070).1" Target="10319:[13850..13948).4" />
<Link Source="10319:[15031..15070).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14862..16302).1" Target="10319:[13647..14061).1" />
<Link Source="10319:[14862..16302).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15096..15130).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[14956..14981).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[15096..15130).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).1" Target="10319:[14931..14954).1" />
<Link Source="10319:[15146..15291).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).2" Target="10319:[14956..14981).1" />
<Link Source="10319:[15146..15291).2" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).3" Target="10319:[14983..15029).1" />
<Link Source="10319:[15146..15291).3" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).4" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).5" Target="10319:[14983..15029).1" />
<Link Source="10319:[15146..15291).5" Target="10319:[15146..15291).4" />
<Link Source="10319:[15146..15291).5" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).6" Target="10319:[15146..15291).5" />
<Link Source="10319:[15146..15291).6" Target="10319:[15031..15070).1" />
<Link Source="10319:[15146..15291).6" Target="10319:[13863..13947).1" />
<Link Source="10319:[15159..15290).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[20002..20025).2" Target="10319:[15146..15291).1" />
<Link Source="10319:[20002..20025).2" Target="10319:[15159..15290).1" />
<Link Source="10319:[20027..20052).2" Target="10319:[15146..15291).2" />
<Link Source="10319:[20027..20052).2" Target="10319:[15159..15290).1" />
<Link Source="10319:[20054..20093).2" Target="10319:[15146..15291).3" />
<Link Source="10319:[20054..20093).2" Target="10319:[15159..15290).1" />
<Link Source="10319:[20095..20126).2" Target="10319:[15146..15291).6" />
<Link Source="10319:[20095..20126).2" Target="10319:[15159..15290).1" />
<Link Source="10319:[19916..30085).2" Target="10319:[14862..16302).1" />
<Link Source="10319:[19916..30085).2" Target="10319:[15159..15290).1" />
<Link Source="10319:[20152..24647).3" Target="10319:[20002..20025).2" />
<Link Source="10319:[20152..24647).3" Target="25002:[4395..4432).35" />
<Link Source="10319:[20152..24647).3" Target="10319:[15159..15290).1" />
<Link Source="10319:[20508..20675).10" Target="10319:[20027..20052).2" />
<Link Source="10319:[20508..20675).10" Target="10319:[20152..24647).3" />
<Link Source="10319:[20508..20675).11" Target="10319:[20054..20093).2" />
<Link Source="10319:[20508..20675).11" Target="10319:[20152..24647).3" />
<Link Source="10319:[20508..20675).12" Target="10319:[20095..20126).2" />
<Link Source="10319:[20508..20675).12" Target="10319:[20152..24647).3" />
<Link Source="10319:[41929..41968).2" Target="10319:[20508..20675).11" />
<Link Source="10319:[41929..41968).2" Target="10319:[20152..24647).3" />
<Link Source="10319:[41732..45579).2" Target="10319:[19916..30085).2" />
<Link Source="10319:[41732..45579).2" Target="10319:[20152..24647).3" />
<Link Source="10319:[42478..42805).4" Target="10319:[20152..24647).3" />
<Link Source="10319:[42821..42938).9" Target="10319:[20152..24647).3" />
<Link Source="10319:[42821..42938).14" Target="10319:[20508..20675).10" />
<Link Source="10319:[42821..42938).14" Target="10319:[20152..24647).3" />
<Link Source="10319:[42839..42937).2" Target="10319:[20152..24647).3" />
<Link Source="10319:[63849..63870).2" Target="10319:[42821..42938).9" />
<Link Source="10319:[63849..63870).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63885..63919).2" Target="10319:[42821..42938).9" />
<Link Source="10319:[63885..63919).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63934..63945).2" Target="10319:[42821..42938).9" />
<Link Source="10319:[63934..63945).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63960..63969).2" Target="10319:[42821..42938).9" />
<Link Source="10319:[63960..63969).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63984..64009).2" Target="10319:[42821..42938).14" />
<Link Source="10319:[63984..64009).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63768..64484).2" Target="10319:[41732..45579).2" />
<Link Source="10319:[63768..64484).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[64035..64445).5" Target="10319:[42839..42937).2" />
<Link Source="10319:[64035..64445).6" Target="10319:[63885..63919).2" />
<Link Source="10319:[64035..64445).6" Target="10319:[64035..64445).5" />
<Link Source="10319:[64035..64445).6" Target="10319:[42839..42937).2" />
<Link Source="10319:[64461..64473).3" Target="10319:[42839..42937).2" />
<Link Source="10319:[42821..42938).15" Target="10319:[64461..64473).3" />
<Link Source="10319:[42821..42938).15" Target="10319:[20152..24647).3" />
<Link Source="10319:[42952..43079).4" Target="10319:[20152..24647).3" />
<Link Source="10319:[42952..43079).5" Target="10319:[42821..42938).15" />
<Link Source="10319:[42952..43079).5" Target="10319:[42952..43079).4" />
<Link Source="10319:[42952..43079).5" Target="10319:[20152..24647).3" />
<Link Source="10354:[11312..11328).2" Target="10319:[20152..24647).3" />
<Link Source="10354:[3684..3818).6" Target="10319:[20152..24647).3" />
<Link Source="10354:[3684..3818).6" Target="10354:[11312..11328).2" />
<Link Source="10354:[3720..3803).37" Target="10354:[3684..3818).6" />
<Link Source="10354:[3720..3803).37" Target="10319:[20152..24647).3" />
<Link Source="10354:[3720..3803).37" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).37" Target="10354:[11312..11328).2" />
<Link Source="10354:[3720..3803).38" Target="10354:[11312..11328).2" />
<Link Source="10354:[3720..3803).39" Target="10354:[3684..3818).6" />
<Link Source="10354:[3720..3803).39" Target="10319:[20152..24647).3" />
<Link Source="10354:[3720..3803).39" Target="10354:[3720..3803).38" />
<Link Source="10354:[3720..3803).39" Target="10354:[11312..11328).2" />
<Link Source="10354:[11299..11330).4" Target="10354:[3720..3803).37" />
<Link Source="10354:[11299..11330).4" Target="10319:[20152..24647).3" />
<Link Source="10319:[50330..50355).2" Target="10319:[20152..24647).3" />
<Link Source="10312:[1108..1117).2" Target="10319:[20152..24647).3" />
<Link Source="10312:[1132..1171).2" Target="10319:[41929..41968).2" />
<Link Source="10312:[1132..1171).2" Target="10319:[20152..24647).3" />
<Link Source="10312:[1222..1235).2" Target="10319:[20152..24647).3" />
<Link Source="10312:[5830..5839).2" Target="10312:[1108..1117).2" />
<Link Source="10312:[5830..5839).2" Target="10319:[20152..24647).3" />
<Link Source="10312:[5854..5893).2" Target="10312:[1132..1171).2" />
<Link Source="10312:[5854..5893).2" Target="10319:[20152..24647).3" />
<Link Source="10312:[5944..5957).2" Target="10312:[1222..1235).2" />
<Link Source="10312:[5944..5957).2" Target="10319:[20152..24647).3" />
<Link Source="10312:[3730..3739).2" Target="10312:[5830..5839).2" />
<Link Source="10312:[3730..3739).2" Target="10319:[20152..24647).3" />
<Link Source="10312:[3741..3780).2" Target="10312:[5854..5893).2" />
<Link Source="10312:[3741..3780).2" Target="10319:[20152..24647).3" />
<Link Source="10312:[3805..3818).2" Target="10312:[5944..5957).2" />
<Link Source="10312:[3805..3818).2" Target="10319:[20152..24647).3" />
<Link Source="10312:[3905..3919).2" Target="10319:[20152..24647).3" />
<Link Source="10354:[3684..3818).7" Target="10319:[20152..24647).3" />
<Link Source="10354:[3684..3818).7" Target="10312:[3905..3919).2" />
<Link Source="10354:[3720..3803).45" Target="10354:[3684..3818).7" />
<Link Source="10354:[3720..3803).45" Target="10319:[20152..24647).3" />
<Link Source="10354:[3720..3803).45" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).45" Target="10312:[3905..3919).2" />
<Link Source="10354:[3720..3803).46" Target="10312:[3905..3919).2" />
<Link Source="10354:[3720..3803).47" Target="10354:[3684..3818).7" />
<Link Source="10354:[3720..3803).47" Target="10319:[20152..24647).3" />
<Link Source="10354:[3720..3803).47" Target="10354:[3720..3803).46" />
<Link Source="10354:[3720..3803).47" Target="10312:[3905..3919).2" />
<Link Source="10312:[3892..3921).4" Target="10354:[3720..3803).45" />
<Link Source="10312:[3892..3921).4" Target="10319:[20152..24647).3" />
<Link Source="10312:[3935..3968).5" Target="10312:[5830..5839).2" />
<Link Source="10312:[3935..3968).5" Target="10319:[20152..24647).3" />
<Link Source="10312:[3948..3966).2" Target="10319:[20152..24647).3" />
<Link Source="10353:[4698..4724).3" Target="10312:[3935..3968).5" />
<Link Source="10353:[4698..4724).3" Target="10312:[3948..3966).2" />
<Link Source="10353:[4750..4847).5" Target="10353:[4698..4724).3" />
<Link Source="10353:[4750..4847).5" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).5" Target="10312:[3948..3966).2" />
<Link Source="10353:[4863..5000).9" Target="10353:[4698..4724).3" />
<Link Source="10353:[4863..5000).9" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).9" Target="10312:[3948..3966).2" />
<Link Source="10353:[4863..5000).10" Target="10312:[3948..3966).2" />
<Link Source="10353:[5079..5183).5" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).5" Target="10312:[3948..3966).2" />
<Link Source="10353:[5197..5323).7" Target="10353:[4698..4724).3" />
<Link Source="10353:[5197..5323).7" Target="10353:[5079..5183).5" />
<Link Source="10353:[5197..5323).7" Target="10312:[3948..3966).2" />
<Link Source="10353:[5485..5759).13" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).13" Target="10312:[3948..3966).2" />
<Link Source="10353:[5485..5759).14" Target="10353:[4698..4724).3" />
<Link Source="10353:[5485..5759).14" Target="10353:[5485..5759).13" />
<Link Source="10353:[5485..5759).14" Target="10312:[3948..3966).2" />
<Link Source="10353:[5485..5759).15" Target="10312:[3948..3966).2" />
<Link Source="10353:[5775..5979).9" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).9" Target="10312:[3948..3966).2" />
<Link Source="10353:[5775..5979).11" Target="10353:[4698..4724).3" />
<Link Source="10353:[5775..5979).11" Target="10353:[5775..5979).9" />
<Link Source="10353:[5775..5979).11" Target="10312:[3948..3966).2" />
<Link Source="10353:[5995..6029).7" Target="10353:[5775..5979).11" />
<Link Source="10353:[5995..6029).7" Target="10312:[3948..3966).2" />
<Link Source="10353:[6002..6028).3" Target="10312:[3948..3966).2" />
<Link Source="10353:[6343..6358).3" Target="10353:[5995..6029).7" />
<Link Source="10353:[6343..6358).3" Target="10353:[6002..6028).3" />
<Link Source="10353:[6384..6410).13" Target="10353:[6002..6028).3" />
<Link Source="10353:[6384..6410).14" Target="10353:[6343..6358).3" />
<Link Source="10353:[6384..6410).14" Target="10353:[6384..6410).13" />
<Link Source="10353:[6384..6410).14" Target="10353:[6002..6028).3" />
<Link Source="10312:[4534..4658).21" Target="10312:[3730..3739).2" />
<Link Source="10312:[4534..4658).21" Target="10319:[41732..45579).2" />
<Link Source="10312:[4534..4658).22" Target="10312:[3741..3780).2" />
<Link Source="10312:[4534..4658).22" Target="10319:[41732..45579).2" />
<Link Source="10312:[4534..4658).23" Target="10312:[5830..5839).2" />
<Link Source="10312:[4534..4658).23" Target="10319:[41732..45579).2" />
<Link Source="10312:[4534..4658).25" Target="10312:[3805..3818).2" />
<Link Source="10312:[4534..4658).25" Target="10319:[41732..45579).2" />
<Link Source="10312:[5188..5207).2" Target="10319:[41732..45579).2" />
<Link Source="10312:[5209..5220).2" Target="10319:[41732..45579).2" />
<Link Source="10312:[5222..5231).2" Target="10312:[4534..4658).21" />
<Link Source="10312:[5222..5231).2" Target="10319:[41732..45579).2" />
<Link Source="10312:[5233..5272).2" Target="10312:[4534..4658).22" />
<Link Source="10312:[5233..5272).2" Target="10319:[41732..45579).2" />
<Link Source="10312:[5274..5295).2" Target="10312:[4534..4658).23" />
<Link Source="10312:[5274..5295).2" Target="10319:[41732..45579).2" />
<Link Source="10312:[5297..5318).2" Target="10319:[41732..45579).2" />
<Link Source="10312:[5320..5333).2" Target="10312:[4534..4658).25" />
<Link Source="10312:[5320..5333).2" Target="10319:[41732..45579).2" />
<Link Source="10312:[5124..5404).2" Target="10319:[41732..45579).2" />
<Link Source="10312:[4685..4699).3" Target="10319:[41732..45579).2" />
<Link Source="10354:[3684..3818).8" Target="10319:[20152..24647).3" />
<Link Source="10354:[3684..3818).8" Target="10312:[4685..4699).3" />
<Link Source="10354:[3720..3803).53" Target="10354:[3684..3818).8" />
<Link Source="10354:[3720..3803).53" Target="10319:[20152..24647).3" />
<Link Source="10354:[3720..3803).53" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).53" Target="10312:[4685..4699).3" />
<Link Source="10354:[3720..3803).54" Target="10312:[4685..4699).3" />
<Link Source="10354:[3720..3803).55" Target="10354:[3684..3818).8" />
<Link Source="10354:[3720..3803).55" Target="10319:[20152..24647).3" />
<Link Source="10354:[3720..3803).55" Target="10354:[3720..3803).54" />
<Link Source="10354:[3720..3803).55" Target="10312:[4685..4699).3" />
<Link Source="10312:[4680..4787).5" Target="10354:[3720..3803).53" />
<Link Source="10312:[4680..4787).5" Target="10319:[41732..45579).2" />
<Link Source="10312:[4826..5058).11" Target="10312:[5830..5839).2" />
<Link Source="10312:[4826..5058).11" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).11" Target="10319:[41732..45579).2" />
<Link Source="10312:[4826..5058).12" Target="10319:[41732..45579).2" />
<Link Source="10346:[10663..10672).2" Target="10312:[4534..4658).21" />
<Link Source="10346:[10663..10672).2" Target="10319:[41732..45579).2" />
<Link Source="10346:[10674..10713).2" Target="10312:[4534..4658).22" />
<Link Source="10346:[10674..10713).2" Target="10319:[41732..45579).2" />
<Link Source="10346:[10761..10774).2" Target="10312:[4534..4658).25" />
<Link Source="10346:[10761..10774).2" Target="10319:[41732..45579).2" />
<Link Source="10346:[10861..10875).2" Target="10319:[41732..45579).2" />
<Link Source="10354:[3684..3818).9" Target="10319:[41732..45579).2" />
<Link Source="10354:[3684..3818).9" Target="10346:[10861..10875).2" />
<Link Source="10354:[3720..3803).61" Target="10354:[3684..3818).9" />
<Link Source="10354:[3720..3803).61" Target="10319:[20152..24647).3" />
<Link Source="10354:[3720..3803).61" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).61" Target="10346:[10861..10875).2" />
<Link Source="10354:[3720..3803).62" Target="10346:[10861..10875).2" />
<Link Source="10354:[3720..3803).63" Target="10354:[3684..3818).9" />
<Link Source="10354:[3720..3803).63" Target="10319:[20152..24647).3" />
<Link Source="10354:[3720..3803).63" Target="10354:[3720..3803).62" />
<Link Source="10354:[3720..3803).63" Target="10346:[10861..10875).2" />
<Link Source="10346:[10848..10877).4" Target="10354:[3720..3803).61" />
<Link Source="10346:[10848..10877).4" Target="10319:[41732..45579).2" />
<Link Source="10346:[10897..10914).2" Target="10319:[41732..45579).2" />
<Link Source="10346:[7666..7775).2" Target="10319:[41732..45579).2" />
<Link Source="10346:[7666..7775).2" Target="10346:[10897..10914).2" />
<Link Source="10346:[7672..7773).4" Target="10346:[7666..7775).2" />
<Link Source="10346:[7672..7773).4" Target="10319:[20152..24647).3" />
<Link Source="10346:[7672..7773).4" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).4" Target="10346:[10897..10914).2" />
<Link Source="10346:[10893..11127).3" Target="10346:[7672..7773).4" />
<Link Source="10346:[10893..11127).3" Target="10319:[41732..45579).2" />
<Link Source="10346:[3525..3638).17" Target="10319:[41732..45579).2" />
<Link Source="10346:[11369..11508).15" Target="10346:[10674..10713).2" />
<Link Source="10346:[11369..11508).15" Target="10312:[4534..4658).23" />
<Link Source="10346:[11369..11508).18" Target="10346:[10761..10774).2" />
<Link Source="10346:[11369..11508).18" Target="10312:[4534..4658).23" />
<Link Source="10312:[7718..7727).2" Target="10346:[10663..10672).2" />
<Link Source="10312:[7718..7727).2" Target="10312:[4534..4658).23" />
<Link Source="10312:[7729..7768).2" Target="10346:[11369..11508).15" />
<Link Source="10312:[7729..7768).2" Target="10312:[4534..4658).23" />
<Link Source="10312:[7816..7829).2" Target="10346:[11369..11508).18" />
<Link Source="10312:[7816..7829).2" Target="10312:[4534..4658).23" />
<Link Source="10312:[7615..8420).2" Target="10319:[41732..45579).2" />
<Link Source="10312:[7615..8420).2" Target="10312:[4534..4658).23" />
<Link Source="10312:[7903..7936).5" Target="10312:[4534..4658).23" />
<Link Source="10312:[7916..7934).2" Target="10312:[4534..4658).23" />
<Link Source="10353:[4698..4724).4" Target="10312:[7903..7936).5" />
<Link Source="10353:[4698..4724).4" Target="10312:[7916..7934).2" />
<Link Source="10353:[4750..4847).7" Target="10353:[4698..4724).4" />
<Link Source="10353:[4750..4847).7" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).7" Target="10312:[7916..7934).2" />
<Link Source="10353:[4863..5000).13" Target="10353:[4698..4724).4" />
<Link Source="10353:[4863..5000).13" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).13" Target="10312:[7916..7934).2" />
<Link Source="10353:[4863..5000).14" Target="10312:[7916..7934).2" />
<Link Source="10353:[5079..5183).7" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).7" Target="10312:[7916..7934).2" />
<Link Source="10353:[5197..5323).10" Target="10353:[4698..4724).4" />
<Link Source="10353:[5197..5323).10" Target="10353:[5079..5183).7" />
<Link Source="10353:[5197..5323).10" Target="10312:[7916..7934).2" />
<Link Source="10353:[5485..5759).19" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).19" Target="10312:[7916..7934).2" />
<Link Source="10353:[5485..5759).20" Target="10353:[4698..4724).4" />
<Link Source="10353:[5485..5759).20" Target="10353:[5485..5759).19" />
<Link Source="10353:[5485..5759).20" Target="10312:[7916..7934).2" />
<Link Source="10353:[5485..5759).21" Target="10312:[7916..7934).2" />
<Link Source="10353:[5775..5979).13" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).13" Target="10312:[7916..7934).2" />
<Link Source="10353:[5775..5979).15" Target="10353:[4698..4724).4" />
<Link Source="10353:[5775..5979).15" Target="10353:[5775..5979).13" />
<Link Source="10353:[5775..5979).15" Target="10312:[7916..7934).2" />
<Link Source="10353:[5995..6029).10" Target="10353:[5775..5979).15" />
<Link Source="10353:[5995..6029).10" Target="10312:[7916..7934).2" />
<Link Source="10353:[6002..6028).4" Target="10312:[7916..7934).2" />
<Link Source="10353:[6343..6358).4" Target="10353:[5995..6029).10" />
<Link Source="10353:[6343..6358).4" Target="10353:[6002..6028).4" />
<Link Source="10353:[6384..6410).19" Target="10353:[6002..6028).4" />
<Link Source="10353:[6384..6410).20" Target="10353:[6343..6358).4" />
<Link Source="10353:[6384..6410).20" Target="10353:[6384..6410).19" />
<Link Source="10353:[6384..6410).20" Target="10353:[6002..6028).4" />
<Link Source="10312:[7952..7977).5" Target="10312:[4534..4658).23" />
<Link Source="10312:[7952..7977).6" Target="10312:[7718..7727).2" />
<Link Source="10312:[7952..7977).6" Target="10312:[7952..7977).5" />
<Link Source="10312:[7952..7977).6" Target="10312:[4534..4658).23" />
<Link Source="10312:[8247..8394).1" Target="10312:[4534..4658).23" />
<Link Source="10312:[8247..8394).4" Target="10312:[7718..7727).2" />
<Link Source="10312:[8247..8394).4" Target="10312:[4534..4658).23" />
<Link Source="10312:[8247..8394).5" Target="10312:[7729..7768).2" />
<Link Source="10312:[8247..8394).5" Target="10312:[4534..4658).23" />
<Link Source="10312:[8247..8394).8" Target="10312:[7816..7829).2" />
<Link Source="10312:[8247..8394).8" Target="10312:[4534..4658).23" />
<Link Source="10312:[8247..8393).1" Target="10312:[4534..4658).23" />
<Link Source="10312:[8543..8562).1" Target="10312:[8247..8394).1" />
<Link Source="10312:[8543..8562).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8564..8579).1" Target="10312:[8247..8394).1" />
<Link Source="10312:[8564..8579).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8581..8592).1" Target="10312:[8247..8394).1" />
<Link Source="10312:[8581..8592).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8594..8603).1" Target="10312:[8247..8394).4" />
<Link Source="10312:[8594..8603).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8605..8644).1" Target="10312:[8247..8394).5" />
<Link Source="10312:[8605..8644).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8646..8667).1" Target="10312:[8247..8394).1" />
<Link Source="10312:[8646..8667).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8669..8690).1" Target="10312:[8247..8394).1" />
<Link Source="10312:[8669..8690).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8692..8705).1" Target="10312:[8247..8394).8" />
<Link Source="10312:[8692..8705).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8707..8753).1" Target="10312:[8247..8394).1" />
<Link Source="10312:[8707..8753).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8508..10685).1" Target="10312:[7615..8420).2" />
<Link Source="10312:[8508..10685).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8779..10524).1" Target="10312:[8564..8579).1" />
<Link Source="10312:[8779..10524).1" Target="10319:[20152..24647).3" />
<Link Source="10312:[8779..10524).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[9577..9709).1" Target="10312:[8543..8562).1" />
<Link Source="10312:[9577..9709).1" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).2" Target="10312:[8564..8579).1" />
<Link Source="10312:[9577..9709).2" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).3" Target="10312:[8581..8592).1" />
<Link Source="10312:[9577..9709).3" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).4" Target="10312:[8594..8603).1" />
<Link Source="10312:[9577..9709).4" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).5" Target="10312:[8605..8644).1" />
<Link Source="10312:[9577..9709).5" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).6" Target="10312:[8646..8667).1" />
<Link Source="10312:[9577..9709).6" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).7" Target="10312:[8669..8690).1" />
<Link Source="10312:[9577..9709).7" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).8" Target="10312:[8692..8705).1" />
<Link Source="10312:[9577..9709).8" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).9" Target="10312:[8707..8753).1" />
<Link Source="10312:[9577..9709).9" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9708).1" Target="10312:[8779..10524).1" />
<Link Source="10312:[34707..34726).1" Target="10312:[9577..9709).1" />
<Link Source="10312:[34707..34726).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34741..34756).1" Target="10312:[9577..9709).2" />
<Link Source="10312:[34741..34756).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34771..34782).1" Target="10312:[9577..9709).3" />
<Link Source="10312:[34771..34782).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34797..34806).1" Target="10312:[9577..9709).4" />
<Link Source="10312:[34797..34806).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34821..34860).1" Target="10312:[9577..9709).5" />
<Link Source="10312:[34821..34860).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34875..34896).1" Target="10312:[9577..9709).6" />
<Link Source="10312:[34875..34896).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34911..34932).1" Target="10312:[9577..9709).7" />
<Link Source="10312:[34911..34932).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34947..34960).1" Target="10312:[9577..9709).8" />
<Link Source="10312:[34947..34960).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34975..35021).1" Target="10312:[9577..9709).9" />
<Link Source="10312:[34975..35021).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34659..35191).1" Target="10312:[8508..10685).1" />
<Link Source="10312:[34659..35191).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).1" Target="10312:[34707..34726).1" />
<Link Source="10312:[35047..35180).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).2" Target="10312:[34741..34756).1" />
<Link Source="10312:[35047..35180).2" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).3" Target="10312:[34771..34782).1" />
<Link Source="10312:[35047..35180).3" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).4" Target="10312:[34797..34806).1" />
<Link Source="10312:[35047..35180).4" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).5" Target="10312:[34821..34860).1" />
<Link Source="10312:[35047..35180).5" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).6" Target="10312:[34875..34896).1" />
<Link Source="10312:[35047..35180).6" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).7" Target="10312:[34911..34932).1" />
<Link Source="10312:[35047..35180).7" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).9" Target="10312:[34947..34960).1" />
<Link Source="10312:[35047..35180).9" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).10" Target="10312:[34975..35021).1" />
<Link Source="10312:[35047..35180).10" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35179).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[35313..35332).1" Target="10312:[35047..35180).1" />
<Link Source="10312:[35313..35332).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35347..35362).1" Target="10312:[35047..35180).2" />
<Link Source="10312:[35347..35362).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35377..35388).1" Target="10312:[35047..35180).3" />
<Link Source="10312:[35377..35388).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35403..35412).1" Target="10312:[35047..35180).4" />
<Link Source="10312:[35403..35412).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35427..35466).1" Target="10312:[35047..35180).5" />
<Link Source="10312:[35427..35466).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35481..35502).1" Target="10312:[35047..35180).6" />
<Link Source="10312:[35481..35502).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35517..35538).1" Target="10312:[35047..35180).7" />
<Link Source="10312:[35517..35538).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35553..35581).1" Target="10312:[35047..35180).2" />
<Link Source="10312:[35553..35581).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35596..35609).1" Target="10312:[35047..35180).9" />
<Link Source="10312:[35596..35609).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35624..35670).1" Target="10312:[35047..35180).10" />
<Link Source="10312:[35624..35670).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35265..38808).1" Target="10312:[34659..35191).1" />
<Link Source="10312:[35265..38808).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35696..35731).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35696..35731).2" Target="10312:[35347..35362).1" />
<Link Source="10312:[35696..35731).2" Target="10312:[35696..35731).1" />
<Link Source="10312:[35696..35731).2" Target="10312:[35047..35179).1" />
<Link Source="10312:[35745..35826).1" Target="10312:[35347..35362).1" />
<Link Source="10312:[35745..35826).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35842..35872).1" Target="10312:[35347..35362).1" />
<Link Source="10312:[35842..35872).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35898..35924).1" Target="10312:[35047..35179).1" />
<Link Source="10354:[11244..11285).10" Target="10354:[10809..10838).1" />
<Link Source="10354:[11244..11285).10" Target="10312:[35745..35826).1" />
<Link Source="10354:[11244..11285).10" Target="10312:[35898..35924).1" />
<Link Source="10354:[3068..3073).2" Target="10312:[35898..35924).1" />
<Link Source="10354:[3200..3211).2" Target="10312:[35898..35924).1" />
<Link Source="10354:[3319..3325).2" Target="10312:[35898..35924).1" />
<Link Source="10354:[3380..3385).2" Target="10312:[35898..35924).1" />
<Link Source="10354:[11312..11328).3" Target="10312:[35898..35924).1" />
<Link Source="10354:[3684..3818).10" Target="10354:[11244..11285).10" />
<Link Source="10354:[3684..3818).10" Target="10354:[11312..11328).3" />
<Link Source="10354:[3720..3803).69" Target="10354:[3684..3818).10" />
<Link Source="10354:[3720..3803).69" Target="10354:[11244..11285).10" />
<Link Source="10354:[3720..3803).69" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).69" Target="10354:[11312..11328).3" />
<Link Source="10354:[3720..3803).70" Target="10354:[11312..11328).3" />
<Link Source="10354:[3720..3803).71" Target="10354:[3684..3818).10" />
<Link Source="10354:[3720..3803).71" Target="10354:[11244..11285).10" />
<Link Source="10354:[3720..3803).71" Target="10354:[3720..3803).70" />
<Link Source="10354:[3720..3803).71" Target="10354:[11312..11328).3" />
<Link Source="10354:[11299..11330).7" Target="10354:[3720..3803).69" />
<Link Source="10354:[11299..11330).7" Target="10312:[35898..35924).1" />
<Link Source="10312:[35888..35925).1" Target="10354:[11244..11285).10" />
<Link Source="10312:[35888..35925).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35939..35985).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35999..38740).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35999..38740).2" Target="10312:[35842..35872).1" />
<Link Source="10312:[35999..38740).2" Target="10312:[35999..38740).1" />
<Link Source="10312:[35999..38740).2" Target="10312:[35047..35179).1" />
<Link Source="10312:[36067..36078).1" Target="10312:[35999..38740).2" />
<Link Source="10354:[3841..3991).2" Target="10312:[35888..35925).1" />
<Link Source="10354:[3841..3991).2" Target="10312:[36067..36078).1" />
<Link Source="10312:[36067..36079).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).1" Target="10312:[35888..35925).1" />
<Link Source="10312:[36097..36258).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).2" Target="10312:[35842..35872).1" />
<Link Source="10312:[36097..36258).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).3" Target="10312:[35377..35388).1" />
<Link Source="10312:[36097..36258).3" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).4" Target="10312:[35403..35412).1" />
<Link Source="10312:[36097..36258).4" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).5" Target="10312:[35481..35502).1" />
<Link Source="10312:[36097..36258).5" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).6" Target="10312:[35517..35538).1" />
<Link Source="10312:[36097..36258).6" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).7" Target="10312:[35553..35581).1" />
<Link Source="10312:[36097..36258).7" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).8" Target="10312:[35596..35609).1" />
<Link Source="10312:[36097..36258).8" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).9" Target="10312:[35624..35670).1" />
<Link Source="10312:[36097..36258).9" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).10" Target="10312:[35427..35466).1" />
<Link Source="10312:[36097..36258).10" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36257).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[33656..33675).1" Target="10312:[36097..36258).1" />
<Link Source="10312:[33656..33675).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33677..33692).1" Target="10312:[36097..36258).2" />
<Link Source="10312:[33677..33692).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33694..33705).1" Target="10312:[36097..36258).3" />
<Link Source="10312:[33694..33705).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33707..33716).1" Target="10312:[36097..36258).4" />
<Link Source="10312:[33707..33716).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33731..33752).1" Target="10312:[36097..36258).5" />
<Link Source="10312:[33731..33752).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33754..33775).1" Target="10312:[36097..36258).6" />
<Link Source="10312:[33754..33775).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33777..33805).1" Target="10312:[36097..36258).7" />
<Link Source="10312:[33777..33805).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33807..33820).1" Target="10312:[36097..36258).8" />
<Link Source="10312:[33807..33820).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33822..33868).1" Target="10312:[36097..36258).9" />
<Link Source="10312:[33822..33868).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33870..33909).1" Target="10312:[36097..36258).10" />
<Link Source="10312:[33870..33909).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33935..34006).1" Target="10312:[33677..33692).1" />
<Link Source="10312:[33935..34006).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33935..34006).2" Target="10312:[33694..33705).1" />
<Link Source="10312:[33935..34006).2" Target="10312:[36097..36257).1" />
<Link Source="10312:[33935..34006).3" Target="10312:[33731..33752).1" />
<Link Source="10312:[33935..34006).3" Target="10312:[36097..36257).1" />
<Link Source="10312:[33935..34006).4" Target="10312:[33754..33775).1" />
<Link Source="10312:[33935..34006).4" Target="10312:[36097..36257).1" />
<Link Source="10312:[33949..34005).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[61540..61570).2" Target="10312:[33935..34006).1" />
<Link Source="10312:[61540..61570).2" Target="10312:[33949..34005).1" />
<Link Source="10312:[61572..61583).2" Target="10312:[33935..34006).2" />
<Link Source="10312:[61572..61583).2" Target="10312:[33949..34005).1" />
<Link Source="10312:[61585..61606).2" Target="10312:[33935..34006).3" />
<Link Source="10312:[61585..61606).2" Target="10312:[33949..34005).1" />
<Link Source="10312:[61608..61629).2" Target="10312:[33935..34006).4" />
<Link Source="10312:[61608..61629).2" Target="10312:[33949..34005).1" />
<Link Source="10312:[61655..62327).9" Target="10312:[61585..61606).2" />
<Link Source="10312:[61655..62327).9" Target="10312:[61540..61570).2" />
<Link Source="10312:[61655..62327).9" Target="10312:[33949..34005).1" />
<Link Source="10312:[61771..61840).1" Target="10312:[61572..61583).2" />
<Link Source="10312:[61771..61840).1" Target="10312:[61655..62327).9" />
<Link Source="10312:[61771..61840).2" Target="10312:[61540..61570).2" />
<Link Source="10312:[61771..61840).2" Target="10312:[61771..61840).1" />
<Link Source="10312:[61771..61840).2" Target="10354:[3841..3991).2" />
<Link Source="10312:[61771..61840).2" Target="10312:[61655..62327).9" />
<Link Source="10312:[34022..34574).1" Target="10312:[61771..61840).2" />
<Link Source="10312:[34022..34574).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[36097..36258).11" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).1" Target="10312:[35313..35332).1" />
<Link Source="10312:[36278..36360).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).2" Target="10312:[35888..35925).1" />
<Link Source="10312:[36278..36360).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).3" Target="10312:[35427..35466).1" />
<Link Source="10312:[36278..36360).3" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).4" Target="10312:[33822..33868).1" />
<Link Source="10312:[36278..36360).4" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).5" Target="10312:[36278..36360).1" />
<Link Source="10312:[36278..36360).5" Target="10312:[36278..36360).2" />
<Link Source="10312:[36278..36360).5" Target="10312:[36278..36360).3" />
<Link Source="10312:[36278..36360).5" Target="10312:[36278..36360).4" />
<Link Source="10312:[36278..36360).5" Target="10312:[61771..61840).2" />
<Link Source="10312:[36278..36360).5" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).6" Target="10312:[35999..38740).2" />
<Link Source="10354:[9012..9030).1" Target="10312:[36278..36360).5" />
<Link Source="10354:[9012..9030).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[8981..9152).1" Target="10312:[36278..36360).5" />
<Link Source="10354:[8981..9152).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[9060..9070).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[4058..4122).12" Target="10354:[9012..9030).1" />
<Link Source="10354:[4058..4122).12" Target="10354:[9060..9070).1" />
<Link Source="10354:[9056..9141).1" Target="10354:[4058..4122).12" />
<Link Source="10354:[9056..9141).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[9073..9077).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[4058..4122).13" Target="10354:[8981..9152).1" />
<Link Source="10354:[4058..4122).13" Target="10354:[9073..9077).1" />
<Link Source="10354:[9056..9141).2" Target="10354:[4058..4122).13" />
<Link Source="10354:[9056..9141).2" Target="10312:[36278..36360).6" />
<Link Source="10354:[9056..9141).3" Target="10354:[9056..9141).1" />
<Link Source="10354:[9056..9141).3" Target="10354:[9056..9141).2" />
<Link Source="10354:[9056..9141).3" Target="10312:[36278..36360).6" />
<Link Source="10312:[36566..36625).1" Target="10312:[35842..35872).1" />
<Link Source="10312:[36566..36625).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36643..36855).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36643..36855).2" Target="10312:[36566..36625).1" />
<Link Source="10312:[36643..36855).2" Target="10312:[36278..36360).5" />
<Link Source="10312:[36643..36855).2" Target="10312:[36643..36855).1" />
<Link Source="10312:[36643..36855).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[37061..37078).1" Target="10312:[35999..38740).2" />
<Link Source="10354:[4919..5009).10" Target="10312:[35888..35925).1" />
<Link Source="10354:[4919..5009).10" Target="10312:[37061..37078).1" />
<Link Source="10354:[4094..4107).14" Target="10354:[4919..5009).10" />
<Link Source="10354:[4094..4107).14" Target="10312:[36278..36360).5" />
<Link Source="10354:[4094..4107).14" Target="10312:[37061..37078).1" />
<Link Source="10312:[37029..37117).1" Target="10354:[4094..4107).14" />
<Link Source="10312:[37029..37117).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[37258..37278).1" Target="10312:[35999..38740).2" />
<Link Source="10354:[4919..5009).11" Target="10312:[35313..35332).1" />
<Link Source="10354:[4919..5009).11" Target="10312:[37258..37278).1" />
<Link Source="10354:[4094..4107).15" Target="10354:[4919..5009).11" />
<Link Source="10354:[4094..4107).15" Target="10312:[36278..36360).5" />
<Link Source="10354:[4094..4107).15" Target="10312:[37258..37278).1" />
<Link Source="10312:[37254..37416).1" Target="10354:[4094..4107).15" />
<Link Source="10312:[37254..37416).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[37436..37988).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[37436..37988).2" Target="10312:[35427..35466).1" />
<Link Source="10312:[37436..37988).2" Target="10312:[37436..37988).1" />
<Link Source="10312:[37436..37988).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[38290..38338).1" Target="10312:[35999..38740).2" />
<Link Source="10306:[3345..3430).1" Target="10312:[35517..35538).1" />
<Link Source="10306:[3345..3430).1" Target="10312:[38290..38338).1" />
<Link Source="10306:[3358..3364).1" Target="10312:[38290..38338).1" />
<Link Source="10306:[3196..3249).5" Target="10306:[3345..3430).1" />
<Link Source="10306:[3196..3249).5" Target="10306:[3358..3364).1" />
<Link Source="10306:[3202..3247).17" Target="10306:[3196..3249).5" />
<Link Source="10306:[3202..3247).17" Target="10312:[36278..36360).5" />
<Link Source="10306:[3202..3247).17" Target="10306:[3358..3364).1" />
<Link Source="10306:[3351..3428).1" Target="10306:[3202..3247).17" />
<Link Source="10306:[3351..3428).1" Target="10312:[38290..38338).1" />
<Link Source="10312:[38286..38405).1" Target="10306:[3351..3428).1" />
<Link Source="10312:[38286..38405).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).1" Target="10312:[35842..35872).1" />
<Link Source="10312:[38425..38538).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).2" Target="10312:[35427..35466).1" />
<Link Source="10312:[38425..38538).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).3" Target="10312:[35265..38808).1" />
<Link Source="10312:[38425..38538).3" Target="10312:[36278..36360).5" />
<Link Source="10312:[38425..38538).3" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).4" Target="10312:[35939..35985).1" />
<Link Source="10312:[38425..38538).4" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).5" Target="10312:[38425..38538).1" />
<Link Source="10312:[38425..38538).5" Target="10312:[38425..38538).2" />
<Link Source="10312:[38425..38538).5" Target="10312:[38425..38538).3" />
<Link Source="10312:[38425..38538).5" Target="10312:[38425..38538).4" />
<Link Source="10312:[38425..38538).5" Target="10312:[36278..36360).5" />
<Link Source="10312:[38425..38538).5" Target="10312:[35999..38740).2" />
<Link Source="10312:[38556..38725).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[38556..38725).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[38556..38725).2" Target="10312:[38556..38725).1" />
<Link Source="10312:[38556..38725).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[38629..38706).1" Target="10312:[38425..38538).5" />
<Link Source="10312:[38629..38706).1" Target="10312:[38556..38725).2" />
<Link Source="10312:[38629..38706).2" Target="10312:[36278..36360).5" />
<Link Source="10312:[38629..38706).2" Target="10312:[38556..38725).2" />
<Link Source="10312:[36067..36079).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[36097..36258).15" Target="10312:[35403..35412).1" />
<Link Source="10312:[36097..36258).15" Target="10312:[38425..38538).5" />
<Link Source="10312:[36097..36258).17" Target="10312:[35517..35538).1" />
<Link Source="10312:[36097..36258).17" Target="10312:[38425..38538).5" />
<Link Source="10312:[36097..36258).18" Target="10312:[35553..35581).1" />
<Link Source="10312:[36097..36258).18" Target="10312:[38425..38538).5" />
<Link Source="10312:[36097..36258).19" Target="10312:[35596..35609).1" />
<Link Source="10312:[36097..36258).19" Target="10312:[38425..38538).5" />
<Link Source="10312:[33656..33675).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33707..33716).2" Target="10312:[36097..36258).15" />
<Link Source="10312:[33707..33716).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33754..33775).2" Target="10312:[36097..36258).17" />
<Link Source="10312:[33754..33775).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33777..33805).2" Target="10312:[36097..36258).18" />
<Link Source="10312:[33777..33805).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33807..33820).2" Target="10312:[36097..36258).19" />
<Link Source="10312:[33807..33820).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33870..33909).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[61608..61629).3" Target="10312:[33754..33775).2" />
<Link Source="10312:[61608..61629).3" Target="10312:[38425..38538).5" />
<Link Source="10312:[34022..34574).4" Target="10312:[38629..38706).1" />
<Link Source="10312:[34022..34574).4" Target="10312:[38425..38538).5" />
<Link Source="10354:[9012..9030).2" Target="10312:[38629..38706).1" />
<Link Source="10354:[9012..9030).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[8981..9152).2" Target="10312:[38629..38706).1" />
<Link Source="10354:[8981..9152).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[9060..9070).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[4058..4122).17" Target="10354:[9012..9030).2" />
<Link Source="10354:[4058..4122).17" Target="10354:[9060..9070).2" />
<Link Source="10354:[9056..9141).5" Target="10354:[4058..4122).17" />
<Link Source="10354:[9056..9141).5" Target="10312:[38425..38538).5" />
<Link Source="10354:[9073..9077).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[4058..4122).18" Target="10354:[8981..9152).2" />
<Link Source="10354:[4058..4122).18" Target="10354:[9073..9077).2" />
<Link Source="10354:[9056..9141).6" Target="10354:[4058..4122).18" />
<Link Source="10354:[9056..9141).6" Target="10312:[38425..38538).5" />
<Link Source="10354:[9056..9141).7" Target="10354:[9056..9141).5" />
<Link Source="10354:[9056..9141).7" Target="10354:[9056..9141).6" />
<Link Source="10354:[9056..9141).7" Target="10312:[38425..38538).5" />
<Link Source="10312:[36566..36625).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[36643..36855).4" Target="10312:[38425..38538).5" />
<Link Source="10312:[36643..36855).5" Target="10312:[36566..36625).2" />
<Link Source="10312:[36643..36855).5" Target="10312:[38629..38706).1" />
<Link Source="10312:[36643..36855).5" Target="10312:[36643..36855).4" />
<Link Source="10312:[36643..36855).5" Target="10312:[38425..38538).5" />
<Link Source="10312:[37061..37078).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[4094..4107).19" Target="10312:[37061..37078).2" />
<Link Source="10354:[4094..4107).19" Target="10312:[38629..38706).1" />
<Link Source="10312:[37029..37117).4" Target="10354:[4094..4107).19" />
<Link Source="10312:[37029..37117).4" Target="10312:[38425..38538).5" />
<Link Source="10312:[37258..37278).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[4094..4107).20" Target="10312:[37258..37278).2" />
<Link Source="10354:[4094..4107).20" Target="10312:[38629..38706).1" />
<Link Source="10312:[37254..37416).4" Target="10354:[4094..4107).20" />
<Link Source="10312:[37254..37416).4" Target="10312:[38425..38538).5" />
<Link Source="10312:[37436..37988).5" Target="10312:[38425..38538).5" />
<Link Source="10312:[38290..38338).2" Target="10312:[38425..38538).5" />
<Link Source="10306:[3345..3430).2" Target="10312:[35517..35538).1" />
<Link Source="10306:[3345..3430).2" Target="10312:[38290..38338).2" />
<Link Source="10306:[3358..3364).2" Target="10312:[38290..38338).2" />
<Link Source="10306:[3196..3249).6" Target="10306:[3345..3430).2" />
<Link Source="10306:[3196..3249).6" Target="10306:[3358..3364).2" />
<Link Source="10306:[3202..3247).21" Target="10306:[3196..3249).6" />
<Link Source="10306:[3202..3247).21" Target="10312:[38629..38706).1" />
<Link Source="10306:[3202..3247).21" Target="10306:[3358..3364).2" />
<Link Source="10306:[3351..3428).4" Target="10306:[3202..3247).21" />
<Link Source="10306:[3351..3428).4" Target="10312:[38290..38338).2" />
<Link Source="10312:[38286..38405).3" Target="10306:[3351..3428).4" />
<Link Source="10312:[38286..38405).3" Target="10312:[38425..38538).5" />
<Link Source="10312:[38556..38725).4" Target="10312:[38425..38538).5" />
<Link Source="10312:[38756..38772).1" Target="10312:[38629..38706).1" />
<Link Source="10312:[38756..38772).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[38786..38796).1" Target="10312:[35047..35179).1" />
<Link Source="10354:[11383..11549).2" Target="10312:[35888..35925).1" />
<Link Source="10354:[11383..11549).2" Target="10312:[38786..38796).1" />
<Link Source="10354:[3932..3952).4" Target="10354:[11383..11549).2" />
<Link Source="10354:[3932..3952).4" Target="10312:[38629..38706).1" />
<Link Source="10354:[3932..3952).4" Target="10312:[38786..38796).1" />
<Link Source="10354:[11428..11441).2" Target="10312:[38786..38796).1" />
<Link Source="10312:[38786..38797).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35047..35180).11" Target="10312:[9577..9708).1" />
<Link Source="10312:[9577..9709).10" Target="10312:[8779..10524).1" />
<Link Source="10346:[12335..12456).1" Target="10319:[41732..45579).2" />
<Link Source="10346:[12335..12456).4" Target="10346:[10663..10672).2" />
<Link Source="10346:[12335..12456).4" Target="10319:[41732..45579).2" />
<Link Source="10346:[12335..12456).5" Target="10346:[10674..10713).2" />
<Link Source="10346:[12335..12456).5" Target="10319:[41732..45579).2" />
<Link Source="10346:[12335..12456).6" Target="10312:[4534..4658).23" />
<Link Source="10346:[12335..12456).6" Target="10319:[41732..45579).2" />
<Link Source="10346:[12335..12456).7" Target="10346:[10761..10774).2" />
<Link Source="10346:[12335..12456).7" Target="10319:[41732..45579).2" />
<Link Source="10346:[12335..12456).8" Target="10312:[38629..38706).1" />
<Link Source="10346:[12335..12456).8" Target="10319:[41732..45579).2" />
<Link Source="10346:[12335..12455).1" Target="10319:[41732..45579).2" />
<Link Source="10345:[29004..29025).1" Target="10346:[12335..12456).1" />
<Link Source="10345:[29004..29025).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29040..29059).1" Target="10346:[12335..12456).1" />
<Link Source="10345:[29040..29059).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29074..29085).1" Target="10346:[12335..12456).1" />
<Link Source="10345:[29074..29085).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29100..29109).1" Target="10346:[12335..12456).4" />
<Link Source="10345:[29100..29109).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29124..29163).1" Target="10346:[12335..12456).5" />
<Link Source="10345:[29124..29163).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29178..29199).1" Target="10346:[12335..12456).6" />
<Link Source="10345:[29178..29199).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29214..29227).1" Target="10346:[12335..12456).7" />
<Link Source="10345:[29214..29227).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29242..29288).1" Target="10346:[12335..12456).8" />
<Link Source="10345:[29242..29288).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[28963..29726).1" Target="10319:[41732..45579).2" />
<Link Source="10345:[28963..29726).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).1" Target="10345:[29004..29025).1" />
<Link Source="10345:[29314..29436).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).2" Target="10345:[29040..29059).1" />
<Link Source="10345:[29314..29436).2" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).3" Target="10345:[29074..29085).1" />
<Link Source="10345:[29314..29436).3" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).4" Target="10345:[29100..29109).1" />
<Link Source="10345:[29314..29436).4" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).5" Target="10345:[29124..29163).1" />
<Link Source="10345:[29314..29436).5" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).6" Target="10345:[29178..29199).1" />
<Link Source="10345:[29314..29436).6" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).7" Target="10345:[29214..29227).1" />
<Link Source="10345:[29314..29436).7" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).8" Target="10345:[29242..29288).1" />
<Link Source="10345:[29314..29436).8" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29435).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29788..29809).1" Target="10345:[29314..29436).1" />
<Link Source="10345:[29788..29809).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29824..29843).1" Target="10345:[29314..29436).2" />
<Link Source="10345:[29824..29843).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29858..29869).1" Target="10345:[29314..29436).3" />
<Link Source="10345:[29858..29869).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29884..29893).1" Target="10345:[29314..29436).4" />
<Link Source="10345:[29884..29893).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29908..29947).1" Target="10345:[29314..29436).5" />
<Link Source="10345:[29908..29947).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29962..29983).1" Target="10345:[29314..29436).6" />
<Link Source="10345:[29962..29983).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29998..30011).1" Target="10345:[29314..29436).7" />
<Link Source="10345:[29998..30011).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30026..30072).1" Target="10345:[29314..29436).8" />
<Link Source="10345:[30026..30072).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29738..31666).1" Target="10345:[28963..29726).1" />
<Link Source="10345:[29738..31666).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30127..30163).1" Target="10345:[29314..29435).1" />
<Link Source="10286:[2155..2260).2" Target="10345:[29788..29809).1" />
<Link Source="10286:[2155..2260).2" Target="10345:[30127..30163).1" />
<Link Source="10286:[2191..2245).5" Target="10286:[2155..2260).2" />
<Link Source="10286:[2191..2245).5" Target="10354:[3932..3952).4" />
<Link Source="10286:[2191..2245).5" Target="10345:[30127..30163).1" />
<Link Source="10286:[2191..2245).6" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).6" Target="10345:[30127..30163).1" />
<Link Source="10286:[2198..2244).2" Target="10345:[30127..30163).1" />
<Link Source="10298:[471..492).21" Target="10286:[2191..2245).5" />
<Link Source="10298:[471..492).21" Target="10286:[2198..2244).2" />
<Link Source="10298:[494..511).21" Target="10286:[2191..2245).6" />
<Link Source="10298:[494..511).21" Target="10286:[2198..2244).2" />
<Link Source="10345:[30098..30164).1" Target="10298:[471..492).21" />
<Link Source="10345:[30098..30164).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30180..30209).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30203..30208).1" Target="10345:[30180..30209).1" />
<Link Source="10345:[30203..30208).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30223..30867).1" Target="10345:[29858..29869).1" />
<Link Source="10345:[30223..30867).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30223..30867).2" Target="10345:[30180..30209).1" />
<Link Source="10345:[30223..30867).2" Target="10345:[29314..29435).1" />
<Link Source="10345:[30223..30867).3" Target="10345:[29738..31666).1" />
<Link Source="10345:[30223..30867).3" Target="10354:[3932..3952).4" />
<Link Source="10345:[30223..30867).3" Target="10345:[30223..30867).1" />
<Link Source="10345:[30223..30867).3" Target="10345:[30223..30867).2" />
<Link Source="10345:[30223..30867).3" Target="10345:[30203..30208).1" />
<Link Source="10345:[30223..30867).3" Target="10345:[29314..29435).1" />
<Link Source="10345:[30883..31655).1" Target="10345:[29738..31666).1" />
<Link Source="10345:[30883..31655).1" Target="10345:[30223..30867).3" />
<Link Source="10345:[30883..31655).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29314..29436).9" Target="10346:[12335..12455).1" />
<Link Source="10345:[29457..29477).1" Target="10346:[12335..12455).1" />
<Link Source="10354:[4919..5009).16" Target="10345:[29040..29059).1" />
<Link Source="10354:[4919..5009).16" Target="10345:[29457..29477).1" />
<Link Source="10354:[4094..4107).22" Target="10354:[4919..5009).16" />
<Link Source="10354:[4094..4107).22" Target="10345:[30223..30867).3" />
<Link Source="10354:[4094..4107).22" Target="10345:[29457..29477).1" />
<Link Source="10345:[29452..29715).1" Target="10354:[4094..4107).22" />
<Link Source="10345:[29452..29715).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29452..29715).2" Target="10345:[29178..29199).1" />
<Link Source="10345:[29452..29715).2" Target="EXTERNAL" />
<Link Source="10345:[29452..29715).2" Target="10346:[12335..12455).1" />
<Link Source="10345:[29452..29715).3" Target="10346:[12335..12455).1" />
<Link Source="10345:[29452..29715).5" Target="10345:[29452..29715).1" />
<Link Source="10345:[29452..29715).5" Target="10345:[29452..29715).2" />
<Link Source="10345:[29452..29715).5" Target="10346:[12335..12455).1" />
<Link Source="10345:[29566..29700).1" Target="10345:[28963..29726).1" />
<Link Source="10345:[29566..29700).1" Target="10345:[30223..30867).3" />
<Link Source="10345:[29566..29700).1" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).2" Target="10345:[29004..29025).1" />
<Link Source="10345:[29566..29700).2" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).3" Target="10345:[29040..29059).1" />
<Link Source="10345:[29566..29700).3" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).4" Target="10345:[29074..29085).1" />
<Link Source="10345:[29566..29700).4" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).5" Target="10345:[29100..29109).1" />
<Link Source="10345:[29566..29700).5" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).6" Target="10345:[29124..29163).1" />
<Link Source="10345:[29566..29700).6" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).7" Target="10345:[29178..29199).1" />
<Link Source="10345:[29566..29700).7" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).8" Target="10345:[29214..29227).1" />
<Link Source="10345:[29566..29700).8" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).9" Target="10345:[30026..30072).1" />
<Link Source="10345:[29566..29700).9" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29699).1" Target="10345:[29452..29715).5" />
<Link Source="10345:[31734..31789).1" Target="10345:[29566..29700).1" />
<Link Source="10345:[31734..31789).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31804..31825).1" Target="10345:[29566..29700).2" />
<Link Source="10345:[31804..31825).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31840..31859).1" Target="10345:[29566..29700).3" />
<Link Source="10345:[31840..31859).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31874..31885).1" Target="10345:[29566..29700).4" />
<Link Source="10345:[31874..31885).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31900..31909).1" Target="10345:[29566..29700).5" />
<Link Source="10345:[31900..31909).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31924..31963).1" Target="10345:[29566..29700).6" />
<Link Source="10345:[31924..31963).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31978..31999).1" Target="10345:[29566..29700).7" />
<Link Source="10345:[31978..31999).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32014..32027).1" Target="10345:[29566..29700).8" />
<Link Source="10345:[32014..32027).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32042..32088).1" Target="10345:[29566..29700).9" />
<Link Source="10345:[32042..32088).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32114..32230).1" Target="10345:[31804..31825).1" />
<Link Source="10345:[32114..32230).1" Target="10345:[30223..30867).3" />
<Link Source="10345:[32114..32230).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32114..32230).2" Target="EXTERNAL" />
<Link Source="10345:[32114..32230).2" Target="10345:[29566..29699).1" />
<Link Source="10345:[32118..32174).1" Target="10345:[29566..29699).1" />
<Link Source="10298:[471..492).22" Target="10345:[32114..32230).1" />
<Link Source="10298:[471..492).22" Target="10345:[32118..32174).1" />
<Link Source="10298:[494..511).22" Target="10345:[32114..32230).2" />
<Link Source="10298:[494..511).22" Target="10345:[32118..32174).1" />
<Link Source="10345:[32275..32311).1" Target="10345:[29566..29699).1" />
<Link Source="10286:[2155..2260).3" Target="10345:[31804..31825).1" />
<Link Source="10286:[2155..2260).3" Target="10345:[32275..32311).1" />
<Link Source="10286:[2191..2245).9" Target="10286:[2155..2260).3" />
<Link Source="10286:[2191..2245).9" Target="10345:[30223..30867).3" />
<Link Source="10286:[2191..2245).9" Target="10345:[32275..32311).1" />
<Link Source="10286:[2191..2245).10" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).10" Target="10345:[32275..32311).1" />
<Link Source="10286:[2198..2244).3" Target="10345:[32275..32311).1" />
<Link Source="10298:[471..492).23" Target="10286:[2191..2245).9" />
<Link Source="10298:[471..492).23" Target="10286:[2198..2244).3" />
<Link Source="10298:[494..511).23" Target="10286:[2191..2245).10" />
<Link Source="10298:[494..511).23" Target="10286:[2198..2244).3" />
<Link Source="10345:[32246..32312).1" Target="10298:[471..492).23" />
<Link Source="10345:[32246..32312).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32328..33465).1" Target="10345:[31734..31789).1" />
<Link Source="10345:[32328..33465).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[29566..29700).10" Target="10345:[29452..29715).5" />
<Link Source="10354:[3720..3803).77" Target="10354:[3684..3818).8" />
<Link Source="10354:[3720..3803).77" Target="10345:[30223..30867).3" />
<Link Source="10354:[3720..3803).77" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).77" Target="10312:[4685..4699).3" />
<Link Source="10354:[3720..3803).79" Target="10354:[3684..3818).8" />
<Link Source="10354:[3720..3803).79" Target="10345:[30223..30867).3" />
<Link Source="10354:[3720..3803).79" Target="10354:[3720..3803).54" />
<Link Source="10354:[3720..3803).79" Target="10312:[4685..4699).3" />
<Link Source="10312:[4680..4787).7" Target="10354:[3720..3803).77" />
<Link Source="10312:[4680..4787).7" Target="10319:[41732..45579).2" />
<Link Source="10312:[4534..4658).39" Target="10312:[3730..3739).2" />
<Link Source="10312:[4534..4658).39" Target="10345:[30223..30867).3" />
<Link Source="10312:[4534..4658).43" Target="10312:[3805..3818).2" />
<Link Source="10312:[4534..4658).43" Target="10345:[30223..30867).3" />
<Link Source="10346:[10663..10672).3" Target="10312:[4534..4658).39" />
<Link Source="10346:[10663..10672).3" Target="10345:[30223..30867).3" />
<Link Source="10346:[10761..10774).3" Target="10312:[4534..4658).43" />
<Link Source="10346:[10761..10774).3" Target="10345:[30223..30867).3" />
<Link Source="10346:[10861..10875).3" Target="10345:[30223..30867).3" />
<Link Source="10354:[3684..3818).12" Target="10345:[30223..30867).3" />
<Link Source="10354:[3684..3818).12" Target="10346:[10861..10875).3" />
<Link Source="10354:[3720..3803).85" Target="10354:[3684..3818).12" />
<Link Source="10354:[3720..3803).85" Target="10345:[30223..30867).3" />
<Link Source="10354:[3720..3803).85" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).85" Target="10346:[10861..10875).3" />
<Link Source="10354:[3720..3803).86" Target="10346:[10861..10875).3" />
<Link Source="10354:[3720..3803).87" Target="10354:[3684..3818).12" />
<Link Source="10354:[3720..3803).87" Target="10345:[30223..30867).3" />
<Link Source="10354:[3720..3803).87" Target="10354:[3720..3803).86" />
<Link Source="10354:[3720..3803).87" Target="10346:[10861..10875).3" />
<Link Source="10346:[10848..10877).7" Target="10354:[3720..3803).85" />
<Link Source="10346:[10848..10877).7" Target="10345:[30223..30867).3" />
<Link Source="10346:[10897..10914).3" Target="10345:[30223..30867).3" />
<Link Source="10346:[7666..7775).3" Target="10345:[30223..30867).3" />
<Link Source="10346:[7666..7775).3" Target="10346:[10897..10914).3" />
<Link Source="10346:[7672..7773).7" Target="10346:[7666..7775).3" />
<Link Source="10346:[7672..7773).7" Target="10345:[30223..30867).3" />
<Link Source="10346:[7672..7773).7" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).7" Target="10346:[10897..10914).3" />
<Link Source="10346:[10893..11127).5" Target="10346:[7672..7773).7" />
<Link Source="10346:[10893..11127).5" Target="10345:[30223..30867).3" />
<Link Source="10346:[3525..3638).24" Target="10345:[30223..30867).3" />
<Link Source="10312:[7718..7727).3" Target="10346:[10663..10672).3" />
<Link Source="10312:[7718..7727).3" Target="10345:[30223..30867).3" />
<Link Source="10312:[7816..7829).3" Target="10346:[10761..10774).3" />
<Link Source="10312:[7816..7829).3" Target="10345:[30223..30867).3" />
<Link Source="10312:[7903..7936).9" Target="10345:[30223..30867).3" />
<Link Source="10312:[7916..7934).3" Target="10345:[30223..30867).3" />
<Link Source="10353:[4698..4724).5" Target="10312:[7903..7936).9" />
<Link Source="10353:[4698..4724).5" Target="10312:[7916..7934).3" />
<Link Source="10353:[4750..4847).9" Target="10353:[4698..4724).5" />
<Link Source="10353:[4750..4847).9" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).9" Target="10312:[7916..7934).3" />
<Link Source="10353:[4863..5000).17" Target="10353:[4698..4724).5" />
<Link Source="10353:[4863..5000).17" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).17" Target="10312:[7916..7934).3" />
<Link Source="10353:[4863..5000).18" Target="10312:[7916..7934).3" />
<Link Source="10353:[5079..5183).9" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).9" Target="10312:[7916..7934).3" />
<Link Source="10353:[5197..5323).13" Target="10353:[4698..4724).5" />
<Link Source="10353:[5197..5323).13" Target="10353:[5079..5183).9" />
<Link Source="10353:[5197..5323).13" Target="10312:[7916..7934).3" />
<Link Source="10353:[5485..5759).25" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).25" Target="10312:[7916..7934).3" />
<Link Source="10353:[5485..5759).26" Target="10353:[4698..4724).5" />
<Link Source="10353:[5485..5759).26" Target="10353:[5485..5759).25" />
<Link Source="10353:[5485..5759).26" Target="10312:[7916..7934).3" />
<Link Source="10353:[5485..5759).27" Target="10312:[7916..7934).3" />
<Link Source="10353:[5775..5979).17" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).17" Target="10312:[7916..7934).3" />
<Link Source="10353:[5775..5979).19" Target="10353:[4698..4724).5" />
<Link Source="10353:[5775..5979).19" Target="10353:[5775..5979).17" />
<Link Source="10353:[5775..5979).19" Target="10312:[7916..7934).3" />
<Link Source="10353:[5995..6029).13" Target="10353:[5775..5979).19" />
<Link Source="10353:[5995..6029).13" Target="10312:[7916..7934).3" />
<Link Source="10353:[6002..6028).5" Target="10312:[7916..7934).3" />
<Link Source="10353:[6343..6358).5" Target="10353:[5995..6029).13" />
<Link Source="10353:[6343..6358).5" Target="10353:[6002..6028).5" />
<Link Source="10353:[6384..6410).25" Target="10353:[6002..6028).5" />
<Link Source="10353:[6384..6410).26" Target="10353:[6343..6358).5" />
<Link Source="10353:[6384..6410).26" Target="10353:[6384..6410).25" />
<Link Source="10353:[6384..6410).26" Target="10353:[6002..6028).5" />
<Link Source="10312:[7952..7977).9" Target="10345:[30223..30867).3" />
<Link Source="10312:[7952..7977).10" Target="10312:[7718..7727).3" />
<Link Source="10312:[7952..7977).10" Target="10312:[7952..7977).9" />
<Link Source="10312:[7952..7977).10" Target="10345:[30223..30867).3" />
<Link Source="10312:[19030..19039).2" Target="10312:[7718..7727).3" />
<Link Source="10312:[19030..19039).2" Target="10345:[30223..30867).3" />
<Link Source="10312:[19087..19100).2" Target="10312:[7816..7829).3" />
<Link Source="10312:[19087..19100).2" Target="10345:[30223..30867).3" />
<Link Source="10312:[61608..61629).4" Target="10345:[30223..30867).3" />
<Link Source="10312:[63439..63448).2" Target="10312:[19030..19039).2" />
<Link Source="10312:[63439..63448).2" Target="10345:[30223..30867).3" />
<Link Source="10312:[63473..63501).2" Target="10345:[30223..30867).3" />
<Link Source="10312:[63503..63516).2" Target="10312:[19087..19100).2" />
<Link Source="10312:[63503..63516).2" Target="10345:[30223..30867).3" />
<Link Source="10312:[63566..63612).2" Target="10345:[30223..30867).3" />
<Link Source="10312:[63638..63668).2" Target="10345:[30223..30867).3" />
<Link Source="10312:[63682..63706).2" Target="10345:[30223..30867).3" />
<Link Source="10312:[80978..80991).2" Target="10345:[30223..30867).3" />
<Link Source="10312:[80993..81002).2" Target="10312:[63439..63448).2" />
<Link Source="10312:[80993..81002).2" Target="10345:[30223..30867).3" />
<Link Source="10312:[81004..81017).2" Target="10312:[63503..63516).2" />
<Link Source="10312:[81004..81017).2" Target="10345:[30223..30867).3" />
<Link Source="10312:[81019..81040).2" Target="10345:[30223..30867).3" />
<Link Source="10312:[81042..81069).2" Target="10312:[63682..63706).2" />
<Link Source="10312:[81042..81069).2" Target="10345:[30223..30867).3" />
<Link Source="10312:[81095..84034).2" Target="10312:[80978..80991).2" />
<Link Source="10312:[81095..84034).2" Target="10345:[30223..30867).3" />
<Link Source="10312:[81196..82523).1" Target="10312:[81095..84034).2" />
<Link Source="10312:[81196..82523).2" Target="10312:[80993..81002).2" />
<Link Source="10312:[81196..82523).2" Target="10312:[81196..82523).1" />
<Link Source="10312:[81196..82523).2" Target="10312:[81095..84034).2" />
<Link Source="10312:[81196..82523).3" Target="10312:[81019..81040).2" />
<Link Source="10312:[81196..82523).3" Target="EXTERNAL" />
<Link Source="10312:[81196..82523).3" Target="10312:[81095..84034).2" />
<Link Source="10312:[81196..82523).6" Target="10312:[81196..82523).2" />
<Link Source="10312:[81196..82523).6" Target="10312:[81196..82523).3" />
<Link Source="10312:[81196..82523).6" Target="10312:[81095..84034).2" />
<Link Source="10312:[81319..81371).1" Target="10312:[80978..80991).2" />
<Link Source="10312:[81319..81371).1" Target="10312:[81196..82523).6" />
<Link Source="10312:[81495..81570).1" Target="10312:[81319..81371).1" />
<Link Source="10312:[81495..81570).1" Target="10345:[30223..30867).3" />
<Link Source="10312:[81495..81570).1" Target="10312:[81196..82523).6" />
<Link Source="10312:[81495..81570).2" Target="10312:[81319..81371).1" />
<Link Source="10312:[81495..81570).2" Target="10312:[81196..82523).6" />
<Link Source="10312:[81596..82500).1" Target="10312:[81319..81371).1" />
<Link Source="10312:[81596..82500).1" Target="10345:[30223..30867).3" />
<Link Source="10312:[81596..82500).1" Target="10312:[80993..81002).2" />
<Link Source="10312:[81596..82500).1" Target="10312:[81196..82523).6" />
<Link Source="10312:[81596..82500).2" Target="10312:[81019..81040).2" />
<Link Source="10312:[81596..82500).2" Target="10312:[81196..82523).6" />
<Link Source="10312:[81628..81659).1" Target="10312:[81196..82523).6" />
<Link Source="10353:[7504..7530).3" Target="10312:[81596..82500).2" />
<Link Source="10353:[7504..7530).3" Target="10312:[81628..81659).1" />
<Link Source="10312:[81596..82500).5" Target="10312:[81596..82500).1" />
<Link Source="10312:[81596..82500).5" Target="10353:[7504..7530).3" />
<Link Source="10312:[81596..82500).5" Target="10312:[81196..82523).6" />
<Link Source="10312:[84050..84066).3" Target="10345:[30223..30867).3" />
<Link Source="10312:[66177..69285).16" Target="10312:[63473..63501).2" />
<Link Source="10312:[66177..69285).16" Target="10312:[63682..63706).2" />
<Link Source="10312:[66291..66342).2" Target="10312:[63682..63706).2" />
<Link Source="10312:[75301..75322).2" Target="10312:[63682..63706).2" />
<Link Source="10312:[75301..75322).2" Target="10312:[66291..66342).2" />
<Link Source="10312:[75324..75352).2" Target="10312:[66177..69285).16" />
<Link Source="10312:[75324..75352).2" Target="10312:[66291..66342).2" />
<Link Source="10312:[75735..75866).6" Target="10312:[75301..75322).2" />
<Link Source="10312:[75735..75866).6" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).6" Target="10312:[66291..66342).2" />
<Link Source="10312:[75735..75866).7" Target="10312:[66291..66342).2" />
<Link Source="10312:[75742..75804).2" Target="10312:[75735..75866).6" />
<Link Source="10312:[75742..75804).2" Target="10312:[66291..66342).2" />
<Link Source="10312:[75735..75866).9" Target="10312:[75324..75352).2" />
<Link Source="10312:[75735..75866).9" Target="10312:[75742..75804).2" />
<Link Source="10312:[66177..69285).19" Target="10312:[63638..63668).2" />
<Link Source="10312:[66177..69285).19" Target="10312:[63682..63706).2" />
<Link Source="10312:[66177..69285).20" Target="10345:[32042..32088).1" />
<Link Source="10312:[66177..69285).20" Target="10312:[63682..63706).2" />
<Link Source="10312:[66177..69285).21" Target="10312:[63566..63612).2" />
<Link Source="10312:[66177..69285).21" Target="10312:[63682..63706).2" />
<Link Source="10312:[77543..77571).2" Target="10312:[75735..75866).9" />
<Link Source="10312:[77543..77571).2" Target="10312:[63682..63706).2" />
<Link Source="10312:[77573..77604).2" Target="10312:[66177..69285).19" />
<Link Source="10312:[77573..77604).2" Target="10312:[63682..63706).2" />
<Link Source="10312:[77654..77700).2" Target="10312:[66177..69285).21" />
<Link Source="10312:[77654..77700).2" Target="10312:[63682..63706).2" />
<Link Source="10312:[77726..77892).5" Target="10312:[63682..63706).2" />
<Link Source="10312:[77726..77892).5" Target="10345:[30223..30867).3" />
<Link Source="10312:[77726..77892).6" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).6" Target="10312:[63682..63706).2" />
<Link Source="10312:[77730..77782).2" Target="10312:[63682..63706).2" />
<Link Source="10298:[471..492).27" Target="10312:[77726..77892).5" />
<Link Source="10298:[471..492).27" Target="10312:[77730..77782).2" />
<Link Source="10298:[494..511).27" Target="10312:[77726..77892).6" />
<Link Source="10298:[494..511).27" Target="10312:[77730..77782).2" />
<Link Source="10312:[78402..78430).2" Target="10312:[77543..77571).2" />
<Link Source="10312:[78402..78430).2" Target="10312:[63682..63706).2" />
<Link Source="10312:[78432..78463).2" Target="10312:[77573..77604).2" />
<Link Source="10312:[78432..78463).2" Target="10312:[63682..63706).2" />
<Link Source="10312:[78513..78552).2" Target="10312:[77654..77700).2" />
<Link Source="10312:[78513..78552).2" Target="10312:[63682..63706).2" />
<Link Source="10346:[8034..8062).2" Target="10312:[78402..78430).2" />
<Link Source="10346:[8034..8062).2" Target="10312:[63682..63706).2" />
<Link Source="10346:[8064..8095).2" Target="10312:[78432..78463).2" />
<Link Source="10346:[8064..8095).2" Target="10312:[63682..63706).2" />
<Link Source="10346:[8145..8184).2" Target="10312:[78513..78552).2" />
<Link Source="10346:[8145..8184).2" Target="10312:[63682..63706).2" />
<Link Source="10346:[8323..8450).1" Target="10312:[63682..63706).2" />
<Link Source="10346:[8323..8450).3" Target="10346:[8034..8062).2" />
<Link Source="10346:[8323..8450).3" Target="10312:[63682..63706).2" />
<Link Source="10346:[8323..8450).4" Target="10346:[8064..8095).2" />
<Link Source="10346:[8323..8450).4" Target="10312:[63682..63706).2" />
<Link Source="10346:[8323..8450).5" Target="10312:[66177..69285).20" />
<Link Source="10346:[8323..8450).5" Target="10312:[63682..63706).2" />
<Link Source="10346:[8330..8449).1" Target="10312:[63682..63706).2" />
<Link Source="10286:[30070..30083).1" Target="10346:[8323..8450).1" />
<Link Source="10286:[30070..30083).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30098..30120).1" Target="10346:[8323..8450).1" />
<Link Source="10286:[30098..30120).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30135..30160).1" Target="10346:[8323..8450).3" />
<Link Source="10286:[30135..30160).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30175..30206).1" Target="10346:[8323..8450).4" />
<Link Source="10286:[30175..30206).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30221..30268).1" Target="10346:[8323..8450).5" />
<Link Source="10286:[30221..30268).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30283..30330).1" Target="10346:[8323..8450).1" />
<Link Source="10286:[30283..30330).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30012..30691).1" Target="10312:[63682..63706).2" />
<Link Source="10286:[30012..30691).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30356..30522).1" Target="10286:[30012..30691).1" />
<Link Source="10286:[30356..30522).1" Target="10345:[30223..30867).3" />
<Link Source="10286:[30356..30522).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30356..30522).2" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).2" Target="10346:[8330..8449).1" />
<Link Source="10286:[30360..30412).1" Target="10346:[8330..8449).1" />
<Link Source="10298:[471..492).28" Target="10286:[30356..30522).1" />
<Link Source="10298:[471..492).28" Target="10286:[30360..30412).1" />
<Link Source="10298:[494..511).28" Target="10286:[30356..30522).2" />
<Link Source="10298:[494..511).28" Target="10286:[30360..30412).1" />
<Link Source="10286:[30538..30680).1" Target="10286:[30070..30083).1" />
<Link Source="10286:[30538..30680).1" Target="10346:[8330..8449).1" />
<Link Source="10286:[30538..30680).2" Target="10286:[30098..30120).1" />
<Link Source="10286:[30538..30680).2" Target="10346:[8330..8449).1" />
<Link Source="10286:[30538..30680).3" Target="10286:[30135..30160).1" />
<Link Source="10286:[30538..30680).3" Target="10346:[8330..8449).1" />
<Link Source="10286:[30538..30680).4" Target="10286:[30175..30206).1" />
<Link Source="10286:[30538..30680).4" Target="10346:[8330..8449).1" />
<Link Source="10286:[30538..30680).5" Target="10286:[30221..30268).1" />
<Link Source="10286:[30538..30680).5" Target="10346:[8330..8449).1" />
<Link Source="10286:[30538..30680).6" Target="10286:[30283..30330).1" />
<Link Source="10286:[30538..30680).6" Target="10346:[8330..8449).1" />
<Link Source="10286:[30545..30679).1" Target="10346:[8330..8449).1" />
<Link Source="10060:[2108..2121).1" Target="10286:[30538..30680).1" />
<Link Source="10060:[2108..2121).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2136..2158).1" Target="10286:[30538..30680).2" />
<Link Source="10060:[2136..2158).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2173..2198).1" Target="10286:[30538..30680).3" />
<Link Source="10060:[2173..2198).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2213..2244).1" Target="10286:[30538..30680).4" />
<Link Source="10060:[2213..2244).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2259..2305).1" Target="10286:[30538..30680).5" />
<Link Source="10060:[2259..2305).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2320..2366).1" Target="10286:[30538..30680).6" />
<Link Source="10060:[2320..2366).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).1" Target="10060:[2108..2121).1" />
<Link Source="10060:[2392..2555).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).2" Target="10060:[2136..2158).1" />
<Link Source="10060:[2392..2555).2" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).3" Target="10060:[2173..2198).1" />
<Link Source="10060:[2392..2555).3" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).4" Target="10060:[2213..2244).1" />
<Link Source="10060:[2392..2555).4" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).5" Target="10060:[2136..2158).1" />
<Link Source="10060:[2392..2555).5" Target="10345:[30223..30867).3" />
<Link Source="10060:[2392..2555).5" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).6" Target="10060:[2259..2305).1" />
<Link Source="10060:[2392..2555).6" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).7" Target="10060:[2320..2366).1" />
<Link Source="10060:[2392..2555).7" Target="10286:[30545..30679).1" />
<Link Source="10060:[2399..2554).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[5593..5606).2" Target="10060:[2392..2555).1" />
<Link Source="10060:[5593..5606).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[5621..5634).2" Target="10060:[2392..2555).2" />
<Link Source="10060:[5621..5634).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[5691..5716).2" Target="10060:[2392..2555).3" />
<Link Source="10060:[5691..5716).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[5731..5762).2" Target="10060:[2392..2555).4" />
<Link Source="10060:[5731..5762).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[5777..5806).2" Target="10060:[2392..2555).5" />
<Link Source="10060:[5777..5806).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[5821..5867).2" Target="10060:[2392..2555).6" />
<Link Source="10060:[5821..5867).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[5882..5928).2" Target="10060:[2392..2555).7" />
<Link Source="10060:[5882..5928).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[5954..5991).5" Target="10060:[2399..2554).1" />
<Link Source="10060:[5954..5991).6" Target="10060:[5593..5606).2" />
<Link Source="10060:[5954..5991).6" Target="10060:[5954..5991).5" />
<Link Source="10060:[5954..5991).6" Target="10060:[2399..2554).1" />
<Link Source="10060:[6005..6042).5" Target="10060:[2399..2554).1" />
<Link Source="10060:[6005..6042).6" Target="10060:[5621..5634).2" />
<Link Source="10060:[6005..6042).6" Target="10060:[6005..6042).5" />
<Link Source="10060:[6005..6042).6" Target="10060:[2399..2554).1" />
<Link Source="10060:[6056..6090).3" Target="10060:[5621..5634).2" />
<Link Source="10060:[6056..6090).3" Target="10345:[30223..30867).3" />
<Link Source="10060:[6056..6090).3" Target="10060:[2399..2554).1" />
<Link Source="10060:[6104..6172).4" Target="10060:[5621..5634).2" />
<Link Source="10060:[6104..6172).4" Target="10060:[2399..2554).1" />
<Link Source="10060:[6188..6219).3" Target="10060:[2399..2554).1" />
<Link Source="10060:[6814..6920).1" Target="10060:[5593..5606).2" />
<Link Source="10060:[6814..6920).2" Target="10060:[5621..5634).2" />
<Link Source="10060:[6814..6920).2" Target="10060:[5593..5606).2" />
<Link Source="10060:[6814..6920).3" Target="10060:[5821..5867).2" />
<Link Source="10060:[6814..6920).3" Target="10060:[5593..5606).2" />
<Link Source="10060:[6814..6920).4" Target="10060:[5882..5928).2" />
<Link Source="10060:[6814..6920).4" Target="10060:[5593..5606).2" />
<Link Source="10060:[6821..6919).1" Target="10060:[5593..5606).2" />
<Link Source="10060:[10180..10200).1" Target="10060:[6814..6920).1" />
<Link Source="10060:[10180..10200).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10202..10215).1" Target="10060:[6814..6920).2" />
<Link Source="10060:[10202..10215).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10217..10263).1" Target="10060:[6814..6920).3" />
<Link Source="10060:[10217..10263).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10265..10311).1" Target="10060:[6814..6920).4" />
<Link Source="10060:[10265..10311).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10337..10405).1" Target="10060:[10202..10215).1" />
<Link Source="10060:[10337..10405).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10419..10454).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10419..10454).2" Target="10060:[10180..10200).1" />
<Link Source="10060:[10419..10454).2" Target="10060:[10419..10454).1" />
<Link Source="10060:[10419..10454).2" Target="10060:[6821..6919).1" />
<Link Source="10060:[10470..10516).1" Target="10060:[10202..10215).1" />
<Link Source="10060:[10470..10516).1" Target="10345:[30223..30867).3" />
<Link Source="10060:[10470..10516).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10532..10544).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10558..11295).1" Target="10060:[10180..10200).1" />
<Link Source="10060:[10558..11295).1" Target="10345:[30223..30867).3" />
<Link Source="10060:[10558..11295).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11311..11352).1" Target="10060:[10180..10200).1" />
<Link Source="10060:[11311..11352).1" Target="10345:[30223..30867).3" />
<Link Source="10060:[11311..11352).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11366..11675).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11366..11675).2" Target="10060:[11311..11352).1" />
<Link Source="10060:[11366..11675).2" Target="10060:[11366..11675).1" />
<Link Source="10060:[11366..11675).2" Target="10060:[6821..6919).1" />
<Link Source="10060:[11373..11403).1" Target="10060:[11366..11675).2" />
<Link Source="10060:[11373..11403).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11366..11675).5" Target="10060:[10202..10215).1" />
<Link Source="10060:[11366..11675).5" Target="10060:[11373..11403).1" />
<Link Source="10060:[11423..11509).1" Target="10060:[11373..11403).1" />
<Link Source="10060:[11990..12013).1" Target="10060:[11373..11403).1" />
<Link Source="10060:[11990..12013).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12028..12063).1" Target="10060:[11373..11403).1" />
<Link Source="10060:[12028..12063).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12078..12091).1" Target="10060:[11366..11675).5" />
<Link Source="10060:[12078..12091).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12117..12185).1" Target="10060:[12078..12091).1" />
<Link Source="10060:[12117..12185).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12199..12238).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12199..12238).2" Target="10060:[11990..12013).1" />
<Link Source="10060:[12199..12238).2" Target="10060:[12199..12238).1" />
<Link Source="10060:[12199..12238).2" Target="10060:[11423..11509).1" />
<Link Source="10060:[12254..13527).1" Target="10060:[12028..12063).1" />
<Link Source="10060:[12254..13527).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12937..12980).1" Target="10060:[12078..12091).1" />
<Link Source="10060:[12937..12980).1" Target="10060:[12254..13527).1" />
<Link Source="10060:[13002..13107).1" Target="10060:[12254..13527).1" />
<Link Source="10060:[13002..13107).2" Target="10060:[12937..12980).1" />
<Link Source="10060:[13002..13107).2" Target="10060:[13002..13107).1" />
<Link Source="10060:[13002..13107).2" Target="10060:[12254..13527).1" />
<Link Source="10060:[13023..13049).1" Target="10060:[13002..13107).2" />
<Link Source="10060:[13023..13049).1" Target="10060:[12254..13527).1" />
<Link Source="10060:[13052..13081).1" Target="10060:[12937..12980).1" />
<Link Source="10060:[13052..13081).1" Target="10345:[30223..30867).3" />
<Link Source="10060:[13052..13081).1" Target="10060:[13023..13049).1" />
<Link Source="10060:[13300..13398).1" Target="10060:[13052..13081).1" />
<Link Source="10060:[13300..13398).1" Target="10060:[11990..12013).1" />
<Link Source="10060:[13300..13398).1" Target="10060:[12254..13527).1" />
<Link Source="10346:[11665..12181).10" Target="10346:[10663..10672).3" />
<Link Source="10346:[11665..12181).10" Target="10060:[13300..13398).1" />
<Link Source="10346:[11710..11746).2" Target="10060:[13300..13398).1" />
<Link Source="10286:[2155..2260).4" Target="10345:[30223..30867).3" />
<Link Source="10286:[2155..2260).4" Target="10346:[11710..11746).2" />
<Link Source="10286:[2191..2245).13" Target="10286:[2155..2260).4" />
<Link Source="10286:[2191..2245).13" Target="10060:[13300..13398).1" />
<Link Source="10286:[2191..2245).13" Target="10346:[11710..11746).2" />
<Link Source="10286:[2191..2245).14" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).14" Target="10346:[11710..11746).2" />
<Link Source="10286:[2198..2244).4" Target="10346:[11710..11746).2" />
<Link Source="10298:[471..492).30" Target="10286:[2191..2245).13" />
<Link Source="10298:[471..492).30" Target="10286:[2198..2244).4" />
<Link Source="10298:[494..511).30" Target="10286:[2191..2245).14" />
<Link Source="10298:[494..511).30" Target="10286:[2198..2244).4" />
<Link Source="10345:[28225..28251).2" Target="10298:[471..492).30" />
<Link Source="10345:[28225..28251).2" Target="10060:[13300..13398).1" />
<Link Source="10345:[28927..28940).3" Target="10060:[13300..13398).1" />
<Link Source="10346:[11665..12181).15" Target="10346:[11665..12181).10" />
<Link Source="10346:[11665..12181).15" Target="10345:[28927..28940).3" />
<Link Source="10346:[11665..12181).15" Target="10060:[13300..13398).1" />
<Link Source="10346:[12205..12212).2" Target="10060:[13300..13398).1" />
<Link Source="10312:[4685..4699).5" Target="10345:[30223..30867).3" />
<Link Source="10354:[3684..3818).13" Target="10319:[20152..24647).3" />
<Link Source="10354:[3684..3818).13" Target="10312:[4685..4699).5" />
<Link Source="10354:[3720..3803).93" Target="10354:[3684..3818).13" />
<Link Source="10354:[3720..3803).93" Target="10060:[13300..13398).1" />
<Link Source="10354:[3720..3803).93" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).93" Target="10312:[4685..4699).5" />
<Link Source="10312:[4680..4787).9" Target="10354:[3720..3803).93" />
<Link Source="10312:[4680..4787).9" Target="10345:[30223..30867).3" />
<Link Source="10312:[4749..4764).2" Target="10345:[30223..30867).3" />
<Link Source="10312:[4749..4764).2" Target="10312:[4680..4787).9" />
<Link Source="10312:[4826..5058).21" Target="10312:[5830..5839).2" />
<Link Source="10312:[4826..5058).21" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).21" Target="10345:[30223..30867).3" />
<Link Source="10312:[4826..5058).22" Target="10345:[30223..30867).3" />
<Link Source="10312:[5087..5101).2" Target="10312:[4749..4764).2" />
<Link Source="10312:[5087..5101).2" Target="10319:[20152..24647).3" />
<Link Source="10319:[43504..43546).8" Target="10319:[20508..20675).10" />
<Link Source="10319:[43504..43546).8" Target="10319:[20152..24647).3" />
<Link Source="10319:[43504..43546).8" Target="10060:[10217..10263).1" />
<Link Source="10319:[43504..43546).8" Target="10060:[13300..13398).1" />
<Link Source="10319:[43562..43590).3" Target="10319:[20152..24647).3" />
<Link Source="10319:[41088..41107).2" Target="10319:[20152..24647).3" />
<Link Source="10319:[41138..41158).2" Target="10319:[20152..24647).3" />
<Link Source="10354:[4919..5009).20" Target="10319:[41088..41107).2" />
<Link Source="10354:[4919..5009).20" Target="10319:[41138..41158).2" />
<Link Source="10354:[4094..4107).28" Target="10354:[4919..5009).20" />
<Link Source="10354:[4094..4107).28" Target="10319:[43504..43546).8" />
<Link Source="10354:[4094..4107).28" Target="10319:[41138..41158).2" />
<Link Source="10319:[41133..41220).3" Target="10354:[4094..4107).28" />
<Link Source="10319:[41133..41220).3" Target="10319:[20152..24647).3" />
<Link Source="10319:[41254..41268).2" Target="10319:[20152..24647).3" />
<Link Source="10354:[4525..4595).3" Target="10319:[41088..41107).2" />
<Link Source="10354:[4525..4595).3" Target="10319:[41254..41268).2" />
<Link Source="10354:[4561..4580).3" Target="10354:[4525..4595).3" />
<Link Source="10354:[4561..4580).3" Target="10319:[43504..43546).8" />
<Link Source="10354:[4561..4580).3" Target="10319:[41254..41268).2" />
<Link Source="10319:[41236..41680).7" Target="10354:[4561..4580).3" />
<Link Source="10319:[41236..41680).7" Target="10319:[20152..24647).3" />
<Link Source="10319:[41302..41665).2" Target="10319:[41236..41680).7" />
<Link Source="10319:[41302..41665).2" Target="10319:[43504..43546).8" />
<Link Source="10319:[41634..41646).1" Target="10319:[41302..41665).2" />
<Link Source="10319:[44751..44765).2" Target="10319:[43562..43590).3" />
<Link Source="10319:[44785..44930).18" Target="10319:[20508..20675).10" />
<Link Source="10319:[44785..44930).18" Target="10319:[43562..43590).3" />
<Link Source="10319:[44785..44930).19" Target="10319:[20508..20675).12" />
<Link Source="10319:[44785..44930).19" Target="10319:[43562..43590).3" />
<Link Source="10319:[84201..84218).2" Target="10319:[43562..43590).3" />
<Link Source="10319:[84233..84242).2" Target="10319:[43562..43590).3" />
<Link Source="10319:[84257..84273).2" Target="10319:[43562..43590).3" />
<Link Source="10319:[84288..84313).2" Target="10319:[44785..44930).18" />
<Link Source="10319:[84288..84313).2" Target="10319:[43562..43590).3" />
<Link Source="10319:[84374..84391).2" Target="10319:[44751..44765).2" />
<Link Source="10319:[84374..84391).2" Target="10319:[43562..43590).3" />
<Link Source="10319:[84406..84447).2" Target="10319:[43562..43590).3" />
<Link Source="10319:[84462..84508).2" Target="10319:[43562..43590).3" />
<Link Source="10319:[84124..109887).2" Target="10319:[41732..45579).2" />
<Link Source="10319:[84124..109887).2" Target="10319:[43562..43590).3" />
<Link Source="10319:[85320..85348).5" Target="10319:[43562..43590).3" />
<Link Source="10319:[85320..85348).6" Target="10319:[84257..84273).2" />
<Link Source="10319:[85320..85348).6" Target="10319:[85320..85348).5" />
<Link Source="10319:[85320..85348).6" Target="10319:[43562..43590).3" />
<Link Source="10319:[85366..85400).5" Target="10319:[43562..43590).3" />
<Link Source="10319:[85366..85400).6" Target="10319:[84288..84313).2" />
<Link Source="10319:[85366..85400).6" Target="10319:[85366..85400).5" />
<Link Source="10319:[85366..85400).6" Target="10319:[43562..43590).3" />
<Link Source="10354:[4561..4580).4" Target="10319:[43562..43590).3" />
<Link Source="10354:[4561..4580).4" Target="10319:[43504..43546).8" />
<Link Source="10319:[85467..85484).3" Target="10319:[43562..43590).3" />
<Link Source="10354:[4094..4107).29" Target="10319:[43562..43590).3" />
<Link Source="10354:[4094..4107).29" Target="10319:[43504..43546).8" />
<Link Source="10319:[104874..105336).4" Target="10354:[4561..4580).4" />
<Link Source="10319:[104874..105336).4" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).5" Target="10319:[104874..105336).4" />
<Link Source="10319:[104874..105336).5" Target="10319:[84124..109887).2" />
<Link Source="10319:[104874..105336).5" Target="10354:[4561..4580).4" />
<Link Source="10319:[105368..106708).2" Target="10319:[44785..44930).19" />
<Link Source="10319:[105368..106708).2" Target="10354:[4561..4580).4" />
<Link Source="10319:[105465..105535).7" Target="10319:[84288..84313).2" />
<Link Source="10319:[105465..105535).7" Target="10319:[105368..106708).2" />
<Link Source="10319:[105465..105535).8" Target="10319:[84257..84273).2" />
<Link Source="10319:[105465..105535).8" Target="10319:[105368..106708).2" />
<Link Source="10319:[76360..76385).2" Target="10319:[105465..105535).7" />
<Link Source="10319:[76360..76385).2" Target="10319:[105368..106708).2" />
<Link Source="10319:[76387..76402).2" Target="10319:[105465..105535).8" />
<Link Source="10319:[76387..76402).2" Target="10319:[105368..106708).2" />
<Link Source="10319:[76494..76582).5" Target="10319:[105368..106708).2" />
<Link Source="10319:[84691..84861).3" Target="10354:[4561..4580).4" />
<Link Source="10319:[84691..84861).3" Target="10319:[105368..106708).2" />
<Link Source="10319:[84691..84861).3" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).3" Target="10319:[43562..43590).3" />
<Link Source="10319:[84764..84846).1" Target="10319:[84257..84273).2" />
<Link Source="10319:[84764..84846).1" Target="10319:[84691..84861).3" />
<Link Source="10319:[84764..84846).2" Target="10319:[84691..84861).3" />
<Link Source="10319:[84764..84846).4" Target="10354:[4561..4580).4" />
<Link Source="10319:[84764..84846).4" Target="10319:[84691..84861).3" />
<Link Source="10319:[84764..84846).5" Target="10319:[84288..84313).2" />
<Link Source="10319:[84764..84846).5" Target="10319:[84691..84861).3" />
<Link Source="10319:[84764..84845).1" Target="10319:[84691..84861).3" />
<Link Source="10306:[358886..358901).1" Target="10319:[84764..84846).1" />
<Link Source="10306:[358886..358901).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358903..358930).1" Target="10319:[84764..84846).2" />
<Link Source="10306:[358903..358930).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358932..358945).1" Target="10319:[84764..84846).4" />
<Link Source="10306:[358932..358945).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358947..358972).1" Target="10319:[84764..84846).5" />
<Link Source="10306:[358947..358972).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358838..360009).1" Target="10319:[84124..109887).2" />
<Link Source="10306:[358838..360009).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358998..359998).1" Target="10306:[358932..358945).1" />
<Link Source="10306:[358998..359998).1" Target="10319:[105368..106708).2" />
<Link Source="10306:[358998..359998).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358998..359998).2" Target="10319:[84764..84845).1" />
<Link Source="10319:[44948..45377).3" Target="10354:[4561..4580).4" />
<Link Source="10319:[44948..45377).3" Target="10319:[105368..106708).2" />
<Link Source="10319:[44948..45377).3" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).3" Target="10319:[43562..43590).3" />
<Link Source="10354:[11428..11441).3" Target="10319:[20152..24647).3" />
<Link Source="10319:[45408..45422).2" Target="10319:[20152..24647).3" />
<Link Source="10325:[4462..4594).2" Target="10319:[105368..106708).2" />
<Link Source="10325:[4556..4582).2" Target="10319:[105368..106708).2" />
<Link Source="10286:[10675..11259).2" Target="10325:[4462..4594).2" />
<Link Source="10286:[10675..11259).2" Target="10325:[4556..4582).2" />
<Link Source="10286:[10741..11248).2" Target="10286:[10675..11259).2" />
<Link Source="10286:[10741..11248).2" Target="10319:[105368..106708).2" />
<Link Source="10286:[10741..11248).2" Target="10325:[4556..4582).2" />
<Link Source="10286:[11085..11098).3" Target="10286:[10741..11248).2" />
<Link Source="10325:[4549..4583).3" Target="10286:[11085..11098).3" />
<Link Source="10325:[4549..4583).3" Target="10319:[105368..106708).2" />
<Link Source="10286:[10600..10652).5" Target="10325:[4549..4583).3" />
<Link Source="10286:[10600..10652).5" Target="10319:[105368..106708).2" />
<Link Source="10287:[2306..2328).2" Target="10286:[10600..10652).5" />
<Link Source="10287:[2306..2328).2" Target="10319:[20152..24647).3" />
<Link Source="10287:[2377..2471).3" Target="10354:[4561..4580).4" />
<Link Source="10287:[2377..2471).3" Target="10319:[20152..24647).3" />
<Link Source="10287:[2680..2780).1" Target="10354:[4561..4580).4" />
<Link Source="10287:[718..757).1" Target="10287:[2306..2328).2" />
<Link Source="10287:[718..757).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[666..1076).1" Target="10354:[4561..4580).4" />
<Link Source="10287:[666..1076).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[791..833).1" Target="10287:[718..757).1" />
<Link Source="10287:[791..833).1" Target="10287:[2306..2328).2" />
<Link Source="10287:[791..833).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[851..871).1" Target="10287:[718..757).1" />
<Link Source="10287:[851..871).1" Target="10287:[666..1076).1" />
<Link Source="10287:[851..871).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[912..927).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[912..919).1" Target="10287:[912..927).1" />
<Link Source="10287:[912..919).1" Target="10287:[666..1076).1" />
<Link Source="10287:[912..919).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[945..972).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[945..963).1" Target="10287:[945..972).1" />
<Link Source="10287:[945..963).1" Target="10287:[666..1076).1" />
<Link Source="10287:[945..963).1" Target="10287:[2680..2780).1" />
<Link Source="10319:[15383..15396).1" Target="10319:[13863..13947).1" />
<Link Source="10287:[1609..1643).1" Target="10354:[4561..4580).4" />
<Link Source="10287:[1609..1643).1" Target="10319:[15383..15396).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[1609..1643).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[851..871).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[2306..2328).2" />
<Link Source="10287:[1612..1643).1" Target="10319:[15383..15396).1" />
<Link Source="10319:[15379..15933).1" Target="10287:[1612..1643).1" />
<Link Source="10319:[15379..15933).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15548..15561).1" Target="10319:[15379..15933).1" />
<Link Source="10319:[15544..15884).1" Target="10319:[15548..15561).1" />
<Link Source="10319:[15544..15884).1" Target="10319:[15379..15933).1" />
<Link Source="10319:[15783..15809).1" Target="10319:[15544..15884).1" />
<Link Source="10287:[1474..1497).1" Target="10354:[4561..4580).4" />
<Link Source="10287:[1474..1497).1" Target="10319:[15783..15809).1" />
<Link Source="10287:[1477..1497).1" Target="10287:[1474..1497).1" />
<Link Source="10287:[1477..1497).1" Target="10287:[851..871).1" />
<Link Source="10287:[1477..1497).1" Target="10319:[15783..15809).1" />
<Link Source="10319:[15783..15865).1" Target="10287:[1477..1497).1" />
<Link Source="10319:[15783..15865).1" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).2" Target="10319:[14862..16302).1" />
<Link Source="10319:[15783..15865).2" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).3" Target="10319:[14931..14954).1" />
<Link Source="10319:[15783..15865).3" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).4" Target="10319:[14956..14981).1" />
<Link Source="10319:[15783..15865).4" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).6" Target="10319:[15544..15884).1" />
<Link Source="10286:[21504..21529).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21504..21529).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21531..21544).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21531..21544).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21546..21561).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21546..21561).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21563..21583).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21563..21583).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21462..21711).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21462..21711).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).1" Target="10286:[21504..21529).1" />
<Link Source="10286:[21609..21700).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).2" Target="10286:[21531..21544).1" />
<Link Source="10286:[21609..21700).2" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).3" Target="10286:[21546..21561).1" />
<Link Source="10286:[21609..21700).3" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).4" Target="10286:[21563..21583).1" />
<Link Source="10286:[21609..21700).4" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21699).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[22044..22069).1" Target="10286:[21609..21700).1" />
<Link Source="10286:[22044..22069).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22071..22084).1" Target="10286:[21609..21700).2" />
<Link Source="10286:[22071..22084).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22086..22108).1" Target="10286:[21609..21700).3" />
<Link Source="10286:[22086..22108).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22110..22130).1" Target="10286:[21609..21700).4" />
<Link Source="10286:[22110..22130).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22002..22611).1" Target="10286:[21462..21711).1" />
<Link Source="10286:[22002..22611).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22156..22600).1" Target="10286:[22071..22084).1" />
<Link Source="10286:[22156..22600).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[22156..22600).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22421..22557).1" Target="10286:[22044..22069).1" />
<Link Source="10286:[22421..22557).1" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22557).2" Target="10286:[22071..22084).1" />
<Link Source="10286:[22421..22557).2" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22557).3" Target="10286:[22086..22108).1" />
<Link Source="10286:[22421..22557).3" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22557).4" Target="10286:[22110..22130).1" />
<Link Source="10286:[22421..22557).4" Target="10286:[22156..22600).1" />
<Link Source="10286:[22493..22522).1" Target="10286:[22156..22600).1" />
<Link Source="10307:[1439..1480).1" Target="10286:[22002..22611).1" />
<Link Source="10307:[1439..1480).1" Target="10286:[22493..22522).1" />
<Link Source="10307:[1445..1478).1" Target="10307:[1439..1480).1" />
<Link Source="10307:[1445..1478).1" Target="10319:[15783..15865).1" />
<Link Source="10307:[1445..1478).1" Target="10286:[22493..22522).1" />
<Link Source="10286:[22421..22557).5" Target="10307:[1445..1478).1" />
<Link Source="10286:[22421..22557).5" Target="10286:[22156..22600).1" />
<Link Source="10286:[22524..22543).1" Target="10286:[22156..22600).1" />
<Link Source="10286:[15519..15926).1" Target="10286:[22002..22611).1" />
<Link Source="10286:[15519..15926).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15568..15597).1" Target="10286:[22524..22543).1" />
<Link Source="10307:[1439..1480).2" Target="10286:[15519..15926).1" />
<Link Source="10307:[1439..1480).2" Target="10286:[15568..15597).1" />
<Link Source="10307:[1445..1478).2" Target="10307:[1439..1480).2" />
<Link Source="10307:[1445..1478).2" Target="10319:[15783..15865).1" />
<Link Source="10307:[1445..1478).2" Target="10286:[15568..15597).1" />
<Link Source="10286:[15555..15598).1" Target="10307:[1445..1478).2" />
<Link Source="10286:[15555..15598).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15616..15690).1" Target="10286:[15555..15598).1" />
<Link Source="10286:[15616..15690).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15616..15690).2" Target="10286:[15555..15598).1" />
<Link Source="10286:[15616..15690).2" Target="10319:[15783..15865).1" />
<Link Source="10286:[15616..15690).2" Target="EXTERNAL" />
<Link Source="10286:[15616..15690).2" Target="10286:[22524..22543).1" />
<Link Source="10286:[15715..15910).1" Target="10286:[15555..15598).1" />
<Link Source="10286:[15715..15910).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15708..15911).1" Target="10286:[15555..15598).1" />
<Link Source="10286:[15708..15911).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[15708..15911).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[22421..22557).7" Target="10286:[15708..15911).1" />
<Link Source="10286:[22421..22557).7" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22557).9" Target="10286:[22002..22611).1" />
<Link Source="10286:[22421..22557).9" Target="10319:[15783..15865).1" />
<Link Source="10286:[22421..22557).9" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22556).1" Target="10286:[22156..22600).1" />
<Link Source="10286:[23056..23081).1" Target="10286:[22421..22557).1" />
<Link Source="10286:[23056..23081).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23096..23109).1" Target="10286:[22421..22557).2" />
<Link Source="10286:[23096..23109).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23124..23146).1" Target="10286:[22421..22557).3" />
<Link Source="10286:[23124..23146).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23161..23181).1" Target="10286:[22421..22557).4" />
<Link Source="10286:[23161..23181).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23196..23220).1" Target="10286:[22421..22557).5" />
<Link Source="10286:[23196..23220).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23235..23266).1" Target="10286:[22421..22557).7" />
<Link Source="10286:[23235..23266).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23281..23301).1" Target="10286:[22421..22557).9" />
<Link Source="10286:[23281..23301).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23327..23364).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[23327..23364).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23380..23684).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[23380..23684).1" Target="10286:[23327..23364).1" />
<Link Source="10286:[23380..23684).1" Target="EXTERNAL" />
<Link Source="10286:[23380..23684).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23893..24026).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[23893..24026).1" Target="10286:[23327..23364).1" />
<Link Source="10286:[23893..24026).1" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[24450..24529).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[24450..24529).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[24450..24529).2" Target="10286:[23235..23266).1" />
<Link Source="10286:[24450..24529).2" Target="10286:[22421..22556).1" />
<Link Source="10286:[24450..24529).3" Target="10286:[24450..24529).1" />
<Link Source="10286:[24450..24529).3" Target="10286:[24450..24529).2" />
<Link Source="10286:[24450..24529).3" Target="10286:[23327..23364).1" />
<Link Source="10286:[24450..24529).3" Target="10286:[22421..22556).1" />
<Link Source="10286:[24545..24641).1" Target="10286:[23161..23181).1" />
<Link Source="10286:[24545..24641).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[24655..25349).1" Target="10286:[24545..24641).1" />
<Link Source="10286:[24655..25349).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).1" Target="10286:[23056..23081).1" />
<Link Source="10286:[25365..25492).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).2" Target="10286:[24450..24529).3" />
<Link Source="10286:[25365..25492).2" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).3" Target="10286:[23124..23146).1" />
<Link Source="10286:[25365..25492).3" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).4" Target="10286:[23196..23220).1" />
<Link Source="10286:[25365..25492).4" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).5" Target="10286:[23281..23301).1" />
<Link Source="10286:[25365..25492).5" Target="10286:[22421..22556).1" />
<Link Source="10286:[25386..25491).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[26910..26935).1" Target="10286:[25365..25492).1" />
<Link Source="10286:[26910..26935).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26937..26950).1" Target="10286:[25365..25492).2" />
<Link Source="10286:[26937..26950).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26952..26974).1" Target="10286:[25365..25492).3" />
<Link Source="10286:[26952..26974).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26976..27000).1" Target="10286:[25365..25492).4" />
<Link Source="10286:[26976..27000).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27002..27022).1" Target="10286:[25365..25492).5" />
<Link Source="10286:[27002..27022).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27048..27088).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27048..27088).2" Target="10286:[26910..26935).1" />
<Link Source="10286:[27048..27088).2" Target="10286:[27048..27088).1" />
<Link Source="10286:[27048..27088).2" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).1" Target="10286:[26937..26950).1" />
<Link Source="10286:[27104..27192).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).2" Target="10286:[26976..27000).1" />
<Link Source="10286:[27104..27192).2" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).3" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).5" Target="10286:[27104..27192).1" />
<Link Source="10286:[27104..27192).5" Target="10286:[27104..27192).2" />
<Link Source="10286:[27104..27192).5" Target="10286:[27104..27192).3" />
<Link Source="10286:[27104..27192).5" Target="10286:[24450..24529).3" />
<Link Source="10286:[27104..27192).5" Target="10286:[25386..25491).1" />
<Link Source="10286:[27208..27236).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27250..27722).1" Target="10286:[27104..27192).5" />
<Link Source="10286:[27250..27722).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27738..27845).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27738..27845).2" Target="10286:[27208..27236).1" />
<Link Source="10286:[27738..27845).2" Target="10286:[27738..27845).1" />
<Link Source="10286:[27738..27845).2" Target="10286:[25386..25491).1" />
<Link Source="10286:[27861..27873).1" Target="10286:[27104..27192).5" />
<Link Source="10286:[27861..27873).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26281..26812).1" Target="10286:[27861..27873).1" />
<Link Source="10286:[26281..26812).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[26450..26769).1" Target="10286:[24545..24641).1" />
<Link Source="10286:[26450..26769).1" Target="10286:[26281..26812).1" />
<Link Source="10286:[22421..22557).10" Target="10286:[22156..22600).1" />
<Link Source="10286:[21609..21700).5" Target="10319:[15783..15865).6" />
<Link Source="10319:[15904..15918).1" Target="10354:[4561..4580).4" />
<Link Source="10319:[15904..15918).1" Target="10319:[15379..15933).1" />
<Link Source="10319:[13962..14050).1" Target="10319:[15904..15918).1" />
<Link Source="10319:[13962..14050).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).2" Target="10319:[13710..13735).1" />
<Link Source="10319:[13962..14050).2" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).3" Target="10319:[13685..13708).1" />
<Link Source="10319:[13962..14050).3" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).4" Target="10319:[13737..13783).1" />
<Link Source="10319:[13962..14050).4" Target="25002:[4395..4432).1" />
<Link Source="10319:[13969..14029).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[51762..51815).2" Target="10319:[13962..14050).1" />
<Link Source="10319:[51762..51815).2" Target="10319:[13969..14029).1" />
<Link Source="10319:[51817..51842).2" Target="10319:[13962..14050).2" />
<Link Source="10319:[51817..51842).2" Target="10319:[13969..14029).1" />
<Link Source="10319:[51844..51861).2" Target="10319:[13962..14050).3" />
<Link Source="10319:[51844..51861).2" Target="10319:[13969..14029).1" />
<Link Source="10319:[51863..51909).2" Target="10319:[13962..14050).4" />
<Link Source="10319:[51863..51909).2" Target="10319:[13969..14029).1" />
<Link Source="10319:[51698..52285).2" Target="10319:[13647..14061).1" />
<Link Source="10319:[51698..52285).2" Target="10319:[13969..14029).1" />
<Link Source="10319:[51939..51953).2" Target="10319:[13969..14029).1" />
<Link Source="10287:[1680..1716).2" Target="10319:[51762..51815).2" />
<Link Source="10287:[1680..1716).2" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1690).1" Target="10287:[1680..1716).2" />
<Link Source="10287:[1683..1690).1" Target="10287:[912..919).1" />
<Link Source="10287:[1683..1690).1" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1716).3" Target="10287:[1683..1690).1" />
<Link Source="10287:[1683..1716).3" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).3" Target="10319:[51939..51953).2" />
<Link Source="10319:[51935..52244).3" Target="10287:[1683..1716).3" />
<Link Source="10319:[51935..52244).3" Target="10319:[13969..14029).1" />
<Link Source="10319:[13969..14049).1" Target="25002:[4395..4432).1" />
<Link Source="10287:[1474..1497).2" Target="10319:[51762..51815).2" />
<Link Source="10287:[1474..1497).2" Target="10319:[13969..14049).1" />
<Link Source="10287:[1477..1497).2" Target="10287:[1474..1497).2" />
<Link Source="10287:[1477..1497).2" Target="10287:[851..871).1" />
<Link Source="10287:[1477..1497).2" Target="10319:[13969..14049).1" />
<Link Source="25002:[4395..4432).38" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).38" Target="10287:[1477..1497).2" />
<Link Source="25002:[4395..4432).38" Target="10286:[27104..27192).5" />
<Link Source="25002:[4395..4432).38" Target="10287:[2306..2328).2" />
<Link Source="25002:[4395..4432).38" Target="28001:[21850..21895).1" />
<Link Source="10313:[1230..1280).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1230..1280).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1295..1337).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1295..1337).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1352..1376).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1352..1376).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1391..1416).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1391..1416).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1171..3563).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1171..3563).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1442..1480).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1494..2257).1" Target="10313:[1230..1280).1" />
<Link Source="10313:[1494..2257).1" Target="25002:[4395..4432).38" />
<Link Source="10313:[1494..2257).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[2273..2310).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[2324..3491).1" Target="10313:[1295..1337).1" />
<Link Source="10313:[2324..3491).1" Target="25002:[4395..4432).38" />
<Link Source="10313:[2324..3491).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[2390..2435).1" Target="10313:[2324..3491).1" />
<Link Source="10313:[2453..3476).1" Target="10313:[1295..1337).1" />
<Link Source="10313:[2453..3476).1" Target="10313:[2324..3491).1" />
<Link Source="10313:[2523..2541).1" Target="10313:[2453..3476).1" />
<Link Source="10313:[2523..2541).1" Target="25002:[4395..4432).38" />
<Link Source="10313:[2563..2675).1" Target="10313:[2523..2541).1" />
<Link Source="10313:[2563..2675).1" Target="10313:[2453..3476).1" />
<Link Source="10313:[2699..3019).1" Target="10313:[2453..3476).1" />
<Link Source="10313:[2699..3019).2" Target="10313:[1442..1480).1" />
<Link Source="10313:[2699..3019).2" Target="10313:[2699..3019).1" />
<Link Source="10313:[2699..3019).2" Target="10313:[2453..3476).1" />
<Link Source="10313:[3043..3457).1" Target="10313:[2523..2541).1" />
<Link Source="10313:[3043..3457).1" Target="10313:[2453..3476).1" />
<Link Source="10313:[3043..3457).2" Target="10313:[2390..2435).1" />
<Link Source="10313:[3043..3457).2" Target="10313:[3043..3457).1" />
<Link Source="10313:[3043..3457).2" Target="10313:[2453..3476).1" />
<Link Source="10313:[3304..3457).1" Target="10313:[1352..1376).1" />
<Link Source="10313:[3304..3457).1" Target="10313:[3043..3457).2" />
<Link Source="10313:[3378..3434).1" Target="10313:[2453..3476).1" />
<Link Source="10313:[3378..3434).1" Target="10313:[3304..3457).1" />
<Link Source="10313:[3378..3434).2" Target="10313:[1391..1416).1" />
<Link Source="10313:[3378..3434).2" Target="10313:[3304..3457).1" />
<Link Source="10313:[3378..3433).1" Target="10313:[3304..3457).1" />
<Link Source="10313:[720..733).1" Target="10313:[3378..3434).1" />
<Link Source="10313:[720..733).1" Target="10313:[3378..3433).1" />
<Link Source="10313:[735..760).1" Target="10313:[3378..3434).2" />
<Link Source="10313:[735..760).1" Target="10313:[3378..3433).1" />
<Link Source="10313:[666..931).1" Target="10313:[1171..3563).1" />
<Link Source="10313:[666..931).1" Target="10313:[3378..3433).1" />
<Link Source="10313:[786..826).1" Target="10313:[720..733).1" />
<Link Source="10313:[786..826).1" Target="10313:[3378..3433).1" />
<Link Source="10313:[806..825).1" Target="10313:[3378..3433).1" />
<Link Source="10313:[979..992).1" Target="10313:[786..826).1" />
<Link Source="10313:[979..992).1" Target="10313:[806..825).1" />
<Link Source="10313:[1018..1051).1" Target="10313:[979..992).1" />
<Link Source="10313:[1018..1051).1" Target="25002:[4395..4432).38" />
<Link Source="10313:[1018..1051).1" Target="10313:[806..825).1" />
<Link Source="10313:[1065..1148).1" Target="10313:[806..825).1" />
<Link Source="10313:[1065..1148).2" Target="10313:[1018..1051).1" />
<Link Source="10313:[1065..1148).2" Target="25002:[4395..4432).38" />
<Link Source="10313:[1065..1148).2" Target="10313:[1065..1148).1" />
<Link Source="10313:[1065..1148).2" Target="10313:[806..825).1" />
<Link Source="10313:[1072..1093).1" Target="10313:[1065..1148).2" />
<Link Source="10313:[1072..1093).1" Target="10313:[806..825).1" />
<Link Source="10313:[840..920).1" Target="10313:[720..733).1" />
<Link Source="10313:[840..920).1" Target="10313:[3378..3433).1" />
<Link Source="10313:[840..920).2" Target="10313:[1072..1093).1" />
<Link Source="10313:[840..920).2" Target="10313:[3378..3433).1" />
<Link Source="10313:[840..920).3" Target="10313:[720..733).1" />
<Link Source="10313:[840..920).3" Target="25002:[4395..4432).38" />
<Link Source="10313:[840..920).3" Target="10313:[1072..1093).1" />
<Link Source="10313:[840..920).3" Target="10313:[3378..3433).1" />
<Link Source="10313:[840..920).4" Target="10313:[735..760).1" />
<Link Source="10313:[840..920).4" Target="10313:[3378..3433).1" />
<Link Source="10313:[847..919).1" Target="10313:[3378..3433).1" />
<Link Source="10313:[3733..3747).1" Target="10313:[840..920).1" />
<Link Source="10313:[3733..3747).1" Target="10313:[847..919).1" />
<Link Source="10313:[3749..3766).1" Target="10313:[840..920).2" />
<Link Source="10313:[3749..3766).1" Target="10313:[847..919).1" />
<Link Source="10313:[3768..3779).1" Target="10313:[840..920).3" />
<Link Source="10313:[3768..3779).1" Target="10313:[847..919).1" />
<Link Source="10313:[3781..3806).1" Target="10313:[840..920).4" />
<Link Source="10313:[3781..3806).1" Target="10313:[847..919).1" />
<Link Source="10313:[3691..5083).1" Target="10313:[666..931).1" />
<Link Source="10313:[3691..5083).1" Target="10313:[847..919).1" />
<Link Source="10313:[3832..3924).1" Target="10313:[3768..3779).1" />
<Link Source="10313:[3832..3924).1" Target="10313:[847..919).1" />
<Link Source="10313:[3940..4044).1" Target="10313:[3691..5083).1" />
<Link Source="10313:[3940..4044).1" Target="10313:[1072..1093).1" />
<Link Source="10313:[3940..4044).1" Target="10313:[847..919).1" />
<Link Source="10313:[3940..4044).2" Target="EXTERNAL" />
<Link Source="10313:[3940..4044).2" Target="10313:[847..919).1" />
<Link Source="10313:[4060..5043).1" Target="10313:[3691..5083).1" />
<Link Source="10313:[4060..5043).1" Target="10313:[847..919).1" />
<Link Source="10313:[4060..5043).2" Target="10313:[847..919).1" />
<Link Source="10313:[4210..4315).1" Target="10313:[4060..5043).1" />
<Link Source="10313:[4335..4374).1" Target="10313:[4060..5043).1" />
<Link Source="10313:[4392..4543).1" Target="10313:[4335..4374).1" />
<Link Source="10313:[4392..4543).1" Target="10313:[4060..5043).1" />
<Link Source="10313:[4392..4543).2" Target="10313:[4060..5043).1" />
<Link Source="10313:[4698..4727).1" Target="10313:[4060..5043).1" />
<Link Source="10286:[8381..8389).1" Target="10313:[4060..5043).1" />
<Link Source="10286:[8381..8389).1" Target="10313:[4698..4727).1" />
<Link Source="10286:[8384..8389).1" Target="10313:[4698..4727).1" />
<Link Source="10313:[4676..4801).1" Target="10286:[8384..8389).1" />
<Link Source="10313:[4676..4801).1" Target="10313:[4060..5043).1" />
<Link Source="10313:[4676..4801).2" Target="10313:[3940..4044).1" />
<Link Source="10313:[4676..4801).2" Target="10313:[4676..4801).1" />
<Link Source="10313:[4676..4801).2" Target="10313:[4060..5043).1" />
<Link Source="10313:[4825..4858).1" Target="10313:[4060..5043).1" />
<Link Source="10313:[5095..5688).1" Target="10313:[4060..5043).1" />
<Link Source="10313:[5095..5688).1" Target="10313:[4825..4858).1" />
<Link Source="10313:[5190..5219).1" Target="10313:[4825..4858).1" />
<Link Source="10307:[1439..1480).3" Target="10313:[5095..5688).1" />
<Link Source="10307:[1439..1480).3" Target="10313:[5190..5219).1" />
<Link Source="10307:[1445..1478).3" Target="10307:[1439..1480).3" />
<Link Source="10307:[1445..1478).3" Target="10313:[3940..4044).1" />
<Link Source="10307:[1445..1478).3" Target="10313:[5190..5219).1" />
<Link Source="10313:[5159..5220).1" Target="10307:[1445..1478).3" />
<Link Source="10313:[5159..5220).1" Target="10313:[4825..4858).1" />
<Link Source="10313:[5236..5677).1" Target="10313:[5159..5220).1" />
<Link Source="10313:[5236..5677).1" Target="10313:[3940..4044).1" />
<Link Source="10313:[5236..5677).1" Target="10313:[4825..4858).1" />
<Link Source="10313:[5488..5662).1" Target="10313:[5159..5220).1" />
<Link Source="10313:[5488..5662).1" Target="10313:[3940..4044).1" />
<Link Source="10313:[5488..5662).1" Target="EXTERNAL" />
<Link Source="10313:[5488..5662).1" Target="10313:[5236..5677).1" />
<Link Source="10313:[5608..5633).1" Target="10313:[5236..5677).1" />
<Link Source="10346:[7562..7572).1" Target="10313:[5608..5633).1" />
<Link Source="10346:[7562..7572).1" Target="10313:[3940..4044).1" />
<Link Source="10313:[5488..5662).2" Target="10346:[7562..7572).1" />
<Link Source="10313:[5488..5662).2" Target="10313:[5236..5677).1" />
<Link Source="10313:[4821..5028).1" Target="10313:[5488..5662).2" />
<Link Source="10313:[4821..5028).1" Target="10313:[4060..5043).1" />
<Link Source="10313:[4996..5009).1" Target="10313:[4821..5028).1" />
<Link Source="10313:[840..920).5" Target="10313:[4996..5009).1" />
<Link Source="10313:[840..920).5" Target="10313:[3378..3433).1" />
<Link Source="10313:[3507..3523).1" Target="10313:[1442..1480).1" />
<Link Source="10313:[3507..3523).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[3537..3552).1" Target="10313:[2390..2435).1" />
<Link Source="10313:[3537..3552).1" Target="10313:[3043..3457).2" />
<Link Source="10313:[3537..3552).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[20392..20435).1" Target="10319:[20002..20025).2" />
<Link Source="10319:[20392..20435).1" Target="10346:[7562..7572).1" />
<Link Source="10319:[20392..20435).2" Target="10319:[20027..20052).2" />
<Link Source="10319:[20392..20435).2" Target="10346:[7562..7572).1" />
<Link Source="10319:[20399..20434).1" Target="10346:[7562..7572).1" />
<Link Source="10319:[27647..28051).1" Target="10319:[20392..20435).1" />
<Link Source="10319:[27647..28051).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[27647..28051).2" Target="10319:[20392..20435).2" />
<Link Source="10319:[27647..28051).2" Target="10319:[20399..20434).1" />
<Link Source="10319:[27647..28051).3" Target="10319:[19916..30085).2" />
<Link Source="10319:[27647..28051).3" Target="10319:[20399..20434).1" />
<Link Source="10319:[27790..27840).1" Target="10319:[27647..28051).1" />
<Link Source="10319:[27790..27840).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[27858..27923).1" Target="10319:[27790..27840).1" />
<Link Source="10319:[27858..27923).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[27858..27923).2" Target="10319:[27647..28051).2" />
<Link Source="10319:[27858..27923).2" Target="10319:[20399..20434).1" />
<Link Source="10319:[27869..27922).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[39111..39136).1" Target="10319:[27858..27923).1" />
<Link Source="10319:[39111..39136).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[39138..39163).1" Target="10319:[27858..27923).2" />
<Link Source="10319:[39138..39163).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[39062..39279).1" Target="10319:[27647..28051).3" />
<Link Source="10319:[39062..39279).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[39189..39268).1" Target="10319:[39111..39136).1" />
<Link Source="10319:[39189..39268).1" Target="10346:[7562..7572).1" />
<Link Source="10319:[39189..39268).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[39189..39268).6" Target="10319:[39138..39163).1" />
<Link Source="10319:[39189..39268).6" Target="10319:[27869..27922).1" />
<Link Source="10319:[39189..39268).7" Target="10319:[39111..39136).1" />
<Link Source="10319:[39189..39268).7" Target="10319:[27869..27922).1" />
<Link Source="10319:[39196..39267).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[73460..73478).1" Target="10319:[39189..39268).1" />
<Link Source="10319:[73460..73478).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73480..73505).1" Target="10319:[39189..39268).6" />
<Link Source="10319:[73480..73505).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73507..73522).1" Target="10319:[39189..39268).7" />
<Link Source="10319:[73507..73522).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73420..73626).1" Target="10319:[39062..39279).1" />
<Link Source="10319:[73420..73626).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73548..73615).1" Target="10319:[73420..73626).1" />
<Link Source="10319:[73548..73615).1" Target="10319:[39189..39268).1" />
<Link Source="10319:[73548..73615).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73548..73615).2" Target="10319:[73460..73478).1" />
<Link Source="10319:[73548..73615).2" Target="10319:[39196..39267).1" />
<Link Source="10319:[73548..73615).3" Target="10319:[73507..73522).1" />
<Link Source="10319:[73548..73615).3" Target="10319:[39196..39267).1" />
<Link Source="10319:[73548..73615).4" Target="10319:[73480..73505).1" />
<Link Source="10319:[73548..73615).4" Target="10319:[39196..39267).1" />
<Link Source="10319:[73555..73614).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73685..73714).1" Target="10319:[73548..73615).1" />
<Link Source="10319:[73685..73714).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73716..73734).1" Target="10319:[73548..73615).2" />
<Link Source="10319:[73716..73734).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73736..73751).1" Target="10319:[73548..73615).3" />
<Link Source="10319:[73736..73751).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73753..73778).1" Target="10319:[73548..73615).4" />
<Link Source="10319:[73753..73778).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73804..73868).1" Target="10319:[73716..73734).1" />
<Link Source="10319:[73804..73868).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73804..73868).2" Target="10319:[73685..73714).1" />
<Link Source="10319:[73804..73868).2" Target="10319:[73804..73868).1" />
<Link Source="10319:[73804..73868).2" Target="10319:[39189..39268).1" />
<Link Source="10319:[73804..73868).2" Target="10319:[73555..73614).1" />
<Link Source="10319:[73882..73975).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73882..73975).2" Target="10319:[73804..73868).2" />
<Link Source="10319:[73882..73975).2" Target="10319:[73882..73975).1" />
<Link Source="10319:[73882..73975).2" Target="10319:[73555..73614).1" />
<Link Source="10319:[73989..74045).1" Target="10319:[73804..73868).2" />
<Link Source="10319:[73989..74045).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73989..74045).2" Target="10319:[73753..73778).1" />
<Link Source="10319:[73989..74045).2" Target="10319:[73555..73614).1" />
<Link Source="10319:[73989..74045).3" Target="10319:[73736..73751).1" />
<Link Source="10319:[73989..74045).3" Target="10319:[73555..73614).1" />
<Link Source="10319:[73989..74044).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[76345..76358).3" Target="10319:[73989..74045).1" />
<Link Source="10319:[76345..76358).3" Target="10319:[73989..74044).1" />
<Link Source="10319:[76360..76385).3" Target="10319:[73989..74045).2" />
<Link Source="10319:[76360..76385).3" Target="10319:[73989..74044).1" />
<Link Source="10319:[76387..76402).3" Target="10319:[73989..74045).3" />
<Link Source="10319:[76387..76402).3" Target="10319:[73989..74044).1" />
<Link Source="10319:[76494..76582).9" Target="10319:[73989..74044).1" />
<Link Source="10319:[76494..76582).10" Target="10319:[76345..76358).3" />
<Link Source="10319:[76494..76582).10" Target="10319:[76494..76582).9" />
<Link Source="10319:[76494..76582).10" Target="10319:[73989..74044).1" />
<Link Source="10319:[74059..74077).1" Target="10319:[73804..73868).2" />
<Link Source="10319:[74059..74077).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[27941..28036).1" Target="10319:[27790..27840).1" />
<Link Source="10319:[27941..28036).1" Target="10319:[76345..76358).3" />
<Link Source="10319:[27941..28036).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[27975..28028).1" Target="10319:[20399..20434).1" />
<Link Source="10286:[10010..10027).3" Target="10319:[27941..28036).1" />
<Link Source="10286:[10010..10027).3" Target="10319:[27975..28028).1" />
<Link Source="10286:[9966..10197).3" Target="10319:[27647..28051).3" />
<Link Source="10286:[9966..10197).3" Target="10319:[27975..28028).1" />
<Link Source="10319:[27941..28036).4" Target="10319:[74059..74077).1" />
<Link Source="10319:[27941..28036).4" Target="10319:[20399..20434).1" />
<Link Source="10319:[28030..28034).1" Target="10319:[20399..20434).1" />
<Link Source="10287:[2888..2927).1" Target="10319:[27941..28036).4" />
<Link Source="10287:[2888..2927).1" Target="10319:[28030..28034).1" />
<Link Source="10287:[2961..3037).1" Target="10287:[2888..2927).1" />
<Link Source="10287:[2961..3037).1" Target="10319:[28030..28034).1" />
<Link Source="10287:[2961..3037).2" Target="10319:[28030..28034).1" />
<Link Source="10287:[2968..3036).1" Target="10319:[28030..28034).1" />
<Link Source="10287:[718..757).2" Target="10287:[2961..3037).1" />
<Link Source="10287:[718..757).2" Target="10287:[2968..3036).1" />
<Link Source="10287:[666..1076).2" Target="10287:[2961..3037).2" />
<Link Source="10287:[666..1076).2" Target="10287:[2968..3036).1" />
<Link Source="10287:[791..833).3" Target="10287:[718..757).2" />
<Link Source="10287:[791..833).3" Target="10287:[2968..3036).1" />
<Link Source="10287:[912..927).2" Target="10287:[2968..3036).1" />
<Link Source="10287:[912..919).2" Target="10287:[912..927).2" />
<Link Source="10287:[912..919).2" Target="10287:[666..1076).2" />
<Link Source="10287:[912..919).2" Target="10287:[2968..3036).1" />
<Link Source="10287:[945..972).2" Target="10287:[2968..3036).1" />
<Link Source="10287:[945..963).2" Target="10287:[945..972).2" />
<Link Source="10287:[945..963).2" Target="10287:[666..1076).2" />
<Link Source="10287:[945..963).2" Target="10287:[2968..3036).1" />
<Link Source="10319:[27941..28036).5" Target="10287:[2961..3037).2" />
<Link Source="10319:[27941..28036).5" Target="10319:[20399..20434).1" />
<Link Source="10319:[27941..28036).7" Target="10319:[20399..20434).1" />
<Link Source="10319:[27941..28036).9" Target="10286:[10010..10027).3" />
<Link Source="10319:[27941..28036).9" Target="10319:[27941..28036).5" />
<Link Source="10319:[27941..28036).9" Target="10319:[27941..28036).7" />
<Link Source="10319:[27941..28036).9" Target="10287:[718..757).2" />
<Link Source="10319:[27941..28036).9" Target="10287:[912..919).2" />
<Link Source="10319:[27941..28036).9" Target="10287:[945..963).2" />
<Link Source="10319:[27941..28036).9" Target="10319:[20399..20434).1" />
<Link Source="10286:[21504..21529).2" Target="10319:[27941..28036).9" />
<Link Source="10286:[21546..21561).2" Target="10319:[27941..28036).9" />
<Link Source="10286:[21563..21583).2" Target="10319:[27941..28036).9" />
<Link Source="10286:[22044..22069).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[22044..22069).2" Target="10319:[27941..28036).9" />
<Link Source="10286:[22086..22108).2" Target="10286:[21546..21561).2" />
<Link Source="10286:[22086..22108).2" Target="10319:[27941..28036).9" />
<Link Source="10286:[22110..22130).2" Target="10286:[21563..21583).2" />
<Link Source="10286:[22110..22130).2" Target="10319:[27941..28036).9" />
<Link Source="10286:[22421..22557).13" Target="10286:[22086..22108).2" />
<Link Source="10286:[22421..22557).13" Target="10286:[21504..21529).2" />
<Link Source="10286:[22421..22557).14" Target="10286:[22110..22130).2" />
<Link Source="10286:[22421..22557).14" Target="10286:[21504..21529).2" />
<Link Source="10286:[15616..15690).6" Target="10286:[21504..21529).2" />
<Link Source="10286:[15616..15690).7" Target="10286:[21504..21529).2" />
<Link Source="10286:[15616..15690).7" Target="10319:[27941..28036).9" />
<Link Source="10286:[15616..15690).7" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[23056..23081).2" Target="10286:[22044..22069).2" />
<Link Source="10286:[23056..23081).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[23124..23146).2" Target="10286:[22421..22557).13" />
<Link Source="10286:[23124..23146).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[23161..23181).2" Target="10286:[22421..22557).14" />
<Link Source="10286:[23161..23181).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[23281..23301).2" Target="10286:[22044..22069).2" />
<Link Source="10286:[23281..23301).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[23380..23684).8" Target="10286:[21504..21529).2" />
<Link Source="10286:[23380..23684).8" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).3" Target="10286:[21504..21529).2" />
<Link Source="10286:[23893..24026).3" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).3" Target="10286:[23161..23181).2" />
<Link Source="10286:[24545..24641).3" Target="10286:[21504..21529).2" />
<Link Source="10286:[24655..25349).2" Target="10286:[24545..24641).3" />
<Link Source="10286:[24655..25349).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[26910..26935).2" Target="10286:[23056..23081).2" />
<Link Source="10286:[26910..26935).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[26952..26974).2" Target="10286:[23124..23146).2" />
<Link Source="10286:[26952..26974).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[27002..27022).2" Target="10286:[23281..23301).2" />
<Link Source="10286:[27002..27022).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[27048..27088).5" Target="10286:[21504..21529).2" />
<Link Source="10286:[27048..27088).6" Target="10286:[26910..26935).2" />
<Link Source="10286:[27048..27088).6" Target="10286:[27048..27088).5" />
<Link Source="10286:[27048..27088).6" Target="10286:[21504..21529).2" />
<Link Source="10286:[27208..27236).3" Target="10286:[21504..21529).2" />
<Link Source="10286:[27250..27722).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[27738..27845).4" Target="10286:[21504..21529).2" />
<Link Source="10286:[27738..27845).5" Target="10286:[27208..27236).3" />
<Link Source="10286:[27738..27845).5" Target="10286:[27738..27845).4" />
<Link Source="10286:[27738..27845).5" Target="10286:[21504..21529).2" />
<Link Source="10286:[27861..27873).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[26281..26812).2" Target="10286:[27861..27873).2" />
<Link Source="10286:[26281..26812).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[26450..26769).2" Target="10286:[24545..24641).3" />
<Link Source="10286:[26450..26769).2" Target="10286:[26281..26812).2" />
<Link Source="10287:[1680..1716).3" Target="10319:[27941..28036).9" />
<Link Source="10287:[1680..1716).3" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1690).2" Target="10287:[1680..1716).3" />
<Link Source="10287:[1683..1690).2" Target="10319:[27941..28036).9" />
<Link Source="10287:[1683..1690).2" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1716).5" Target="10287:[1683..1690).2" />
<Link Source="10287:[1683..1716).5" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).5" Target="10319:[51939..51953).2" />
<Link Source="10319:[51935..52244).5" Target="10287:[1683..1716).5" />
<Link Source="10319:[51935..52244).5" Target="10319:[13969..14029).1" />
<Link Source="10076:[5223..5250).10" Target="10286:[21504..21529).2" />
<Link Source="10076:[5223..5250).10" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).10" Target="10076:[4989..5047).1" />
<Link Source="10077:[44231..44317).41" Target="10286:[21504..21529).2" />
<Link Source="10077:[44231..44317).41" Target="10077:[5585..5624).1" />
<Link Source="10077:[44231..44317).49" Target="10286:[21504..21529).2" />
<Link Source="10077:[6212..6251).3" Target="10286:[21504..21529).2" />
<Link Source="10077:[6275..6566).4" Target="10286:[21504..21529).2" />
<Link Source="10077:[6275..6566).4" Target="10077:[39766..39774).2" />
<Link Source="10077:[6590..6839).3" Target="10286:[21504..21529).2" />
<Link Source="10077:[6590..6839).3" Target="EXTERNAL" />
<Link Source="10286:[1688..1781).13" Target="10286:[21504..21529).2" />
<Link Source="10286:[1688..1781).13" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).32" Target="10286:[1688..1781).13" />
<Link Source="10298:[471..492).32" Target="10286:[1708..1779).2" />
<Link Source="10286:[1820..1963).13" Target="10286:[21504..21529).2" />
<Link Source="10286:[1820..1963).13" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).33" Target="10286:[1820..1963).13" />
<Link Source="10298:[471..492).33" Target="10286:[1840..1888).2" />
<Link Source="10313:[1494..2257).2" Target="10313:[1230..1280).1" />
<Link Source="10313:[1494..2257).2" Target="10286:[21504..21529).2" />
<Link Source="10313:[1494..2257).2" Target="25002:[4395..4432).1" />
<Link Source="10313:[3537..3552).2" Target="10313:[2273..2310).1" />
<Link Source="10313:[3537..3552).2" Target="25002:[4395..4432).1" />
<Link Source="10319:[39138..39163).2" Target="10286:[21504..21529).2" />
<Link Source="10319:[73480..73505).2" Target="10319:[39138..39163).2" />
<Link Source="10319:[73480..73505).2" Target="10286:[21504..21529).2" />
<Link Source="10319:[73507..73522).2" Target="10319:[39138..39163).2" />
<Link Source="10319:[73507..73522).2" Target="10286:[21504..21529).2" />
<Link Source="10319:[73736..73751).2" Target="10319:[73507..73522).2" />
<Link Source="10319:[73736..73751).2" Target="10286:[21504..21529).2" />
<Link Source="10319:[73753..73778).2" Target="10319:[73480..73505).2" />
<Link Source="10319:[73753..73778).2" Target="10286:[21504..21529).2" />
<Link Source="10319:[73882..73975).7" Target="10286:[21504..21529).2" />
<Link Source="10319:[76360..76385).4" Target="10319:[73753..73778).2" />
<Link Source="10319:[76360..76385).4" Target="10286:[21504..21529).2" />
<Link Source="10319:[76387..76402).4" Target="10319:[73736..73751).2" />
<Link Source="10319:[76387..76402).4" Target="10286:[21504..21529).2" />
<Link Source="10319:[76494..76582).13" Target="10286:[21504..21529).2" />
<Link Source="10287:[791..833).5" Target="10319:[39138..39163).2" />
<Link Source="10287:[791..833).5" Target="10286:[21504..21529).2" />
<Link Source="10286:[21546..21561).3" Target="10319:[39138..39163).2" />
<Link Source="10286:[21563..21583).3" Target="10319:[39138..39163).2" />
<Link Source="10286:[22044..22069).3" Target="10319:[39138..39163).2" />
<Link Source="10286:[22086..22108).3" Target="10286:[21546..21561).3" />
<Link Source="10286:[22086..22108).3" Target="10319:[39138..39163).2" />
<Link Source="10286:[22110..22130).3" Target="10286:[21563..21583).3" />
<Link Source="10286:[22110..22130).3" Target="10319:[39138..39163).2" />
<Link Source="10286:[15616..15690).11" Target="10319:[39138..39163).2" />
<Link Source="10286:[15616..15690).12" Target="10319:[39138..39163).2" />
<Link Source="10286:[15616..15690).12" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).3" Target="10319:[39138..39163).2" />
<Link Source="10286:[23056..23081).3" Target="10286:[22044..22069).3" />
<Link Source="10286:[23056..23081).3" Target="10319:[39138..39163).2" />
<Link Source="10286:[23124..23146).3" Target="10286:[22086..22108).3" />
<Link Source="10286:[23124..23146).3" Target="10319:[39138..39163).2" />
<Link Source="10286:[23161..23181).3" Target="10286:[22110..22130).3" />
<Link Source="10286:[23161..23181).3" Target="10319:[39138..39163).2" />
<Link Source="10286:[23281..23301).3" Target="10286:[22044..22069).3" />
<Link Source="10286:[23281..23301).3" Target="10319:[39138..39163).2" />
<Link Source="10286:[23380..23684).15" Target="10286:[22044..22069).3" />
<Link Source="10286:[23380..23684).15" Target="EXTERNAL" />
<Link Source="10286:[23380..23684).15" Target="10319:[39138..39163).2" />
<Link Source="10286:[23893..24026).5" Target="10286:[22044..22069).3" />
<Link Source="10286:[23893..24026).5" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).5" Target="10319:[39138..39163).2" />
<Link Source="10286:[24545..24641).5" Target="10286:[23161..23181).3" />
<Link Source="10286:[24545..24641).5" Target="10319:[39138..39163).2" />
<Link Source="10286:[24655..25349).3" Target="10286:[24545..24641).5" />
<Link Source="10286:[24655..25349).3" Target="10319:[39138..39163).2" />
<Link Source="10286:[26910..26935).3" Target="10286:[23056..23081).3" />
<Link Source="10286:[26910..26935).3" Target="10319:[39138..39163).2" />
<Link Source="10286:[26952..26974).3" Target="10286:[23124..23146).3" />
<Link Source="10286:[26952..26974).3" Target="10319:[39138..39163).2" />
<Link Source="10286:[27002..27022).3" Target="10286:[23281..23301).3" />
<Link Source="10286:[27002..27022).3" Target="10319:[39138..39163).2" />
<Link Source="10286:[27048..27088).9" Target="10319:[39138..39163).2" />
<Link Source="10286:[27048..27088).10" Target="10286:[26910..26935).3" />
<Link Source="10286:[27048..27088).10" Target="10286:[27048..27088).9" />
<Link Source="10286:[27048..27088).10" Target="10319:[39138..39163).2" />
<Link Source="10286:[27208..27236).5" Target="10319:[39138..39163).2" />
<Link Source="10286:[27250..27722).3" Target="10286:[23056..23081).3" />
<Link Source="10286:[27250..27722).3" Target="10319:[39138..39163).2" />
<Link Source="10286:[27738..27845).7" Target="10319:[39138..39163).2" />
<Link Source="10286:[27738..27845).8" Target="10286:[27208..27236).5" />
<Link Source="10286:[27738..27845).8" Target="10286:[27738..27845).7" />
<Link Source="10286:[27738..27845).8" Target="10319:[39138..39163).2" />
<Link Source="10286:[27861..27873).3" Target="10286:[23056..23081).3" />
<Link Source="10286:[27861..27873).3" Target="10319:[39138..39163).2" />
<Link Source="10286:[26281..26812).3" Target="10286:[27861..27873).3" />
<Link Source="10286:[26281..26812).3" Target="10319:[39138..39163).2" />
<Link Source="10286:[26450..26769).3" Target="10286:[24545..24641).5" />
<Link Source="10286:[26450..26769).3" Target="10286:[26281..26812).3" />
<Link Source="10287:[1680..1716).4" Target="10319:[39138..39163).2" />
<Link Source="10287:[1680..1716).4" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1690).3" Target="10287:[1680..1716).4" />
<Link Source="10287:[1683..1690).3" Target="10319:[39138..39163).2" />
<Link Source="10287:[1683..1690).3" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1716).7" Target="10287:[1683..1690).3" />
<Link Source="10287:[1683..1716).7" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).7" Target="10319:[51939..51953).2" />
<Link Source="10319:[51935..52244).7" Target="10287:[1683..1716).7" />
<Link Source="10319:[51935..52244).7" Target="10319:[13969..14029).1" />
<Link Source="10076:[5223..5250).14" Target="10286:[23056..23081).3" />
<Link Source="10076:[5223..5250).14" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).14" Target="10076:[4989..5047).1" />
<Link Source="10077:[44231..44317).57" Target="10286:[23056..23081).3" />
<Link Source="10077:[44231..44317).57" Target="10077:[5585..5624).1" />
<Link Source="10077:[44231..44317).65" Target="10286:[23056..23081).3" />
<Link Source="10077:[6212..6251).5" Target="10286:[23056..23081).3" />
<Link Source="10077:[6275..6566).7" Target="10286:[23056..23081).3" />
<Link Source="10077:[6275..6566).7" Target="10077:[39766..39774).2" />
<Link Source="10077:[6590..6839).5" Target="10286:[23056..23081).3" />
<Link Source="10077:[6590..6839).5" Target="EXTERNAL" />
<Link Source="10286:[1688..1781).19" Target="10286:[23056..23081).3" />
<Link Source="10286:[1688..1781).19" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).35" Target="10286:[1688..1781).19" />
<Link Source="10298:[471..492).35" Target="10286:[1708..1779).2" />
<Link Source="10286:[1820..1963).19" Target="10286:[23056..23081).3" />
<Link Source="10286:[1820..1963).19" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).36" Target="10286:[1820..1963).19" />
<Link Source="10298:[471..492).36" Target="10286:[1840..1888).2" />
<Link Source="10319:[73480..73505).3" Target="10286:[23056..23081).3" />
<Link Source="10319:[73507..73522).3" Target="10286:[23056..23081).3" />
<Link Source="10319:[73736..73751).3" Target="10319:[73507..73522).3" />
<Link Source="10319:[73736..73751).3" Target="10286:[23056..23081).3" />
<Link Source="10319:[73753..73778).3" Target="10319:[73480..73505).3" />
<Link Source="10319:[73753..73778).3" Target="10286:[23056..23081).3" />
<Link Source="10319:[73882..73975).13" Target="10286:[23056..23081).3" />
<Link Source="10319:[76360..76385).5" Target="10319:[73753..73778).3" />
<Link Source="10319:[76360..76385).5" Target="10286:[23056..23081).3" />
<Link Source="10319:[76387..76402).5" Target="10319:[73736..73751).3" />
<Link Source="10319:[76387..76402).5" Target="10286:[23056..23081).3" />
<Link Source="10319:[76494..76582).17" Target="10286:[23056..23081).3" />
<Link Source="10287:[791..833).7" Target="10319:[73507..73522).3" />
<Link Source="10287:[791..833).7" Target="10286:[23056..23081).3" />
<Link Source="10286:[21546..21561).4" Target="10319:[73507..73522).3" />
<Link Source="10286:[21563..21583).4" Target="10319:[73507..73522).3" />
<Link Source="10286:[22086..22108).4" Target="10286:[21546..21561).4" />
<Link Source="10286:[22086..22108).4" Target="10319:[73507..73522).3" />
<Link Source="10286:[22110..22130).4" Target="10286:[21563..21583).4" />
<Link Source="10286:[22110..22130).4" Target="10319:[73507..73522).3" />
<Link Source="10286:[15616..15690).16" Target="10319:[73507..73522).3" />
<Link Source="10286:[15616..15690).17" Target="10319:[73507..73522).3" />
<Link Source="10286:[15616..15690).17" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).4" Target="10319:[73507..73522).3" />
<Link Source="10286:[23124..23146).4" Target="10286:[22086..22108).4" />
<Link Source="10286:[23124..23146).4" Target="10319:[73507..73522).3" />
<Link Source="10286:[23161..23181).4" Target="10286:[22110..22130).4" />
<Link Source="10286:[23161..23181).4" Target="10319:[73507..73522).3" />
<Link Source="10286:[23281..23301).4" Target="10319:[73507..73522).3" />
<Link Source="10286:[23380..23684).22" Target="10319:[73507..73522).3" />
<Link Source="10286:[23380..23684).22" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).7" Target="10319:[73507..73522).3" />
<Link Source="10286:[23893..24026).7" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).7" Target="10286:[23161..23181).4" />
<Link Source="10286:[24545..24641).7" Target="10319:[73507..73522).3" />
<Link Source="10286:[24655..25349).4" Target="10286:[24545..24641).7" />
<Link Source="10286:[24655..25349).4" Target="10319:[73507..73522).3" />
<Link Source="10286:[26910..26935).4" Target="10319:[73507..73522).3" />
<Link Source="10286:[26952..26974).4" Target="10286:[23124..23146).4" />
<Link Source="10286:[26952..26974).4" Target="10319:[73507..73522).3" />
<Link Source="10286:[27002..27022).4" Target="10286:[23281..23301).4" />
<Link Source="10286:[27002..27022).4" Target="10319:[73507..73522).3" />
<Link Source="10286:[27048..27088).13" Target="10319:[73507..73522).3" />
<Link Source="10286:[27048..27088).14" Target="10286:[26910..26935).4" />
<Link Source="10286:[27048..27088).14" Target="10286:[27048..27088).13" />
<Link Source="10286:[27048..27088).14" Target="10319:[73507..73522).3" />
<Link Source="10286:[27208..27236).7" Target="10319:[73507..73522).3" />
<Link Source="10286:[27250..27722).4" Target="10319:[73507..73522).3" />
<Link Source="10286:[27738..27845).10" Target="10319:[73507..73522).3" />
<Link Source="10286:[27738..27845).11" Target="10286:[27208..27236).7" />
<Link Source="10286:[27738..27845).11" Target="10286:[27738..27845).10" />
<Link Source="10286:[27738..27845).11" Target="10319:[73507..73522).3" />
<Link Source="10286:[27861..27873).4" Target="10319:[73507..73522).3" />
<Link Source="10286:[26281..26812).4" Target="10286:[27861..27873).4" />
<Link Source="10286:[26281..26812).4" Target="10319:[73507..73522).3" />
<Link Source="10286:[26450..26769).4" Target="10286:[24545..24641).7" />
<Link Source="10286:[26450..26769).4" Target="10286:[26281..26812).4" />
<Link Source="10287:[1680..1716).5" Target="10319:[73507..73522).3" />
<Link Source="10287:[1680..1716).5" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1690).4" Target="10287:[1680..1716).5" />
<Link Source="10287:[1683..1690).4" Target="10319:[73507..73522).3" />
<Link Source="10287:[1683..1690).4" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1716).9" Target="10287:[1683..1690).4" />
<Link Source="10287:[1683..1716).9" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).9" Target="10319:[51939..51953).2" />
<Link Source="10319:[51935..52244).9" Target="10287:[1683..1716).9" />
<Link Source="10319:[51935..52244).9" Target="10319:[13969..14029).1" />
<Link Source="10313:[1494..2257).3" Target="10313:[1230..1280).1" />
<Link Source="10313:[1494..2257).3" Target="10319:[73507..73522).3" />
<Link Source="10313:[1494..2257).3" Target="25002:[4395..4432).1" />
<Link Source="10313:[2563..2675).4" Target="10319:[73507..73522).3" />
<Link Source="10313:[2699..3019).5" Target="10319:[73507..73522).3" />
<Link Source="10313:[2699..3019).6" Target="10313:[1442..1480).1" />
<Link Source="10313:[2699..3019).6" Target="10313:[2699..3019).5" />
<Link Source="10313:[2699..3019).6" Target="10319:[73507..73522).3" />
<Link Source="10313:[3378..3434).5" Target="10313:[1391..1416).1" />
<Link Source="10313:[3378..3434).5" Target="10319:[73507..73522).3" />
<Link Source="10313:[735..760).2" Target="10313:[3378..3434).5" />
<Link Source="10313:[735..760).2" Target="10319:[73507..73522).3" />
<Link Source="10313:[840..920).7" Target="10319:[73507..73522).3" />
<Link Source="10313:[840..920).10" Target="10313:[735..760).2" />
<Link Source="10313:[840..920).10" Target="10319:[73507..73522).3" />
<Link Source="10313:[3733..3747).2" Target="10313:[840..920).7" />
<Link Source="10313:[3733..3747).2" Target="10319:[73507..73522).3" />
<Link Source="10313:[3749..3766).2" Target="10313:[840..920).7" />
<Link Source="10313:[3749..3766).2" Target="10319:[73507..73522).3" />
<Link Source="10313:[3768..3779).2" Target="10313:[840..920).7" />
<Link Source="10313:[3768..3779).2" Target="10319:[73507..73522).3" />
<Link Source="10313:[3781..3806).2" Target="10313:[840..920).10" />
<Link Source="10313:[3781..3806).2" Target="10319:[73507..73522).3" />
<Link Source="10313:[3832..3924).4" Target="10313:[3768..3779).2" />
<Link Source="10313:[3832..3924).4" Target="10319:[73507..73522).3" />
<Link Source="10313:[4210..4315).2" Target="10319:[73507..73522).3" />
<Link Source="10313:[4335..4374).2" Target="10319:[73507..73522).3" />
<Link Source="10313:[4392..4543).5" Target="10313:[4335..4374).2" />
<Link Source="10313:[4392..4543).5" Target="10319:[73507..73522).3" />
<Link Source="10313:[4392..4543).6" Target="10319:[73507..73522).3" />
<Link Source="10313:[4698..4727).2" Target="10319:[73507..73522).3" />
<Link Source="10286:[8381..8389).2" Target="10319:[73507..73522).3" />
<Link Source="10286:[8381..8389).2" Target="10313:[4698..4727).2" />
<Link Source="10286:[8384..8389).3" Target="10313:[4698..4727).2" />
<Link Source="10313:[4676..4801).4" Target="10286:[8384..8389).3" />
<Link Source="10313:[4676..4801).4" Target="10319:[73507..73522).3" />
<Link Source="10313:[5488..5662).6" Target="10319:[73507..73522).3" />
<Link Source="10313:[5488..5662).6" Target="EXTERNAL" />
<Link Source="10313:[5488..5662).7" Target="10319:[73507..73522).3" />
<Link Source="10313:[4821..5028).3" Target="10313:[5488..5662).6" />
<Link Source="10313:[4821..5028).3" Target="10319:[73507..73522).3" />
<Link Source="10313:[4996..5009).3" Target="10313:[4821..5028).3" />
<Link Source="10313:[840..920).11" Target="10313:[4996..5009).3" />
<Link Source="10313:[840..920).11" Target="10319:[73507..73522).3" />
<Link Source="10313:[3537..3552).3" Target="10319:[73507..73522).3" />
<Link Source="10313:[3537..3552).3" Target="25002:[4395..4432).1" />
<Link Source="10319:[73480..73505).4" Target="10319:[73507..73522).3" />
<Link Source="10319:[73736..73751).4" Target="10319:[73507..73522).3" />
<Link Source="10319:[73753..73778).4" Target="10319:[73480..73505).4" />
<Link Source="10319:[73753..73778).4" Target="10319:[73507..73522).3" />
<Link Source="10319:[73882..73975).19" Target="10319:[73507..73522).3" />
<Link Source="10319:[76360..76385).6" Target="10319:[73753..73778).4" />
<Link Source="10319:[76360..76385).6" Target="10319:[73507..73522).3" />
<Link Source="10319:[76387..76402).6" Target="10319:[73736..73751).4" />
<Link Source="10319:[76387..76402).6" Target="10319:[73507..73522).3" />
<Link Source="10319:[76494..76582).21" Target="10319:[73507..73522).3" />
<Link Source="10287:[791..833).9" Target="10319:[73480..73505).4" />
<Link Source="10287:[791..833).9" Target="10319:[73507..73522).3" />
<Link Source="10286:[21546..21561).5" Target="10319:[73480..73505).4" />
<Link Source="10286:[21563..21583).5" Target="10319:[73480..73505).4" />
<Link Source="10286:[22086..22108).5" Target="10286:[21546..21561).5" />
<Link Source="10286:[22086..22108).5" Target="10319:[73480..73505).4" />
<Link Source="10286:[22110..22130).5" Target="10286:[21563..21583).5" />
<Link Source="10286:[22110..22130).5" Target="10319:[73480..73505).4" />
<Link Source="10286:[15616..15690).21" Target="10319:[73480..73505).4" />
<Link Source="10286:[15616..15690).22" Target="10319:[73480..73505).4" />
<Link Source="10286:[15616..15690).22" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).5" Target="10319:[73480..73505).4" />
<Link Source="10286:[23124..23146).5" Target="10286:[22086..22108).5" />
<Link Source="10286:[23124..23146).5" Target="10319:[73480..73505).4" />
<Link Source="10286:[23161..23181).5" Target="10286:[22110..22130).5" />
<Link Source="10286:[23161..23181).5" Target="10319:[73480..73505).4" />
<Link Source="10286:[23281..23301).5" Target="10319:[73480..73505).4" />
<Link Source="10286:[23380..23684).29" Target="10319:[73480..73505).4" />
<Link Source="10286:[23380..23684).29" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).9" Target="10319:[73480..73505).4" />
<Link Source="10286:[23893..24026).9" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).9" Target="10286:[23161..23181).5" />
<Link Source="10286:[24545..24641).9" Target="10319:[73480..73505).4" />
<Link Source="10286:[24655..25349).5" Target="10286:[24545..24641).9" />
<Link Source="10286:[24655..25349).5" Target="10319:[73480..73505).4" />
<Link Source="10286:[26910..26935).5" Target="10319:[73480..73505).4" />
<Link Source="10286:[26952..26974).5" Target="10286:[23124..23146).5" />
<Link Source="10286:[26952..26974).5" Target="10319:[73480..73505).4" />
<Link Source="10286:[27002..27022).5" Target="10286:[23281..23301).5" />
<Link Source="10286:[27002..27022).5" Target="10319:[73480..73505).4" />
<Link Source="10286:[27048..27088).17" Target="10319:[73480..73505).4" />
<Link Source="10286:[27048..27088).18" Target="10286:[26910..26935).5" />
<Link Source="10286:[27048..27088).18" Target="10286:[27048..27088).17" />
<Link Source="10286:[27048..27088).18" Target="10319:[73480..73505).4" />
<Link Source="10286:[27208..27236).9" Target="10319:[73480..73505).4" />
<Link Source="10286:[27250..27722).5" Target="10319:[73480..73505).4" />
<Link Source="10286:[27738..27845).13" Target="10319:[73480..73505).4" />
<Link Source="10286:[27738..27845).14" Target="10286:[27208..27236).9" />
<Link Source="10286:[27738..27845).14" Target="10286:[27738..27845).13" />
<Link Source="10286:[27738..27845).14" Target="10319:[73480..73505).4" />
<Link Source="10286:[27861..27873).5" Target="10319:[73480..73505).4" />
<Link Source="10286:[26281..26812).5" Target="10286:[27861..27873).5" />
<Link Source="10286:[26281..26812).5" Target="10319:[73480..73505).4" />
<Link Source="10286:[26450..26769).5" Target="10286:[24545..24641).9" />
<Link Source="10286:[26450..26769).5" Target="10286:[26281..26812).5" />
<Link Source="10287:[1680..1716).6" Target="10319:[73480..73505).4" />
<Link Source="10287:[1680..1716).6" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1690).5" Target="10287:[1680..1716).6" />
<Link Source="10287:[1683..1690).5" Target="10319:[73480..73505).4" />
<Link Source="10287:[1683..1690).5" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1716).11" Target="10287:[1683..1690).5" />
<Link Source="10287:[1683..1716).11" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).11" Target="10319:[51939..51953).2" />
<Link Source="10319:[51935..52244).11" Target="10287:[1683..1716).11" />
<Link Source="10319:[51935..52244).11" Target="10319:[13969..14029).1" />
<Link Source="10076:[5223..5250).18" Target="10319:[73480..73505).4" />
<Link Source="10076:[5223..5250).18" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).18" Target="10076:[4989..5047).1" />
<Link Source="10077:[44231..44317).73" Target="10319:[73480..73505).4" />
<Link Source="10077:[44231..44317).73" Target="10077:[5585..5624).1" />
<Link Source="10077:[44231..44317).81" Target="10319:[73480..73505).4" />
<Link Source="10077:[6212..6251).7" Target="10319:[73480..73505).4" />
<Link Source="10077:[6275..6566).10" Target="10319:[73480..73505).4" />
<Link Source="10077:[6275..6566).10" Target="10077:[39766..39774).2" />
<Link Source="10077:[6590..6839).7" Target="10319:[73480..73505).4" />
<Link Source="10077:[6590..6839).7" Target="EXTERNAL" />
<Link Source="10286:[1688..1781).25" Target="10319:[73480..73505).4" />
<Link Source="10286:[1688..1781).25" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).38" Target="10286:[1688..1781).25" />
<Link Source="10298:[471..492).38" Target="10286:[1708..1779).2" />
<Link Source="10286:[1820..1963).25" Target="10319:[73480..73505).4" />
<Link Source="10286:[1820..1963).25" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).39" Target="10286:[1820..1963).25" />
<Link Source="10298:[471..492).39" Target="10286:[1840..1888).2" />
<Link Source="10319:[73736..73751).5" Target="10319:[73480..73505).4" />
<Link Source="10319:[73753..73778).5" Target="10319:[73480..73505).4" />
<Link Source="10319:[73882..73975).25" Target="10319:[73480..73505).4" />
<Link Source="10319:[76360..76385).7" Target="10319:[73753..73778).5" />
<Link Source="10319:[76360..76385).7" Target="10319:[73480..73505).4" />
<Link Source="10319:[76387..76402).7" Target="10319:[73736..73751).5" />
<Link Source="10319:[76387..76402).7" Target="10319:[73480..73505).4" />
<Link Source="10319:[76494..76582).25" Target="10319:[73480..73505).4" />
<Link Source="10287:[791..833).11" Target="10319:[73480..73505).4" />
<Link Source="10286:[22421..22557).54" Target="10286:[22110..22130).5" />
<Link Source="10286:[22421..22557).54" Target="10286:[21546..21561).5" />
<Link Source="10286:[15616..15690).26" Target="10286:[21546..21561).5" />
<Link Source="10286:[15616..15690).27" Target="10286:[21546..21561).5" />
<Link Source="10286:[15616..15690).27" Target="10319:[73480..73505).4" />
<Link Source="10286:[15616..15690).27" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).6" Target="10286:[21546..21561).5" />
<Link Source="10286:[23124..23146).6" Target="10286:[22086..22108).5" />
<Link Source="10286:[23124..23146).6" Target="10286:[21546..21561).5" />
<Link Source="10286:[23161..23181).6" Target="10286:[22421..22557).54" />
<Link Source="10286:[23161..23181).6" Target="10286:[21546..21561).5" />
<Link Source="10286:[23281..23301).6" Target="10286:[22086..22108).5" />
<Link Source="10286:[23281..23301).6" Target="10286:[21546..21561).5" />
<Link Source="10286:[23380..23684).36" Target="10286:[21546..21561).5" />
<Link Source="10286:[23380..23684).36" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).11" Target="10286:[21546..21561).5" />
<Link Source="10286:[23893..24026).11" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).11" Target="10286:[23161..23181).6" />
<Link Source="10286:[24545..24641).11" Target="10286:[21546..21561).5" />
<Link Source="10286:[24655..25349).6" Target="10286:[24545..24641).11" />
<Link Source="10286:[24655..25349).6" Target="10286:[21546..21561).5" />
<Link Source="10286:[26910..26935).6" Target="10286:[21546..21561).5" />
<Link Source="10286:[26952..26974).6" Target="10286:[23124..23146).6" />
<Link Source="10286:[26952..26974).6" Target="10286:[21546..21561).5" />
<Link Source="10286:[27002..27022).6" Target="10286:[23281..23301).6" />
<Link Source="10286:[27002..27022).6" Target="10286:[21546..21561).5" />
<Link Source="10286:[27048..27088).21" Target="10286:[21546..21561).5" />
<Link Source="10286:[27048..27088).22" Target="10286:[26910..26935).6" />
<Link Source="10286:[27048..27088).22" Target="10286:[27048..27088).21" />
<Link Source="10286:[27048..27088).22" Target="10286:[21546..21561).5" />
<Link Source="10286:[27208..27236).11" Target="10286:[21546..21561).5" />
<Link Source="10286:[27250..27722).6" Target="10286:[21546..21561).5" />
<Link Source="10286:[27738..27845).16" Target="10286:[21546..21561).5" />
<Link Source="10286:[27738..27845).17" Target="10286:[27208..27236).11" />
<Link Source="10286:[27738..27845).17" Target="10286:[27738..27845).16" />
<Link Source="10286:[27738..27845).17" Target="10286:[21546..21561).5" />
<Link Source="10286:[27861..27873).6" Target="10286:[21546..21561).5" />
<Link Source="10286:[26281..26812).6" Target="10286:[27861..27873).6" />
<Link Source="10286:[26281..26812).6" Target="10286:[21546..21561).5" />
<Link Source="10286:[26450..26769).6" Target="10286:[24545..24641).11" />
<Link Source="10286:[26450..26769).6" Target="10286:[26281..26812).6" />
<Link Source="10313:[1494..2257).4" Target="10313:[1230..1280).1" />
<Link Source="10313:[1494..2257).4" Target="10286:[21546..21561).5" />
<Link Source="10313:[1494..2257).4" Target="25002:[4395..4432).1" />
<Link Source="10313:[2563..2675).7" Target="10286:[21546..21561).5" />
<Link Source="10313:[2699..3019).9" Target="10286:[21546..21561).5" />
<Link Source="10313:[2699..3019).10" Target="10313:[1442..1480).1" />
<Link Source="10313:[2699..3019).10" Target="10313:[2699..3019).9" />
<Link Source="10313:[2699..3019).10" Target="10286:[21546..21561).5" />
<Link Source="10313:[3378..3434).8" Target="10313:[1391..1416).1" />
<Link Source="10313:[3378..3434).8" Target="10286:[21546..21561).5" />
<Link Source="10313:[735..760).3" Target="10313:[3378..3434).8" />
<Link Source="10313:[735..760).3" Target="10286:[21546..21561).5" />
<Link Source="10313:[840..920).13" Target="10286:[21546..21561).5" />
<Link Source="10313:[840..920).16" Target="10313:[735..760).3" />
<Link Source="10313:[840..920).16" Target="10286:[21546..21561).5" />
<Link Source="10313:[3733..3747).3" Target="10313:[840..920).13" />
<Link Source="10313:[3733..3747).3" Target="10286:[21546..21561).5" />
<Link Source="10313:[3749..3766).3" Target="10313:[840..920).13" />
<Link Source="10313:[3749..3766).3" Target="10286:[21546..21561).5" />
<Link Source="10313:[3768..3779).3" Target="10313:[840..920).13" />
<Link Source="10313:[3768..3779).3" Target="10286:[21546..21561).5" />
<Link Source="10313:[3781..3806).3" Target="10313:[840..920).16" />
<Link Source="10313:[3781..3806).3" Target="10286:[21546..21561).5" />
<Link Source="10313:[3832..3924).7" Target="10313:[3768..3779).3" />
<Link Source="10313:[3832..3924).7" Target="10286:[21546..21561).5" />
<Link Source="10313:[4210..4315).3" Target="10286:[21546..21561).5" />
<Link Source="10313:[4335..4374).3" Target="10286:[21546..21561).5" />
<Link Source="10313:[4392..4543).9" Target="10313:[4335..4374).3" />
<Link Source="10313:[4392..4543).9" Target="10286:[21546..21561).5" />
<Link Source="10313:[4392..4543).10" Target="10286:[21546..21561).5" />
<Link Source="10313:[4698..4727).3" Target="10286:[21546..21561).5" />
<Link Source="10286:[8381..8389).3" Target="10286:[21546..21561).5" />
<Link Source="10286:[8381..8389).3" Target="10313:[4698..4727).3" />
<Link Source="10286:[8384..8389).5" Target="10313:[4698..4727).3" />
<Link Source="10313:[4676..4801).7" Target="10286:[8384..8389).5" />
<Link Source="10313:[4676..4801).7" Target="10286:[21546..21561).5" />
<Link Source="10313:[5488..5662).11" Target="10286:[21546..21561).5" />
<Link Source="10313:[5488..5662).11" Target="EXTERNAL" />
<Link Source="10313:[5488..5662).12" Target="10286:[21546..21561).5" />
<Link Source="10313:[4821..5028).5" Target="10313:[5488..5662).11" />
<Link Source="10313:[4821..5028).5" Target="10286:[21546..21561).5" />
<Link Source="10313:[4996..5009).5" Target="10313:[4821..5028).5" />
<Link Source="10313:[840..920).17" Target="10313:[4996..5009).5" />
<Link Source="10313:[840..920).17" Target="10286:[21546..21561).5" />
<Link Source="10313:[3537..3552).4" Target="10286:[21546..21561).5" />
<Link Source="10313:[3537..3552).4" Target="25002:[4395..4432).1" />
<Link Source="10319:[73736..73751).6" Target="10286:[21546..21561).5" />
<Link Source="10319:[73753..73778).6" Target="10286:[21546..21561).5" />
<Link Source="10319:[73882..73975).31" Target="10286:[21546..21561).5" />
<Link Source="10319:[76360..76385).8" Target="10319:[73753..73778).6" />
<Link Source="10319:[76360..76385).8" Target="10286:[21546..21561).5" />
<Link Source="10319:[76387..76402).8" Target="10319:[73736..73751).6" />
<Link Source="10319:[76387..76402).8" Target="10286:[21546..21561).5" />
<Link Source="10319:[76494..76582).29" Target="10286:[21546..21561).5" />
<Link Source="10287:[791..833).13" Target="10286:[21546..21561).5" />
<Link Source="10286:[21563..21583).7" Target="10286:[21546..21561).5" />
<Link Source="10286:[22086..22108).7" Target="10286:[21546..21561).5" />
<Link Source="10286:[22110..22130).7" Target="10286:[21563..21583).7" />
<Link Source="10286:[22110..22130).7" Target="10286:[21546..21561).5" />
<Link Source="10286:[15616..15690).32" Target="10286:[21546..21561).5" />
<Link Source="10286:[15616..15690).32" Target="EXTERNAL" />
<Link Source="10286:[23124..23146).7" Target="10286:[22086..22108).7" />
<Link Source="10286:[23124..23146).7" Target="10286:[21546..21561).5" />
<Link Source="10286:[23161..23181).7" Target="10286:[22110..22130).7" />
<Link Source="10286:[23161..23181).7" Target="10286:[21546..21561).5" />
<Link Source="10286:[23281..23301).7" Target="10286:[22086..22108).7" />
<Link Source="10286:[23281..23301).7" Target="10286:[21546..21561).5" />
<Link Source="10286:[24545..24641).13" Target="10286:[23161..23181).7" />
<Link Source="10286:[24545..24641).13" Target="10286:[21546..21561).5" />
<Link Source="10286:[24655..25349).7" Target="10286:[24545..24641).13" />
<Link Source="10286:[24655..25349).7" Target="10286:[21546..21561).5" />
<Link Source="10286:[26910..26935).7" Target="10286:[27861..27873).6" />
<Link Source="10286:[26910..26935).7" Target="10286:[21546..21561).5" />
<Link Source="10286:[26952..26974).7" Target="10286:[23124..23146).7" />
<Link Source="10286:[26952..26974).7" Target="10286:[21546..21561).5" />
<Link Source="10286:[27002..27022).7" Target="10286:[23281..23301).7" />
<Link Source="10286:[27002..27022).7" Target="10286:[21546..21561).5" />
<Link Source="10286:[27048..27088).26" Target="10286:[26910..26935).7" />
<Link Source="10286:[27048..27088).26" Target="10286:[27048..27088).21" />
<Link Source="10286:[27048..27088).26" Target="10286:[21546..21561).5" />
<Link Source="10286:[27250..27722).7" Target="10286:[22086..22108).7" />
<Link Source="10286:[27250..27722).7" Target="10286:[21546..21561).5" />
<Link Source="10286:[27861..27873).7" Target="10286:[22086..22108).7" />
<Link Source="10286:[27861..27873).7" Target="10286:[21546..21561).5" />
<Link Source="10286:[26281..26812).7" Target="10286:[27861..27873).7" />
<Link Source="10286:[26281..26812).7" Target="10286:[21546..21561).5" />
<Link Source="10286:[26450..26769).7" Target="10286:[24545..24641).13" />
<Link Source="10286:[26450..26769).7" Target="10286:[26281..26812).7" />
<Link Source="10287:[1680..1716).8" Target="10286:[21546..21561).5" />
<Link Source="10287:[1680..1716).8" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1690).7" Target="10287:[1680..1716).8" />
<Link Source="10287:[1683..1690).7" Target="10286:[21546..21561).5" />
<Link Source="10287:[1683..1690).7" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1716).15" Target="10287:[1683..1690).7" />
<Link Source="10287:[1683..1716).15" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).15" Target="10319:[51939..51953).2" />
<Link Source="10319:[51935..52244).15" Target="10287:[1683..1716).15" />
<Link Source="10319:[51935..52244).15" Target="10319:[13969..14029).1" />
<Link Source="10076:[5223..5250).22" Target="10286:[22086..22108).7" />
<Link Source="10076:[5223..5250).22" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).22" Target="10076:[4989..5047).1" />
<Link Source="10077:[44231..44317).89" Target="10286:[22086..22108).7" />
<Link Source="10077:[44231..44317).89" Target="10077:[5585..5624).1" />
<Link Source="10077:[44231..44317).97" Target="10286:[22086..22108).7" />
<Link Source="10077:[6212..6251).9" Target="10286:[22086..22108).7" />
<Link Source="10077:[6275..6566).13" Target="10286:[22086..22108).7" />
<Link Source="10077:[6275..6566).13" Target="10077:[39766..39774).2" />
<Link Source="10077:[6590..6839).9" Target="10286:[22086..22108).7" />
<Link Source="10077:[6590..6839).9" Target="EXTERNAL" />
<Link Source="10286:[1688..1781).31" Target="10286:[22086..22108).7" />
<Link Source="10286:[1688..1781).31" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).41" Target="10286:[1688..1781).31" />
<Link Source="10298:[471..492).41" Target="10286:[1708..1779).2" />
<Link Source="10286:[1820..1963).31" Target="10286:[22086..22108).7" />
<Link Source="10286:[1820..1963).31" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).42" Target="10286:[1820..1963).31" />
<Link Source="10298:[471..492).42" Target="10286:[1840..1888).2" />
<Link Source="10319:[73736..73751).7" Target="10286:[22086..22108).7" />
<Link Source="10319:[73753..73778).7" Target="10286:[22086..22108).7" />
<Link Source="10319:[73882..73975).37" Target="10286:[22086..22108).7" />
<Link Source="10319:[76360..76385).9" Target="10319:[73753..73778).7" />
<Link Source="10319:[76360..76385).9" Target="10286:[22086..22108).7" />
<Link Source="10319:[76387..76402).9" Target="10319:[73736..73751).7" />
<Link Source="10319:[76387..76402).9" Target="10286:[22086..22108).7" />
<Link Source="10319:[76494..76582).33" Target="10286:[22086..22108).7" />
<Link Source="10287:[791..833).15" Target="10286:[22086..22108).7" />
<Link Source="10286:[21563..21583).8" Target="10286:[22086..22108).7" />
<Link Source="10286:[22110..22130).8" Target="10286:[21563..21583).8" />
<Link Source="10286:[22110..22130).8" Target="10286:[22086..22108).7" />
<Link Source="10286:[15616..15690).36" Target="10286:[22086..22108).7" />
<Link Source="10286:[15616..15690).37" Target="10286:[22086..22108).7" />
<Link Source="10286:[15616..15690).37" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).8" Target="10286:[22086..22108).7" />
<Link Source="10286:[23124..23146).8" Target="10286:[22086..22108).7" />
<Link Source="10286:[23161..23181).8" Target="10286:[22110..22130).8" />
<Link Source="10286:[23161..23181).8" Target="10286:[22086..22108).7" />
<Link Source="10286:[23281..23301).8" Target="10286:[22086..22108).7" />
<Link Source="10286:[23380..23684).50" Target="10286:[22086..22108).7" />
<Link Source="10286:[23380..23684).50" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).15" Target="10286:[22086..22108).7" />
<Link Source="10286:[23893..24026).15" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).15" Target="10286:[23161..23181).8" />
<Link Source="10286:[24545..24641).15" Target="10286:[22086..22108).7" />
<Link Source="10286:[24655..25349).8" Target="10286:[24545..24641).15" />
<Link Source="10286:[24655..25349).8" Target="10286:[22086..22108).7" />
<Link Source="10286:[26910..26935).8" Target="10286:[22086..22108).7" />
<Link Source="10286:[26952..26974).8" Target="10286:[23124..23146).8" />
<Link Source="10286:[26952..26974).8" Target="10286:[22086..22108).7" />
<Link Source="10286:[27002..27022).8" Target="10286:[23281..23301).8" />
<Link Source="10286:[27002..27022).8" Target="10286:[22086..22108).7" />
<Link Source="10286:[27048..27088).29" Target="10286:[22086..22108).7" />
<Link Source="10286:[27048..27088).30" Target="10286:[26910..26935).8" />
<Link Source="10286:[27048..27088).30" Target="10286:[27048..27088).29" />
<Link Source="10286:[27048..27088).30" Target="10286:[22086..22108).7" />
<Link Source="10286:[27208..27236).15" Target="10286:[22086..22108).7" />
<Link Source="10286:[27250..27722).8" Target="10286:[23124..23146).8" />
<Link Source="10286:[27250..27722).8" Target="10286:[22086..22108).7" />
<Link Source="10286:[27738..27845).22" Target="10286:[22086..22108).7" />
<Link Source="10286:[27738..27845).23" Target="10286:[27208..27236).15" />
<Link Source="10286:[27738..27845).23" Target="10286:[27738..27845).22" />
<Link Source="10286:[27738..27845).23" Target="10286:[22086..22108).7" />
<Link Source="10286:[27861..27873).8" Target="10286:[23124..23146).8" />
<Link Source="10286:[27861..27873).8" Target="10286:[22086..22108).7" />
<Link Source="10286:[26281..26812).8" Target="10286:[27861..27873).8" />
<Link Source="10286:[26281..26812).8" Target="10286:[22086..22108).7" />
<Link Source="10286:[26450..26769).8" Target="10286:[24545..24641).15" />
<Link Source="10286:[26450..26769).8" Target="10286:[26281..26812).8" />
<Link Source="10287:[1680..1716).9" Target="10286:[22086..22108).7" />
<Link Source="10287:[1680..1716).9" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1690).8" Target="10287:[1680..1716).9" />
<Link Source="10287:[1683..1690).8" Target="10286:[22086..22108).7" />
<Link Source="10287:[1683..1690).8" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1716).17" Target="10287:[1683..1690).8" />
<Link Source="10287:[1683..1716).17" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).17" Target="10319:[51939..51953).2" />
<Link Source="10319:[51935..52244).17" Target="10287:[1683..1716).17" />
<Link Source="10319:[51935..52244).17" Target="10319:[13969..14029).1" />
<Link Source="10319:[73736..73751).8" Target="10286:[23124..23146).8" />
<Link Source="10319:[73753..73778).8" Target="10286:[23124..23146).8" />
<Link Source="10319:[73882..73975).43" Target="10286:[23124..23146).8" />
<Link Source="10319:[76360..76385).10" Target="10319:[73753..73778).8" />
<Link Source="10319:[76360..76385).10" Target="10286:[23124..23146).8" />
<Link Source="10319:[76387..76402).10" Target="10319:[73736..73751).8" />
<Link Source="10319:[76387..76402).10" Target="10286:[23124..23146).8" />
<Link Source="10319:[76494..76582).37" Target="10286:[23124..23146).8" />
<Link Source="10287:[791..833).17" Target="10286:[23124..23146).8" />
<Link Source="10286:[21563..21583).9" Target="10286:[23124..23146).8" />
<Link Source="10286:[22110..22130).9" Target="10286:[21563..21583).9" />
<Link Source="10286:[22110..22130).9" Target="10286:[23124..23146).8" />
<Link Source="10286:[15616..15690).41" Target="10286:[23124..23146).8" />
<Link Source="10286:[15616..15690).42" Target="10286:[23124..23146).8" />
<Link Source="10286:[15616..15690).42" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).9" Target="10286:[23124..23146).8" />
<Link Source="10286:[23161..23181).9" Target="10286:[22110..22130).9" />
<Link Source="10286:[23161..23181).9" Target="10286:[23124..23146).8" />
<Link Source="10286:[23281..23301).9" Target="10286:[23124..23146).8" />
<Link Source="10286:[23380..23684).57" Target="10286:[23124..23146).8" />
<Link Source="10286:[23380..23684).57" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).17" Target="10286:[23124..23146).8" />
<Link Source="10286:[23893..24026).17" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).17" Target="10286:[23161..23181).9" />
<Link Source="10286:[24545..24641).17" Target="10286:[23124..23146).8" />
<Link Source="10286:[24655..25349).9" Target="10286:[24545..24641).17" />
<Link Source="10286:[24655..25349).9" Target="10286:[23124..23146).8" />
<Link Source="10286:[26910..26935).9" Target="10286:[23124..23146).8" />
<Link Source="10286:[26952..26974).9" Target="10286:[23124..23146).8" />
<Link Source="10286:[27002..27022).9" Target="10286:[23281..23301).9" />
<Link Source="10286:[27002..27022).9" Target="10286:[23124..23146).8" />
<Link Source="10286:[27048..27088).33" Target="10286:[23124..23146).8" />
<Link Source="10286:[27048..27088).34" Target="10286:[26910..26935).9" />
<Link Source="10286:[27048..27088).34" Target="10286:[27048..27088).33" />
<Link Source="10286:[27048..27088).34" Target="10286:[23124..23146).8" />
<Link Source="10286:[27208..27236).17" Target="10286:[23124..23146).8" />
<Link Source="10286:[27250..27722).9" Target="10286:[23124..23146).8" />
<Link Source="10286:[27738..27845).25" Target="10286:[23124..23146).8" />
<Link Source="10286:[27738..27845).26" Target="10286:[27208..27236).17" />
<Link Source="10286:[27738..27845).26" Target="10286:[27738..27845).25" />
<Link Source="10286:[27738..27845).26" Target="10286:[23124..23146).8" />
<Link Source="10286:[27861..27873).9" Target="10286:[23124..23146).8" />
<Link Source="10286:[26281..26812).9" Target="10286:[27861..27873).9" />
<Link Source="10286:[26281..26812).9" Target="10286:[23124..23146).8" />
<Link Source="10286:[26450..26769).9" Target="10286:[24545..24641).17" />
<Link Source="10286:[26450..26769).9" Target="10286:[26281..26812).9" />
<Link Source="10287:[1680..1716).10" Target="10286:[23124..23146).8" />
<Link Source="10287:[1680..1716).10" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1690).9" Target="10287:[1680..1716).10" />
<Link Source="10287:[1683..1690).9" Target="10286:[23124..23146).8" />
<Link Source="10287:[1683..1690).9" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1716).19" Target="10287:[1683..1690).9" />
<Link Source="10287:[1683..1716).19" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).19" Target="10319:[51939..51953).2" />
<Link Source="10319:[51935..52244).19" Target="10287:[1683..1716).19" />
<Link Source="10319:[51935..52244).19" Target="10319:[13969..14029).1" />
<Link Source="10313:[1494..2257).5" Target="10313:[1230..1280).1" />
<Link Source="10313:[1494..2257).5" Target="10286:[23124..23146).8" />
<Link Source="10313:[1494..2257).5" Target="25002:[4395..4432).1" />
<Link Source="10313:[2563..2675).10" Target="10286:[23124..23146).8" />
<Link Source="10313:[2699..3019).13" Target="10286:[23124..23146).8" />
<Link Source="10313:[2699..3019).14" Target="10313:[1442..1480).1" />
<Link Source="10313:[2699..3019).14" Target="10313:[2699..3019).13" />
<Link Source="10313:[2699..3019).14" Target="10286:[23124..23146).8" />
<Link Source="10313:[3378..3434).11" Target="10313:[1391..1416).1" />
<Link Source="10313:[3378..3434).11" Target="10286:[23124..23146).8" />
<Link Source="10313:[735..760).4" Target="10313:[3378..3434).11" />
<Link Source="10313:[735..760).4" Target="10286:[23124..23146).8" />
<Link Source="10313:[840..920).19" Target="10286:[23124..23146).8" />
<Link Source="10313:[840..920).22" Target="10313:[735..760).4" />
<Link Source="10313:[840..920).22" Target="10286:[23124..23146).8" />
<Link Source="10313:[3733..3747).4" Target="10313:[840..920).19" />
<Link Source="10313:[3733..3747).4" Target="10286:[23124..23146).8" />
<Link Source="10313:[3749..3766).4" Target="10313:[840..920).19" />
<Link Source="10313:[3749..3766).4" Target="10286:[23124..23146).8" />
<Link Source="10313:[3768..3779).4" Target="10313:[840..920).19" />
<Link Source="10313:[3768..3779).4" Target="10286:[23124..23146).8" />
<Link Source="10313:[3781..3806).4" Target="10313:[840..920).22" />
<Link Source="10313:[3781..3806).4" Target="10286:[23124..23146).8" />
<Link Source="10313:[3832..3924).10" Target="10313:[3768..3779).4" />
<Link Source="10313:[3832..3924).10" Target="10286:[23124..23146).8" />
<Link Source="10313:[4210..4315).4" Target="10286:[23124..23146).8" />
<Link Source="10313:[4335..4374).4" Target="10286:[23124..23146).8" />
<Link Source="10313:[4392..4543).13" Target="10313:[4335..4374).4" />
<Link Source="10313:[4392..4543).13" Target="10286:[23124..23146).8" />
<Link Source="10313:[4392..4543).14" Target="10286:[23124..23146).8" />
<Link Source="10313:[4698..4727).4" Target="10286:[23124..23146).8" />
<Link Source="10286:[8381..8389).4" Target="10286:[23124..23146).8" />
<Link Source="10286:[8381..8389).4" Target="10313:[4698..4727).4" />
<Link Source="10286:[8384..8389).7" Target="10313:[4698..4727).4" />
<Link Source="10313:[4676..4801).10" Target="10286:[8384..8389).7" />
<Link Source="10313:[4676..4801).10" Target="10286:[23124..23146).8" />
<Link Source="10313:[5488..5662).16" Target="10286:[23124..23146).8" />
<Link Source="10313:[5488..5662).16" Target="EXTERNAL" />
<Link Source="10313:[5488..5662).17" Target="10286:[23124..23146).8" />
<Link Source="10313:[4821..5028).7" Target="10313:[5488..5662).16" />
<Link Source="10313:[4821..5028).7" Target="10286:[23124..23146).8" />
<Link Source="10313:[4996..5009).7" Target="10313:[4821..5028).7" />
<Link Source="10313:[840..920).23" Target="10313:[4996..5009).7" />
<Link Source="10313:[840..920).23" Target="10286:[23124..23146).8" />
<Link Source="10313:[3537..3552).5" Target="10286:[23124..23146).8" />
<Link Source="10313:[3537..3552).5" Target="25002:[4395..4432).1" />
<Link Source="10319:[76494..76582).42" Target="10319:[73753..73778).8" />
<Link Source="10319:[76494..76582).42" Target="10319:[76494..76582).37" />
<Link Source="10319:[76494..76582).42" Target="10286:[23124..23146).8" />
<Link Source="10287:[791..833).19" Target="10319:[73753..73778).8" />
<Link Source="10287:[791..833).19" Target="10286:[23124..23146).8" />
<Link Source="10286:[21563..21583).10" Target="10319:[73753..73778).8" />
<Link Source="10286:[22110..22130).10" Target="10286:[21563..21583).10" />
<Link Source="10286:[22110..22130).10" Target="10319:[73753..73778).8" />
<Link Source="10286:[15616..15690).46" Target="10319:[73753..73778).8" />
<Link Source="10286:[15616..15690).47" Target="10319:[73753..73778).8" />
<Link Source="10286:[15616..15690).47" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).10" Target="10319:[73753..73778).8" />
<Link Source="10286:[23161..23181).10" Target="10286:[22110..22130).10" />
<Link Source="10286:[23161..23181).10" Target="10319:[73753..73778).8" />
<Link Source="10286:[23281..23301).10" Target="10319:[73753..73778).8" />
<Link Source="10286:[23380..23684).64" Target="10319:[73753..73778).8" />
<Link Source="10286:[23380..23684).64" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).19" Target="10319:[73753..73778).8" />
<Link Source="10286:[23893..24026).19" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).19" Target="10286:[23161..23181).10" />
<Link Source="10286:[24545..24641).19" Target="10319:[73753..73778).8" />
<Link Source="10286:[24655..25349).10" Target="10286:[24545..24641).19" />
<Link Source="10286:[24655..25349).10" Target="10319:[73753..73778).8" />
<Link Source="10286:[26910..26935).10" Target="10319:[73753..73778).8" />
<Link Source="10286:[26952..26974).10" Target="10319:[73753..73778).8" />
<Link Source="10286:[27002..27022).10" Target="10286:[23281..23301).10" />
<Link Source="10286:[27002..27022).10" Target="10319:[73753..73778).8" />
<Link Source="10286:[27048..27088).37" Target="10319:[73753..73778).8" />
<Link Source="10286:[27048..27088).38" Target="10286:[26910..26935).10" />
<Link Source="10286:[27048..27088).38" Target="10286:[27048..27088).37" />
<Link Source="10286:[27048..27088).38" Target="10319:[73753..73778).8" />
<Link Source="10286:[27208..27236).19" Target="10319:[73753..73778).8" />
<Link Source="10286:[27250..27722).10" Target="10319:[73753..73778).8" />
<Link Source="10286:[27738..27845).28" Target="10319:[73753..73778).8" />
<Link Source="10286:[27738..27845).29" Target="10286:[27208..27236).19" />
<Link Source="10286:[27738..27845).29" Target="10286:[27738..27845).28" />
<Link Source="10286:[27738..27845).29" Target="10319:[73753..73778).8" />
<Link Source="10286:[27861..27873).10" Target="10319:[73753..73778).8" />
<Link Source="10286:[26281..26812).10" Target="10286:[27861..27873).10" />
<Link Source="10286:[26281..26812).10" Target="10319:[73753..73778).8" />
<Link Source="10286:[26450..26769).10" Target="10286:[24545..24641).19" />
<Link Source="10286:[26450..26769).10" Target="10286:[26281..26812).10" />
<Link Source="10287:[1680..1716).11" Target="10319:[73753..73778).8" />
<Link Source="10287:[1680..1716).11" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1690).10" Target="10287:[1680..1716).11" />
<Link Source="10287:[1683..1690).10" Target="10319:[73753..73778).8" />
<Link Source="10287:[1683..1690).10" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1716).21" Target="10287:[1683..1690).10" />
<Link Source="10287:[1683..1716).21" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).21" Target="10319:[51939..51953).2" />
<Link Source="10319:[51935..52244).21" Target="10287:[1683..1716).21" />
<Link Source="10319:[51935..52244).21" Target="10319:[13969..14029).1" />
<Link Source="10076:[5223..5250).26" Target="10319:[73753..73778).8" />
<Link Source="10076:[5223..5250).26" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).26" Target="10076:[4989..5047).1" />
<Link Source="10077:[44231..44317).105" Target="10319:[73753..73778).8" />
<Link Source="10077:[44231..44317).105" Target="10077:[5585..5624).1" />
<Link Source="10077:[44231..44317).113" Target="10319:[73753..73778).8" />
<Link Source="10077:[6212..6251).11" Target="10319:[73753..73778).8" />
<Link Source="10077:[6275..6566).16" Target="10319:[73753..73778).8" />
<Link Source="10077:[6275..6566).16" Target="10077:[39766..39774).2" />
<Link Source="10077:[6590..6839).11" Target="10319:[73753..73778).8" />
<Link Source="10077:[6590..6839).11" Target="EXTERNAL" />
<Link Source="10286:[1688..1781).37" Target="10319:[73753..73778).8" />
<Link Source="10286:[1688..1781).37" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).44" Target="10286:[1688..1781).37" />
<Link Source="10298:[471..492).44" Target="10286:[1708..1779).2" />
<Link Source="10286:[1820..1963).37" Target="10319:[73753..73778).8" />
<Link Source="10286:[1820..1963).37" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).45" Target="10286:[1820..1963).37" />
<Link Source="10298:[471..492).45" Target="10286:[1840..1888).2" />
<Link Source="10319:[20745..20878).1" Target="10319:[20002..20025).2" />
<Link Source="10319:[20745..20878).1" Target="10319:[73753..73778).8" />
<Link Source="10319:[20745..20878).2" Target="10319:[20027..20052).2" />
<Link Source="10319:[20745..20878).2" Target="10319:[73753..73778).8" />
<Link Source="10319:[20745..20878).3" Target="10319:[20054..20093).2" />
<Link Source="10319:[20745..20878).3" Target="10319:[73753..73778).8" />
<Link Source="10319:[20745..20878).4" Target="10319:[73753..73778).8" />
<Link Source="10319:[20752..20877).1" Target="10319:[73753..73778).8" />
<Link Source="10319:[54444..54466).1" Target="10319:[20745..20878).1" />
<Link Source="10319:[54444..54466).1" Target="10319:[20752..20877).1" />
<Link Source="10319:[54481..54506).1" Target="10319:[20745..20878).2" />
<Link Source="10319:[54481..54506).1" Target="10319:[20752..20877).1" />
<Link Source="10319:[54521..54560).1" Target="10319:[20745..20878).3" />
<Link Source="10319:[54521..54560).1" Target="10319:[20752..20877).1" />
<Link Source="10319:[54575..54609).1" Target="10319:[20745..20878).4" />
<Link Source="10319:[54575..54609).1" Target="10319:[20752..20877).1" />
<Link Source="10319:[54356..60744).1" Target="10319:[19916..30085).2" />
<Link Source="10319:[54356..60744).1" Target="10319:[20752..20877).1" />
<Link Source="10319:[57602..57644).1" Target="10319:[54444..54466).1" />
<Link Source="10319:[57602..57644).1" Target="10319:[73753..73778).8" />
<Link Source="10319:[57602..57644).1" Target="10319:[20752..20877).1" />
<Link Source="10319:[57660..57740).1" Target="10319:[54444..54466).1" />
<Link Source="10319:[57660..57740).1" Target="10319:[73753..73778).8" />
<Link Source="10319:[57660..57740).1" Target="10319:[20752..20877).1" />
<Link Source="10319:[57756..57807).1" Target="10319:[54444..54466).1" />
<Link Source="10319:[57756..57807).1" Target="10319:[73753..73778).8" />
<Link Source="10319:[57756..57807).1" Target="10319:[20752..20877).1" />
<Link Source="10319:[57821..57907).1" Target="10319:[54444..54466).1" />
<Link Source="10319:[57821..57907).1" Target="10319:[20752..20877).1" />
<Link Source="10319:[57821..57907).2" Target="10319:[20752..20877).1" />
<Link Source="10319:[57845..57906).1" Target="10319:[20752..20877).1" />
<Link Source="10319:[50313..50328).3" Target="10319:[57821..57907).1" />
<Link Source="10319:[50313..50328).3" Target="10319:[57845..57906).1" />
<Link Source="10319:[50330..50355).3" Target="10319:[57821..57907).2" />
<Link Source="10319:[50330..50355).3" Target="10319:[57845..57906).1" />
<Link Source="10319:[57923..58084).1" Target="10319:[54481..54506).1" />
<Link Source="10319:[57923..58084).1" Target="10319:[20752..20877).1" />
<Link Source="10319:[57923..58084).2" Target="10319:[54521..54560).1" />
<Link Source="10319:[57923..58084).2" Target="10319:[20752..20877).1" />
<Link Source="10319:[57923..58084).3" Target="10319:[54575..54609).1" />
<Link Source="10319:[57923..58084).3" Target="10319:[20752..20877).1" />
<Link Source="10319:[57923..58084).4" Target="10319:[54444..54466).1" />
<Link Source="10319:[57923..58084).4" Target="10319:[20752..20877).1" />
<Link Source="10319:[57923..58084).5" Target="10319:[57602..57644).1" />
<Link Source="10319:[57923..58084).5" Target="10319:[20752..20877).1" />
<Link Source="10319:[57923..58084).6" Target="10319:[54444..54466).1" />
<Link Source="10319:[57923..58084).6" Target="10319:[50313..50328).3" />
<Link Source="10319:[57923..58084).6" Target="10319:[20752..20877).1" />
<Link Source="10319:[57923..58084).7" Target="10319:[50313..50328).3" />
<Link Source="10319:[57923..58084).7" Target="10319:[20752..20877).1" />
<Link Source="10319:[57959..58083).1" Target="10319:[20752..20877).1" />
<Link Source="10319:[60816..60841).1" Target="10319:[57923..58084).1" />
<Link Source="10319:[60816..60841).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[60856..60895).1" Target="10319:[57923..58084).2" />
<Link Source="10319:[60856..60895).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[60910..60944).1" Target="10319:[57923..58084).3" />
<Link Source="10319:[60910..60944).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[60959..60981).1" Target="10319:[57923..58084).4" />
<Link Source="10319:[60959..60981).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[60996..61012).1" Target="10319:[57923..58084).5" />
<Link Source="10319:[60996..61012).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61027..61036).1" Target="10319:[57923..58084).6" />
<Link Source="10319:[61027..61036).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61051..61072).1" Target="10319:[57923..58084).7" />
<Link Source="10319:[61051..61072).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[60756..63756).1" Target="10319:[54356..60744).1" />
<Link Source="10319:[60756..63756).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61098..61209).1" Target="10319:[60959..60981).1" />
<Link Source="10319:[61098..61209).1" Target="10319:[50313..50328).3" />
<Link Source="10319:[61098..61209).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61098..61209).2" Target="10319:[60910..60944).1" />
<Link Source="10319:[61098..61209).2" Target="10319:[57959..58083).1" />
<Link Source="10319:[61098..61209).3" Target="10319:[60996..61012).1" />
<Link Source="10319:[61098..61209).3" Target="10319:[57959..58083).1" />
<Link Source="10319:[61098..61209).4" Target="10319:[61027..61036).1" />
<Link Source="10319:[61098..61209).4" Target="10319:[57959..58083).1" />
<Link Source="10319:[61098..61209).5" Target="10319:[60816..60841).1" />
<Link Source="10319:[61098..61209).5" Target="10319:[57959..58083).1" />
<Link Source="10319:[61116..61208).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[63849..63870).3" Target="10319:[61098..61209).1" />
<Link Source="10319:[63849..63870).3" Target="10319:[61116..61208).1" />
<Link Source="10319:[63885..63919).3" Target="10319:[61098..61209).2" />
<Link Source="10319:[63885..63919).3" Target="10319:[61116..61208).1" />
<Link Source="10319:[63934..63945).3" Target="10319:[61098..61209).3" />
<Link Source="10319:[63934..63945).3" Target="10319:[61116..61208).1" />
<Link Source="10319:[63960..63969).3" Target="10319:[61098..61209).4" />
<Link Source="10319:[63960..63969).3" Target="10319:[61116..61208).1" />
<Link Source="10319:[63984..64009).3" Target="10319:[61098..61209).5" />
<Link Source="10319:[63984..64009).3" Target="10319:[61116..61208).1" />
<Link Source="10319:[63768..64484).3" Target="10319:[60756..63756).1" />
<Link Source="10319:[63768..64484).3" Target="10319:[61116..61208).1" />
<Link Source="10319:[64035..64445).9" Target="10319:[61116..61208).1" />
<Link Source="10319:[64035..64445).10" Target="10319:[63885..63919).3" />
<Link Source="10319:[64035..64445).10" Target="10319:[64035..64445).9" />
<Link Source="10319:[64035..64445).10" Target="10319:[61116..61208).1" />
<Link Source="10319:[64461..64473).5" Target="10319:[61116..61208).1" />
<Link Source="10319:[61098..61209).6" Target="10319:[64461..64473).5" />
<Link Source="10319:[61098..61209).6" Target="10319:[57959..58083).1" />
<Link Source="10319:[61223..61322).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61223..61322).2" Target="10319:[61098..61209).6" />
<Link Source="10319:[61223..61322).2" Target="10319:[61223..61322).1" />
<Link Source="10319:[61223..61322).2" Target="10319:[57959..58083).1" />
<Link Source="10319:[61357..61383).1" Target="10319:[57959..58083).1" />
<Link Source="10354:[11244..11285).15" Target="10354:[10809..10838).1" />
<Link Source="10354:[11244..11285).15" Target="10319:[50313..50328).3" />
<Link Source="10354:[11244..11285).15" Target="10319:[61357..61383).1" />
<Link Source="10354:[11312..11328).4" Target="10319:[61357..61383).1" />
<Link Source="10354:[3684..3818).14" Target="10354:[11244..11285).15" />
<Link Source="10354:[3684..3818).14" Target="10354:[11312..11328).4" />
<Link Source="10354:[3720..3803).97" Target="10354:[3684..3818).14" />
<Link Source="10354:[3720..3803).97" Target="10354:[11244..11285).15" />
<Link Source="10354:[3720..3803).97" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).97" Target="10354:[11312..11328).4" />
<Link Source="10354:[3720..3803).98" Target="10354:[11312..11328).4" />
<Link Source="10354:[3720..3803).99" Target="10354:[3684..3818).14" />
<Link Source="10354:[3720..3803).99" Target="10354:[11244..11285).15" />
<Link Source="10354:[3720..3803).99" Target="10354:[3720..3803).98" />
<Link Source="10354:[3720..3803).99" Target="10354:[11312..11328).4" />
<Link Source="10354:[11299..11330).10" Target="10354:[3720..3803).97" />
<Link Source="10354:[11299..11330).10" Target="10319:[61357..61383).1" />
<Link Source="10319:[61338..61384).1" Target="10354:[11244..11285).15" />
<Link Source="10319:[61338..61384).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61398..61448).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61462..61626).1" Target="10319:[61338..61384).1" />
<Link Source="10319:[61462..61626).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61462..61626).2" Target="10319:[60910..60944).1" />
<Link Source="10319:[61462..61626).2" Target="10319:[57959..58083).1" />
<Link Source="10319:[61462..61626).3" Target="10319:[60996..61012).1" />
<Link Source="10319:[61462..61626).3" Target="10319:[57959..58083).1" />
<Link Source="10319:[61462..61626).4" Target="10319:[61027..61036).1" />
<Link Source="10319:[61462..61626).4" Target="10319:[57959..58083).1" />
<Link Source="10319:[61462..61626).5" Target="10319:[60856..60895).1" />
<Link Source="10319:[61462..61626).5" Target="10319:[57959..58083).1" />
<Link Source="10319:[61462..61626).6" Target="10319:[61051..61072).1" />
<Link Source="10319:[61462..61626).6" Target="10319:[57959..58083).1" />
<Link Source="10319:[61462..61626).7" Target="10319:[57959..58083).1" />
<Link Source="10319:[61462..61626).9" Target="10319:[61398..61448).1" />
<Link Source="10319:[61462..61626).9" Target="10319:[57959..58083).1" />
<Link Source="10319:[61462..61625).1" Target="10319:[57959..58083).1" />
<Link Source="10312:[994..1013).3" Target="10319:[61462..61626).1" />
<Link Source="10312:[994..1013).3" Target="10319:[61462..61625).1" />
<Link Source="10312:[1028..1062).3" Target="10319:[61462..61626).2" />
<Link Source="10312:[1028..1062).3" Target="10319:[61462..61625).1" />
<Link Source="10312:[1077..1093).3" Target="10319:[61462..61626).3" />
<Link Source="10312:[1077..1093).3" Target="10319:[61462..61625).1" />
<Link Source="10312:[1108..1117).3" Target="10319:[61462..61626).4" />
<Link Source="10312:[1108..1117).3" Target="10319:[61462..61625).1" />
<Link Source="10312:[1132..1171).3" Target="10319:[61462..61626).5" />
<Link Source="10312:[1132..1171).3" Target="10319:[61462..61625).1" />
<Link Source="10312:[1186..1207).3" Target="10319:[61462..61626).6" />
<Link Source="10312:[1186..1207).3" Target="10319:[61462..61625).1" />
<Link Source="10312:[1222..1235).3" Target="10319:[61462..61626).7" />
<Link Source="10312:[1222..1235).3" Target="10319:[61462..61625).1" />
<Link Source="10312:[1250..1296).3" Target="10319:[61462..61626).9" />
<Link Source="10312:[1250..1296).3" Target="10319:[61462..61625).1" />
<Link Source="10312:[942..1750).3" Target="10319:[60756..63756).1" />
<Link Source="10312:[942..1750).3" Target="10319:[61462..61625).1" />
<Link Source="10312:[1585..1724).19" Target="10312:[994..1013).3" />
<Link Source="10312:[1585..1724).19" Target="10312:[1186..1207).3" />
<Link Source="10312:[1585..1724).20" Target="10312:[1028..1062).3" />
<Link Source="10312:[1585..1724).20" Target="10312:[1186..1207).3" />
<Link Source="10312:[1585..1724).21" Target="10312:[1077..1093).3" />
<Link Source="10312:[1585..1724).21" Target="10312:[1186..1207).3" />
<Link Source="10312:[1585..1724).22" Target="10312:[1108..1117).3" />
<Link Source="10312:[1585..1724).22" Target="10312:[1186..1207).3" />
<Link Source="10312:[1585..1724).23" Target="10312:[1132..1171).3" />
<Link Source="10312:[1585..1724).23" Target="10312:[1186..1207).3" />
<Link Source="10312:[1585..1724).25" Target="10312:[1222..1235).3" />
<Link Source="10312:[1585..1724).25" Target="10312:[1186..1207).3" />
<Link Source="10312:[1585..1724).26" Target="10312:[1250..1296).3" />
<Link Source="10312:[1585..1724).26" Target="10312:[1186..1207).3" />
<Link Source="10312:[5944..5957).3" Target="10312:[1585..1724).25" />
<Link Source="10312:[5944..5957).3" Target="10312:[1186..1207).3" />
<Link Source="10312:[5663..6444).3" Target="10312:[942..1750).3" />
<Link Source="10312:[5663..6444).3" Target="10312:[1186..1207).3" />
<Link Source="10312:[6110..6221).17" Target="10312:[1585..1724).19" />
<Link Source="10312:[6110..6221).17" Target="10312:[1585..1724).20" />
<Link Source="10312:[6110..6221).18" Target="10312:[1585..1724).21" />
<Link Source="10312:[6110..6221).18" Target="10312:[1585..1724).20" />
<Link Source="10312:[6110..6221).19" Target="10312:[1585..1724).22" />
<Link Source="10312:[6110..6221).19" Target="10312:[1585..1724).20" />
<Link Source="10312:[6110..6221).20" Target="10312:[1585..1724).23" />
<Link Source="10312:[6110..6221).20" Target="10312:[1585..1724).20" />
<Link Source="10312:[6110..6221).22" Target="10312:[5944..5957).3" />
<Link Source="10312:[6110..6221).22" Target="10312:[1585..1724).20" />
<Link Source="10312:[6110..6221).23" Target="10312:[1585..1724).26" />
<Link Source="10312:[6110..6221).23" Target="10312:[1585..1724).20" />
<Link Source="10312:[3730..3739).3" Target="10312:[6110..6221).19" />
<Link Source="10312:[3730..3739).3" Target="10312:[1585..1724).20" />
<Link Source="10312:[3805..3818).3" Target="10312:[6110..6221).22" />
<Link Source="10312:[3805..3818).3" Target="10312:[1585..1724).20" />
<Link Source="10312:[3645..5112).3" Target="10312:[5663..6444).3" />
<Link Source="10312:[3645..5112).3" Target="10312:[1585..1724).20" />
<Link Source="10312:[3905..3919).3" Target="10312:[1585..1724).20" />
<Link Source="10354:[3684..3818).15" Target="10312:[6110..6221).17" />
<Link Source="10354:[3684..3818).15" Target="10312:[3905..3919).3" />
<Link Source="10354:[3720..3803).105" Target="10354:[3684..3818).15" />
<Link Source="10354:[3720..3803).105" Target="10354:[11244..11285).15" />
<Link Source="10354:[3720..3803).105" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).105" Target="10312:[3905..3919).3" />
<Link Source="10354:[3720..3803).106" Target="10312:[3905..3919).3" />
<Link Source="10354:[3720..3803).107" Target="10354:[3684..3818).15" />
<Link Source="10354:[3720..3803).107" Target="10354:[11244..11285).15" />
<Link Source="10354:[3720..3803).107" Target="10354:[3720..3803).106" />
<Link Source="10354:[3720..3803).107" Target="10312:[3905..3919).3" />
<Link Source="10312:[3892..3921).7" Target="10354:[3720..3803).105" />
<Link Source="10312:[3892..3921).7" Target="10312:[1585..1724).20" />
<Link Source="10312:[3935..3968).9" Target="10312:[1585..1724).20" />
<Link Source="10312:[3948..3966).3" Target="10312:[1585..1724).20" />
<Link Source="10353:[4698..4724).6" Target="10312:[3935..3968).9" />
<Link Source="10353:[4698..4724).6" Target="10312:[3948..3966).3" />
<Link Source="10353:[4750..4847).11" Target="10353:[4698..4724).6" />
<Link Source="10353:[4750..4847).11" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).11" Target="10312:[3948..3966).3" />
<Link Source="10353:[4863..5000).21" Target="10353:[4698..4724).6" />
<Link Source="10353:[4863..5000).21" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).21" Target="10312:[3948..3966).3" />
<Link Source="10353:[4863..5000).22" Target="10312:[3948..3966).3" />
<Link Source="10353:[5079..5183).11" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).11" Target="10312:[3948..3966).3" />
<Link Source="10353:[5197..5323).16" Target="10353:[4698..4724).6" />
<Link Source="10353:[5197..5323).16" Target="10353:[5079..5183).11" />
<Link Source="10353:[5197..5323).16" Target="10312:[3948..3966).3" />
<Link Source="10353:[5485..5759).31" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).31" Target="10312:[3948..3966).3" />
<Link Source="10353:[5485..5759).32" Target="10353:[4698..4724).6" />
<Link Source="10353:[5485..5759).32" Target="10353:[5485..5759).31" />
<Link Source="10353:[5485..5759).32" Target="10312:[3948..3966).3" />
<Link Source="10353:[5485..5759).33" Target="10312:[3948..3966).3" />
<Link Source="10353:[5775..5979).21" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).21" Target="10312:[3948..3966).3" />
<Link Source="10353:[5775..5979).23" Target="10353:[4698..4724).6" />
<Link Source="10353:[5775..5979).23" Target="10353:[5775..5979).21" />
<Link Source="10353:[5775..5979).23" Target="10312:[3948..3966).3" />
<Link Source="10353:[5995..6029).16" Target="10353:[5775..5979).23" />
<Link Source="10353:[5995..6029).16" Target="10312:[3948..3966).3" />
<Link Source="10353:[6002..6028).6" Target="10312:[3948..3966).3" />
<Link Source="10353:[6343..6358).6" Target="10353:[5995..6029).16" />
<Link Source="10353:[6343..6358).6" Target="10353:[6002..6028).6" />
<Link Source="10353:[6384..6410).31" Target="10353:[6002..6028).6" />
<Link Source="10353:[6384..6410).32" Target="10353:[6343..6358).6" />
<Link Source="10353:[6384..6410).32" Target="10353:[6384..6410).31" />
<Link Source="10353:[6384..6410).32" Target="10353:[6002..6028).6" />
<Link Source="10312:[4019..5073).47" Target="10312:[3645..5112).3" />
<Link Source="10312:[4019..5073).47" Target="10312:[6110..6221).17" />
<Link Source="10312:[4019..5073).47" Target="10312:[1585..1724).20" />
<Link Source="10312:[4534..4658).47" Target="10312:[6110..6221).18" />
<Link Source="10312:[4534..4658).47" Target="10312:[4019..5073).47" />
<Link Source="10312:[4534..4658).48" Target="10312:[3730..3739).3" />
<Link Source="10312:[4534..4658).48" Target="10312:[4019..5073).47" />
<Link Source="10312:[4534..4658).49" Target="10312:[6110..6221).20" />
<Link Source="10312:[4534..4658).49" Target="10312:[4019..5073).47" />
<Link Source="10312:[4534..4658).52" Target="10312:[3805..3818).3" />
<Link Source="10312:[4534..4658).52" Target="10312:[4019..5073).47" />
<Link Source="10312:[4534..4658).53" Target="10312:[6110..6221).23" />
<Link Source="10312:[4534..4658).53" Target="10312:[4019..5073).47" />
<Link Source="10312:[5188..5207).3" Target="10312:[4019..5073).47" />
<Link Source="10312:[5209..5220).3" Target="10312:[4534..4658).47" />
<Link Source="10312:[5209..5220).3" Target="10312:[4019..5073).47" />
<Link Source="10312:[5222..5231).3" Target="10312:[4534..4658).48" />
<Link Source="10312:[5222..5231).3" Target="10312:[4019..5073).47" />
<Link Source="10312:[5233..5272).3" Target="10312:[4534..4658).49" />
<Link Source="10312:[5233..5272).3" Target="10312:[4019..5073).47" />
<Link Source="10312:[5274..5295).3" Target="10312:[4019..5073).47" />
<Link Source="10312:[5297..5318).3" Target="10312:[4019..5073).47" />
<Link Source="10312:[5320..5333).3" Target="10312:[4534..4658).52" />
<Link Source="10312:[5320..5333).3" Target="10312:[4019..5073).47" />
<Link Source="10312:[5124..5404).3" Target="10312:[3645..5112).3" />
<Link Source="10312:[5124..5404).3" Target="10312:[4019..5073).47" />
<Link Source="10312:[4685..4699).6" Target="10312:[4019..5073).47" />
<Link Source="10354:[3684..3818).16" Target="10312:[6110..6221).17" />
<Link Source="10354:[3684..3818).16" Target="10312:[4685..4699).6" />
<Link Source="10354:[3720..3803).113" Target="10354:[3684..3818).16" />
<Link Source="10354:[3720..3803).113" Target="10354:[11244..11285).15" />
<Link Source="10354:[3720..3803).113" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).113" Target="10312:[4685..4699).6" />
<Link Source="10354:[3720..3803).114" Target="10312:[4685..4699).6" />
<Link Source="10354:[3720..3803).115" Target="10354:[3684..3818).16" />
<Link Source="10354:[3720..3803).115" Target="10354:[11244..11285).15" />
<Link Source="10354:[3720..3803).115" Target="10354:[3720..3803).114" />
<Link Source="10354:[3720..3803).115" Target="10312:[4685..4699).6" />
<Link Source="10312:[4680..4787).11" Target="10354:[3720..3803).113" />
<Link Source="10312:[4680..4787).11" Target="10312:[4019..5073).47" />
<Link Source="10312:[4826..5058).26" Target="10312:[1585..1724).20" />
<Link Source="10312:[4826..5058).26" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).26" Target="10312:[4019..5073).47" />
<Link Source="10312:[4826..5058).27" Target="10312:[4019..5073).47" />
<Link Source="10346:[10663..10672).4" Target="10312:[4534..4658).48" />
<Link Source="10346:[10663..10672).4" Target="10312:[4019..5073).47" />
<Link Source="10346:[10761..10774).4" Target="10312:[4534..4658).52" />
<Link Source="10346:[10761..10774).4" Target="10312:[4019..5073).47" />
<Link Source="10346:[10861..10875).4" Target="10312:[4019..5073).47" />
<Link Source="10354:[3684..3818).17" Target="10312:[4019..5073).47" />
<Link Source="10354:[3684..3818).17" Target="10346:[10861..10875).4" />
<Link Source="10354:[3720..3803).121" Target="10354:[3684..3818).17" />
<Link Source="10354:[3720..3803).121" Target="10354:[11244..11285).15" />
<Link Source="10354:[3720..3803).121" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).121" Target="10346:[10861..10875).4" />
<Link Source="10354:[3720..3803).122" Target="10346:[10861..10875).4" />
<Link Source="10354:[3720..3803).123" Target="10354:[3684..3818).17" />
<Link Source="10354:[3720..3803).123" Target="10354:[11244..11285).15" />
<Link Source="10354:[3720..3803).123" Target="10354:[3720..3803).122" />
<Link Source="10354:[3720..3803).123" Target="10346:[10861..10875).4" />
<Link Source="10346:[10848..10877).10" Target="10354:[3720..3803).121" />
<Link Source="10346:[10848..10877).10" Target="10312:[4019..5073).47" />
<Link Source="10346:[10897..10914).4" Target="10312:[4019..5073).47" />
<Link Source="10346:[7666..7775).4" Target="10312:[4019..5073).47" />
<Link Source="10346:[7666..7775).4" Target="10346:[10897..10914).4" />
<Link Source="10346:[7672..7773).10" Target="10346:[7666..7775).4" />
<Link Source="10346:[7672..7773).10" Target="10354:[11244..11285).15" />
<Link Source="10346:[7672..7773).10" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).10" Target="10346:[10897..10914).4" />
<Link Source="10346:[10893..11127).7" Target="10346:[7672..7773).10" />
<Link Source="10346:[10893..11127).7" Target="10312:[4019..5073).47" />
<Link Source="10346:[3525..3638).31" Target="10312:[4019..5073).47" />
<Link Source="10312:[7718..7727).4" Target="10346:[10663..10672).4" />
<Link Source="10312:[7718..7727).4" Target="10312:[4019..5073).47" />
<Link Source="10312:[7816..7829).4" Target="10346:[10761..10774).4" />
<Link Source="10312:[7816..7829).4" Target="10312:[4019..5073).47" />
<Link Source="10312:[7903..7936).13" Target="10312:[4019..5073).47" />
<Link Source="10312:[7916..7934).4" Target="10312:[4019..5073).47" />
<Link Source="10353:[4698..4724).7" Target="10312:[7903..7936).13" />
<Link Source="10353:[4698..4724).7" Target="10312:[7916..7934).4" />
<Link Source="10353:[4750..4847).13" Target="10353:[4698..4724).7" />
<Link Source="10353:[4750..4847).13" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).13" Target="10312:[7916..7934).4" />
<Link Source="10353:[4863..5000).25" Target="10353:[4698..4724).7" />
<Link Source="10353:[4863..5000).25" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).25" Target="10312:[7916..7934).4" />
<Link Source="10353:[4863..5000).26" Target="10312:[7916..7934).4" />
<Link Source="10353:[5079..5183).13" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).13" Target="10312:[7916..7934).4" />
<Link Source="10353:[5197..5323).19" Target="10353:[4698..4724).7" />
<Link Source="10353:[5197..5323).19" Target="10353:[5079..5183).13" />
<Link Source="10353:[5197..5323).19" Target="10312:[7916..7934).4" />
<Link Source="10353:[5485..5759).37" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).37" Target="10312:[7916..7934).4" />
<Link Source="10353:[5485..5759).38" Target="10353:[4698..4724).7" />
<Link Source="10353:[5485..5759).38" Target="10353:[5485..5759).37" />
<Link Source="10353:[5485..5759).38" Target="10312:[7916..7934).4" />
<Link Source="10353:[5485..5759).39" Target="10312:[7916..7934).4" />
<Link Source="10353:[5775..5979).25" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).25" Target="10312:[7916..7934).4" />
<Link Source="10353:[5775..5979).27" Target="10353:[4698..4724).7" />
<Link Source="10353:[5775..5979).27" Target="10353:[5775..5979).25" />
<Link Source="10353:[5775..5979).27" Target="10312:[7916..7934).4" />
<Link Source="10353:[5995..6029).19" Target="10353:[5775..5979).27" />
<Link Source="10353:[5995..6029).19" Target="10312:[7916..7934).4" />
<Link Source="10353:[6002..6028).7" Target="10312:[7916..7934).4" />
<Link Source="10353:[6343..6358).7" Target="10353:[5995..6029).19" />
<Link Source="10353:[6343..6358).7" Target="10353:[6002..6028).7" />
<Link Source="10353:[6384..6410).37" Target="10353:[6002..6028).7" />
<Link Source="10353:[6384..6410).38" Target="10353:[6343..6358).7" />
<Link Source="10353:[6384..6410).38" Target="10353:[6384..6410).37" />
<Link Source="10353:[6384..6410).38" Target="10353:[6002..6028).7" />
<Link Source="10312:[7952..7977).13" Target="10312:[4019..5073).47" />
<Link Source="10312:[7952..7977).14" Target="10312:[7718..7727).4" />
<Link Source="10312:[7952..7977).14" Target="10312:[7952..7977).13" />
<Link Source="10312:[7952..7977).14" Target="10312:[4019..5073).47" />
<Link Source="10312:[8594..8603).2" Target="10312:[7718..7727).4" />
<Link Source="10312:[8594..8603).2" Target="10312:[4019..5073).47" />
<Link Source="10312:[8669..8690).2" Target="10312:[4019..5073).47" />
<Link Source="10312:[8692..8705).2" Target="10312:[7816..7829).4" />
<Link Source="10312:[8692..8705).2" Target="10312:[4019..5073).47" />
<Link Source="10312:[34797..34806).2" Target="10312:[8594..8603).2" />
<Link Source="10312:[34797..34806).2" Target="10312:[4019..5073).47" />
<Link Source="10312:[34911..34932).2" Target="10312:[8669..8690).2" />
<Link Source="10312:[34911..34932).2" Target="10312:[4019..5073).47" />
<Link Source="10312:[34947..34960).2" Target="10312:[8692..8705).2" />
<Link Source="10312:[34947..34960).2" Target="10312:[4019..5073).47" />
<Link Source="10312:[35403..35412).2" Target="10312:[34797..34806).2" />
<Link Source="10312:[35403..35412).2" Target="10312:[4019..5073).47" />
<Link Source="10312:[35517..35538).2" Target="10312:[34911..34932).2" />
<Link Source="10312:[35517..35538).2" Target="10312:[4019..5073).47" />
<Link Source="10312:[35553..35581).2" Target="10312:[4019..5073).47" />
<Link Source="10312:[35596..35609).2" Target="10312:[34947..34960).2" />
<Link Source="10312:[35596..35609).2" Target="10312:[4019..5073).47" />
<Link Source="10312:[35696..35731).5" Target="10312:[4019..5073).47" />
<Link Source="10354:[11312..11328).5" Target="10312:[4019..5073).47" />
<Link Source="10354:[3684..3818).18" Target="10312:[4019..5073).47" />
<Link Source="10354:[3684..3818).18" Target="10354:[11312..11328).5" />
<Link Source="10354:[3720..3803).129" Target="10354:[3684..3818).18" />
<Link Source="10354:[3720..3803).129" Target="10312:[4019..5073).47" />
<Link Source="10354:[3720..3803).129" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).129" Target="10354:[11312..11328).5" />
<Link Source="10354:[3720..3803).130" Target="10354:[11312..11328).5" />
<Link Source="10354:[3720..3803).131" Target="10354:[3684..3818).18" />
<Link Source="10354:[3720..3803).131" Target="10312:[4019..5073).47" />
<Link Source="10354:[3720..3803).131" Target="10354:[3720..3803).130" />
<Link Source="10354:[3720..3803).131" Target="10354:[11312..11328).5" />
<Link Source="10354:[11299..11330).13" Target="10354:[3720..3803).129" />
<Link Source="10354:[11299..11330).13" Target="10312:[4019..5073).47" />
<Link Source="10312:[36067..36079).3" Target="10312:[4019..5073).47" />
<Link Source="10312:[33656..33675).3" Target="10312:[4019..5073).47" />
<Link Source="10312:[33707..33716).3" Target="10312:[35403..35412).2" />
<Link Source="10312:[33707..33716).3" Target="10312:[4019..5073).47" />
<Link Source="10312:[33754..33775).3" Target="10312:[35517..35538).2" />
<Link Source="10312:[33754..33775).3" Target="10312:[4019..5073).47" />
<Link Source="10312:[33777..33805).3" Target="10312:[35553..35581).2" />
<Link Source="10312:[33777..33805).3" Target="10312:[4019..5073).47" />
<Link Source="10312:[33807..33820).3" Target="10312:[35596..35609).2" />
<Link Source="10312:[33807..33820).3" Target="10312:[4019..5073).47" />
<Link Source="10312:[33870..33909).3" Target="10312:[4534..4658).49" />
<Link Source="10312:[33870..33909).3" Target="10312:[4019..5073).47" />
<Link Source="10312:[61608..61629).5" Target="10312:[33754..33775).3" />
<Link Source="10312:[61608..61629).5" Target="10312:[4019..5073).47" />
<Link Source="10312:[34022..34574).7" Target="10312:[4534..4658).47" />
<Link Source="10312:[34022..34574).7" Target="10312:[4019..5073).47" />
<Link Source="10312:[36278..36360).25" Target="10312:[4019..5073).47" />
<Link Source="10312:[36278..36360).25" Target="10312:[4534..4658).49" />
<Link Source="10312:[36278..36360).25" Target="10312:[4534..4658).53" />
<Link Source="10312:[36278..36360).25" Target="10312:[4534..4658).47" />
<Link Source="10354:[9012..9030).3" Target="10312:[36278..36360).25" />
<Link Source="10354:[9012..9030).3" Target="10312:[4019..5073).47" />
<Link Source="10354:[8981..9152).3" Target="10312:[36278..36360).25" />
<Link Source="10354:[8981..9152).3" Target="10312:[4019..5073).47" />
<Link Source="10354:[9060..9070).3" Target="10312:[4019..5073).47" />
<Link Source="10354:[4058..4122).33" Target="10354:[9012..9030).3" />
<Link Source="10354:[4058..4122).33" Target="10354:[9060..9070).3" />
<Link Source="10354:[9056..9141).9" Target="10354:[4058..4122).33" />
<Link Source="10354:[9056..9141).9" Target="10312:[4019..5073).47" />
<Link Source="10354:[9073..9077).3" Target="10312:[4019..5073).47" />
<Link Source="10354:[4058..4122).34" Target="10354:[8981..9152).3" />
<Link Source="10354:[4058..4122).34" Target="10354:[9073..9077).3" />
<Link Source="10354:[9056..9141).10" Target="10354:[4058..4122).34" />
<Link Source="10354:[9056..9141).10" Target="10312:[4019..5073).47" />
<Link Source="10354:[9056..9141).11" Target="10354:[9056..9141).9" />
<Link Source="10354:[9056..9141).11" Target="10354:[9056..9141).10" />
<Link Source="10354:[9056..9141).11" Target="10312:[4019..5073).47" />
<Link Source="10312:[36566..36625).3" Target="10312:[4019..5073).47" />
<Link Source="10312:[36643..36855).7" Target="10312:[4019..5073).47" />
<Link Source="10312:[36643..36855).8" Target="10312:[36566..36625).3" />
<Link Source="10312:[36643..36855).8" Target="10312:[36278..36360).25" />
<Link Source="10312:[36643..36855).8" Target="10312:[36643..36855).7" />
<Link Source="10312:[36643..36855).8" Target="10312:[4019..5073).47" />
<Link Source="10312:[37061..37078).3" Target="10312:[4019..5073).47" />
<Link Source="10354:[4094..4107).35" Target="10312:[37061..37078).3" />
<Link Source="10354:[4094..4107).35" Target="10312:[36278..36360).25" />
<Link Source="10312:[37029..37117).7" Target="10354:[4094..4107).35" />
<Link Source="10312:[37029..37117).7" Target="10312:[4019..5073).47" />
<Link Source="10312:[37258..37278).3" Target="10312:[4019..5073).47" />
<Link Source="10354:[4094..4107).36" Target="10312:[37258..37278).3" />
<Link Source="10354:[4094..4107).36" Target="10312:[36278..36360).25" />
<Link Source="10312:[37254..37416).7" Target="10354:[4094..4107).36" />
<Link Source="10312:[37254..37416).7" Target="10312:[4019..5073).47" />
<Link Source="10312:[37436..37988).9" Target="10312:[4019..5073).47" />
<Link Source="10312:[37436..37988).10" Target="10312:[4534..4658).49" />
<Link Source="10312:[37436..37988).10" Target="10312:[37436..37988).9" />
<Link Source="10312:[37436..37988).10" Target="10312:[4019..5073).47" />
<Link Source="10312:[38290..38338).3" Target="10312:[4019..5073).47" />
<Link Source="10306:[3345..3430).3" Target="10312:[35517..35538).2" />
<Link Source="10306:[3345..3430).3" Target="10312:[38290..38338).3" />
<Link Source="10306:[3358..3364).3" Target="10312:[38290..38338).3" />
<Link Source="10306:[3196..3249).11" Target="10306:[3345..3430).3" />
<Link Source="10306:[3196..3249).11" Target="10306:[3358..3364).3" />
<Link Source="10306:[3202..3247).41" Target="10306:[3196..3249).11" />
<Link Source="10306:[3202..3247).41" Target="10312:[36278..36360).25" />
<Link Source="10306:[3202..3247).41" Target="10306:[3358..3364).3" />
<Link Source="10306:[3351..3428).7" Target="10306:[3202..3247).41" />
<Link Source="10306:[3351..3428).7" Target="10312:[38290..38338).3" />
<Link Source="10312:[38286..38405).5" Target="10306:[3351..3428).7" />
<Link Source="10312:[38286..38405).5" Target="10312:[4019..5073).47" />
<Link Source="10312:[36067..36079).4" Target="10312:[36278..36360).25" />
<Link Source="10312:[36097..36258).37" Target="10312:[35403..35412).2" />
<Link Source="10312:[36097..36258).37" Target="10312:[36278..36360).25" />
<Link Source="10312:[36097..36258).39" Target="10312:[35517..35538).2" />
<Link Source="10312:[36097..36258).39" Target="10312:[36278..36360).25" />
<Link Source="10312:[36097..36258).40" Target="10312:[35553..35581).2" />
<Link Source="10312:[36097..36258).40" Target="10312:[36278..36360).25" />
<Link Source="10312:[36097..36258).41" Target="10312:[35596..35609).2" />
<Link Source="10312:[36097..36258).41" Target="10312:[36278..36360).25" />
<Link Source="10312:[33656..33675).4" Target="10312:[36278..36360).25" />
<Link Source="10312:[33707..33716).4" Target="10312:[36097..36258).37" />
<Link Source="10312:[33707..33716).4" Target="10312:[36278..36360).25" />
<Link Source="10312:[33754..33775).4" Target="10312:[36097..36258).39" />
<Link Source="10312:[33754..33775).4" Target="10312:[36278..36360).25" />
<Link Source="10312:[33777..33805).4" Target="10312:[36097..36258).40" />
<Link Source="10312:[33777..33805).4" Target="10312:[36278..36360).25" />
<Link Source="10312:[33807..33820).4" Target="10312:[36097..36258).41" />
<Link Source="10312:[33807..33820).4" Target="10312:[36278..36360).25" />
<Link Source="10312:[33870..33909).4" Target="10312:[36278..36360).25" />
<Link Source="10312:[61608..61629).6" Target="10312:[33754..33775).4" />
<Link Source="10312:[61608..61629).6" Target="10312:[36278..36360).25" />
<Link Source="10312:[34022..34574).10" Target="10312:[36278..36360).25" />
<Link Source="10354:[9012..9030).4" Target="10312:[36278..36360).25" />
<Link Source="10354:[8981..9152).4" Target="10312:[36278..36360).25" />
<Link Source="10354:[9060..9070).4" Target="10312:[36278..36360).25" />
<Link Source="10354:[4058..4122).38" Target="10354:[9012..9030).4" />
<Link Source="10354:[4058..4122).38" Target="10354:[9060..9070).4" />
<Link Source="10354:[9056..9141).13" Target="10354:[4058..4122).38" />
<Link Source="10354:[9056..9141).13" Target="10312:[36278..36360).25" />
<Link Source="10354:[9073..9077).4" Target="10312:[36278..36360).25" />
<Link Source="10354:[4058..4122).39" Target="10354:[8981..9152).4" />
<Link Source="10354:[4058..4122).39" Target="10354:[9073..9077).4" />
<Link Source="10354:[9056..9141).14" Target="10354:[4058..4122).39" />
<Link Source="10354:[9056..9141).14" Target="10312:[36278..36360).25" />
<Link Source="10354:[9056..9141).15" Target="10354:[9056..9141).13" />
<Link Source="10354:[9056..9141).15" Target="10354:[9056..9141).14" />
<Link Source="10354:[9056..9141).15" Target="10312:[36278..36360).25" />
<Link Source="10312:[36566..36625).4" Target="10312:[36278..36360).25" />
<Link Source="10312:[36643..36855).10" Target="10312:[36278..36360).25" />
<Link Source="10312:[36643..36855).11" Target="10312:[36566..36625).4" />
<Link Source="10312:[36643..36855).11" Target="10312:[36278..36360).25" />
<Link Source="10312:[36643..36855).11" Target="10312:[36643..36855).10" />
<Link Source="10312:[37061..37078).4" Target="10312:[36278..36360).25" />
<Link Source="10312:[37029..37117).10" Target="10312:[37061..37078).4" />
<Link Source="10312:[37029..37117).10" Target="10312:[36278..36360).25" />
<Link Source="10312:[37258..37278).4" Target="10312:[36278..36360).25" />
<Link Source="10312:[37254..37416).10" Target="10312:[37258..37278).4" />
<Link Source="10312:[37254..37416).10" Target="10312:[36278..36360).25" />
<Link Source="10312:[37436..37988).13" Target="10312:[36278..36360).25" />
<Link Source="10312:[38290..38338).4" Target="10312:[36278..36360).25" />
<Link Source="10306:[3345..3430).4" Target="10312:[35517..35538).2" />
<Link Source="10306:[3345..3430).4" Target="10312:[38290..38338).4" />
<Link Source="10306:[3358..3364).4" Target="10312:[38290..38338).4" />
<Link Source="10306:[3196..3249).12" Target="10306:[3345..3430).4" />
<Link Source="10306:[3196..3249).12" Target="10306:[3358..3364).4" />
<Link Source="10306:[3351..3428).10" Target="10306:[3196..3249).12" />
<Link Source="10306:[3351..3428).10" Target="10312:[38290..38338).4" />
<Link Source="10312:[38286..38405).7" Target="10306:[3351..3428).10" />
<Link Source="10312:[38286..38405).7" Target="10312:[36278..36360).25" />
<Link Source="10312:[38756..38772).2" Target="10312:[36278..36360).25" />
<Link Source="10312:[38756..38772).2" Target="10312:[4019..5073).47" />
<Link Source="10354:[11428..11441).4" Target="10312:[4019..5073).47" />
<Link Source="10312:[38786..38797).2" Target="10312:[4019..5073).47" />
<Link Source="10345:[29004..29025).2" Target="10312:[4019..5073).47" />
<Link Source="10345:[29100..29109).2" Target="10346:[10663..10672).4" />
<Link Source="10345:[29100..29109).2" Target="10312:[4019..5073).47" />
<Link Source="10345:[29124..29163).2" Target="10312:[4534..4658).49" />
<Link Source="10345:[29124..29163).2" Target="10312:[4019..5073).47" />
<Link Source="10345:[29214..29227).2" Target="10346:[10761..10774).4" />
<Link Source="10345:[29214..29227).2" Target="10312:[4019..5073).47" />
<Link Source="10345:[29788..29809).2" Target="10345:[29004..29025).2" />
<Link Source="10345:[29788..29809).2" Target="10312:[4019..5073).47" />
<Link Source="10345:[29824..29843).2" Target="10345:[29004..29025).2" />
<Link Source="10345:[29824..29843).2" Target="10312:[4019..5073).47" />
<Link Source="10345:[29884..29893).2" Target="10345:[29100..29109).2" />
<Link Source="10345:[29884..29893).2" Target="10312:[4019..5073).47" />
<Link Source="10345:[29908..29947).2" Target="10345:[29124..29163).2" />
<Link Source="10345:[29908..29947).2" Target="10312:[4019..5073).47" />
<Link Source="10345:[29962..29983).2" Target="10345:[29004..29025).2" />
<Link Source="10345:[29962..29983).2" Target="10312:[4019..5073).47" />
<Link Source="10345:[29998..30011).2" Target="10345:[29214..29227).2" />
<Link Source="10345:[29998..30011).2" Target="10312:[4019..5073).47" />
<Link Source="10345:[30127..30163).2" Target="10312:[4019..5073).47" />
<Link Source="10286:[2155..2260).5" Target="10345:[29788..29809).2" />
<Link Source="10286:[2155..2260).5" Target="10345:[30127..30163).2" />
<Link Source="10286:[2191..2245).17" Target="10286:[2155..2260).5" />
<Link Source="10286:[2191..2245).17" Target="10312:[36278..36360).25" />
<Link Source="10286:[2191..2245).17" Target="10345:[30127..30163).2" />
<Link Source="10286:[2191..2245).18" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).18" Target="10345:[30127..30163).2" />
<Link Source="10286:[2198..2244).5" Target="10345:[30127..30163).2" />
<Link Source="10298:[471..492).48" Target="10286:[2191..2245).17" />
<Link Source="10298:[471..492).48" Target="10286:[2198..2244).5" />
<Link Source="10298:[494..511).48" Target="10286:[2191..2245).18" />
<Link Source="10298:[494..511).48" Target="10286:[2198..2244).5" />
<Link Source="10345:[30098..30164).3" Target="10298:[471..492).48" />
<Link Source="10345:[30098..30164).3" Target="10312:[4019..5073).47" />
<Link Source="10345:[30883..31655).4" Target="10312:[4019..5073).47" />
<Link Source="10345:[30883..31655).4" Target="10312:[36278..36360).25" />
<Link Source="10345:[29566..29700).12" Target="10345:[29004..29025).2" />
<Link Source="10345:[29566..29700).12" Target="10354:[4094..4107).35" />
<Link Source="10345:[29566..29700).15" Target="10345:[29100..29109).2" />
<Link Source="10345:[29566..29700).15" Target="10354:[4094..4107).35" />
<Link Source="10345:[29566..29700).16" Target="10345:[29124..29163).2" />
<Link Source="10345:[29566..29700).16" Target="10354:[4094..4107).35" />
<Link Source="10345:[29566..29700).18" Target="10345:[29214..29227).2" />
<Link Source="10345:[29566..29700).18" Target="10354:[4094..4107).35" />
<Link Source="10345:[31734..31789).2" Target="10354:[4094..4107).35" />
<Link Source="10345:[31804..31825).2" Target="10345:[29566..29700).12" />
<Link Source="10345:[31804..31825).2" Target="10354:[4094..4107).35" />
<Link Source="10345:[31840..31859).2" Target="10354:[4094..4107).35" />
<Link Source="10345:[31874..31885).2" Target="10354:[4094..4107).35" />
<Link Source="10345:[31900..31909).2" Target="10345:[29566..29700).15" />
<Link Source="10345:[31900..31909).2" Target="10354:[4094..4107).35" />
<Link Source="10345:[31924..31963).2" Target="10345:[29566..29700).16" />
<Link Source="10345:[31924..31963).2" Target="10354:[4094..4107).35" />
<Link Source="10345:[31978..31999).2" Target="10354:[4094..4107).35" />
<Link Source="10345:[32014..32027).2" Target="10345:[29566..29700).18" />
<Link Source="10345:[32014..32027).2" Target="10354:[4094..4107).35" />
<Link Source="10345:[32114..32230).5" Target="10345:[31804..31825).2" />
<Link Source="10345:[32114..32230).5" Target="10312:[36278..36360).25" />
<Link Source="10345:[32114..32230).5" Target="10354:[4094..4107).35" />
<Link Source="10345:[32114..32230).6" Target="EXTERNAL" />
<Link Source="10345:[32114..32230).6" Target="10354:[4094..4107).35" />
<Link Source="10345:[32118..32174).2" Target="10354:[4094..4107).35" />
<Link Source="10298:[471..492).49" Target="10345:[32114..32230).5" />
<Link Source="10298:[471..492).49" Target="10345:[32118..32174).2" />
<Link Source="10298:[494..511).49" Target="10345:[32114..32230).6" />
<Link Source="10298:[494..511).49" Target="10345:[32118..32174).2" />
<Link Source="10345:[32275..32311).2" Target="10354:[4094..4107).35" />
<Link Source="10286:[2155..2260).6" Target="10345:[31804..31825).2" />
<Link Source="10286:[2155..2260).6" Target="10345:[32275..32311).2" />
<Link Source="10286:[2191..2245).21" Target="10286:[2155..2260).6" />
<Link Source="10286:[2191..2245).21" Target="10312:[36278..36360).25" />
<Link Source="10286:[2191..2245).21" Target="10345:[32275..32311).2" />
<Link Source="10286:[2191..2245).22" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).22" Target="10345:[32275..32311).2" />
<Link Source="10286:[2198..2244).6" Target="10345:[32275..32311).2" />
<Link Source="10298:[471..492).50" Target="10286:[2191..2245).21" />
<Link Source="10298:[471..492).50" Target="10286:[2198..2244).6" />
<Link Source="10298:[494..511).50" Target="10286:[2191..2245).22" />
<Link Source="10298:[494..511).50" Target="10286:[2198..2244).6" />
<Link Source="10345:[32246..32312).3" Target="10298:[471..492).50" />
<Link Source="10345:[32246..32312).3" Target="10354:[4094..4107).35" />
<Link Source="10345:[32328..33465).4" Target="10345:[31734..31789).2" />
<Link Source="10345:[32328..33465).4" Target="10354:[4094..4107).35" />
<Link Source="10354:[3720..3803).137" Target="10354:[3684..3818).16" />
<Link Source="10354:[3720..3803).137" Target="10312:[36278..36360).25" />
<Link Source="10354:[3720..3803).137" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).137" Target="10312:[4685..4699).6" />
<Link Source="10354:[3720..3803).139" Target="10354:[3684..3818).16" />
<Link Source="10354:[3720..3803).139" Target="10312:[36278..36360).25" />
<Link Source="10354:[3720..3803).139" Target="10354:[3720..3803).114" />
<Link Source="10354:[3720..3803).139" Target="10312:[4685..4699).6" />
<Link Source="10312:[4680..4787).13" Target="10354:[3720..3803).137" />
<Link Source="10312:[4680..4787).13" Target="10312:[4019..5073).47" />
<Link Source="10312:[4534..4658).66" Target="10312:[3730..3739).3" />
<Link Source="10312:[4534..4658).66" Target="10312:[36278..36360).25" />
<Link Source="10312:[4534..4658).70" Target="10312:[3805..3818).3" />
<Link Source="10312:[4534..4658).70" Target="10312:[36278..36360).25" />
<Link Source="10346:[10663..10672).5" Target="10312:[4534..4658).66" />
<Link Source="10346:[10663..10672).5" Target="10312:[36278..36360).25" />
<Link Source="10346:[10761..10774).5" Target="10312:[4534..4658).70" />
<Link Source="10346:[10761..10774).5" Target="10312:[36278..36360).25" />
<Link Source="10346:[10861..10875).5" Target="10312:[36278..36360).25" />
<Link Source="10354:[3684..3818).20" Target="10312:[36278..36360).25" />
<Link Source="10354:[3684..3818).20" Target="10346:[10861..10875).5" />
<Link Source="10354:[3720..3803).145" Target="10354:[3684..3818).20" />
<Link Source="10354:[3720..3803).145" Target="10312:[36278..36360).25" />
<Link Source="10354:[3720..3803).145" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).145" Target="10346:[10861..10875).5" />
<Link Source="10354:[3720..3803).146" Target="10346:[10861..10875).5" />
<Link Source="10354:[3720..3803).147" Target="10354:[3684..3818).20" />
<Link Source="10354:[3720..3803).147" Target="10312:[36278..36360).25" />
<Link Source="10354:[3720..3803).147" Target="10354:[3720..3803).146" />
<Link Source="10354:[3720..3803).147" Target="10346:[10861..10875).5" />
<Link Source="10346:[10848..10877).13" Target="10354:[3720..3803).145" />
<Link Source="10346:[10848..10877).13" Target="10312:[36278..36360).25" />
<Link Source="10346:[10897..10914).5" Target="10312:[36278..36360).25" />
<Link Source="10346:[7666..7775).5" Target="10312:[36278..36360).25" />
<Link Source="10346:[7666..7775).5" Target="10346:[10897..10914).5" />
<Link Source="10346:[7672..7773).13" Target="10346:[7666..7775).5" />
<Link Source="10346:[7672..7773).13" Target="10312:[36278..36360).25" />
<Link Source="10346:[7672..7773).13" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).13" Target="10346:[10897..10914).5" />
<Link Source="10346:[10893..11127).9" Target="10346:[7672..7773).13" />
<Link Source="10346:[10893..11127).9" Target="10312:[36278..36360).25" />
<Link Source="10346:[3525..3638).38" Target="10312:[36278..36360).25" />
<Link Source="10312:[7718..7727).5" Target="10346:[10663..10672).5" />
<Link Source="10312:[7718..7727).5" Target="10312:[36278..36360).25" />
<Link Source="10312:[7816..7829).5" Target="10346:[10761..10774).5" />
<Link Source="10312:[7816..7829).5" Target="10312:[36278..36360).25" />
<Link Source="10312:[7903..7936).17" Target="10312:[36278..36360).25" />
<Link Source="10312:[7916..7934).5" Target="10312:[36278..36360).25" />
<Link Source="10353:[4698..4724).8" Target="10312:[7903..7936).17" />
<Link Source="10353:[4698..4724).8" Target="10312:[7916..7934).5" />
<Link Source="10353:[4750..4847).15" Target="10353:[4698..4724).8" />
<Link Source="10353:[4750..4847).15" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).15" Target="10312:[7916..7934).5" />
<Link Source="10353:[4863..5000).29" Target="10353:[4698..4724).8" />
<Link Source="10353:[4863..5000).29" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).29" Target="10312:[7916..7934).5" />
<Link Source="10353:[4863..5000).30" Target="10312:[7916..7934).5" />
<Link Source="10353:[5079..5183).15" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).15" Target="10312:[7916..7934).5" />
<Link Source="10353:[5197..5323).22" Target="10353:[4698..4724).8" />
<Link Source="10353:[5197..5323).22" Target="10353:[5079..5183).15" />
<Link Source="10353:[5197..5323).22" Target="10312:[7916..7934).5" />
<Link Source="10353:[5485..5759).43" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).43" Target="10312:[7916..7934).5" />
<Link Source="10353:[5485..5759).44" Target="10353:[4698..4724).8" />
<Link Source="10353:[5485..5759).44" Target="10353:[5485..5759).43" />
<Link Source="10353:[5485..5759).44" Target="10312:[7916..7934).5" />
<Link Source="10353:[5485..5759).45" Target="10312:[7916..7934).5" />
<Link Source="10353:[5775..5979).29" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).29" Target="10312:[7916..7934).5" />
<Link Source="10353:[5775..5979).31" Target="10353:[4698..4724).8" />
<Link Source="10353:[5775..5979).31" Target="10353:[5775..5979).29" />
<Link Source="10353:[5775..5979).31" Target="10312:[7916..7934).5" />
<Link Source="10353:[5995..6029).22" Target="10353:[5775..5979).31" />
<Link Source="10353:[5995..6029).22" Target="10312:[7916..7934).5" />
<Link Source="10353:[6002..6028).8" Target="10312:[7916..7934).5" />
<Link Source="10353:[6343..6358).8" Target="10353:[5995..6029).22" />
<Link Source="10353:[6343..6358).8" Target="10353:[6002..6028).8" />
<Link Source="10353:[6384..6410).43" Target="10353:[6002..6028).8" />
<Link Source="10353:[6384..6410).44" Target="10353:[6343..6358).8" />
<Link Source="10353:[6384..6410).44" Target="10353:[6384..6410).43" />
<Link Source="10353:[6384..6410).44" Target="10353:[6002..6028).8" />
<Link Source="10312:[7952..7977).17" Target="10312:[36278..36360).25" />
<Link Source="10312:[7952..7977).18" Target="10312:[7718..7727).5" />
<Link Source="10312:[7952..7977).18" Target="10312:[7952..7977).17" />
<Link Source="10312:[7952..7977).18" Target="10312:[36278..36360).25" />
<Link Source="10312:[19030..19039).3" Target="10312:[7718..7727).5" />
<Link Source="10312:[19030..19039).3" Target="10312:[36278..36360).25" />
<Link Source="10312:[19087..19100).3" Target="10312:[7816..7829).5" />
<Link Source="10312:[19087..19100).3" Target="10312:[36278..36360).25" />
<Link Source="10312:[61608..61629).7" Target="10312:[36278..36360).25" />
<Link Source="10345:[29004..29025).3" Target="10312:[36278..36360).25" />
<Link Source="10345:[29100..29109).3" Target="10346:[10663..10672).5" />
<Link Source="10345:[29100..29109).3" Target="10312:[36278..36360).25" />
<Link Source="10345:[29124..29163).3" Target="10312:[36278..36360).25" />
<Link Source="10345:[29214..29227).3" Target="10346:[10761..10774).5" />
<Link Source="10345:[29214..29227).3" Target="10312:[36278..36360).25" />
<Link Source="10345:[29788..29809).3" Target="10345:[29004..29025).3" />
<Link Source="10345:[29788..29809).3" Target="10312:[36278..36360).25" />
<Link Source="10345:[29824..29843).3" Target="10345:[29004..29025).3" />
<Link Source="10345:[29824..29843).3" Target="10312:[36278..36360).25" />
<Link Source="10345:[29884..29893).3" Target="10345:[29100..29109).3" />
<Link Source="10345:[29884..29893).3" Target="10312:[36278..36360).25" />
<Link Source="10345:[29908..29947).3" Target="10345:[29124..29163).3" />
<Link Source="10345:[29908..29947).3" Target="10312:[36278..36360).25" />
<Link Source="10345:[29962..29983).3" Target="10345:[29004..29025).3" />
<Link Source="10345:[29962..29983).3" Target="10312:[36278..36360).25" />
<Link Source="10345:[29998..30011).3" Target="10345:[29214..29227).3" />
<Link Source="10345:[29998..30011).3" Target="10312:[36278..36360).25" />
<Link Source="10345:[30127..30163).3" Target="10312:[36278..36360).25" />
<Link Source="10286:[2155..2260).7" Target="10345:[29788..29809).3" />
<Link Source="10286:[2155..2260).7" Target="10345:[30127..30163).3" />
<Link Source="10286:[2191..2245).25" Target="10286:[2155..2260).7" />
<Link Source="10286:[2191..2245).25" Target="10312:[36278..36360).25" />
<Link Source="10286:[2191..2245).25" Target="10345:[30127..30163).3" />
<Link Source="10286:[2191..2245).26" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).26" Target="10345:[30127..30163).3" />
<Link Source="10286:[2198..2244).7" Target="10345:[30127..30163).3" />
<Link Source="10298:[471..492).51" Target="10286:[2191..2245).25" />
<Link Source="10298:[471..492).51" Target="10286:[2198..2244).7" />
<Link Source="10298:[494..511).51" Target="10286:[2191..2245).26" />
<Link Source="10298:[494..511).51" Target="10286:[2198..2244).7" />
<Link Source="10345:[30098..30164).5" Target="10298:[471..492).51" />
<Link Source="10345:[30098..30164).5" Target="10312:[36278..36360).25" />
<Link Source="10345:[30883..31655).7" Target="10312:[36278..36360).25" />
<Link Source="10345:[30883..31655).7" Target="10345:[29004..29025).3" />
<Link Source="10354:[4094..4107).46" Target="10312:[37061..37078).4" />
<Link Source="10354:[4094..4107).46" Target="10345:[29004..29025).3" />
<Link Source="10345:[29566..29700).25" Target="10345:[29100..29109).3" />
<Link Source="10345:[29566..29700).25" Target="10354:[4094..4107).46" />
<Link Source="10345:[29566..29700).26" Target="10345:[29124..29163).3" />
<Link Source="10345:[29566..29700).26" Target="10354:[4094..4107).46" />
<Link Source="10345:[29566..29700).28" Target="10345:[29214..29227).3" />
<Link Source="10345:[29566..29700).28" Target="10354:[4094..4107).46" />
<Link Source="10345:[31734..31789).3" Target="10354:[4094..4107).46" />
<Link Source="10345:[31804..31825).3" Target="10354:[4094..4107).46" />
<Link Source="10345:[31840..31859).3" Target="10354:[4094..4107).46" />
<Link Source="10345:[31874..31885).3" Target="10354:[4094..4107).46" />
<Link Source="10345:[31900..31909).3" Target="10345:[29566..29700).25" />
<Link Source="10345:[31900..31909).3" Target="10354:[4094..4107).46" />
<Link Source="10345:[31924..31963).3" Target="10345:[29566..29700).26" />
<Link Source="10345:[31924..31963).3" Target="10354:[4094..4107).46" />
<Link Source="10345:[31978..31999).3" Target="10354:[4094..4107).46" />
<Link Source="10345:[32014..32027).3" Target="10345:[29566..29700).28" />
<Link Source="10345:[32014..32027).3" Target="10354:[4094..4107).46" />
<Link Source="10345:[32114..32230).9" Target="10345:[31804..31825).3" />
<Link Source="10345:[32114..32230).9" Target="10345:[29004..29025).3" />
<Link Source="10345:[32114..32230).9" Target="10354:[4094..4107).46" />
<Link Source="10345:[32114..32230).10" Target="EXTERNAL" />
<Link Source="10345:[32114..32230).10" Target="10354:[4094..4107).46" />
<Link Source="10345:[32118..32174).3" Target="10354:[4094..4107).46" />
<Link Source="10298:[471..492).52" Target="10345:[32114..32230).9" />
<Link Source="10298:[471..492).52" Target="10345:[32118..32174).3" />
<Link Source="10298:[494..511).52" Target="10345:[32114..32230).10" />
<Link Source="10298:[494..511).52" Target="10345:[32118..32174).3" />
<Link Source="10345:[32275..32311).3" Target="10354:[4094..4107).46" />
<Link Source="10286:[2155..2260).8" Target="10345:[31804..31825).3" />
<Link Source="10286:[2155..2260).8" Target="10345:[32275..32311).3" />
<Link Source="10286:[2191..2245).29" Target="10286:[2155..2260).8" />
<Link Source="10286:[2191..2245).29" Target="10345:[29004..29025).3" />
<Link Source="10286:[2191..2245).29" Target="10345:[32275..32311).3" />
<Link Source="10286:[2191..2245).30" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).30" Target="10345:[32275..32311).3" />
<Link Source="10286:[2198..2244).8" Target="10345:[32275..32311).3" />
<Link Source="10298:[471..492).53" Target="10286:[2191..2245).29" />
<Link Source="10298:[471..492).53" Target="10286:[2198..2244).8" />
<Link Source="10298:[494..511).53" Target="10286:[2191..2245).30" />
<Link Source="10298:[494..511).53" Target="10286:[2198..2244).8" />
<Link Source="10345:[32246..32312).5" Target="10298:[471..492).53" />
<Link Source="10345:[32246..32312).5" Target="10354:[4094..4107).46" />
<Link Source="10345:[32328..33465).7" Target="10345:[31734..31789).3" />
<Link Source="10345:[32328..33465).7" Target="10354:[4094..4107).46" />
<Link Source="10345:[32400..32543).1" Target="10345:[32328..33465).7" />
<Link Source="10345:[32400..32543).1" Target="10345:[29004..29025).3" />
<Link Source="10345:[32400..32543).2" Target="10345:[31874..31885).3" />
<Link Source="10345:[32400..32543).2" Target="10345:[32328..33465).7" />
<Link Source="10345:[32400..32543).3" Target="10345:[31978..31999).3" />
<Link Source="10345:[32400..32543).3" Target="10345:[32328..33465).7" />
<Link Source="10345:[32400..32543).4" Target="10345:[31804..31825).3" />
<Link Source="10345:[32400..32543).4" Target="10345:[32328..33465).7" />
<Link Source="10345:[32436..32542).1" Target="10345:[32328..33465).7" />
<Link Source="10312:[61540..61570).8" Target="10345:[32400..32543).1" />
<Link Source="10312:[61540..61570).8" Target="10345:[32436..32542).1" />
<Link Source="10312:[61572..61583).8" Target="10345:[32400..32543).2" />
<Link Source="10312:[61572..61583).8" Target="10345:[32436..32542).1" />
<Link Source="10312:[61585..61606).8" Target="10345:[32400..32543).3" />
<Link Source="10312:[61585..61606).8" Target="10345:[32436..32542).1" />
<Link Source="10312:[61608..61629).8" Target="10345:[32400..32543).4" />
<Link Source="10312:[61608..61629).8" Target="10345:[32436..32542).1" />
<Link Source="10312:[62279..62312).10" Target="10312:[61572..61583).8" />
<Link Source="10312:[62279..62312).10" Target="10312:[61585..61606).8" />
<Link Source="10345:[32561..33450).1" Target="10312:[62279..62312).10" />
<Link Source="10345:[32561..33450).1" Target="10345:[32328..33465).7" />
<Link Source="10345:[32639..32764).1" Target="10345:[32561..33450).1" />
<Link Source="10345:[32644..32682).1" Target="10345:[32561..33450).1" />
<Link Source="10345:[33539..33552).1" Target="10345:[32639..32764).1" />
<Link Source="10345:[33539..33552).1" Target="10345:[32644..32682).1" />
<Link Source="10345:[33578..34640).1" Target="10345:[33539..33552).1" />
<Link Source="10345:[33578..34640).1" Target="10345:[29004..29025).3" />
<Link Source="10345:[33578..34640).1" Target="10312:[62279..62312).10" />
<Link Source="10345:[33578..34640).1" Target="10345:[32644..32682).1" />
<Link Source="10345:[34656..34668).1" Target="10345:[32644..32682).1" />
<Link Source="10345:[32639..32764).2" Target="10345:[34656..34668).1" />
<Link Source="10345:[32639..32764).2" Target="10345:[32561..33450).1" />
<Link Source="10345:[33023..33147).1" Target="10345:[32561..33450).1" />
<Link Source="10345:[33023..33147).2" Target="10345:[31900..31909).3" />
<Link Source="10345:[33023..33147).2" Target="10345:[32561..33450).1" />
<Link Source="10345:[33023..33147).3" Target="10345:[31978..31999).3" />
<Link Source="10345:[33023..33147).3" Target="10345:[32561..33450).1" />
<Link Source="10345:[33023..33147).6" Target="10345:[32014..32027).3" />
<Link Source="10345:[33023..33147).6" Target="10345:[32561..33450).1" />
<Link Source="10345:[33023..33147).7" Target="10354:[4094..4107).46" />
<Link Source="10345:[33023..33147).7" Target="10345:[32561..33450).1" />
<Link Source="10345:[33023..33147).8" Target="10345:[31924..31963).3" />
<Link Source="10345:[33023..33147).8" Target="10345:[32561..33450).1" />
<Link Source="10345:[33033..33146).1" Target="10345:[32561..33450).1" />
<Link Source="10312:[63424..63437).3" Target="10345:[33023..33147).1" />
<Link Source="10312:[63424..63437).3" Target="10345:[33033..33146).1" />
<Link Source="10312:[63439..63448).3" Target="10345:[33023..33147).2" />
<Link Source="10312:[63439..63448).3" Target="10345:[33033..33146).1" />
<Link Source="10312:[63450..63471).3" Target="10345:[33023..33147).3" />
<Link Source="10312:[63450..63471).3" Target="10345:[33033..33146).1" />
<Link Source="10312:[63473..63501).3" Target="10345:[33023..33147).1" />
<Link Source="10312:[63473..63501).3" Target="10345:[33033..33146).1" />
<Link Source="10312:[63503..63516).3" Target="10345:[33023..33147).6" />
<Link Source="10312:[63503..63516).3" Target="10345:[33033..33146).1" />
<Link Source="10312:[63518..63564).3" Target="10345:[33023..33147).7" />
<Link Source="10312:[63518..63564).3" Target="10345:[33033..33146).1" />
<Link Source="10312:[63566..63612).3" Target="10345:[33023..33147).8" />
<Link Source="10312:[63566..63612).3" Target="10345:[33033..33146).1" />
<Link Source="10312:[63381..70761).3" Target="10345:[31804..31825).3" />
<Link Source="10312:[63381..70761).3" Target="10345:[33033..33146).1" />
<Link Source="10312:[63638..63668).3" Target="10345:[33033..33146).1" />
<Link Source="10312:[64121..69285).12" Target="10312:[63381..70761).3" />
<Link Source="10312:[64121..69285).12" Target="10345:[29004..29025).3" />
<Link Source="10312:[64121..69285).12" Target="10312:[63424..63437).3" />
<Link Source="10312:[64121..69285).12" Target="10312:[62279..62312).10" />
<Link Source="10312:[64121..69285).12" Target="10345:[33033..33146).1" />
<Link Source="10312:[64353..69285).16" Target="10312:[63439..63448).3" />
<Link Source="10312:[64353..69285).16" Target="10312:[64121..69285).12" />
<Link Source="10312:[64353..69285).17" Target="10312:[63503..63516).3" />
<Link Source="10312:[64353..69285).17" Target="10312:[64121..69285).12" />
<Link Source="10312:[80978..80991).3" Target="10312:[64121..69285).12" />
<Link Source="10312:[80993..81002).3" Target="10312:[64353..69285).16" />
<Link Source="10312:[80993..81002).3" Target="10312:[64121..69285).12" />
<Link Source="10312:[81004..81017).3" Target="10312:[64353..69285).17" />
<Link Source="10312:[81004..81017).3" Target="10312:[64121..69285).12" />
<Link Source="10312:[81019..81040).3" Target="10312:[64121..69285).12" />
<Link Source="10312:[81042..81069).3" Target="10312:[64121..69285).12" />
<Link Source="10312:[81095..84034).3" Target="10312:[80978..80991).3" />
<Link Source="10312:[81095..84034).3" Target="10312:[64121..69285).12" />
<Link Source="10312:[81196..82523).8" Target="10312:[81095..84034).3" />
<Link Source="10312:[81196..82523).9" Target="10312:[80993..81002).3" />
<Link Source="10312:[81196..82523).9" Target="10312:[81196..82523).8" />
<Link Source="10312:[81196..82523).9" Target="10312:[81095..84034).3" />
<Link Source="10312:[81319..81371).2" Target="10312:[80978..80991).3" />
<Link Source="10312:[81319..81371).2" Target="10312:[81196..82523).9" />
<Link Source="10312:[81495..81570).6" Target="10312:[81319..81371).2" />
<Link Source="10312:[81495..81570).6" Target="10312:[64121..69285).12" />
<Link Source="10312:[81495..81570).6" Target="10312:[81196..82523).9" />
<Link Source="10312:[81495..81570).7" Target="10312:[81319..81371).2" />
<Link Source="10312:[81495..81570).7" Target="10312:[81196..82523).9" />
<Link Source="10312:[81596..82500).7" Target="10312:[81319..81371).2" />
<Link Source="10312:[81596..82500).7" Target="10312:[64121..69285).12" />
<Link Source="10312:[81596..82500).7" Target="10312:[80993..81002).3" />
<Link Source="10312:[81596..82500).7" Target="10312:[81196..82523).9" />
<Link Source="10312:[81596..82500).8" Target="10312:[81019..81040).3" />
<Link Source="10312:[81596..82500).8" Target="10312:[81196..82523).9" />
<Link Source="10312:[81628..81659).2" Target="10312:[81196..82523).9" />
<Link Source="10353:[7504..7530).5" Target="10312:[81596..82500).8" />
<Link Source="10353:[7504..7530).5" Target="10312:[81628..81659).2" />
<Link Source="10312:[81596..82500).11" Target="10312:[81596..82500).7" />
<Link Source="10312:[81596..82500).11" Target="10353:[7504..7530).5" />
<Link Source="10312:[81596..82500).11" Target="10312:[81196..82523).9" />
<Link Source="10312:[84050..84066).5" Target="10312:[64121..69285).12" />
<Link Source="10312:[66177..69285).28" Target="10312:[63473..63501).3" />
<Link Source="10312:[66177..69285).28" Target="10312:[64121..69285).12" />
<Link Source="10312:[66291..66342).3" Target="10312:[64121..69285).12" />
<Link Source="10312:[75301..75322).3" Target="10312:[64121..69285).12" />
<Link Source="10312:[75301..75322).3" Target="10312:[66291..66342).3" />
<Link Source="10312:[75324..75352).3" Target="10312:[66177..69285).28" />
<Link Source="10312:[75324..75352).3" Target="10312:[66291..66342).3" />
<Link Source="10312:[75735..75866).11" Target="10312:[75301..75322).3" />
<Link Source="10312:[75735..75866).11" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).11" Target="10312:[66291..66342).3" />
<Link Source="10312:[75735..75866).12" Target="10312:[66291..66342).3" />
<Link Source="10312:[75742..75804).3" Target="10312:[75735..75866).11" />
<Link Source="10312:[75742..75804).3" Target="10312:[66291..66342).3" />
<Link Source="10312:[75735..75866).14" Target="10312:[75324..75352).3" />
<Link Source="10312:[75735..75866).14" Target="10312:[75742..75804).3" />
<Link Source="10312:[66177..69285).31" Target="10312:[63638..63668).3" />
<Link Source="10312:[66177..69285).31" Target="10312:[64121..69285).12" />
<Link Source="10312:[66177..69285).33" Target="10312:[63566..63612).3" />
<Link Source="10312:[66177..69285).33" Target="10312:[64121..69285).12" />
<Link Source="10312:[77543..77571).3" Target="10312:[75735..75866).14" />
<Link Source="10312:[77543..77571).3" Target="10312:[64121..69285).12" />
<Link Source="10312:[77573..77604).3" Target="10312:[66177..69285).31" />
<Link Source="10312:[77573..77604).3" Target="10312:[64121..69285).12" />
<Link Source="10312:[77654..77700).3" Target="10312:[66177..69285).33" />
<Link Source="10312:[77654..77700).3" Target="10312:[64121..69285).12" />
<Link Source="10312:[77726..77892).9" Target="10312:[64121..69285).12" />
<Link Source="10312:[77726..77892).10" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).10" Target="10312:[64121..69285).12" />
<Link Source="10312:[77730..77782).3" Target="10312:[64121..69285).12" />
<Link Source="10298:[471..492).57" Target="10312:[77726..77892).9" />
<Link Source="10298:[471..492).57" Target="10312:[77730..77782).3" />
<Link Source="10298:[494..511).57" Target="10312:[77726..77892).10" />
<Link Source="10298:[494..511).57" Target="10312:[77730..77782).3" />
<Link Source="10312:[78402..78430).3" Target="10312:[77543..77571).3" />
<Link Source="10312:[78402..78430).3" Target="10312:[64121..69285).12" />
<Link Source="10312:[78432..78463).3" Target="10312:[77573..77604).3" />
<Link Source="10312:[78432..78463).3" Target="10312:[64121..69285).12" />
<Link Source="10312:[78513..78552).3" Target="10312:[77654..77700).3" />
<Link Source="10312:[78513..78552).3" Target="10312:[64121..69285).12" />
<Link Source="10346:[8034..8062).3" Target="10312:[78402..78430).3" />
<Link Source="10346:[8034..8062).3" Target="10312:[64121..69285).12" />
<Link Source="10346:[8064..8095).3" Target="10312:[78432..78463).3" />
<Link Source="10346:[8064..8095).3" Target="10312:[64121..69285).12" />
<Link Source="10346:[8145..8184).3" Target="10312:[78513..78552).3" />
<Link Source="10346:[8145..8184).3" Target="10312:[64121..69285).12" />
<Link Source="10286:[30135..30160).2" Target="10346:[8034..8062).3" />
<Link Source="10286:[30135..30160).2" Target="10312:[64121..69285).12" />
<Link Source="10286:[30175..30206).2" Target="10346:[8064..8095).3" />
<Link Source="10286:[30175..30206).2" Target="10312:[64121..69285).12" />
<Link Source="10286:[30283..30330).2" Target="10312:[64121..69285).12" />
<Link Source="10286:[30012..30691).2" Target="10312:[64121..69285).12" />
<Link Source="10286:[30356..30522).5" Target="10286:[30012..30691).2" />
<Link Source="10286:[30356..30522).5" Target="10312:[64121..69285).12" />
<Link Source="10286:[30356..30522).6" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).6" Target="10312:[64121..69285).12" />
<Link Source="10286:[30360..30412).2" Target="10312:[64121..69285).12" />
<Link Source="10298:[471..492).58" Target="10286:[30356..30522).5" />
<Link Source="10298:[471..492).58" Target="10286:[30360..30412).2" />
<Link Source="10298:[494..511).58" Target="10286:[30356..30522).6" />
<Link Source="10298:[494..511).58" Target="10286:[30360..30412).2" />
<Link Source="10060:[2173..2198).2" Target="10286:[30135..30160).2" />
<Link Source="10060:[2173..2198).2" Target="10312:[64121..69285).12" />
<Link Source="10060:[2213..2244).2" Target="10286:[30175..30206).2" />
<Link Source="10060:[2213..2244).2" Target="10312:[64121..69285).12" />
<Link Source="10060:[2320..2366).2" Target="10286:[30283..30330).2" />
<Link Source="10060:[2320..2366).2" Target="10312:[64121..69285).12" />
<Link Source="10060:[5691..5716).3" Target="10060:[2173..2198).2" />
<Link Source="10060:[5691..5716).3" Target="10312:[64121..69285).12" />
<Link Source="10060:[5731..5762).3" Target="10060:[2213..2244).2" />
<Link Source="10060:[5731..5762).3" Target="10312:[64121..69285).12" />
<Link Source="10060:[5777..5806).3" Target="10312:[64121..69285).12" />
<Link Source="10060:[5882..5928).3" Target="10060:[2320..2366).2" />
<Link Source="10060:[5882..5928).3" Target="10312:[64121..69285).12" />
<Link Source="10060:[5954..5991).9" Target="10312:[64121..69285).12" />
<Link Source="10060:[6005..6042).9" Target="10312:[64121..69285).12" />
<Link Source="10060:[6056..6090).5" Target="10312:[64121..69285).12" />
<Link Source="10060:[6104..6172).7" Target="10312:[64121..69285).12" />
<Link Source="10060:[6188..6219).5" Target="10312:[64121..69285).12" />
<Link Source="10060:[10265..10311).2" Target="10060:[5882..5928).3" />
<Link Source="10060:[10265..10311).2" Target="10312:[64121..69285).12" />
<Link Source="10060:[10337..10405).4" Target="10312:[64121..69285).12" />
<Link Source="10060:[10419..10454).5" Target="10312:[64121..69285).12" />
<Link Source="10060:[10470..10516).2" Target="10312:[64121..69285).12" />
<Link Source="10060:[10532..10544).2" Target="10312:[64121..69285).12" />
<Link Source="10060:[10558..11295).2" Target="10312:[64121..69285).12" />
<Link Source="10060:[12117..12185).4" Target="10312:[64121..69285).12" />
<Link Source="10060:[12199..12238).5" Target="10312:[64121..69285).12" />
<Link Source="10060:[12494..12506).1" Target="10312:[64121..69285).12" />
<Link Source="10345:[33169..33384).1" Target="10060:[12494..12506).1" />
<Link Source="10345:[33169..33384).1" Target="EXTERNAL" />
<Link Source="10345:[33169..33384).1" Target="10345:[32561..33450).1" />
<Link Source="10345:[33258..33361).1" Target="10345:[31804..31825).3" />
<Link Source="10345:[33258..33361).1" Target="10060:[12494..12506).1" />
<Link Source="10345:[33258..33361).1" Target="10345:[33169..33384).1" />
<Link Source="10345:[33258..33361).2" Target="10345:[32328..33465).7" />
<Link Source="10345:[33258..33361).2" Target="10345:[29004..29025).3" />
<Link Source="10345:[33258..33361).2" Target="10345:[33169..33384).1" />
<Link Source="10345:[33258..33361).3" Target="10345:[32246..32312).5" />
<Link Source="10345:[33258..33361).3" Target="10345:[33169..33384).1" />
<Link Source="10345:[33258..33360).1" Target="10345:[33169..33384).1" />
<Link Source="10345:[24115..24144).1" Target="10345:[33258..33361).1" />
<Link Source="10345:[24115..24144).1" Target="10345:[33258..33360).1" />
<Link Source="10345:[24146..24172).1" Target="10345:[33258..33361).2" />
<Link Source="10345:[24146..24172).1" Target="10345:[33258..33360).1" />
<Link Source="10345:[24174..24200).1" Target="10345:[33258..33361).3" />
<Link Source="10345:[24174..24200).1" Target="10345:[33258..33360).1" />
<Link Source="10345:[24226..24260).1" Target="10345:[33258..33360).1" />
<Link Source="10345:[24226..24260).2" Target="10345:[24115..24144).1" />
<Link Source="10345:[24226..24260).2" Target="10345:[24226..24260).1" />
<Link Source="10345:[24226..24260).2" Target="10345:[33258..33360).1" />
<Link Source="10345:[24339..24484).1" Target="10345:[33258..33360).1" />
<Link Source="10345:[24339..24484).2" Target="10345:[24146..24172).1" />
<Link Source="10345:[24339..24484).2" Target="10345:[24339..24484).1" />
<Link Source="10345:[24339..24484).2" Target="10345:[33258..33360).1" />
<Link Source="10345:[24339..24484).3" Target="10345:[24339..24484).2" />
<Link Source="10345:[24339..24484).3" Target="10345:[24174..24200).1" />
<Link Source="10345:[24339..24484).3" Target="10345:[33258..33360).1" />
<Link Source="10345:[24420..24469).1" Target="10345:[24146..24172).1" />
<Link Source="10345:[24420..24469).1" Target="10345:[24339..24484).3" />
<Link Source="10345:[24420..24469).2" Target="10345:[24115..24144).1" />
<Link Source="10345:[24420..24469).2" Target="10345:[24420..24469).1" />
<Link Source="10345:[24420..24469).2" Target="10060:[12494..12506).1" />
<Link Source="10345:[24420..24469).2" Target="10345:[24339..24484).3" />
<Link Source="10345:[33258..33361).4" Target="10345:[33169..33384).1" />
<Link Source="10345:[33408..33431).1" Target="10060:[12494..12506).1" />
<Link Source="10345:[33408..33431).1" Target="10345:[32561..33450).1" />
<Link Source="10345:[33408..33430).1" Target="10345:[32561..33450).1" />
<Link Source="10354:[10217..10242).3" Target="10345:[33408..33431).1" />
<Link Source="10354:[10217..10242).3" Target="10345:[33408..33430).1" />
<Link Source="10354:[10192..10676).3" Target="10345:[31840..31859).3" />
<Link Source="10354:[10192..10676).3" Target="10345:[33408..33430).1" />
<Link Source="10354:[4094..4107).47" Target="10354:[10192..10676).3" />
<Link Source="10354:[4094..4107).47" Target="10345:[24420..24469).2" />
<Link Source="10354:[4094..4107).47" Target="10345:[33408..33430).1" />
<Link Source="10354:[10268..10665).8" Target="10354:[4094..4107).47" />
<Link Source="10354:[10268..10665).8" Target="10354:[10217..10242).3" />
<Link Source="10354:[10268..10665).8" Target="10060:[12494..12506).1" />
<Link Source="10354:[10268..10665).8" Target="10345:[33408..33430).1" />
<Link Source="10345:[33408..33431).2" Target="10345:[32561..33450).1" />
<Link Source="10345:[32639..32764).4" Target="10354:[10268..10665).8" />
<Link Source="10345:[32644..32682).2" Target="10354:[10268..10665).8" />
<Link Source="10345:[33539..33552).2" Target="10345:[32639..32764).4" />
<Link Source="10345:[33539..33552).2" Target="10345:[32644..32682).2" />
<Link Source="10345:[33578..34640).2" Target="10345:[33539..33552).2" />
<Link Source="10345:[33578..34640).2" Target="10354:[10268..10665).8" />
<Link Source="10345:[33578..34640).2" Target="10345:[32644..32682).2" />
<Link Source="10345:[34656..34668).3" Target="10345:[32644..32682).2" />
<Link Source="10345:[32639..32764).5" Target="10345:[34656..34668).3" />
<Link Source="10345:[32639..32764).5" Target="10354:[10268..10665).8" />
<Link Source="10345:[33023..33147).12" Target="10345:[31900..31909).3" />
<Link Source="10345:[33023..33147).12" Target="10354:[10268..10665).8" />
<Link Source="10345:[33023..33147).16" Target="10345:[32014..32027).3" />
<Link Source="10345:[33023..33147).16" Target="10354:[10268..10665).8" />
<Link Source="10345:[33023..33147).18" Target="10345:[31924..31963).3" />
<Link Source="10345:[33023..33147).18" Target="10354:[10268..10665).8" />
<Link Source="10312:[63439..63448).4" Target="10345:[33023..33147).12" />
<Link Source="10312:[63439..63448).4" Target="10354:[10268..10665).8" />
<Link Source="10312:[63473..63501).4" Target="10354:[10268..10665).8" />
<Link Source="10312:[63503..63516).4" Target="10345:[33023..33147).16" />
<Link Source="10312:[63503..63516).4" Target="10354:[10268..10665).8" />
<Link Source="10312:[63566..63612).4" Target="10345:[33023..33147).18" />
<Link Source="10312:[63566..63612).4" Target="10354:[10268..10665).8" />
<Link Source="10312:[63638..63668).4" Target="10354:[10268..10665).8" />
<Link Source="10312:[80978..80991).4" Target="10354:[10268..10665).8" />
<Link Source="10312:[80993..81002).4" Target="10312:[63439..63448).4" />
<Link Source="10312:[80993..81002).4" Target="10354:[10268..10665).8" />
<Link Source="10312:[81004..81017).4" Target="10312:[63503..63516).4" />
<Link Source="10312:[81004..81017).4" Target="10354:[10268..10665).8" />
<Link Source="10312:[81019..81040).4" Target="10354:[10268..10665).8" />
<Link Source="10312:[81042..81069).4" Target="10354:[10268..10665).8" />
<Link Source="10312:[81095..84034).4" Target="10312:[80978..80991).4" />
<Link Source="10312:[81095..84034).4" Target="10354:[10268..10665).8" />
<Link Source="10312:[81196..82523).12" Target="10312:[81095..84034).4" />
<Link Source="10312:[81196..82523).13" Target="10312:[80993..81002).4" />
<Link Source="10312:[81196..82523).13" Target="10312:[81196..82523).12" />
<Link Source="10312:[81196..82523).13" Target="10312:[81095..84034).4" />
<Link Source="10312:[81319..81371).3" Target="10312:[80978..80991).4" />
<Link Source="10312:[81319..81371).3" Target="10312:[81196..82523).13" />
<Link Source="10312:[81495..81570).11" Target="10312:[81319..81371).3" />
<Link Source="10312:[81495..81570).11" Target="10354:[10268..10665).8" />
<Link Source="10312:[81495..81570).11" Target="10312:[81196..82523).13" />
<Link Source="10312:[81495..81570).12" Target="10312:[81319..81371).3" />
<Link Source="10312:[81495..81570).12" Target="10312:[81196..82523).13" />
<Link Source="10312:[81596..82500).13" Target="10312:[81319..81371).3" />
<Link Source="10312:[81596..82500).13" Target="10354:[10268..10665).8" />
<Link Source="10312:[81596..82500).13" Target="10312:[80993..81002).4" />
<Link Source="10312:[81596..82500).13" Target="10312:[81196..82523).13" />
<Link Source="10312:[81731..82431).1" Target="10312:[81596..82500).13" />
<Link Source="10312:[81929..81937).1" Target="10312:[81004..81017).4" />
<Link Source="10312:[81929..81937).1" Target="10312:[81731..82431).1" />
<Link Source="10312:[81918..82042).1" Target="EXTERNAL" />
<Link Source="10312:[81918..82042).1" Target="10312:[81929..81937).1" />
<Link Source="10312:[81918..82042).2" Target="10312:[81929..81937).1" />
<Link Source="10312:[81940..82034).1" Target="10312:[81319..81371).3" />
<Link Source="10312:[81940..82034).1" Target="10312:[81918..82042).2" />
<Link Source="10312:[81940..82034).1" Target="10312:[81929..81937).1" />
<Link Source="10312:[81940..82034).2" Target="10312:[81918..82042).1" />
<Link Source="10312:[81940..82034).2" Target="10312:[81918..82042).2" />
<Link Source="10312:[81940..82034).2" Target="10312:[81929..81937).1" />
<Link Source="10312:[82461..82473).1" Target="10312:[81596..82500).13" />
<Link Source="10312:[64449..64498).1" Target="10354:[10268..10665).8" />
<Link Source="10312:[64449..64498).1" Target="10312:[82461..82473).1" />
<Link Source="10312:[64449..64498).2" Target="10312:[81940..82034).1" />
<Link Source="10312:[64449..64498).2" Target="10312:[82461..82473).1" />
<Link Source="10312:[64456..64497).1" Target="10312:[82461..82473).1" />
<Link Source="10354:[5577..5590).1" Target="10312:[64449..64498).1" />
<Link Source="10354:[5577..5590).1" Target="10312:[64456..64497).1" />
<Link Source="10354:[5592..5612).1" Target="10312:[64449..64498).2" />
<Link Source="10354:[5592..5612).1" Target="10312:[64456..64497).1" />
<Link Source="10354:[5638..5712).1" Target="EXTERNAL" />
<Link Source="10354:[5638..5712).1" Target="10312:[64456..64497).1" />
<Link Source="10354:[5638..5712).2" Target="10354:[5577..5590).1" />
<Link Source="10354:[5638..5712).2" Target="10312:[64456..64497).1" />
<Link Source="10354:[5638..5712).3" Target="10354:[5592..5612).1" />
<Link Source="10354:[5638..5712).3" Target="10312:[64456..64497).1" />
<Link Source="10354:[5638..5712).4" Target="10312:[64456..64497).1" />
<Link Source="10354:[5645..5711).1" Target="10312:[64456..64497).1" />
<Link Source="10368:[1076..1097).4" Target="10354:[5638..5712).1" />
<Link Source="10368:[1076..1097).4" Target="10354:[5645..5711).1" />
<Link Source="10368:[1099..1112).4" Target="10354:[5638..5712).2" />
<Link Source="10368:[1099..1112).4" Target="10354:[5645..5711).1" />
<Link Source="10368:[1114..1134).4" Target="10354:[5638..5712).3" />
<Link Source="10368:[1114..1134).4" Target="10354:[5645..5711).1" />
<Link Source="10368:[1048..1256).4" Target="10354:[5638..5712).4" />
<Link Source="10368:[1048..1256).4" Target="10354:[5645..5711).1" />
<Link Source="10312:[64449..64498).3" Target="10354:[5638..5712).4" />
<Link Source="10312:[64449..64498).3" Target="10312:[82461..82473).1" />
<Link Source="10345:[33169..33384).3" Target="10312:[64449..64498).3" />
<Link Source="10345:[33169..33384).3" Target="10368:[1076..1097).4" />
<Link Source="10345:[33169..33384).3" Target="EXTERNAL" />
<Link Source="10345:[33169..33384).3" Target="10354:[10268..10665).8" />
<Link Source="10354:[10268..10665).11" Target="10312:[81940..82034).1" />
<Link Source="10354:[10268..10665).11" Target="10312:[64449..64498).3" />
<Link Source="10354:[10268..10665).11" Target="10368:[1076..1097).4" />
<Link Source="10354:[10268..10665).11" Target="10354:[10268..10665).8" />
<Link Source="10345:[32639..32764).7" Target="10312:[81940..82034).1" />
<Link Source="10345:[32644..32682).3" Target="10312:[81940..82034).1" />
<Link Source="10345:[33539..33552).3" Target="10345:[32639..32764).7" />
<Link Source="10345:[33539..33552).3" Target="10345:[32644..32682).3" />
<Link Source="10345:[33578..34640).3" Target="10345:[33539..33552).3" />
<Link Source="10345:[33578..34640).3" Target="10312:[81940..82034).1" />
<Link Source="10345:[33578..34640).3" Target="10345:[32644..32682).3" />
<Link Source="10345:[34656..34668).5" Target="10345:[32644..32682).3" />
<Link Source="10345:[32639..32764).8" Target="10345:[34656..34668).5" />
<Link Source="10345:[32639..32764).8" Target="10312:[81940..82034).1" />
<Link Source="10345:[33023..33147).28" Target="10345:[31924..31963).3" />
<Link Source="10345:[33023..33147).28" Target="10312:[81940..82034).1" />
<Link Source="10312:[63473..63501).5" Target="10312:[81940..82034).1" />
<Link Source="10312:[63566..63612).5" Target="10345:[33023..33147).28" />
<Link Source="10312:[63566..63612).5" Target="10312:[81940..82034).1" />
<Link Source="10312:[63638..63668).5" Target="10312:[81940..82034).1" />
<Link Source="10312:[81019..81040).5" Target="10312:[81940..82034).1" />
<Link Source="10312:[81042..81069).5" Target="10312:[81940..82034).1" />
<Link Source="10312:[81495..81570).16" Target="10312:[81940..82034).1" />
<Link Source="10312:[82275..82283).1" Target="10312:[81940..82034).1" />
<Link Source="10312:[82264..82400).1" Target="EXTERNAL" />
<Link Source="10312:[82264..82400).1" Target="10312:[82275..82283).1" />
<Link Source="10312:[82264..82400).2" Target="10312:[82275..82283).1" />
<Link Source="10312:[82286..82392).1" Target="10312:[81940..82034).1" />
<Link Source="10312:[82286..82392).1" Target="10312:[82264..82400).2" />
<Link Source="10312:[82286..82392).1" Target="10312:[82275..82283).1" />
<Link Source="10312:[82286..82392).2" Target="10312:[82264..82400).1" />
<Link Source="10312:[82286..82392).2" Target="10312:[82264..82400).2" />
<Link Source="10312:[82286..82392).2" Target="10312:[82275..82283).1" />
<Link Source="10312:[82461..82473).3" Target="10312:[81940..82034).1" />
<Link Source="10312:[64449..64498).5" Target="10312:[81940..82034).1" />
<Link Source="10312:[64449..64498).5" Target="10312:[82461..82473).3" />
<Link Source="10312:[64449..64498).6" Target="10312:[82286..82392).1" />
<Link Source="10312:[64449..64498).6" Target="10312:[82461..82473).3" />
<Link Source="10312:[64456..64497).2" Target="10312:[82461..82473).3" />
<Link Source="10354:[5577..5590).2" Target="10312:[64449..64498).5" />
<Link Source="10354:[5577..5590).2" Target="10312:[64456..64497).2" />
<Link Source="10354:[5592..5612).2" Target="10312:[64449..64498).6" />
<Link Source="10354:[5592..5612).2" Target="10312:[64456..64497).2" />
<Link Source="10354:[5638..5712).6" Target="EXTERNAL" />
<Link Source="10354:[5638..5712).6" Target="10312:[64456..64497).2" />
<Link Source="10354:[5638..5712).7" Target="10354:[5577..5590).2" />
<Link Source="10354:[5638..5712).7" Target="10312:[64456..64497).2" />
<Link Source="10354:[5638..5712).8" Target="10354:[5592..5612).2" />
<Link Source="10354:[5638..5712).8" Target="10312:[64456..64497).2" />
<Link Source="10354:[5638..5712).9" Target="10312:[64456..64497).2" />
<Link Source="10354:[5645..5711).2" Target="10312:[64456..64497).2" />
<Link Source="10368:[1076..1097).5" Target="10354:[5638..5712).6" />
<Link Source="10368:[1076..1097).5" Target="10354:[5645..5711).2" />
<Link Source="10368:[1099..1112).5" Target="10354:[5638..5712).7" />
<Link Source="10368:[1099..1112).5" Target="10354:[5645..5711).2" />
<Link Source="10368:[1114..1134).5" Target="10354:[5638..5712).8" />
<Link Source="10368:[1114..1134).5" Target="10354:[5645..5711).2" />
<Link Source="10368:[1048..1256).5" Target="10354:[5638..5712).9" />
<Link Source="10368:[1048..1256).5" Target="10354:[5645..5711).2" />
<Link Source="10312:[64449..64498).7" Target="10354:[5638..5712).9" />
<Link Source="10312:[64449..64498).7" Target="10312:[82461..82473).3" />
<Link Source="10345:[33169..33384).5" Target="10312:[64449..64498).7" />
<Link Source="10345:[33169..33384).5" Target="10368:[1076..1097).5" />
<Link Source="10345:[33169..33384).5" Target="EXTERNAL" />
<Link Source="10345:[33169..33384).5" Target="10312:[81940..82034).1" />
<Link Source="10354:[10268..10665).14" Target="10312:[82286..82392).1" />
<Link Source="10354:[10268..10665).14" Target="10312:[64449..64498).7" />
<Link Source="10354:[10268..10665).14" Target="10368:[1076..1097).5" />
<Link Source="10354:[10268..10665).14" Target="10312:[81940..82034).1" />
<Link Source="10345:[32639..32764).10" Target="10312:[82286..82392).1" />
<Link Source="10345:[32644..32682).4" Target="10312:[82286..82392).1" />
<Link Source="10345:[33539..33552).4" Target="10345:[32639..32764).10" />
<Link Source="10345:[33539..33552).4" Target="10345:[32644..32682).4" />
<Link Source="10345:[33578..34640).4" Target="10345:[33539..33552).4" />
<Link Source="10345:[33578..34640).4" Target="10312:[82286..82392).1" />
<Link Source="10345:[33578..34640).4" Target="10345:[32644..32682).4" />
<Link Source="10345:[34656..34668).7" Target="10345:[32644..32682).4" />
<Link Source="10345:[32639..32764).11" Target="10345:[34656..34668).7" />
<Link Source="10345:[32639..32764).11" Target="10312:[82286..82392).1" />
<Link Source="10345:[33023..33147).38" Target="10345:[31924..31963).3" />
<Link Source="10345:[33023..33147).38" Target="10312:[82286..82392).1" />
<Link Source="10312:[63473..63501).6" Target="10312:[82286..82392).1" />
<Link Source="10312:[63566..63612).6" Target="10345:[33023..33147).38" />
<Link Source="10312:[63566..63612).6" Target="10312:[82286..82392).1" />
<Link Source="10312:[63638..63668).6" Target="10312:[82286..82392).1" />
<Link Source="10312:[81019..81040).6" Target="10312:[82286..82392).1" />
<Link Source="10312:[81042..81069).6" Target="10312:[82286..82392).1" />
<Link Source="10312:[81495..81570).21" Target="10312:[82286..82392).1" />
<Link Source="10312:[82461..82473).5" Target="10312:[82286..82392).1" />
<Link Source="10312:[64449..64498).9" Target="10312:[82286..82392).1" />
<Link Source="10312:[64449..64498).9" Target="10312:[82461..82473).5" />
<Link Source="10312:[64456..64497).3" Target="10312:[82461..82473).5" />
<Link Source="10354:[5577..5590).3" Target="10312:[64449..64498).9" />
<Link Source="10354:[5577..5590).3" Target="10312:[64456..64497).3" />
<Link Source="10354:[5592..5612).3" Target="10312:[64449..64498).9" />
<Link Source="10354:[5592..5612).3" Target="10312:[64456..64497).3" />
<Link Source="10354:[5638..5712).11" Target="EXTERNAL" />
<Link Source="10354:[5638..5712).11" Target="10312:[64456..64497).3" />
<Link Source="10354:[5638..5712).12" Target="10354:[5577..5590).3" />
<Link Source="10354:[5638..5712).12" Target="10312:[64456..64497).3" />
<Link Source="10354:[5638..5712).13" Target="10354:[5592..5612).3" />
<Link Source="10354:[5638..5712).13" Target="10312:[64456..64497).3" />
<Link Source="10354:[5638..5712).14" Target="10312:[64456..64497).3" />
<Link Source="10354:[5645..5711).3" Target="10312:[64456..64497).3" />
<Link Source="10368:[1076..1097).6" Target="10354:[5638..5712).11" />
<Link Source="10368:[1076..1097).6" Target="10354:[5645..5711).3" />
<Link Source="10368:[1099..1112).6" Target="10354:[5638..5712).12" />
<Link Source="10368:[1099..1112).6" Target="10354:[5645..5711).3" />
<Link Source="10368:[1114..1134).6" Target="10354:[5638..5712).13" />
<Link Source="10368:[1114..1134).6" Target="10354:[5645..5711).3" />
<Link Source="10368:[1048..1256).6" Target="10354:[5638..5712).14" />
<Link Source="10368:[1048..1256).6" Target="10354:[5645..5711).3" />
<Link Source="10312:[64449..64498).11" Target="10354:[5638..5712).14" />
<Link Source="10312:[64449..64498).11" Target="10312:[82461..82473).5" />
<Link Source="10345:[33169..33384).7" Target="10312:[64449..64498).11" />
<Link Source="10345:[33169..33384).7" Target="10368:[1076..1097).6" />
<Link Source="10345:[33169..33384).7" Target="EXTERNAL" />
<Link Source="10345:[33169..33384).7" Target="10312:[82286..82392).1" />
<Link Source="10354:[10268..10665).17" Target="10312:[82286..82392).1" />
<Link Source="10354:[10268..10665).17" Target="10312:[64449..64498).11" />
<Link Source="10354:[10268..10665).17" Target="10368:[1076..1097).6" />
<Link Source="10312:[81019..81040).7" Target="10312:[82461..82473).5" />
<Link Source="10312:[81019..81040).7" Target="10312:[82286..82392).1" />
<Link Source="10312:[81042..81069).7" Target="10312:[82461..82473).5" />
<Link Source="10312:[81042..81069).7" Target="10312:[82286..82392).1" />
<Link Source="10312:[81495..81570).26" Target="10312:[82461..82473).5" />
<Link Source="10312:[81495..81570).26" Target="10312:[82286..82392).1" />
<Link Source="10312:[81495..81570).27" Target="10312:[82461..82473).5" />
<Link Source="10312:[64449..64498).14" Target="10312:[82461..82473).5" />
<Link Source="10354:[5592..5612).4" Target="10312:[64449..64498).14" />
<Link Source="10354:[5592..5612).4" Target="10312:[64456..64497).3" />
<Link Source="10354:[5638..5712).18" Target="10354:[5592..5612).4" />
<Link Source="10354:[5638..5712).18" Target="10312:[64456..64497).3" />
<Link Source="10368:[1114..1134).7" Target="10354:[5638..5712).18" />
<Link Source="10368:[1114..1134).7" Target="10354:[5645..5711).3" />
<Link Source="10354:[10268..10665).20" Target="10312:[82461..82473).5" />
<Link Source="10354:[10268..10665).20" Target="10312:[64449..64498).11" />
<Link Source="10354:[10268..10665).20" Target="10368:[1076..1097).6" />
<Link Source="10354:[10268..10665).20" Target="10312:[82286..82392).1" />
<Link Source="10345:[32639..32764).16" Target="10312:[82461..82473).5" />
<Link Source="10345:[32644..32682).6" Target="10312:[82461..82473).5" />
<Link Source="10345:[33539..33552).6" Target="10345:[32639..32764).16" />
<Link Source="10345:[33539..33552).6" Target="10345:[32644..32682).6" />
<Link Source="10345:[33578..34640).6" Target="10345:[33539..33552).6" />
<Link Source="10345:[33578..34640).6" Target="10312:[82461..82473).5" />
<Link Source="10345:[33578..34640).6" Target="10345:[32644..32682).6" />
<Link Source="10345:[34656..34668).11" Target="10345:[32644..32682).6" />
<Link Source="10345:[32639..32764).17" Target="10345:[34656..34668).11" />
<Link Source="10345:[32639..32764).17" Target="10312:[82461..82473).5" />
<Link Source="10345:[33023..33147).58" Target="10345:[31924..31963).3" />
<Link Source="10345:[33023..33147).58" Target="10312:[82461..82473).5" />
<Link Source="10312:[63473..63501).8" Target="10312:[82461..82473).5" />
<Link Source="10312:[63566..63612).8" Target="10345:[33023..33147).58" />
<Link Source="10312:[63566..63612).8" Target="10312:[82461..82473).5" />
<Link Source="10312:[63638..63668).8" Target="10312:[82461..82473).5" />
<Link Source="10312:[81019..81040).8" Target="10312:[82461..82473).5" />
<Link Source="10312:[81042..81069).8" Target="10312:[82461..82473).5" />
<Link Source="10354:[5577..5590).5" Target="10312:[64449..64498).14" />
<Link Source="10354:[5577..5590).5" Target="10312:[64456..64497).3" />
<Link Source="10354:[5638..5712).22" Target="10354:[5577..5590).5" />
<Link Source="10354:[5638..5712).22" Target="10312:[64456..64497).3" />
<Link Source="10368:[1099..1112).8" Target="10354:[5638..5712).22" />
<Link Source="10368:[1099..1112).8" Target="10354:[5645..5711).3" />
<Link Source="10345:[33169..33384).11" Target="10312:[64449..64498).11" />
<Link Source="10345:[33169..33384).11" Target="10368:[1076..1097).6" />
<Link Source="10345:[33169..33384).11" Target="EXTERNAL" />
<Link Source="10345:[33169..33384).11" Target="10312:[82461..82473).5" />
<Link Source="10354:[10268..10665).23" Target="10312:[82461..82473).5" />
<Link Source="10354:[10268..10665).23" Target="10312:[64449..64498).11" />
<Link Source="10354:[10268..10665).23" Target="10368:[1076..1097).6" />
<Link Source="10312:[4685..4699).8" Target="10312:[36278..36360).25" />
<Link Source="10354:[3684..3818).21" Target="10312:[6110..6221).17" />
<Link Source="10354:[3684..3818).21" Target="10312:[4685..4699).8" />
<Link Source="10354:[3720..3803).153" Target="10354:[3684..3818).21" />
<Link Source="10354:[3720..3803).153" Target="10312:[82461..82473).5" />
<Link Source="10354:[3720..3803).153" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).153" Target="10312:[4685..4699).8" />
<Link Source="10312:[4680..4787).15" Target="10354:[3720..3803).153" />
<Link Source="10312:[4680..4787).15" Target="10312:[36278..36360).25" />
<Link Source="10312:[4749..4764).3" Target="10312:[36278..36360).25" />
<Link Source="10312:[4749..4764).3" Target="10312:[4680..4787).15" />
<Link Source="10312:[4826..5058).36" Target="10312:[1585..1724).20" />
<Link Source="10312:[4826..5058).36" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).36" Target="10312:[36278..36360).25" />
<Link Source="10312:[4826..5058).37" Target="10312:[36278..36360).25" />
<Link Source="10312:[5087..5101).3" Target="10312:[4749..4764).3" />
<Link Source="10312:[5087..5101).3" Target="10312:[1585..1724).20" />
<Link Source="10319:[61640..61682).1" Target="10319:[60816..60841).1" />
<Link Source="10319:[61640..61682).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61640..61682).2" Target="10319:[60959..60981).1" />
<Link Source="10319:[61640..61682).2" Target="10319:[57959..58083).1" />
<Link Source="10319:[61640..61682).3" Target="10312:[82461..82473).5" />
<Link Source="10319:[61640..61682).3" Target="10319:[57959..58083).1" />
<Link Source="10319:[61640..61682).4" Target="10319:[61640..61682).1" />
<Link Source="10319:[61640..61682).4" Target="10319:[61640..61682).2" />
<Link Source="10319:[61640..61682).4" Target="10319:[61640..61682).3" />
<Link Source="10319:[61640..61682).4" Target="10312:[82461..82473).5" />
<Link Source="10319:[61640..61682).4" Target="10319:[57959..58083).1" />
<Link Source="10319:[61698..61712).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61726..61885).1" Target="10319:[61338..61384).1" />
<Link Source="10319:[61726..61885).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[61726..61885).2" Target="10319:[60996..61012).1" />
<Link Source="10319:[61726..61885).2" Target="10319:[57959..58083).1" />
<Link Source="10319:[61726..61885).3" Target="10319:[61027..61036).1" />
<Link Source="10319:[61726..61885).3" Target="10319:[57959..58083).1" />
<Link Source="10319:[61726..61885).4" Target="10319:[60959..60981).1" />
<Link Source="10319:[61726..61885).4" Target="10319:[57959..58083).1" />
<Link Source="10319:[61726..61885).5" Target="10319:[60816..60841).1" />
<Link Source="10319:[61726..61885).5" Target="10319:[57959..58083).1" />
<Link Source="10319:[61726..61885).6" Target="10319:[57959..58083).1" />
<Link Source="10319:[61726..61885).7" Target="10319:[60856..60895).1" />
<Link Source="10319:[61726..61885).7" Target="10319:[61726..61885).6" />
<Link Source="10319:[61726..61885).7" Target="10319:[57959..58083).1" />
<Link Source="10319:[61726..61885).9" Target="10319:[61698..61712).1" />
<Link Source="10319:[61726..61885).9" Target="10319:[57959..58083).1" />
<Link Source="10319:[61726..61885).10" Target="10319:[60910..60944).1" />
<Link Source="10319:[61726..61885).10" Target="10319:[57959..58083).1" />
<Link Source="10319:[61726..61885).11" Target="10319:[61051..61072).1" />
<Link Source="10319:[61726..61885).11" Target="10319:[57959..58083).1" />
<Link Source="10319:[61754..61884).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[84167..84186).3" Target="10319:[61726..61885).1" />
<Link Source="10319:[84167..84186).3" Target="10319:[61754..61884).1" />
<Link Source="10319:[84201..84218).3" Target="10319:[61726..61885).2" />
<Link Source="10319:[84201..84218).3" Target="10319:[61754..61884).1" />
<Link Source="10319:[84233..84242).3" Target="10319:[61726..61885).3" />
<Link Source="10319:[84233..84242).3" Target="10319:[61754..61884).1" />
<Link Source="10319:[84257..84273).3" Target="10319:[61726..61885).4" />
<Link Source="10319:[84257..84273).3" Target="10319:[61754..61884).1" />
<Link Source="10319:[84288..84313).3" Target="10319:[61726..61885).5" />
<Link Source="10319:[84288..84313).3" Target="10319:[61754..61884).1" />
<Link Source="10319:[84328..84359).3" Target="10319:[61726..61885).7" />
<Link Source="10319:[84328..84359).3" Target="10319:[61754..61884).1" />
<Link Source="10319:[84374..84391).3" Target="10319:[61726..61885).9" />
<Link Source="10319:[84374..84391).3" Target="10319:[61754..61884).1" />
<Link Source="10319:[84406..84447).3" Target="10319:[61726..61885).10" />
<Link Source="10319:[84406..84447).3" Target="10319:[61754..61884).1" />
<Link Source="10319:[84462..84508).3" Target="10319:[61726..61885).11" />
<Link Source="10319:[84462..84508).3" Target="10319:[61754..61884).1" />
<Link Source="10319:[84124..109887).3" Target="10319:[60756..63756).1" />
<Link Source="10319:[84124..109887).3" Target="10319:[61754..61884).1" />
<Link Source="10319:[85320..85348).9" Target="10319:[61754..61884).1" />
<Link Source="10319:[85320..85348).10" Target="10319:[84257..84273).3" />
<Link Source="10319:[85320..85348).10" Target="10319:[85320..85348).9" />
<Link Source="10319:[85320..85348).10" Target="10319:[61754..61884).1" />
<Link Source="10319:[85366..85400).9" Target="10319:[61754..61884).1" />
<Link Source="10319:[85366..85400).10" Target="10319:[84288..84313).3" />
<Link Source="10319:[85366..85400).10" Target="10319:[85366..85400).9" />
<Link Source="10319:[85366..85400).10" Target="10319:[61754..61884).1" />
<Link Source="10354:[4561..4580).5" Target="10319:[84167..84186).3" />
<Link Source="10354:[4561..4580).5" Target="10319:[61640..61682).4" />
<Link Source="10354:[4561..4580).5" Target="10319:[61754..61884).1" />
<Link Source="10319:[85467..85484).5" Target="10319:[61754..61884).1" />
<Link Source="10354:[4094..4107).66" Target="10319:[84167..84186).3" />
<Link Source="10354:[4094..4107).66" Target="10319:[61640..61682).4" />
<Link Source="10354:[4094..4107).66" Target="10319:[61754..61884).1" />
<Link Source="10319:[104874..105336).7" Target="10354:[4561..4580).5" />
<Link Source="10319:[104874..105336).7" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).8" Target="10319:[104874..105336).7" />
<Link Source="10319:[104874..105336).8" Target="10319:[84124..109887).3" />
<Link Source="10319:[104874..105336).8" Target="10354:[4561..4580).5" />
<Link Source="10319:[105465..105535).12" Target="10319:[84288..84313).3" />
<Link Source="10319:[105465..105535).12" Target="10354:[4561..4580).5" />
<Link Source="10319:[105465..105535).13" Target="10319:[84257..84273).3" />
<Link Source="10319:[105465..105535).13" Target="10354:[4561..4580).5" />
<Link Source="10319:[76360..76385).12" Target="10319:[105465..105535).12" />
<Link Source="10319:[76360..76385).12" Target="10354:[4561..4580).5" />
<Link Source="10319:[76387..76402).12" Target="10319:[105465..105535).13" />
<Link Source="10319:[76387..76402).12" Target="10354:[4561..4580).5" />
<Link Source="10060:[2841..2854).12" Target="10354:[4561..4580).5" />
<Link Source="10060:[2856..2875).12" Target="10354:[4561..4580).5" />
<Link Source="10060:[2901..2932).23" Target="10060:[2841..2854).12" />
<Link Source="10060:[2901..2932).23" Target="10354:[4561..4580).5" />
<Link Source="10060:[2948..3467).12" Target="10060:[2841..2854).12" />
<Link Source="10060:[2948..3467).12" Target="10354:[4561..4580).5" />
<Link Source="10060:[3553..4223).14" Target="10060:[2841..2854).12" />
<Link Source="10060:[3553..4223).14" Target="10354:[4561..4580).5" />
<Link Source="10060:[4243..4274).14" Target="10060:[2841..2854).12" />
<Link Source="10060:[4243..4274).14" Target="10354:[4561..4580).5" />
<Link Source="10060:[3518..4328).14" Target="10060:[4243..4274).14" />
<Link Source="10060:[3518..4328).14" Target="10354:[4561..4580).5" />
<Link Source="10319:[76494..76582).45" Target="10354:[4561..4580).5" />
<Link Source="10319:[84691..84861).5" Target="10354:[4561..4580).5" />
<Link Source="10319:[84691..84861).5" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).5" Target="10319:[61754..61884).1" />
<Link Source="10319:[84764..84846).7" Target="10319:[84257..84273).3" />
<Link Source="10319:[84764..84846).7" Target="10319:[84691..84861).5" />
<Link Source="10319:[84764..84846).8" Target="10319:[84691..84861).5" />
<Link Source="10319:[84764..84846).10" Target="10354:[4561..4580).5" />
<Link Source="10319:[84764..84846).10" Target="10319:[84691..84861).5" />
<Link Source="10319:[84764..84846).11" Target="10319:[84288..84313).3" />
<Link Source="10319:[84764..84846).11" Target="10319:[84691..84861).5" />
<Link Source="10319:[84764..84845).2" Target="10319:[84691..84861).5" />
<Link Source="10306:[358886..358901).2" Target="10319:[84764..84846).7" />
<Link Source="10306:[358886..358901).2" Target="10319:[84764..84845).2" />
<Link Source="10306:[358903..358930).2" Target="10319:[84764..84846).8" />
<Link Source="10306:[358903..358930).2" Target="10319:[84764..84845).2" />
<Link Source="10306:[358932..358945).2" Target="10319:[84764..84846).10" />
<Link Source="10306:[358932..358945).2" Target="10319:[84764..84845).2" />
<Link Source="10306:[358947..358972).2" Target="10319:[84764..84846).11" />
<Link Source="10306:[358947..358972).2" Target="10319:[84764..84845).2" />
<Link Source="10306:[358838..360009).2" Target="10319:[84124..109887).3" />
<Link Source="10306:[358838..360009).2" Target="10319:[84764..84845).2" />
<Link Source="10306:[358998..359998).7" Target="10306:[358932..358945).2" />
<Link Source="10306:[358998..359998).7" Target="10354:[4561..4580).5" />
<Link Source="10306:[358998..359998).7" Target="10319:[84764..84845).2" />
<Link Source="10306:[358998..359998).8" Target="10319:[84764..84845).2" />
<Link Source="10319:[62966..63027).1" Target="10354:[4561..4580).5" />
<Link Source="10319:[62966..63027).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[63043..63681).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[63043..63681).2" Target="10319:[62966..63027).1" />
<Link Source="10319:[63043..63681).2" Target="10319:[63043..63681).1" />
<Link Source="10319:[63043..63681).2" Target="10319:[57959..58083).1" />
<Link Source="10319:[63697..63716).1" Target="10319:[57959..58083).1" />
<Link Source="10354:[11383..11549).5" Target="10319:[61338..61384).1" />
<Link Source="10354:[11383..11549).5" Target="10319:[63697..63716).1" />
<Link Source="10354:[3932..3952).9" Target="10354:[11383..11549).5" />
<Link Source="10354:[3932..3952).9" Target="10354:[4561..4580).5" />
<Link Source="10354:[3932..3952).9" Target="10319:[63697..63716).1" />
<Link Source="10354:[11428..11441).5" Target="10319:[63697..63716).1" />
<Link Source="10319:[63697..63717).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[63733..63745).1" Target="10319:[62966..63027).1" />
<Link Source="10319:[63733..63745).1" Target="10319:[57959..58083).1" />
<Link Source="10319:[58098..58125).1" Target="10319:[20752..20877).1" />
<Link Source="10319:[58141..60037).1" Target="10319:[57756..57807).1" />
<Link Source="10319:[58141..60037).1" Target="10319:[20752..20877).1" />
<Link Source="10319:[59172..60037).1" Target="10319:[54356..60744).1" />
<Link Source="10319:[59172..60037).1" Target="10354:[3932..3952).9" />
<Link Source="10319:[59172..60037).1" Target="EXTERNAL" />
<Link Source="10319:[59172..60037).1" Target="10319:[58141..60037).1" />
<Link Source="10319:[59172..60037).2" Target="10319:[58141..60037).1" />
<Link Source="10319:[59723..60022).1" Target="10319:[63733..63745).1" />
<Link Source="10319:[59723..60022).1" Target="10319:[59172..60037).1" />
<Link Source="10319:[59723..60022).2" Target="10319:[54444..54466).1" />
<Link Source="10319:[59723..60022).2" Target="10319:[59172..60037).1" />
<Link Source="10319:[59723..60022).3" Target="10319:[57660..57740).1" />
<Link Source="10319:[59723..60022).3" Target="10319:[59172..60037).1" />
<Link Source="10319:[59723..60022).5" Target="10319:[54481..54506).1" />
<Link Source="10319:[59723..60022).5" Target="10319:[59172..60037).1" />
<Link Source="10319:[59723..60022).6" Target="10319:[54521..54560).1" />
<Link Source="10319:[59723..60022).6" Target="10319:[59172..60037).1" />
<Link Source="10319:[59880..59945).1" Target="10319:[59172..60037).1" />
<Link Source="10319:[64558..64603).1" Target="10319:[59723..60022).3" />
<Link Source="10319:[64558..64603).1" Target="10319:[59880..59945).1" />
<Link Source="10319:[64605..64630).1" Target="10319:[59723..60022).5" />
<Link Source="10319:[64605..64630).1" Target="10319:[59880..59945).1" />
<Link Source="10319:[64632..64678).1" Target="10319:[59723..60022).6" />
<Link Source="10319:[64632..64678).1" Target="10319:[59880..59945).1" />
<Link Source="10319:[64496..65048).1" Target="10319:[54356..60744).1" />
<Link Source="10319:[64496..65048).1" Target="10319:[59880..59945).1" />
<Link Source="10319:[64704..64742).1" Target="10319:[59880..59945).1" />
<Link Source="10319:[64704..64742).2" Target="10319:[64558..64603).1" />
<Link Source="10319:[64704..64742).2" Target="10319:[73753..73778).8" />
<Link Source="10319:[64704..64742).2" Target="10319:[64704..64742).1" />
<Link Source="10319:[64704..64742).2" Target="10319:[59880..59945).1" />
<Link Source="10319:[64756..64815).1" Target="10319:[59880..59945).1" />
<Link Source="10319:[64829..64988).1" Target="10319:[64558..64603).1" />
<Link Source="10319:[64829..64988).1" Target="10319:[59880..59945).1" />
<Link Source="10319:[64902..64973).1" Target="10319:[64829..64988).1" />
<Link Source="10319:[64902..64973).2" Target="10319:[64605..64630).1" />
<Link Source="10319:[64902..64973).2" Target="10319:[64829..64988).1" />
<Link Source="10319:[64902..64973).3" Target="10319:[64632..64678).1" />
<Link Source="10319:[64902..64973).3" Target="10319:[64829..64988).1" />
<Link Source="10319:[64911..64971).1" Target="10319:[64829..64988).1" />
<Link Source="10319:[65105..65128).1" Target="10319:[64902..64973).1" />
<Link Source="10319:[65105..65128).1" Target="10319:[64911..64971).1" />
<Link Source="10319:[65130..65155).1" Target="10319:[64902..64973).2" />
<Link Source="10319:[65130..65155).1" Target="10319:[64911..64971).1" />
<Link Source="10319:[65157..65203).1" Target="10319:[64902..64973).3" />
<Link Source="10319:[65157..65203).1" Target="10319:[64911..64971).1" />
<Link Source="10319:[65060..65694).1" Target="10319:[64496..65048).1" />
<Link Source="10319:[65060..65694).1" Target="10319:[64911..64971).1" />
<Link Source="10319:[65330..65407).1" Target="EXTERNAL" />
<Link Source="10319:[65330..65407).1" Target="10319:[64911..64971).1" />
<Link Source="10319:[65343..65406).1" Target="10319:[64911..64971).1" />
<Link Source="10307:[2552..2569).2" Target="10319:[65330..65407).1" />
<Link Source="10307:[2552..2569).2" Target="10319:[65343..65406).1" />
<Link Source="10307:[2516..2720).2" Target="10319:[65060..65694).1" />
<Link Source="10307:[2516..2720).2" Target="10319:[65343..65406).1" />
<Link Source="10298:[537..568).178" Target="10307:[2516..2720).2" />
<Link Source="10298:[537..568).178" Target="10307:[2552..2569).2" />
<Link Source="10298:[537..568).178" Target="10319:[65343..65406).1" />
<Link Source="10286:[1605..1638).29" Target="10298:[537..568).178" />
<Link Source="10286:[1688..1781).43" Target="10298:[537..568).178" />
<Link Source="10286:[1688..1781).44" Target="EXTERNAL" />
<Link Source="10286:[1688..1781).44" Target="10298:[537..568).178" />
<Link Source="10286:[1708..1779).8" Target="10298:[537..568).178" />
<Link Source="10298:[471..492).61" Target="10286:[1688..1781).43" />
<Link Source="10298:[471..492).61" Target="10286:[1708..1779).8" />
<Link Source="10298:[494..511).61" Target="10286:[1688..1781).44" />
<Link Source="10298:[494..511).61" Target="10286:[1708..1779).8" />
<Link Source="10286:[1820..1963).43" Target="10298:[537..568).178" />
<Link Source="10286:[1820..1963).44" Target="EXTERNAL" />
<Link Source="10286:[1820..1963).44" Target="10298:[537..568).178" />
<Link Source="10286:[1840..1888).8" Target="10298:[537..568).178" />
<Link Source="10298:[471..492).62" Target="10286:[1820..1963).43" />
<Link Source="10298:[471..492).62" Target="10286:[1840..1888).8" />
<Link Source="10298:[494..511).62" Target="10286:[1820..1963).44" />
<Link Source="10298:[494..511).62" Target="10286:[1840..1888).8" />
<Link Source="10319:[65423..65656).1" Target="10319:[65105..65128).1" />
<Link Source="10319:[65423..65656).1" Target="10319:[73753..73778).8" />
<Link Source="10319:[65423..65656).1" Target="10354:[3932..3952).9" />
<Link Source="10319:[65423..65656).1" Target="10319:[64911..64971).1" />
<Link Source="10319:[65433..65486).1" Target="10319:[65423..65656).1" />
<Link Source="10319:[65433..65486).1" Target="10319:[64911..64971).1" />
<Link Source="10319:[65423..65656).4" Target="10319:[65130..65155).1" />
<Link Source="10319:[65423..65656).4" Target="10319:[65433..65486).1" />
<Link Source="10319:[65423..65656).5" Target="10319:[65157..65203).1" />
<Link Source="10319:[65423..65656).5" Target="10319:[65433..65486).1" />
<Link Source="10319:[65593..65655).1" Target="10319:[65433..65486).1" />
<Link Source="10319:[13710..13735).12" Target="10319:[65423..65656).4" />
<Link Source="10319:[13710..13735).12" Target="10319:[65593..65655).1" />
<Link Source="10319:[13737..13783).12" Target="10319:[65423..65656).5" />
<Link Source="10319:[13737..13783).12" Target="10319:[65593..65655).1" />
<Link Source="10319:[13647..14061).12" Target="10298:[537..568).178" />
<Link Source="10319:[13647..14061).12" Target="10319:[65593..65655).1" />
<Link Source="10319:[15096..15130).45" Target="10319:[65593..65655).1" />
<Link Source="10319:[15096..15130).46" Target="10319:[13710..13735).12" />
<Link Source="10319:[15096..15130).46" Target="10319:[15096..15130).45" />
<Link Source="10319:[15096..15130).46" Target="10319:[65593..65655).1" />
<Link Source="10319:[73736..73751).10" Target="10319:[65593..65655).1" />
<Link Source="10319:[73882..73975).55" Target="10319:[65593..65655).1" />
<Link Source="10319:[73882..73975).56" Target="10319:[13647..14061).12" />
<Link Source="10319:[73882..73975).56" Target="10319:[73882..73975).55" />
<Link Source="10319:[73882..73975).56" Target="10319:[65593..65655).1" />
<Link Source="10319:[76360..76385).13" Target="10319:[13710..13735).12" />
<Link Source="10319:[76360..76385).13" Target="10319:[65593..65655).1" />
<Link Source="10319:[76387..76402).13" Target="10319:[73736..73751).10" />
<Link Source="10319:[76387..76402).13" Target="10319:[65593..65655).1" />
<Link Source="10319:[76494..76582).49" Target="10319:[65593..65655).1" />
<Link Source="10319:[76494..76582).50" Target="10319:[13647..14061).12" />
<Link Source="10319:[76494..76582).50" Target="10319:[76494..76582).49" />
<Link Source="10319:[76494..76582).50" Target="10319:[65593..65655).1" />
<Link Source="10287:[791..833).21" Target="10319:[13647..14061).12" />
<Link Source="10287:[791..833).21" Target="10319:[65593..65655).1" />
<Link Source="10319:[15783..15865).74" Target="10319:[13710..13735).12" />
<Link Source="10319:[15783..15865).74" Target="10319:[13647..14061).12" />
<Link Source="10286:[21563..21583).11" Target="10319:[15783..15865).74" />
<Link Source="10286:[21563..21583).11" Target="10319:[13647..14061).12" />
<Link Source="10286:[22110..22130).11" Target="10286:[21563..21583).11" />
<Link Source="10286:[22110..22130).11" Target="10319:[13647..14061).12" />
<Link Source="10286:[8725..8866).1" Target="10319:[15783..15865).74" />
<Link Source="10286:[8761..8796).1" Target="10286:[8725..8866).1" />
<Link Source="10286:[8761..8796).1" Target="10319:[15783..15865).74" />
<Link Source="10286:[8821..8850).1" Target="10319:[15783..15865).74" />
<Link Source="10307:[1439..1480).26" Target="10286:[8725..8866).1" />
<Link Source="10307:[1439..1480).26" Target="10286:[8761..8796).1" />
<Link Source="10307:[1439..1480).26" Target="10286:[8821..8850).1" />
<Link Source="10286:[8814..8851).1" Target="10307:[1439..1480).26" />
<Link Source="10286:[8814..8851).1" Target="10319:[15783..15865).74" />
<Link Source="10286:[15616..15690).51" Target="10286:[8814..8851).1" />
<Link Source="10286:[15616..15690).51" Target="10319:[15783..15865).74" />
<Link Source="10286:[15616..15690).52" Target="10286:[8814..8851).1" />
<Link Source="10286:[15616..15690).52" Target="10286:[8761..8796).1" />
<Link Source="10286:[15616..15690).52" Target="EXTERNAL" />
<Link Source="10286:[15616..15690).52" Target="10319:[15783..15865).74" />
<Link Source="10286:[15715..15910).11" Target="10286:[8814..8851).1" />
<Link Source="10286:[15715..15910).11" Target="10319:[15783..15865).74" />
<Link Source="10286:[23161..23181).11" Target="10286:[22110..22130).11" />
<Link Source="10286:[23161..23181).11" Target="10319:[15783..15865).74" />
<Link Source="10286:[23281..23301).11" Target="10286:[8761..8796).1" />
<Link Source="10286:[23281..23301).11" Target="10319:[15783..15865).74" />
<Link Source="10286:[23380..23684).71" Target="10319:[15783..15865).74" />
<Link Source="10286:[23380..23684).71" Target="10286:[8761..8796).1" />
<Link Source="10286:[23380..23684).71" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).21" Target="10319:[15783..15865).74" />
<Link Source="10286:[23893..24026).21" Target="10286:[8761..8796).1" />
<Link Source="10286:[23893..24026).21" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).21" Target="10286:[23161..23181).11" />
<Link Source="10286:[24545..24641).21" Target="10319:[15783..15865).74" />
<Link Source="10286:[24655..25349).11" Target="10286:[24545..24641).21" />
<Link Source="10286:[24655..25349).11" Target="10319:[15783..15865).74" />
<Link Source="10286:[26910..26935).11" Target="10319:[15783..15865).74" />
<Link Source="10286:[26952..26974).11" Target="10319:[15783..15865).74" />
<Link Source="10286:[27002..27022).11" Target="10286:[23281..23301).11" />
<Link Source="10286:[27002..27022).11" Target="10319:[15783..15865).74" />
<Link Source="10286:[27048..27088).41" Target="10319:[15783..15865).74" />
<Link Source="10286:[27048..27088).42" Target="10286:[26910..26935).11" />
<Link Source="10286:[27048..27088).42" Target="10286:[27048..27088).41" />
<Link Source="10286:[27048..27088).42" Target="10319:[15783..15865).74" />
<Link Source="10286:[27208..27236).21" Target="10319:[15783..15865).74" />
<Link Source="10286:[27250..27722).11" Target="10286:[8814..8851).1" />
<Link Source="10286:[27250..27722).11" Target="10319:[15783..15865).74" />
<Link Source="10286:[27738..27845).31" Target="10319:[15783..15865).74" />
<Link Source="10286:[27738..27845).32" Target="10286:[27208..27236).21" />
<Link Source="10286:[27738..27845).32" Target="10286:[27738..27845).31" />
<Link Source="10286:[27738..27845).32" Target="10319:[15783..15865).74" />
<Link Source="10286:[27861..27873).11" Target="10286:[8814..8851).1" />
<Link Source="10286:[27861..27873).11" Target="10319:[15783..15865).74" />
<Link Source="10286:[26281..26812).11" Target="10286:[27861..27873).11" />
<Link Source="10286:[26281..26812).11" Target="10319:[15783..15865).74" />
<Link Source="10286:[26450..26769).11" Target="10286:[24545..24641).21" />
<Link Source="10286:[26450..26769).11" Target="10286:[26281..26812).11" />
<Link Source="10319:[51817..51842).12" Target="10319:[13710..13735).12" />
<Link Source="10319:[51817..51842).12" Target="10319:[65593..65655).1" />
<Link Source="10319:[51844..51861).12" Target="10319:[65593..65655).1" />
<Link Source="10319:[51863..51909).12" Target="10319:[13737..13783).12" />
<Link Source="10319:[51863..51909).12" Target="10319:[65593..65655).1" />
<Link Source="10319:[51698..52285).12" Target="10319:[13647..14061).12" />
<Link Source="10319:[51698..52285).12" Target="10319:[65593..65655).1" />
<Link Source="10319:[51939..51953).12" Target="10319:[65593..65655).1" />
<Link Source="10287:[1680..1716).12" Target="10319:[13647..14061).12" />
<Link Source="10287:[1680..1716).12" Target="10319:[51939..51953).12" />
<Link Source="10287:[1683..1690).11" Target="10287:[1680..1716).12" />
<Link Source="10287:[1683..1690).11" Target="10319:[13647..14061).12" />
<Link Source="10287:[1683..1690).11" Target="10319:[51939..51953).12" />
<Link Source="10287:[1683..1716).23" Target="10287:[1683..1690).11" />
<Link Source="10287:[1683..1716).23" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).23" Target="10319:[51939..51953).12" />
<Link Source="10319:[51935..52244).23" Target="10287:[1683..1716).23" />
<Link Source="10319:[51935..52244).23" Target="10319:[65593..65655).1" />
<Link Source="10319:[65672..65683).1" Target="10319:[13647..14061).12" />
<Link Source="10319:[65672..65683).1" Target="10319:[64911..64971).1" />
<Link Source="10319:[64902..64973).6" Target="10319:[64756..64815).1" />
<Link Source="10319:[64902..64973).6" Target="10319:[65672..65683).1" />
<Link Source="10319:[64902..64973).6" Target="10286:[8814..8851).1" />
<Link Source="10319:[64902..64973).6" Target="10319:[64829..64988).1" />
<Link Source="10319:[65004..65037).1" Target="10319:[64756..64815).1" />
<Link Source="10319:[65004..65037).1" Target="10319:[64902..64973).6" />
<Link Source="10319:[65004..65037).1" Target="10319:[59880..59945).1" />
<Link Source="10319:[59736..60021).1" Target="10319:[59172..60037).1" />
<Link Source="10319:[69844..69864).1" Target="10319:[59723..60022).1" />
<Link Source="10319:[69844..69864).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[69879..69900).1" Target="10319:[59723..60022).2" />
<Link Source="10319:[69879..69900).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[69915..69966).1" Target="10319:[59723..60022).3" />
<Link Source="10319:[69915..69966).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[69981..70030).1" Target="10319:[65004..65037).1" />
<Link Source="10319:[69981..70030).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[70045..70084).1" Target="10319:[59723..60022).6" />
<Link Source="10319:[70045..70084).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[70099..70124).1" Target="10319:[59723..60022).5" />
<Link Source="10319:[70099..70124).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[69787..70686).1" Target="10319:[54356..60744).1" />
<Link Source="10319:[69787..70686).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[70150..70187).1" Target="10319:[69981..70030).1" />
<Link Source="10319:[70150..70187).1" Target="10319:[65004..65037).1" />
<Link Source="10319:[70150..70187).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[70201..70238).1" Target="10319:[69981..70030).1" />
<Link Source="10319:[70201..70238).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[70201..70238).2" Target="10319:[69844..69864).1" />
<Link Source="10319:[70201..70238).2" Target="10319:[70201..70238).1" />
<Link Source="10319:[70201..70238).2" Target="10319:[64902..64973).6" />
<Link Source="10319:[70201..70238).2" Target="10319:[65004..65037).1" />
<Link Source="10319:[70201..70238).2" Target="10319:[59736..60021).1" />
<Link Source="10319:[70258..70280).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[70990..71107).1" Target="10319:[69787..70686).1" />
<Link Source="10319:[70990..71107).1" Target="10319:[70258..70280).1" />
<Link Source="10319:[71026..71092).1" Target="10319:[70990..71107).1" />
<Link Source="10319:[71026..71092).1" Target="10319:[70201..70238).2" />
<Link Source="10319:[71026..71092).1" Target="10319:[70258..70280).1" />
<Link Source="10319:[71026..71092).2" Target="EXTERNAL" />
<Link Source="10319:[71026..71092).2" Target="10319:[70258..70280).1" />
<Link Source="10319:[71034..71091).1" Target="10319:[70258..70280).1" />
<Link Source="10298:[471..492).63" Target="10319:[71026..71092).1" />
<Link Source="10298:[471..492).63" Target="10319:[71034..71091).1" />
<Link Source="10298:[494..511).63" Target="10319:[71026..71092).2" />
<Link Source="10298:[494..511).63" Target="10319:[71034..71091).1" />
<Link Source="10319:[70254..70647).1" Target="10298:[471..492).63" />
<Link Source="10319:[70254..70647).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[70663..70675).1" Target="10319:[70201..70238).2" />
<Link Source="10319:[70663..70675).1" Target="10319:[59736..60021).1" />
<Link Source="10319:[60053..60600).1" Target="10319:[50313..50328).3" />
<Link Source="10319:[60053..60600).1" Target="10319:[20752..20877).1" />
<Link Source="10319:[60057..60088).1" Target="10319:[20752..20877).1" />
<Link Source="10353:[7504..7530).6" Target="10319:[60053..60600).1" />
<Link Source="10353:[7504..7530).6" Target="10319:[60057..60088).1" />
<Link Source="10319:[60616..60733).1" Target="10319:[54444..54466).1" />
<Link Source="10319:[60616..60733).1" Target="10319:[70201..70238).2" />
<Link Source="10319:[60616..60733).1" Target="10319:[20752..20877).1" />
<Link Source="10319:[60650..60719).1" Target="10319:[20752..20877).1" />
<Link Source="10286:[10010..10027).13" Target="10319:[60616..60733).1" />
<Link Source="10286:[10010..10027).13" Target="10319:[60650..60719).1" />
<Link Source="10286:[9966..10197).13" Target="10319:[54356..60744).1" />
<Link Source="10286:[9966..10197).13" Target="10319:[60650..60719).1" />
<Link Source="10319:[60616..60733).4" Target="10319:[70663..70675).1" />
<Link Source="10319:[60616..60733).4" Target="10319:[20752..20877).1" />
<Link Source="10319:[60616..60733).5" Target="10319:[20752..20877).1" />
<Link Source="10319:[60616..60733).7" Target="10286:[10010..10027).13" />
<Link Source="10319:[60616..60733).7" Target="10319:[60616..60733).4" />
<Link Source="10319:[60616..60733).7" Target="10319:[60616..60733).5" />
<Link Source="10319:[60616..60733).7" Target="10319:[20752..20877).1" />
<Link Source="10287:[791..833).23" Target="10319:[60616..60733).7" />
<Link Source="10287:[791..833).23" Target="10319:[20752..20877).1" />
<Link Source="10319:[20745..20878).8" Target="10319:[20752..20877).1" />
<Link Source="10319:[20745..20878).8" Target="10319:[73753..73778).8" />
<Link Source="10286:[21563..21583).12" Target="10319:[60616..60733).7" />
<Link Source="10286:[22110..22130).12" Target="10286:[21563..21583).12" />
<Link Source="10286:[22110..22130).12" Target="10319:[60616..60733).7" />
<Link Source="10286:[15616..15690).56" Target="10319:[60616..60733).7" />
<Link Source="10286:[15616..15690).57" Target="10319:[60616..60733).7" />
<Link Source="10286:[15616..15690).57" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).12" Target="10319:[60616..60733).7" />
<Link Source="10286:[23161..23181).12" Target="10286:[22110..22130).12" />
<Link Source="10286:[23161..23181).12" Target="10319:[60616..60733).7" />
<Link Source="10286:[23281..23301).12" Target="10319:[60616..60733).7" />
<Link Source="10286:[23380..23684).78" Target="10319:[60616..60733).7" />
<Link Source="10286:[23380..23684).78" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).23" Target="10319:[60616..60733).7" />
<Link Source="10286:[23893..24026).23" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).23" Target="10286:[23161..23181).12" />
<Link Source="10286:[24545..24641).23" Target="10319:[60616..60733).7" />
<Link Source="10286:[24655..25349).12" Target="10286:[24545..24641).23" />
<Link Source="10286:[24655..25349).12" Target="10319:[60616..60733).7" />
<Link Source="10286:[26910..26935).12" Target="10319:[60616..60733).7" />
<Link Source="10286:[26952..26974).12" Target="10319:[60616..60733).7" />
<Link Source="10286:[27002..27022).12" Target="10286:[23281..23301).12" />
<Link Source="10286:[27002..27022).12" Target="10319:[60616..60733).7" />
<Link Source="10286:[27048..27088).45" Target="10319:[60616..60733).7" />
<Link Source="10286:[27048..27088).46" Target="10286:[26910..26935).12" />
<Link Source="10286:[27048..27088).46" Target="10286:[27048..27088).45" />
<Link Source="10286:[27048..27088).46" Target="10319:[60616..60733).7" />
<Link Source="10286:[27208..27236).23" Target="10319:[60616..60733).7" />
<Link Source="10286:[27250..27722).12" Target="10319:[60616..60733).7" />
<Link Source="10286:[27738..27845).34" Target="10319:[60616..60733).7" />
<Link Source="10286:[27738..27845).35" Target="10286:[27208..27236).23" />
<Link Source="10286:[27738..27845).35" Target="10286:[27738..27845).34" />
<Link Source="10286:[27738..27845).35" Target="10319:[60616..60733).7" />
<Link Source="10286:[27861..27873).12" Target="10319:[60616..60733).7" />
<Link Source="10286:[26281..26812).12" Target="10286:[27861..27873).12" />
<Link Source="10286:[26281..26812).12" Target="10319:[60616..60733).7" />
<Link Source="10286:[26450..26769).12" Target="10286:[24545..24641).23" />
<Link Source="10286:[26450..26769).12" Target="10286:[26281..26812).12" />
<Link Source="10287:[1680..1716).13" Target="10319:[60616..60733).7" />
<Link Source="10287:[1680..1716).13" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1690).12" Target="10287:[1680..1716).13" />
<Link Source="10287:[1683..1690).12" Target="10319:[20752..20877).1" />
<Link Source="10287:[1683..1690).12" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1716).25" Target="10287:[1683..1690).12" />
<Link Source="10287:[1683..1716).25" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).25" Target="10319:[51939..51953).2" />
<Link Source="10319:[51935..52244).25" Target="10287:[1683..1716).25" />
<Link Source="10319:[51935..52244).25" Target="10319:[13969..14029).1" />
<Link Source="10313:[1494..2257).6" Target="10313:[1230..1280).1" />
<Link Source="10313:[1494..2257).6" Target="10319:[60616..60733).7" />
<Link Source="10313:[1494..2257).6" Target="25002:[4395..4432).1" />
<Link Source="10313:[2563..2675).16" Target="10319:[60616..60733).7" />
<Link Source="10313:[2699..3019).21" Target="10319:[60616..60733).7" />
<Link Source="10313:[2699..3019).22" Target="10313:[1442..1480).1" />
<Link Source="10313:[2699..3019).22" Target="10313:[2699..3019).21" />
<Link Source="10313:[2699..3019).22" Target="10319:[60616..60733).7" />
<Link Source="10313:[3378..3434).17" Target="10313:[1391..1416).1" />
<Link Source="10313:[3378..3434).17" Target="10319:[60616..60733).7" />
<Link Source="10313:[735..760).6" Target="10313:[3378..3434).17" />
<Link Source="10313:[735..760).6" Target="10319:[60616..60733).7" />
<Link Source="10313:[840..920).31" Target="10319:[60616..60733).7" />
<Link Source="10313:[840..920).34" Target="10313:[735..760).6" />
<Link Source="10313:[840..920).34" Target="10319:[60616..60733).7" />
<Link Source="10313:[3733..3747).6" Target="10313:[840..920).31" />
<Link Source="10313:[3733..3747).6" Target="10319:[60616..60733).7" />
<Link Source="10313:[3749..3766).6" Target="10313:[840..920).31" />
<Link Source="10313:[3749..3766).6" Target="10319:[60616..60733).7" />
<Link Source="10313:[3768..3779).6" Target="10313:[840..920).31" />
<Link Source="10313:[3768..3779).6" Target="10319:[60616..60733).7" />
<Link Source="10313:[3781..3806).6" Target="10313:[840..920).34" />
<Link Source="10313:[3781..3806).6" Target="10319:[60616..60733).7" />
<Link Source="10313:[3832..3924).16" Target="10313:[3768..3779).6" />
<Link Source="10313:[3832..3924).16" Target="10319:[60616..60733).7" />
<Link Source="10313:[4210..4315).6" Target="10319:[60616..60733).7" />
<Link Source="10313:[4335..4374).6" Target="10319:[60616..60733).7" />
<Link Source="10313:[4392..4543).21" Target="10313:[4335..4374).6" />
<Link Source="10313:[4392..4543).21" Target="10319:[60616..60733).7" />
<Link Source="10313:[4392..4543).22" Target="10319:[60616..60733).7" />
<Link Source="10313:[4698..4727).6" Target="10319:[60616..60733).7" />
<Link Source="10286:[8381..8389).6" Target="10319:[60616..60733).7" />
<Link Source="10286:[8381..8389).6" Target="10313:[4698..4727).6" />
<Link Source="10286:[8384..8389).11" Target="10313:[4698..4727).6" />
<Link Source="10313:[4676..4801).16" Target="10286:[8384..8389).11" />
<Link Source="10313:[4676..4801).16" Target="10319:[60616..60733).7" />
<Link Source="10313:[5488..5662).26" Target="10319:[60616..60733).7" />
<Link Source="10313:[5488..5662).26" Target="EXTERNAL" />
<Link Source="10313:[5488..5662).27" Target="10319:[60616..60733).7" />
<Link Source="10313:[4821..5028).11" Target="10313:[5488..5662).26" />
<Link Source="10313:[4821..5028).11" Target="10319:[60616..60733).7" />
<Link Source="10313:[4996..5009).11" Target="10313:[4821..5028).11" />
<Link Source="10313:[840..920).35" Target="10313:[4996..5009).11" />
<Link Source="10313:[840..920).35" Target="10319:[60616..60733).7" />
<Link Source="10313:[3537..3552).6" Target="10319:[60616..60733).7" />
<Link Source="10313:[3537..3552).6" Target="25002:[4395..4432).1" />
<Link Source="10319:[73736..73751).11" Target="10319:[60616..60733).7" />
<Link Source="10319:[73882..73975).61" Target="10319:[60616..60733).7" />
<Link Source="10319:[76360..76385).14" Target="10319:[60616..60733).7" />
<Link Source="10319:[76387..76402).14" Target="10319:[73736..73751).11" />
<Link Source="10319:[76387..76402).14" Target="10319:[60616..60733).7" />
<Link Source="10319:[76494..76582).53" Target="10319:[60616..60733).7" />
<Link Source="10287:[791..833).25" Target="10319:[60616..60733).7" />
<Link Source="10286:[15616..15690).61" Target="10286:[21563..21583).12" />
<Link Source="10286:[15616..15690).62" Target="10286:[21563..21583).12" />
<Link Source="10286:[15616..15690).62" Target="10319:[60616..60733).7" />
<Link Source="10286:[15616..15690).62" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).13" Target="10286:[21563..21583).12" />
<Link Source="10286:[23161..23181).13" Target="10286:[22110..22130).12" />
<Link Source="10286:[23161..23181).13" Target="10286:[21563..21583).12" />
<Link Source="10286:[23281..23301).13" Target="10286:[22110..22130).12" />
<Link Source="10286:[23281..23301).13" Target="10286:[21563..21583).12" />
<Link Source="10286:[23380..23684).85" Target="10286:[21563..21583).12" />
<Link Source="10286:[23380..23684).85" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).25" Target="10286:[21563..21583).12" />
<Link Source="10286:[23893..24026).25" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).25" Target="10286:[23161..23181).13" />
<Link Source="10286:[24545..24641).25" Target="10286:[21563..21583).12" />
<Link Source="10286:[24655..25349).13" Target="10286:[24545..24641).25" />
<Link Source="10286:[24655..25349).13" Target="10286:[21563..21583).12" />
<Link Source="10286:[26910..26935).13" Target="10286:[21563..21583).12" />
<Link Source="10286:[26952..26974).13" Target="10286:[21563..21583).12" />
<Link Source="10286:[27002..27022).13" Target="10286:[23281..23301).13" />
<Link Source="10286:[27002..27022).13" Target="10286:[21563..21583).12" />
<Link Source="10286:[27048..27088).49" Target="10286:[21563..21583).12" />
<Link Source="10286:[27048..27088).50" Target="10286:[26910..26935).13" />
<Link Source="10286:[27048..27088).50" Target="10286:[27048..27088).49" />
<Link Source="10286:[27048..27088).50" Target="10286:[21563..21583).12" />
<Link Source="10286:[27208..27236).25" Target="10286:[21563..21583).12" />
<Link Source="10286:[27250..27722).13" Target="10286:[21563..21583).12" />
<Link Source="10286:[27738..27845).37" Target="10286:[21563..21583).12" />
<Link Source="10286:[27738..27845).38" Target="10286:[27208..27236).25" />
<Link Source="10286:[27738..27845).38" Target="10286:[27738..27845).37" />
<Link Source="10286:[27738..27845).38" Target="10286:[21563..21583).12" />
<Link Source="10286:[27861..27873).13" Target="10286:[21563..21583).12" />
<Link Source="10286:[26281..26812).13" Target="10286:[27861..27873).13" />
<Link Source="10286:[26281..26812).13" Target="10286:[21563..21583).12" />
<Link Source="10286:[26450..26769).13" Target="10286:[24545..24641).25" />
<Link Source="10286:[26450..26769).13" Target="10286:[26281..26812).13" />
<Link Source="10287:[1683..1690).13" Target="10287:[1680..1716).13" />
<Link Source="10287:[1683..1690).13" Target="10319:[60616..60733).7" />
<Link Source="10287:[1683..1690).13" Target="10319:[51939..51953).2" />
<Link Source="10287:[1683..1716).27" Target="10287:[1683..1690).13" />
<Link Source="10287:[1683..1716).27" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).27" Target="10319:[51939..51953).2" />
<Link Source="10319:[51935..52244).27" Target="10287:[1683..1716).27" />
<Link Source="10319:[51935..52244).27" Target="10319:[13969..14029).1" />
<Link Source="10845:[522..547).2" Target="25002:[4395..4432).3" />
<Link Source="10845:[522..547).2" Target="25002:[4395..4432).1" />
<Link Source="10845:[549..580).2" Target="25002:[4395..4432).3" />
<Link Source="10845:[549..580).2" Target="25002:[4395..4432).1" />
<Link Source="10845:[499..728).3" Target="25002:[4395..4432).3" />
<Link Source="10845:[499..728).3" Target="25002:[4395..4432).1" />
<Link Source="10845:[602..612).2" Target="10845:[522..547).2" />
<Link Source="10845:[602..612).2" Target="25002:[4395..4432).1" />
<Link Source="10845:[637..638).3" Target="25002:[4395..4432).1" />
<Link Source="10845:[660..678).2" Target="10845:[549..580).2" />
<Link Source="10845:[660..678).2" Target="25002:[4395..4432).1" />
<Link Source="10845:[701..705).3" Target="25002:[4395..4432).1" />
<Link Source="10845:[499..728).4" Target="25002:[4395..4432).1" />
<Link Source="10845:[764..789).2" Target="10845:[602..612).2" />
<Link Source="10845:[764..789).2" Target="10845:[499..728).4" />
<Link Source="10845:[791..816).2" Target="10845:[637..638).3" />
<Link Source="10845:[791..816).2" Target="10845:[499..728).4" />
<Link Source="10845:[818..841).2" Target="10845:[660..678).2" />
<Link Source="10845:[818..841).2" Target="10845:[499..728).4" />
<Link Source="10845:[843..878).2" Target="10845:[701..705).3" />
<Link Source="10845:[843..878).2" Target="10845:[499..728).4" />
<Link Source="10845:[740..997).3" Target="10845:[499..728).3" />
<Link Source="10845:[740..997).3" Target="10845:[499..728).4" />
<Link Source="10845:[900..910).2" Target="10845:[764..789).2" />
<Link Source="10845:[900..910).2" Target="10845:[499..728).4" />
<Link Source="10845:[912..933).2" Target="10845:[791..816).2" />
<Link Source="10845:[912..933).2" Target="10845:[499..728).4" />
<Link Source="10845:[935..953).2" Target="10845:[818..841).2" />
<Link Source="10845:[935..953).2" Target="10845:[499..728).4" />
<Link Source="10845:[955..974).2" Target="10845:[843..878).2" />
<Link Source="10845:[955..974).2" Target="10845:[499..728).4" />
<Link Source="10845:[740..997).4" Target="10845:[499..728).4" />
<Link Source="10843:[1173..1198).2" Target="10845:[900..910).2" />
<Link Source="10843:[1173..1198).2" Target="10845:[740..997).4" />
<Link Source="10843:[1200..1225).2" Target="10845:[912..933).2" />
<Link Source="10843:[1200..1225).2" Target="10845:[740..997).4" />
<Link Source="10843:[1227..1250).2" Target="10845:[935..953).2" />
<Link Source="10843:[1227..1250).2" Target="10845:[740..997).4" />
<Link Source="10843:[1252..1287).2" Target="10845:[955..974).2" />
<Link Source="10843:[1252..1287).2" Target="10845:[740..997).4" />
<Link Source="10843:[1147..1833).2" Target="10845:[740..997).3" />
<Link Source="10843:[1147..1833).2" Target="10845:[740..997).4" />
<Link Source="10843:[734..744).2" Target="10843:[1147..1833).2" />
<Link Source="10843:[734..744).2" Target="10845:[740..997).4" />
<Link Source="10843:[778..799).2" Target="10843:[1147..1833).2" />
<Link Source="10843:[778..799).2" Target="10845:[740..997).4" />
<Link Source="10843:[835..853).2" Target="10843:[1147..1833).2" />
<Link Source="10843:[835..853).2" Target="10845:[740..997).4" />
<Link Source="10843:[1113..1134).2" Target="10843:[1147..1833).2" />
<Link Source="10843:[1113..1134).2" Target="10845:[740..997).4" />
<Link Source="10843:[1313..1354).5" Target="10845:[740..997).4" />
<Link Source="10843:[1313..1354).6" Target="10843:[1173..1198).2" />
<Link Source="10843:[1313..1354).6" Target="10843:[1313..1354).5" />
<Link Source="10843:[1313..1354).6" Target="10845:[740..997).4" />
<Link Source="10843:[1368..1474).6" Target="10845:[740..997).4" />
<Link Source="10843:[1368..1474).7" Target="10843:[1252..1287).2" />
<Link Source="10843:[1368..1474).7" Target="10843:[1368..1474).6" />
<Link Source="10843:[1368..1474).7" Target="10845:[740..997).4" />
<Link Source="10843:[1488..1600).6" Target="10845:[740..997).4" />
<Link Source="10843:[1488..1600).7" Target="10843:[1252..1287).2" />
<Link Source="10843:[1488..1600).7" Target="10843:[1488..1600).6" />
<Link Source="10843:[1488..1600).7" Target="10845:[740..997).4" />
<Link Source="10843:[1616..1631).2" Target="10843:[1173..1198).2" />
<Link Source="10843:[1616..1631).2" Target="10843:[1147..1833).2" />
<Link Source="10843:[1616..1631).2" Target="10845:[740..997).4" />
<Link Source="10843:[1659..1685).2" Target="10843:[1200..1225).2" />
<Link Source="10843:[1659..1685).2" Target="10843:[1147..1833).2" />
<Link Source="10843:[1659..1685).2" Target="10845:[740..997).4" />
<Link Source="10843:[1724..1742).2" Target="10843:[1227..1250).2" />
<Link Source="10843:[1724..1742).2" Target="10843:[1147..1833).2" />
<Link Source="10843:[1724..1742).2" Target="10845:[740..997).4" />
<Link Source="10843:[1778..1799).2" Target="10843:[1252..1287).2" />
<Link Source="10843:[1778..1799).2" Target="10843:[1147..1833).2" />
<Link Source="10843:[1778..1799).2" Target="10845:[740..997).4" />
<Link Source="25002:[4395..4432).110" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).110" Target="10286:[21563..21583).12" />
<Link Source="25002:[4395..4432).110" Target="10843:[1616..1631).2" />
<Link Source="25002:[4395..4432).110" Target="10843:[1659..1685).2" />
<Link Source="25002:[4395..4432).110" Target="10843:[1724..1742).2" />
<Link Source="25002:[4395..4432).110" Target="10843:[1778..1799).2" />
<Link Source="25002:[4395..4432).110" Target="28001:[21850..21895).1" />
<Link Source="25002:[4446..4475).1" Target="25002:[4395..4432).110" />
<Link Source="25002:[4446..4475).1" Target="28001:[21850..21895).1" />
<Link Source="25002:[4446..4475).2" Target="25002:[4284..4323).1" />
<Link Source="25002:[4446..4475).2" Target="28001:[21850..21895).1" />
<Link Source="25002:[4446..4474).1" Target="28001:[21850..21895).1" />
<Link Source="25002:[2296..2334).1" Target="25002:[4446..4475).1" />
<Link Source="25002:[2296..2334).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2336..2375).1" Target="25002:[4446..4475).2" />
<Link Source="25002:[2336..2375).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2451).1" Target="25002:[2296..2334).1" />
<Link Source="25002:[2401..2451).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2451).2" Target="25002:[2336..2375).1" />
<Link Source="25002:[2401..2451).2" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2450).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[1554..1589).1" Target="25002:[2401..2451).1" />
<Link Source="25002:[1554..1589).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1591..1630).1" Target="25002:[2401..2451).2" />
<Link Source="25002:[1591..1630).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).1" Target="25002:[1554..1589).1" />
<Link Source="25002:[1656..1703).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).2" Target="25002:[1591..1630).1" />
<Link Source="25002:[1656..1703).2" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).3" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1702).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[2501..2531).1" Target="25002:[1656..1703).1" />
<Link Source="25002:[2501..2531).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2533..2565).1" Target="25002:[1656..1703).2" />
<Link Source="25002:[2533..2565).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2567..2585).1" Target="25002:[1656..1703).3" />
<Link Source="25002:[2567..2585).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2611..2759).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[2533..2565).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[2611..2759).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[2775..2867).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2881..2977).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[2881..2977).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).1" Target="25002:[2501..2531).1" />
<Link Source="25002:[2991..3166).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[2567..2585).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[2775..2867).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[2881..2977).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).4" Target="25002:[2991..3166).1" />
<Link Source="25002:[2991..3166).4" Target="25002:[2991..3166).2" />
<Link Source="25002:[2991..3166).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[3341..3730).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[3341..3730).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[3840..3992).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[3840..3992).2" Target="25002:[2991..3166).4" />
<Link Source="25002:[3840..3992).2" Target="25002:[3840..3992).1" />
<Link Source="25002:[3840..3992).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[4102..4181).1" Target="25002:[1656..1702).1" />
<Link Source="25003:[740..750).1" Target="25003:[747..750).1" />
<Link Source="25003:[808..818).1" Target="25003:[814..818).1" />
<Link Source="25002:[4102..4181).3" Target="25002:[2533..2565).1" />
<Link Source="25002:[4102..4181).3" Target="25002:[1656..1702).1" />
<Link Source="25002:[4102..4181).4" Target="25002:[2501..2531).1" />
<Link Source="25002:[4102..4181).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[4126..4179).1" Target="25002:[1656..1702).1" />
<Link Source="25003:[17577..17609).1" Target="25002:[4102..4181).3" />
<Link Source="25003:[17577..17609).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17611..17641).1" Target="25002:[4102..4181).4" />
<Link Source="25003:[17611..17641).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17667..17688).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17702..17728).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).1" Target="25003:[17611..17641).1" />
<Link Source="25003:[17742..17827).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).2" Target="25003:[17742..17827).1" />
<Link Source="25003:[17742..17827).2" Target="25002:[2991..3166).4" />
<Link Source="25003:[17742..17827).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[17757..17803).1" Target="25003:[17742..17827).2" />
<Link Source="25003:[17757..17803).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).4" Target="25003:[17702..17728).1" />
<Link Source="25003:[17742..17827).4" Target="25003:[17757..17803).1" />
<Link Source="25003:[17841..17904).1" Target="25003:[17742..17827).4" />
<Link Source="25003:[17841..17904).1" Target="25003:[17667..17688).1" />
<Link Source="25003:[17841..17904).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17918..17965).1" Target="25003:[17742..17827).4" />
<Link Source="25003:[17918..17965).1" Target="25003:[17667..17688).1" />
<Link Source="25003:[17918..17965).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17936..17956).1" Target="25003:[17918..17965).1" />
<Link Source="25003:[17936..17956).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[17979..18071).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18085..18181).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18197..18490).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18197..18490).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18201..18226).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21605..21640).1" Target="25003:[18197..18490).1" />
<Link Source="25003:[21605..21640).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[22962..23812).1" Target="25003:[23096..23122).1" />
<Link Source="25003:[23085..23122).1" Target="25003:[23096..23122).1" />
<Link Source="25003:[21666..21711).1" Target="25003:[23085..23122).1" />
<Link Source="25003:[21666..21711).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[21725..21759).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[21773..22187).1" Target="25003:[21605..21640).1" />
<Link Source="25003:[21773..22187).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[22201..22213).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[18197..18490).2" Target="25003:[22201..22213).1" />
<Link Source="25003:[18197..18490).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18453..18475).1" Target="25003:[17611..17641).1" />
<Link Source="25003:[18453..18475).1" Target="25003:[18197..18490).2" />
<Link Source="25003:[18462..18474).1" Target="25003:[18197..18490).2" />
<Link Source="25003:[21372..21407).1" Target="25003:[18453..18475).1" />
<Link Source="25003:[21372..21407).1" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).1" Target="25003:[21372..21407).1" />
<Link Source="25003:[21433..21546).1" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).2" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).4" Target="25003:[23085..23122).1" />
<Link Source="25003:[21433..21546).4" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).5" Target="25003:[21433..21546).1" />
<Link Source="25003:[21433..21546).5" Target="25003:[21433..21546).2" />
<Link Source="25003:[21433..21546).5" Target="25003:[21433..21546).4" />
<Link Source="25003:[21433..21546).5" Target="25002:[2991..3166).4" />
<Link Source="25003:[21433..21546).5" Target="25003:[18462..18474).1" />
<Link Source="25003:[18506..18543).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18557..18581).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[18557..18581).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18658..18664).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18678..18713).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18678..18713).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18557..18581).1" />
<Link Source="25003:[18678..18713).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[18727..18781).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18795..18929).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18795..18929).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18943..18992).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[18943..18992).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18943..18992).2" Target="25003:[18727..18781).1" />
<Link Source="25003:[18943..18992).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18943..18991).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[22599..22615).1" Target="25003:[18943..18992).1" />
<Link Source="25003:[22599..22615).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22617..22643).1" Target="25003:[18943..18992).2" />
<Link Source="25003:[22617..22643).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22669..22689).1" Target="25003:[22617..22643).1" />
<Link Source="25003:[22669..22689).1" Target="25003:[18727..18781).1" />
<Link Source="25003:[22669..22689).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22703..22939).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[22703..22939).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[22669..22689).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[18943..18991).1" />
<Link Source="25003:[18943..18992).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[19106..19139).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[19106..19139).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[18678..18713).3" />
<Link Source="25003:[19106..19139).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[19153..19205).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19219..19250).1" Target="25003:[21433..21546).5" />
<Link Source="25003:[19219..19250).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19264..20938).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19264..20938).3" Target="25003:[19219..19250).1" />
<Link Source="25003:[19264..20938).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[20952..21034).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[20952..21034).2" Target="25003:[19264..20938).1" />
<Link Source="25003:[20952..21034).2" Target="25003:[20952..21034).1" />
<Link Source="25003:[20952..21034).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[21050..21081).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[21050..21081).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[19106..19139).3" />
<Link Source="25003:[21050..21081).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).1" Target="25003:[18727..18781).1" />
<Link Source="25003:[21095..21192).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).2" Target="25003:[19153..19205).1" />
<Link Source="25003:[21095..21192).2" Target="25002:[4126..4179).1" />
<Link Source="25012:[3121..3141).4" Target="25012:[3129..3133).1" />
<Link Source="25012:[3121..3141).4" Target="25012:[3121..3141).1" />
<Link Source="25012:[3121..3141).5" Target="25012:[3135..3139).1" />
<Link Source="25012:[3121..3141).5" Target="25012:[3121..3141).1" />
<Link Source="25012:[3102..3141).1" Target="25012:[3121..3141).1" />
<Link Source="25003:[21095..21192).3" Target="EXTERNAL" />
<Link Source="25003:[21095..21192).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[21113..21190).1" Target="25002:[4126..4179).1" />
<Link Source="25012:[2473..2496).1" Target="25003:[21095..21192).1" />
<Link Source="25012:[2473..2496).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2498..2519).1" Target="25003:[21095..21192).2" />
<Link Source="25012:[2498..2519).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2521..2537).1" Target="25003:[21095..21192).3" />
<Link Source="25012:[2521..2537).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2539..2575).1" Target="25003:[21095..21192).4" />
<Link Source="25012:[2539..2575).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2577..2608).1" Target="25003:[21095..21192).4" />
<Link Source="25012:[2577..2608).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2634..2703).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2634..2703).2" Target="25012:[2539..2575).1" />
<Link Source="25012:[2634..2703).2" Target="25012:[2634..2703).1" />
<Link Source="25012:[2634..2703).2" Target="25003:[21113..21190).1" />
<Link Source="25012:[2644..2662).1" Target="25012:[2634..2703).2" />
<Link Source="25012:[2644..2662).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[1074..1101).1" Target="EXTERNAL" />
<Link Source="25012:[1194..1223).1" Target="25012:[1074..1101).1" />
<Link Source="25012:[1194..1223).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1183..1293).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[4217..4231).1" Target="25012:[4230..4231).1" />
<Link Source="25012:[4264..4278).1" Target="25012:[4277..4278).1" />
<Link Source="25012:[4311..4325).1" Target="25012:[4324..4325).1" />
<Link Source="25012:[3676..10647).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1157..1166).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1157..1166).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1194..1223).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1053..1102).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[2717..2783).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2717..2783).3" Target="25012:[2717..2783).1" />
<Link Source="25012:[2717..2783).3" Target="25012:[2577..2608).1" />
<Link Source="25012:[2717..2783).3" Target="25003:[21113..21190).1" />
<Link Source="25012:[2799..2869).1" Target="25012:[2473..2496).1" />
<Link Source="25012:[2799..2869).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2883..2947).1" Target="25012:[2498..2519).1" />
<Link Source="25012:[2883..2947).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).1" Target="25012:[2521..2537).1" />
<Link Source="25012:[2963..3048).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).2" Target="25012:[2799..2869).1" />
<Link Source="25012:[2963..3048).2" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).3" Target="25012:[2883..2947).1" />
<Link Source="25012:[2963..3048).3" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).4" Target="25012:[2717..2783).3" />
<Link Source="25012:[2963..3048).4" Target="25003:[21113..21190).1" />
<Link Source="25012:[2993..3046).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[1574..1592).1" Target="25012:[2963..3048).2" />
<Link Source="25012:[1574..1592).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1594..1612).1" Target="25012:[2963..3048).3" />
<Link Source="25012:[1594..1612).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1614..1638).1" Target="25012:[2963..3048).4" />
<Link Source="25012:[1614..1638).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1533..2415).1" Target="25012:[2644..2662).1" />
<Link Source="25012:[1533..2415).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).1" Target="25012:[1574..1592).1" />
<Link Source="25012:[1672..2400).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[1574..1592).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[2799..2869).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).3" Target="25012:[1594..1612).1" />
<Link Source="25012:[1672..2400).3" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[1594..1612).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[2883..2947).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[2993..3046).1" />
<Link Source="25012:[1693..1757).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[5394..5413).1" Target="25012:[1672..2400).1" />
<Link Source="25012:[5394..5413).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5415..5426).1" Target="25012:[1672..2400).2" />
<Link Source="25012:[5415..5426).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5428..5447).1" Target="25012:[1672..2400).3" />
<Link Source="25012:[5428..5447).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5449..5460).1" Target="25012:[1672..2400).4" />
<Link Source="25012:[5449..5460).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5357..6686).1" Target="25012:[1533..2415).1" />
<Link Source="25012:[5357..6686).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).1" Target="25012:[5394..5413).1" />
<Link Source="25012:[5494..5563).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).2" Target="25012:[5415..5426).1" />
<Link Source="25012:[5494..5563).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).3" Target="25012:[5428..5447).1" />
<Link Source="25012:[5494..5563).3" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).4" Target="25012:[5449..5460).1" />
<Link Source="25012:[5494..5563).4" Target="25012:[1693..1757).1" />
<Link Source="25012:[5505..5562).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[9402..9421).1" Target="25012:[5494..5563).1" />
<Link Source="25012:[9402..9421).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9423..9434).1" Target="25012:[5494..5563).2" />
<Link Source="25012:[9423..9434).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9436..9455).1" Target="25012:[5494..5563).3" />
<Link Source="25012:[9436..9455).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9457..9468).1" Target="25012:[5494..5563).4" />
<Link Source="25012:[9457..9468).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9369..10636).1" Target="25012:[5357..6686).1" />
<Link Source="25012:[9369..10636).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9502..9523).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[9423..9434).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[9502..9523).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[5505..5562).1" />
<Link Source="25012:[9541..9562).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[9457..9468).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[9541..9562).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[5505..5562).1" />
<Link Source="25012:[9740..9764).1" Target="25012:[9502..9523).2" />
<Link Source="25012:[9740..9764).1" Target="25012:[9541..9562).2" />
<Link Source="25012:[9740..9764).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9784..9796).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[9784..9796).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9814..9943).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[9814..9943).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[9423..9434).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[9963..10092).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[9963..10092).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[9457..9468).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[10112..10592).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[10112..10592).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[9423..9434).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[10612..10621).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[10612..10621).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[5581..5597).1" Target="25012:[5415..5426).1" />
<Link Source="25012:[5581..5597).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5615..5631).1" Target="25012:[5449..5460).1" />
<Link Source="25012:[5615..5631).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[5581..5597).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[5651..6341).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[6361..6506).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[6361..6506).2" Target="25012:[5581..5597).1" />
<Link Source="25012:[6361..6506).2" Target="25012:[6361..6506).1" />
<Link Source="25012:[6361..6506).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[6526..6671).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[6526..6671).2" Target="25012:[5615..5631).1" />
<Link Source="25012:[6526..6671).2" Target="25012:[6526..6671).1" />
<Link Source="25012:[6526..6671).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[5357..6686).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[1672..2400).5" Target="25012:[5357..6686).2" />
<Link Source="25012:[1672..2400).5" Target="25012:[2993..3046).1" />
<Link Source="25012:[1533..2415).2" Target="25012:[2993..3046).1" />
<Link Source="25012:[2963..3048).5" Target="25012:[1533..2415).2" />
<Link Source="25012:[2963..3048).5" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).7" Target="25012:[2963..3048).1" />
<Link Source="25012:[2963..3048).7" Target="25012:[2963..3048).5" />
<Link Source="25012:[2963..3048).7" Target="25003:[21113..21190).1" />
<Link Source="25003:[21095..21192).10" Target="25003:[18506..18543).1" />
<Link Source="25003:[21095..21192).10" Target="25012:[2963..3048).7" />
<Link Source="25003:[21095..21192).10" Target="25003:[21050..21081).3" />
<Link Source="25003:[21095..21192).10" Target="25002:[4126..4179).1" />
<Link Source="25003:[21208..21226).1" Target="25003:[19153..19205).1" />
<Link Source="25003:[21208..21226).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21240..21260).1" Target="25003:[18727..18781).1" />
<Link Source="25003:[21240..21260).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21276..21305).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[21276..21305).1" Target="25003:[21095..21192).10" />
<Link Source="25003:[21276..21305).1" Target="25002:[4126..4179).1" />
<Link Source="25002:[4102..4181).5" Target="25003:[21276..21305).1" />
<Link Source="25002:[4102..4181).5" Target="25002:[1656..1702).1" />
<Link Source="25002:[2401..2451).3" Target="25002:[4446..4474).1" />
<Link Source="25002:[4446..4475).3" Target="28001:[21850..21895).1" />
<Link Source="25002:[4489..4523).1" Target="25002:[4263..4282).1" />
<Link Source="25002:[4489..4523).1" Target="28001:[21850..21895).1" />
<Link Source="25002:[4489..4523).2" Target="25002:[4395..4432).110" />
<Link Source="25002:[4489..4523).2" Target="28001:[21850..21895).1" />
<Link Source="25002:[4489..4522).1" Target="28001:[21850..21895).1" />
<Link Source="25002:[4637..4651).1" Target="25002:[4489..4523).1" />
<Link Source="25002:[4637..4651).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[4653..4691).1" Target="25002:[4489..4523).2" />
<Link Source="25002:[4653..4691).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[4750..5836).1" Target="25002:[4653..4691).1" />
<Link Source="25002:[4750..5836).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[4489..4523).3" Target="28001:[21850..21895).1" />
<Link Source="25002:[4539..4548).1" Target="25002:[4263..4282).1" />
<Link Source="25002:[4539..4548).1" Target="28001:[21850..21895).1" />
</Links>
</DirectedGraph>
