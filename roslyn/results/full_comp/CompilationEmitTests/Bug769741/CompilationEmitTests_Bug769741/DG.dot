digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 976707"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 976708"];
3 [label="param CompilationEmitTests(this) 976709"];
4 [label="param EmitMetadataTestBase(this) 976710"];
5 [label="param CSharpTestBase(this) 976711"];
6 [label="param CommonTestBase(this) 976712"];
7 [label="param TestBase(this) 976713"];
8 [label="_temp 976714"];
9 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 976715"];
10 [label="param Bug769741(this) 976716"];
11 [label="var comp = CreateEmptyCompilation('', new[] { TestReferences.SymbolsTests.netModule.x64COFF }, options: TestOptions.DebugDll); 976717"];
12 [label="new[] { TestReferences.SymbolsTests.netModule.x64COFF } 976718"];
13 [label="new[] { TestReferences.SymbolsTests.netModule.x64COFF } 976719"];
14 [label="param operator(string source) 976720"];
15 [label="source 976721"];
16 [label="new CSharpTestSource(source) 976722"];
17 [label="param CSharpTestSource(object value) 976723"];
18 [label="param CSharpTestSource(this) 976724"];
19 [label="Value 976725"];
20 [label="var comp = CreateEmptyCompilation('', new[] { TestReferences.SymbolsTests.netModule.x64COFF }, options: TestOptions.DebugDll); 976726"];
21 [label="var comp = CreateEmptyCompilation('', new[] { TestReferences.SymbolsTests.netModule.x64COFF }, options: TestOptions.DebugDll); 976727"];
22 [label="CreateEmptyCompilation('', new[] { TestReferences.SymbolsTests.netModule.x64COFF }, options: TestOptions.DebugDll) 976728"];
23 [label="param CreateEmptyCompilation(CSharpTestSource source) 976729"];
24 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 976730"];
25 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 976731"];
26 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 976732"];
27 [label="param CreateEmptyCompilation(string assemblyName = '') 976733"];
28 [label="param CreateEmptyCompilation(string sourceFileName = '') 976734"];
29 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 976735"];
30 [label="source 976736"];
31 [label="references 976737"];
32 [label="options 976738"];
33 [label="parseOptions 976739"];
34 [label="assemblyName 976740"];
35 [label="sourceFileName 976741"];
36 [label="skipUsesIsNullable 976742"];
37 [label="null 976743"];
38 [label="experimentalFeature: null 976744"];
39 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 976745"];
40 [label="param CreateCompilationCore(CSharpTestSource source) 976746"];
41 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 976747"];
42 [label="param CreateCompilationCore(CSharpCompilationOptions options) 976748"];
43 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 976749"];
44 [label="param CreateCompilationCore(string assemblyName) 976750"];
45 [label="param CreateCompilationCore(string sourceFileName) 976751"];
46 [label="param CreateCompilationCore(bool skipUsesIsNullable) 976752"];
47 [label="param CreateCompilationCore(MessageID? experimentalFeature) 976753"];
48 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 976754"];
49 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 976755"];
50 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 976756"];
51 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 976757"];
52 [label="param GetSyntaxTrees(string sourceFileName = '') 976758"];
53 [label="param GetSyntaxTrees(this) 976759"];
54 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 976760"];
55 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 976761"];
56 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 976762"];
57 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 976763"];
58 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 976764"];
59 [label="param Parse(string text) 976765"];
60 [label="param Parse(string filename = '') 976766"];
61 [label="param Parse(CSharpParseOptions options = null) 976767"];
62 [label="param Parse(Encoding encoding = null) 976768"];
63 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 976769"];
64 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 976770"];
65 [label="options = TestOptions.Regular; 976771"];
66 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 976772"];
67 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 976773"];
68 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 976774"];
69 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 976775"];
70 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 976776"];
71 [label="'\\r\\n' 976777"];
72 [label="CrLf = '\\r\\n' 976778"];
73 [label="CrLf 976779"];
74 [label="EndOfLine(CrLf) 976780"];
75 [label="param EndOfLine(string text) 976781"];
76 [label="param EndOfLine(bool elastic = false) 976782"];
77 [label="SyntaxTrivia trivia = null; 976783"];
78 [label="switch (text)\n            {\n                case '\\r':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturn : SyntaxFactory.CarriageReturn;\n                    break;\n                case '\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticLineFeed : SyntaxFactory.LineFeed;\n                    break;\n                case '\\r\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturnLineFeed : SyntaxFactory.CarriageReturnLineFeed;\n                    break;\n            } 976784"];
79 [label="elastic 976785"];
80 [label="trivia = elastic ? SyntaxFactory.ElasticCarriageReturnLineFeed : SyntaxFactory.CarriageReturnLineFeed; 976786"];
81 [label="if (trivia != null)\n            {\n                return trivia;\n            } 976787"];
82 [label="if (trivia != null)\n            {\n                return trivia;\n            } 976788"];
83 [label="ObjectBinder.RegisterTypeReader(typeof(SyntaxTrivia), r => new SyntaxTrivia(r)); 976789"];
84 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 976790"];
85 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 976791"];
86 [label="SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text) 976792"];
87 [label="param Create(SyntaxKind kind) 976793"];
88 [label="param Create(string text) 976794"];
89 [label="return new SyntaxTrivia(kind, text); 976795"];
90 [label="return new SyntaxTrivia(kind, text); 976796"];
91 [label="return new SyntaxTrivia(kind, text); 976797"];
92 [label="new SyntaxTrivia(kind, text) 976798"];
93 [label="param SyntaxTrivia(SyntaxKind kind) 976799"];
94 [label="param SyntaxTrivia(string text) 976800"];
95 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 976801"];
96 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 976802"];
97 [label="param SyntaxTrivia(this) 976803"];
98 [label="kind 976804"];
99 [label="diagnostics 976805"];
100 [label="annotations 976806"];
101 [label="new ConditionalWeakTable<SyntaxNode, Dictionary<CodeAnalysis.SyntaxTrivia, SyntaxNode>>() 976807"];
102 [label="s_structuresTable\n            = new ConditionalWeakTable<SyntaxNode, Dictionary<CodeAnalysis.SyntaxTrivia, SyntaxNode>>() 976808"];
103 [label="text 976809"];
104 [label="param SyntaxTrivia(this) 976810"];
105 [label="param CSharpSyntaxNode(SyntaxKind kind) 976811"];
106 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 976812"];
107 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 976813"];
108 [label="param CSharpSyntaxNode(int fullWidth) 976814"];
109 [label="param CSharpSyntaxNode(this) 976815"];
110 [label="kind 976816"];
111 [label="diagnostics 976817"];
112 [label="annotations 976818"];
113 [label="fullWidth 976819"];
114 [label="param CSharpSyntaxNode(this) 976820"];
115 [label="param CSharpSyntaxNode(this) 976821"];
116 [label="GreenStats.NoteGreen(this); 976822"];
117 [label="GreenStats.NoteGreen(this); 976823"];
118 [label="Text 976824"];
119 [label="this.Text 976825"];
120 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 976826"];
121 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 976827"];
122 [label="if (!elastic)\n            {\n                return trivia;\n            } 976828"];
123 [label="return trivia; 976829"];
124 [label="CarriageReturnLineFeed = EndOfLine(CrLf) 976830"];
125 [label="'\\n' 976831"];
126 [label="EndOfLine('\\n') 976832"];
127 [label="param EndOfLine(string text) 976833"];
128 [label="param EndOfLine(bool elastic = false) 976834"];
129 [label="SyntaxTrivia trivia = null; 976835"];
130 [label="switch (text)\n            {\n                case '\\r':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturn : SyntaxFactory.CarriageReturn;\n                    break;\n                case '\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticLineFeed : SyntaxFactory.LineFeed;\n                    break;\n                case '\\r\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturnLineFeed : SyntaxFactory.CarriageReturnLineFeed;\n                    break;\n            } 976836"];
131 [label="elastic 976837"];
132 [label="trivia = elastic ? SyntaxFactory.ElasticLineFeed : SyntaxFactory.LineFeed; 976838"];
133 [label="if (trivia != null)\n            {\n                return trivia;\n            } 976839"];
134 [label="if (trivia != null)\n            {\n                return trivia;\n            } 976840"];
135 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 976841"];
136 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 976842"];
137 [label="SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text) 976843"];
138 [label="param Create(SyntaxKind kind) 976844"];
139 [label="param Create(string text) 976845"];
140 [label="return new SyntaxTrivia(kind, text); 976846"];
141 [label="return new SyntaxTrivia(kind, text); 976847"];
142 [label="return new SyntaxTrivia(kind, text); 976848"];
143 [label="new SyntaxTrivia(kind, text) 976849"];
144 [label="param SyntaxTrivia(SyntaxKind kind) 976850"];
145 [label="param SyntaxTrivia(string text) 976851"];
146 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 976852"];
147 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 976853"];
148 [label="param SyntaxTrivia(this) 976854"];
149 [label="kind 976855"];
150 [label="diagnostics 976856"];
151 [label="annotations 976857"];
152 [label="text 976858"];
153 [label="param SyntaxTrivia(this) 976859"];
154 [label="param CSharpSyntaxNode(SyntaxKind kind) 976860"];
155 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 976861"];
156 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 976862"];
157 [label="param CSharpSyntaxNode(int fullWidth) 976863"];
158 [label="param CSharpSyntaxNode(this) 976864"];
159 [label="kind 976865"];
160 [label="diagnostics 976866"];
161 [label="annotations 976867"];
162 [label="fullWidth 976868"];
163 [label="param CSharpSyntaxNode(this) 976869"];
164 [label="param CSharpSyntaxNode(this) 976870"];
165 [label="GreenStats.NoteGreen(this); 976871"];
166 [label="GreenStats.NoteGreen(this); 976872"];
167 [label="Text 976873"];
168 [label="this.Text 976874"];
169 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 976875"];
170 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 976876"];
171 [label="if (!elastic)\n            {\n                return trivia;\n            } 976877"];
172 [label="return trivia; 976878"];
173 [label="LineFeed = EndOfLine('\\n') 976879"];
174 [label="'\\r' 976880"];
175 [label="EndOfLine('\\r') 976881"];
176 [label="param EndOfLine(string text) 976882"];
177 [label="param EndOfLine(bool elastic = false) 976883"];
178 [label="SyntaxTrivia trivia = null; 976884"];
179 [label="switch (text)\n            {\n                case '\\r':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturn : SyntaxFactory.CarriageReturn;\n                    break;\n                case '\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticLineFeed : SyntaxFactory.LineFeed;\n                    break;\n                case '\\r\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturnLineFeed : SyntaxFactory.CarriageReturnLineFeed;\n                    break;\n            } 976885"];
180 [label="elastic 976886"];
181 [label="trivia = elastic ? SyntaxFactory.ElasticCarriageReturn : SyntaxFactory.CarriageReturn; 976887"];
182 [label="if (trivia != null)\n            {\n                return trivia;\n            } 976888"];
183 [label="if (trivia != null)\n            {\n                return trivia;\n            } 976889"];
184 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 976890"];
185 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 976891"];
186 [label="SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text) 976892"];
187 [label="param Create(SyntaxKind kind) 976893"];
188 [label="param Create(string text) 976894"];
189 [label="return new SyntaxTrivia(kind, text); 976895"];
190 [label="return new SyntaxTrivia(kind, text); 976896"];
191 [label="return new SyntaxTrivia(kind, text); 976897"];
192 [label="new SyntaxTrivia(kind, text) 976898"];
193 [label="param SyntaxTrivia(SyntaxKind kind) 976899"];
194 [label="param SyntaxTrivia(string text) 976900"];
195 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 976901"];
196 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 976902"];
197 [label="param SyntaxTrivia(this) 976903"];
198 [label="kind 976904"];
199 [label="diagnostics 976905"];
200 [label="annotations 976906"];
201 [label="text 976907"];
202 [label="param SyntaxTrivia(this) 976908"];
203 [label="param CSharpSyntaxNode(SyntaxKind kind) 976909"];
204 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 976910"];
205 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 976911"];
206 [label="param CSharpSyntaxNode(int fullWidth) 976912"];
207 [label="param CSharpSyntaxNode(this) 976913"];
208 [label="kind 976914"];
209 [label="diagnostics 976915"];
210 [label="annotations 976916"];
211 [label="fullWidth 976917"];
212 [label="param CSharpSyntaxNode(this) 976918"];
213 [label="param CSharpSyntaxNode(this) 976919"];
214 [label="GreenStats.NoteGreen(this); 976920"];
215 [label="GreenStats.NoteGreen(this); 976921"];
216 [label="Text 976922"];
217 [label="this.Text 976923"];
218 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 976924"];
219 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 976925"];
220 [label="if (!elastic)\n            {\n                return trivia;\n            } 976926"];
221 [label="return trivia; 976927"];
222 [label="CarriageReturn = EndOfLine('\\r') 976928"];
223 [label="' ' 976929"];
224 [label="Whitespace(' ') 976930"];
225 [label="param Whitespace(string text) 976931"];
226 [label="param Whitespace(bool elastic = false) 976932"];
227 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 976933"];
228 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 976934"];
229 [label="SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text) 976935"];
230 [label="param Create(SyntaxKind kind) 976936"];
231 [label="param Create(string text) 976937"];
232 [label="return new SyntaxTrivia(kind, text); 976938"];
233 [label="return new SyntaxTrivia(kind, text); 976939"];
234 [label="return new SyntaxTrivia(kind, text); 976940"];
235 [label="new SyntaxTrivia(kind, text) 976941"];
236 [label="param SyntaxTrivia(SyntaxKind kind) 976942"];
237 [label="param SyntaxTrivia(string text) 976943"];
238 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 976944"];
239 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 976945"];
240 [label="param SyntaxTrivia(this) 976946"];
241 [label="kind 976947"];
242 [label="diagnostics 976948"];
243 [label="annotations 976949"];
244 [label="text 976950"];
245 [label="param SyntaxTrivia(this) 976951"];
246 [label="param CSharpSyntaxNode(SyntaxKind kind) 976952"];
247 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 976953"];
248 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 976954"];
249 [label="param CSharpSyntaxNode(int fullWidth) 976955"];
250 [label="param CSharpSyntaxNode(this) 976956"];
251 [label="kind 976957"];
252 [label="diagnostics 976958"];
253 [label="annotations 976959"];
254 [label="fullWidth 976960"];
255 [label="param CSharpSyntaxNode(this) 976961"];
256 [label="param CSharpSyntaxNode(this) 976962"];
257 [label="GreenStats.NoteGreen(this); 976963"];
258 [label="GreenStats.NoteGreen(this); 976964"];
259 [label="Text 976965"];
260 [label="this.Text 976966"];
261 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 976967"];
262 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 976968"];
263 [label="if (!elastic)\n            {\n                return trivia;\n            } 976969"];
264 [label="return trivia; 976970"];
265 [label="Space = Whitespace(' ') 976971"];
266 [label="'\\t' 976972"];
267 [label="Whitespace('\\t') 976973"];
268 [label="param Whitespace(string text) 976974"];
269 [label="param Whitespace(bool elastic = false) 976975"];
270 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 976976"];
271 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 976977"];
272 [label="SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text) 976978"];
273 [label="param Create(SyntaxKind kind) 976979"];
274 [label="param Create(string text) 976980"];
275 [label="return new SyntaxTrivia(kind, text); 976981"];
276 [label="return new SyntaxTrivia(kind, text); 976982"];
277 [label="return new SyntaxTrivia(kind, text); 976983"];
278 [label="new SyntaxTrivia(kind, text) 976984"];
279 [label="param SyntaxTrivia(SyntaxKind kind) 976985"];
280 [label="param SyntaxTrivia(string text) 976986"];
281 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 976987"];
282 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 976988"];
283 [label="param SyntaxTrivia(this) 976989"];
284 [label="kind 976990"];
285 [label="diagnostics 976991"];
286 [label="annotations 976992"];
287 [label="text 976993"];
288 [label="param SyntaxTrivia(this) 976994"];
289 [label="param CSharpSyntaxNode(SyntaxKind kind) 976995"];
290 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 976996"];
291 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 976997"];
292 [label="param CSharpSyntaxNode(int fullWidth) 976998"];
293 [label="param CSharpSyntaxNode(this) 976999"];
294 [label="kind 977000"];
295 [label="diagnostics 977001"];
296 [label="annotations 977002"];
297 [label="fullWidth 977003"];
298 [label="param CSharpSyntaxNode(this) 977004"];
299 [label="param CSharpSyntaxNode(this) 977005"];
300 [label="GreenStats.NoteGreen(this); 977006"];
301 [label="GreenStats.NoteGreen(this); 977007"];
302 [label="Text 977008"];
303 [label="this.Text 977009"];
304 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 977010"];
305 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 977011"];
306 [label="if (!elastic)\n            {\n                return trivia;\n            } 977012"];
307 [label="return trivia; 977013"];
308 [label="Tab = Whitespace('\\t') 977014"];
309 [label="CrLf 977015"];
310 [label="true 977016"];
311 [label="elastic: true 977017"];
312 [label="EndOfLine(CrLf, elastic: true) 977018"];
313 [label="param EndOfLine(string text) 977019"];
314 [label="param EndOfLine(bool elastic = false) 977020"];
315 [label="SyntaxTrivia trivia = null; 977021"];
316 [label="switch (text)\n            {\n                case '\\r':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturn : SyntaxFactory.CarriageReturn;\n                    break;\n                case '\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticLineFeed : SyntaxFactory.LineFeed;\n                    break;\n                case '\\r\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturnLineFeed : SyntaxFactory.CarriageReturnLineFeed;\n                    break;\n            } 977022"];
317 [label="elastic 977023"];
318 [label="trivia = elastic ? SyntaxFactory.ElasticCarriageReturnLineFeed : SyntaxFactory.CarriageReturnLineFeed; 977024"];
319 [label="if (trivia != null)\n            {\n                return trivia;\n            } 977025"];
320 [label="if (trivia != null)\n            {\n                return trivia;\n            } 977026"];
321 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 977027"];
322 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 977028"];
323 [label="SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text) 977029"];
324 [label="param Create(SyntaxKind kind) 977030"];
325 [label="param Create(string text) 977031"];
326 [label="return new SyntaxTrivia(kind, text); 977032"];
327 [label="return new SyntaxTrivia(kind, text); 977033"];
328 [label="return new SyntaxTrivia(kind, text); 977034"];
329 [label="new SyntaxTrivia(kind, text) 977035"];
330 [label="param SyntaxTrivia(SyntaxKind kind) 977036"];
331 [label="param SyntaxTrivia(string text) 977037"];
332 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 977038"];
333 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 977039"];
334 [label="param SyntaxTrivia(this) 977040"];
335 [label="kind 977041"];
336 [label="diagnostics 977042"];
337 [label="annotations 977043"];
338 [label="text 977044"];
339 [label="param SyntaxTrivia(this) 977045"];
340 [label="param CSharpSyntaxNode(SyntaxKind kind) 977046"];
341 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 977047"];
342 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 977048"];
343 [label="param CSharpSyntaxNode(int fullWidth) 977049"];
344 [label="param CSharpSyntaxNode(this) 977050"];
345 [label="kind 977051"];
346 [label="diagnostics 977052"];
347 [label="annotations 977053"];
348 [label="fullWidth 977054"];
349 [label="param CSharpSyntaxNode(this) 977055"];
350 [label="param CSharpSyntaxNode(this) 977056"];
351 [label="GreenStats.NoteGreen(this); 977057"];
352 [label="GreenStats.NoteGreen(this); 977058"];
353 [label="Text 977059"];
354 [label="this.Text 977060"];
355 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 977061"];
356 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 977062"];
357 [label="if (!elastic)\n            {\n                return trivia;\n            } 977063"];
358 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 977064"];
359 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 977065"];
360 [label="new[] { SyntaxAnnotation.ElasticAnnotation } 977066"];
361 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 977067"];
362 [label="param SetAnnotations(SyntaxAnnotation[]? annotations) 977068"];
363 [label="param SetAnnotations(this) 977069"];
364 [label="this.Kind 977070"];
365 [label="get { return (SyntaxKind)this.RawKind; } 977071"];
366 [label="return (SyntaxKind)this.RawKind; 977072"];
367 [label="return new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations); 977073"];
368 [label="return new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations); 977074"];
369 [label="return new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations); 977075"];
370 [label="return new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations); 977076"];
371 [label="new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations) 977077"];
372 [label="param SyntaxTrivia(SyntaxKind kind) 977078"];
373 [label="param SyntaxTrivia(string text) 977079"];
374 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 977080"];
375 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 977081"];
376 [label="param SyntaxTrivia(this) 977082"];
377 [label="param SyntaxTrivia(this) 977083"];
378 [label="param CSharpSyntaxNode(this) 977084"];
379 [label="param CSharpSyntaxNode(this) 977085"];
380 [label="param CSharpSyntaxNode(this) 977086"];
381 [label="GreenStats.NoteGreen(this); 977087"];
382 [label="Text 977088"];
383 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 977089"];
384 [label="ElasticCarriageReturnLineFeed = EndOfLine(CrLf, elastic: true) 977090"];
385 [label="'\\n' 977091"];
386 [label="true 977092"];
387 [label="elastic: true 977093"];
388 [label="EndOfLine('\\n', elastic: true) 977094"];
389 [label="param EndOfLine(string text) 977095"];
390 [label="param EndOfLine(bool elastic = false) 977096"];
391 [label="SyntaxTrivia trivia = null; 977097"];
392 [label="switch (text)\n            {\n                case '\\r':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturn : SyntaxFactory.CarriageReturn;\n                    break;\n                case '\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticLineFeed : SyntaxFactory.LineFeed;\n                    break;\n                case '\\r\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturnLineFeed : SyntaxFactory.CarriageReturnLineFeed;\n                    break;\n            } 977098"];
393 [label="elastic 977099"];
394 [label="trivia = elastic ? SyntaxFactory.ElasticLineFeed : SyntaxFactory.LineFeed; 977100"];
395 [label="if (trivia != null)\n            {\n                return trivia;\n            } 977101"];
396 [label="if (trivia != null)\n            {\n                return trivia;\n            } 977102"];
397 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 977103"];
398 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 977104"];
399 [label="SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text) 977105"];
400 [label="param Create(SyntaxKind kind) 977106"];
401 [label="param Create(string text) 977107"];
402 [label="return new SyntaxTrivia(kind, text); 977108"];
403 [label="return new SyntaxTrivia(kind, text); 977109"];
404 [label="return new SyntaxTrivia(kind, text); 977110"];
405 [label="new SyntaxTrivia(kind, text) 977111"];
406 [label="param SyntaxTrivia(SyntaxKind kind) 977112"];
407 [label="param SyntaxTrivia(string text) 977113"];
408 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 977114"];
409 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 977115"];
410 [label="param SyntaxTrivia(this) 977116"];
411 [label="kind 977117"];
412 [label="diagnostics 977118"];
413 [label="annotations 977119"];
414 [label="text 977120"];
415 [label="param SyntaxTrivia(this) 977121"];
416 [label="param CSharpSyntaxNode(SyntaxKind kind) 977122"];
417 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 977123"];
418 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 977124"];
419 [label="param CSharpSyntaxNode(int fullWidth) 977125"];
420 [label="param CSharpSyntaxNode(this) 977126"];
421 [label="kind 977127"];
422 [label="diagnostics 977128"];
423 [label="annotations 977129"];
424 [label="fullWidth 977130"];
425 [label="param CSharpSyntaxNode(this) 977131"];
426 [label="param CSharpSyntaxNode(this) 977132"];
427 [label="GreenStats.NoteGreen(this); 977133"];
428 [label="GreenStats.NoteGreen(this); 977134"];
429 [label="Text 977135"];
430 [label="this.Text 977136"];
431 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 977137"];
432 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 977138"];
433 [label="if (!elastic)\n            {\n                return trivia;\n            } 977139"];
434 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 977140"];
435 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 977141"];
436 [label="new[] { SyntaxAnnotation.ElasticAnnotation } 977142"];
437 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 977143"];
438 [label="this.Kind 977144"];
439 [label="return new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations); 977145"];
440 [label="new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations) 977146"];
441 [label="param SyntaxTrivia(this) 977147"];
442 [label="param SyntaxTrivia(this) 977148"];
443 [label="param CSharpSyntaxNode(this) 977149"];
444 [label="param CSharpSyntaxNode(this) 977150"];
445 [label="GreenStats.NoteGreen(this); 977151"];
446 [label="Text 977152"];
447 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 977153"];
448 [label="ElasticLineFeed = EndOfLine('\\n', elastic: true) 977154"];
449 [label="'\\r' 977155"];
450 [label="true 977156"];
451 [label="elastic: true 977157"];
452 [label="EndOfLine('\\r', elastic: true) 977158"];
453 [label="param EndOfLine(string text) 977159"];
454 [label="param EndOfLine(bool elastic = false) 977160"];
455 [label="SyntaxTrivia trivia = null; 977161"];
456 [label="switch (text)\n            {\n                case '\\r':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturn : SyntaxFactory.CarriageReturn;\n                    break;\n                case '\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticLineFeed : SyntaxFactory.LineFeed;\n                    break;\n                case '\\r\\n':\n                    trivia = elastic ? SyntaxFactory.ElasticCarriageReturnLineFeed : SyntaxFactory.CarriageReturnLineFeed;\n                    break;\n            } 977162"];
457 [label="elastic 977163"];
458 [label="trivia = elastic ? SyntaxFactory.ElasticCarriageReturn : SyntaxFactory.CarriageReturn; 977164"];
459 [label="if (trivia != null)\n            {\n                return trivia;\n            } 977165"];
460 [label="if (trivia != null)\n            {\n                return trivia;\n            } 977166"];
461 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 977167"];
462 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 977168"];
463 [label="SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text) 977169"];
464 [label="param Create(SyntaxKind kind) 977170"];
465 [label="param Create(string text) 977171"];
466 [label="return new SyntaxTrivia(kind, text); 977172"];
467 [label="return new SyntaxTrivia(kind, text); 977173"];
468 [label="return new SyntaxTrivia(kind, text); 977174"];
469 [label="new SyntaxTrivia(kind, text) 977175"];
470 [label="param SyntaxTrivia(SyntaxKind kind) 977176"];
471 [label="param SyntaxTrivia(string text) 977177"];
472 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 977178"];
473 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 977179"];
474 [label="param SyntaxTrivia(this) 977180"];
475 [label="kind 977181"];
476 [label="diagnostics 977182"];
477 [label="annotations 977183"];
478 [label="text 977184"];
479 [label="param SyntaxTrivia(this) 977185"];
480 [label="param CSharpSyntaxNode(SyntaxKind kind) 977186"];
481 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 977187"];
482 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 977188"];
483 [label="param CSharpSyntaxNode(int fullWidth) 977189"];
484 [label="param CSharpSyntaxNode(this) 977190"];
485 [label="kind 977191"];
486 [label="diagnostics 977192"];
487 [label="annotations 977193"];
488 [label="fullWidth 977194"];
489 [label="param CSharpSyntaxNode(this) 977195"];
490 [label="param CSharpSyntaxNode(this) 977196"];
491 [label="GreenStats.NoteGreen(this); 977197"];
492 [label="GreenStats.NoteGreen(this); 977198"];
493 [label="Text 977199"];
494 [label="this.Text 977200"];
495 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 977201"];
496 [label="trivia = SyntaxTrivia.Create(SyntaxKind.EndOfLineTrivia, text); 977202"];
497 [label="if (!elastic)\n            {\n                return trivia;\n            } 977203"];
498 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 977204"];
499 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 977205"];
500 [label="new[] { SyntaxAnnotation.ElasticAnnotation } 977206"];
501 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 977207"];
502 [label="this.Kind 977208"];
503 [label="return new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations); 977209"];
504 [label="new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations) 977210"];
505 [label="param SyntaxTrivia(this) 977211"];
506 [label="param SyntaxTrivia(this) 977212"];
507 [label="param CSharpSyntaxNode(this) 977213"];
508 [label="param CSharpSyntaxNode(this) 977214"];
509 [label="GreenStats.NoteGreen(this); 977215"];
510 [label="Text 977216"];
511 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 977217"];
512 [label="ElasticCarriageReturn = EndOfLine('\\r', elastic: true) 977218"];
513 [label="' ' 977219"];
514 [label="true 977220"];
515 [label="elastic: true 977221"];
516 [label="Whitespace(' ', elastic: true) 977222"];
517 [label="param Whitespace(string text) 977223"];
518 [label="param Whitespace(bool elastic = false) 977224"];
519 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 977225"];
520 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 977226"];
521 [label="SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text) 977227"];
522 [label="param Create(SyntaxKind kind) 977228"];
523 [label="param Create(string text) 977229"];
524 [label="return new SyntaxTrivia(kind, text); 977230"];
525 [label="return new SyntaxTrivia(kind, text); 977231"];
526 [label="return new SyntaxTrivia(kind, text); 977232"];
527 [label="new SyntaxTrivia(kind, text) 977233"];
528 [label="param SyntaxTrivia(SyntaxKind kind) 977234"];
529 [label="param SyntaxTrivia(string text) 977235"];
530 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 977236"];
531 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 977237"];
532 [label="param SyntaxTrivia(this) 977238"];
533 [label="kind 977239"];
534 [label="diagnostics 977240"];
535 [label="annotations 977241"];
536 [label="text 977242"];
537 [label="param SyntaxTrivia(this) 977243"];
538 [label="param CSharpSyntaxNode(SyntaxKind kind) 977244"];
539 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 977245"];
540 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 977246"];
541 [label="param CSharpSyntaxNode(int fullWidth) 977247"];
542 [label="param CSharpSyntaxNode(this) 977248"];
543 [label="kind 977249"];
544 [label="diagnostics 977250"];
545 [label="annotations 977251"];
546 [label="fullWidth 977252"];
547 [label="param CSharpSyntaxNode(this) 977253"];
548 [label="param CSharpSyntaxNode(this) 977254"];
549 [label="GreenStats.NoteGreen(this); 977255"];
550 [label="GreenStats.NoteGreen(this); 977256"];
551 [label="Text 977257"];
552 [label="this.Text 977258"];
553 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 977259"];
554 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 977260"];
555 [label="if (!elastic)\n            {\n                return trivia;\n            } 977261"];
556 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 977262"];
557 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 977263"];
558 [label="new[] { SyntaxAnnotation.ElasticAnnotation } 977264"];
559 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 977265"];
560 [label="this.Kind 977266"];
561 [label="return new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations); 977267"];
562 [label="new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations) 977268"];
563 [label="param SyntaxTrivia(this) 977269"];
564 [label="param SyntaxTrivia(this) 977270"];
565 [label="param CSharpSyntaxNode(this) 977271"];
566 [label="param CSharpSyntaxNode(this) 977272"];
567 [label="GreenStats.NoteGreen(this); 977273"];
568 [label="Text 977274"];
569 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 977275"];
570 [label="ElasticSpace = Whitespace(' ', elastic: true) 977276"];
571 [label="'\\t' 977277"];
572 [label="true 977278"];
573 [label="elastic: true 977279"];
574 [label="Whitespace('\\t', elastic: true) 977280"];
575 [label="param Whitespace(string text) 977281"];
576 [label="param Whitespace(bool elastic = false) 977282"];
577 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 977283"];
578 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 977284"];
579 [label="SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text) 977285"];
580 [label="param Create(SyntaxKind kind) 977286"];
581 [label="param Create(string text) 977287"];
582 [label="return new SyntaxTrivia(kind, text); 977288"];
583 [label="return new SyntaxTrivia(kind, text); 977289"];
584 [label="return new SyntaxTrivia(kind, text); 977290"];
585 [label="new SyntaxTrivia(kind, text) 977291"];
586 [label="param SyntaxTrivia(SyntaxKind kind) 977292"];
587 [label="param SyntaxTrivia(string text) 977293"];
588 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 977294"];
589 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 977295"];
590 [label="param SyntaxTrivia(this) 977296"];
591 [label="kind 977297"];
592 [label="diagnostics 977298"];
593 [label="annotations 977299"];
594 [label="text 977300"];
595 [label="param SyntaxTrivia(this) 977301"];
596 [label="param CSharpSyntaxNode(SyntaxKind kind) 977302"];
597 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 977303"];
598 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 977304"];
599 [label="param CSharpSyntaxNode(int fullWidth) 977305"];
600 [label="param CSharpSyntaxNode(this) 977306"];
601 [label="kind 977307"];
602 [label="diagnostics 977308"];
603 [label="annotations 977309"];
604 [label="fullWidth 977310"];
605 [label="param CSharpSyntaxNode(this) 977311"];
606 [label="param CSharpSyntaxNode(this) 977312"];
607 [label="GreenStats.NoteGreen(this); 977313"];
608 [label="GreenStats.NoteGreen(this); 977314"];
609 [label="Text 977315"];
610 [label="this.Text 977316"];
611 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 977317"];
612 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 977318"];
613 [label="if (!elastic)\n            {\n                return trivia;\n            } 977319"];
614 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 977320"];
615 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 977321"];
616 [label="new[] { SyntaxAnnotation.ElasticAnnotation } 977322"];
617 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 977323"];
618 [label="this.Kind 977324"];
619 [label="return new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations); 977325"];
620 [label="new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations) 977326"];
621 [label="param SyntaxTrivia(this) 977327"];
622 [label="param SyntaxTrivia(this) 977328"];
623 [label="param CSharpSyntaxNode(this) 977329"];
624 [label="param CSharpSyntaxNode(this) 977330"];
625 [label="GreenStats.NoteGreen(this); 977331"];
626 [label="Text 977332"];
627 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 977333"];
628 [label="ElasticTab = Whitespace('\\t', elastic: true) 977334"];
629 [label="string.Empty 977335"];
630 [label="true 977336"];
631 [label="elastic: true 977337"];
632 [label="Whitespace(string.Empty, elastic: true) 977338"];
633 [label="param Whitespace(string text) 977339"];
634 [label="param Whitespace(bool elastic = false) 977340"];
635 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 977341"];
636 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 977342"];
637 [label="SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text) 977343"];
638 [label="param Create(SyntaxKind kind) 977344"];
639 [label="param Create(string text) 977345"];
640 [label="return new SyntaxTrivia(kind, text); 977346"];
641 [label="return new SyntaxTrivia(kind, text); 977347"];
642 [label="return new SyntaxTrivia(kind, text); 977348"];
643 [label="new SyntaxTrivia(kind, text) 977349"];
644 [label="param SyntaxTrivia(SyntaxKind kind) 977350"];
645 [label="param SyntaxTrivia(string text) 977351"];
646 [label="param SyntaxTrivia(DiagnosticInfo[]? diagnostics = null) 977352"];
647 [label="param SyntaxTrivia(SyntaxAnnotation[]? annotations = null) 977353"];
648 [label="param SyntaxTrivia(this) 977354"];
649 [label="kind 977355"];
650 [label="diagnostics 977356"];
651 [label="annotations 977357"];
652 [label="text 977358"];
653 [label="param SyntaxTrivia(this) 977359"];
654 [label="param CSharpSyntaxNode(SyntaxKind kind) 977360"];
655 [label="param CSharpSyntaxNode(DiagnosticInfo[] diagnostics) 977361"];
656 [label="param CSharpSyntaxNode(SyntaxAnnotation[] annotations) 977362"];
657 [label="param CSharpSyntaxNode(int fullWidth) 977363"];
658 [label="param CSharpSyntaxNode(this) 977364"];
659 [label="kind 977365"];
660 [label="diagnostics 977366"];
661 [label="annotations 977367"];
662 [label="fullWidth 977368"];
663 [label="param CSharpSyntaxNode(this) 977369"];
664 [label="param CSharpSyntaxNode(this) 977370"];
665 [label="GreenStats.NoteGreen(this); 977371"];
666 [label="GreenStats.NoteGreen(this); 977372"];
667 [label="Text 977373"];
668 [label="this.Text 977374"];
669 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 977375"];
670 [label="var trivia = SyntaxTrivia.Create(SyntaxKind.WhitespaceTrivia, text); 977376"];
671 [label="if (!elastic)\n            {\n                return trivia;\n            } 977377"];
672 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 977378"];
673 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 977379"];
674 [label="new[] { SyntaxAnnotation.ElasticAnnotation } 977380"];
675 [label="return trivia.WithAnnotationsGreen(new[] { SyntaxAnnotation.ElasticAnnotation }); 977381"];
676 [label="this.Kind 977382"];
677 [label="return new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations); 977383"];
678 [label="new SyntaxTrivia(this.Kind, this.Text, GetDiagnostics(), annotations) 977384"];
679 [label="param SyntaxTrivia(this) 977385"];
680 [label="param SyntaxTrivia(this) 977386"];
681 [label="param CSharpSyntaxNode(this) 977387"];
682 [label="param CSharpSyntaxNode(this) 977388"];
683 [label="GreenStats.NoteGreen(this); 977389"];
684 [label="Text 977390"];
685 [label="if (kind == SyntaxKind.PreprocessingMessageTrivia)\n            {\n                this.flags |= NodeFlags.ContainsSkippedText;\n            } 977391"];
686 [label="ElasticZeroSpace = Whitespace(string.Empty, elastic: true) 977392"];
687 [label="s_xmlCarriageReturnLineFeed 977393"];
688 [label="public static SyntaxTrivia CarriageReturnLineFeed { get; } = Syntax.InternalSyntax.SyntaxFactory.CarriageReturnLineFeed; 977394"];
689 [label="param operator(SyntaxTrivia trivia) 977395"];
690 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977396"];
691 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977397"];
692 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977398"];
693 [label="public static SyntaxTrivia LineFeed { get; } = Syntax.InternalSyntax.SyntaxFactory.LineFeed; 977399"];
694 [label="param operator(SyntaxTrivia trivia) 977400"];
695 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977401"];
696 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977402"];
697 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977403"];
698 [label="public static SyntaxTrivia CarriageReturn { get; } = Syntax.InternalSyntax.SyntaxFactory.CarriageReturn; 977404"];
699 [label="param operator(SyntaxTrivia trivia) 977405"];
700 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977406"];
701 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977407"];
702 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977408"];
703 [label="public static SyntaxTrivia Space { get; } = Syntax.InternalSyntax.SyntaxFactory.Space; 977409"];
704 [label="param operator(SyntaxTrivia trivia) 977410"];
705 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977411"];
706 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977412"];
707 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977413"];
708 [label="public static SyntaxTrivia Tab { get; } = Syntax.InternalSyntax.SyntaxFactory.Tab; 977414"];
709 [label="param operator(SyntaxTrivia trivia) 977415"];
710 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977416"];
711 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977417"];
712 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977418"];
713 [label="public static SyntaxTrivia ElasticCarriageReturnLineFeed { get; } = Syntax.InternalSyntax.SyntaxFactory.ElasticCarriageReturnLineFeed; 977419"];
714 [label="param operator(SyntaxTrivia trivia) 977420"];
715 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977421"];
716 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977422"];
717 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977423"];
718 [label="public static SyntaxTrivia ElasticLineFeed { get; } = Syntax.InternalSyntax.SyntaxFactory.ElasticLineFeed; 977424"];
719 [label="param operator(SyntaxTrivia trivia) 977425"];
720 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977426"];
721 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977427"];
722 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977428"];
723 [label="public static SyntaxTrivia ElasticCarriageReturn { get; } = Syntax.InternalSyntax.SyntaxFactory.ElasticCarriageReturn; 977429"];
724 [label="param operator(SyntaxTrivia trivia) 977430"];
725 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977431"];
726 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977432"];
727 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977433"];
728 [label="public static SyntaxTrivia ElasticSpace { get; } = Syntax.InternalSyntax.SyntaxFactory.ElasticSpace; 977434"];
729 [label="param operator(SyntaxTrivia trivia) 977435"];
730 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977436"];
731 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977437"];
732 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977438"];
733 [label="public static SyntaxTrivia ElasticTab { get; } = Syntax.InternalSyntax.SyntaxFactory.ElasticTab; 977439"];
734 [label="param operator(SyntaxTrivia trivia) 977440"];
735 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977441"];
736 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977442"];
737 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977443"];
738 [label="public static SyntaxTrivia ElasticMarker { get; } = Syntax.InternalSyntax.SyntaxFactory.ElasticZeroSpace; 977444"];
739 [label="param operator(SyntaxTrivia trivia) 977445"];
740 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977446"];
741 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977447"];
742 [label="return new CodeAnalysis.SyntaxTrivia(token: default, trivia, position: 0, index: 0); 977448"];
743 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 977449"];
744 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 977450"];
745 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 977451"];
746 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 977452"];
747 [label="SyntaxFactory.ParseSyntaxTree(stringText, options, filename) 977453"];
748 [label="param ParseSyntaxTree(SourceText text) 977454"];
749 [label="param ParseSyntaxTree(ParseOptions? options = null) 977455"];
750 [label="param ParseSyntaxTree(string path = '') 977456"];
751 [label="param ParseSyntaxTree(CancellationToken cancellationToken = default) 977457"];
752 [label="new DummySyntaxTree() 977458"];
753 [label="param DummySyntaxTree(this) 977459"];
754 [label="param CSharpSyntaxTree(this) 977460"];
755 [label="_hasDirectives 977461"];
756 [label="_lazyLineDirectiveMap 977462"];
757 [label="_lazyPragmaWarningStateMap 977463"];
758 [label="_lazyNullableContextStateMap 977464"];
759 [label="_lazyIsGeneratedCode = GeneratedKind.Unknown 977465"];
760 [label="_node 977466"];
761 [label="_node = this.CloneNodeAsRoot(SyntaxFactory.ParseCompilationUnit(string.Empty)); 977467"];
762 [label="_node = this.CloneNodeAsRoot(SyntaxFactory.ParseCompilationUnit(string.Empty)); 977468"];
763 [label="SyntaxFactory.ParseCompilationUnit(string.Empty) 977469"];
764 [label="param ParseCompilationUnit(string text) 977470"];
765 [label="param ParseCompilationUnit(int offset = 0) 977471"];
766 [label="param ParseCompilationUnit(CSharpParseOptions? options = null) 977472"];
767 [label="using (var lexer = MakeLexer(text, offset, options))\n            using (var parser = MakeParser(lexer))\n            {\n                var node = parser.ParseCompilationUnit();\n                return (CompilationUnitSyntax)node.CreateRed();\n            } 977473"];
768 [label="using (var lexer = MakeLexer(text, offset, options))\n            using (var parser = MakeParser(lexer))\n            {\n                var node = parser.ParseCompilationUnit();\n                return (CompilationUnitSyntax)node.CreateRed();\n            } 977474"];
769 [label="using (var lexer = MakeLexer(text, offset, options))\n            using (var parser = MakeParser(lexer))\n            {\n                var node = parser.ParseCompilationUnit();\n                return (CompilationUnitSyntax)node.CreateRed();\n            } 977475"];
770 [label="MakeLexer(text, offset, options) 977476"];
771 [label="param MakeLexer(string text) 977477"];
772 [label="param MakeLexer(int offset) 977478"];
773 [label="param MakeLexer(CSharpParseOptions? options = null) 977479"];
774 [label="return new InternalSyntax.Lexer(\n                text: MakeSourceText(text, offset),\n                options: options ?? CSharpParseOptions.Default); 977480"];
775 [label="return new InternalSyntax.Lexer(\n                text: MakeSourceText(text, offset),\n                options: options ?? CSharpParseOptions.Default); 977481"];
776 [label="MakeSourceText(text, offset) 977482"];
777 [label="param MakeSourceText(string text) 977483"];
778 [label="param MakeSourceText(int offset) 977484"];
779 [label="return SourceText.From(text, Encoding.UTF8).GetSubText(offset); 977485"];
780 [label="return SourceText.From(text, Encoding.UTF8).GetSubText(offset); 977486"];
781 [label="return SourceText.From(text, Encoding.UTF8).GetSubText(offset); 977487"];
782 [label="return SourceText.From(text, Encoding.UTF8).GetSubText(offset); 977488"];
783 [label="return SourceText.From(text, Encoding.UTF8).GetSubText(offset); 977489"];
784 [label="return SourceText.From(text, Encoding.UTF8).GetSubText(offset); 977490"];
785 [label="8 977491"];
786 [label="TriviaListInitialCapacity = 8 977492"];
787 [label="TokensLexed 977493"];
788 [label="'<<<<<<<' 977494"];
789 [label="s_conflictMarkerLength = '<<<<<<<'.Length 977495"];
790 [label="42 977496"];
791 [label="MaxCachedTokenSize = 42 977497"];
792 [label="new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 977498"];
793 [label="{\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            } 977499"];
794 [label="{\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            } 977500"];
795 [label="{\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            } 977501"];
796 [label="{\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            } 977502"];
797 [label="{\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            } 977503"];
798 [label="{\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            } 977504"];
799 [label="{\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            } 977505"];
800 [label="{\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            } 977506"];
801 [label="{\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            } 977507"];
802 [label="new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 977508"];
803 [label="new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 977509"];
804 [label="new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 977510"];
805 [label="new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 977511"];
806 [label="new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 977512"];
807 [label="new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 977513"];
808 [label="new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 977514"];
809 [label="new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 977515"];
810 [label="new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 977516"];
811 [label="s_stateTransitions = new byte[,]\n        {\n            // Initial\n            {\n                (byte)QuickScanState.Initial,             // White\n                (byte)QuickScanState.Initial,             // CR\n                (byte)QuickScanState.Initial,             // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Punctuation,         // Punct\n                (byte)QuickScanState.Dot,                 // Dot\n                (byte)QuickScanState.CompoundPunctStart,  // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Bad,                 // EndOfFile\n            },\n\n            // Following White\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Following CR\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Identifier\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Ident,               // Letter\n                (byte)QuickScanState.Ident,               // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Number\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Bad,                 // Letter (might be 'e' or 'x' or suffix)\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (Number is followed by a dot - too complex for us to handle here).\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Dot\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Number,              // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Bad,                 // Dot (DotDot range token, exit so that we handle it in subsequent scanning code)\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Compound Punctuation\n            {\n                (byte)QuickScanState.FollowingWhite,      // White\n                (byte)QuickScanState.FollowingCR,         // CR\n                (byte)QuickScanState.DoneAfterNext,       // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Bad,                 // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Bad,                 // Compound\n                (byte)QuickScanState.Bad,                 // Slash\n                (byte)QuickScanState.Bad,                 // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n\n            // Done after next\n            {\n                (byte)QuickScanState.Done,                // White\n                (byte)QuickScanState.Done,                // CR\n                (byte)QuickScanState.Done,                // LF\n                (byte)QuickScanState.Done,                // Letter\n                (byte)QuickScanState.Done,                // Digit\n                (byte)QuickScanState.Done,                // Punct\n                (byte)QuickScanState.Done,                // Dot\n                (byte)QuickScanState.Done,                // Compound\n                (byte)QuickScanState.Done,                // Slash\n                (byte)QuickScanState.Done,                // Complex\n                (byte)QuickScanState.Done,                // EndOfFile\n            },\n        } 977517"];
812 [label="new[]\n        {\n            // 0 .. 31\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex,\n            (byte)CharFlags.White,   // TAB\n            (byte)CharFlags.LF,      // LF\n            (byte)CharFlags.White,   // VT\n            (byte)CharFlags.White,   // FF\n            (byte)CharFlags.CR,      // CR\n            (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n\n            // 32 .. 63\n            (byte)CharFlags.White,    // SPC\n            (byte)CharFlags.CompoundPunctStart,    // !\n            (byte)CharFlags.Complex,  // '\n            (byte)CharFlags.Complex,  // #\n            (byte)CharFlags.Complex,  // $\n            (byte)CharFlags.CompoundPunctStart, // %\n            (byte)CharFlags.CompoundPunctStart, // &\n            (byte)CharFlags.Complex,  // '\n            (byte)CharFlags.Punct,    // (\n            (byte)CharFlags.Punct,    // )\n            (byte)CharFlags.CompoundPunctStart, // *\n            (byte)CharFlags.CompoundPunctStart, // +\n            (byte)CharFlags.Punct,    // ,\n            (byte)CharFlags.CompoundPunctStart, // -\n            (byte)CharFlags.Dot,      // .\n            (byte)CharFlags.Slash,    // /\n            (byte)CharFlags.Digit,    // 0\n            (byte)CharFlags.Digit,    // 1\n            (byte)CharFlags.Digit,    // 2\n            (byte)CharFlags.Digit,    // 3\n            (byte)CharFlags.Digit,    // 4\n            (byte)CharFlags.Digit,    // 5\n            (byte)CharFlags.Digit,    // 6\n            (byte)CharFlags.Digit,    // 7\n            (byte)CharFlags.Digit,    // 8\n            (byte)CharFlags.Digit,    // 9\n            (byte)CharFlags.CompoundPunctStart,  // :\n            (byte)CharFlags.Punct,    // ;\n            (byte)CharFlags.CompoundPunctStart,  // <\n            (byte)CharFlags.CompoundPunctStart,  // =\n            (byte)CharFlags.CompoundPunctStart,  // >\n            (byte)CharFlags.CompoundPunctStart,  // ?\n\n            // 64 .. 95\n            (byte)CharFlags.Complex,  // @\n            (byte)CharFlags.Letter,   // A\n            (byte)CharFlags.Letter,   // B\n            (byte)CharFlags.Letter,   // C\n            (byte)CharFlags.Letter,   // D\n            (byte)CharFlags.Letter,   // E\n            (byte)CharFlags.Letter,   // F\n            (byte)CharFlags.Letter,   // G\n            (byte)CharFlags.Letter,   // H\n            (byte)CharFlags.Letter,   // I\n            (byte)CharFlags.Letter,   // J\n            (byte)CharFlags.Letter,   // K\n            (byte)CharFlags.Letter,   // L\n            (byte)CharFlags.Letter,   // M\n            (byte)CharFlags.Letter,   // N\n            (byte)CharFlags.Letter,   // O\n            (byte)CharFlags.Letter,   // P\n            (byte)CharFlags.Letter,   // Q\n            (byte)CharFlags.Letter,   // R\n            (byte)CharFlags.Letter,   // S\n            (byte)CharFlags.Letter,   // T\n            (byte)CharFlags.Letter,   // U\n            (byte)CharFlags.Letter,   // V\n            (byte)CharFlags.Letter,   // W\n            (byte)CharFlags.Letter,   // X\n            (byte)CharFlags.Letter,   // Y\n            (byte)CharFlags.Letter,   // Z\n            (byte)CharFlags.Punct,    // [\n            (byte)CharFlags.Complex,  // \\\n            (byte)CharFlags.Punct,    // ]\n            (byte)CharFlags.CompoundPunctStart,    // ^\n            (byte)CharFlags.Letter,   // _\n\n            // 96 .. 127\n            (byte)CharFlags.Complex,  // `\n            (byte)CharFlags.Letter,   // a\n            (byte)CharFlags.Letter,   // b\n            (byte)CharFlags.Letter,   // c\n            (byte)CharFlags.Letter,   // d\n            (byte)CharFlags.Letter,   // e\n            (byte)CharFlags.Letter,   // f\n            (byte)CharFlags.Letter,   // g\n            (byte)CharFlags.Letter,   // h\n            (byte)CharFlags.Letter,   // i\n            (byte)CharFlags.Letter,   // j\n            (byte)CharFlags.Letter,   // k\n            (byte)CharFlags.Letter,   // l\n            (byte)CharFlags.Letter,   // m\n            (byte)CharFlags.Letter,   // n\n            (byte)CharFlags.Letter,   // o\n            (byte)CharFlags.Letter,   // p\n            (byte)CharFlags.Letter,   // q\n            (byte)CharFlags.Letter,   // r\n            (byte)CharFlags.Letter,   // s\n            (byte)CharFlags.Letter,   // t\n            (byte)CharFlags.Letter,   // u\n            (byte)CharFlags.Letter,   // v\n            (byte)CharFlags.Letter,   // w\n            (byte)CharFlags.Letter,   // x\n            (byte)CharFlags.Letter,   // y\n            (byte)CharFlags.Letter,   // z\n            (byte)CharFlags.Punct,    // {\n            (byte)CharFlags.CompoundPunctStart,  // |\n            (byte)CharFlags.Punct,    // }\n            (byte)CharFlags.CompoundPunctStart,    // ~\n            (byte)CharFlags.Complex,\n\n            // 128 .. 159\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n\n            // 160 .. 191\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Letter, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Letter, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Letter, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n\n            // 192 .. \n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Complex,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Complex,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter\n        } 977518"];
813 [label="s_charProperties = new[]\n        {\n            // 0 .. 31\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex,\n            (byte)CharFlags.White,   // TAB\n            (byte)CharFlags.LF,      // LF\n            (byte)CharFlags.White,   // VT\n            (byte)CharFlags.White,   // FF\n            (byte)CharFlags.CR,      // CR\n            (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n\n            // 32 .. 63\n            (byte)CharFlags.White,    // SPC\n            (byte)CharFlags.CompoundPunctStart,    // !\n            (byte)CharFlags.Complex,  // '\n            (byte)CharFlags.Complex,  // #\n            (byte)CharFlags.Complex,  // $\n            (byte)CharFlags.CompoundPunctStart, // %\n            (byte)CharFlags.CompoundPunctStart, // &\n            (byte)CharFlags.Complex,  // '\n            (byte)CharFlags.Punct,    // (\n            (byte)CharFlags.Punct,    // )\n            (byte)CharFlags.CompoundPunctStart, // *\n            (byte)CharFlags.CompoundPunctStart, // +\n            (byte)CharFlags.Punct,    // ,\n            (byte)CharFlags.CompoundPunctStart, // -\n            (byte)CharFlags.Dot,      // .\n            (byte)CharFlags.Slash,    // /\n            (byte)CharFlags.Digit,    // 0\n            (byte)CharFlags.Digit,    // 1\n            (byte)CharFlags.Digit,    // 2\n            (byte)CharFlags.Digit,    // 3\n            (byte)CharFlags.Digit,    // 4\n            (byte)CharFlags.Digit,    // 5\n            (byte)CharFlags.Digit,    // 6\n            (byte)CharFlags.Digit,    // 7\n            (byte)CharFlags.Digit,    // 8\n            (byte)CharFlags.Digit,    // 9\n            (byte)CharFlags.CompoundPunctStart,  // :\n            (byte)CharFlags.Punct,    // ;\n            (byte)CharFlags.CompoundPunctStart,  // <\n            (byte)CharFlags.CompoundPunctStart,  // =\n            (byte)CharFlags.CompoundPunctStart,  // >\n            (byte)CharFlags.CompoundPunctStart,  // ?\n\n            // 64 .. 95\n            (byte)CharFlags.Complex,  // @\n            (byte)CharFlags.Letter,   // A\n            (byte)CharFlags.Letter,   // B\n            (byte)CharFlags.Letter,   // C\n            (byte)CharFlags.Letter,   // D\n            (byte)CharFlags.Letter,   // E\n            (byte)CharFlags.Letter,   // F\n            (byte)CharFlags.Letter,   // G\n            (byte)CharFlags.Letter,   // H\n            (byte)CharFlags.Letter,   // I\n            (byte)CharFlags.Letter,   // J\n            (byte)CharFlags.Letter,   // K\n            (byte)CharFlags.Letter,   // L\n            (byte)CharFlags.Letter,   // M\n            (byte)CharFlags.Letter,   // N\n            (byte)CharFlags.Letter,   // O\n            (byte)CharFlags.Letter,   // P\n            (byte)CharFlags.Letter,   // Q\n            (byte)CharFlags.Letter,   // R\n            (byte)CharFlags.Letter,   // S\n            (byte)CharFlags.Letter,   // T\n            (byte)CharFlags.Letter,   // U\n            (byte)CharFlags.Letter,   // V\n            (byte)CharFlags.Letter,   // W\n            (byte)CharFlags.Letter,   // X\n            (byte)CharFlags.Letter,   // Y\n            (byte)CharFlags.Letter,   // Z\n            (byte)CharFlags.Punct,    // [\n            (byte)CharFlags.Complex,  // \\\n            (byte)CharFlags.Punct,    // ]\n            (byte)CharFlags.CompoundPunctStart,    // ^\n            (byte)CharFlags.Letter,   // _\n\n            // 96 .. 127\n            (byte)CharFlags.Complex,  // `\n            (byte)CharFlags.Letter,   // a\n            (byte)CharFlags.Letter,   // b\n            (byte)CharFlags.Letter,   // c\n            (byte)CharFlags.Letter,   // d\n            (byte)CharFlags.Letter,   // e\n            (byte)CharFlags.Letter,   // f\n            (byte)CharFlags.Letter,   // g\n            (byte)CharFlags.Letter,   // h\n            (byte)CharFlags.Letter,   // i\n            (byte)CharFlags.Letter,   // j\n            (byte)CharFlags.Letter,   // k\n            (byte)CharFlags.Letter,   // l\n            (byte)CharFlags.Letter,   // m\n            (byte)CharFlags.Letter,   // n\n            (byte)CharFlags.Letter,   // o\n            (byte)CharFlags.Letter,   // p\n            (byte)CharFlags.Letter,   // q\n            (byte)CharFlags.Letter,   // r\n            (byte)CharFlags.Letter,   // s\n            (byte)CharFlags.Letter,   // t\n            (byte)CharFlags.Letter,   // u\n            (byte)CharFlags.Letter,   // v\n            (byte)CharFlags.Letter,   // w\n            (byte)CharFlags.Letter,   // x\n            (byte)CharFlags.Letter,   // y\n            (byte)CharFlags.Letter,   // z\n            (byte)CharFlags.Punct,    // {\n            (byte)CharFlags.CompoundPunctStart,  // |\n            (byte)CharFlags.Punct,    // }\n            (byte)CharFlags.CompoundPunctStart,    // ~\n            (byte)CharFlags.Complex,\n\n            // 128 .. 159\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n\n            // 160 .. 191\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Letter, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Letter, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n            (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Letter, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex, (byte)CharFlags.Complex,\n\n            // 192 .. \n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Complex,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Complex,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter,\n            (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter, (byte)CharFlags.Letter\n        } 977519"];
814 [label="return new InternalSyntax.Lexer(\n                text: MakeSourceText(text, offset),\n                options: options ?? CSharpParseOptions.Default); 977520"];
815 [label="return new InternalSyntax.Lexer(\n                text: MakeSourceText(text, offset),\n                options: options ?? CSharpParseOptions.Default); 977521"];
816 [label="return new InternalSyntax.Lexer(\n                text: MakeSourceText(text, offset),\n                options: options ?? CSharpParseOptions.Default); 977522"];
817 [label="new InternalSyntax.Lexer(\n                text: MakeSourceText(text, offset),\n                options: options ?? CSharpParseOptions.Default) 977523"];
818 [label="param Lexer(SourceText text) 977524"];
819 [label="param Lexer(CSharpParseOptions options) 977525"];
820 [label="param Lexer(bool allowPreprocessorDirectives = true) 977526"];
821 [label="param Lexer(bool interpolationFollowedByColon = false) 977527"];
822 [label="param Lexer(this) 977528"];
823 [label="text 977529"];
824 [label="param Lexer(this) 977530"];
825 [label="param AbstractLexer(SourceText text) 977531"];
826 [label="param AbstractLexer(this) 977532"];
827 [label="TextWindow 977533"];
828 [label="_errors 977534"];
829 [label="InvalidCharacter = char.MaxValue 977535"];
830 [label="2048 977536"];
831 [label="DefaultWindowLength = 2048 977537"];
832 [label="() => new char[DefaultWindowLength] 977538"];
833 [label="new ObjectPool<char[]>(() => new char[DefaultWindowLength]) 977539"];
834 [label="s_windowPool = new ObjectPool<char[]>(() => new char[DefaultWindowLength]) 977540"];
835 [label="this.TextWindow = new SlidingTextWindow(text); 977541"];
836 [label="this.TextWindow = new SlidingTextWindow(text); 977542"];
837 [label="new SlidingTextWindow(text) 977543"];
838 [label="param SlidingTextWindow(SourceText text) 977544"];
839 [label="param SlidingTextWindow(this) 977545"];
840 [label="_text 977546"];
841 [label="_basis 977547"];
842 [label="_offset 977548"];
843 [label="_textEnd 977549"];
844 [label="_characterWindow 977550"];
845 [label="_characterWindowCount 977551"];
846 [label="_lexemeStart 977552"];
847 [label="_strings 977553"];
848 [label="_text 977554"];
849 [label="_basis = 0; 977555"];
850 [label="_basis 977556"];
851 [label="_offset = 0; 977557"];
852 [label="_offset 977558"];
853 [label="_textEnd 977559"];
854 [label="_strings = StringTable.GetInstance(); 977560"];
855 [label="_strings 977561"];
856 [label="_characterWindow = s_windowPool.Allocate(); 977562"];
857 [label="_characterWindow 977563"];
858 [label="_lexemeStart = 0; 977564"];
859 [label="_lexemeStart 977565"];
860 [label="this.TextWindow 977566"];
861 [label="_options 977567"];
862 [label="_mode 977568"];
863 [label="_builder 977569"];
864 [label="_identBuffer 977570"];
865 [label="_identLen 977571"];
866 [label="_cache 977572"];
867 [label="_allowPreprocessorDirectives 977573"];
868 [label="_interpolationFollowedByColon 977574"];
869 [label="_xmlParser 977575"];
870 [label="_badTokenCount 977576"];
871 [label="10 977577"];
872 [label="new SyntaxListBuilder(10) 977578"];
873 [label="_leadingTriviaCache = new SyntaxListBuilder(10) 977579"];
874 [label="10 977580"];
875 [label="new SyntaxListBuilder(10) 977581"];
876 [label="_trailingTriviaCache = new SyntaxListBuilder(10) 977582"];
877 [label="_createWhitespaceTriviaFunction 977583"];
878 [label="_createQuickTokenFunction 977584"];
879 [label="Debug.Assert(options != null); 977585"];
880 [label="Debug.Assert(options != null); 977586"];
881 [label="_options 977587"];
882 [label="_builder = new StringBuilder(); 977588"];
883 [label="_builder 977589"];
884 [label="_identBuffer = new char[32]; 977590"];
885 [label="_identBuffer 977591"];
886 [label="512 977592"];
887 [label="(key) =>\n                            {\n                                var kind = SyntaxFacts.GetKeywordKind(key);\n                                if (kind == SyntaxKind.None)\n                                {\n                                    kind = SyntaxFacts.GetContextualKeywordKind(key);\n                                }\n\n                                return kind;\n                            } 977593"];
888 [label="CachingIdentityFactory<string, SyntaxKind>.CreatePool(\n                            512,\n                            (key) =>\n                            {\n                                var kind = SyntaxFacts.GetKeywordKind(key);\n                                if (kind == SyntaxKind.None)\n                                {\n                                    kind = SyntaxFacts.GetContextualKeywordKind(key);\n                                }\n\n                                return kind;\n                            }) 977594"];
889 [label="s_keywordKindPool =\n            CachingIdentityFactory<string, SyntaxKind>.CreatePool(\n                            512,\n                            (key) =>\n                            {\n                                var kind = SyntaxFacts.GetKeywordKind(key);\n                                if (kind == SyntaxKind.None)\n                                {\n                                    kind = SyntaxFacts.GetContextualKeywordKind(key);\n                                }\n\n                                return kind;\n                            }) 977595"];
890 [label="10 977596"];
891 [label="MaxKeywordLength = 10 977597"];
892 [label="_cache = new LexerCache(); 977598"];
893 [label="new LexerCache() 977599"];
894 [label="param LexerCache(this) 977600"];
895 [label="_triviaMap 977601"];
896 [label="_tokenMap 977602"];
897 [label="_keywordKindMap 977603"];
898 [label="_triviaMap = TextKeyedCache<SyntaxTrivia>.GetInstance(); 977604"];
899 [label="_triviaMap 977605"];
900 [label="_tokenMap = TextKeyedCache<SyntaxToken>.GetInstance(); 977606"];
901 [label="_tokenMap 977607"];
902 [label="_keywordKindMap = s_keywordKindPool.Allocate(); 977608"];
903 [label="_keywordKindMap 977609"];
904 [label="_cache 977610"];
905 [label="_createQuickTokenFunction 977611"];
906 [label="_allowPreprocessorDirectives 977612"];
907 [label="_interpolationFollowedByColon 977613"];
908 [label="using (var lexer = MakeLexer(text, offset, options))\n            using (var parser = MakeParser(lexer))\n            {\n                var node = parser.ParseCompilationUnit();\n                return (CompilationUnitSyntax)node.CreateRed();\n            } 977614"];
909 [label="using (var parser = MakeParser(lexer))\n            {\n                var node = parser.ParseCompilationUnit();\n                return (CompilationUnitSyntax)node.CreateRed();\n            } 977615"];
910 [label="MakeParser(lexer) 977616"];
911 [label="param MakeParser(InternalSyntax.Lexer lexer) 977617"];
912 [label="LastTerminatorState = (int)TerminatorState.IsEndOfRecordSignature 977618"];
913 [label="return new InternalSyntax.LanguageParser(lexer, oldTree: null, changes: null); 977619"];
914 [label="return new InternalSyntax.LanguageParser(lexer, oldTree: null, changes: null); 977620"];
915 [label="new InternalSyntax.LanguageParser(lexer, oldTree: null, changes: null) 977621"];
916 [label="param LanguageParser(Lexer lexer) 977622"];
917 [label="param LanguageParser(CSharp.CSharpSyntaxNode oldTree) 977623"];
918 [label="param LanguageParser(IEnumerable<TextChangeRange> changes) 977624"];
919 [label="param LanguageParser(LexerMode lexerMode = LexerMode.Syntax) 977625"];
920 [label="param LanguageParser(CancellationToken cancellationToken = default(CancellationToken)) 977626"];
921 [label="param LanguageParser(this) 977627"];
922 [label="() => new BlendedNode[32] 977628"];
923 [label="2 977629"];
924 [label="new ObjectPool<BlendedNode[]>(() => new BlendedNode[32], 2) 977630"];
925 [label="s_blendedNodesPool = new ObjectPool<BlendedNode[]>(() => new BlendedNode[32], 2) 977631"];
926 [label="lexer 977632"];
927 [label="lexerMode 977633"];
928 [label="oldTree 977634"];
929 [label="changes 977635"];
930 [label="false 977636"];
931 [label="true 977637"];
932 [label="cancellationToken 977638"];
933 [label="param LanguageParser(this) 977639"];
934 [label="param SyntaxParser(Lexer lexer) 977640"];
935 [label="param SyntaxParser(LexerMode mode) 977641"];
936 [label="param SyntaxParser(CSharp.CSharpSyntaxNode oldTree) 977642"];
937 [label="param SyntaxParser(IEnumerable<TextChangeRange> changes) 977643"];
938 [label="param SyntaxParser(bool allowModeReset) 977644"];
939 [label="param SyntaxParser(bool preLexIfNotIncremental = false) 977645"];
940 [label="param SyntaxParser(CancellationToken cancellationToken = default(CancellationToken)) 977646"];
941 [label="param SyntaxParser(this) 977647"];
942 [label="lexer 977648"];
943 [label="_isIncremental 977649"];
944 [label="_allowModeReset 977650"];
945 [label="_mode 977651"];
946 [label="_currentToken 977652"];
947 [label="_lexedTokens 977653"];
948 [label="_prevTokenTrailingTrivia 977654"];
949 [label="_firstToken 977655"];
950 [label="_tokenOffset 977656"];
951 [label="_tokenCount 977657"];
952 [label="_resetCount 977658"];
953 [label="_resetStart 977659"];
954 [label="_blendedTokens 977660"];
955 [label="this.lexer 977661"];
956 [label="_mode 977662"];
957 [label="_allowModeReset 977663"];
958 [label="this.cancellationToken 977664"];
959 [label="_currentNode = default(BlendedNode); 977665"];
960 [label="_currentNode 977666"];
961 [label="_isIncremental = oldTree != null; 977667"];
962 [label="_isIncremental = oldTree != null; 977668"];
963 [label="_isIncremental 977669"];
964 [label="this.IsIncremental 977670"];
965 [label="get\n            {\n                return _isIncremental;\n            } 977671"];
966 [label="return _isIncremental; 977672"];
967 [label="if (this.IsIncremental || allowModeReset)\n            {\n                _firstBlender = new Blender(lexer, oldTree, changes);\n                _blendedTokens = s_blendedNodesPool.Allocate();\n            }\n            else\n            {\n                _firstBlender = default(Blender);\n                _lexedTokens = new ArrayElement<SyntaxToken>[32];\n            } 977673"];
968 [label="if (this.IsIncremental || allowModeReset)\n            {\n                _firstBlender = new Blender(lexer, oldTree, changes);\n                _blendedTokens = s_blendedNodesPool.Allocate();\n            }\n            else\n            {\n                _firstBlender = default(Blender);\n                _lexedTokens = new ArrayElement<SyntaxToken>[32];\n            } 977674"];
969 [label="_firstBlender = default(Blender); 977675"];
970 [label="_firstBlender 977676"];
971 [label="_lexedTokens = new ArrayElement<SyntaxToken>[32]; 977677"];
972 [label="_lexedTokens 977678"];
973 [label="this.IsIncremental 977679"];
974 [label="get\n            {\n                return _isIncremental;\n            } 977680"];
975 [label="return _isIncremental; 977681"];
976 [label="if (preLexIfNotIncremental && !this.IsIncremental && !cancellationToken.CanBeCanceled)\n            {\n                this.PreLex();\n            } 977682"];
977 [label="if (preLexIfNotIncremental && !this.IsIncremental && !cancellationToken.CanBeCanceled)\n            {\n                this.PreLex();\n            } 977683"];
978 [label="if (preLexIfNotIncremental && !this.IsIncremental && !cancellationToken.CanBeCanceled)\n            {\n                this.PreLex();\n            } 977684"];
979 [label="this.PreLex() 977685"];
980 [label="param PreLex(this) 977686"];
981 [label="var size = Math.Min(4096, Math.Max(32, this.lexer.TextWindow.Text.Length / 2)); 977687"];
982 [label="this.lexer.TextWindow.Text 977688"];
983 [label="=> _text 977689"];
984 [label="_text 977690"];
985 [label="var size = Math.Min(4096, Math.Max(32, this.lexer.TextWindow.Text.Length / 2)); 977691"];
986 [label="_lexedTokens = new ArrayElement<SyntaxToken>[size]; 977692"];
987 [label="_lexedTokens 977693"];
988 [label="var lexer = this.lexer; 977694"];
989 [label="var mode = _mode; 977695"];
990 [label="for (int i = 0; i < size; i++)\n            {\n                var token = lexer.Lex(mode);\n                this.AddLexedToken(token);\n                if (token.Kind == SyntaxKind.EndOfFileToken)\n                {\n                    break;\n                }\n            } 977696"];
991 [label="for (int i = 0; i < size; i++)\n            {\n                var token = lexer.Lex(mode);\n                this.AddLexedToken(token);\n                if (token.Kind == SyntaxKind.EndOfFileToken)\n                {\n                    break;\n                }\n            } 977697"];
992 [label="var token = lexer.Lex(mode); 977698"];
993 [label="lexer.Lex(mode) 977699"];
994 [label="param Lex(LexerMode mode) 977700"];
995 [label="param Lex(this) 977701"];
996 [label="TokensLexed++; 977702"];
997 [label="_mode 977703"];
998 [label="switch (_mode)\n            {\n                case LexerMode.Syntax:\n                case LexerMode.DebuggerSyntax:\n                    return this.QuickScanSyntaxToken() ?? this.LexSyntaxToken();\n                case LexerMode.Directive:\n                    return this.LexDirectiveToken();\n            } 977704"];
999 [label="return this.QuickScanSyntaxToken() ?? this.LexSyntaxToken(); 977705"];
1000 [label="return this.QuickScanSyntaxToken() ?? this.LexSyntaxToken(); 977706"];
1001 [label="param Start(this) 977707"];
1002 [label="TextWindow.Start() 977708"];
1003 [label="param Start(this) 977709"];
1004 [label="_lexemeStart 977710"];
1005 [label="TextWindow.Start(); 977711"];
1006 [label="_errors = null; 977712"];
1007 [label="_errors 977713"];
1008 [label="get\n            {\n                return _offset;\n            } 977714"];
1009 [label="return _offset; 977715"];
1010 [label="return this.QuickScanSyntaxToken() ?? this.LexSyntaxToken(); 977716"];
1011 [label="get\n            {\n                return _characterWindowCount;\n            } 977717"];
1012 [label="return _characterWindowCount; 977718"];
1013 [label="get\n            {\n                return _characterWindow;\n            } 977719"];
1014 [label="return _characterWindow; 977720"];
1015 [label="param AdvanceChar(int n) 977721"];
1016 [label="param AdvanceChar(this) 977722"];
1017 [label="_offset += n; 977723"];
1018 [label="_offset 977724"];
1019 [label="get\n            {\n                return _basis + _lexemeStart;\n            } 977725"];
1020 [label="return _basis + _lexemeStart; 977726"];
1021 [label="return this.QuickScanSyntaxToken() ?? this.LexSyntaxToken(); 977727"];
1022 [label="param Reset(int position) 977728"];
1023 [label="param Reset(this) 977729"];
1024 [label="int relative = position - _basis; 977730"];
1025 [label="if (relative >= 0 && relative <= _characterWindowCount)\n            {\n                _offset = relative;\n            }\n            else\n            {\n                // we need to reread text buffer\n                int amountToRead = Math.Min(_text.Length, position + _characterWindow.Length) - position;\n                amountToRead = Math.Max(amountToRead, 0);\n                if (amountToRead > 0)\n                {\n                    _text.CopyTo(position, _characterWindow, 0, amountToRead);\n                }\n\n                _lexemeStart = 0;\n                _offset = 0;\n                _basis = position;\n                _characterWindowCount = amountToRead;\n            } 977731"];
1026 [label="if (relative >= 0 && relative <= _characterWindowCount)\n            {\n                _offset = relative;\n            }\n            else\n            {\n                // we need to reread text buffer\n                int amountToRead = Math.Min(_text.Length, position + _characterWindow.Length) - position;\n                amountToRead = Math.Max(amountToRead, 0);\n                if (amountToRead > 0)\n                {\n                    _text.CopyTo(position, _characterWindow, 0, amountToRead);\n                }\n\n                _lexemeStart = 0;\n                _offset = 0;\n                _basis = position;\n                _characterWindowCount = amountToRead;\n            } 977732"];
1027 [label="if (relative >= 0 && relative <= _characterWindowCount)\n            {\n                _offset = relative;\n            }\n            else\n            {\n                // we need to reread text buffer\n                int amountToRead = Math.Min(_text.Length, position + _characterWindow.Length) - position;\n                amountToRead = Math.Max(amountToRead, 0);\n                if (amountToRead > 0)\n                {\n                    _text.CopyTo(position, _characterWindow, 0, amountToRead);\n                }\n\n                _lexemeStart = 0;\n                _offset = 0;\n                _basis = position;\n                _characterWindowCount = amountToRead;\n            } 977733"];
1028 [label="_offset 977734"];
1029 [label="this.LexSyntaxToken() 977735"];
1030 [label="param LexSyntaxToken(this) 977736"];
1031 [label="_leadingTriviaCache.Clear(); 977737"];
1032 [label="TextWindow.Position 977738"];
1033 [label="get\n            {\n                return _basis + _offset;\n            } 977739"];
1034 [label="return _basis + _offset; 977740"];
1035 [label="this.LexSyntaxTrivia(afterFirstToken: TextWindow.Position > 0, isTrailing: false, triviaList: ref _leadingTriviaCache); 977741"];
1036 [label="this.LexSyntaxTrivia(afterFirstToken: TextWindow.Position > 0, isTrailing: false, triviaList: ref _leadingTriviaCache); 977742"];
1037 [label="this.LexSyntaxTrivia(afterFirstToken: TextWindow.Position > 0, isTrailing: false, triviaList: ref _leadingTriviaCache); 977743"];
1038 [label="this.LexSyntaxTrivia(afterFirstToken: TextWindow.Position > 0, isTrailing: false, triviaList: ref _leadingTriviaCache) 977744"];
1039 [label="param LexSyntaxTrivia(bool afterFirstToken) 977745"];
1040 [label="param LexSyntaxTrivia(bool isTrailing) 977746"];
1041 [label="param LexSyntaxTrivia(ref SyntaxListBuilder triviaList) 977747"];
1042 [label="param LexSyntaxTrivia(this) 977748"];
1043 [label="bool onlyWhitespaceOnLine = !isTrailing; 977749"];
1044 [label="while (true)\n            {\n                this.Start();\n                char ch = TextWindow.PeekChar();\n                if (ch == ' ')\n                {\n                    this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                    continue;\n                }\n                else if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                }\n\n                switch (ch)\n                {\n                    case ' ':\n                    case '\\t':       // Horizontal tab\n                    case '\\v':       // Vertical Tab\n                    case '\\f':       // Form-feed\n                    case '\\u001A':\n                        this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                        break;\n                    case '/':\n                        if ((ch = TextWindow.PeekChar(1)) == '/')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '/' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.SingleLine), ref triviaList);\n                                break;\n                            }\n\n                            // normal single line comment\n                            this.ScanToEndOfLine();\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n                        else if (ch == '*')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '*' &&\n                                TextWindow.PeekChar(3) != '*' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.Delimited), ref triviaList);\n                                break;\n                            }\n\n                            bool isTerminated;\n                            this.ScanMultiLineComment(out isTerminated);\n                            if (!isTerminated)\n                            {\n                                // The comment didn't end.  Report an error at the start point.\n                                this.AddError(ErrorCode.ERR_OpenEndedComment);\n                            }\n\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n\n                        // not trivia\n                        return;\n                    case '\\r':\n                    case '\\n':\n                        this.AddTrivia(this.ScanEndOfLine(), ref triviaList);\n                        if (isTrailing)\n                        {\n                            return;\n                        }\n\n                        onlyWhitespaceOnLine = true;\n                        break;\n                    case '#':\n                        if (_allowPreprocessorDirectives)\n                        {\n                            this.LexDirectiveAndExcludedTrivia(afterFirstToken, isTrailing || !onlyWhitespaceOnLine, ref triviaList);\n                            break;\n                        }\n                        else\n                        {\n                            return;\n                        }\n\n                    // Note: we specifically do not look for the >>>>>>> pattern as the start of\n                    // a conflict marker trivia.  That's because *technically* (albeit unlikely)\n                    // >>>>>>> could be the end of a very generic construct.  So, instead, we only\n                    // recognize >>>>>>> as we are scanning the trivia after a ======= marker \n                    // (which can never be part of legal code).\n                    // case '>':\n                    case '=':\n                    case '<':\n                        if (!isTrailing)\n                        {\n                            if (IsConflictMarkerTrivia())\n                            {\n                                this.LexConflictMarkerTrivia(ref triviaList);\n                                break;\n                            }\n                        }\n\n                        return;\n\n                    default:\n                        return;\n                }\n            } 977750"];
1045 [label="this.Start() 977751"];
1046 [label="param Start(this) 977752"];
1047 [label="TextWindow.Start() 977753"];
1048 [label="param Start(this) 977754"];
1049 [label="TextWindow.Start(); 977755"];
1050 [label="_errors = null; 977756"];
1051 [label="_errors 977757"];
1052 [label="this.Start(); 977758"];
1053 [label="TextWindow.PeekChar() 977759"];
1054 [label="param PeekChar(this) 977760"];
1055 [label="if (_offset >= _characterWindowCount\n                && !MoreChars())\n            {\n                return InvalidCharacter;\n            } 977761"];
1056 [label="MoreChars() 977762"];
1057 [label="param MoreChars(this) 977763"];
1058 [label="if (_offset >= _characterWindowCount)\n            {\n                if (this.Position >= _textEnd)\n                {\n                    return false;\n                }\n\n                // if lexeme scanning is sufficiently into the char buffer, \n                // then refocus the window onto the lexeme\n                if (_lexemeStart > (_characterWindowCount / 4))\n                {\n                    Array.Copy(_characterWindow,\n                        _lexemeStart,\n                        _characterWindow,\n                        0,\n                        _characterWindowCount - _lexemeStart);\n                    _characterWindowCount -= _lexemeStart;\n                    _offset -= _lexemeStart;\n                    _basis += _lexemeStart;\n                    _lexemeStart = 0;\n                }\n\n                if (_characterWindowCount >= _characterWindow.Length)\n                {\n                    // grow char array, since we need more contiguous space\n                    char[] oldWindow = _characterWindow;\n                    char[] newWindow = new char[_characterWindow.Length * 2];\n                    Array.Copy(oldWindow, 0, newWindow, 0, _characterWindowCount);\n                    s_windowPool.ForgetTrackedObject(oldWindow, newWindow);\n                    _characterWindow = newWindow;\n                }\n\n                int amountToRead = Math.Min(_textEnd - (_basis + _characterWindowCount),\n                    _characterWindow.Length - _characterWindowCount);\n                _text.CopyTo(_basis + _characterWindowCount,\n                    _characterWindow,\n                    _characterWindowCount,\n                    amountToRead);\n                _characterWindowCount += amountToRead;\n                return amountToRead > 0;\n            } 977764"];
1059 [label="this.Position 977765"];
1060 [label="get\n            {\n                return _basis + _offset;\n            } 977766"];
1061 [label="return _basis + _offset; 977767"];
1062 [label="if (this.Position >= _textEnd)\n                {\n                    return false;\n                } 977768"];
1063 [label="return false; 977769"];
1064 [label="if (_offset >= _characterWindowCount\n                && !MoreChars())\n            {\n                return InvalidCharacter;\n            } 977770"];
1065 [label="return InvalidCharacter; 977771"];
1066 [label="char ch = TextWindow.PeekChar(); 977772"];
1067 [label="if (ch == ' ')\n                {\n                    this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                    continue;\n                }\n                else if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 977773"];
1068 [label="if (ch == ' ')\n                {\n                    this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                    continue;\n                }\n                else if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 977774"];
1069 [label="if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 977775"];
1070 [label="new SyntaxKindEqualityComparer() 977776"];
1071 [label="param SyntaxKindEqualityComparer(this) 977777"];
1072 [label="public static IEqualityComparer<SyntaxKind> EqualityComparer { get; } = new SyntaxKindEqualityComparer(); 977778"];
1073 [label="if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    } 977779"];
1074 [label="SyntaxFacts.IsWhitespace(ch) 977780"];
1075 [label="param IsWhitespace(char ch) 977781"];
1076 [label="return ch == ' '\n                || ch == '\\t'\n                || ch == '\\v'\n                || ch == '\\f'\n                || ch == '\\u00A0' // NO-BREAK SPACE\n                                  // The native compiler, in ScanToken, recognized both the byte-order\n                                  // marker '\\uFEFF' as well as ^Z '\\u001A' as whitespace, although\n                                  // this is not to spec since neither of these are in Zs. For the\n                                  // sake of compatibility, we recognize them both here. Note: '\\uFEFF'\n                                  // also happens to be a formatting character (class Cf), which means\n                                  // that it is a legal non-initial identifier character. So it's\n                                  // especially funny, because it will be whitespace UNLESS we happen\n                                  // to be scanning an identifier or keyword, in which case it winds\n                                  // up in the identifier or keyword.\n                || ch == '\\uFEFF'\n                || ch == '\\u001A'\n                || (ch > 255 && CharUnicodeInfo.GetUnicodeCategory(ch) == UnicodeCategory.SpaceSeparator); 977782"];
1077 [label="return ch == ' '\n                || ch == '\\t'\n                || ch == '\\v'\n                || ch == '\\f'\n                || ch == '\\u00A0' // NO-BREAK SPACE\n                                  // The native compiler, in ScanToken, recognized both the byte-order\n                                  // marker '\\uFEFF' as well as ^Z '\\u001A' as whitespace, although\n                                  // this is not to spec since neither of these are in Zs. For the\n                                  // sake of compatibility, we recognize them both here. Note: '\\uFEFF'\n                                  // also happens to be a formatting character (class Cf), which means\n                                  // that it is a legal non-initial identifier character. So it's\n                                  // especially funny, because it will be whitespace UNLESS we happen\n                                  // to be scanning an identifier or keyword, in which case it winds\n                                  // up in the identifier or keyword.\n                || ch == '\\uFEFF'\n                || ch == '\\u001A'\n                || (ch > 255 && CharUnicodeInfo.GetUnicodeCategory(ch) == UnicodeCategory.SpaceSeparator); 977783"];
1078 [label="return ch == ' '\n                || ch == '\\t'\n                || ch == '\\v'\n                || ch == '\\f'\n                || ch == '\\u00A0' // NO-BREAK SPACE\n                                  // The native compiler, in ScanToken, recognized both the byte-order\n                                  // marker '\\uFEFF' as well as ^Z '\\u001A' as whitespace, although\n                                  // this is not to spec since neither of these are in Zs. For the\n                                  // sake of compatibility, we recognize them both here. Note: '\\uFEFF'\n                                  // also happens to be a formatting character (class Cf), which means\n                                  // that it is a legal non-initial identifier character. So it's\n                                  // especially funny, because it will be whitespace UNLESS we happen\n                                  // to be scanning an identifier or keyword, in which case it winds\n                                  // up in the identifier or keyword.\n                || ch == '\\uFEFF'\n                || ch == '\\u001A'\n                || (ch > 255 && CharUnicodeInfo.GetUnicodeCategory(ch) == UnicodeCategory.SpaceSeparator); 977784"];
1079 [label="if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    } 977785"];
1080 [label="SyntaxFacts.IsNewLine(ch) 977786"];
1081 [label="param IsNewLine(char ch) 977787"];
1082 [label="return ch == '\\r'\n                || ch == '\\n'\n                || ch == '\\u0085'\n                || ch == '\\u2028'\n                || ch == '\\u2029'; 977788"];
1083 [label="return ch == '\\r'\n                || ch == '\\n'\n                || ch == '\\u0085'\n                || ch == '\\u2028'\n                || ch == '\\u2029'; 977789"];
1084 [label="switch (ch)\n                {\n                    case ' ':\n                    case '\\t':       // Horizontal tab\n                    case '\\v':       // Vertical Tab\n                    case '\\f':       // Form-feed\n                    case '\\u001A':\n                        this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                        break;\n                    case '/':\n                        if ((ch = TextWindow.PeekChar(1)) == '/')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '/' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.SingleLine), ref triviaList);\n                                break;\n                            }\n\n                            // normal single line comment\n                            this.ScanToEndOfLine();\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n                        else if (ch == '*')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '*' &&\n                                TextWindow.PeekChar(3) != '*' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.Delimited), ref triviaList);\n                                break;\n                            }\n\n                            bool isTerminated;\n                            this.ScanMultiLineComment(out isTerminated);\n                            if (!isTerminated)\n                            {\n                                // The comment didn't end.  Report an error at the start point.\n                                this.AddError(ErrorCode.ERR_OpenEndedComment);\n                            }\n\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n\n                        // not trivia\n                        return;\n                    case '\\r':\n                    case '\\n':\n                        this.AddTrivia(this.ScanEndOfLine(), ref triviaList);\n                        if (isTrailing)\n                        {\n                            return;\n                        }\n\n                        onlyWhitespaceOnLine = true;\n                        break;\n                    case '#':\n                        if (_allowPreprocessorDirectives)\n                        {\n                            this.LexDirectiveAndExcludedTrivia(afterFirstToken, isTrailing || !onlyWhitespaceOnLine, ref triviaList);\n                            break;\n                        }\n                        else\n                        {\n                            return;\n                        }\n\n                    // Note: we specifically do not look for the >>>>>>> pattern as the start of\n                    // a conflict marker trivia.  That's because *technically* (albeit unlikely)\n                    // >>>>>>> could be the end of a very generic construct.  So, instead, we only\n                    // recognize >>>>>>> as we are scanning the trivia after a ======= marker \n                    // (which can never be part of legal code).\n                    // case '>':\n                    case '=':\n                    case '<':\n                        if (!isTrailing)\n                        {\n                            if (IsConflictMarkerTrivia())\n                            {\n                                this.LexConflictMarkerTrivia(ref triviaList);\n                                break;\n                            }\n                        }\n\n                        return;\n\n                    default:\n                        return;\n                } 977790"];
1085 [label="return; 977791"];
1086 [label="var leading = _leadingTriviaCache; 977792"];
1087 [label="var tokenInfo = default(TokenInfo); 977793"];
1088 [label="this.Start() 977794"];
1089 [label="param Start(this) 977795"];
1090 [label="TextWindow.Start() 977796"];
1091 [label="param Start(this) 977797"];
1092 [label="TextWindow.Start(); 977798"];
1093 [label="_errors = null; 977799"];
1094 [label="_errors 977800"];
1095 [label="this.Start(); 977801"];
1096 [label="this.ScanSyntaxToken(ref tokenInfo); 977802"];
1097 [label="this.ScanSyntaxToken(ref tokenInfo); 977803"];
1098 [label="this.ScanSyntaxToken(ref tokenInfo); 977804"];
1099 [label="get\n            {\n                return _basis + _offset;\n            } 977805"];
1100 [label="return _basis + _offset; 977806"];
1101 [label="param PeekChar(this) 977807"];
1102 [label="if (_offset >= _characterWindowCount\n                && !MoreChars())\n            {\n                return InvalidCharacter;\n            } 977808"];
1103 [label="MoreChars() 977809"];
1104 [label="param MoreChars(this) 977810"];
1105 [label="if (_offset >= _characterWindowCount)\n            {\n                if (this.Position >= _textEnd)\n                {\n                    return false;\n                }\n\n                // if lexeme scanning is sufficiently into the char buffer, \n                // then refocus the window onto the lexeme\n                if (_lexemeStart > (_characterWindowCount / 4))\n                {\n                    Array.Copy(_characterWindow,\n                        _lexemeStart,\n                        _characterWindow,\n                        0,\n                        _characterWindowCount - _lexemeStart);\n                    _characterWindowCount -= _lexemeStart;\n                    _offset -= _lexemeStart;\n                    _basis += _lexemeStart;\n                    _lexemeStart = 0;\n                }\n\n                if (_characterWindowCount >= _characterWindow.Length)\n                {\n                    // grow char array, since we need more contiguous space\n                    char[] oldWindow = _characterWindow;\n                    char[] newWindow = new char[_characterWindow.Length * 2];\n                    Array.Copy(oldWindow, 0, newWindow, 0, _characterWindowCount);\n                    s_windowPool.ForgetTrackedObject(oldWindow, newWindow);\n                    _characterWindow = newWindow;\n                }\n\n                int amountToRead = Math.Min(_textEnd - (_basis + _characterWindowCount),\n                    _characterWindow.Length - _characterWindowCount);\n                _text.CopyTo(_basis + _characterWindowCount,\n                    _characterWindow,\n                    _characterWindowCount,\n                    amountToRead);\n                _characterWindowCount += amountToRead;\n                return amountToRead > 0;\n            } 977811"];
1106 [label="this.Position 977812"];
1107 [label="if (this.Position >= _textEnd)\n                {\n                    return false;\n                } 977813"];
1108 [label="return false; 977814"];
1109 [label="if (_offset >= _characterWindowCount\n                && !MoreChars())\n            {\n                return InvalidCharacter;\n            } 977815"];
1110 [label="return InvalidCharacter; 977816"];
1111 [label="param IsReallyAtEnd(this) 977817"];
1112 [label="return _offset >= _characterWindowCount && Position >= _textEnd; 977818"];
1113 [label="Position 977819"];
1114 [label="get\n            {\n                return _basis + _offset;\n            } 977820"];
1115 [label="return _basis + _offset; 977821"];
1116 [label="return _offset >= _characterWindowCount && Position >= _textEnd; 977822"];
1117 [label="ConsList<Directive>.Empty 977823"];
1118 [label="new DirectiveStack(ConsList<Directive>.Empty) 977824"];
1119 [label="param DirectiveStack(ConsList<Directive> directives) 977825"];
1120 [label="param DirectiveStack(this) 977826"];
1121 [label="_directives 977827"];
1122 [label="Empty = new DirectiveStack(ConsList<Directive>.Empty) 977828"];
1123 [label="null 977829"];
1124 [label="new DirectiveStack(null) 977830"];
1125 [label="param DirectiveStack(ConsList<Directive> directives) 977831"];
1126 [label="param DirectiveStack(this) 977832"];
1127 [label="_directives 977833"];
1128 [label="Null = new DirectiveStack(null) 977834"];
1129 [label="param HasUnfinishedIf(this) 977835"];
1130 [label="var prev = GetPreviousIfElifElseOrRegion(_directives); 977836"];
1131 [label="GetPreviousIfElifElseOrRegion(_directives) 977837"];
1132 [label="param GetPreviousIfElifElseOrRegion(ConsList<Directive> directives) 977838"];
1133 [label="var current = directives; 977839"];
1134 [label="while (current != null && current.Any())\n            {\n                switch (current.Head.Kind)\n                {\n                    case SyntaxKind.IfDirectiveTrivia:\n                    case SyntaxKind.ElifDirectiveTrivia:\n                    case SyntaxKind.ElseDirectiveTrivia:\n                    case SyntaxKind.RegionDirectiveTrivia:\n                        return current;\n                }\n\n                current = current.Tail;\n            } 977840"];
1135 [label="while (current != null && current.Any())\n            {\n                switch (current.Head.Kind)\n                {\n                    case SyntaxKind.IfDirectiveTrivia:\n                    case SyntaxKind.ElifDirectiveTrivia:\n                    case SyntaxKind.ElseDirectiveTrivia:\n                    case SyntaxKind.RegionDirectiveTrivia:\n                        return current;\n                }\n\n                current = current.Tail;\n            } 977841"];
1136 [label="return current; 977842"];
1137 [label="return prev != null && prev.Any() && prev.Head.Kind != SyntaxKind.RegionDirectiveTrivia; 977843"];
1138 [label="return prev != null && prev.Any() && prev.Head.Kind != SyntaxKind.RegionDirectiveTrivia; 977844"];
1139 [label="param HasUnfinishedRegion(this) 977845"];
1140 [label="var prev = GetPreviousIfElifElseOrRegion(_directives); 977846"];
1141 [label="GetPreviousIfElifElseOrRegion(_directives) 977847"];
1142 [label="param GetPreviousIfElifElseOrRegion(ConsList<Directive> directives) 977848"];
1143 [label="while (current != null && current.Any())\n            {\n                switch (current.Head.Kind)\n                {\n                    case SyntaxKind.IfDirectiveTrivia:\n                    case SyntaxKind.ElifDirectiveTrivia:\n                    case SyntaxKind.ElseDirectiveTrivia:\n                    case SyntaxKind.RegionDirectiveTrivia:\n                        return current;\n                }\n\n                current = current.Tail;\n            } 977849"];
1144 [label="while (current != null && current.Any())\n            {\n                switch (current.Head.Kind)\n                {\n                    case SyntaxKind.IfDirectiveTrivia:\n                    case SyntaxKind.ElifDirectiveTrivia:\n                    case SyntaxKind.ElseDirectiveTrivia:\n                    case SyntaxKind.RegionDirectiveTrivia:\n                        return current;\n                }\n\n                current = current.Tail;\n            } 977850"];
1145 [label="return prev != null && prev.Any() && prev.Head.Kind == SyntaxKind.RegionDirectiveTrivia; 977851"];
1146 [label="return prev != null && prev.Any() && prev.Head.Kind == SyntaxKind.RegionDirectiveTrivia; 977852"];
1147 [label="var errors = this.GetErrors(GetFullWidth(leading)); 977853"];
1148 [label="GetFullWidth(leading) 977854"];
1149 [label="param GetFullWidth(SyntaxListBuilder builder) 977855"];
1150 [label="int width = 0; 977856"];
1151 [label="if (builder != null)\n            {\n                for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                }\n            } 977857"];
1152 [label="if (builder != null)\n            {\n                for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                }\n            } 977858"];
1153 [label="for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                } 977859"];
1154 [label="for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                } 977860"];
1155 [label="return width; 977861"];
1156 [label="var errors = this.GetErrors(GetFullWidth(leading)); 977862"];
1157 [label="this.GetErrors(GetFullWidth(leading)) 977863"];
1158 [label="param GetErrors(int leadingTriviaWidth) 977864"];
1159 [label="param GetErrors(this) 977865"];
1160 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 977866"];
1161 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 977867"];
1162 [label="return null; 977868"];
1163 [label="var errors = this.GetErrors(GetFullWidth(leading)); 977869"];
1164 [label="_trailingTriviaCache.Clear(); 977870"];
1165 [label="this.LexSyntaxTrivia(afterFirstToken: true, isTrailing: true, triviaList: ref _trailingTriviaCache); 977871"];
1166 [label="this.LexSyntaxTrivia(afterFirstToken: true, isTrailing: true, triviaList: ref _trailingTriviaCache); 977872"];
1167 [label="this.LexSyntaxTrivia(afterFirstToken: true, isTrailing: true, triviaList: ref _trailingTriviaCache) 977873"];
1168 [label="param LexSyntaxTrivia(bool afterFirstToken) 977874"];
1169 [label="param LexSyntaxTrivia(bool isTrailing) 977875"];
1170 [label="param LexSyntaxTrivia(ref SyntaxListBuilder triviaList) 977876"];
1171 [label="param LexSyntaxTrivia(this) 977877"];
1172 [label="bool onlyWhitespaceOnLine = !isTrailing; 977878"];
1173 [label="while (true)\n            {\n                this.Start();\n                char ch = TextWindow.PeekChar();\n                if (ch == ' ')\n                {\n                    this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                    continue;\n                }\n                else if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                }\n\n                switch (ch)\n                {\n                    case ' ':\n                    case '\\t':       // Horizontal tab\n                    case '\\v':       // Vertical Tab\n                    case '\\f':       // Form-feed\n                    case '\\u001A':\n                        this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                        break;\n                    case '/':\n                        if ((ch = TextWindow.PeekChar(1)) == '/')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '/' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.SingleLine), ref triviaList);\n                                break;\n                            }\n\n                            // normal single line comment\n                            this.ScanToEndOfLine();\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n                        else if (ch == '*')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '*' &&\n                                TextWindow.PeekChar(3) != '*' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.Delimited), ref triviaList);\n                                break;\n                            }\n\n                            bool isTerminated;\n                            this.ScanMultiLineComment(out isTerminated);\n                            if (!isTerminated)\n                            {\n                                // The comment didn't end.  Report an error at the start point.\n                                this.AddError(ErrorCode.ERR_OpenEndedComment);\n                            }\n\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n\n                        // not trivia\n                        return;\n                    case '\\r':\n                    case '\\n':\n                        this.AddTrivia(this.ScanEndOfLine(), ref triviaList);\n                        if (isTrailing)\n                        {\n                            return;\n                        }\n\n                        onlyWhitespaceOnLine = true;\n                        break;\n                    case '#':\n                        if (_allowPreprocessorDirectives)\n                        {\n                            this.LexDirectiveAndExcludedTrivia(afterFirstToken, isTrailing || !onlyWhitespaceOnLine, ref triviaList);\n                            break;\n                        }\n                        else\n                        {\n                            return;\n                        }\n\n                    // Note: we specifically do not look for the >>>>>>> pattern as the start of\n                    // a conflict marker trivia.  That's because *technically* (albeit unlikely)\n                    // >>>>>>> could be the end of a very generic construct.  So, instead, we only\n                    // recognize >>>>>>> as we are scanning the trivia after a ======= marker \n                    // (which can never be part of legal code).\n                    // case '>':\n                    case '=':\n                    case '<':\n                        if (!isTrailing)\n                        {\n                            if (IsConflictMarkerTrivia())\n                            {\n                                this.LexConflictMarkerTrivia(ref triviaList);\n                                break;\n                            }\n                        }\n\n                        return;\n\n                    default:\n                        return;\n                }\n            } 977879"];
1174 [label="this.Start() 977880"];
1175 [label="param Start(this) 977881"];
1176 [label="TextWindow.Start() 977882"];
1177 [label="param Start(this) 977883"];
1178 [label="TextWindow.Start(); 977884"];
1179 [label="_errors = null; 977885"];
1180 [label="_errors 977886"];
1181 [label="this.Start(); 977887"];
1182 [label="TextWindow.PeekChar() 977888"];
1183 [label="param PeekChar(this) 977889"];
1184 [label="MoreChars() 977890"];
1185 [label="char ch = TextWindow.PeekChar(); 977891"];
1186 [label="if (ch == ' ')\n                {\n                    this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                    continue;\n                }\n                else if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 977892"];
1187 [label="if (ch == ' ')\n                {\n                    this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                    continue;\n                }\n                else if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 977893"];
1188 [label="if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 977894"];
1189 [label="if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    } 977895"];
1190 [label="SyntaxFacts.IsWhitespace(ch) 977896"];
1191 [label="param IsWhitespace(char ch) 977897"];
1192 [label="return ch == ' '\n                || ch == '\\t'\n                || ch == '\\v'\n                || ch == '\\f'\n                || ch == '\\u00A0' // NO-BREAK SPACE\n                                  // The native compiler, in ScanToken, recognized both the byte-order\n                                  // marker '\\uFEFF' as well as ^Z '\\u001A' as whitespace, although\n                                  // this is not to spec since neither of these are in Zs. For the\n                                  // sake of compatibility, we recognize them both here. Note: '\\uFEFF'\n                                  // also happens to be a formatting character (class Cf), which means\n                                  // that it is a legal non-initial identifier character. So it's\n                                  // especially funny, because it will be whitespace UNLESS we happen\n                                  // to be scanning an identifier or keyword, in which case it winds\n                                  // up in the identifier or keyword.\n                || ch == '\\uFEFF'\n                || ch == '\\u001A'\n                || (ch > 255 && CharUnicodeInfo.GetUnicodeCategory(ch) == UnicodeCategory.SpaceSeparator); 977898"];
1193 [label="return ch == ' '\n                || ch == '\\t'\n                || ch == '\\v'\n                || ch == '\\f'\n                || ch == '\\u00A0' // NO-BREAK SPACE\n                                  // The native compiler, in ScanToken, recognized both the byte-order\n                                  // marker '\\uFEFF' as well as ^Z '\\u001A' as whitespace, although\n                                  // this is not to spec since neither of these are in Zs. For the\n                                  // sake of compatibility, we recognize them both here. Note: '\\uFEFF'\n                                  // also happens to be a formatting character (class Cf), which means\n                                  // that it is a legal non-initial identifier character. So it's\n                                  // especially funny, because it will be whitespace UNLESS we happen\n                                  // to be scanning an identifier or keyword, in which case it winds\n                                  // up in the identifier or keyword.\n                || ch == '\\uFEFF'\n                || ch == '\\u001A'\n                || (ch > 255 && CharUnicodeInfo.GetUnicodeCategory(ch) == UnicodeCategory.SpaceSeparator); 977899"];
1194 [label="return ch == ' '\n                || ch == '\\t'\n                || ch == '\\v'\n                || ch == '\\f'\n                || ch == '\\u00A0' // NO-BREAK SPACE\n                                  // The native compiler, in ScanToken, recognized both the byte-order\n                                  // marker '\\uFEFF' as well as ^Z '\\u001A' as whitespace, although\n                                  // this is not to spec since neither of these are in Zs. For the\n                                  // sake of compatibility, we recognize them both here. Note: '\\uFEFF'\n                                  // also happens to be a formatting character (class Cf), which means\n                                  // that it is a legal non-initial identifier character. So it's\n                                  // especially funny, because it will be whitespace UNLESS we happen\n                                  // to be scanning an identifier or keyword, in which case it winds\n                                  // up in the identifier or keyword.\n                || ch == '\\uFEFF'\n                || ch == '\\u001A'\n                || (ch > 255 && CharUnicodeInfo.GetUnicodeCategory(ch) == UnicodeCategory.SpaceSeparator); 977900"];
1195 [label="if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    } 977901"];
1196 [label="SyntaxFacts.IsNewLine(ch) 977902"];
1197 [label="param IsNewLine(char ch) 977903"];
1198 [label="return ch == '\\r'\n                || ch == '\\n'\n                || ch == '\\u0085'\n                || ch == '\\u2028'\n                || ch == '\\u2029'; 977904"];
1199 [label="return ch == '\\r'\n                || ch == '\\n'\n                || ch == '\\u0085'\n                || ch == '\\u2028'\n                || ch == '\\u2029'; 977905"];
1200 [label="switch (ch)\n                {\n                    case ' ':\n                    case '\\t':       // Horizontal tab\n                    case '\\v':       // Vertical Tab\n                    case '\\f':       // Form-feed\n                    case '\\u001A':\n                        this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                        break;\n                    case '/':\n                        if ((ch = TextWindow.PeekChar(1)) == '/')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '/' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.SingleLine), ref triviaList);\n                                break;\n                            }\n\n                            // normal single line comment\n                            this.ScanToEndOfLine();\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n                        else if (ch == '*')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '*' &&\n                                TextWindow.PeekChar(3) != '*' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.Delimited), ref triviaList);\n                                break;\n                            }\n\n                            bool isTerminated;\n                            this.ScanMultiLineComment(out isTerminated);\n                            if (!isTerminated)\n                            {\n                                // The comment didn't end.  Report an error at the start point.\n                                this.AddError(ErrorCode.ERR_OpenEndedComment);\n                            }\n\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n\n                        // not trivia\n                        return;\n                    case '\\r':\n                    case '\\n':\n                        this.AddTrivia(this.ScanEndOfLine(), ref triviaList);\n                        if (isTrailing)\n                        {\n                            return;\n                        }\n\n                        onlyWhitespaceOnLine = true;\n                        break;\n                    case '#':\n                        if (_allowPreprocessorDirectives)\n                        {\n                            this.LexDirectiveAndExcludedTrivia(afterFirstToken, isTrailing || !onlyWhitespaceOnLine, ref triviaList);\n                            break;\n                        }\n                        else\n                        {\n                            return;\n                        }\n\n                    // Note: we specifically do not look for the >>>>>>> pattern as the start of\n                    // a conflict marker trivia.  That's because *technically* (albeit unlikely)\n                    // >>>>>>> could be the end of a very generic construct.  So, instead, we only\n                    // recognize >>>>>>> as we are scanning the trivia after a ======= marker \n                    // (which can never be part of legal code).\n                    // case '>':\n                    case '=':\n                    case '<':\n                        if (!isTrailing)\n                        {\n                            if (IsConflictMarkerTrivia())\n                            {\n                                this.LexConflictMarkerTrivia(ref triviaList);\n                                break;\n                            }\n                        }\n\n                        return;\n\n                    default:\n                        return;\n                } 977906"];
1201 [label="return; 977907"];
1202 [label="var trailing = _trailingTriviaCache; 977908"];
1203 [label="return Create(ref tokenInfo, leading, trailing, errors); 977909"];
1204 [label="return Create(ref tokenInfo, leading, trailing, errors); 977910"];
1205 [label="return Create(ref tokenInfo, leading, trailing, errors); 977911"];
1206 [label="return Create(ref tokenInfo, leading, trailing, errors); 977912"];
1207 [label="Create(ref tokenInfo, leading, trailing, errors) 977913"];
1208 [label="param Create(ref TokenInfo info) 977914"];
1209 [label="param Create(SyntaxListBuilder leading) 977915"];
1210 [label="param Create(SyntaxListBuilder trailing) 977916"];
1211 [label="param Create(SyntaxDiagnosticInfo[] errors) 977917"];
1212 [label="param Create(this) 977918"];
1213 [label="Debug.Assert(info.Kind != SyntaxKind.IdentifierToken || info.StringValue != null); 977919"];
1214 [label="var leadingNode = leading?.ToListNode(); 977920"];
1215 [label="var trailingNode = trailing?.ToListNode(); 977921"];
1216 [label="SyntaxToken token; 977922"];
1217 [label="if (info.RequiresTextForXmlEntity)\n            {\n                token = SyntaxFactory.Token(leadingNode, info.Kind, info.Text, info.StringValue, trailingNode);\n            }\n            else\n            {\n                switch (info.Kind)\n                {\n                    case SyntaxKind.IdentifierToken:\n                        token = SyntaxFactory.Identifier(info.ContextualKind, leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.NumericLiteralToken:\n                        switch (info.ValueKind)\n                        {\n                            case SpecialType.System_Int32:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.IntValue, trailingNode);\n                                break;\n                            case SpecialType.System_UInt32:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.UintValue, trailingNode);\n                                break;\n                            case SpecialType.System_Int64:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.LongValue, trailingNode);\n                                break;\n                            case SpecialType.System_UInt64:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.UlongValue, trailingNode);\n                                break;\n                            case SpecialType.System_Single:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.FloatValue, trailingNode);\n                                break;\n                            case SpecialType.System_Double:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.DoubleValue, trailingNode);\n                                break;\n                            case SpecialType.System_Decimal:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.DecimalValue, trailingNode);\n                                break;\n                            default:\n                                throw ExceptionUtilities.UnexpectedValue(info.ValueKind);\n                        }\n\n                        break;\n                    case SyntaxKind.InterpolatedStringToken:\n                        // we do not record a separate 'value' for an interpolated string token, as it must be rescanned during parsing.\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.Kind, info.Text, trailingNode);\n                        break;\n                    case SyntaxKind.StringLiteralToken:\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.Kind, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.CharacterLiteralToken:\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.CharValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlTextLiteralNewLineToken:\n                        token = SyntaxFactory.XmlTextNewLine(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlTextLiteralToken:\n                        token = SyntaxFactory.XmlTextLiteral(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlEntityLiteralToken:\n                        token = SyntaxFactory.XmlEntity(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.EndOfDocumentationCommentToken:\n                    case SyntaxKind.EndOfFileToken:\n                        token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode);\n                        break;\n                    case SyntaxKind.None:\n                        token = SyntaxFactory.BadToken(leadingNode, info.Text, trailingNode);\n                        break;\n\n                    default:\n                        Debug.Assert(SyntaxFacts.IsPunctuationOrKeyword(info.Kind));\n                        token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode);\n                        break;\n                }\n            } 977923"];
1218 [label="switch (info.Kind)\n                {\n                    case SyntaxKind.IdentifierToken:\n                        token = SyntaxFactory.Identifier(info.ContextualKind, leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.NumericLiteralToken:\n                        switch (info.ValueKind)\n                        {\n                            case SpecialType.System_Int32:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.IntValue, trailingNode);\n                                break;\n                            case SpecialType.System_UInt32:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.UintValue, trailingNode);\n                                break;\n                            case SpecialType.System_Int64:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.LongValue, trailingNode);\n                                break;\n                            case SpecialType.System_UInt64:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.UlongValue, trailingNode);\n                                break;\n                            case SpecialType.System_Single:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.FloatValue, trailingNode);\n                                break;\n                            case SpecialType.System_Double:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.DoubleValue, trailingNode);\n                                break;\n                            case SpecialType.System_Decimal:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.DecimalValue, trailingNode);\n                                break;\n                            default:\n                                throw ExceptionUtilities.UnexpectedValue(info.ValueKind);\n                        }\n\n                        break;\n                    case SyntaxKind.InterpolatedStringToken:\n                        // we do not record a separate 'value' for an interpolated string token, as it must be rescanned during parsing.\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.Kind, info.Text, trailingNode);\n                        break;\n                    case SyntaxKind.StringLiteralToken:\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.Kind, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.CharacterLiteralToken:\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.CharValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlTextLiteralNewLineToken:\n                        token = SyntaxFactory.XmlTextNewLine(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlTextLiteralToken:\n                        token = SyntaxFactory.XmlTextLiteral(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlEntityLiteralToken:\n                        token = SyntaxFactory.XmlEntity(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.EndOfDocumentationCommentToken:\n                    case SyntaxKind.EndOfFileToken:\n                        token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode);\n                        break;\n                    case SyntaxKind.None:\n                        token = SyntaxFactory.BadToken(leadingNode, info.Text, trailingNode);\n                        break;\n\n                    default:\n                        Debug.Assert(SyntaxFacts.IsPunctuationOrKeyword(info.Kind));\n                        token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode);\n                        break;\n                } 977924"];
1219 [label="token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode); 977925"];
1220 [label="token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode); 977926"];
1221 [label="token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode); 977927"];
1222 [label="SyntaxFactory.Token(leadingNode, info.Kind, trailingNode) 977928"];
1223 [label="param Token(GreenNode leading) 977929"];
1224 [label="param Token(SyntaxKind kind) 977930"];
1225 [label="param Token(GreenNode trailing) 977931"];
1226 [label="FirstTokenWithWellKnownText = SyntaxKind.TildeToken 977932"];
1227 [label="LastTokenWithWellKnownText = SyntaxKind.EndOfFileToken 977933"];
1228 [label="1 977934"];
1229 [label="(int)LastTokenWithWellKnownText + 1 977935"];
1230 [label="new ArrayElement<SyntaxToken>[(int)LastTokenWithWellKnownText + 1] 977936"];
1231 [label="s_tokensWithNoTrivia = new ArrayElement<SyntaxToken>[(int)LastTokenWithWellKnownText + 1] 977937"];
1232 [label="1 977938"];
1233 [label="(int)LastTokenWithWellKnownText + 1 977939"];
1234 [label="new ArrayElement<SyntaxToken>[(int)LastTokenWithWellKnownText + 1] 977940"];
1235 [label="s_tokensWithElasticTrivia = new ArrayElement<SyntaxToken>[(int)LastTokenWithWellKnownText + 1] 977941"];
1236 [label="1 977942"];
1237 [label="(int)LastTokenWithWellKnownText + 1 977943"];
1238 [label="new ArrayElement<SyntaxToken>[(int)LastTokenWithWellKnownText + 1] 977944"];
1239 [label="s_tokensWithSingleTrailingSpace = new ArrayElement<SyntaxToken>[(int)LastTokenWithWellKnownText + 1] 977945"];
1240 [label="1 977946"];
1241 [label="(int)LastTokenWithWellKnownText + 1 977947"];
1242 [label="new ArrayElement<SyntaxToken>[(int)LastTokenWithWellKnownText + 1] 977948"];
1243 [label="s_tokensWithSingleTrailingCRLF = new ArrayElement<SyntaxToken>[(int)LastTokenWithWellKnownText + 1] 977949"];
1244 [label="ObjectBinder.RegisterTypeReader(typeof(SyntaxToken), r => new SyntaxToken(r)); 977950"];
1245 [label="for (var kind = FirstTokenWithWellKnownText; kind <= LastTokenWithWellKnownText; kind++)\n            {\n                s_tokensWithNoTrivia[(int)kind].Value = new SyntaxToken(kind);\n                s_tokensWithElasticTrivia[(int)kind].Value = new SyntaxTokenWithTrivia(kind, SyntaxFactory.ElasticZeroSpace, SyntaxFactory.ElasticZeroSpace);\n                s_tokensWithSingleTrailingSpace[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.Space);\n                s_tokensWithSingleTrailingCRLF[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.CarriageReturnLineFeed);\n            } 977951"];
1246 [label="for (var kind = FirstTokenWithWellKnownText; kind <= LastTokenWithWellKnownText; kind++)\n            {\n                s_tokensWithNoTrivia[(int)kind].Value = new SyntaxToken(kind);\n                s_tokensWithElasticTrivia[(int)kind].Value = new SyntaxTokenWithTrivia(kind, SyntaxFactory.ElasticZeroSpace, SyntaxFactory.ElasticZeroSpace);\n                s_tokensWithSingleTrailingSpace[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.Space);\n                s_tokensWithSingleTrailingCRLF[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.CarriageReturnLineFeed);\n            } 977952"];
1247 [label="s_tokensWithNoTrivia[(int)kind].Value = new SyntaxToken(kind); 977953"];
1248 [label="s_tokensWithNoTrivia[(int)kind].Value = new SyntaxToken(kind); 977954"];
1249 [label="s_tokensWithNoTrivia[(int)kind].Value = new SyntaxToken(kind); 977955"];
1250 [label="new SyntaxToken(kind) 977956"];
1251 [label="param SyntaxToken(SyntaxKind kind) 977957"];
1252 [label="param SyntaxToken(this) 977958"];
1253 [label="kind 977959"];
1254 [label="param SyntaxToken(this) 977960"];
1255 [label="param CSharpSyntaxNode(SyntaxKind kind) 977961"];
1256 [label="param CSharpSyntaxNode(this) 977962"];
1257 [label="kind 977963"];
1258 [label="param CSharpSyntaxNode(this) 977964"];
1259 [label="param CSharpSyntaxNode(this) 977965"];
1260 [label="GreenStats.NoteGreen(this); 977966"];
1261 [label="GreenStats.NoteGreen(this); 977967"];
1262 [label="this.Text 977968"];
1263 [label="get { return SyntaxFacts.GetText(this.Kind); } 977969"];
1264 [label="this.Kind 977970"];
1265 [label="get { return (SyntaxKind)this.RawKind; } 977971"];
1266 [label="return (SyntaxKind)this.RawKind; 977972"];
1267 [label="return SyntaxFacts.GetText(this.Kind); 977973"];
1268 [label="SyntaxFacts.GetText(this.Kind) 977974"];
1269 [label="param GetText(SyntaxKind kind) 977975"];
1270 [label="switch (kind)\n            {\n                case SyntaxKind.TildeToken:\n                    return '~';\n                case SyntaxKind.ExclamationToken:\n                    return '!';\n                case SyntaxKind.DollarToken:\n                    return '$';\n                case SyntaxKind.PercentToken:\n                    return '%';\n                case SyntaxKind.CaretToken:\n                    return '^';\n                case SyntaxKind.AmpersandToken:\n                    return '&';\n                case SyntaxKind.AsteriskToken:\n                    return '*';\n                case SyntaxKind.OpenParenToken:\n                    return '(';\n                case SyntaxKind.CloseParenToken:\n                    return ')';\n                case SyntaxKind.MinusToken:\n                    return '-';\n                case SyntaxKind.PlusToken:\n                    return '+';\n                case SyntaxKind.EqualsToken:\n                    return '=';\n                case SyntaxKind.OpenBraceToken:\n                    return '{';\n                case SyntaxKind.CloseBraceToken:\n                    return '}';\n                case SyntaxKind.OpenBracketToken:\n                    return '[';\n                case SyntaxKind.CloseBracketToken:\n                    return ']';\n                case SyntaxKind.BarToken:\n                    return '|';\n                case SyntaxKind.BackslashToken:\n                    return '\\\\';\n                case SyntaxKind.ColonToken:\n                    return ':';\n                case SyntaxKind.SemicolonToken:\n                    return ';';\n                case SyntaxKind.DoubleQuoteToken:\n                    return '\\'';\n                case SyntaxKind.SingleQuoteToken:\n                    return ''';\n                case SyntaxKind.LessThanToken:\n                    return '<';\n                case SyntaxKind.CommaToken:\n                    return ',';\n                case SyntaxKind.GreaterThanToken:\n                    return '>';\n                case SyntaxKind.DotToken:\n                    return '.';\n                case SyntaxKind.QuestionToken:\n                    return '?';\n                case SyntaxKind.HashToken:\n                    return '#';\n                case SyntaxKind.SlashToken:\n                    return '/';\n                case SyntaxKind.SlashGreaterThanToken:\n                    return '/>';\n                case SyntaxKind.LessThanSlashToken:\n                    return '</';\n                case SyntaxKind.XmlCommentStartToken:\n                    return '<!--';\n                case SyntaxKind.XmlCommentEndToken:\n                    return '-->';\n                case SyntaxKind.XmlCDataStartToken:\n                    return '<![CDATA[';\n                case SyntaxKind.XmlCDataEndToken:\n                    return ']]>';\n                case SyntaxKind.XmlProcessingInstructionStartToken:\n                    return '<?';\n                case SyntaxKind.XmlProcessingInstructionEndToken:\n                    return '?>';\n\n                // compound\n                case SyntaxKind.BarBarToken:\n                    return '||';\n                case SyntaxKind.AmpersandAmpersandToken:\n                    return '&&';\n                case SyntaxKind.MinusMinusToken:\n                    return '--';\n                case SyntaxKind.PlusPlusToken:\n                    return '++';\n                case SyntaxKind.ColonColonToken:\n                    return '::';\n                case SyntaxKind.QuestionQuestionToken:\n                    return '??';\n                case SyntaxKind.MinusGreaterThanToken:\n                    return '->';\n                case SyntaxKind.ExclamationEqualsToken:\n                    return '!=';\n                case SyntaxKind.EqualsEqualsToken:\n                    return '==';\n                case SyntaxKind.EqualsGreaterThanToken:\n                    return '=>';\n                case SyntaxKind.LessThanEqualsToken:\n                    return '<=';\n                case SyntaxKind.LessThanLessThanToken:\n                    return '<<';\n                case SyntaxKind.LessThanLessThanEqualsToken:\n                    return '<<=';\n                case SyntaxKind.GreaterThanEqualsToken:\n                    return '>=';\n                case SyntaxKind.GreaterThanGreaterThanToken:\n                    return '>>';\n                case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n                    return '>>=';\n                case SyntaxKind.SlashEqualsToken:\n                    return '/=';\n                case SyntaxKind.AsteriskEqualsToken:\n                    return '*=';\n                case SyntaxKind.BarEqualsToken:\n                    return '|=';\n                case SyntaxKind.AmpersandEqualsToken:\n                    return '&=';\n                case SyntaxKind.PlusEqualsToken:\n                    return '+=';\n                case SyntaxKind.MinusEqualsToken:\n                    return '-=';\n                case SyntaxKind.CaretEqualsToken:\n                    return '^=';\n                case SyntaxKind.PercentEqualsToken:\n                    return '%=';\n                case SyntaxKind.QuestionQuestionEqualsToken:\n                    return '??=';\n                case SyntaxKind.DotDotToken:\n                    return '..';\n\n                // Keywords\n                case SyntaxKind.BoolKeyword:\n                    return 'bool';\n                case SyntaxKind.ByteKeyword:\n                    return 'byte';\n                case SyntaxKind.SByteKeyword:\n                    return 'sbyte';\n                case SyntaxKind.ShortKeyword:\n                    return 'short';\n                case SyntaxKind.UShortKeyword:\n                    return 'ushort';\n                case SyntaxKind.IntKeyword:\n                    return 'int';\n                case SyntaxKind.UIntKeyword:\n                    return 'uint';\n                case SyntaxKind.LongKeyword:\n                    return 'long';\n                case SyntaxKind.ULongKeyword:\n                    return 'ulong';\n                case SyntaxKind.DoubleKeyword:\n                    return 'double';\n                case SyntaxKind.FloatKeyword:\n                    return 'float';\n                case SyntaxKind.DecimalKeyword:\n                    return 'decimal';\n                case SyntaxKind.StringKeyword:\n                    return 'string';\n                case SyntaxKind.CharKeyword:\n                    return 'char';\n                case SyntaxKind.VoidKeyword:\n                    return 'void';\n                case SyntaxKind.ObjectKeyword:\n                    return 'object';\n                case SyntaxKind.TypeOfKeyword:\n                    return 'typeof';\n                case SyntaxKind.SizeOfKeyword:\n                    return 'sizeof';\n                case SyntaxKind.NullKeyword:\n                    return 'null';\n                case SyntaxKind.TrueKeyword:\n                    return 'true';\n                case SyntaxKind.FalseKeyword:\n                    return 'false';\n                case SyntaxKind.IfKeyword:\n                    return 'if';\n                case SyntaxKind.ElseKeyword:\n                    return 'else';\n                case SyntaxKind.WhileKeyword:\n                    return 'while';\n                case SyntaxKind.ForKeyword:\n                    return 'for';\n                case SyntaxKind.ForEachKeyword:\n                    return 'foreach';\n                case SyntaxKind.DoKeyword:\n                    return 'do';\n                case SyntaxKind.SwitchKeyword:\n                    return 'switch';\n                case SyntaxKind.CaseKeyword:\n                    return 'case';\n                case SyntaxKind.DefaultKeyword:\n                    return 'default';\n                case SyntaxKind.TryKeyword:\n                    return 'try';\n                case SyntaxKind.CatchKeyword:\n                    return 'catch';\n                case SyntaxKind.FinallyKeyword:\n                    return 'finally';\n                case SyntaxKind.LockKeyword:\n                    return 'lock';\n                case SyntaxKind.GotoKeyword:\n                    return 'goto';\n                case SyntaxKind.BreakKeyword:\n                    return 'break';\n                case SyntaxKind.ContinueKeyword:\n                    return 'continue';\n                case SyntaxKind.ReturnKeyword:\n                    return 'return';\n                case SyntaxKind.ThrowKeyword:\n                    return 'throw';\n                case SyntaxKind.PublicKeyword:\n                    return 'public';\n                case SyntaxKind.PrivateKeyword:\n                    return 'private';\n                case SyntaxKind.InternalKeyword:\n                    return 'internal';\n                case SyntaxKind.ProtectedKeyword:\n                    return 'protected';\n                case SyntaxKind.StaticKeyword:\n                    return 'static';\n                case SyntaxKind.ReadOnlyKeyword:\n                    return 'readonly';\n                case SyntaxKind.SealedKeyword:\n                    return 'sealed';\n                case SyntaxKind.ConstKeyword:\n                    return 'const';\n                case SyntaxKind.FixedKeyword:\n                    return 'fixed';\n                case SyntaxKind.StackAllocKeyword:\n                    return 'stackalloc';\n                case SyntaxKind.VolatileKeyword:\n                    return 'volatile';\n                case SyntaxKind.NewKeyword:\n                    return 'new';\n                case SyntaxKind.OverrideKeyword:\n                    return 'override';\n                case SyntaxKind.AbstractKeyword:\n                    return 'abstract';\n                case SyntaxKind.VirtualKeyword:\n                    return 'virtual';\n                case SyntaxKind.EventKeyword:\n                    return 'event';\n                case SyntaxKind.ExternKeyword:\n                    return 'extern';\n                case SyntaxKind.RefKeyword:\n                    return 'ref';\n                case SyntaxKind.OutKeyword:\n                    return 'out';\n                case SyntaxKind.InKeyword:\n                    return 'in';\n                case SyntaxKind.IsKeyword:\n                    return 'is';\n                case SyntaxKind.AsKeyword:\n                    return 'as';\n                case SyntaxKind.ParamsKeyword:\n                    return 'params';\n                case SyntaxKind.ArgListKeyword:\n                    return '__arglist';\n                case SyntaxKind.MakeRefKeyword:\n                    return '__makeref';\n                case SyntaxKind.RefTypeKeyword:\n                    return '__reftype';\n                case SyntaxKind.RefValueKeyword:\n                    return '__refvalue';\n                case SyntaxKind.ThisKeyword:\n                    return 'this';\n                case SyntaxKind.BaseKeyword:\n                    return 'base';\n                case SyntaxKind.NamespaceKeyword:\n                    return 'namespace';\n                case SyntaxKind.UsingKeyword:\n                    return 'using';\n                case SyntaxKind.ClassKeyword:\n                    return 'class';\n                case SyntaxKind.StructKeyword:\n                    return 'struct';\n                case SyntaxKind.InterfaceKeyword:\n                    return 'interface';\n                case SyntaxKind.EnumKeyword:\n                    return 'enum';\n                case SyntaxKind.DelegateKeyword:\n                    return 'delegate';\n                case SyntaxKind.CheckedKeyword:\n                    return 'checked';\n                case SyntaxKind.UncheckedKeyword:\n                    return 'unchecked';\n                case SyntaxKind.UnsafeKeyword:\n                    return 'unsafe';\n                case SyntaxKind.OperatorKeyword:\n                    return 'operator';\n                case SyntaxKind.ImplicitKeyword:\n                    return 'implicit';\n                case SyntaxKind.ExplicitKeyword:\n                    return 'explicit';\n                case SyntaxKind.ElifKeyword:\n                    return 'elif';\n                case SyntaxKind.EndIfKeyword:\n                    return 'endif';\n                case SyntaxKind.RegionKeyword:\n                    return 'region';\n                case SyntaxKind.EndRegionKeyword:\n                    return 'endregion';\n                case SyntaxKind.DefineKeyword:\n                    return 'define';\n                case SyntaxKind.UndefKeyword:\n                    return 'undef';\n                case SyntaxKind.WarningKeyword:\n                    return 'warning';\n                case SyntaxKind.ErrorKeyword:\n                    return 'error';\n                case SyntaxKind.LineKeyword:\n                    return 'line';\n                case SyntaxKind.PragmaKeyword:\n                    return 'pragma';\n                case SyntaxKind.HiddenKeyword:\n                    return 'hidden';\n                case SyntaxKind.ChecksumKeyword:\n                    return 'checksum';\n                case SyntaxKind.DisableKeyword:\n                    return 'disable';\n                case SyntaxKind.RestoreKeyword:\n                    return 'restore';\n                case SyntaxKind.ReferenceKeyword:\n                    return 'r';\n                case SyntaxKind.LoadKeyword:\n                    return 'load';\n                case SyntaxKind.NullableKeyword:\n                    return 'nullable';\n                case SyntaxKind.EnableKeyword:\n                    return 'enable';\n                case SyntaxKind.WarningsKeyword:\n                    return 'warnings';\n                case SyntaxKind.AnnotationsKeyword:\n                    return 'annotations';\n\n                // contextual keywords\n                case SyntaxKind.YieldKeyword:\n                    return 'yield';\n                case SyntaxKind.PartialKeyword:\n                    return 'partial';\n                case SyntaxKind.FromKeyword:\n                    return 'from';\n                case SyntaxKind.GroupKeyword:\n                    return 'group';\n                case SyntaxKind.JoinKeyword:\n                    return 'join';\n                case SyntaxKind.IntoKeyword:\n                    return 'into';\n                case SyntaxKind.LetKeyword:\n                    return 'let';\n                case SyntaxKind.ByKeyword:\n                    return 'by';\n                case SyntaxKind.WhereKeyword:\n                    return 'where';\n                case SyntaxKind.SelectKeyword:\n                    return 'select';\n                case SyntaxKind.GetKeyword:\n                    return 'get';\n                case SyntaxKind.SetKeyword:\n                    return 'set';\n                case SyntaxKind.AddKeyword:\n                    return 'add';\n                case SyntaxKind.RemoveKeyword:\n                    return 'remove';\n                case SyntaxKind.OrderByKeyword:\n                    return 'orderby';\n                case SyntaxKind.AliasKeyword:\n                    return 'alias';\n                case SyntaxKind.OnKeyword:\n                    return 'on';\n                case SyntaxKind.EqualsKeyword:\n                    return 'equals';\n                case SyntaxKind.AscendingKeyword:\n                    return 'ascending';\n                case SyntaxKind.DescendingKeyword:\n                    return 'descending';\n                case SyntaxKind.AssemblyKeyword:\n                    return 'assembly';\n                case SyntaxKind.ModuleKeyword:\n                    return 'module';\n                case SyntaxKind.TypeKeyword:\n                    return 'type';\n                case SyntaxKind.FieldKeyword:\n                    return 'field';\n                case SyntaxKind.MethodKeyword:\n                    return 'method';\n                case SyntaxKind.ParamKeyword:\n                    return 'param';\n                case SyntaxKind.PropertyKeyword:\n                    return 'property';\n                case SyntaxKind.TypeVarKeyword:\n                    return 'typevar';\n                case SyntaxKind.GlobalKeyword:\n                    return 'global';\n                case SyntaxKind.NameOfKeyword:\n                    return 'nameof';\n                case SyntaxKind.AsyncKeyword:\n                    return 'async';\n                case SyntaxKind.AwaitKeyword:\n                    return 'await';\n                case SyntaxKind.WhenKeyword:\n                    return 'when';\n                case SyntaxKind.InterpolatedStringStartToken:\n                    return '$\\'';\n                case SyntaxKind.InterpolatedStringEndToken:\n                    return '\\'';\n                case SyntaxKind.InterpolatedVerbatimStringStartToken:\n                    return '$@\\'';\n                case SyntaxKind.UnderscoreToken:\n                    return '_';\n                case SyntaxKind.VarKeyword:\n                    return 'var';\n                case SyntaxKind.AndKeyword:\n                    return 'and';\n                case SyntaxKind.OrKeyword:\n                    return 'or';\n                case SyntaxKind.NotKeyword:\n                    return 'not';\n                case SyntaxKind.DataKeyword:\n                    return 'data';\n                case SyntaxKind.WithKeyword:\n                    return 'with';\n                case SyntaxKind.InitKeyword:\n                    return 'init';\n                case SyntaxKind.RecordKeyword:\n                    return 'record';\n                case SyntaxKind.ManagedKeyword:\n                    return 'managed';\n                case SyntaxKind.UnmanagedKeyword:\n                    return 'unmanaged';\n                default:\n                    return string.Empty;\n            } 977976"];
1271 [label="return '~'; 977977"];
1272 [label="FullWidth = this.Text.Length; 977978"];
1273 [label="FullWidth 977979"];
1274 [label="this.flags |= NodeFlags.IsNotMissing; 977980"];
1275 [label="this.flags 977981"];
1276 [label="s_tokensWithNoTrivia[(int)kind].Value 977982"];
1277 [label="ObjectBinder.RegisterTypeReader(typeof(SyntaxTokenWithTrivia), r => new SyntaxTokenWithTrivia(r)); 977983"];
1278 [label="s_tokensWithElasticTrivia[(int)kind].Value = new SyntaxTokenWithTrivia(kind, SyntaxFactory.ElasticZeroSpace, SyntaxFactory.ElasticZeroSpace); 977984"];
1279 [label="s_tokensWithElasticTrivia[(int)kind].Value = new SyntaxTokenWithTrivia(kind, SyntaxFactory.ElasticZeroSpace, SyntaxFactory.ElasticZeroSpace); 977985"];
1280 [label="s_tokensWithElasticTrivia[(int)kind].Value = new SyntaxTokenWithTrivia(kind, SyntaxFactory.ElasticZeroSpace, SyntaxFactory.ElasticZeroSpace); 977986"];
1281 [label="s_tokensWithElasticTrivia[(int)kind].Value = new SyntaxTokenWithTrivia(kind, SyntaxFactory.ElasticZeroSpace, SyntaxFactory.ElasticZeroSpace); 977987"];
1282 [label="new SyntaxTokenWithTrivia(kind, SyntaxFactory.ElasticZeroSpace, SyntaxFactory.ElasticZeroSpace) 977988"];
1283 [label="param SyntaxTokenWithTrivia(SyntaxKind kind) 977989"];
1284 [label="param SyntaxTokenWithTrivia(GreenNode leading) 977990"];
1285 [label="param SyntaxTokenWithTrivia(GreenNode trailing) 977991"];
1286 [label="param SyntaxTokenWithTrivia(this) 977992"];
1287 [label="kind 977993"];
1288 [label="param SyntaxTokenWithTrivia(this) 977994"];
1289 [label="param SyntaxToken(SyntaxKind kind) 977995"];
1290 [label="param SyntaxToken(this) 977996"];
1291 [label="kind 977997"];
1292 [label="param SyntaxToken(this) 977998"];
1293 [label="param CSharpSyntaxNode(SyntaxKind kind) 977999"];
1294 [label="param CSharpSyntaxNode(this) 978000"];
1295 [label="kind 978001"];
1296 [label="param CSharpSyntaxNode(this) 978002"];
1297 [label="param CSharpSyntaxNode(this) 978003"];
1298 [label="GreenStats.NoteGreen(this); 978004"];
1299 [label="GreenStats.NoteGreen(this); 978005"];
1300 [label="this.Text 978006"];
1301 [label="get { return SyntaxFacts.GetText(this.Kind); } 978007"];
1302 [label="this.Kind 978008"];
1303 [label="get { return (SyntaxKind)this.RawKind; } 978009"];
1304 [label="return (SyntaxKind)this.RawKind; 978010"];
1305 [label="return SyntaxFacts.GetText(this.Kind); 978011"];
1306 [label="SyntaxFacts.GetText(this.Kind) 978012"];
1307 [label="param GetText(SyntaxKind kind) 978013"];
1308 [label="switch (kind)\n            {\n                case SyntaxKind.TildeToken:\n                    return '~';\n                case SyntaxKind.ExclamationToken:\n                    return '!';\n                case SyntaxKind.DollarToken:\n                    return '$';\n                case SyntaxKind.PercentToken:\n                    return '%';\n                case SyntaxKind.CaretToken:\n                    return '^';\n                case SyntaxKind.AmpersandToken:\n                    return '&';\n                case SyntaxKind.AsteriskToken:\n                    return '*';\n                case SyntaxKind.OpenParenToken:\n                    return '(';\n                case SyntaxKind.CloseParenToken:\n                    return ')';\n                case SyntaxKind.MinusToken:\n                    return '-';\n                case SyntaxKind.PlusToken:\n                    return '+';\n                case SyntaxKind.EqualsToken:\n                    return '=';\n                case SyntaxKind.OpenBraceToken:\n                    return '{';\n                case SyntaxKind.CloseBraceToken:\n                    return '}';\n                case SyntaxKind.OpenBracketToken:\n                    return '[';\n                case SyntaxKind.CloseBracketToken:\n                    return ']';\n                case SyntaxKind.BarToken:\n                    return '|';\n                case SyntaxKind.BackslashToken:\n                    return '\\\\';\n                case SyntaxKind.ColonToken:\n                    return ':';\n                case SyntaxKind.SemicolonToken:\n                    return ';';\n                case SyntaxKind.DoubleQuoteToken:\n                    return '\\'';\n                case SyntaxKind.SingleQuoteToken:\n                    return ''';\n                case SyntaxKind.LessThanToken:\n                    return '<';\n                case SyntaxKind.CommaToken:\n                    return ',';\n                case SyntaxKind.GreaterThanToken:\n                    return '>';\n                case SyntaxKind.DotToken:\n                    return '.';\n                case SyntaxKind.QuestionToken:\n                    return '?';\n                case SyntaxKind.HashToken:\n                    return '#';\n                case SyntaxKind.SlashToken:\n                    return '/';\n                case SyntaxKind.SlashGreaterThanToken:\n                    return '/>';\n                case SyntaxKind.LessThanSlashToken:\n                    return '</';\n                case SyntaxKind.XmlCommentStartToken:\n                    return '<!--';\n                case SyntaxKind.XmlCommentEndToken:\n                    return '-->';\n                case SyntaxKind.XmlCDataStartToken:\n                    return '<![CDATA[';\n                case SyntaxKind.XmlCDataEndToken:\n                    return ']]>';\n                case SyntaxKind.XmlProcessingInstructionStartToken:\n                    return '<?';\n                case SyntaxKind.XmlProcessingInstructionEndToken:\n                    return '?>';\n\n                // compound\n                case SyntaxKind.BarBarToken:\n                    return '||';\n                case SyntaxKind.AmpersandAmpersandToken:\n                    return '&&';\n                case SyntaxKind.MinusMinusToken:\n                    return '--';\n                case SyntaxKind.PlusPlusToken:\n                    return '++';\n                case SyntaxKind.ColonColonToken:\n                    return '::';\n                case SyntaxKind.QuestionQuestionToken:\n                    return '??';\n                case SyntaxKind.MinusGreaterThanToken:\n                    return '->';\n                case SyntaxKind.ExclamationEqualsToken:\n                    return '!=';\n                case SyntaxKind.EqualsEqualsToken:\n                    return '==';\n                case SyntaxKind.EqualsGreaterThanToken:\n                    return '=>';\n                case SyntaxKind.LessThanEqualsToken:\n                    return '<=';\n                case SyntaxKind.LessThanLessThanToken:\n                    return '<<';\n                case SyntaxKind.LessThanLessThanEqualsToken:\n                    return '<<=';\n                case SyntaxKind.GreaterThanEqualsToken:\n                    return '>=';\n                case SyntaxKind.GreaterThanGreaterThanToken:\n                    return '>>';\n                case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n                    return '>>=';\n                case SyntaxKind.SlashEqualsToken:\n                    return '/=';\n                case SyntaxKind.AsteriskEqualsToken:\n                    return '*=';\n                case SyntaxKind.BarEqualsToken:\n                    return '|=';\n                case SyntaxKind.AmpersandEqualsToken:\n                    return '&=';\n                case SyntaxKind.PlusEqualsToken:\n                    return '+=';\n                case SyntaxKind.MinusEqualsToken:\n                    return '-=';\n                case SyntaxKind.CaretEqualsToken:\n                    return '^=';\n                case SyntaxKind.PercentEqualsToken:\n                    return '%=';\n                case SyntaxKind.QuestionQuestionEqualsToken:\n                    return '??=';\n                case SyntaxKind.DotDotToken:\n                    return '..';\n\n                // Keywords\n                case SyntaxKind.BoolKeyword:\n                    return 'bool';\n                case SyntaxKind.ByteKeyword:\n                    return 'byte';\n                case SyntaxKind.SByteKeyword:\n                    return 'sbyte';\n                case SyntaxKind.ShortKeyword:\n                    return 'short';\n                case SyntaxKind.UShortKeyword:\n                    return 'ushort';\n                case SyntaxKind.IntKeyword:\n                    return 'int';\n                case SyntaxKind.UIntKeyword:\n                    return 'uint';\n                case SyntaxKind.LongKeyword:\n                    return 'long';\n                case SyntaxKind.ULongKeyword:\n                    return 'ulong';\n                case SyntaxKind.DoubleKeyword:\n                    return 'double';\n                case SyntaxKind.FloatKeyword:\n                    return 'float';\n                case SyntaxKind.DecimalKeyword:\n                    return 'decimal';\n                case SyntaxKind.StringKeyword:\n                    return 'string';\n                case SyntaxKind.CharKeyword:\n                    return 'char';\n                case SyntaxKind.VoidKeyword:\n                    return 'void';\n                case SyntaxKind.ObjectKeyword:\n                    return 'object';\n                case SyntaxKind.TypeOfKeyword:\n                    return 'typeof';\n                case SyntaxKind.SizeOfKeyword:\n                    return 'sizeof';\n                case SyntaxKind.NullKeyword:\n                    return 'null';\n                case SyntaxKind.TrueKeyword:\n                    return 'true';\n                case SyntaxKind.FalseKeyword:\n                    return 'false';\n                case SyntaxKind.IfKeyword:\n                    return 'if';\n                case SyntaxKind.ElseKeyword:\n                    return 'else';\n                case SyntaxKind.WhileKeyword:\n                    return 'while';\n                case SyntaxKind.ForKeyword:\n                    return 'for';\n                case SyntaxKind.ForEachKeyword:\n                    return 'foreach';\n                case SyntaxKind.DoKeyword:\n                    return 'do';\n                case SyntaxKind.SwitchKeyword:\n                    return 'switch';\n                case SyntaxKind.CaseKeyword:\n                    return 'case';\n                case SyntaxKind.DefaultKeyword:\n                    return 'default';\n                case SyntaxKind.TryKeyword:\n                    return 'try';\n                case SyntaxKind.CatchKeyword:\n                    return 'catch';\n                case SyntaxKind.FinallyKeyword:\n                    return 'finally';\n                case SyntaxKind.LockKeyword:\n                    return 'lock';\n                case SyntaxKind.GotoKeyword:\n                    return 'goto';\n                case SyntaxKind.BreakKeyword:\n                    return 'break';\n                case SyntaxKind.ContinueKeyword:\n                    return 'continue';\n                case SyntaxKind.ReturnKeyword:\n                    return 'return';\n                case SyntaxKind.ThrowKeyword:\n                    return 'throw';\n                case SyntaxKind.PublicKeyword:\n                    return 'public';\n                case SyntaxKind.PrivateKeyword:\n                    return 'private';\n                case SyntaxKind.InternalKeyword:\n                    return 'internal';\n                case SyntaxKind.ProtectedKeyword:\n                    return 'protected';\n                case SyntaxKind.StaticKeyword:\n                    return 'static';\n                case SyntaxKind.ReadOnlyKeyword:\n                    return 'readonly';\n                case SyntaxKind.SealedKeyword:\n                    return 'sealed';\n                case SyntaxKind.ConstKeyword:\n                    return 'const';\n                case SyntaxKind.FixedKeyword:\n                    return 'fixed';\n                case SyntaxKind.StackAllocKeyword:\n                    return 'stackalloc';\n                case SyntaxKind.VolatileKeyword:\n                    return 'volatile';\n                case SyntaxKind.NewKeyword:\n                    return 'new';\n                case SyntaxKind.OverrideKeyword:\n                    return 'override';\n                case SyntaxKind.AbstractKeyword:\n                    return 'abstract';\n                case SyntaxKind.VirtualKeyword:\n                    return 'virtual';\n                case SyntaxKind.EventKeyword:\n                    return 'event';\n                case SyntaxKind.ExternKeyword:\n                    return 'extern';\n                case SyntaxKind.RefKeyword:\n                    return 'ref';\n                case SyntaxKind.OutKeyword:\n                    return 'out';\n                case SyntaxKind.InKeyword:\n                    return 'in';\n                case SyntaxKind.IsKeyword:\n                    return 'is';\n                case SyntaxKind.AsKeyword:\n                    return 'as';\n                case SyntaxKind.ParamsKeyword:\n                    return 'params';\n                case SyntaxKind.ArgListKeyword:\n                    return '__arglist';\n                case SyntaxKind.MakeRefKeyword:\n                    return '__makeref';\n                case SyntaxKind.RefTypeKeyword:\n                    return '__reftype';\n                case SyntaxKind.RefValueKeyword:\n                    return '__refvalue';\n                case SyntaxKind.ThisKeyword:\n                    return 'this';\n                case SyntaxKind.BaseKeyword:\n                    return 'base';\n                case SyntaxKind.NamespaceKeyword:\n                    return 'namespace';\n                case SyntaxKind.UsingKeyword:\n                    return 'using';\n                case SyntaxKind.ClassKeyword:\n                    return 'class';\n                case SyntaxKind.StructKeyword:\n                    return 'struct';\n                case SyntaxKind.InterfaceKeyword:\n                    return 'interface';\n                case SyntaxKind.EnumKeyword:\n                    return 'enum';\n                case SyntaxKind.DelegateKeyword:\n                    return 'delegate';\n                case SyntaxKind.CheckedKeyword:\n                    return 'checked';\n                case SyntaxKind.UncheckedKeyword:\n                    return 'unchecked';\n                case SyntaxKind.UnsafeKeyword:\n                    return 'unsafe';\n                case SyntaxKind.OperatorKeyword:\n                    return 'operator';\n                case SyntaxKind.ImplicitKeyword:\n                    return 'implicit';\n                case SyntaxKind.ExplicitKeyword:\n                    return 'explicit';\n                case SyntaxKind.ElifKeyword:\n                    return 'elif';\n                case SyntaxKind.EndIfKeyword:\n                    return 'endif';\n                case SyntaxKind.RegionKeyword:\n                    return 'region';\n                case SyntaxKind.EndRegionKeyword:\n                    return 'endregion';\n                case SyntaxKind.DefineKeyword:\n                    return 'define';\n                case SyntaxKind.UndefKeyword:\n                    return 'undef';\n                case SyntaxKind.WarningKeyword:\n                    return 'warning';\n                case SyntaxKind.ErrorKeyword:\n                    return 'error';\n                case SyntaxKind.LineKeyword:\n                    return 'line';\n                case SyntaxKind.PragmaKeyword:\n                    return 'pragma';\n                case SyntaxKind.HiddenKeyword:\n                    return 'hidden';\n                case SyntaxKind.ChecksumKeyword:\n                    return 'checksum';\n                case SyntaxKind.DisableKeyword:\n                    return 'disable';\n                case SyntaxKind.RestoreKeyword:\n                    return 'restore';\n                case SyntaxKind.ReferenceKeyword:\n                    return 'r';\n                case SyntaxKind.LoadKeyword:\n                    return 'load';\n                case SyntaxKind.NullableKeyword:\n                    return 'nullable';\n                case SyntaxKind.EnableKeyword:\n                    return 'enable';\n                case SyntaxKind.WarningsKeyword:\n                    return 'warnings';\n                case SyntaxKind.AnnotationsKeyword:\n                    return 'annotations';\n\n                // contextual keywords\n                case SyntaxKind.YieldKeyword:\n                    return 'yield';\n                case SyntaxKind.PartialKeyword:\n                    return 'partial';\n                case SyntaxKind.FromKeyword:\n                    return 'from';\n                case SyntaxKind.GroupKeyword:\n                    return 'group';\n                case SyntaxKind.JoinKeyword:\n                    return 'join';\n                case SyntaxKind.IntoKeyword:\n                    return 'into';\n                case SyntaxKind.LetKeyword:\n                    return 'let';\n                case SyntaxKind.ByKeyword:\n                    return 'by';\n                case SyntaxKind.WhereKeyword:\n                    return 'where';\n                case SyntaxKind.SelectKeyword:\n                    return 'select';\n                case SyntaxKind.GetKeyword:\n                    return 'get';\n                case SyntaxKind.SetKeyword:\n                    return 'set';\n                case SyntaxKind.AddKeyword:\n                    return 'add';\n                case SyntaxKind.RemoveKeyword:\n                    return 'remove';\n                case SyntaxKind.OrderByKeyword:\n                    return 'orderby';\n                case SyntaxKind.AliasKeyword:\n                    return 'alias';\n                case SyntaxKind.OnKeyword:\n                    return 'on';\n                case SyntaxKind.EqualsKeyword:\n                    return 'equals';\n                case SyntaxKind.AscendingKeyword:\n                    return 'ascending';\n                case SyntaxKind.DescendingKeyword:\n                    return 'descending';\n                case SyntaxKind.AssemblyKeyword:\n                    return 'assembly';\n                case SyntaxKind.ModuleKeyword:\n                    return 'module';\n                case SyntaxKind.TypeKeyword:\n                    return 'type';\n                case SyntaxKind.FieldKeyword:\n                    return 'field';\n                case SyntaxKind.MethodKeyword:\n                    return 'method';\n                case SyntaxKind.ParamKeyword:\n                    return 'param';\n                case SyntaxKind.PropertyKeyword:\n                    return 'property';\n                case SyntaxKind.TypeVarKeyword:\n                    return 'typevar';\n                case SyntaxKind.GlobalKeyword:\n                    return 'global';\n                case SyntaxKind.NameOfKeyword:\n                    return 'nameof';\n                case SyntaxKind.AsyncKeyword:\n                    return 'async';\n                case SyntaxKind.AwaitKeyword:\n                    return 'await';\n                case SyntaxKind.WhenKeyword:\n                    return 'when';\n                case SyntaxKind.InterpolatedStringStartToken:\n                    return '$\\'';\n                case SyntaxKind.InterpolatedStringEndToken:\n                    return '\\'';\n                case SyntaxKind.InterpolatedVerbatimStringStartToken:\n                    return '$@\\'';\n                case SyntaxKind.UnderscoreToken:\n                    return '_';\n                case SyntaxKind.VarKeyword:\n                    return 'var';\n                case SyntaxKind.AndKeyword:\n                    return 'and';\n                case SyntaxKind.OrKeyword:\n                    return 'or';\n                case SyntaxKind.NotKeyword:\n                    return 'not';\n                case SyntaxKind.DataKeyword:\n                    return 'data';\n                case SyntaxKind.WithKeyword:\n                    return 'with';\n                case SyntaxKind.InitKeyword:\n                    return 'init';\n                case SyntaxKind.RecordKeyword:\n                    return 'record';\n                case SyntaxKind.ManagedKeyword:\n                    return 'managed';\n                case SyntaxKind.UnmanagedKeyword:\n                    return 'unmanaged';\n                default:\n                    return string.Empty;\n            } 978014"];
1309 [label="return '~'; 978015"];
1310 [label="FullWidth = this.Text.Length; 978016"];
1311 [label="FullWidth 978017"];
1312 [label="this.flags |= NodeFlags.IsNotMissing; 978018"];
1313 [label="this.flags 978019"];
1314 [label="LeadingField 978020"];
1315 [label="TrailingField 978021"];
1316 [label="if (leading != null)\n                {\n                    this.AdjustFlagsAndWidth(leading);\n                    this.LeadingField = leading;\n                } 978022"];
1317 [label="if (leading != null)\n                {\n                    this.AdjustFlagsAndWidth(leading);\n                    this.LeadingField = leading;\n                } 978023"];
1318 [label="this.AdjustFlagsAndWidth(leading); 978024"];
1319 [label="this.AdjustFlagsAndWidth(leading); 978025"];
1320 [label="this.LeadingField 978026"];
1321 [label="if (trailing != null)\n                {\n                    this.AdjustFlagsAndWidth(trailing);\n                    this.TrailingField = trailing;\n                } 978027"];
1322 [label="if (trailing != null)\n                {\n                    this.AdjustFlagsAndWidth(trailing);\n                    this.TrailingField = trailing;\n                } 978028"];
1323 [label="this.AdjustFlagsAndWidth(trailing); 978029"];
1324 [label="this.AdjustFlagsAndWidth(trailing); 978030"];
1325 [label="this.TrailingField 978031"];
1326 [label="s_tokensWithElasticTrivia[(int)kind].Value 978032"];
1327 [label="s_tokensWithSingleTrailingSpace[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.Space); 978033"];
1328 [label="s_tokensWithSingleTrailingSpace[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.Space); 978034"];
1329 [label="s_tokensWithSingleTrailingSpace[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.Space); 978035"];
1330 [label="s_tokensWithSingleTrailingSpace[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.Space); 978036"];
1331 [label="new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.Space) 978037"];
1332 [label="param SyntaxTokenWithTrivia(SyntaxKind kind) 978038"];
1333 [label="param SyntaxTokenWithTrivia(GreenNode leading) 978039"];
1334 [label="param SyntaxTokenWithTrivia(GreenNode trailing) 978040"];
1335 [label="param SyntaxTokenWithTrivia(this) 978041"];
1336 [label="kind 978042"];
1337 [label="param SyntaxTokenWithTrivia(this) 978043"];
1338 [label="param SyntaxToken(SyntaxKind kind) 978044"];
1339 [label="param SyntaxToken(this) 978045"];
1340 [label="kind 978046"];
1341 [label="param SyntaxToken(this) 978047"];
1342 [label="param CSharpSyntaxNode(SyntaxKind kind) 978048"];
1343 [label="param CSharpSyntaxNode(this) 978049"];
1344 [label="kind 978050"];
1345 [label="param CSharpSyntaxNode(this) 978051"];
1346 [label="param CSharpSyntaxNode(this) 978052"];
1347 [label="GreenStats.NoteGreen(this); 978053"];
1348 [label="GreenStats.NoteGreen(this); 978054"];
1349 [label="this.Text 978055"];
1350 [label="get { return SyntaxFacts.GetText(this.Kind); } 978056"];
1351 [label="this.Kind 978057"];
1352 [label="get { return (SyntaxKind)this.RawKind; } 978058"];
1353 [label="return (SyntaxKind)this.RawKind; 978059"];
1354 [label="return SyntaxFacts.GetText(this.Kind); 978060"];
1355 [label="SyntaxFacts.GetText(this.Kind) 978061"];
1356 [label="param GetText(SyntaxKind kind) 978062"];
1357 [label="switch (kind)\n            {\n                case SyntaxKind.TildeToken:\n                    return '~';\n                case SyntaxKind.ExclamationToken:\n                    return '!';\n                case SyntaxKind.DollarToken:\n                    return '$';\n                case SyntaxKind.PercentToken:\n                    return '%';\n                case SyntaxKind.CaretToken:\n                    return '^';\n                case SyntaxKind.AmpersandToken:\n                    return '&';\n                case SyntaxKind.AsteriskToken:\n                    return '*';\n                case SyntaxKind.OpenParenToken:\n                    return '(';\n                case SyntaxKind.CloseParenToken:\n                    return ')';\n                case SyntaxKind.MinusToken:\n                    return '-';\n                case SyntaxKind.PlusToken:\n                    return '+';\n                case SyntaxKind.EqualsToken:\n                    return '=';\n                case SyntaxKind.OpenBraceToken:\n                    return '{';\n                case SyntaxKind.CloseBraceToken:\n                    return '}';\n                case SyntaxKind.OpenBracketToken:\n                    return '[';\n                case SyntaxKind.CloseBracketToken:\n                    return ']';\n                case SyntaxKind.BarToken:\n                    return '|';\n                case SyntaxKind.BackslashToken:\n                    return '\\\\';\n                case SyntaxKind.ColonToken:\n                    return ':';\n                case SyntaxKind.SemicolonToken:\n                    return ';';\n                case SyntaxKind.DoubleQuoteToken:\n                    return '\\'';\n                case SyntaxKind.SingleQuoteToken:\n                    return ''';\n                case SyntaxKind.LessThanToken:\n                    return '<';\n                case SyntaxKind.CommaToken:\n                    return ',';\n                case SyntaxKind.GreaterThanToken:\n                    return '>';\n                case SyntaxKind.DotToken:\n                    return '.';\n                case SyntaxKind.QuestionToken:\n                    return '?';\n                case SyntaxKind.HashToken:\n                    return '#';\n                case SyntaxKind.SlashToken:\n                    return '/';\n                case SyntaxKind.SlashGreaterThanToken:\n                    return '/>';\n                case SyntaxKind.LessThanSlashToken:\n                    return '</';\n                case SyntaxKind.XmlCommentStartToken:\n                    return '<!--';\n                case SyntaxKind.XmlCommentEndToken:\n                    return '-->';\n                case SyntaxKind.XmlCDataStartToken:\n                    return '<![CDATA[';\n                case SyntaxKind.XmlCDataEndToken:\n                    return ']]>';\n                case SyntaxKind.XmlProcessingInstructionStartToken:\n                    return '<?';\n                case SyntaxKind.XmlProcessingInstructionEndToken:\n                    return '?>';\n\n                // compound\n                case SyntaxKind.BarBarToken:\n                    return '||';\n                case SyntaxKind.AmpersandAmpersandToken:\n                    return '&&';\n                case SyntaxKind.MinusMinusToken:\n                    return '--';\n                case SyntaxKind.PlusPlusToken:\n                    return '++';\n                case SyntaxKind.ColonColonToken:\n                    return '::';\n                case SyntaxKind.QuestionQuestionToken:\n                    return '??';\n                case SyntaxKind.MinusGreaterThanToken:\n                    return '->';\n                case SyntaxKind.ExclamationEqualsToken:\n                    return '!=';\n                case SyntaxKind.EqualsEqualsToken:\n                    return '==';\n                case SyntaxKind.EqualsGreaterThanToken:\n                    return '=>';\n                case SyntaxKind.LessThanEqualsToken:\n                    return '<=';\n                case SyntaxKind.LessThanLessThanToken:\n                    return '<<';\n                case SyntaxKind.LessThanLessThanEqualsToken:\n                    return '<<=';\n                case SyntaxKind.GreaterThanEqualsToken:\n                    return '>=';\n                case SyntaxKind.GreaterThanGreaterThanToken:\n                    return '>>';\n                case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n                    return '>>=';\n                case SyntaxKind.SlashEqualsToken:\n                    return '/=';\n                case SyntaxKind.AsteriskEqualsToken:\n                    return '*=';\n                case SyntaxKind.BarEqualsToken:\n                    return '|=';\n                case SyntaxKind.AmpersandEqualsToken:\n                    return '&=';\n                case SyntaxKind.PlusEqualsToken:\n                    return '+=';\n                case SyntaxKind.MinusEqualsToken:\n                    return '-=';\n                case SyntaxKind.CaretEqualsToken:\n                    return '^=';\n                case SyntaxKind.PercentEqualsToken:\n                    return '%=';\n                case SyntaxKind.QuestionQuestionEqualsToken:\n                    return '??=';\n                case SyntaxKind.DotDotToken:\n                    return '..';\n\n                // Keywords\n                case SyntaxKind.BoolKeyword:\n                    return 'bool';\n                case SyntaxKind.ByteKeyword:\n                    return 'byte';\n                case SyntaxKind.SByteKeyword:\n                    return 'sbyte';\n                case SyntaxKind.ShortKeyword:\n                    return 'short';\n                case SyntaxKind.UShortKeyword:\n                    return 'ushort';\n                case SyntaxKind.IntKeyword:\n                    return 'int';\n                case SyntaxKind.UIntKeyword:\n                    return 'uint';\n                case SyntaxKind.LongKeyword:\n                    return 'long';\n                case SyntaxKind.ULongKeyword:\n                    return 'ulong';\n                case SyntaxKind.DoubleKeyword:\n                    return 'double';\n                case SyntaxKind.FloatKeyword:\n                    return 'float';\n                case SyntaxKind.DecimalKeyword:\n                    return 'decimal';\n                case SyntaxKind.StringKeyword:\n                    return 'string';\n                case SyntaxKind.CharKeyword:\n                    return 'char';\n                case SyntaxKind.VoidKeyword:\n                    return 'void';\n                case SyntaxKind.ObjectKeyword:\n                    return 'object';\n                case SyntaxKind.TypeOfKeyword:\n                    return 'typeof';\n                case SyntaxKind.SizeOfKeyword:\n                    return 'sizeof';\n                case SyntaxKind.NullKeyword:\n                    return 'null';\n                case SyntaxKind.TrueKeyword:\n                    return 'true';\n                case SyntaxKind.FalseKeyword:\n                    return 'false';\n                case SyntaxKind.IfKeyword:\n                    return 'if';\n                case SyntaxKind.ElseKeyword:\n                    return 'else';\n                case SyntaxKind.WhileKeyword:\n                    return 'while';\n                case SyntaxKind.ForKeyword:\n                    return 'for';\n                case SyntaxKind.ForEachKeyword:\n                    return 'foreach';\n                case SyntaxKind.DoKeyword:\n                    return 'do';\n                case SyntaxKind.SwitchKeyword:\n                    return 'switch';\n                case SyntaxKind.CaseKeyword:\n                    return 'case';\n                case SyntaxKind.DefaultKeyword:\n                    return 'default';\n                case SyntaxKind.TryKeyword:\n                    return 'try';\n                case SyntaxKind.CatchKeyword:\n                    return 'catch';\n                case SyntaxKind.FinallyKeyword:\n                    return 'finally';\n                case SyntaxKind.LockKeyword:\n                    return 'lock';\n                case SyntaxKind.GotoKeyword:\n                    return 'goto';\n                case SyntaxKind.BreakKeyword:\n                    return 'break';\n                case SyntaxKind.ContinueKeyword:\n                    return 'continue';\n                case SyntaxKind.ReturnKeyword:\n                    return 'return';\n                case SyntaxKind.ThrowKeyword:\n                    return 'throw';\n                case SyntaxKind.PublicKeyword:\n                    return 'public';\n                case SyntaxKind.PrivateKeyword:\n                    return 'private';\n                case SyntaxKind.InternalKeyword:\n                    return 'internal';\n                case SyntaxKind.ProtectedKeyword:\n                    return 'protected';\n                case SyntaxKind.StaticKeyword:\n                    return 'static';\n                case SyntaxKind.ReadOnlyKeyword:\n                    return 'readonly';\n                case SyntaxKind.SealedKeyword:\n                    return 'sealed';\n                case SyntaxKind.ConstKeyword:\n                    return 'const';\n                case SyntaxKind.FixedKeyword:\n                    return 'fixed';\n                case SyntaxKind.StackAllocKeyword:\n                    return 'stackalloc';\n                case SyntaxKind.VolatileKeyword:\n                    return 'volatile';\n                case SyntaxKind.NewKeyword:\n                    return 'new';\n                case SyntaxKind.OverrideKeyword:\n                    return 'override';\n                case SyntaxKind.AbstractKeyword:\n                    return 'abstract';\n                case SyntaxKind.VirtualKeyword:\n                    return 'virtual';\n                case SyntaxKind.EventKeyword:\n                    return 'event';\n                case SyntaxKind.ExternKeyword:\n                    return 'extern';\n                case SyntaxKind.RefKeyword:\n                    return 'ref';\n                case SyntaxKind.OutKeyword:\n                    return 'out';\n                case SyntaxKind.InKeyword:\n                    return 'in';\n                case SyntaxKind.IsKeyword:\n                    return 'is';\n                case SyntaxKind.AsKeyword:\n                    return 'as';\n                case SyntaxKind.ParamsKeyword:\n                    return 'params';\n                case SyntaxKind.ArgListKeyword:\n                    return '__arglist';\n                case SyntaxKind.MakeRefKeyword:\n                    return '__makeref';\n                case SyntaxKind.RefTypeKeyword:\n                    return '__reftype';\n                case SyntaxKind.RefValueKeyword:\n                    return '__refvalue';\n                case SyntaxKind.ThisKeyword:\n                    return 'this';\n                case SyntaxKind.BaseKeyword:\n                    return 'base';\n                case SyntaxKind.NamespaceKeyword:\n                    return 'namespace';\n                case SyntaxKind.UsingKeyword:\n                    return 'using';\n                case SyntaxKind.ClassKeyword:\n                    return 'class';\n                case SyntaxKind.StructKeyword:\n                    return 'struct';\n                case SyntaxKind.InterfaceKeyword:\n                    return 'interface';\n                case SyntaxKind.EnumKeyword:\n                    return 'enum';\n                case SyntaxKind.DelegateKeyword:\n                    return 'delegate';\n                case SyntaxKind.CheckedKeyword:\n                    return 'checked';\n                case SyntaxKind.UncheckedKeyword:\n                    return 'unchecked';\n                case SyntaxKind.UnsafeKeyword:\n                    return 'unsafe';\n                case SyntaxKind.OperatorKeyword:\n                    return 'operator';\n                case SyntaxKind.ImplicitKeyword:\n                    return 'implicit';\n                case SyntaxKind.ExplicitKeyword:\n                    return 'explicit';\n                case SyntaxKind.ElifKeyword:\n                    return 'elif';\n                case SyntaxKind.EndIfKeyword:\n                    return 'endif';\n                case SyntaxKind.RegionKeyword:\n                    return 'region';\n                case SyntaxKind.EndRegionKeyword:\n                    return 'endregion';\n                case SyntaxKind.DefineKeyword:\n                    return 'define';\n                case SyntaxKind.UndefKeyword:\n                    return 'undef';\n                case SyntaxKind.WarningKeyword:\n                    return 'warning';\n                case SyntaxKind.ErrorKeyword:\n                    return 'error';\n                case SyntaxKind.LineKeyword:\n                    return 'line';\n                case SyntaxKind.PragmaKeyword:\n                    return 'pragma';\n                case SyntaxKind.HiddenKeyword:\n                    return 'hidden';\n                case SyntaxKind.ChecksumKeyword:\n                    return 'checksum';\n                case SyntaxKind.DisableKeyword:\n                    return 'disable';\n                case SyntaxKind.RestoreKeyword:\n                    return 'restore';\n                case SyntaxKind.ReferenceKeyword:\n                    return 'r';\n                case SyntaxKind.LoadKeyword:\n                    return 'load';\n                case SyntaxKind.NullableKeyword:\n                    return 'nullable';\n                case SyntaxKind.EnableKeyword:\n                    return 'enable';\n                case SyntaxKind.WarningsKeyword:\n                    return 'warnings';\n                case SyntaxKind.AnnotationsKeyword:\n                    return 'annotations';\n\n                // contextual keywords\n                case SyntaxKind.YieldKeyword:\n                    return 'yield';\n                case SyntaxKind.PartialKeyword:\n                    return 'partial';\n                case SyntaxKind.FromKeyword:\n                    return 'from';\n                case SyntaxKind.GroupKeyword:\n                    return 'group';\n                case SyntaxKind.JoinKeyword:\n                    return 'join';\n                case SyntaxKind.IntoKeyword:\n                    return 'into';\n                case SyntaxKind.LetKeyword:\n                    return 'let';\n                case SyntaxKind.ByKeyword:\n                    return 'by';\n                case SyntaxKind.WhereKeyword:\n                    return 'where';\n                case SyntaxKind.SelectKeyword:\n                    return 'select';\n                case SyntaxKind.GetKeyword:\n                    return 'get';\n                case SyntaxKind.SetKeyword:\n                    return 'set';\n                case SyntaxKind.AddKeyword:\n                    return 'add';\n                case SyntaxKind.RemoveKeyword:\n                    return 'remove';\n                case SyntaxKind.OrderByKeyword:\n                    return 'orderby';\n                case SyntaxKind.AliasKeyword:\n                    return 'alias';\n                case SyntaxKind.OnKeyword:\n                    return 'on';\n                case SyntaxKind.EqualsKeyword:\n                    return 'equals';\n                case SyntaxKind.AscendingKeyword:\n                    return 'ascending';\n                case SyntaxKind.DescendingKeyword:\n                    return 'descending';\n                case SyntaxKind.AssemblyKeyword:\n                    return 'assembly';\n                case SyntaxKind.ModuleKeyword:\n                    return 'module';\n                case SyntaxKind.TypeKeyword:\n                    return 'type';\n                case SyntaxKind.FieldKeyword:\n                    return 'field';\n                case SyntaxKind.MethodKeyword:\n                    return 'method';\n                case SyntaxKind.ParamKeyword:\n                    return 'param';\n                case SyntaxKind.PropertyKeyword:\n                    return 'property';\n                case SyntaxKind.TypeVarKeyword:\n                    return 'typevar';\n                case SyntaxKind.GlobalKeyword:\n                    return 'global';\n                case SyntaxKind.NameOfKeyword:\n                    return 'nameof';\n                case SyntaxKind.AsyncKeyword:\n                    return 'async';\n                case SyntaxKind.AwaitKeyword:\n                    return 'await';\n                case SyntaxKind.WhenKeyword:\n                    return 'when';\n                case SyntaxKind.InterpolatedStringStartToken:\n                    return '$\\'';\n                case SyntaxKind.InterpolatedStringEndToken:\n                    return '\\'';\n                case SyntaxKind.InterpolatedVerbatimStringStartToken:\n                    return '$@\\'';\n                case SyntaxKind.UnderscoreToken:\n                    return '_';\n                case SyntaxKind.VarKeyword:\n                    return 'var';\n                case SyntaxKind.AndKeyword:\n                    return 'and';\n                case SyntaxKind.OrKeyword:\n                    return 'or';\n                case SyntaxKind.NotKeyword:\n                    return 'not';\n                case SyntaxKind.DataKeyword:\n                    return 'data';\n                case SyntaxKind.WithKeyword:\n                    return 'with';\n                case SyntaxKind.InitKeyword:\n                    return 'init';\n                case SyntaxKind.RecordKeyword:\n                    return 'record';\n                case SyntaxKind.ManagedKeyword:\n                    return 'managed';\n                case SyntaxKind.UnmanagedKeyword:\n                    return 'unmanaged';\n                default:\n                    return string.Empty;\n            } 978063"];
1358 [label="return '~'; 978064"];
1359 [label="FullWidth = this.Text.Length; 978065"];
1360 [label="FullWidth 978066"];
1361 [label="this.flags |= NodeFlags.IsNotMissing; 978067"];
1362 [label="this.flags 978068"];
1363 [label="LeadingField 978069"];
1364 [label="TrailingField 978070"];
1365 [label="if (leading != null)\n                {\n                    this.AdjustFlagsAndWidth(leading);\n                    this.LeadingField = leading;\n                } 978071"];
1366 [label="if (leading != null)\n                {\n                    this.AdjustFlagsAndWidth(leading);\n                    this.LeadingField = leading;\n                } 978072"];
1367 [label="if (trailing != null)\n                {\n                    this.AdjustFlagsAndWidth(trailing);\n                    this.TrailingField = trailing;\n                } 978073"];
1368 [label="if (trailing != null)\n                {\n                    this.AdjustFlagsAndWidth(trailing);\n                    this.TrailingField = trailing;\n                } 978074"];
1369 [label="this.AdjustFlagsAndWidth(trailing); 978075"];
1370 [label="this.AdjustFlagsAndWidth(trailing); 978076"];
1371 [label="this.TrailingField 978077"];
1372 [label="s_tokensWithSingleTrailingSpace[(int)kind].Value 978078"];
1373 [label="s_tokensWithSingleTrailingCRLF[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.CarriageReturnLineFeed); 978079"];
1374 [label="s_tokensWithSingleTrailingCRLF[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.CarriageReturnLineFeed); 978080"];
1375 [label="s_tokensWithSingleTrailingCRLF[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.CarriageReturnLineFeed); 978081"];
1376 [label="s_tokensWithSingleTrailingCRLF[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.CarriageReturnLineFeed); 978082"];
1377 [label="new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.CarriageReturnLineFeed) 978083"];
1378 [label="param SyntaxTokenWithTrivia(SyntaxKind kind) 978084"];
1379 [label="param SyntaxTokenWithTrivia(GreenNode leading) 978085"];
1380 [label="param SyntaxTokenWithTrivia(GreenNode trailing) 978086"];
1381 [label="param SyntaxTokenWithTrivia(this) 978087"];
1382 [label="kind 978088"];
1383 [label="param SyntaxTokenWithTrivia(this) 978089"];
1384 [label="param SyntaxToken(SyntaxKind kind) 978090"];
1385 [label="param SyntaxToken(this) 978091"];
1386 [label="kind 978092"];
1387 [label="param SyntaxToken(this) 978093"];
1388 [label="param CSharpSyntaxNode(SyntaxKind kind) 978094"];
1389 [label="param CSharpSyntaxNode(this) 978095"];
1390 [label="kind 978096"];
1391 [label="param CSharpSyntaxNode(this) 978097"];
1392 [label="param CSharpSyntaxNode(this) 978098"];
1393 [label="GreenStats.NoteGreen(this); 978099"];
1394 [label="GreenStats.NoteGreen(this); 978100"];
1395 [label="this.Text 978101"];
1396 [label="get { return SyntaxFacts.GetText(this.Kind); } 978102"];
1397 [label="this.Kind 978103"];
1398 [label="get { return (SyntaxKind)this.RawKind; } 978104"];
1399 [label="return (SyntaxKind)this.RawKind; 978105"];
1400 [label="return SyntaxFacts.GetText(this.Kind); 978106"];
1401 [label="SyntaxFacts.GetText(this.Kind) 978107"];
1402 [label="param GetText(SyntaxKind kind) 978108"];
1403 [label="switch (kind)\n            {\n                case SyntaxKind.TildeToken:\n                    return '~';\n                case SyntaxKind.ExclamationToken:\n                    return '!';\n                case SyntaxKind.DollarToken:\n                    return '$';\n                case SyntaxKind.PercentToken:\n                    return '%';\n                case SyntaxKind.CaretToken:\n                    return '^';\n                case SyntaxKind.AmpersandToken:\n                    return '&';\n                case SyntaxKind.AsteriskToken:\n                    return '*';\n                case SyntaxKind.OpenParenToken:\n                    return '(';\n                case SyntaxKind.CloseParenToken:\n                    return ')';\n                case SyntaxKind.MinusToken:\n                    return '-';\n                case SyntaxKind.PlusToken:\n                    return '+';\n                case SyntaxKind.EqualsToken:\n                    return '=';\n                case SyntaxKind.OpenBraceToken:\n                    return '{';\n                case SyntaxKind.CloseBraceToken:\n                    return '}';\n                case SyntaxKind.OpenBracketToken:\n                    return '[';\n                case SyntaxKind.CloseBracketToken:\n                    return ']';\n                case SyntaxKind.BarToken:\n                    return '|';\n                case SyntaxKind.BackslashToken:\n                    return '\\\\';\n                case SyntaxKind.ColonToken:\n                    return ':';\n                case SyntaxKind.SemicolonToken:\n                    return ';';\n                case SyntaxKind.DoubleQuoteToken:\n                    return '\\'';\n                case SyntaxKind.SingleQuoteToken:\n                    return ''';\n                case SyntaxKind.LessThanToken:\n                    return '<';\n                case SyntaxKind.CommaToken:\n                    return ',';\n                case SyntaxKind.GreaterThanToken:\n                    return '>';\n                case SyntaxKind.DotToken:\n                    return '.';\n                case SyntaxKind.QuestionToken:\n                    return '?';\n                case SyntaxKind.HashToken:\n                    return '#';\n                case SyntaxKind.SlashToken:\n                    return '/';\n                case SyntaxKind.SlashGreaterThanToken:\n                    return '/>';\n                case SyntaxKind.LessThanSlashToken:\n                    return '</';\n                case SyntaxKind.XmlCommentStartToken:\n                    return '<!--';\n                case SyntaxKind.XmlCommentEndToken:\n                    return '-->';\n                case SyntaxKind.XmlCDataStartToken:\n                    return '<![CDATA[';\n                case SyntaxKind.XmlCDataEndToken:\n                    return ']]>';\n                case SyntaxKind.XmlProcessingInstructionStartToken:\n                    return '<?';\n                case SyntaxKind.XmlProcessingInstructionEndToken:\n                    return '?>';\n\n                // compound\n                case SyntaxKind.BarBarToken:\n                    return '||';\n                case SyntaxKind.AmpersandAmpersandToken:\n                    return '&&';\n                case SyntaxKind.MinusMinusToken:\n                    return '--';\n                case SyntaxKind.PlusPlusToken:\n                    return '++';\n                case SyntaxKind.ColonColonToken:\n                    return '::';\n                case SyntaxKind.QuestionQuestionToken:\n                    return '??';\n                case SyntaxKind.MinusGreaterThanToken:\n                    return '->';\n                case SyntaxKind.ExclamationEqualsToken:\n                    return '!=';\n                case SyntaxKind.EqualsEqualsToken:\n                    return '==';\n                case SyntaxKind.EqualsGreaterThanToken:\n                    return '=>';\n                case SyntaxKind.LessThanEqualsToken:\n                    return '<=';\n                case SyntaxKind.LessThanLessThanToken:\n                    return '<<';\n                case SyntaxKind.LessThanLessThanEqualsToken:\n                    return '<<=';\n                case SyntaxKind.GreaterThanEqualsToken:\n                    return '>=';\n                case SyntaxKind.GreaterThanGreaterThanToken:\n                    return '>>';\n                case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n                    return '>>=';\n                case SyntaxKind.SlashEqualsToken:\n                    return '/=';\n                case SyntaxKind.AsteriskEqualsToken:\n                    return '*=';\n                case SyntaxKind.BarEqualsToken:\n                    return '|=';\n                case SyntaxKind.AmpersandEqualsToken:\n                    return '&=';\n                case SyntaxKind.PlusEqualsToken:\n                    return '+=';\n                case SyntaxKind.MinusEqualsToken:\n                    return '-=';\n                case SyntaxKind.CaretEqualsToken:\n                    return '^=';\n                case SyntaxKind.PercentEqualsToken:\n                    return '%=';\n                case SyntaxKind.QuestionQuestionEqualsToken:\n                    return '??=';\n                case SyntaxKind.DotDotToken:\n                    return '..';\n\n                // Keywords\n                case SyntaxKind.BoolKeyword:\n                    return 'bool';\n                case SyntaxKind.ByteKeyword:\n                    return 'byte';\n                case SyntaxKind.SByteKeyword:\n                    return 'sbyte';\n                case SyntaxKind.ShortKeyword:\n                    return 'short';\n                case SyntaxKind.UShortKeyword:\n                    return 'ushort';\n                case SyntaxKind.IntKeyword:\n                    return 'int';\n                case SyntaxKind.UIntKeyword:\n                    return 'uint';\n                case SyntaxKind.LongKeyword:\n                    return 'long';\n                case SyntaxKind.ULongKeyword:\n                    return 'ulong';\n                case SyntaxKind.DoubleKeyword:\n                    return 'double';\n                case SyntaxKind.FloatKeyword:\n                    return 'float';\n                case SyntaxKind.DecimalKeyword:\n                    return 'decimal';\n                case SyntaxKind.StringKeyword:\n                    return 'string';\n                case SyntaxKind.CharKeyword:\n                    return 'char';\n                case SyntaxKind.VoidKeyword:\n                    return 'void';\n                case SyntaxKind.ObjectKeyword:\n                    return 'object';\n                case SyntaxKind.TypeOfKeyword:\n                    return 'typeof';\n                case SyntaxKind.SizeOfKeyword:\n                    return 'sizeof';\n                case SyntaxKind.NullKeyword:\n                    return 'null';\n                case SyntaxKind.TrueKeyword:\n                    return 'true';\n                case SyntaxKind.FalseKeyword:\n                    return 'false';\n                case SyntaxKind.IfKeyword:\n                    return 'if';\n                case SyntaxKind.ElseKeyword:\n                    return 'else';\n                case SyntaxKind.WhileKeyword:\n                    return 'while';\n                case SyntaxKind.ForKeyword:\n                    return 'for';\n                case SyntaxKind.ForEachKeyword:\n                    return 'foreach';\n                case SyntaxKind.DoKeyword:\n                    return 'do';\n                case SyntaxKind.SwitchKeyword:\n                    return 'switch';\n                case SyntaxKind.CaseKeyword:\n                    return 'case';\n                case SyntaxKind.DefaultKeyword:\n                    return 'default';\n                case SyntaxKind.TryKeyword:\n                    return 'try';\n                case SyntaxKind.CatchKeyword:\n                    return 'catch';\n                case SyntaxKind.FinallyKeyword:\n                    return 'finally';\n                case SyntaxKind.LockKeyword:\n                    return 'lock';\n                case SyntaxKind.GotoKeyword:\n                    return 'goto';\n                case SyntaxKind.BreakKeyword:\n                    return 'break';\n                case SyntaxKind.ContinueKeyword:\n                    return 'continue';\n                case SyntaxKind.ReturnKeyword:\n                    return 'return';\n                case SyntaxKind.ThrowKeyword:\n                    return 'throw';\n                case SyntaxKind.PublicKeyword:\n                    return 'public';\n                case SyntaxKind.PrivateKeyword:\n                    return 'private';\n                case SyntaxKind.InternalKeyword:\n                    return 'internal';\n                case SyntaxKind.ProtectedKeyword:\n                    return 'protected';\n                case SyntaxKind.StaticKeyword:\n                    return 'static';\n                case SyntaxKind.ReadOnlyKeyword:\n                    return 'readonly';\n                case SyntaxKind.SealedKeyword:\n                    return 'sealed';\n                case SyntaxKind.ConstKeyword:\n                    return 'const';\n                case SyntaxKind.FixedKeyword:\n                    return 'fixed';\n                case SyntaxKind.StackAllocKeyword:\n                    return 'stackalloc';\n                case SyntaxKind.VolatileKeyword:\n                    return 'volatile';\n                case SyntaxKind.NewKeyword:\n                    return 'new';\n                case SyntaxKind.OverrideKeyword:\n                    return 'override';\n                case SyntaxKind.AbstractKeyword:\n                    return 'abstract';\n                case SyntaxKind.VirtualKeyword:\n                    return 'virtual';\n                case SyntaxKind.EventKeyword:\n                    return 'event';\n                case SyntaxKind.ExternKeyword:\n                    return 'extern';\n                case SyntaxKind.RefKeyword:\n                    return 'ref';\n                case SyntaxKind.OutKeyword:\n                    return 'out';\n                case SyntaxKind.InKeyword:\n                    return 'in';\n                case SyntaxKind.IsKeyword:\n                    return 'is';\n                case SyntaxKind.AsKeyword:\n                    return 'as';\n                case SyntaxKind.ParamsKeyword:\n                    return 'params';\n                case SyntaxKind.ArgListKeyword:\n                    return '__arglist';\n                case SyntaxKind.MakeRefKeyword:\n                    return '__makeref';\n                case SyntaxKind.RefTypeKeyword:\n                    return '__reftype';\n                case SyntaxKind.RefValueKeyword:\n                    return '__refvalue';\n                case SyntaxKind.ThisKeyword:\n                    return 'this';\n                case SyntaxKind.BaseKeyword:\n                    return 'base';\n                case SyntaxKind.NamespaceKeyword:\n                    return 'namespace';\n                case SyntaxKind.UsingKeyword:\n                    return 'using';\n                case SyntaxKind.ClassKeyword:\n                    return 'class';\n                case SyntaxKind.StructKeyword:\n                    return 'struct';\n                case SyntaxKind.InterfaceKeyword:\n                    return 'interface';\n                case SyntaxKind.EnumKeyword:\n                    return 'enum';\n                case SyntaxKind.DelegateKeyword:\n                    return 'delegate';\n                case SyntaxKind.CheckedKeyword:\n                    return 'checked';\n                case SyntaxKind.UncheckedKeyword:\n                    return 'unchecked';\n                case SyntaxKind.UnsafeKeyword:\n                    return 'unsafe';\n                case SyntaxKind.OperatorKeyword:\n                    return 'operator';\n                case SyntaxKind.ImplicitKeyword:\n                    return 'implicit';\n                case SyntaxKind.ExplicitKeyword:\n                    return 'explicit';\n                case SyntaxKind.ElifKeyword:\n                    return 'elif';\n                case SyntaxKind.EndIfKeyword:\n                    return 'endif';\n                case SyntaxKind.RegionKeyword:\n                    return 'region';\n                case SyntaxKind.EndRegionKeyword:\n                    return 'endregion';\n                case SyntaxKind.DefineKeyword:\n                    return 'define';\n                case SyntaxKind.UndefKeyword:\n                    return 'undef';\n                case SyntaxKind.WarningKeyword:\n                    return 'warning';\n                case SyntaxKind.ErrorKeyword:\n                    return 'error';\n                case SyntaxKind.LineKeyword:\n                    return 'line';\n                case SyntaxKind.PragmaKeyword:\n                    return 'pragma';\n                case SyntaxKind.HiddenKeyword:\n                    return 'hidden';\n                case SyntaxKind.ChecksumKeyword:\n                    return 'checksum';\n                case SyntaxKind.DisableKeyword:\n                    return 'disable';\n                case SyntaxKind.RestoreKeyword:\n                    return 'restore';\n                case SyntaxKind.ReferenceKeyword:\n                    return 'r';\n                case SyntaxKind.LoadKeyword:\n                    return 'load';\n                case SyntaxKind.NullableKeyword:\n                    return 'nullable';\n                case SyntaxKind.EnableKeyword:\n                    return 'enable';\n                case SyntaxKind.WarningsKeyword:\n                    return 'warnings';\n                case SyntaxKind.AnnotationsKeyword:\n                    return 'annotations';\n\n                // contextual keywords\n                case SyntaxKind.YieldKeyword:\n                    return 'yield';\n                case SyntaxKind.PartialKeyword:\n                    return 'partial';\n                case SyntaxKind.FromKeyword:\n                    return 'from';\n                case SyntaxKind.GroupKeyword:\n                    return 'group';\n                case SyntaxKind.JoinKeyword:\n                    return 'join';\n                case SyntaxKind.IntoKeyword:\n                    return 'into';\n                case SyntaxKind.LetKeyword:\n                    return 'let';\n                case SyntaxKind.ByKeyword:\n                    return 'by';\n                case SyntaxKind.WhereKeyword:\n                    return 'where';\n                case SyntaxKind.SelectKeyword:\n                    return 'select';\n                case SyntaxKind.GetKeyword:\n                    return 'get';\n                case SyntaxKind.SetKeyword:\n                    return 'set';\n                case SyntaxKind.AddKeyword:\n                    return 'add';\n                case SyntaxKind.RemoveKeyword:\n                    return 'remove';\n                case SyntaxKind.OrderByKeyword:\n                    return 'orderby';\n                case SyntaxKind.AliasKeyword:\n                    return 'alias';\n                case SyntaxKind.OnKeyword:\n                    return 'on';\n                case SyntaxKind.EqualsKeyword:\n                    return 'equals';\n                case SyntaxKind.AscendingKeyword:\n                    return 'ascending';\n                case SyntaxKind.DescendingKeyword:\n                    return 'descending';\n                case SyntaxKind.AssemblyKeyword:\n                    return 'assembly';\n                case SyntaxKind.ModuleKeyword:\n                    return 'module';\n                case SyntaxKind.TypeKeyword:\n                    return 'type';\n                case SyntaxKind.FieldKeyword:\n                    return 'field';\n                case SyntaxKind.MethodKeyword:\n                    return 'method';\n                case SyntaxKind.ParamKeyword:\n                    return 'param';\n                case SyntaxKind.PropertyKeyword:\n                    return 'property';\n                case SyntaxKind.TypeVarKeyword:\n                    return 'typevar';\n                case SyntaxKind.GlobalKeyword:\n                    return 'global';\n                case SyntaxKind.NameOfKeyword:\n                    return 'nameof';\n                case SyntaxKind.AsyncKeyword:\n                    return 'async';\n                case SyntaxKind.AwaitKeyword:\n                    return 'await';\n                case SyntaxKind.WhenKeyword:\n                    return 'when';\n                case SyntaxKind.InterpolatedStringStartToken:\n                    return '$\\'';\n                case SyntaxKind.InterpolatedStringEndToken:\n                    return '\\'';\n                case SyntaxKind.InterpolatedVerbatimStringStartToken:\n                    return '$@\\'';\n                case SyntaxKind.UnderscoreToken:\n                    return '_';\n                case SyntaxKind.VarKeyword:\n                    return 'var';\n                case SyntaxKind.AndKeyword:\n                    return 'and';\n                case SyntaxKind.OrKeyword:\n                    return 'or';\n                case SyntaxKind.NotKeyword:\n                    return 'not';\n                case SyntaxKind.DataKeyword:\n                    return 'data';\n                case SyntaxKind.WithKeyword:\n                    return 'with';\n                case SyntaxKind.InitKeyword:\n                    return 'init';\n                case SyntaxKind.RecordKeyword:\n                    return 'record';\n                case SyntaxKind.ManagedKeyword:\n                    return 'managed';\n                case SyntaxKind.UnmanagedKeyword:\n                    return 'unmanaged';\n                default:\n                    return string.Empty;\n            } 978109"];
1404 [label="return '~'; 978110"];
1405 [label="FullWidth = this.Text.Length; 978111"];
1406 [label="FullWidth 978112"];
1407 [label="this.flags |= NodeFlags.IsNotMissing; 978113"];
1408 [label="this.flags 978114"];
1409 [label="LeadingField 978115"];
1410 [label="TrailingField 978116"];
1411 [label="if (leading != null)\n                {\n                    this.AdjustFlagsAndWidth(leading);\n                    this.LeadingField = leading;\n                } 978117"];
1412 [label="if (leading != null)\n                {\n                    this.AdjustFlagsAndWidth(leading);\n                    this.LeadingField = leading;\n                } 978118"];
1413 [label="if (trailing != null)\n                {\n                    this.AdjustFlagsAndWidth(trailing);\n                    this.TrailingField = trailing;\n                } 978119"];
1414 [label="if (trailing != null)\n                {\n                    this.AdjustFlagsAndWidth(trailing);\n                    this.TrailingField = trailing;\n                } 978120"];
1415 [label="this.AdjustFlagsAndWidth(trailing); 978121"];
1416 [label="this.AdjustFlagsAndWidth(trailing); 978122"];
1417 [label="this.TrailingField 978123"];
1418 [label="s_tokensWithSingleTrailingCRLF[(int)kind].Value 978124"];
1419 [label="s_tokensWithNoTrivia[(int)kind].Value = new SyntaxToken(kind); 978125"];
1420 [label="param SyntaxToken(SyntaxKind kind) 978126"];
1421 [label="kind 978127"];
1422 [label="param CSharpSyntaxNode(SyntaxKind kind) 978128"];
1423 [label="kind 978129"];
1424 [label="param CSharpSyntaxNode(this) 978130"];
1425 [label="GreenStats.NoteGreen(this); 978131"];
1426 [label="return (SyntaxKind)this.RawKind; 978132"];
1427 [label="return SyntaxFacts.GetText(this.Kind); 978133"];
1428 [label="param GetText(SyntaxKind kind) 978134"];
1429 [label="switch (kind)\n            {\n                case SyntaxKind.TildeToken:\n                    return '~';\n                case SyntaxKind.ExclamationToken:\n                    return '!';\n                case SyntaxKind.DollarToken:\n                    return '$';\n                case SyntaxKind.PercentToken:\n                    return '%';\n                case SyntaxKind.CaretToken:\n                    return '^';\n                case SyntaxKind.AmpersandToken:\n                    return '&';\n                case SyntaxKind.AsteriskToken:\n                    return '*';\n                case SyntaxKind.OpenParenToken:\n                    return '(';\n                case SyntaxKind.CloseParenToken:\n                    return ')';\n                case SyntaxKind.MinusToken:\n                    return '-';\n                case SyntaxKind.PlusToken:\n                    return '+';\n                case SyntaxKind.EqualsToken:\n                    return '=';\n                case SyntaxKind.OpenBraceToken:\n                    return '{';\n                case SyntaxKind.CloseBraceToken:\n                    return '}';\n                case SyntaxKind.OpenBracketToken:\n                    return '[';\n                case SyntaxKind.CloseBracketToken:\n                    return ']';\n                case SyntaxKind.BarToken:\n                    return '|';\n                case SyntaxKind.BackslashToken:\n                    return '\\\\';\n                case SyntaxKind.ColonToken:\n                    return ':';\n                case SyntaxKind.SemicolonToken:\n                    return ';';\n                case SyntaxKind.DoubleQuoteToken:\n                    return '\\'';\n                case SyntaxKind.SingleQuoteToken:\n                    return ''';\n                case SyntaxKind.LessThanToken:\n                    return '<';\n                case SyntaxKind.CommaToken:\n                    return ',';\n                case SyntaxKind.GreaterThanToken:\n                    return '>';\n                case SyntaxKind.DotToken:\n                    return '.';\n                case SyntaxKind.QuestionToken:\n                    return '?';\n                case SyntaxKind.HashToken:\n                    return '#';\n                case SyntaxKind.SlashToken:\n                    return '/';\n                case SyntaxKind.SlashGreaterThanToken:\n                    return '/>';\n                case SyntaxKind.LessThanSlashToken:\n                    return '</';\n                case SyntaxKind.XmlCommentStartToken:\n                    return '<!--';\n                case SyntaxKind.XmlCommentEndToken:\n                    return '-->';\n                case SyntaxKind.XmlCDataStartToken:\n                    return '<![CDATA[';\n                case SyntaxKind.XmlCDataEndToken:\n                    return ']]>';\n                case SyntaxKind.XmlProcessingInstructionStartToken:\n                    return '<?';\n                case SyntaxKind.XmlProcessingInstructionEndToken:\n                    return '?>';\n\n                // compound\n                case SyntaxKind.BarBarToken:\n                    return '||';\n                case SyntaxKind.AmpersandAmpersandToken:\n                    return '&&';\n                case SyntaxKind.MinusMinusToken:\n                    return '--';\n                case SyntaxKind.PlusPlusToken:\n                    return '++';\n                case SyntaxKind.ColonColonToken:\n                    return '::';\n                case SyntaxKind.QuestionQuestionToken:\n                    return '??';\n                case SyntaxKind.MinusGreaterThanToken:\n                    return '->';\n                case SyntaxKind.ExclamationEqualsToken:\n                    return '!=';\n                case SyntaxKind.EqualsEqualsToken:\n                    return '==';\n                case SyntaxKind.EqualsGreaterThanToken:\n                    return '=>';\n                case SyntaxKind.LessThanEqualsToken:\n                    return '<=';\n                case SyntaxKind.LessThanLessThanToken:\n                    return '<<';\n                case SyntaxKind.LessThanLessThanEqualsToken:\n                    return '<<=';\n                case SyntaxKind.GreaterThanEqualsToken:\n                    return '>=';\n                case SyntaxKind.GreaterThanGreaterThanToken:\n                    return '>>';\n                case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n                    return '>>=';\n                case SyntaxKind.SlashEqualsToken:\n                    return '/=';\n                case SyntaxKind.AsteriskEqualsToken:\n                    return '*=';\n                case SyntaxKind.BarEqualsToken:\n                    return '|=';\n                case SyntaxKind.AmpersandEqualsToken:\n                    return '&=';\n                case SyntaxKind.PlusEqualsToken:\n                    return '+=';\n                case SyntaxKind.MinusEqualsToken:\n                    return '-=';\n                case SyntaxKind.CaretEqualsToken:\n                    return '^=';\n                case SyntaxKind.PercentEqualsToken:\n                    return '%=';\n                case SyntaxKind.QuestionQuestionEqualsToken:\n                    return '??=';\n                case SyntaxKind.DotDotToken:\n                    return '..';\n\n                // Keywords\n                case SyntaxKind.BoolKeyword:\n                    return 'bool';\n                case SyntaxKind.ByteKeyword:\n                    return 'byte';\n                case SyntaxKind.SByteKeyword:\n                    return 'sbyte';\n                case SyntaxKind.ShortKeyword:\n                    return 'short';\n                case SyntaxKind.UShortKeyword:\n                    return 'ushort';\n                case SyntaxKind.IntKeyword:\n                    return 'int';\n                case SyntaxKind.UIntKeyword:\n                    return 'uint';\n                case SyntaxKind.LongKeyword:\n                    return 'long';\n                case SyntaxKind.ULongKeyword:\n                    return 'ulong';\n                case SyntaxKind.DoubleKeyword:\n                    return 'double';\n                case SyntaxKind.FloatKeyword:\n                    return 'float';\n                case SyntaxKind.DecimalKeyword:\n                    return 'decimal';\n                case SyntaxKind.StringKeyword:\n                    return 'string';\n                case SyntaxKind.CharKeyword:\n                    return 'char';\n                case SyntaxKind.VoidKeyword:\n                    return 'void';\n                case SyntaxKind.ObjectKeyword:\n                    return 'object';\n                case SyntaxKind.TypeOfKeyword:\n                    return 'typeof';\n                case SyntaxKind.SizeOfKeyword:\n                    return 'sizeof';\n                case SyntaxKind.NullKeyword:\n                    return 'null';\n                case SyntaxKind.TrueKeyword:\n                    return 'true';\n                case SyntaxKind.FalseKeyword:\n                    return 'false';\n                case SyntaxKind.IfKeyword:\n                    return 'if';\n                case SyntaxKind.ElseKeyword:\n                    return 'else';\n                case SyntaxKind.WhileKeyword:\n                    return 'while';\n                case SyntaxKind.ForKeyword:\n                    return 'for';\n                case SyntaxKind.ForEachKeyword:\n                    return 'foreach';\n                case SyntaxKind.DoKeyword:\n                    return 'do';\n                case SyntaxKind.SwitchKeyword:\n                    return 'switch';\n                case SyntaxKind.CaseKeyword:\n                    return 'case';\n                case SyntaxKind.DefaultKeyword:\n                    return 'default';\n                case SyntaxKind.TryKeyword:\n                    return 'try';\n                case SyntaxKind.CatchKeyword:\n                    return 'catch';\n                case SyntaxKind.FinallyKeyword:\n                    return 'finally';\n                case SyntaxKind.LockKeyword:\n                    return 'lock';\n                case SyntaxKind.GotoKeyword:\n                    return 'goto';\n                case SyntaxKind.BreakKeyword:\n                    return 'break';\n                case SyntaxKind.ContinueKeyword:\n                    return 'continue';\n                case SyntaxKind.ReturnKeyword:\n                    return 'return';\n                case SyntaxKind.ThrowKeyword:\n                    return 'throw';\n                case SyntaxKind.PublicKeyword:\n                    return 'public';\n                case SyntaxKind.PrivateKeyword:\n                    return 'private';\n                case SyntaxKind.InternalKeyword:\n                    return 'internal';\n                case SyntaxKind.ProtectedKeyword:\n                    return 'protected';\n                case SyntaxKind.StaticKeyword:\n                    return 'static';\n                case SyntaxKind.ReadOnlyKeyword:\n                    return 'readonly';\n                case SyntaxKind.SealedKeyword:\n                    return 'sealed';\n                case SyntaxKind.ConstKeyword:\n                    return 'const';\n                case SyntaxKind.FixedKeyword:\n                    return 'fixed';\n                case SyntaxKind.StackAllocKeyword:\n                    return 'stackalloc';\n                case SyntaxKind.VolatileKeyword:\n                    return 'volatile';\n                case SyntaxKind.NewKeyword:\n                    return 'new';\n                case SyntaxKind.OverrideKeyword:\n                    return 'override';\n                case SyntaxKind.AbstractKeyword:\n                    return 'abstract';\n                case SyntaxKind.VirtualKeyword:\n                    return 'virtual';\n                case SyntaxKind.EventKeyword:\n                    return 'event';\n                case SyntaxKind.ExternKeyword:\n                    return 'extern';\n                case SyntaxKind.RefKeyword:\n                    return 'ref';\n                case SyntaxKind.OutKeyword:\n                    return 'out';\n                case SyntaxKind.InKeyword:\n                    return 'in';\n                case SyntaxKind.IsKeyword:\n                    return 'is';\n                case SyntaxKind.AsKeyword:\n                    return 'as';\n                case SyntaxKind.ParamsKeyword:\n                    return 'params';\n                case SyntaxKind.ArgListKeyword:\n                    return '__arglist';\n                case SyntaxKind.MakeRefKeyword:\n                    return '__makeref';\n                case SyntaxKind.RefTypeKeyword:\n                    return '__reftype';\n                case SyntaxKind.RefValueKeyword:\n                    return '__refvalue';\n                case SyntaxKind.ThisKeyword:\n                    return 'this';\n                case SyntaxKind.BaseKeyword:\n                    return 'base';\n                case SyntaxKind.NamespaceKeyword:\n                    return 'namespace';\n                case SyntaxKind.UsingKeyword:\n                    return 'using';\n                case SyntaxKind.ClassKeyword:\n                    return 'class';\n                case SyntaxKind.StructKeyword:\n                    return 'struct';\n                case SyntaxKind.InterfaceKeyword:\n                    return 'interface';\n                case SyntaxKind.EnumKeyword:\n                    return 'enum';\n                case SyntaxKind.DelegateKeyword:\n                    return 'delegate';\n                case SyntaxKind.CheckedKeyword:\n                    return 'checked';\n                case SyntaxKind.UncheckedKeyword:\n                    return 'unchecked';\n                case SyntaxKind.UnsafeKeyword:\n                    return 'unsafe';\n                case SyntaxKind.OperatorKeyword:\n                    return 'operator';\n                case SyntaxKind.ImplicitKeyword:\n                    return 'implicit';\n                case SyntaxKind.ExplicitKeyword:\n                    return 'explicit';\n                case SyntaxKind.ElifKeyword:\n                    return 'elif';\n                case SyntaxKind.EndIfKeyword:\n                    return 'endif';\n                case SyntaxKind.RegionKeyword:\n                    return 'region';\n                case SyntaxKind.EndRegionKeyword:\n                    return 'endregion';\n                case SyntaxKind.DefineKeyword:\n                    return 'define';\n                case SyntaxKind.UndefKeyword:\n                    return 'undef';\n                case SyntaxKind.WarningKeyword:\n                    return 'warning';\n                case SyntaxKind.ErrorKeyword:\n                    return 'error';\n                case SyntaxKind.LineKeyword:\n                    return 'line';\n                case SyntaxKind.PragmaKeyword:\n                    return 'pragma';\n                case SyntaxKind.HiddenKeyword:\n                    return 'hidden';\n                case SyntaxKind.ChecksumKeyword:\n                    return 'checksum';\n                case SyntaxKind.DisableKeyword:\n                    return 'disable';\n                case SyntaxKind.RestoreKeyword:\n                    return 'restore';\n                case SyntaxKind.ReferenceKeyword:\n                    return 'r';\n                case SyntaxKind.LoadKeyword:\n                    return 'load';\n                case SyntaxKind.NullableKeyword:\n                    return 'nullable';\n                case SyntaxKind.EnableKeyword:\n                    return 'enable';\n                case SyntaxKind.WarningsKeyword:\n                    return 'warnings';\n                case SyntaxKind.AnnotationsKeyword:\n                    return 'annotations';\n\n                // contextual keywords\n                case SyntaxKind.YieldKeyword:\n                    return 'yield';\n                case SyntaxKind.PartialKeyword:\n                    return 'partial';\n                case SyntaxKind.FromKeyword:\n                    return 'from';\n                case SyntaxKind.GroupKeyword:\n                    return 'group';\n                case SyntaxKind.JoinKeyword:\n                    return 'join';\n                case SyntaxKind.IntoKeyword:\n                    return 'into';\n                case SyntaxKind.LetKeyword:\n                    return 'let';\n                case SyntaxKind.ByKeyword:\n                    return 'by';\n                case SyntaxKind.WhereKeyword:\n                    return 'where';\n                case SyntaxKind.SelectKeyword:\n                    return 'select';\n                case SyntaxKind.GetKeyword:\n                    return 'get';\n                case SyntaxKind.SetKeyword:\n                    return 'set';\n                case SyntaxKind.AddKeyword:\n                    return 'add';\n                case SyntaxKind.RemoveKeyword:\n                    return 'remove';\n                case SyntaxKind.OrderByKeyword:\n                    return 'orderby';\n                case SyntaxKind.AliasKeyword:\n                    return 'alias';\n                case SyntaxKind.OnKeyword:\n                    return 'on';\n                case SyntaxKind.EqualsKeyword:\n                    return 'equals';\n                case SyntaxKind.AscendingKeyword:\n                    return 'ascending';\n                case SyntaxKind.DescendingKeyword:\n                    return 'descending';\n                case SyntaxKind.AssemblyKeyword:\n                    return 'assembly';\n                case SyntaxKind.ModuleKeyword:\n                    return 'module';\n                case SyntaxKind.TypeKeyword:\n                    return 'type';\n                case SyntaxKind.FieldKeyword:\n                    return 'field';\n                case SyntaxKind.MethodKeyword:\n                    return 'method';\n                case SyntaxKind.ParamKeyword:\n                    return 'param';\n                case SyntaxKind.PropertyKeyword:\n                    return 'property';\n                case SyntaxKind.TypeVarKeyword:\n                    return 'typevar';\n                case SyntaxKind.GlobalKeyword:\n                    return 'global';\n                case SyntaxKind.NameOfKeyword:\n                    return 'nameof';\n                case SyntaxKind.AsyncKeyword:\n                    return 'async';\n                case SyntaxKind.AwaitKeyword:\n                    return 'await';\n                case SyntaxKind.WhenKeyword:\n                    return 'when';\n                case SyntaxKind.InterpolatedStringStartToken:\n                    return '$\\'';\n                case SyntaxKind.InterpolatedStringEndToken:\n                    return '\\'';\n                case SyntaxKind.InterpolatedVerbatimStringStartToken:\n                    return '$@\\'';\n                case SyntaxKind.UnderscoreToken:\n                    return '_';\n                case SyntaxKind.VarKeyword:\n                    return 'var';\n                case SyntaxKind.AndKeyword:\n                    return 'and';\n                case SyntaxKind.OrKeyword:\n                    return 'or';\n                case SyntaxKind.NotKeyword:\n                    return 'not';\n                case SyntaxKind.DataKeyword:\n                    return 'data';\n                case SyntaxKind.WithKeyword:\n                    return 'with';\n                case SyntaxKind.InitKeyword:\n                    return 'init';\n                case SyntaxKind.RecordKeyword:\n                    return 'record';\n                case SyntaxKind.ManagedKeyword:\n                    return 'managed';\n                case SyntaxKind.UnmanagedKeyword:\n                    return 'unmanaged';\n                default:\n                    return string.Empty;\n            } 978135"];
1430 [label="return '!'; 978136"];
1431 [label="FullWidth = this.Text.Length; 978137"];
1432 [label="FullWidth 978138"];
1433 [label="this.flags |= NodeFlags.IsNotMissing; 978139"];
1434 [label="this.flags 978140"];
1435 [label="s_tokensWithNoTrivia[(int)kind].Value 978141"];
1436 [label="s_tokensWithElasticTrivia[(int)kind].Value = new SyntaxTokenWithTrivia(kind, SyntaxFactory.ElasticZeroSpace, SyntaxFactory.ElasticZeroSpace); 978142"];
1437 [label="param SyntaxTokenWithTrivia(SyntaxKind kind) 978143"];
1438 [label="kind 978144"];
1439 [label="param SyntaxToken(SyntaxKind kind) 978145"];
1440 [label="kind 978146"];
1441 [label="param CSharpSyntaxNode(SyntaxKind kind) 978147"];
1442 [label="kind 978148"];
1443 [label="param CSharpSyntaxNode(this) 978149"];
1444 [label="GreenStats.NoteGreen(this); 978150"];
1445 [label="return (SyntaxKind)this.RawKind; 978151"];
1446 [label="return SyntaxFacts.GetText(this.Kind); 978152"];
1447 [label="param GetText(SyntaxKind kind) 978153"];
1448 [label="switch (kind)\n            {\n                case SyntaxKind.TildeToken:\n                    return '~';\n                case SyntaxKind.ExclamationToken:\n                    return '!';\n                case SyntaxKind.DollarToken:\n                    return '$';\n                case SyntaxKind.PercentToken:\n                    return '%';\n                case SyntaxKind.CaretToken:\n                    return '^';\n                case SyntaxKind.AmpersandToken:\n                    return '&';\n                case SyntaxKind.AsteriskToken:\n                    return '*';\n                case SyntaxKind.OpenParenToken:\n                    return '(';\n                case SyntaxKind.CloseParenToken:\n                    return ')';\n                case SyntaxKind.MinusToken:\n                    return '-';\n                case SyntaxKind.PlusToken:\n                    return '+';\n                case SyntaxKind.EqualsToken:\n                    return '=';\n                case SyntaxKind.OpenBraceToken:\n                    return '{';\n                case SyntaxKind.CloseBraceToken:\n                    return '}';\n                case SyntaxKind.OpenBracketToken:\n                    return '[';\n                case SyntaxKind.CloseBracketToken:\n                    return ']';\n                case SyntaxKind.BarToken:\n                    return '|';\n                case SyntaxKind.BackslashToken:\n                    return '\\\\';\n                case SyntaxKind.ColonToken:\n                    return ':';\n                case SyntaxKind.SemicolonToken:\n                    return ';';\n                case SyntaxKind.DoubleQuoteToken:\n                    return '\\'';\n                case SyntaxKind.SingleQuoteToken:\n                    return ''';\n                case SyntaxKind.LessThanToken:\n                    return '<';\n                case SyntaxKind.CommaToken:\n                    return ',';\n                case SyntaxKind.GreaterThanToken:\n                    return '>';\n                case SyntaxKind.DotToken:\n                    return '.';\n                case SyntaxKind.QuestionToken:\n                    return '?';\n                case SyntaxKind.HashToken:\n                    return '#';\n                case SyntaxKind.SlashToken:\n                    return '/';\n                case SyntaxKind.SlashGreaterThanToken:\n                    return '/>';\n                case SyntaxKind.LessThanSlashToken:\n                    return '</';\n                case SyntaxKind.XmlCommentStartToken:\n                    return '<!--';\n                case SyntaxKind.XmlCommentEndToken:\n                    return '-->';\n                case SyntaxKind.XmlCDataStartToken:\n                    return '<![CDATA[';\n                case SyntaxKind.XmlCDataEndToken:\n                    return ']]>';\n                case SyntaxKind.XmlProcessingInstructionStartToken:\n                    return '<?';\n                case SyntaxKind.XmlProcessingInstructionEndToken:\n                    return '?>';\n\n                // compound\n                case SyntaxKind.BarBarToken:\n                    return '||';\n                case SyntaxKind.AmpersandAmpersandToken:\n                    return '&&';\n                case SyntaxKind.MinusMinusToken:\n                    return '--';\n                case SyntaxKind.PlusPlusToken:\n                    return '++';\n                case SyntaxKind.ColonColonToken:\n                    return '::';\n                case SyntaxKind.QuestionQuestionToken:\n                    return '??';\n                case SyntaxKind.MinusGreaterThanToken:\n                    return '->';\n                case SyntaxKind.ExclamationEqualsToken:\n                    return '!=';\n                case SyntaxKind.EqualsEqualsToken:\n                    return '==';\n                case SyntaxKind.EqualsGreaterThanToken:\n                    return '=>';\n                case SyntaxKind.LessThanEqualsToken:\n                    return '<=';\n                case SyntaxKind.LessThanLessThanToken:\n                    return '<<';\n                case SyntaxKind.LessThanLessThanEqualsToken:\n                    return '<<=';\n                case SyntaxKind.GreaterThanEqualsToken:\n                    return '>=';\n                case SyntaxKind.GreaterThanGreaterThanToken:\n                    return '>>';\n                case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n                    return '>>=';\n                case SyntaxKind.SlashEqualsToken:\n                    return '/=';\n                case SyntaxKind.AsteriskEqualsToken:\n                    return '*=';\n                case SyntaxKind.BarEqualsToken:\n                    return '|=';\n                case SyntaxKind.AmpersandEqualsToken:\n                    return '&=';\n                case SyntaxKind.PlusEqualsToken:\n                    return '+=';\n                case SyntaxKind.MinusEqualsToken:\n                    return '-=';\n                case SyntaxKind.CaretEqualsToken:\n                    return '^=';\n                case SyntaxKind.PercentEqualsToken:\n                    return '%=';\n                case SyntaxKind.QuestionQuestionEqualsToken:\n                    return '??=';\n                case SyntaxKind.DotDotToken:\n                    return '..';\n\n                // Keywords\n                case SyntaxKind.BoolKeyword:\n                    return 'bool';\n                case SyntaxKind.ByteKeyword:\n                    return 'byte';\n                case SyntaxKind.SByteKeyword:\n                    return 'sbyte';\n                case SyntaxKind.ShortKeyword:\n                    return 'short';\n                case SyntaxKind.UShortKeyword:\n                    return 'ushort';\n                case SyntaxKind.IntKeyword:\n                    return 'int';\n                case SyntaxKind.UIntKeyword:\n                    return 'uint';\n                case SyntaxKind.LongKeyword:\n                    return 'long';\n                case SyntaxKind.ULongKeyword:\n                    return 'ulong';\n                case SyntaxKind.DoubleKeyword:\n                    return 'double';\n                case SyntaxKind.FloatKeyword:\n                    return 'float';\n                case SyntaxKind.DecimalKeyword:\n                    return 'decimal';\n                case SyntaxKind.StringKeyword:\n                    return 'string';\n                case SyntaxKind.CharKeyword:\n                    return 'char';\n                case SyntaxKind.VoidKeyword:\n                    return 'void';\n                case SyntaxKind.ObjectKeyword:\n                    return 'object';\n                case SyntaxKind.TypeOfKeyword:\n                    return 'typeof';\n                case SyntaxKind.SizeOfKeyword:\n                    return 'sizeof';\n                case SyntaxKind.NullKeyword:\n                    return 'null';\n                case SyntaxKind.TrueKeyword:\n                    return 'true';\n                case SyntaxKind.FalseKeyword:\n                    return 'false';\n                case SyntaxKind.IfKeyword:\n                    return 'if';\n                case SyntaxKind.ElseKeyword:\n                    return 'else';\n                case SyntaxKind.WhileKeyword:\n                    return 'while';\n                case SyntaxKind.ForKeyword:\n                    return 'for';\n                case SyntaxKind.ForEachKeyword:\n                    return 'foreach';\n                case SyntaxKind.DoKeyword:\n                    return 'do';\n                case SyntaxKind.SwitchKeyword:\n                    return 'switch';\n                case SyntaxKind.CaseKeyword:\n                    return 'case';\n                case SyntaxKind.DefaultKeyword:\n                    return 'default';\n                case SyntaxKind.TryKeyword:\n                    return 'try';\n                case SyntaxKind.CatchKeyword:\n                    return 'catch';\n                case SyntaxKind.FinallyKeyword:\n                    return 'finally';\n                case SyntaxKind.LockKeyword:\n                    return 'lock';\n                case SyntaxKind.GotoKeyword:\n                    return 'goto';\n                case SyntaxKind.BreakKeyword:\n                    return 'break';\n                case SyntaxKind.ContinueKeyword:\n                    return 'continue';\n                case SyntaxKind.ReturnKeyword:\n                    return 'return';\n                case SyntaxKind.ThrowKeyword:\n                    return 'throw';\n                case SyntaxKind.PublicKeyword:\n                    return 'public';\n                case SyntaxKind.PrivateKeyword:\n                    return 'private';\n                case SyntaxKind.InternalKeyword:\n                    return 'internal';\n                case SyntaxKind.ProtectedKeyword:\n                    return 'protected';\n                case SyntaxKind.StaticKeyword:\n                    return 'static';\n                case SyntaxKind.ReadOnlyKeyword:\n                    return 'readonly';\n                case SyntaxKind.SealedKeyword:\n                    return 'sealed';\n                case SyntaxKind.ConstKeyword:\n                    return 'const';\n                case SyntaxKind.FixedKeyword:\n                    return 'fixed';\n                case SyntaxKind.StackAllocKeyword:\n                    return 'stackalloc';\n                case SyntaxKind.VolatileKeyword:\n                    return 'volatile';\n                case SyntaxKind.NewKeyword:\n                    return 'new';\n                case SyntaxKind.OverrideKeyword:\n                    return 'override';\n                case SyntaxKind.AbstractKeyword:\n                    return 'abstract';\n                case SyntaxKind.VirtualKeyword:\n                    return 'virtual';\n                case SyntaxKind.EventKeyword:\n                    return 'event';\n                case SyntaxKind.ExternKeyword:\n                    return 'extern';\n                case SyntaxKind.RefKeyword:\n                    return 'ref';\n                case SyntaxKind.OutKeyword:\n                    return 'out';\n                case SyntaxKind.InKeyword:\n                    return 'in';\n                case SyntaxKind.IsKeyword:\n                    return 'is';\n                case SyntaxKind.AsKeyword:\n                    return 'as';\n                case SyntaxKind.ParamsKeyword:\n                    return 'params';\n                case SyntaxKind.ArgListKeyword:\n                    return '__arglist';\n                case SyntaxKind.MakeRefKeyword:\n                    return '__makeref';\n                case SyntaxKind.RefTypeKeyword:\n                    return '__reftype';\n                case SyntaxKind.RefValueKeyword:\n                    return '__refvalue';\n                case SyntaxKind.ThisKeyword:\n                    return 'this';\n                case SyntaxKind.BaseKeyword:\n                    return 'base';\n                case SyntaxKind.NamespaceKeyword:\n                    return 'namespace';\n                case SyntaxKind.UsingKeyword:\n                    return 'using';\n                case SyntaxKind.ClassKeyword:\n                    return 'class';\n                case SyntaxKind.StructKeyword:\n                    return 'struct';\n                case SyntaxKind.InterfaceKeyword:\n                    return 'interface';\n                case SyntaxKind.EnumKeyword:\n                    return 'enum';\n                case SyntaxKind.DelegateKeyword:\n                    return 'delegate';\n                case SyntaxKind.CheckedKeyword:\n                    return 'checked';\n                case SyntaxKind.UncheckedKeyword:\n                    return 'unchecked';\n                case SyntaxKind.UnsafeKeyword:\n                    return 'unsafe';\n                case SyntaxKind.OperatorKeyword:\n                    return 'operator';\n                case SyntaxKind.ImplicitKeyword:\n                    return 'implicit';\n                case SyntaxKind.ExplicitKeyword:\n                    return 'explicit';\n                case SyntaxKind.ElifKeyword:\n                    return 'elif';\n                case SyntaxKind.EndIfKeyword:\n                    return 'endif';\n                case SyntaxKind.RegionKeyword:\n                    return 'region';\n                case SyntaxKind.EndRegionKeyword:\n                    return 'endregion';\n                case SyntaxKind.DefineKeyword:\n                    return 'define';\n                case SyntaxKind.UndefKeyword:\n                    return 'undef';\n                case SyntaxKind.WarningKeyword:\n                    return 'warning';\n                case SyntaxKind.ErrorKeyword:\n                    return 'error';\n                case SyntaxKind.LineKeyword:\n                    return 'line';\n                case SyntaxKind.PragmaKeyword:\n                    return 'pragma';\n                case SyntaxKind.HiddenKeyword:\n                    return 'hidden';\n                case SyntaxKind.ChecksumKeyword:\n                    return 'checksum';\n                case SyntaxKind.DisableKeyword:\n                    return 'disable';\n                case SyntaxKind.RestoreKeyword:\n                    return 'restore';\n                case SyntaxKind.ReferenceKeyword:\n                    return 'r';\n                case SyntaxKind.LoadKeyword:\n                    return 'load';\n                case SyntaxKind.NullableKeyword:\n                    return 'nullable';\n                case SyntaxKind.EnableKeyword:\n                    return 'enable';\n                case SyntaxKind.WarningsKeyword:\n                    return 'warnings';\n                case SyntaxKind.AnnotationsKeyword:\n                    return 'annotations';\n\n                // contextual keywords\n                case SyntaxKind.YieldKeyword:\n                    return 'yield';\n                case SyntaxKind.PartialKeyword:\n                    return 'partial';\n                case SyntaxKind.FromKeyword:\n                    return 'from';\n                case SyntaxKind.GroupKeyword:\n                    return 'group';\n                case SyntaxKind.JoinKeyword:\n                    return 'join';\n                case SyntaxKind.IntoKeyword:\n                    return 'into';\n                case SyntaxKind.LetKeyword:\n                    return 'let';\n                case SyntaxKind.ByKeyword:\n                    return 'by';\n                case SyntaxKind.WhereKeyword:\n                    return 'where';\n                case SyntaxKind.SelectKeyword:\n                    return 'select';\n                case SyntaxKind.GetKeyword:\n                    return 'get';\n                case SyntaxKind.SetKeyword:\n                    return 'set';\n                case SyntaxKind.AddKeyword:\n                    return 'add';\n                case SyntaxKind.RemoveKeyword:\n                    return 'remove';\n                case SyntaxKind.OrderByKeyword:\n                    return 'orderby';\n                case SyntaxKind.AliasKeyword:\n                    return 'alias';\n                case SyntaxKind.OnKeyword:\n                    return 'on';\n                case SyntaxKind.EqualsKeyword:\n                    return 'equals';\n                case SyntaxKind.AscendingKeyword:\n                    return 'ascending';\n                case SyntaxKind.DescendingKeyword:\n                    return 'descending';\n                case SyntaxKind.AssemblyKeyword:\n                    return 'assembly';\n                case SyntaxKind.ModuleKeyword:\n                    return 'module';\n                case SyntaxKind.TypeKeyword:\n                    return 'type';\n                case SyntaxKind.FieldKeyword:\n                    return 'field';\n                case SyntaxKind.MethodKeyword:\n                    return 'method';\n                case SyntaxKind.ParamKeyword:\n                    return 'param';\n                case SyntaxKind.PropertyKeyword:\n                    return 'property';\n                case SyntaxKind.TypeVarKeyword:\n                    return 'typevar';\n                case SyntaxKind.GlobalKeyword:\n                    return 'global';\n                case SyntaxKind.NameOfKeyword:\n                    return 'nameof';\n                case SyntaxKind.AsyncKeyword:\n                    return 'async';\n                case SyntaxKind.AwaitKeyword:\n                    return 'await';\n                case SyntaxKind.WhenKeyword:\n                    return 'when';\n                case SyntaxKind.InterpolatedStringStartToken:\n                    return '$\\'';\n                case SyntaxKind.InterpolatedStringEndToken:\n                    return '\\'';\n                case SyntaxKind.InterpolatedVerbatimStringStartToken:\n                    return '$@\\'';\n                case SyntaxKind.UnderscoreToken:\n                    return '_';\n                case SyntaxKind.VarKeyword:\n                    return 'var';\n                case SyntaxKind.AndKeyword:\n                    return 'and';\n                case SyntaxKind.OrKeyword:\n                    return 'or';\n                case SyntaxKind.NotKeyword:\n                    return 'not';\n                case SyntaxKind.DataKeyword:\n                    return 'data';\n                case SyntaxKind.WithKeyword:\n                    return 'with';\n                case SyntaxKind.InitKeyword:\n                    return 'init';\n                case SyntaxKind.RecordKeyword:\n                    return 'record';\n                case SyntaxKind.ManagedKeyword:\n                    return 'managed';\n                case SyntaxKind.UnmanagedKeyword:\n                    return 'unmanaged';\n                default:\n                    return string.Empty;\n            } 978154"];
1449 [label="return '!'; 978155"];
1450 [label="FullWidth = this.Text.Length; 978156"];
1451 [label="FullWidth 978157"];
1452 [label="this.flags |= NodeFlags.IsNotMissing; 978158"];
1453 [label="this.flags 978159"];
1454 [label="this.AdjustFlagsAndWidth(leading); 978160"];
1455 [label="s_tokensWithElasticTrivia[(int)kind].Value 978161"];
1456 [label="s_tokensWithSingleTrailingSpace[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.Space); 978162"];
1457 [label="param SyntaxTokenWithTrivia(SyntaxKind kind) 978163"];
1458 [label="kind 978164"];
1459 [label="param SyntaxToken(SyntaxKind kind) 978165"];
1460 [label="kind 978166"];
1461 [label="param CSharpSyntaxNode(SyntaxKind kind) 978167"];
1462 [label="kind 978168"];
1463 [label="param CSharpSyntaxNode(this) 978169"];
1464 [label="GreenStats.NoteGreen(this); 978170"];
1465 [label="return (SyntaxKind)this.RawKind; 978171"];
1466 [label="return SyntaxFacts.GetText(this.Kind); 978172"];
1467 [label="param GetText(SyntaxKind kind) 978173"];
1468 [label="switch (kind)\n            {\n                case SyntaxKind.TildeToken:\n                    return '~';\n                case SyntaxKind.ExclamationToken:\n                    return '!';\n                case SyntaxKind.DollarToken:\n                    return '$';\n                case SyntaxKind.PercentToken:\n                    return '%';\n                case SyntaxKind.CaretToken:\n                    return '^';\n                case SyntaxKind.AmpersandToken:\n                    return '&';\n                case SyntaxKind.AsteriskToken:\n                    return '*';\n                case SyntaxKind.OpenParenToken:\n                    return '(';\n                case SyntaxKind.CloseParenToken:\n                    return ')';\n                case SyntaxKind.MinusToken:\n                    return '-';\n                case SyntaxKind.PlusToken:\n                    return '+';\n                case SyntaxKind.EqualsToken:\n                    return '=';\n                case SyntaxKind.OpenBraceToken:\n                    return '{';\n                case SyntaxKind.CloseBraceToken:\n                    return '}';\n                case SyntaxKind.OpenBracketToken:\n                    return '[';\n                case SyntaxKind.CloseBracketToken:\n                    return ']';\n                case SyntaxKind.BarToken:\n                    return '|';\n                case SyntaxKind.BackslashToken:\n                    return '\\\\';\n                case SyntaxKind.ColonToken:\n                    return ':';\n                case SyntaxKind.SemicolonToken:\n                    return ';';\n                case SyntaxKind.DoubleQuoteToken:\n                    return '\\'';\n                case SyntaxKind.SingleQuoteToken:\n                    return ''';\n                case SyntaxKind.LessThanToken:\n                    return '<';\n                case SyntaxKind.CommaToken:\n                    return ',';\n                case SyntaxKind.GreaterThanToken:\n                    return '>';\n                case SyntaxKind.DotToken:\n                    return '.';\n                case SyntaxKind.QuestionToken:\n                    return '?';\n                case SyntaxKind.HashToken:\n                    return '#';\n                case SyntaxKind.SlashToken:\n                    return '/';\n                case SyntaxKind.SlashGreaterThanToken:\n                    return '/>';\n                case SyntaxKind.LessThanSlashToken:\n                    return '</';\n                case SyntaxKind.XmlCommentStartToken:\n                    return '<!--';\n                case SyntaxKind.XmlCommentEndToken:\n                    return '-->';\n                case SyntaxKind.XmlCDataStartToken:\n                    return '<![CDATA[';\n                case SyntaxKind.XmlCDataEndToken:\n                    return ']]>';\n                case SyntaxKind.XmlProcessingInstructionStartToken:\n                    return '<?';\n                case SyntaxKind.XmlProcessingInstructionEndToken:\n                    return '?>';\n\n                // compound\n                case SyntaxKind.BarBarToken:\n                    return '||';\n                case SyntaxKind.AmpersandAmpersandToken:\n                    return '&&';\n                case SyntaxKind.MinusMinusToken:\n                    return '--';\n                case SyntaxKind.PlusPlusToken:\n                    return '++';\n                case SyntaxKind.ColonColonToken:\n                    return '::';\n                case SyntaxKind.QuestionQuestionToken:\n                    return '??';\n                case SyntaxKind.MinusGreaterThanToken:\n                    return '->';\n                case SyntaxKind.ExclamationEqualsToken:\n                    return '!=';\n                case SyntaxKind.EqualsEqualsToken:\n                    return '==';\n                case SyntaxKind.EqualsGreaterThanToken:\n                    return '=>';\n                case SyntaxKind.LessThanEqualsToken:\n                    return '<=';\n                case SyntaxKind.LessThanLessThanToken:\n                    return '<<';\n                case SyntaxKind.LessThanLessThanEqualsToken:\n                    return '<<=';\n                case SyntaxKind.GreaterThanEqualsToken:\n                    return '>=';\n                case SyntaxKind.GreaterThanGreaterThanToken:\n                    return '>>';\n                case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n                    return '>>=';\n                case SyntaxKind.SlashEqualsToken:\n                    return '/=';\n                case SyntaxKind.AsteriskEqualsToken:\n                    return '*=';\n                case SyntaxKind.BarEqualsToken:\n                    return '|=';\n                case SyntaxKind.AmpersandEqualsToken:\n                    return '&=';\n                case SyntaxKind.PlusEqualsToken:\n                    return '+=';\n                case SyntaxKind.MinusEqualsToken:\n                    return '-=';\n                case SyntaxKind.CaretEqualsToken:\n                    return '^=';\n                case SyntaxKind.PercentEqualsToken:\n                    return '%=';\n                case SyntaxKind.QuestionQuestionEqualsToken:\n                    return '??=';\n                case SyntaxKind.DotDotToken:\n                    return '..';\n\n                // Keywords\n                case SyntaxKind.BoolKeyword:\n                    return 'bool';\n                case SyntaxKind.ByteKeyword:\n                    return 'byte';\n                case SyntaxKind.SByteKeyword:\n                    return 'sbyte';\n                case SyntaxKind.ShortKeyword:\n                    return 'short';\n                case SyntaxKind.UShortKeyword:\n                    return 'ushort';\n                case SyntaxKind.IntKeyword:\n                    return 'int';\n                case SyntaxKind.UIntKeyword:\n                    return 'uint';\n                case SyntaxKind.LongKeyword:\n                    return 'long';\n                case SyntaxKind.ULongKeyword:\n                    return 'ulong';\n                case SyntaxKind.DoubleKeyword:\n                    return 'double';\n                case SyntaxKind.FloatKeyword:\n                    return 'float';\n                case SyntaxKind.DecimalKeyword:\n                    return 'decimal';\n                case SyntaxKind.StringKeyword:\n                    return 'string';\n                case SyntaxKind.CharKeyword:\n                    return 'char';\n                case SyntaxKind.VoidKeyword:\n                    return 'void';\n                case SyntaxKind.ObjectKeyword:\n                    return 'object';\n                case SyntaxKind.TypeOfKeyword:\n                    return 'typeof';\n                case SyntaxKind.SizeOfKeyword:\n                    return 'sizeof';\n                case SyntaxKind.NullKeyword:\n                    return 'null';\n                case SyntaxKind.TrueKeyword:\n                    return 'true';\n                case SyntaxKind.FalseKeyword:\n                    return 'false';\n                case SyntaxKind.IfKeyword:\n                    return 'if';\n                case SyntaxKind.ElseKeyword:\n                    return 'else';\n                case SyntaxKind.WhileKeyword:\n                    return 'while';\n                case SyntaxKind.ForKeyword:\n                    return 'for';\n                case SyntaxKind.ForEachKeyword:\n                    return 'foreach';\n                case SyntaxKind.DoKeyword:\n                    return 'do';\n                case SyntaxKind.SwitchKeyword:\n                    return 'switch';\n                case SyntaxKind.CaseKeyword:\n                    return 'case';\n                case SyntaxKind.DefaultKeyword:\n                    return 'default';\n                case SyntaxKind.TryKeyword:\n                    return 'try';\n                case SyntaxKind.CatchKeyword:\n                    return 'catch';\n                case SyntaxKind.FinallyKeyword:\n                    return 'finally';\n                case SyntaxKind.LockKeyword:\n                    return 'lock';\n                case SyntaxKind.GotoKeyword:\n                    return 'goto';\n                case SyntaxKind.BreakKeyword:\n                    return 'break';\n                case SyntaxKind.ContinueKeyword:\n                    return 'continue';\n                case SyntaxKind.ReturnKeyword:\n                    return 'return';\n                case SyntaxKind.ThrowKeyword:\n                    return 'throw';\n                case SyntaxKind.PublicKeyword:\n                    return 'public';\n                case SyntaxKind.PrivateKeyword:\n                    return 'private';\n                case SyntaxKind.InternalKeyword:\n                    return 'internal';\n                case SyntaxKind.ProtectedKeyword:\n                    return 'protected';\n                case SyntaxKind.StaticKeyword:\n                    return 'static';\n                case SyntaxKind.ReadOnlyKeyword:\n                    return 'readonly';\n                case SyntaxKind.SealedKeyword:\n                    return 'sealed';\n                case SyntaxKind.ConstKeyword:\n                    return 'const';\n                case SyntaxKind.FixedKeyword:\n                    return 'fixed';\n                case SyntaxKind.StackAllocKeyword:\n                    return 'stackalloc';\n                case SyntaxKind.VolatileKeyword:\n                    return 'volatile';\n                case SyntaxKind.NewKeyword:\n                    return 'new';\n                case SyntaxKind.OverrideKeyword:\n                    return 'override';\n                case SyntaxKind.AbstractKeyword:\n                    return 'abstract';\n                case SyntaxKind.VirtualKeyword:\n                    return 'virtual';\n                case SyntaxKind.EventKeyword:\n                    return 'event';\n                case SyntaxKind.ExternKeyword:\n                    return 'extern';\n                case SyntaxKind.RefKeyword:\n                    return 'ref';\n                case SyntaxKind.OutKeyword:\n                    return 'out';\n                case SyntaxKind.InKeyword:\n                    return 'in';\n                case SyntaxKind.IsKeyword:\n                    return 'is';\n                case SyntaxKind.AsKeyword:\n                    return 'as';\n                case SyntaxKind.ParamsKeyword:\n                    return 'params';\n                case SyntaxKind.ArgListKeyword:\n                    return '__arglist';\n                case SyntaxKind.MakeRefKeyword:\n                    return '__makeref';\n                case SyntaxKind.RefTypeKeyword:\n                    return '__reftype';\n                case SyntaxKind.RefValueKeyword:\n                    return '__refvalue';\n                case SyntaxKind.ThisKeyword:\n                    return 'this';\n                case SyntaxKind.BaseKeyword:\n                    return 'base';\n                case SyntaxKind.NamespaceKeyword:\n                    return 'namespace';\n                case SyntaxKind.UsingKeyword:\n                    return 'using';\n                case SyntaxKind.ClassKeyword:\n                    return 'class';\n                case SyntaxKind.StructKeyword:\n                    return 'struct';\n                case SyntaxKind.InterfaceKeyword:\n                    return 'interface';\n                case SyntaxKind.EnumKeyword:\n                    return 'enum';\n                case SyntaxKind.DelegateKeyword:\n                    return 'delegate';\n                case SyntaxKind.CheckedKeyword:\n                    return 'checked';\n                case SyntaxKind.UncheckedKeyword:\n                    return 'unchecked';\n                case SyntaxKind.UnsafeKeyword:\n                    return 'unsafe';\n                case SyntaxKind.OperatorKeyword:\n                    return 'operator';\n                case SyntaxKind.ImplicitKeyword:\n                    return 'implicit';\n                case SyntaxKind.ExplicitKeyword:\n                    return 'explicit';\n                case SyntaxKind.ElifKeyword:\n                    return 'elif';\n                case SyntaxKind.EndIfKeyword:\n                    return 'endif';\n                case SyntaxKind.RegionKeyword:\n                    return 'region';\n                case SyntaxKind.EndRegionKeyword:\n                    return 'endregion';\n                case SyntaxKind.DefineKeyword:\n                    return 'define';\n                case SyntaxKind.UndefKeyword:\n                    return 'undef';\n                case SyntaxKind.WarningKeyword:\n                    return 'warning';\n                case SyntaxKind.ErrorKeyword:\n                    return 'error';\n                case SyntaxKind.LineKeyword:\n                    return 'line';\n                case SyntaxKind.PragmaKeyword:\n                    return 'pragma';\n                case SyntaxKind.HiddenKeyword:\n                    return 'hidden';\n                case SyntaxKind.ChecksumKeyword:\n                    return 'checksum';\n                case SyntaxKind.DisableKeyword:\n                    return 'disable';\n                case SyntaxKind.RestoreKeyword:\n                    return 'restore';\n                case SyntaxKind.ReferenceKeyword:\n                    return 'r';\n                case SyntaxKind.LoadKeyword:\n                    return 'load';\n                case SyntaxKind.NullableKeyword:\n                    return 'nullable';\n                case SyntaxKind.EnableKeyword:\n                    return 'enable';\n                case SyntaxKind.WarningsKeyword:\n                    return 'warnings';\n                case SyntaxKind.AnnotationsKeyword:\n                    return 'annotations';\n\n                // contextual keywords\n                case SyntaxKind.YieldKeyword:\n                    return 'yield';\n                case SyntaxKind.PartialKeyword:\n                    return 'partial';\n                case SyntaxKind.FromKeyword:\n                    return 'from';\n                case SyntaxKind.GroupKeyword:\n                    return 'group';\n                case SyntaxKind.JoinKeyword:\n                    return 'join';\n                case SyntaxKind.IntoKeyword:\n                    return 'into';\n                case SyntaxKind.LetKeyword:\n                    return 'let';\n                case SyntaxKind.ByKeyword:\n                    return 'by';\n                case SyntaxKind.WhereKeyword:\n                    return 'where';\n                case SyntaxKind.SelectKeyword:\n                    return 'select';\n                case SyntaxKind.GetKeyword:\n                    return 'get';\n                case SyntaxKind.SetKeyword:\n                    return 'set';\n                case SyntaxKind.AddKeyword:\n                    return 'add';\n                case SyntaxKind.RemoveKeyword:\n                    return 'remove';\n                case SyntaxKind.OrderByKeyword:\n                    return 'orderby';\n                case SyntaxKind.AliasKeyword:\n                    return 'alias';\n                case SyntaxKind.OnKeyword:\n                    return 'on';\n                case SyntaxKind.EqualsKeyword:\n                    return 'equals';\n                case SyntaxKind.AscendingKeyword:\n                    return 'ascending';\n                case SyntaxKind.DescendingKeyword:\n                    return 'descending';\n                case SyntaxKind.AssemblyKeyword:\n                    return 'assembly';\n                case SyntaxKind.ModuleKeyword:\n                    return 'module';\n                case SyntaxKind.TypeKeyword:\n                    return 'type';\n                case SyntaxKind.FieldKeyword:\n                    return 'field';\n                case SyntaxKind.MethodKeyword:\n                    return 'method';\n                case SyntaxKind.ParamKeyword:\n                    return 'param';\n                case SyntaxKind.PropertyKeyword:\n                    return 'property';\n                case SyntaxKind.TypeVarKeyword:\n                    return 'typevar';\n                case SyntaxKind.GlobalKeyword:\n                    return 'global';\n                case SyntaxKind.NameOfKeyword:\n                    return 'nameof';\n                case SyntaxKind.AsyncKeyword:\n                    return 'async';\n                case SyntaxKind.AwaitKeyword:\n                    return 'await';\n                case SyntaxKind.WhenKeyword:\n                    return 'when';\n                case SyntaxKind.InterpolatedStringStartToken:\n                    return '$\\'';\n                case SyntaxKind.InterpolatedStringEndToken:\n                    return '\\'';\n                case SyntaxKind.InterpolatedVerbatimStringStartToken:\n                    return '$@\\'';\n                case SyntaxKind.UnderscoreToken:\n                    return '_';\n                case SyntaxKind.VarKeyword:\n                    return 'var';\n                case SyntaxKind.AndKeyword:\n                    return 'and';\n                case SyntaxKind.OrKeyword:\n                    return 'or';\n                case SyntaxKind.NotKeyword:\n                    return 'not';\n                case SyntaxKind.DataKeyword:\n                    return 'data';\n                case SyntaxKind.WithKeyword:\n                    return 'with';\n                case SyntaxKind.InitKeyword:\n                    return 'init';\n                case SyntaxKind.RecordKeyword:\n                    return 'record';\n                case SyntaxKind.ManagedKeyword:\n                    return 'managed';\n                case SyntaxKind.UnmanagedKeyword:\n                    return 'unmanaged';\n                default:\n                    return string.Empty;\n            } 978174"];
1469 [label="return '!'; 978175"];
1470 [label="FullWidth = this.Text.Length; 978176"];
1471 [label="FullWidth 978177"];
1472 [label="this.flags |= NodeFlags.IsNotMissing; 978178"];
1473 [label="this.flags 978179"];
1474 [label="this.AdjustFlagsAndWidth(trailing); 978180"];
1475 [label="s_tokensWithSingleTrailingSpace[(int)kind].Value 978181"];
1476 [label="s_tokensWithSingleTrailingCRLF[(int)kind].Value = new SyntaxTokenWithTrivia(kind, null, SyntaxFactory.CarriageReturnLineFeed); 978182"];
1477 [label="param SyntaxTokenWithTrivia(SyntaxKind kind) 978183"];
1478 [label="kind 978184"];
1479 [label="param SyntaxToken(SyntaxKind kind) 978185"];
1480 [label="kind 978186"];
1481 [label="param CSharpSyntaxNode(SyntaxKind kind) 978187"];
1482 [label="kind 978188"];
1483 [label="param CSharpSyntaxNode(this) 978189"];
1484 [label="GreenStats.NoteGreen(this); 978190"];
1485 [label="return (SyntaxKind)this.RawKind; 978191"];
1486 [label="return SyntaxFacts.GetText(this.Kind); 978192"];
1487 [label="param GetText(SyntaxKind kind) 978193"];
1488 [label="switch (kind)\n            {\n                case SyntaxKind.TildeToken:\n                    return '~';\n                case SyntaxKind.ExclamationToken:\n                    return '!';\n                case SyntaxKind.DollarToken:\n                    return '$';\n                case SyntaxKind.PercentToken:\n                    return '%';\n                case SyntaxKind.CaretToken:\n                    return '^';\n                case SyntaxKind.AmpersandToken:\n                    return '&';\n                case SyntaxKind.AsteriskToken:\n                    return '*';\n                case SyntaxKind.OpenParenToken:\n                    return '(';\n                case SyntaxKind.CloseParenToken:\n                    return ')';\n                case SyntaxKind.MinusToken:\n                    return '-';\n                case SyntaxKind.PlusToken:\n                    return '+';\n                case SyntaxKind.EqualsToken:\n                    return '=';\n                case SyntaxKind.OpenBraceToken:\n                    return '{';\n                case SyntaxKind.CloseBraceToken:\n                    return '}';\n                case SyntaxKind.OpenBracketToken:\n                    return '[';\n                case SyntaxKind.CloseBracketToken:\n                    return ']';\n                case SyntaxKind.BarToken:\n                    return '|';\n                case SyntaxKind.BackslashToken:\n                    return '\\\\';\n                case SyntaxKind.ColonToken:\n                    return ':';\n                case SyntaxKind.SemicolonToken:\n                    return ';';\n                case SyntaxKind.DoubleQuoteToken:\n                    return '\\'';\n                case SyntaxKind.SingleQuoteToken:\n                    return ''';\n                case SyntaxKind.LessThanToken:\n                    return '<';\n                case SyntaxKind.CommaToken:\n                    return ',';\n                case SyntaxKind.GreaterThanToken:\n                    return '>';\n                case SyntaxKind.DotToken:\n                    return '.';\n                case SyntaxKind.QuestionToken:\n                    return '?';\n                case SyntaxKind.HashToken:\n                    return '#';\n                case SyntaxKind.SlashToken:\n                    return '/';\n                case SyntaxKind.SlashGreaterThanToken:\n                    return '/>';\n                case SyntaxKind.LessThanSlashToken:\n                    return '</';\n                case SyntaxKind.XmlCommentStartToken:\n                    return '<!--';\n                case SyntaxKind.XmlCommentEndToken:\n                    return '-->';\n                case SyntaxKind.XmlCDataStartToken:\n                    return '<![CDATA[';\n                case SyntaxKind.XmlCDataEndToken:\n                    return ']]>';\n                case SyntaxKind.XmlProcessingInstructionStartToken:\n                    return '<?';\n                case SyntaxKind.XmlProcessingInstructionEndToken:\n                    return '?>';\n\n                // compound\n                case SyntaxKind.BarBarToken:\n                    return '||';\n                case SyntaxKind.AmpersandAmpersandToken:\n                    return '&&';\n                case SyntaxKind.MinusMinusToken:\n                    return '--';\n                case SyntaxKind.PlusPlusToken:\n                    return '++';\n                case SyntaxKind.ColonColonToken:\n                    return '::';\n                case SyntaxKind.QuestionQuestionToken:\n                    return '??';\n                case SyntaxKind.MinusGreaterThanToken:\n                    return '->';\n                case SyntaxKind.ExclamationEqualsToken:\n                    return '!=';\n                case SyntaxKind.EqualsEqualsToken:\n                    return '==';\n                case SyntaxKind.EqualsGreaterThanToken:\n                    return '=>';\n                case SyntaxKind.LessThanEqualsToken:\n                    return '<=';\n                case SyntaxKind.LessThanLessThanToken:\n                    return '<<';\n                case SyntaxKind.LessThanLessThanEqualsToken:\n                    return '<<=';\n                case SyntaxKind.GreaterThanEqualsToken:\n                    return '>=';\n                case SyntaxKind.GreaterThanGreaterThanToken:\n                    return '>>';\n                case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n                    return '>>=';\n                case SyntaxKind.SlashEqualsToken:\n                    return '/=';\n                case SyntaxKind.AsteriskEqualsToken:\n                    return '*=';\n                case SyntaxKind.BarEqualsToken:\n                    return '|=';\n                case SyntaxKind.AmpersandEqualsToken:\n                    return '&=';\n                case SyntaxKind.PlusEqualsToken:\n                    return '+=';\n                case SyntaxKind.MinusEqualsToken:\n                    return '-=';\n                case SyntaxKind.CaretEqualsToken:\n                    return '^=';\n                case SyntaxKind.PercentEqualsToken:\n                    return '%=';\n                case SyntaxKind.QuestionQuestionEqualsToken:\n                    return '??=';\n                case SyntaxKind.DotDotToken:\n                    return '..';\n\n                // Keywords\n                case SyntaxKind.BoolKeyword:\n                    return 'bool';\n                case SyntaxKind.ByteKeyword:\n                    return 'byte';\n                case SyntaxKind.SByteKeyword:\n                    return 'sbyte';\n                case SyntaxKind.ShortKeyword:\n                    return 'short';\n                case SyntaxKind.UShortKeyword:\n                    return 'ushort';\n                case SyntaxKind.IntKeyword:\n                    return 'int';\n                case SyntaxKind.UIntKeyword:\n                    return 'uint';\n                case SyntaxKind.LongKeyword:\n                    return 'long';\n                case SyntaxKind.ULongKeyword:\n                    return 'ulong';\n                case SyntaxKind.DoubleKeyword:\n                    return 'double';\n                case SyntaxKind.FloatKeyword:\n                    return 'float';\n                case SyntaxKind.DecimalKeyword:\n                    return 'decimal';\n                case SyntaxKind.StringKeyword:\n                    return 'string';\n                case SyntaxKind.CharKeyword:\n                    return 'char';\n                case SyntaxKind.VoidKeyword:\n                    return 'void';\n                case SyntaxKind.ObjectKeyword:\n                    return 'object';\n                case SyntaxKind.TypeOfKeyword:\n                    return 'typeof';\n                case SyntaxKind.SizeOfKeyword:\n                    return 'sizeof';\n                case SyntaxKind.NullKeyword:\n                    return 'null';\n                case SyntaxKind.TrueKeyword:\n                    return 'true';\n                case SyntaxKind.FalseKeyword:\n                    return 'false';\n                case SyntaxKind.IfKeyword:\n                    return 'if';\n                case SyntaxKind.ElseKeyword:\n                    return 'else';\n                case SyntaxKind.WhileKeyword:\n                    return 'while';\n                case SyntaxKind.ForKeyword:\n                    return 'for';\n                case SyntaxKind.ForEachKeyword:\n                    return 'foreach';\n                case SyntaxKind.DoKeyword:\n                    return 'do';\n                case SyntaxKind.SwitchKeyword:\n                    return 'switch';\n                case SyntaxKind.CaseKeyword:\n                    return 'case';\n                case SyntaxKind.DefaultKeyword:\n                    return 'default';\n                case SyntaxKind.TryKeyword:\n                    return 'try';\n                case SyntaxKind.CatchKeyword:\n                    return 'catch';\n                case SyntaxKind.FinallyKeyword:\n                    return 'finally';\n                case SyntaxKind.LockKeyword:\n                    return 'lock';\n                case SyntaxKind.GotoKeyword:\n                    return 'goto';\n                case SyntaxKind.BreakKeyword:\n                    return 'break';\n                case SyntaxKind.ContinueKeyword:\n                    return 'continue';\n                case SyntaxKind.ReturnKeyword:\n                    return 'return';\n                case SyntaxKind.ThrowKeyword:\n                    return 'throw';\n                case SyntaxKind.PublicKeyword:\n                    return 'public';\n                case SyntaxKind.PrivateKeyword:\n                    return 'private';\n                case SyntaxKind.InternalKeyword:\n                    return 'internal';\n                case SyntaxKind.ProtectedKeyword:\n                    return 'protected';\n                case SyntaxKind.StaticKeyword:\n                    return 'static';\n                case SyntaxKind.ReadOnlyKeyword:\n                    return 'readonly';\n                case SyntaxKind.SealedKeyword:\n                    return 'sealed';\n                case SyntaxKind.ConstKeyword:\n                    return 'const';\n                case SyntaxKind.FixedKeyword:\n                    return 'fixed';\n                case SyntaxKind.StackAllocKeyword:\n                    return 'stackalloc';\n                case SyntaxKind.VolatileKeyword:\n                    return 'volatile';\n                case SyntaxKind.NewKeyword:\n                    return 'new';\n                case SyntaxKind.OverrideKeyword:\n                    return 'override';\n                case SyntaxKind.AbstractKeyword:\n                    return 'abstract';\n                case SyntaxKind.VirtualKeyword:\n                    return 'virtual';\n                case SyntaxKind.EventKeyword:\n                    return 'event';\n                case SyntaxKind.ExternKeyword:\n                    return 'extern';\n                case SyntaxKind.RefKeyword:\n                    return 'ref';\n                case SyntaxKind.OutKeyword:\n                    return 'out';\n                case SyntaxKind.InKeyword:\n                    return 'in';\n                case SyntaxKind.IsKeyword:\n                    return 'is';\n                case SyntaxKind.AsKeyword:\n                    return 'as';\n                case SyntaxKind.ParamsKeyword:\n                    return 'params';\n                case SyntaxKind.ArgListKeyword:\n                    return '__arglist';\n                case SyntaxKind.MakeRefKeyword:\n                    return '__makeref';\n                case SyntaxKind.RefTypeKeyword:\n                    return '__reftype';\n                case SyntaxKind.RefValueKeyword:\n                    return '__refvalue';\n                case SyntaxKind.ThisKeyword:\n                    return 'this';\n                case SyntaxKind.BaseKeyword:\n                    return 'base';\n                case SyntaxKind.NamespaceKeyword:\n                    return 'namespace';\n                case SyntaxKind.UsingKeyword:\n                    return 'using';\n                case SyntaxKind.ClassKeyword:\n                    return 'class';\n                case SyntaxKind.StructKeyword:\n                    return 'struct';\n                case SyntaxKind.InterfaceKeyword:\n                    return 'interface';\n                case SyntaxKind.EnumKeyword:\n                    return 'enum';\n                case SyntaxKind.DelegateKeyword:\n                    return 'delegate';\n                case SyntaxKind.CheckedKeyword:\n                    return 'checked';\n                case SyntaxKind.UncheckedKeyword:\n                    return 'unchecked';\n                case SyntaxKind.UnsafeKeyword:\n                    return 'unsafe';\n                case SyntaxKind.OperatorKeyword:\n                    return 'operator';\n                case SyntaxKind.ImplicitKeyword:\n                    return 'implicit';\n                case SyntaxKind.ExplicitKeyword:\n                    return 'explicit';\n                case SyntaxKind.ElifKeyword:\n                    return 'elif';\n                case SyntaxKind.EndIfKeyword:\n                    return 'endif';\n                case SyntaxKind.RegionKeyword:\n                    return 'region';\n                case SyntaxKind.EndRegionKeyword:\n                    return 'endregion';\n                case SyntaxKind.DefineKeyword:\n                    return 'define';\n                case SyntaxKind.UndefKeyword:\n                    return 'undef';\n                case SyntaxKind.WarningKeyword:\n                    return 'warning';\n                case SyntaxKind.ErrorKeyword:\n                    return 'error';\n                case SyntaxKind.LineKeyword:\n                    return 'line';\n                case SyntaxKind.PragmaKeyword:\n                    return 'pragma';\n                case SyntaxKind.HiddenKeyword:\n                    return 'hidden';\n                case SyntaxKind.ChecksumKeyword:\n                    return 'checksum';\n                case SyntaxKind.DisableKeyword:\n                    return 'disable';\n                case SyntaxKind.RestoreKeyword:\n                    return 'restore';\n                case SyntaxKind.ReferenceKeyword:\n                    return 'r';\n                case SyntaxKind.LoadKeyword:\n                    return 'load';\n                case SyntaxKind.NullableKeyword:\n                    return 'nullable';\n                case SyntaxKind.EnableKeyword:\n                    return 'enable';\n                case SyntaxKind.WarningsKeyword:\n                    return 'warnings';\n                case SyntaxKind.AnnotationsKeyword:\n                    return 'annotations';\n\n                // contextual keywords\n                case SyntaxKind.YieldKeyword:\n                    return 'yield';\n                case SyntaxKind.PartialKeyword:\n                    return 'partial';\n                case SyntaxKind.FromKeyword:\n                    return 'from';\n                case SyntaxKind.GroupKeyword:\n                    return 'group';\n                case SyntaxKind.JoinKeyword:\n                    return 'join';\n                case SyntaxKind.IntoKeyword:\n                    return 'into';\n                case SyntaxKind.LetKeyword:\n                    return 'let';\n                case SyntaxKind.ByKeyword:\n                    return 'by';\n                case SyntaxKind.WhereKeyword:\n                    return 'where';\n                case SyntaxKind.SelectKeyword:\n                    return 'select';\n                case SyntaxKind.GetKeyword:\n                    return 'get';\n                case SyntaxKind.SetKeyword:\n                    return 'set';\n                case SyntaxKind.AddKeyword:\n                    return 'add';\n                case SyntaxKind.RemoveKeyword:\n                    return 'remove';\n                case SyntaxKind.OrderByKeyword:\n                    return 'orderby';\n                case SyntaxKind.AliasKeyword:\n                    return 'alias';\n                case SyntaxKind.OnKeyword:\n                    return 'on';\n                case SyntaxKind.EqualsKeyword:\n                    return 'equals';\n                case SyntaxKind.AscendingKeyword:\n                    return 'ascending';\n                case SyntaxKind.DescendingKeyword:\n                    return 'descending';\n                case SyntaxKind.AssemblyKeyword:\n                    return 'assembly';\n                case SyntaxKind.ModuleKeyword:\n                    return 'module';\n                case SyntaxKind.TypeKeyword:\n                    return 'type';\n                case SyntaxKind.FieldKeyword:\n                    return 'field';\n                case SyntaxKind.MethodKeyword:\n                    return 'method';\n                case SyntaxKind.ParamKeyword:\n                    return 'param';\n                case SyntaxKind.PropertyKeyword:\n                    return 'property';\n                case SyntaxKind.TypeVarKeyword:\n                    return 'typevar';\n                case SyntaxKind.GlobalKeyword:\n                    return 'global';\n                case SyntaxKind.NameOfKeyword:\n                    return 'nameof';\n                case SyntaxKind.AsyncKeyword:\n                    return 'async';\n                case SyntaxKind.AwaitKeyword:\n                    return 'await';\n                case SyntaxKind.WhenKeyword:\n                    return 'when';\n                case SyntaxKind.InterpolatedStringStartToken:\n                    return '$\\'';\n                case SyntaxKind.InterpolatedStringEndToken:\n                    return '\\'';\n                case SyntaxKind.InterpolatedVerbatimStringStartToken:\n                    return '$@\\'';\n                case SyntaxKind.UnderscoreToken:\n                    return '_';\n                case SyntaxKind.VarKeyword:\n                    return 'var';\n                case SyntaxKind.AndKeyword:\n                    return 'and';\n                case SyntaxKind.OrKeyword:\n                    return 'or';\n                case SyntaxKind.NotKeyword:\n                    return 'not';\n                case SyntaxKind.DataKeyword:\n                    return 'data';\n                case SyntaxKind.WithKeyword:\n                    return 'with';\n                case SyntaxKind.InitKeyword:\n                    return 'init';\n                case SyntaxKind.RecordKeyword:\n                    return 'record';\n                case SyntaxKind.ManagedKeyword:\n                    return 'managed';\n                case SyntaxKind.UnmanagedKeyword:\n                    return 'unmanaged';\n                default:\n                    return string.Empty;\n            } 978194"];
1489 [label="return '!'; 978195"];
1490 [label="FullWidth = this.Text.Length; 978196"];
1491 [label="FullWidth 978197"];
1492 [label="this.flags |= NodeFlags.IsNotMissing; 978198"];
1493 [label="this.flags 978199"];
1494 [label="this.AdjustFlagsAndWidth(trailing); 978200"];
1495 [label="s_tokensWithSingleTrailingCRLF[(int)kind].Value 978201"];
1496 [label="return '$'; 978202"];
1497 [label="FullWidth = this.Text.Length; 978203"];
1498 [label="FullWidth 978204"];
1499 [label="return '$'; 978205"];
1500 [label="FullWidth = this.Text.Length; 978206"];
1501 [label="FullWidth 978207"];
1502 [label="this.AdjustFlagsAndWidth(leading); 978208"];
1503 [label="return '$'; 978209"];
1504 [label="FullWidth = this.Text.Length; 978210"];
1505 [label="FullWidth 978211"];
1506 [label="this.AdjustFlagsAndWidth(trailing); 978212"];
1507 [label="return '$'; 978213"];
1508 [label="FullWidth = this.Text.Length; 978214"];
1509 [label="FullWidth 978215"];
1510 [label="this.AdjustFlagsAndWidth(trailing); 978216"];
1511 [label="return '%'; 978217"];
1512 [label="FullWidth = this.Text.Length; 978218"];
1513 [label="FullWidth 978219"];
1514 [label="return '%'; 978220"];
1515 [label="FullWidth = this.Text.Length; 978221"];
1516 [label="FullWidth 978222"];
1517 [label="this.AdjustFlagsAndWidth(leading); 978223"];
1518 [label="return '%'; 978224"];
1519 [label="FullWidth = this.Text.Length; 978225"];
1520 [label="FullWidth 978226"];
1521 [label="this.AdjustFlagsAndWidth(trailing); 978227"];
1522 [label="return '%'; 978228"];
1523 [label="FullWidth = this.Text.Length; 978229"];
1524 [label="FullWidth 978230"];
1525 [label="this.AdjustFlagsAndWidth(trailing); 978231"];
1526 [label="return '^'; 978232"];
1527 [label="FullWidth = this.Text.Length; 978233"];
1528 [label="FullWidth 978234"];
1529 [label="return '^'; 978235"];
1530 [label="FullWidth = this.Text.Length; 978236"];
1531 [label="FullWidth 978237"];
1532 [label="this.AdjustFlagsAndWidth(leading); 978238"];
1533 [label="return '^'; 978239"];
1534 [label="FullWidth = this.Text.Length; 978240"];
1535 [label="FullWidth 978241"];
1536 [label="this.AdjustFlagsAndWidth(trailing); 978242"];
1537 [label="return '^'; 978243"];
1538 [label="FullWidth = this.Text.Length; 978244"];
1539 [label="FullWidth 978245"];
1540 [label="this.AdjustFlagsAndWidth(trailing); 978246"];
1541 [label="return '&'; 978247"];
1542 [label="FullWidth = this.Text.Length; 978248"];
1543 [label="FullWidth 978249"];
1544 [label="return '&'; 978250"];
1545 [label="FullWidth = this.Text.Length; 978251"];
1546 [label="FullWidth 978252"];
1547 [label="this.AdjustFlagsAndWidth(leading); 978253"];
1548 [label="return '&'; 978254"];
1549 [label="FullWidth = this.Text.Length; 978255"];
1550 [label="FullWidth 978256"];
1551 [label="this.AdjustFlagsAndWidth(trailing); 978257"];
1552 [label="return '&'; 978258"];
1553 [label="FullWidth = this.Text.Length; 978259"];
1554 [label="FullWidth 978260"];
1555 [label="this.AdjustFlagsAndWidth(trailing); 978261"];
1556 [label="return '*'; 978262"];
1557 [label="FullWidth = this.Text.Length; 978263"];
1558 [label="FullWidth 978264"];
1559 [label="return '*'; 978265"];
1560 [label="FullWidth = this.Text.Length; 978266"];
1561 [label="FullWidth 978267"];
1562 [label="this.AdjustFlagsAndWidth(leading); 978268"];
1563 [label="return '*'; 978269"];
1564 [label="FullWidth = this.Text.Length; 978270"];
1565 [label="FullWidth 978271"];
1566 [label="this.AdjustFlagsAndWidth(trailing); 978272"];
1567 [label="return '*'; 978273"];
1568 [label="FullWidth = this.Text.Length; 978274"];
1569 [label="FullWidth 978275"];
1570 [label="this.AdjustFlagsAndWidth(trailing); 978276"];
1571 [label="return '('; 978277"];
1572 [label="FullWidth = this.Text.Length; 978278"];
1573 [label="FullWidth 978279"];
1574 [label="return '('; 978280"];
1575 [label="FullWidth = this.Text.Length; 978281"];
1576 [label="FullWidth 978282"];
1577 [label="this.AdjustFlagsAndWidth(leading); 978283"];
1578 [label="return '('; 978284"];
1579 [label="FullWidth = this.Text.Length; 978285"];
1580 [label="FullWidth 978286"];
1581 [label="this.AdjustFlagsAndWidth(trailing); 978287"];
1582 [label="return '('; 978288"];
1583 [label="FullWidth = this.Text.Length; 978289"];
1584 [label="FullWidth 978290"];
1585 [label="this.AdjustFlagsAndWidth(trailing); 978291"];
1586 [label="return ')'; 978292"];
1587 [label="FullWidth = this.Text.Length; 978293"];
1588 [label="FullWidth 978294"];
1589 [label="return ')'; 978295"];
1590 [label="FullWidth = this.Text.Length; 978296"];
1591 [label="FullWidth 978297"];
1592 [label="this.AdjustFlagsAndWidth(leading); 978298"];
1593 [label="return ')'; 978299"];
1594 [label="FullWidth = this.Text.Length; 978300"];
1595 [label="FullWidth 978301"];
1596 [label="this.AdjustFlagsAndWidth(trailing); 978302"];
1597 [label="return ')'; 978303"];
1598 [label="FullWidth = this.Text.Length; 978304"];
1599 [label="FullWidth 978305"];
1600 [label="this.AdjustFlagsAndWidth(trailing); 978306"];
1601 [label="return '-'; 978307"];
1602 [label="FullWidth = this.Text.Length; 978308"];
1603 [label="FullWidth 978309"];
1604 [label="return '-'; 978310"];
1605 [label="FullWidth = this.Text.Length; 978311"];
1606 [label="FullWidth 978312"];
1607 [label="this.AdjustFlagsAndWidth(leading); 978313"];
1608 [label="return '-'; 978314"];
1609 [label="FullWidth = this.Text.Length; 978315"];
1610 [label="FullWidth 978316"];
1611 [label="this.AdjustFlagsAndWidth(trailing); 978317"];
1612 [label="return '-'; 978318"];
1613 [label="FullWidth = this.Text.Length; 978319"];
1614 [label="FullWidth 978320"];
1615 [label="this.AdjustFlagsAndWidth(trailing); 978321"];
1616 [label="return '+'; 978322"];
1617 [label="FullWidth = this.Text.Length; 978323"];
1618 [label="FullWidth 978324"];
1619 [label="return '+'; 978325"];
1620 [label="FullWidth = this.Text.Length; 978326"];
1621 [label="FullWidth 978327"];
1622 [label="this.AdjustFlagsAndWidth(leading); 978328"];
1623 [label="return '+'; 978329"];
1624 [label="FullWidth = this.Text.Length; 978330"];
1625 [label="FullWidth 978331"];
1626 [label="this.AdjustFlagsAndWidth(trailing); 978332"];
1627 [label="return '+'; 978333"];
1628 [label="FullWidth = this.Text.Length; 978334"];
1629 [label="FullWidth 978335"];
1630 [label="this.AdjustFlagsAndWidth(trailing); 978336"];
1631 [label="return '='; 978337"];
1632 [label="FullWidth = this.Text.Length; 978338"];
1633 [label="FullWidth 978339"];
1634 [label="return '='; 978340"];
1635 [label="FullWidth = this.Text.Length; 978341"];
1636 [label="FullWidth 978342"];
1637 [label="this.AdjustFlagsAndWidth(leading); 978343"];
1638 [label="return '='; 978344"];
1639 [label="FullWidth = this.Text.Length; 978345"];
1640 [label="FullWidth 978346"];
1641 [label="this.AdjustFlagsAndWidth(trailing); 978347"];
1642 [label="return '='; 978348"];
1643 [label="FullWidth = this.Text.Length; 978349"];
1644 [label="FullWidth 978350"];
1645 [label="this.AdjustFlagsAndWidth(trailing); 978351"];
1646 [label="return '{'; 978352"];
1647 [label="FullWidth = this.Text.Length; 978353"];
1648 [label="FullWidth 978354"];
1649 [label="return '{'; 978355"];
1650 [label="FullWidth = this.Text.Length; 978356"];
1651 [label="FullWidth 978357"];
1652 [label="this.AdjustFlagsAndWidth(leading); 978358"];
1653 [label="return '{'; 978359"];
1654 [label="FullWidth = this.Text.Length; 978360"];
1655 [label="FullWidth 978361"];
1656 [label="this.AdjustFlagsAndWidth(trailing); 978362"];
1657 [label="return '{'; 978363"];
1658 [label="FullWidth = this.Text.Length; 978364"];
1659 [label="FullWidth 978365"];
1660 [label="this.AdjustFlagsAndWidth(trailing); 978366"];
1661 [label="return '}'; 978367"];
1662 [label="FullWidth = this.Text.Length; 978368"];
1663 [label="FullWidth 978369"];
1664 [label="return '}'; 978370"];
1665 [label="FullWidth = this.Text.Length; 978371"];
1666 [label="FullWidth 978372"];
1667 [label="this.AdjustFlagsAndWidth(leading); 978373"];
1668 [label="return '}'; 978374"];
1669 [label="FullWidth = this.Text.Length; 978375"];
1670 [label="FullWidth 978376"];
1671 [label="this.AdjustFlagsAndWidth(trailing); 978377"];
1672 [label="return '}'; 978378"];
1673 [label="FullWidth = this.Text.Length; 978379"];
1674 [label="FullWidth 978380"];
1675 [label="this.AdjustFlagsAndWidth(trailing); 978381"];
1676 [label="return '['; 978382"];
1677 [label="FullWidth = this.Text.Length; 978383"];
1678 [label="FullWidth 978384"];
1679 [label="return '['; 978385"];
1680 [label="FullWidth = this.Text.Length; 978386"];
1681 [label="FullWidth 978387"];
1682 [label="this.AdjustFlagsAndWidth(leading); 978388"];
1683 [label="return '['; 978389"];
1684 [label="FullWidth = this.Text.Length; 978390"];
1685 [label="FullWidth 978391"];
1686 [label="this.AdjustFlagsAndWidth(trailing); 978392"];
1687 [label="return '['; 978393"];
1688 [label="FullWidth = this.Text.Length; 978394"];
1689 [label="FullWidth 978395"];
1690 [label="this.AdjustFlagsAndWidth(trailing); 978396"];
1691 [label="return ']'; 978397"];
1692 [label="FullWidth = this.Text.Length; 978398"];
1693 [label="FullWidth 978399"];
1694 [label="return ']'; 978400"];
1695 [label="FullWidth = this.Text.Length; 978401"];
1696 [label="FullWidth 978402"];
1697 [label="this.AdjustFlagsAndWidth(leading); 978403"];
1698 [label="return ']'; 978404"];
1699 [label="FullWidth = this.Text.Length; 978405"];
1700 [label="FullWidth 978406"];
1701 [label="this.AdjustFlagsAndWidth(trailing); 978407"];
1702 [label="return ']'; 978408"];
1703 [label="FullWidth = this.Text.Length; 978409"];
1704 [label="FullWidth 978410"];
1705 [label="this.AdjustFlagsAndWidth(trailing); 978411"];
1706 [label="return '|'; 978412"];
1707 [label="FullWidth = this.Text.Length; 978413"];
1708 [label="FullWidth 978414"];
1709 [label="return '|'; 978415"];
1710 [label="FullWidth = this.Text.Length; 978416"];
1711 [label="FullWidth 978417"];
1712 [label="this.AdjustFlagsAndWidth(leading); 978418"];
1713 [label="return '|'; 978419"];
1714 [label="FullWidth = this.Text.Length; 978420"];
1715 [label="FullWidth 978421"];
1716 [label="this.AdjustFlagsAndWidth(trailing); 978422"];
1717 [label="return '|'; 978423"];
1718 [label="FullWidth = this.Text.Length; 978424"];
1719 [label="FullWidth 978425"];
1720 [label="this.AdjustFlagsAndWidth(trailing); 978426"];
1721 [label="return '\\\\'; 978427"];
1722 [label="FullWidth = this.Text.Length; 978428"];
1723 [label="FullWidth 978429"];
1724 [label="return '\\\\'; 978430"];
1725 [label="FullWidth = this.Text.Length; 978431"];
1726 [label="FullWidth 978432"];
1727 [label="this.AdjustFlagsAndWidth(leading); 978433"];
1728 [label="return '\\\\'; 978434"];
1729 [label="FullWidth = this.Text.Length; 978435"];
1730 [label="FullWidth 978436"];
1731 [label="this.AdjustFlagsAndWidth(trailing); 978437"];
1732 [label="return '\\\\'; 978438"];
1733 [label="FullWidth = this.Text.Length; 978439"];
1734 [label="FullWidth 978440"];
1735 [label="this.AdjustFlagsAndWidth(trailing); 978441"];
1736 [label="return ':'; 978442"];
1737 [label="FullWidth = this.Text.Length; 978443"];
1738 [label="FullWidth 978444"];
1739 [label="return ':'; 978445"];
1740 [label="FullWidth = this.Text.Length; 978446"];
1741 [label="FullWidth 978447"];
1742 [label="this.AdjustFlagsAndWidth(leading); 978448"];
1743 [label="return ':'; 978449"];
1744 [label="FullWidth = this.Text.Length; 978450"];
1745 [label="FullWidth 978451"];
1746 [label="this.AdjustFlagsAndWidth(trailing); 978452"];
1747 [label="return ':'; 978453"];
1748 [label="FullWidth = this.Text.Length; 978454"];
1749 [label="FullWidth 978455"];
1750 [label="this.AdjustFlagsAndWidth(trailing); 978456"];
1751 [label="return ';'; 978457"];
1752 [label="FullWidth = this.Text.Length; 978458"];
1753 [label="FullWidth 978459"];
1754 [label="return ';'; 978460"];
1755 [label="FullWidth = this.Text.Length; 978461"];
1756 [label="FullWidth 978462"];
1757 [label="this.AdjustFlagsAndWidth(leading); 978463"];
1758 [label="return ';'; 978464"];
1759 [label="FullWidth = this.Text.Length; 978465"];
1760 [label="FullWidth 978466"];
1761 [label="this.AdjustFlagsAndWidth(trailing); 978467"];
1762 [label="return ';'; 978468"];
1763 [label="FullWidth = this.Text.Length; 978469"];
1764 [label="FullWidth 978470"];
1765 [label="this.AdjustFlagsAndWidth(trailing); 978471"];
1766 [label="return '\\''; 978472"];
1767 [label="FullWidth = this.Text.Length; 978473"];
1768 [label="FullWidth 978474"];
1769 [label="return '\\''; 978475"];
1770 [label="FullWidth = this.Text.Length; 978476"];
1771 [label="FullWidth 978477"];
1772 [label="this.AdjustFlagsAndWidth(leading); 978478"];
1773 [label="return '\\''; 978479"];
1774 [label="FullWidth = this.Text.Length; 978480"];
1775 [label="FullWidth 978481"];
1776 [label="this.AdjustFlagsAndWidth(trailing); 978482"];
1777 [label="return '\\''; 978483"];
1778 [label="FullWidth = this.Text.Length; 978484"];
1779 [label="FullWidth 978485"];
1780 [label="this.AdjustFlagsAndWidth(trailing); 978486"];
1781 [label="return '''; 978487"];
1782 [label="FullWidth = this.Text.Length; 978488"];
1783 [label="FullWidth 978489"];
1784 [label="return '''; 978490"];
1785 [label="FullWidth = this.Text.Length; 978491"];
1786 [label="FullWidth 978492"];
1787 [label="this.AdjustFlagsAndWidth(leading); 978493"];
1788 [label="return '''; 978494"];
1789 [label="FullWidth = this.Text.Length; 978495"];
1790 [label="FullWidth 978496"];
1791 [label="this.AdjustFlagsAndWidth(trailing); 978497"];
1792 [label="return '''; 978498"];
1793 [label="FullWidth = this.Text.Length; 978499"];
1794 [label="FullWidth 978500"];
1795 [label="this.AdjustFlagsAndWidth(trailing); 978501"];
1796 [label="return '<'; 978502"];
1797 [label="FullWidth = this.Text.Length; 978503"];
1798 [label="FullWidth 978504"];
1799 [label="return '<'; 978505"];
1800 [label="FullWidth = this.Text.Length; 978506"];
1801 [label="FullWidth 978507"];
1802 [label="this.AdjustFlagsAndWidth(leading); 978508"];
1803 [label="return '<'; 978509"];
1804 [label="FullWidth = this.Text.Length; 978510"];
1805 [label="FullWidth 978511"];
1806 [label="this.AdjustFlagsAndWidth(trailing); 978512"];
1807 [label="return '<'; 978513"];
1808 [label="FullWidth = this.Text.Length; 978514"];
1809 [label="FullWidth 978515"];
1810 [label="this.AdjustFlagsAndWidth(trailing); 978516"];
1811 [label="return ','; 978517"];
1812 [label="FullWidth = this.Text.Length; 978518"];
1813 [label="FullWidth 978519"];
1814 [label="return ','; 978520"];
1815 [label="FullWidth = this.Text.Length; 978521"];
1816 [label="FullWidth 978522"];
1817 [label="this.AdjustFlagsAndWidth(leading); 978523"];
1818 [label="return ','; 978524"];
1819 [label="FullWidth = this.Text.Length; 978525"];
1820 [label="FullWidth 978526"];
1821 [label="this.AdjustFlagsAndWidth(trailing); 978527"];
1822 [label="return ','; 978528"];
1823 [label="FullWidth = this.Text.Length; 978529"];
1824 [label="FullWidth 978530"];
1825 [label="this.AdjustFlagsAndWidth(trailing); 978531"];
1826 [label="return '>'; 978532"];
1827 [label="FullWidth = this.Text.Length; 978533"];
1828 [label="FullWidth 978534"];
1829 [label="return '>'; 978535"];
1830 [label="FullWidth = this.Text.Length; 978536"];
1831 [label="FullWidth 978537"];
1832 [label="this.AdjustFlagsAndWidth(leading); 978538"];
1833 [label="return '>'; 978539"];
1834 [label="FullWidth = this.Text.Length; 978540"];
1835 [label="FullWidth 978541"];
1836 [label="this.AdjustFlagsAndWidth(trailing); 978542"];
1837 [label="return '>'; 978543"];
1838 [label="FullWidth = this.Text.Length; 978544"];
1839 [label="FullWidth 978545"];
1840 [label="this.AdjustFlagsAndWidth(trailing); 978546"];
1841 [label="return '.'; 978547"];
1842 [label="FullWidth = this.Text.Length; 978548"];
1843 [label="FullWidth 978549"];
1844 [label="return '.'; 978550"];
1845 [label="FullWidth = this.Text.Length; 978551"];
1846 [label="FullWidth 978552"];
1847 [label="this.AdjustFlagsAndWidth(leading); 978553"];
1848 [label="return '.'; 978554"];
1849 [label="FullWidth = this.Text.Length; 978555"];
1850 [label="FullWidth 978556"];
1851 [label="this.AdjustFlagsAndWidth(trailing); 978557"];
1852 [label="return '.'; 978558"];
1853 [label="FullWidth = this.Text.Length; 978559"];
1854 [label="FullWidth 978560"];
1855 [label="this.AdjustFlagsAndWidth(trailing); 978561"];
1856 [label="return '?'; 978562"];
1857 [label="FullWidth = this.Text.Length; 978563"];
1858 [label="FullWidth 978564"];
1859 [label="return '?'; 978565"];
1860 [label="FullWidth = this.Text.Length; 978566"];
1861 [label="FullWidth 978567"];
1862 [label="this.AdjustFlagsAndWidth(leading); 978568"];
1863 [label="return '?'; 978569"];
1864 [label="FullWidth = this.Text.Length; 978570"];
1865 [label="FullWidth 978571"];
1866 [label="this.AdjustFlagsAndWidth(trailing); 978572"];
1867 [label="return '?'; 978573"];
1868 [label="FullWidth = this.Text.Length; 978574"];
1869 [label="FullWidth 978575"];
1870 [label="this.AdjustFlagsAndWidth(trailing); 978576"];
1871 [label="return '#'; 978577"];
1872 [label="FullWidth = this.Text.Length; 978578"];
1873 [label="FullWidth 978579"];
1874 [label="return '#'; 978580"];
1875 [label="FullWidth = this.Text.Length; 978581"];
1876 [label="FullWidth 978582"];
1877 [label="this.AdjustFlagsAndWidth(leading); 978583"];
1878 [label="return '#'; 978584"];
1879 [label="FullWidth = this.Text.Length; 978585"];
1880 [label="FullWidth 978586"];
1881 [label="this.AdjustFlagsAndWidth(trailing); 978587"];
1882 [label="return '#'; 978588"];
1883 [label="FullWidth = this.Text.Length; 978589"];
1884 [label="FullWidth 978590"];
1885 [label="this.AdjustFlagsAndWidth(trailing); 978591"];
1886 [label="return '/'; 978592"];
1887 [label="FullWidth = this.Text.Length; 978593"];
1888 [label="FullWidth 978594"];
1889 [label="return '/'; 978595"];
1890 [label="FullWidth = this.Text.Length; 978596"];
1891 [label="FullWidth 978597"];
1892 [label="this.AdjustFlagsAndWidth(leading); 978598"];
1893 [label="return '/'; 978599"];
1894 [label="FullWidth = this.Text.Length; 978600"];
1895 [label="FullWidth 978601"];
1896 [label="this.AdjustFlagsAndWidth(trailing); 978602"];
1897 [label="return '/'; 978603"];
1898 [label="FullWidth = this.Text.Length; 978604"];
1899 [label="FullWidth 978605"];
1900 [label="this.AdjustFlagsAndWidth(trailing); 978606"];
1901 [label="return '..'; 978607"];
1902 [label="FullWidth = this.Text.Length; 978608"];
1903 [label="FullWidth 978609"];
1904 [label="return '..'; 978610"];
1905 [label="FullWidth = this.Text.Length; 978611"];
1906 [label="FullWidth 978612"];
1907 [label="this.AdjustFlagsAndWidth(leading); 978613"];
1908 [label="return '..'; 978614"];
1909 [label="FullWidth = this.Text.Length; 978615"];
1910 [label="FullWidth 978616"];
1911 [label="this.AdjustFlagsAndWidth(trailing); 978617"];
1912 [label="return '..'; 978618"];
1913 [label="FullWidth = this.Text.Length; 978619"];
1914 [label="FullWidth 978620"];
1915 [label="this.AdjustFlagsAndWidth(trailing); 978621"];
1916 [label="return string.Empty; 978622"];
1917 [label="FullWidth = this.Text.Length; 978623"];
1918 [label="FullWidth 978624"];
1919 [label="return string.Empty; 978625"];
1920 [label="FullWidth = this.Text.Length; 978626"];
1921 [label="FullWidth 978627"];
1922 [label="this.AdjustFlagsAndWidth(leading); 978628"];
1923 [label="return string.Empty; 978629"];
1924 [label="FullWidth = this.Text.Length; 978630"];
1925 [label="FullWidth 978631"];
1926 [label="this.AdjustFlagsAndWidth(trailing); 978632"];
1927 [label="return string.Empty; 978633"];
1928 [label="FullWidth = this.Text.Length; 978634"];
1929 [label="FullWidth 978635"];
1930 [label="this.AdjustFlagsAndWidth(trailing); 978636"];
1931 [label="return '/>'; 978637"];
1932 [label="FullWidth = this.Text.Length; 978638"];
1933 [label="FullWidth 978639"];
1934 [label="return '/>'; 978640"];
1935 [label="FullWidth = this.Text.Length; 978641"];
1936 [label="FullWidth 978642"];
1937 [label="this.AdjustFlagsAndWidth(leading); 978643"];
1938 [label="return '/>'; 978644"];
1939 [label="FullWidth = this.Text.Length; 978645"];
1940 [label="FullWidth 978646"];
1941 [label="this.AdjustFlagsAndWidth(trailing); 978647"];
1942 [label="return '/>'; 978648"];
1943 [label="FullWidth = this.Text.Length; 978649"];
1944 [label="FullWidth 978650"];
1945 [label="this.AdjustFlagsAndWidth(trailing); 978651"];
1946 [label="return '</'; 978652"];
1947 [label="FullWidth = this.Text.Length; 978653"];
1948 [label="FullWidth 978654"];
1949 [label="return '</'; 978655"];
1950 [label="FullWidth = this.Text.Length; 978656"];
1951 [label="FullWidth 978657"];
1952 [label="this.AdjustFlagsAndWidth(leading); 978658"];
1953 [label="return '</'; 978659"];
1954 [label="FullWidth = this.Text.Length; 978660"];
1955 [label="FullWidth 978661"];
1956 [label="this.AdjustFlagsAndWidth(trailing); 978662"];
1957 [label="return '</'; 978663"];
1958 [label="FullWidth = this.Text.Length; 978664"];
1959 [label="FullWidth 978665"];
1960 [label="this.AdjustFlagsAndWidth(trailing); 978666"];
1961 [label="return '<!--'; 978667"];
1962 [label="FullWidth = this.Text.Length; 978668"];
1963 [label="FullWidth 978669"];
1964 [label="return '<!--'; 978670"];
1965 [label="FullWidth = this.Text.Length; 978671"];
1966 [label="FullWidth 978672"];
1967 [label="this.AdjustFlagsAndWidth(leading); 978673"];
1968 [label="return '<!--'; 978674"];
1969 [label="FullWidth = this.Text.Length; 978675"];
1970 [label="FullWidth 978676"];
1971 [label="this.AdjustFlagsAndWidth(trailing); 978677"];
1972 [label="return '<!--'; 978678"];
1973 [label="FullWidth = this.Text.Length; 978679"];
1974 [label="FullWidth 978680"];
1975 [label="this.AdjustFlagsAndWidth(trailing); 978681"];
1976 [label="return '-->'; 978682"];
1977 [label="FullWidth = this.Text.Length; 978683"];
1978 [label="FullWidth 978684"];
1979 [label="return '-->'; 978685"];
1980 [label="FullWidth = this.Text.Length; 978686"];
1981 [label="FullWidth 978687"];
1982 [label="this.AdjustFlagsAndWidth(leading); 978688"];
1983 [label="return '-->'; 978689"];
1984 [label="FullWidth = this.Text.Length; 978690"];
1985 [label="FullWidth 978691"];
1986 [label="this.AdjustFlagsAndWidth(trailing); 978692"];
1987 [label="return '-->'; 978693"];
1988 [label="FullWidth = this.Text.Length; 978694"];
1989 [label="FullWidth 978695"];
1990 [label="this.AdjustFlagsAndWidth(trailing); 978696"];
1991 [label="return '<![CDATA['; 978697"];
1992 [label="FullWidth = this.Text.Length; 978698"];
1993 [label="FullWidth 978699"];
1994 [label="return '<![CDATA['; 978700"];
1995 [label="FullWidth = this.Text.Length; 978701"];
1996 [label="FullWidth 978702"];
1997 [label="this.AdjustFlagsAndWidth(leading); 978703"];
1998 [label="return '<![CDATA['; 978704"];
1999 [label="FullWidth = this.Text.Length; 978705"];
2000 [label="FullWidth 978706"];
2001 [label="this.AdjustFlagsAndWidth(trailing); 978707"];
2002 [label="return '<![CDATA['; 978708"];
2003 [label="FullWidth = this.Text.Length; 978709"];
2004 [label="FullWidth 978710"];
2005 [label="this.AdjustFlagsAndWidth(trailing); 978711"];
2006 [label="return ']]>'; 978712"];
2007 [label="FullWidth = this.Text.Length; 978713"];
2008 [label="FullWidth 978714"];
2009 [label="return ']]>'; 978715"];
2010 [label="FullWidth = this.Text.Length; 978716"];
2011 [label="FullWidth 978717"];
2012 [label="this.AdjustFlagsAndWidth(leading); 978718"];
2013 [label="return ']]>'; 978719"];
2014 [label="FullWidth = this.Text.Length; 978720"];
2015 [label="FullWidth 978721"];
2016 [label="this.AdjustFlagsAndWidth(trailing); 978722"];
2017 [label="return ']]>'; 978723"];
2018 [label="FullWidth = this.Text.Length; 978724"];
2019 [label="FullWidth 978725"];
2020 [label="this.AdjustFlagsAndWidth(trailing); 978726"];
2021 [label="return '<?'; 978727"];
2022 [label="FullWidth = this.Text.Length; 978728"];
2023 [label="FullWidth 978729"];
2024 [label="return '<?'; 978730"];
2025 [label="FullWidth = this.Text.Length; 978731"];
2026 [label="FullWidth 978732"];
2027 [label="this.AdjustFlagsAndWidth(leading); 978733"];
2028 [label="return '<?'; 978734"];
2029 [label="FullWidth = this.Text.Length; 978735"];
2030 [label="FullWidth 978736"];
2031 [label="this.AdjustFlagsAndWidth(trailing); 978737"];
2032 [label="return '<?'; 978738"];
2033 [label="FullWidth = this.Text.Length; 978739"];
2034 [label="FullWidth 978740"];
2035 [label="this.AdjustFlagsAndWidth(trailing); 978741"];
2036 [label="return '?>'; 978742"];
2037 [label="FullWidth = this.Text.Length; 978743"];
2038 [label="FullWidth 978744"];
2039 [label="return '?>'; 978745"];
2040 [label="FullWidth = this.Text.Length; 978746"];
2041 [label="FullWidth 978747"];
2042 [label="this.AdjustFlagsAndWidth(leading); 978748"];
2043 [label="return '?>'; 978749"];
2044 [label="FullWidth = this.Text.Length; 978750"];
2045 [label="FullWidth 978751"];
2046 [label="this.AdjustFlagsAndWidth(trailing); 978752"];
2047 [label="return '?>'; 978753"];
2048 [label="FullWidth = this.Text.Length; 978754"];
2049 [label="FullWidth 978755"];
2050 [label="this.AdjustFlagsAndWidth(trailing); 978756"];
2051 [label="return '||'; 978757"];
2052 [label="FullWidth = this.Text.Length; 978758"];
2053 [label="FullWidth 978759"];
2054 [label="return '||'; 978760"];
2055 [label="FullWidth = this.Text.Length; 978761"];
2056 [label="FullWidth 978762"];
2057 [label="this.AdjustFlagsAndWidth(leading); 978763"];
2058 [label="return '||'; 978764"];
2059 [label="FullWidth = this.Text.Length; 978765"];
2060 [label="FullWidth 978766"];
2061 [label="this.AdjustFlagsAndWidth(trailing); 978767"];
2062 [label="return '||'; 978768"];
2063 [label="FullWidth = this.Text.Length; 978769"];
2064 [label="FullWidth 978770"];
2065 [label="this.AdjustFlagsAndWidth(trailing); 978771"];
2066 [label="return '&&'; 978772"];
2067 [label="FullWidth = this.Text.Length; 978773"];
2068 [label="FullWidth 978774"];
2069 [label="return '&&'; 978775"];
2070 [label="FullWidth = this.Text.Length; 978776"];
2071 [label="FullWidth 978777"];
2072 [label="this.AdjustFlagsAndWidth(leading); 978778"];
2073 [label="return '&&'; 978779"];
2074 [label="FullWidth = this.Text.Length; 978780"];
2075 [label="FullWidth 978781"];
2076 [label="this.AdjustFlagsAndWidth(trailing); 978782"];
2077 [label="return '&&'; 978783"];
2078 [label="FullWidth = this.Text.Length; 978784"];
2079 [label="FullWidth 978785"];
2080 [label="this.AdjustFlagsAndWidth(trailing); 978786"];
2081 [label="return '--'; 978787"];
2082 [label="FullWidth = this.Text.Length; 978788"];
2083 [label="FullWidth 978789"];
2084 [label="return '--'; 978790"];
2085 [label="FullWidth = this.Text.Length; 978791"];
2086 [label="FullWidth 978792"];
2087 [label="this.AdjustFlagsAndWidth(leading); 978793"];
2088 [label="return '--'; 978794"];
2089 [label="FullWidth = this.Text.Length; 978795"];
2090 [label="FullWidth 978796"];
2091 [label="this.AdjustFlagsAndWidth(trailing); 978797"];
2092 [label="return '--'; 978798"];
2093 [label="FullWidth = this.Text.Length; 978799"];
2094 [label="FullWidth 978800"];
2095 [label="this.AdjustFlagsAndWidth(trailing); 978801"];
2096 [label="return '++'; 978802"];
2097 [label="FullWidth = this.Text.Length; 978803"];
2098 [label="FullWidth 978804"];
2099 [label="return '++'; 978805"];
2100 [label="FullWidth = this.Text.Length; 978806"];
2101 [label="FullWidth 978807"];
2102 [label="this.AdjustFlagsAndWidth(leading); 978808"];
2103 [label="return '++'; 978809"];
2104 [label="FullWidth = this.Text.Length; 978810"];
2105 [label="FullWidth 978811"];
2106 [label="this.AdjustFlagsAndWidth(trailing); 978812"];
2107 [label="return '++'; 978813"];
2108 [label="FullWidth = this.Text.Length; 978814"];
2109 [label="FullWidth 978815"];
2110 [label="this.AdjustFlagsAndWidth(trailing); 978816"];
2111 [label="return '::'; 978817"];
2112 [label="FullWidth = this.Text.Length; 978818"];
2113 [label="FullWidth 978819"];
2114 [label="return '::'; 978820"];
2115 [label="FullWidth = this.Text.Length; 978821"];
2116 [label="FullWidth 978822"];
2117 [label="this.AdjustFlagsAndWidth(leading); 978823"];
2118 [label="return '::'; 978824"];
2119 [label="FullWidth = this.Text.Length; 978825"];
2120 [label="FullWidth 978826"];
2121 [label="this.AdjustFlagsAndWidth(trailing); 978827"];
2122 [label="return '::'; 978828"];
2123 [label="FullWidth = this.Text.Length; 978829"];
2124 [label="FullWidth 978830"];
2125 [label="this.AdjustFlagsAndWidth(trailing); 978831"];
2126 [label="return '??'; 978832"];
2127 [label="FullWidth = this.Text.Length; 978833"];
2128 [label="FullWidth 978834"];
2129 [label="return '??'; 978835"];
2130 [label="FullWidth = this.Text.Length; 978836"];
2131 [label="FullWidth 978837"];
2132 [label="this.AdjustFlagsAndWidth(leading); 978838"];
2133 [label="return '??'; 978839"];
2134 [label="FullWidth = this.Text.Length; 978840"];
2135 [label="FullWidth 978841"];
2136 [label="this.AdjustFlagsAndWidth(trailing); 978842"];
2137 [label="return '??'; 978843"];
2138 [label="FullWidth = this.Text.Length; 978844"];
2139 [label="FullWidth 978845"];
2140 [label="this.AdjustFlagsAndWidth(trailing); 978846"];
2141 [label="return '->'; 978847"];
2142 [label="FullWidth = this.Text.Length; 978848"];
2143 [label="FullWidth 978849"];
2144 [label="return '->'; 978850"];
2145 [label="FullWidth = this.Text.Length; 978851"];
2146 [label="FullWidth 978852"];
2147 [label="this.AdjustFlagsAndWidth(leading); 978853"];
2148 [label="return '->'; 978854"];
2149 [label="FullWidth = this.Text.Length; 978855"];
2150 [label="FullWidth 978856"];
2151 [label="this.AdjustFlagsAndWidth(trailing); 978857"];
2152 [label="return '->'; 978858"];
2153 [label="FullWidth = this.Text.Length; 978859"];
2154 [label="FullWidth 978860"];
2155 [label="this.AdjustFlagsAndWidth(trailing); 978861"];
2156 [label="return '!='; 978862"];
2157 [label="FullWidth = this.Text.Length; 978863"];
2158 [label="FullWidth 978864"];
2159 [label="return '!='; 978865"];
2160 [label="FullWidth = this.Text.Length; 978866"];
2161 [label="FullWidth 978867"];
2162 [label="this.AdjustFlagsAndWidth(leading); 978868"];
2163 [label="return '!='; 978869"];
2164 [label="FullWidth = this.Text.Length; 978870"];
2165 [label="FullWidth 978871"];
2166 [label="this.AdjustFlagsAndWidth(trailing); 978872"];
2167 [label="return '!='; 978873"];
2168 [label="FullWidth = this.Text.Length; 978874"];
2169 [label="FullWidth 978875"];
2170 [label="this.AdjustFlagsAndWidth(trailing); 978876"];
2171 [label="return '=='; 978877"];
2172 [label="FullWidth = this.Text.Length; 978878"];
2173 [label="FullWidth 978879"];
2174 [label="return '=='; 978880"];
2175 [label="FullWidth = this.Text.Length; 978881"];
2176 [label="FullWidth 978882"];
2177 [label="this.AdjustFlagsAndWidth(leading); 978883"];
2178 [label="return '=='; 978884"];
2179 [label="FullWidth = this.Text.Length; 978885"];
2180 [label="FullWidth 978886"];
2181 [label="this.AdjustFlagsAndWidth(trailing); 978887"];
2182 [label="return '=='; 978888"];
2183 [label="FullWidth = this.Text.Length; 978889"];
2184 [label="FullWidth 978890"];
2185 [label="this.AdjustFlagsAndWidth(trailing); 978891"];
2186 [label="return '=>'; 978892"];
2187 [label="FullWidth = this.Text.Length; 978893"];
2188 [label="FullWidth 978894"];
2189 [label="return '=>'; 978895"];
2190 [label="FullWidth = this.Text.Length; 978896"];
2191 [label="FullWidth 978897"];
2192 [label="this.AdjustFlagsAndWidth(leading); 978898"];
2193 [label="return '=>'; 978899"];
2194 [label="FullWidth = this.Text.Length; 978900"];
2195 [label="FullWidth 978901"];
2196 [label="this.AdjustFlagsAndWidth(trailing); 978902"];
2197 [label="return '=>'; 978903"];
2198 [label="FullWidth = this.Text.Length; 978904"];
2199 [label="FullWidth 978905"];
2200 [label="this.AdjustFlagsAndWidth(trailing); 978906"];
2201 [label="return '<='; 978907"];
2202 [label="FullWidth = this.Text.Length; 978908"];
2203 [label="FullWidth 978909"];
2204 [label="return '<='; 978910"];
2205 [label="FullWidth = this.Text.Length; 978911"];
2206 [label="FullWidth 978912"];
2207 [label="this.AdjustFlagsAndWidth(leading); 978913"];
2208 [label="return '<='; 978914"];
2209 [label="FullWidth = this.Text.Length; 978915"];
2210 [label="FullWidth 978916"];
2211 [label="this.AdjustFlagsAndWidth(trailing); 978917"];
2212 [label="return '<='; 978918"];
2213 [label="FullWidth = this.Text.Length; 978919"];
2214 [label="FullWidth 978920"];
2215 [label="this.AdjustFlagsAndWidth(trailing); 978921"];
2216 [label="return '<<'; 978922"];
2217 [label="FullWidth = this.Text.Length; 978923"];
2218 [label="FullWidth 978924"];
2219 [label="return '<<'; 978925"];
2220 [label="FullWidth = this.Text.Length; 978926"];
2221 [label="FullWidth 978927"];
2222 [label="this.AdjustFlagsAndWidth(leading); 978928"];
2223 [label="return '<<'; 978929"];
2224 [label="FullWidth = this.Text.Length; 978930"];
2225 [label="FullWidth 978931"];
2226 [label="this.AdjustFlagsAndWidth(trailing); 978932"];
2227 [label="return '<<'; 978933"];
2228 [label="FullWidth = this.Text.Length; 978934"];
2229 [label="FullWidth 978935"];
2230 [label="this.AdjustFlagsAndWidth(trailing); 978936"];
2231 [label="return '<<='; 978937"];
2232 [label="FullWidth = this.Text.Length; 978938"];
2233 [label="FullWidth 978939"];
2234 [label="return '<<='; 978940"];
2235 [label="FullWidth = this.Text.Length; 978941"];
2236 [label="FullWidth 978942"];
2237 [label="this.AdjustFlagsAndWidth(leading); 978943"];
2238 [label="return '<<='; 978944"];
2239 [label="FullWidth = this.Text.Length; 978945"];
2240 [label="FullWidth 978946"];
2241 [label="this.AdjustFlagsAndWidth(trailing); 978947"];
2242 [label="return '<<='; 978948"];
2243 [label="FullWidth = this.Text.Length; 978949"];
2244 [label="FullWidth 978950"];
2245 [label="this.AdjustFlagsAndWidth(trailing); 978951"];
2246 [label="return '>='; 978952"];
2247 [label="FullWidth = this.Text.Length; 978953"];
2248 [label="FullWidth 978954"];
2249 [label="return '>='; 978955"];
2250 [label="FullWidth = this.Text.Length; 978956"];
2251 [label="FullWidth 978957"];
2252 [label="this.AdjustFlagsAndWidth(leading); 978958"];
2253 [label="return '>='; 978959"];
2254 [label="FullWidth = this.Text.Length; 978960"];
2255 [label="FullWidth 978961"];
2256 [label="this.AdjustFlagsAndWidth(trailing); 978962"];
2257 [label="return '>='; 978963"];
2258 [label="FullWidth = this.Text.Length; 978964"];
2259 [label="FullWidth 978965"];
2260 [label="this.AdjustFlagsAndWidth(trailing); 978966"];
2261 [label="return '>>'; 978967"];
2262 [label="FullWidth = this.Text.Length; 978968"];
2263 [label="FullWidth 978969"];
2264 [label="return '>>'; 978970"];
2265 [label="FullWidth = this.Text.Length; 978971"];
2266 [label="FullWidth 978972"];
2267 [label="this.AdjustFlagsAndWidth(leading); 978973"];
2268 [label="return '>>'; 978974"];
2269 [label="FullWidth = this.Text.Length; 978975"];
2270 [label="FullWidth 978976"];
2271 [label="this.AdjustFlagsAndWidth(trailing); 978977"];
2272 [label="return '>>'; 978978"];
2273 [label="FullWidth = this.Text.Length; 978979"];
2274 [label="FullWidth 978980"];
2275 [label="this.AdjustFlagsAndWidth(trailing); 978981"];
2276 [label="return '>>='; 978982"];
2277 [label="FullWidth = this.Text.Length; 978983"];
2278 [label="FullWidth 978984"];
2279 [label="return '>>='; 978985"];
2280 [label="FullWidth = this.Text.Length; 978986"];
2281 [label="FullWidth 978987"];
2282 [label="this.AdjustFlagsAndWidth(leading); 978988"];
2283 [label="return '>>='; 978989"];
2284 [label="FullWidth = this.Text.Length; 978990"];
2285 [label="FullWidth 978991"];
2286 [label="this.AdjustFlagsAndWidth(trailing); 978992"];
2287 [label="return '>>='; 978993"];
2288 [label="FullWidth = this.Text.Length; 978994"];
2289 [label="FullWidth 978995"];
2290 [label="this.AdjustFlagsAndWidth(trailing); 978996"];
2291 [label="return '/='; 978997"];
2292 [label="FullWidth = this.Text.Length; 978998"];
2293 [label="FullWidth 978999"];
2294 [label="return '/='; 979000"];
2295 [label="FullWidth = this.Text.Length; 979001"];
2296 [label="FullWidth 979002"];
2297 [label="this.AdjustFlagsAndWidth(leading); 979003"];
2298 [label="return '/='; 979004"];
2299 [label="FullWidth = this.Text.Length; 979005"];
2300 [label="FullWidth 979006"];
2301 [label="this.AdjustFlagsAndWidth(trailing); 979007"];
2302 [label="return '/='; 979008"];
2303 [label="FullWidth = this.Text.Length; 979009"];
2304 [label="FullWidth 979010"];
2305 [label="this.AdjustFlagsAndWidth(trailing); 979011"];
2306 [label="return '*='; 979012"];
2307 [label="FullWidth = this.Text.Length; 979013"];
2308 [label="FullWidth 979014"];
2309 [label="return '*='; 979015"];
2310 [label="FullWidth = this.Text.Length; 979016"];
2311 [label="FullWidth 979017"];
2312 [label="this.AdjustFlagsAndWidth(leading); 979018"];
2313 [label="return '*='; 979019"];
2314 [label="FullWidth = this.Text.Length; 979020"];
2315 [label="FullWidth 979021"];
2316 [label="this.AdjustFlagsAndWidth(trailing); 979022"];
2317 [label="return '*='; 979023"];
2318 [label="FullWidth = this.Text.Length; 979024"];
2319 [label="FullWidth 979025"];
2320 [label="this.AdjustFlagsAndWidth(trailing); 979026"];
2321 [label="return '|='; 979027"];
2322 [label="FullWidth = this.Text.Length; 979028"];
2323 [label="FullWidth 979029"];
2324 [label="return '|='; 979030"];
2325 [label="FullWidth = this.Text.Length; 979031"];
2326 [label="FullWidth 979032"];
2327 [label="this.AdjustFlagsAndWidth(leading); 979033"];
2328 [label="return '|='; 979034"];
2329 [label="FullWidth = this.Text.Length; 979035"];
2330 [label="FullWidth 979036"];
2331 [label="this.AdjustFlagsAndWidth(trailing); 979037"];
2332 [label="return '|='; 979038"];
2333 [label="FullWidth = this.Text.Length; 979039"];
2334 [label="FullWidth 979040"];
2335 [label="this.AdjustFlagsAndWidth(trailing); 979041"];
2336 [label="return '&='; 979042"];
2337 [label="FullWidth = this.Text.Length; 979043"];
2338 [label="FullWidth 979044"];
2339 [label="return '&='; 979045"];
2340 [label="FullWidth = this.Text.Length; 979046"];
2341 [label="FullWidth 979047"];
2342 [label="this.AdjustFlagsAndWidth(leading); 979048"];
2343 [label="return '&='; 979049"];
2344 [label="FullWidth = this.Text.Length; 979050"];
2345 [label="FullWidth 979051"];
2346 [label="this.AdjustFlagsAndWidth(trailing); 979052"];
2347 [label="return '&='; 979053"];
2348 [label="FullWidth = this.Text.Length; 979054"];
2349 [label="FullWidth 979055"];
2350 [label="this.AdjustFlagsAndWidth(trailing); 979056"];
2351 [label="return '+='; 979057"];
2352 [label="FullWidth = this.Text.Length; 979058"];
2353 [label="FullWidth 979059"];
2354 [label="return '+='; 979060"];
2355 [label="FullWidth = this.Text.Length; 979061"];
2356 [label="FullWidth 979062"];
2357 [label="this.AdjustFlagsAndWidth(leading); 979063"];
2358 [label="return '+='; 979064"];
2359 [label="FullWidth = this.Text.Length; 979065"];
2360 [label="FullWidth 979066"];
2361 [label="this.AdjustFlagsAndWidth(trailing); 979067"];
2362 [label="return '+='; 979068"];
2363 [label="FullWidth = this.Text.Length; 979069"];
2364 [label="FullWidth 979070"];
2365 [label="this.AdjustFlagsAndWidth(trailing); 979071"];
2366 [label="return '-='; 979072"];
2367 [label="FullWidth = this.Text.Length; 979073"];
2368 [label="FullWidth 979074"];
2369 [label="return '-='; 979075"];
2370 [label="FullWidth = this.Text.Length; 979076"];
2371 [label="FullWidth 979077"];
2372 [label="this.AdjustFlagsAndWidth(leading); 979078"];
2373 [label="return '-='; 979079"];
2374 [label="FullWidth = this.Text.Length; 979080"];
2375 [label="FullWidth 979081"];
2376 [label="this.AdjustFlagsAndWidth(trailing); 979082"];
2377 [label="return '-='; 979083"];
2378 [label="FullWidth = this.Text.Length; 979084"];
2379 [label="FullWidth 979085"];
2380 [label="this.AdjustFlagsAndWidth(trailing); 979086"];
2381 [label="return '^='; 979087"];
2382 [label="FullWidth = this.Text.Length; 979088"];
2383 [label="FullWidth 979089"];
2384 [label="return '^='; 979090"];
2385 [label="FullWidth = this.Text.Length; 979091"];
2386 [label="FullWidth 979092"];
2387 [label="this.AdjustFlagsAndWidth(leading); 979093"];
2388 [label="return '^='; 979094"];
2389 [label="FullWidth = this.Text.Length; 979095"];
2390 [label="FullWidth 979096"];
2391 [label="this.AdjustFlagsAndWidth(trailing); 979097"];
2392 [label="return '^='; 979098"];
2393 [label="FullWidth = this.Text.Length; 979099"];
2394 [label="FullWidth 979100"];
2395 [label="this.AdjustFlagsAndWidth(trailing); 979101"];
2396 [label="return '%='; 979102"];
2397 [label="FullWidth = this.Text.Length; 979103"];
2398 [label="FullWidth 979104"];
2399 [label="return '%='; 979105"];
2400 [label="FullWidth = this.Text.Length; 979106"];
2401 [label="FullWidth 979107"];
2402 [label="this.AdjustFlagsAndWidth(leading); 979108"];
2403 [label="return '%='; 979109"];
2404 [label="FullWidth = this.Text.Length; 979110"];
2405 [label="FullWidth 979111"];
2406 [label="this.AdjustFlagsAndWidth(trailing); 979112"];
2407 [label="return '%='; 979113"];
2408 [label="FullWidth = this.Text.Length; 979114"];
2409 [label="FullWidth 979115"];
2410 [label="this.AdjustFlagsAndWidth(trailing); 979116"];
2411 [label="return '??='; 979117"];
2412 [label="FullWidth = this.Text.Length; 979118"];
2413 [label="FullWidth 979119"];
2414 [label="return '??='; 979120"];
2415 [label="FullWidth = this.Text.Length; 979121"];
2416 [label="FullWidth 979122"];
2417 [label="this.AdjustFlagsAndWidth(leading); 979123"];
2418 [label="return '??='; 979124"];
2419 [label="FullWidth = this.Text.Length; 979125"];
2420 [label="FullWidth 979126"];
2421 [label="this.AdjustFlagsAndWidth(trailing); 979127"];
2422 [label="return '??='; 979128"];
2423 [label="FullWidth = this.Text.Length; 979129"];
2424 [label="FullWidth 979130"];
2425 [label="this.AdjustFlagsAndWidth(trailing); 979131"];
2426 [label="return 'bool'; 979132"];
2427 [label="FullWidth = this.Text.Length; 979133"];
2428 [label="FullWidth 979134"];
2429 [label="return 'bool'; 979135"];
2430 [label="FullWidth = this.Text.Length; 979136"];
2431 [label="FullWidth 979137"];
2432 [label="this.AdjustFlagsAndWidth(leading); 979138"];
2433 [label="return 'bool'; 979139"];
2434 [label="FullWidth = this.Text.Length; 979140"];
2435 [label="FullWidth 979141"];
2436 [label="this.AdjustFlagsAndWidth(trailing); 979142"];
2437 [label="return 'bool'; 979143"];
2438 [label="FullWidth = this.Text.Length; 979144"];
2439 [label="FullWidth 979145"];
2440 [label="this.AdjustFlagsAndWidth(trailing); 979146"];
2441 [label="return 'byte'; 979147"];
2442 [label="FullWidth = this.Text.Length; 979148"];
2443 [label="FullWidth 979149"];
2444 [label="return 'byte'; 979150"];
2445 [label="FullWidth = this.Text.Length; 979151"];
2446 [label="FullWidth 979152"];
2447 [label="this.AdjustFlagsAndWidth(leading); 979153"];
2448 [label="return 'byte'; 979154"];
2449 [label="FullWidth = this.Text.Length; 979155"];
2450 [label="FullWidth 979156"];
2451 [label="this.AdjustFlagsAndWidth(trailing); 979157"];
2452 [label="return 'byte'; 979158"];
2453 [label="FullWidth = this.Text.Length; 979159"];
2454 [label="FullWidth 979160"];
2455 [label="this.AdjustFlagsAndWidth(trailing); 979161"];
2456 [label="return 'sbyte'; 979162"];
2457 [label="FullWidth = this.Text.Length; 979163"];
2458 [label="FullWidth 979164"];
2459 [label="return 'sbyte'; 979165"];
2460 [label="FullWidth = this.Text.Length; 979166"];
2461 [label="FullWidth 979167"];
2462 [label="this.AdjustFlagsAndWidth(leading); 979168"];
2463 [label="return 'sbyte'; 979169"];
2464 [label="FullWidth = this.Text.Length; 979170"];
2465 [label="FullWidth 979171"];
2466 [label="this.AdjustFlagsAndWidth(trailing); 979172"];
2467 [label="return 'sbyte'; 979173"];
2468 [label="FullWidth = this.Text.Length; 979174"];
2469 [label="FullWidth 979175"];
2470 [label="this.AdjustFlagsAndWidth(trailing); 979176"];
2471 [label="return 'short'; 979177"];
2472 [label="FullWidth = this.Text.Length; 979178"];
2473 [label="FullWidth 979179"];
2474 [label="return 'short'; 979180"];
2475 [label="FullWidth = this.Text.Length; 979181"];
2476 [label="FullWidth 979182"];
2477 [label="this.AdjustFlagsAndWidth(leading); 979183"];
2478 [label="return 'short'; 979184"];
2479 [label="FullWidth = this.Text.Length; 979185"];
2480 [label="FullWidth 979186"];
2481 [label="this.AdjustFlagsAndWidth(trailing); 979187"];
2482 [label="return 'short'; 979188"];
2483 [label="FullWidth = this.Text.Length; 979189"];
2484 [label="FullWidth 979190"];
2485 [label="this.AdjustFlagsAndWidth(trailing); 979191"];
2486 [label="return 'ushort'; 979192"];
2487 [label="FullWidth = this.Text.Length; 979193"];
2488 [label="FullWidth 979194"];
2489 [label="return 'ushort'; 979195"];
2490 [label="FullWidth = this.Text.Length; 979196"];
2491 [label="FullWidth 979197"];
2492 [label="this.AdjustFlagsAndWidth(leading); 979198"];
2493 [label="return 'ushort'; 979199"];
2494 [label="FullWidth = this.Text.Length; 979200"];
2495 [label="FullWidth 979201"];
2496 [label="this.AdjustFlagsAndWidth(trailing); 979202"];
2497 [label="return 'ushort'; 979203"];
2498 [label="FullWidth = this.Text.Length; 979204"];
2499 [label="FullWidth 979205"];
2500 [label="this.AdjustFlagsAndWidth(trailing); 979206"];
2501 [label="return 'int'; 979207"];
2502 [label="FullWidth = this.Text.Length; 979208"];
2503 [label="FullWidth 979209"];
2504 [label="return 'int'; 979210"];
2505 [label="FullWidth = this.Text.Length; 979211"];
2506 [label="FullWidth 979212"];
2507 [label="this.AdjustFlagsAndWidth(leading); 979213"];
2508 [label="return 'int'; 979214"];
2509 [label="FullWidth = this.Text.Length; 979215"];
2510 [label="FullWidth 979216"];
2511 [label="this.AdjustFlagsAndWidth(trailing); 979217"];
2512 [label="return 'int'; 979218"];
2513 [label="FullWidth = this.Text.Length; 979219"];
2514 [label="FullWidth 979220"];
2515 [label="this.AdjustFlagsAndWidth(trailing); 979221"];
2516 [label="return 'uint'; 979222"];
2517 [label="FullWidth = this.Text.Length; 979223"];
2518 [label="FullWidth 979224"];
2519 [label="return 'uint'; 979225"];
2520 [label="FullWidth = this.Text.Length; 979226"];
2521 [label="FullWidth 979227"];
2522 [label="this.AdjustFlagsAndWidth(leading); 979228"];
2523 [label="return 'uint'; 979229"];
2524 [label="FullWidth = this.Text.Length; 979230"];
2525 [label="FullWidth 979231"];
2526 [label="this.AdjustFlagsAndWidth(trailing); 979232"];
2527 [label="return 'uint'; 979233"];
2528 [label="FullWidth = this.Text.Length; 979234"];
2529 [label="FullWidth 979235"];
2530 [label="this.AdjustFlagsAndWidth(trailing); 979236"];
2531 [label="return 'long'; 979237"];
2532 [label="FullWidth = this.Text.Length; 979238"];
2533 [label="FullWidth 979239"];
2534 [label="return 'long'; 979240"];
2535 [label="FullWidth = this.Text.Length; 979241"];
2536 [label="FullWidth 979242"];
2537 [label="this.AdjustFlagsAndWidth(leading); 979243"];
2538 [label="return 'long'; 979244"];
2539 [label="FullWidth = this.Text.Length; 979245"];
2540 [label="FullWidth 979246"];
2541 [label="this.AdjustFlagsAndWidth(trailing); 979247"];
2542 [label="return 'long'; 979248"];
2543 [label="FullWidth = this.Text.Length; 979249"];
2544 [label="FullWidth 979250"];
2545 [label="this.AdjustFlagsAndWidth(trailing); 979251"];
2546 [label="return 'ulong'; 979252"];
2547 [label="FullWidth = this.Text.Length; 979253"];
2548 [label="FullWidth 979254"];
2549 [label="return 'ulong'; 979255"];
2550 [label="FullWidth = this.Text.Length; 979256"];
2551 [label="FullWidth 979257"];
2552 [label="this.AdjustFlagsAndWidth(leading); 979258"];
2553 [label="return 'ulong'; 979259"];
2554 [label="FullWidth = this.Text.Length; 979260"];
2555 [label="FullWidth 979261"];
2556 [label="this.AdjustFlagsAndWidth(trailing); 979262"];
2557 [label="return 'ulong'; 979263"];
2558 [label="FullWidth = this.Text.Length; 979264"];
2559 [label="FullWidth 979265"];
2560 [label="this.AdjustFlagsAndWidth(trailing); 979266"];
2561 [label="return 'double'; 979267"];
2562 [label="FullWidth = this.Text.Length; 979268"];
2563 [label="FullWidth 979269"];
2564 [label="return 'double'; 979270"];
2565 [label="FullWidth = this.Text.Length; 979271"];
2566 [label="FullWidth 979272"];
2567 [label="this.AdjustFlagsAndWidth(leading); 979273"];
2568 [label="return 'double'; 979274"];
2569 [label="FullWidth = this.Text.Length; 979275"];
2570 [label="FullWidth 979276"];
2571 [label="this.AdjustFlagsAndWidth(trailing); 979277"];
2572 [label="return 'double'; 979278"];
2573 [label="FullWidth = this.Text.Length; 979279"];
2574 [label="FullWidth 979280"];
2575 [label="this.AdjustFlagsAndWidth(trailing); 979281"];
2576 [label="return 'float'; 979282"];
2577 [label="FullWidth = this.Text.Length; 979283"];
2578 [label="FullWidth 979284"];
2579 [label="return 'float'; 979285"];
2580 [label="FullWidth = this.Text.Length; 979286"];
2581 [label="FullWidth 979287"];
2582 [label="this.AdjustFlagsAndWidth(leading); 979288"];
2583 [label="return 'float'; 979289"];
2584 [label="FullWidth = this.Text.Length; 979290"];
2585 [label="FullWidth 979291"];
2586 [label="this.AdjustFlagsAndWidth(trailing); 979292"];
2587 [label="return 'float'; 979293"];
2588 [label="FullWidth = this.Text.Length; 979294"];
2589 [label="FullWidth 979295"];
2590 [label="this.AdjustFlagsAndWidth(trailing); 979296"];
2591 [label="return 'decimal'; 979297"];
2592 [label="FullWidth = this.Text.Length; 979298"];
2593 [label="FullWidth 979299"];
2594 [label="return 'decimal'; 979300"];
2595 [label="FullWidth = this.Text.Length; 979301"];
2596 [label="FullWidth 979302"];
2597 [label="this.AdjustFlagsAndWidth(leading); 979303"];
2598 [label="return 'decimal'; 979304"];
2599 [label="FullWidth = this.Text.Length; 979305"];
2600 [label="FullWidth 979306"];
2601 [label="this.AdjustFlagsAndWidth(trailing); 979307"];
2602 [label="return 'decimal'; 979308"];
2603 [label="FullWidth = this.Text.Length; 979309"];
2604 [label="FullWidth 979310"];
2605 [label="this.AdjustFlagsAndWidth(trailing); 979311"];
2606 [label="return 'string'; 979312"];
2607 [label="FullWidth = this.Text.Length; 979313"];
2608 [label="FullWidth 979314"];
2609 [label="return 'string'; 979315"];
2610 [label="FullWidth = this.Text.Length; 979316"];
2611 [label="FullWidth 979317"];
2612 [label="this.AdjustFlagsAndWidth(leading); 979318"];
2613 [label="return 'string'; 979319"];
2614 [label="FullWidth = this.Text.Length; 979320"];
2615 [label="FullWidth 979321"];
2616 [label="this.AdjustFlagsAndWidth(trailing); 979322"];
2617 [label="return 'string'; 979323"];
2618 [label="FullWidth = this.Text.Length; 979324"];
2619 [label="FullWidth 979325"];
2620 [label="this.AdjustFlagsAndWidth(trailing); 979326"];
2621 [label="return 'char'; 979327"];
2622 [label="FullWidth = this.Text.Length; 979328"];
2623 [label="FullWidth 979329"];
2624 [label="return 'char'; 979330"];
2625 [label="FullWidth = this.Text.Length; 979331"];
2626 [label="FullWidth 979332"];
2627 [label="this.AdjustFlagsAndWidth(leading); 979333"];
2628 [label="return 'char'; 979334"];
2629 [label="FullWidth = this.Text.Length; 979335"];
2630 [label="FullWidth 979336"];
2631 [label="this.AdjustFlagsAndWidth(trailing); 979337"];
2632 [label="return 'char'; 979338"];
2633 [label="FullWidth = this.Text.Length; 979339"];
2634 [label="FullWidth 979340"];
2635 [label="this.AdjustFlagsAndWidth(trailing); 979341"];
2636 [label="return 'void'; 979342"];
2637 [label="FullWidth = this.Text.Length; 979343"];
2638 [label="FullWidth 979344"];
2639 [label="return 'void'; 979345"];
2640 [label="FullWidth = this.Text.Length; 979346"];
2641 [label="FullWidth 979347"];
2642 [label="this.AdjustFlagsAndWidth(leading); 979348"];
2643 [label="return 'void'; 979349"];
2644 [label="FullWidth = this.Text.Length; 979350"];
2645 [label="FullWidth 979351"];
2646 [label="this.AdjustFlagsAndWidth(trailing); 979352"];
2647 [label="return 'void'; 979353"];
2648 [label="FullWidth = this.Text.Length; 979354"];
2649 [label="FullWidth 979355"];
2650 [label="this.AdjustFlagsAndWidth(trailing); 979356"];
2651 [label="return 'object'; 979357"];
2652 [label="FullWidth = this.Text.Length; 979358"];
2653 [label="FullWidth 979359"];
2654 [label="return 'object'; 979360"];
2655 [label="FullWidth = this.Text.Length; 979361"];
2656 [label="FullWidth 979362"];
2657 [label="this.AdjustFlagsAndWidth(leading); 979363"];
2658 [label="return 'object'; 979364"];
2659 [label="FullWidth = this.Text.Length; 979365"];
2660 [label="FullWidth 979366"];
2661 [label="this.AdjustFlagsAndWidth(trailing); 979367"];
2662 [label="return 'object'; 979368"];
2663 [label="FullWidth = this.Text.Length; 979369"];
2664 [label="FullWidth 979370"];
2665 [label="this.AdjustFlagsAndWidth(trailing); 979371"];
2666 [label="return 'typeof'; 979372"];
2667 [label="FullWidth = this.Text.Length; 979373"];
2668 [label="FullWidth 979374"];
2669 [label="return 'typeof'; 979375"];
2670 [label="FullWidth = this.Text.Length; 979376"];
2671 [label="FullWidth 979377"];
2672 [label="this.AdjustFlagsAndWidth(leading); 979378"];
2673 [label="return 'typeof'; 979379"];
2674 [label="FullWidth = this.Text.Length; 979380"];
2675 [label="FullWidth 979381"];
2676 [label="this.AdjustFlagsAndWidth(trailing); 979382"];
2677 [label="return 'typeof'; 979383"];
2678 [label="FullWidth = this.Text.Length; 979384"];
2679 [label="FullWidth 979385"];
2680 [label="this.AdjustFlagsAndWidth(trailing); 979386"];
2681 [label="return 'sizeof'; 979387"];
2682 [label="FullWidth = this.Text.Length; 979388"];
2683 [label="FullWidth 979389"];
2684 [label="return 'sizeof'; 979390"];
2685 [label="FullWidth = this.Text.Length; 979391"];
2686 [label="FullWidth 979392"];
2687 [label="this.AdjustFlagsAndWidth(leading); 979393"];
2688 [label="return 'sizeof'; 979394"];
2689 [label="FullWidth = this.Text.Length; 979395"];
2690 [label="FullWidth 979396"];
2691 [label="this.AdjustFlagsAndWidth(trailing); 979397"];
2692 [label="return 'sizeof'; 979398"];
2693 [label="FullWidth = this.Text.Length; 979399"];
2694 [label="FullWidth 979400"];
2695 [label="this.AdjustFlagsAndWidth(trailing); 979401"];
2696 [label="return 'null'; 979402"];
2697 [label="FullWidth = this.Text.Length; 979403"];
2698 [label="FullWidth 979404"];
2699 [label="return 'null'; 979405"];
2700 [label="FullWidth = this.Text.Length; 979406"];
2701 [label="FullWidth 979407"];
2702 [label="this.AdjustFlagsAndWidth(leading); 979408"];
2703 [label="return 'null'; 979409"];
2704 [label="FullWidth = this.Text.Length; 979410"];
2705 [label="FullWidth 979411"];
2706 [label="this.AdjustFlagsAndWidth(trailing); 979412"];
2707 [label="return 'null'; 979413"];
2708 [label="FullWidth = this.Text.Length; 979414"];
2709 [label="FullWidth 979415"];
2710 [label="this.AdjustFlagsAndWidth(trailing); 979416"];
2711 [label="return 'true'; 979417"];
2712 [label="FullWidth = this.Text.Length; 979418"];
2713 [label="FullWidth 979419"];
2714 [label="return 'true'; 979420"];
2715 [label="FullWidth = this.Text.Length; 979421"];
2716 [label="FullWidth 979422"];
2717 [label="this.AdjustFlagsAndWidth(leading); 979423"];
2718 [label="return 'true'; 979424"];
2719 [label="FullWidth = this.Text.Length; 979425"];
2720 [label="FullWidth 979426"];
2721 [label="this.AdjustFlagsAndWidth(trailing); 979427"];
2722 [label="return 'true'; 979428"];
2723 [label="FullWidth = this.Text.Length; 979429"];
2724 [label="FullWidth 979430"];
2725 [label="this.AdjustFlagsAndWidth(trailing); 979431"];
2726 [label="return 'false'; 979432"];
2727 [label="FullWidth = this.Text.Length; 979433"];
2728 [label="FullWidth 979434"];
2729 [label="return 'false'; 979435"];
2730 [label="FullWidth = this.Text.Length; 979436"];
2731 [label="FullWidth 979437"];
2732 [label="this.AdjustFlagsAndWidth(leading); 979438"];
2733 [label="return 'false'; 979439"];
2734 [label="FullWidth = this.Text.Length; 979440"];
2735 [label="FullWidth 979441"];
2736 [label="this.AdjustFlagsAndWidth(trailing); 979442"];
2737 [label="return 'false'; 979443"];
2738 [label="FullWidth = this.Text.Length; 979444"];
2739 [label="FullWidth 979445"];
2740 [label="this.AdjustFlagsAndWidth(trailing); 979446"];
2741 [label="return 'if'; 979447"];
2742 [label="FullWidth = this.Text.Length; 979448"];
2743 [label="FullWidth 979449"];
2744 [label="return 'if'; 979450"];
2745 [label="FullWidth = this.Text.Length; 979451"];
2746 [label="FullWidth 979452"];
2747 [label="this.AdjustFlagsAndWidth(leading); 979453"];
2748 [label="return 'if'; 979454"];
2749 [label="FullWidth = this.Text.Length; 979455"];
2750 [label="FullWidth 979456"];
2751 [label="this.AdjustFlagsAndWidth(trailing); 979457"];
2752 [label="return 'if'; 979458"];
2753 [label="FullWidth = this.Text.Length; 979459"];
2754 [label="FullWidth 979460"];
2755 [label="this.AdjustFlagsAndWidth(trailing); 979461"];
2756 [label="return 'else'; 979462"];
2757 [label="FullWidth = this.Text.Length; 979463"];
2758 [label="FullWidth 979464"];
2759 [label="return 'else'; 979465"];
2760 [label="FullWidth = this.Text.Length; 979466"];
2761 [label="FullWidth 979467"];
2762 [label="this.AdjustFlagsAndWidth(leading); 979468"];
2763 [label="return 'else'; 979469"];
2764 [label="FullWidth = this.Text.Length; 979470"];
2765 [label="FullWidth 979471"];
2766 [label="this.AdjustFlagsAndWidth(trailing); 979472"];
2767 [label="return 'else'; 979473"];
2768 [label="FullWidth = this.Text.Length; 979474"];
2769 [label="FullWidth 979475"];
2770 [label="this.AdjustFlagsAndWidth(trailing); 979476"];
2771 [label="return 'while'; 979477"];
2772 [label="FullWidth = this.Text.Length; 979478"];
2773 [label="FullWidth 979479"];
2774 [label="return 'while'; 979480"];
2775 [label="FullWidth = this.Text.Length; 979481"];
2776 [label="FullWidth 979482"];
2777 [label="this.AdjustFlagsAndWidth(leading); 979483"];
2778 [label="return 'while'; 979484"];
2779 [label="FullWidth = this.Text.Length; 979485"];
2780 [label="FullWidth 979486"];
2781 [label="this.AdjustFlagsAndWidth(trailing); 979487"];
2782 [label="return 'while'; 979488"];
2783 [label="FullWidth = this.Text.Length; 979489"];
2784 [label="FullWidth 979490"];
2785 [label="this.AdjustFlagsAndWidth(trailing); 979491"];
2786 [label="return 'for'; 979492"];
2787 [label="FullWidth = this.Text.Length; 979493"];
2788 [label="FullWidth 979494"];
2789 [label="return 'for'; 979495"];
2790 [label="FullWidth = this.Text.Length; 979496"];
2791 [label="FullWidth 979497"];
2792 [label="this.AdjustFlagsAndWidth(leading); 979498"];
2793 [label="return 'for'; 979499"];
2794 [label="FullWidth = this.Text.Length; 979500"];
2795 [label="FullWidth 979501"];
2796 [label="this.AdjustFlagsAndWidth(trailing); 979502"];
2797 [label="return 'for'; 979503"];
2798 [label="FullWidth = this.Text.Length; 979504"];
2799 [label="FullWidth 979505"];
2800 [label="this.AdjustFlagsAndWidth(trailing); 979506"];
2801 [label="return 'foreach'; 979507"];
2802 [label="FullWidth = this.Text.Length; 979508"];
2803 [label="FullWidth 979509"];
2804 [label="return 'foreach'; 979510"];
2805 [label="FullWidth = this.Text.Length; 979511"];
2806 [label="FullWidth 979512"];
2807 [label="this.AdjustFlagsAndWidth(leading); 979513"];
2808 [label="return 'foreach'; 979514"];
2809 [label="FullWidth = this.Text.Length; 979515"];
2810 [label="FullWidth 979516"];
2811 [label="this.AdjustFlagsAndWidth(trailing); 979517"];
2812 [label="return 'foreach'; 979518"];
2813 [label="FullWidth = this.Text.Length; 979519"];
2814 [label="FullWidth 979520"];
2815 [label="this.AdjustFlagsAndWidth(trailing); 979521"];
2816 [label="return 'do'; 979522"];
2817 [label="FullWidth = this.Text.Length; 979523"];
2818 [label="FullWidth 979524"];
2819 [label="return 'do'; 979525"];
2820 [label="FullWidth = this.Text.Length; 979526"];
2821 [label="FullWidth 979527"];
2822 [label="this.AdjustFlagsAndWidth(leading); 979528"];
2823 [label="return 'do'; 979529"];
2824 [label="FullWidth = this.Text.Length; 979530"];
2825 [label="FullWidth 979531"];
2826 [label="this.AdjustFlagsAndWidth(trailing); 979532"];
2827 [label="return 'do'; 979533"];
2828 [label="FullWidth = this.Text.Length; 979534"];
2829 [label="FullWidth 979535"];
2830 [label="this.AdjustFlagsAndWidth(trailing); 979536"];
2831 [label="return 'switch'; 979537"];
2832 [label="FullWidth = this.Text.Length; 979538"];
2833 [label="FullWidth 979539"];
2834 [label="return 'switch'; 979540"];
2835 [label="FullWidth = this.Text.Length; 979541"];
2836 [label="FullWidth 979542"];
2837 [label="this.AdjustFlagsAndWidth(leading); 979543"];
2838 [label="return 'switch'; 979544"];
2839 [label="FullWidth = this.Text.Length; 979545"];
2840 [label="FullWidth 979546"];
2841 [label="this.AdjustFlagsAndWidth(trailing); 979547"];
2842 [label="return 'switch'; 979548"];
2843 [label="FullWidth = this.Text.Length; 979549"];
2844 [label="FullWidth 979550"];
2845 [label="this.AdjustFlagsAndWidth(trailing); 979551"];
2846 [label="return 'case'; 979552"];
2847 [label="FullWidth = this.Text.Length; 979553"];
2848 [label="FullWidth 979554"];
2849 [label="return 'case'; 979555"];
2850 [label="FullWidth = this.Text.Length; 979556"];
2851 [label="FullWidth 979557"];
2852 [label="this.AdjustFlagsAndWidth(leading); 979558"];
2853 [label="return 'case'; 979559"];
2854 [label="FullWidth = this.Text.Length; 979560"];
2855 [label="FullWidth 979561"];
2856 [label="this.AdjustFlagsAndWidth(trailing); 979562"];
2857 [label="return 'case'; 979563"];
2858 [label="FullWidth = this.Text.Length; 979564"];
2859 [label="FullWidth 979565"];
2860 [label="this.AdjustFlagsAndWidth(trailing); 979566"];
2861 [label="return 'default'; 979567"];
2862 [label="FullWidth = this.Text.Length; 979568"];
2863 [label="FullWidth 979569"];
2864 [label="return 'default'; 979570"];
2865 [label="FullWidth = this.Text.Length; 979571"];
2866 [label="FullWidth 979572"];
2867 [label="this.AdjustFlagsAndWidth(leading); 979573"];
2868 [label="return 'default'; 979574"];
2869 [label="FullWidth = this.Text.Length; 979575"];
2870 [label="FullWidth 979576"];
2871 [label="this.AdjustFlagsAndWidth(trailing); 979577"];
2872 [label="return 'default'; 979578"];
2873 [label="FullWidth = this.Text.Length; 979579"];
2874 [label="FullWidth 979580"];
2875 [label="this.AdjustFlagsAndWidth(trailing); 979581"];
2876 [label="return 'try'; 979582"];
2877 [label="FullWidth = this.Text.Length; 979583"];
2878 [label="FullWidth 979584"];
2879 [label="return 'try'; 979585"];
2880 [label="FullWidth = this.Text.Length; 979586"];
2881 [label="FullWidth 979587"];
2882 [label="this.AdjustFlagsAndWidth(leading); 979588"];
2883 [label="return 'try'; 979589"];
2884 [label="FullWidth = this.Text.Length; 979590"];
2885 [label="FullWidth 979591"];
2886 [label="this.AdjustFlagsAndWidth(trailing); 979592"];
2887 [label="return 'try'; 979593"];
2888 [label="FullWidth = this.Text.Length; 979594"];
2889 [label="FullWidth 979595"];
2890 [label="this.AdjustFlagsAndWidth(trailing); 979596"];
2891 [label="return 'catch'; 979597"];
2892 [label="FullWidth = this.Text.Length; 979598"];
2893 [label="FullWidth 979599"];
2894 [label="return 'catch'; 979600"];
2895 [label="FullWidth = this.Text.Length; 979601"];
2896 [label="FullWidth 979602"];
2897 [label="this.AdjustFlagsAndWidth(leading); 979603"];
2898 [label="return 'catch'; 979604"];
2899 [label="FullWidth = this.Text.Length; 979605"];
2900 [label="FullWidth 979606"];
2901 [label="this.AdjustFlagsAndWidth(trailing); 979607"];
2902 [label="return 'catch'; 979608"];
2903 [label="FullWidth = this.Text.Length; 979609"];
2904 [label="FullWidth 979610"];
2905 [label="this.AdjustFlagsAndWidth(trailing); 979611"];
2906 [label="return 'finally'; 979612"];
2907 [label="FullWidth = this.Text.Length; 979613"];
2908 [label="FullWidth 979614"];
2909 [label="return 'finally'; 979615"];
2910 [label="FullWidth = this.Text.Length; 979616"];
2911 [label="FullWidth 979617"];
2912 [label="this.AdjustFlagsAndWidth(leading); 979618"];
2913 [label="return 'finally'; 979619"];
2914 [label="FullWidth = this.Text.Length; 979620"];
2915 [label="FullWidth 979621"];
2916 [label="this.AdjustFlagsAndWidth(trailing); 979622"];
2917 [label="return 'finally'; 979623"];
2918 [label="FullWidth = this.Text.Length; 979624"];
2919 [label="FullWidth 979625"];
2920 [label="this.AdjustFlagsAndWidth(trailing); 979626"];
2921 [label="return 'lock'; 979627"];
2922 [label="FullWidth = this.Text.Length; 979628"];
2923 [label="FullWidth 979629"];
2924 [label="return 'lock'; 979630"];
2925 [label="FullWidth = this.Text.Length; 979631"];
2926 [label="FullWidth 979632"];
2927 [label="this.AdjustFlagsAndWidth(leading); 979633"];
2928 [label="return 'lock'; 979634"];
2929 [label="FullWidth = this.Text.Length; 979635"];
2930 [label="FullWidth 979636"];
2931 [label="this.AdjustFlagsAndWidth(trailing); 979637"];
2932 [label="return 'lock'; 979638"];
2933 [label="FullWidth = this.Text.Length; 979639"];
2934 [label="FullWidth 979640"];
2935 [label="this.AdjustFlagsAndWidth(trailing); 979641"];
2936 [label="return 'goto'; 979642"];
2937 [label="FullWidth = this.Text.Length; 979643"];
2938 [label="FullWidth 979644"];
2939 [label="return 'goto'; 979645"];
2940 [label="FullWidth = this.Text.Length; 979646"];
2941 [label="FullWidth 979647"];
2942 [label="this.AdjustFlagsAndWidth(leading); 979648"];
2943 [label="return 'goto'; 979649"];
2944 [label="FullWidth = this.Text.Length; 979650"];
2945 [label="FullWidth 979651"];
2946 [label="this.AdjustFlagsAndWidth(trailing); 979652"];
2947 [label="return 'goto'; 979653"];
2948 [label="FullWidth = this.Text.Length; 979654"];
2949 [label="FullWidth 979655"];
2950 [label="this.AdjustFlagsAndWidth(trailing); 979656"];
2951 [label="return 'break'; 979657"];
2952 [label="FullWidth = this.Text.Length; 979658"];
2953 [label="FullWidth 979659"];
2954 [label="return 'break'; 979660"];
2955 [label="FullWidth = this.Text.Length; 979661"];
2956 [label="FullWidth 979662"];
2957 [label="this.AdjustFlagsAndWidth(leading); 979663"];
2958 [label="return 'break'; 979664"];
2959 [label="FullWidth = this.Text.Length; 979665"];
2960 [label="FullWidth 979666"];
2961 [label="this.AdjustFlagsAndWidth(trailing); 979667"];
2962 [label="return 'break'; 979668"];
2963 [label="FullWidth = this.Text.Length; 979669"];
2964 [label="FullWidth 979670"];
2965 [label="this.AdjustFlagsAndWidth(trailing); 979671"];
2966 [label="return 'continue'; 979672"];
2967 [label="FullWidth = this.Text.Length; 979673"];
2968 [label="FullWidth 979674"];
2969 [label="return 'continue'; 979675"];
2970 [label="FullWidth = this.Text.Length; 979676"];
2971 [label="FullWidth 979677"];
2972 [label="this.AdjustFlagsAndWidth(leading); 979678"];
2973 [label="return 'continue'; 979679"];
2974 [label="FullWidth = this.Text.Length; 979680"];
2975 [label="FullWidth 979681"];
2976 [label="this.AdjustFlagsAndWidth(trailing); 979682"];
2977 [label="return 'continue'; 979683"];
2978 [label="FullWidth = this.Text.Length; 979684"];
2979 [label="FullWidth 979685"];
2980 [label="this.AdjustFlagsAndWidth(trailing); 979686"];
2981 [label="return 'return'; 979687"];
2982 [label="FullWidth = this.Text.Length; 979688"];
2983 [label="FullWidth 979689"];
2984 [label="return 'return'; 979690"];
2985 [label="FullWidth = this.Text.Length; 979691"];
2986 [label="FullWidth 979692"];
2987 [label="this.AdjustFlagsAndWidth(leading); 979693"];
2988 [label="return 'return'; 979694"];
2989 [label="FullWidth = this.Text.Length; 979695"];
2990 [label="FullWidth 979696"];
2991 [label="this.AdjustFlagsAndWidth(trailing); 979697"];
2992 [label="return 'return'; 979698"];
2993 [label="FullWidth = this.Text.Length; 979699"];
2994 [label="FullWidth 979700"];
2995 [label="this.AdjustFlagsAndWidth(trailing); 979701"];
2996 [label="return 'throw'; 979702"];
2997 [label="FullWidth = this.Text.Length; 979703"];
2998 [label="FullWidth 979704"];
2999 [label="return 'throw'; 979705"];
3000 [label="FullWidth = this.Text.Length; 979706"];
3001 [label="FullWidth 979707"];
3002 [label="this.AdjustFlagsAndWidth(leading); 979708"];
3003 [label="return 'throw'; 979709"];
3004 [label="FullWidth = this.Text.Length; 979710"];
3005 [label="FullWidth 979711"];
3006 [label="this.AdjustFlagsAndWidth(trailing); 979712"];
3007 [label="return 'throw'; 979713"];
3008 [label="FullWidth = this.Text.Length; 979714"];
3009 [label="FullWidth 979715"];
3010 [label="this.AdjustFlagsAndWidth(trailing); 979716"];
3011 [label="return 'public'; 979717"];
3012 [label="FullWidth = this.Text.Length; 979718"];
3013 [label="FullWidth 979719"];
3014 [label="return 'public'; 979720"];
3015 [label="FullWidth = this.Text.Length; 979721"];
3016 [label="FullWidth 979722"];
3017 [label="this.AdjustFlagsAndWidth(leading); 979723"];
3018 [label="return 'public'; 979724"];
3019 [label="FullWidth = this.Text.Length; 979725"];
3020 [label="FullWidth 979726"];
3021 [label="this.AdjustFlagsAndWidth(trailing); 979727"];
3022 [label="return 'public'; 979728"];
3023 [label="FullWidth = this.Text.Length; 979729"];
3024 [label="FullWidth 979730"];
3025 [label="this.AdjustFlagsAndWidth(trailing); 979731"];
3026 [label="return 'private'; 979732"];
3027 [label="FullWidth = this.Text.Length; 979733"];
3028 [label="FullWidth 979734"];
3029 [label="return 'private'; 979735"];
3030 [label="FullWidth = this.Text.Length; 979736"];
3031 [label="FullWidth 979737"];
3032 [label="this.AdjustFlagsAndWidth(leading); 979738"];
3033 [label="return 'private'; 979739"];
3034 [label="FullWidth = this.Text.Length; 979740"];
3035 [label="FullWidth 979741"];
3036 [label="this.AdjustFlagsAndWidth(trailing); 979742"];
3037 [label="return 'private'; 979743"];
3038 [label="FullWidth = this.Text.Length; 979744"];
3039 [label="FullWidth 979745"];
3040 [label="this.AdjustFlagsAndWidth(trailing); 979746"];
3041 [label="return 'internal'; 979747"];
3042 [label="FullWidth = this.Text.Length; 979748"];
3043 [label="FullWidth 979749"];
3044 [label="return 'internal'; 979750"];
3045 [label="FullWidth = this.Text.Length; 979751"];
3046 [label="FullWidth 979752"];
3047 [label="this.AdjustFlagsAndWidth(leading); 979753"];
3048 [label="return 'internal'; 979754"];
3049 [label="FullWidth = this.Text.Length; 979755"];
3050 [label="FullWidth 979756"];
3051 [label="this.AdjustFlagsAndWidth(trailing); 979757"];
3052 [label="return 'internal'; 979758"];
3053 [label="FullWidth = this.Text.Length; 979759"];
3054 [label="FullWidth 979760"];
3055 [label="this.AdjustFlagsAndWidth(trailing); 979761"];
3056 [label="return 'protected'; 979762"];
3057 [label="FullWidth = this.Text.Length; 979763"];
3058 [label="FullWidth 979764"];
3059 [label="return 'protected'; 979765"];
3060 [label="FullWidth = this.Text.Length; 979766"];
3061 [label="FullWidth 979767"];
3062 [label="this.AdjustFlagsAndWidth(leading); 979768"];
3063 [label="return 'protected'; 979769"];
3064 [label="FullWidth = this.Text.Length; 979770"];
3065 [label="FullWidth 979771"];
3066 [label="this.AdjustFlagsAndWidth(trailing); 979772"];
3067 [label="return 'protected'; 979773"];
3068 [label="FullWidth = this.Text.Length; 979774"];
3069 [label="FullWidth 979775"];
3070 [label="this.AdjustFlagsAndWidth(trailing); 979776"];
3071 [label="return 'static'; 979777"];
3072 [label="FullWidth = this.Text.Length; 979778"];
3073 [label="FullWidth 979779"];
3074 [label="return 'static'; 979780"];
3075 [label="FullWidth = this.Text.Length; 979781"];
3076 [label="FullWidth 979782"];
3077 [label="this.AdjustFlagsAndWidth(leading); 979783"];
3078 [label="return 'static'; 979784"];
3079 [label="FullWidth = this.Text.Length; 979785"];
3080 [label="FullWidth 979786"];
3081 [label="this.AdjustFlagsAndWidth(trailing); 979787"];
3082 [label="return 'static'; 979788"];
3083 [label="FullWidth = this.Text.Length; 979789"];
3084 [label="FullWidth 979790"];
3085 [label="this.AdjustFlagsAndWidth(trailing); 979791"];
3086 [label="return 'readonly'; 979792"];
3087 [label="FullWidth = this.Text.Length; 979793"];
3088 [label="FullWidth 979794"];
3089 [label="return 'readonly'; 979795"];
3090 [label="FullWidth = this.Text.Length; 979796"];
3091 [label="FullWidth 979797"];
3092 [label="this.AdjustFlagsAndWidth(leading); 979798"];
3093 [label="return 'readonly'; 979799"];
3094 [label="FullWidth = this.Text.Length; 979800"];
3095 [label="FullWidth 979801"];
3096 [label="this.AdjustFlagsAndWidth(trailing); 979802"];
3097 [label="return 'readonly'; 979803"];
3098 [label="FullWidth = this.Text.Length; 979804"];
3099 [label="FullWidth 979805"];
3100 [label="this.AdjustFlagsAndWidth(trailing); 979806"];
3101 [label="return 'sealed'; 979807"];
3102 [label="FullWidth = this.Text.Length; 979808"];
3103 [label="FullWidth 979809"];
3104 [label="return 'sealed'; 979810"];
3105 [label="FullWidth = this.Text.Length; 979811"];
3106 [label="FullWidth 979812"];
3107 [label="this.AdjustFlagsAndWidth(leading); 979813"];
3108 [label="return 'sealed'; 979814"];
3109 [label="FullWidth = this.Text.Length; 979815"];
3110 [label="FullWidth 979816"];
3111 [label="this.AdjustFlagsAndWidth(trailing); 979817"];
3112 [label="return 'sealed'; 979818"];
3113 [label="FullWidth = this.Text.Length; 979819"];
3114 [label="FullWidth 979820"];
3115 [label="this.AdjustFlagsAndWidth(trailing); 979821"];
3116 [label="return 'const'; 979822"];
3117 [label="FullWidth = this.Text.Length; 979823"];
3118 [label="FullWidth 979824"];
3119 [label="return 'const'; 979825"];
3120 [label="FullWidth = this.Text.Length; 979826"];
3121 [label="FullWidth 979827"];
3122 [label="this.AdjustFlagsAndWidth(leading); 979828"];
3123 [label="return 'const'; 979829"];
3124 [label="FullWidth = this.Text.Length; 979830"];
3125 [label="FullWidth 979831"];
3126 [label="this.AdjustFlagsAndWidth(trailing); 979832"];
3127 [label="return 'const'; 979833"];
3128 [label="FullWidth = this.Text.Length; 979834"];
3129 [label="FullWidth 979835"];
3130 [label="this.AdjustFlagsAndWidth(trailing); 979836"];
3131 [label="return 'fixed'; 979837"];
3132 [label="FullWidth = this.Text.Length; 979838"];
3133 [label="FullWidth 979839"];
3134 [label="return 'fixed'; 979840"];
3135 [label="FullWidth = this.Text.Length; 979841"];
3136 [label="FullWidth 979842"];
3137 [label="this.AdjustFlagsAndWidth(leading); 979843"];
3138 [label="return 'fixed'; 979844"];
3139 [label="FullWidth = this.Text.Length; 979845"];
3140 [label="FullWidth 979846"];
3141 [label="this.AdjustFlagsAndWidth(trailing); 979847"];
3142 [label="return 'fixed'; 979848"];
3143 [label="FullWidth = this.Text.Length; 979849"];
3144 [label="FullWidth 979850"];
3145 [label="this.AdjustFlagsAndWidth(trailing); 979851"];
3146 [label="return 'stackalloc'; 979852"];
3147 [label="FullWidth = this.Text.Length; 979853"];
3148 [label="FullWidth 979854"];
3149 [label="return 'stackalloc'; 979855"];
3150 [label="FullWidth = this.Text.Length; 979856"];
3151 [label="FullWidth 979857"];
3152 [label="this.AdjustFlagsAndWidth(leading); 979858"];
3153 [label="return 'stackalloc'; 979859"];
3154 [label="FullWidth = this.Text.Length; 979860"];
3155 [label="FullWidth 979861"];
3156 [label="this.AdjustFlagsAndWidth(trailing); 979862"];
3157 [label="return 'stackalloc'; 979863"];
3158 [label="FullWidth = this.Text.Length; 979864"];
3159 [label="FullWidth 979865"];
3160 [label="this.AdjustFlagsAndWidth(trailing); 979866"];
3161 [label="return 'volatile'; 979867"];
3162 [label="FullWidth = this.Text.Length; 979868"];
3163 [label="FullWidth 979869"];
3164 [label="return 'volatile'; 979870"];
3165 [label="FullWidth = this.Text.Length; 979871"];
3166 [label="FullWidth 979872"];
3167 [label="this.AdjustFlagsAndWidth(leading); 979873"];
3168 [label="return 'volatile'; 979874"];
3169 [label="FullWidth = this.Text.Length; 979875"];
3170 [label="FullWidth 979876"];
3171 [label="this.AdjustFlagsAndWidth(trailing); 979877"];
3172 [label="return 'volatile'; 979878"];
3173 [label="FullWidth = this.Text.Length; 979879"];
3174 [label="FullWidth 979880"];
3175 [label="this.AdjustFlagsAndWidth(trailing); 979881"];
3176 [label="return 'new'; 979882"];
3177 [label="FullWidth = this.Text.Length; 979883"];
3178 [label="FullWidth 979884"];
3179 [label="return 'new'; 979885"];
3180 [label="FullWidth = this.Text.Length; 979886"];
3181 [label="FullWidth 979887"];
3182 [label="this.AdjustFlagsAndWidth(leading); 979888"];
3183 [label="return 'new'; 979889"];
3184 [label="FullWidth = this.Text.Length; 979890"];
3185 [label="FullWidth 979891"];
3186 [label="this.AdjustFlagsAndWidth(trailing); 979892"];
3187 [label="return 'new'; 979893"];
3188 [label="FullWidth = this.Text.Length; 979894"];
3189 [label="FullWidth 979895"];
3190 [label="this.AdjustFlagsAndWidth(trailing); 979896"];
3191 [label="return 'override'; 979897"];
3192 [label="FullWidth = this.Text.Length; 979898"];
3193 [label="FullWidth 979899"];
3194 [label="return 'override'; 979900"];
3195 [label="FullWidth = this.Text.Length; 979901"];
3196 [label="FullWidth 979902"];
3197 [label="this.AdjustFlagsAndWidth(leading); 979903"];
3198 [label="return 'override'; 979904"];
3199 [label="FullWidth = this.Text.Length; 979905"];
3200 [label="FullWidth 979906"];
3201 [label="this.AdjustFlagsAndWidth(trailing); 979907"];
3202 [label="return 'override'; 979908"];
3203 [label="FullWidth = this.Text.Length; 979909"];
3204 [label="FullWidth 979910"];
3205 [label="this.AdjustFlagsAndWidth(trailing); 979911"];
3206 [label="return 'abstract'; 979912"];
3207 [label="FullWidth = this.Text.Length; 979913"];
3208 [label="FullWidth 979914"];
3209 [label="return 'abstract'; 979915"];
3210 [label="FullWidth = this.Text.Length; 979916"];
3211 [label="FullWidth 979917"];
3212 [label="this.AdjustFlagsAndWidth(leading); 979918"];
3213 [label="return 'abstract'; 979919"];
3214 [label="FullWidth = this.Text.Length; 979920"];
3215 [label="FullWidth 979921"];
3216 [label="this.AdjustFlagsAndWidth(trailing); 979922"];
3217 [label="return 'abstract'; 979923"];
3218 [label="FullWidth = this.Text.Length; 979924"];
3219 [label="FullWidth 979925"];
3220 [label="this.AdjustFlagsAndWidth(trailing); 979926"];
3221 [label="return 'virtual'; 979927"];
3222 [label="FullWidth = this.Text.Length; 979928"];
3223 [label="FullWidth 979929"];
3224 [label="return 'virtual'; 979930"];
3225 [label="FullWidth = this.Text.Length; 979931"];
3226 [label="FullWidth 979932"];
3227 [label="this.AdjustFlagsAndWidth(leading); 979933"];
3228 [label="return 'virtual'; 979934"];
3229 [label="FullWidth = this.Text.Length; 979935"];
3230 [label="FullWidth 979936"];
3231 [label="this.AdjustFlagsAndWidth(trailing); 979937"];
3232 [label="return 'virtual'; 979938"];
3233 [label="FullWidth = this.Text.Length; 979939"];
3234 [label="FullWidth 979940"];
3235 [label="this.AdjustFlagsAndWidth(trailing); 979941"];
3236 [label="return 'event'; 979942"];
3237 [label="FullWidth = this.Text.Length; 979943"];
3238 [label="FullWidth 979944"];
3239 [label="return 'event'; 979945"];
3240 [label="FullWidth = this.Text.Length; 979946"];
3241 [label="FullWidth 979947"];
3242 [label="this.AdjustFlagsAndWidth(leading); 979948"];
3243 [label="return 'event'; 979949"];
3244 [label="FullWidth = this.Text.Length; 979950"];
3245 [label="FullWidth 979951"];
3246 [label="this.AdjustFlagsAndWidth(trailing); 979952"];
3247 [label="return 'event'; 979953"];
3248 [label="FullWidth = this.Text.Length; 979954"];
3249 [label="FullWidth 979955"];
3250 [label="this.AdjustFlagsAndWidth(trailing); 979956"];
3251 [label="return 'extern'; 979957"];
3252 [label="FullWidth = this.Text.Length; 979958"];
3253 [label="FullWidth 979959"];
3254 [label="return 'extern'; 979960"];
3255 [label="FullWidth = this.Text.Length; 979961"];
3256 [label="FullWidth 979962"];
3257 [label="this.AdjustFlagsAndWidth(leading); 979963"];
3258 [label="return 'extern'; 979964"];
3259 [label="FullWidth = this.Text.Length; 979965"];
3260 [label="FullWidth 979966"];
3261 [label="this.AdjustFlagsAndWidth(trailing); 979967"];
3262 [label="return 'extern'; 979968"];
3263 [label="FullWidth = this.Text.Length; 979969"];
3264 [label="FullWidth 979970"];
3265 [label="this.AdjustFlagsAndWidth(trailing); 979971"];
3266 [label="return 'ref'; 979972"];
3267 [label="FullWidth = this.Text.Length; 979973"];
3268 [label="FullWidth 979974"];
3269 [label="return 'ref'; 979975"];
3270 [label="FullWidth = this.Text.Length; 979976"];
3271 [label="FullWidth 979977"];
3272 [label="this.AdjustFlagsAndWidth(leading); 979978"];
3273 [label="return 'ref'; 979979"];
3274 [label="FullWidth = this.Text.Length; 979980"];
3275 [label="FullWidth 979981"];
3276 [label="this.AdjustFlagsAndWidth(trailing); 979982"];
3277 [label="return 'ref'; 979983"];
3278 [label="FullWidth = this.Text.Length; 979984"];
3279 [label="FullWidth 979985"];
3280 [label="this.AdjustFlagsAndWidth(trailing); 979986"];
3281 [label="return 'out'; 979987"];
3282 [label="FullWidth = this.Text.Length; 979988"];
3283 [label="FullWidth 979989"];
3284 [label="return 'out'; 979990"];
3285 [label="FullWidth = this.Text.Length; 979991"];
3286 [label="FullWidth 979992"];
3287 [label="this.AdjustFlagsAndWidth(leading); 979993"];
3288 [label="return 'out'; 979994"];
3289 [label="FullWidth = this.Text.Length; 979995"];
3290 [label="FullWidth 979996"];
3291 [label="this.AdjustFlagsAndWidth(trailing); 979997"];
3292 [label="return 'out'; 979998"];
3293 [label="FullWidth = this.Text.Length; 979999"];
3294 [label="FullWidth 980000"];
3295 [label="this.AdjustFlagsAndWidth(trailing); 980001"];
3296 [label="return 'in'; 980002"];
3297 [label="FullWidth = this.Text.Length; 980003"];
3298 [label="FullWidth 980004"];
3299 [label="return 'in'; 980005"];
3300 [label="FullWidth = this.Text.Length; 980006"];
3301 [label="FullWidth 980007"];
3302 [label="this.AdjustFlagsAndWidth(leading); 980008"];
3303 [label="return 'in'; 980009"];
3304 [label="FullWidth = this.Text.Length; 980010"];
3305 [label="FullWidth 980011"];
3306 [label="this.AdjustFlagsAndWidth(trailing); 980012"];
3307 [label="return 'in'; 980013"];
3308 [label="FullWidth = this.Text.Length; 980014"];
3309 [label="FullWidth 980015"];
3310 [label="this.AdjustFlagsAndWidth(trailing); 980016"];
3311 [label="return 'is'; 980017"];
3312 [label="FullWidth = this.Text.Length; 980018"];
3313 [label="FullWidth 980019"];
3314 [label="return 'is'; 980020"];
3315 [label="FullWidth = this.Text.Length; 980021"];
3316 [label="FullWidth 980022"];
3317 [label="this.AdjustFlagsAndWidth(leading); 980023"];
3318 [label="return 'is'; 980024"];
3319 [label="FullWidth = this.Text.Length; 980025"];
3320 [label="FullWidth 980026"];
3321 [label="this.AdjustFlagsAndWidth(trailing); 980027"];
3322 [label="return 'is'; 980028"];
3323 [label="FullWidth = this.Text.Length; 980029"];
3324 [label="FullWidth 980030"];
3325 [label="this.AdjustFlagsAndWidth(trailing); 980031"];
3326 [label="return 'as'; 980032"];
3327 [label="FullWidth = this.Text.Length; 980033"];
3328 [label="FullWidth 980034"];
3329 [label="return 'as'; 980035"];
3330 [label="FullWidth = this.Text.Length; 980036"];
3331 [label="FullWidth 980037"];
3332 [label="this.AdjustFlagsAndWidth(leading); 980038"];
3333 [label="return 'as'; 980039"];
3334 [label="FullWidth = this.Text.Length; 980040"];
3335 [label="FullWidth 980041"];
3336 [label="this.AdjustFlagsAndWidth(trailing); 980042"];
3337 [label="return 'as'; 980043"];
3338 [label="FullWidth = this.Text.Length; 980044"];
3339 [label="FullWidth 980045"];
3340 [label="this.AdjustFlagsAndWidth(trailing); 980046"];
3341 [label="return 'params'; 980047"];
3342 [label="FullWidth = this.Text.Length; 980048"];
3343 [label="FullWidth 980049"];
3344 [label="return 'params'; 980050"];
3345 [label="FullWidth = this.Text.Length; 980051"];
3346 [label="FullWidth 980052"];
3347 [label="this.AdjustFlagsAndWidth(leading); 980053"];
3348 [label="return 'params'; 980054"];
3349 [label="FullWidth = this.Text.Length; 980055"];
3350 [label="FullWidth 980056"];
3351 [label="this.AdjustFlagsAndWidth(trailing); 980057"];
3352 [label="return 'params'; 980058"];
3353 [label="FullWidth = this.Text.Length; 980059"];
3354 [label="FullWidth 980060"];
3355 [label="this.AdjustFlagsAndWidth(trailing); 980061"];
3356 [label="return '__arglist'; 980062"];
3357 [label="FullWidth = this.Text.Length; 980063"];
3358 [label="FullWidth 980064"];
3359 [label="return '__arglist'; 980065"];
3360 [label="FullWidth = this.Text.Length; 980066"];
3361 [label="FullWidth 980067"];
3362 [label="this.AdjustFlagsAndWidth(leading); 980068"];
3363 [label="return '__arglist'; 980069"];
3364 [label="FullWidth = this.Text.Length; 980070"];
3365 [label="FullWidth 980071"];
3366 [label="this.AdjustFlagsAndWidth(trailing); 980072"];
3367 [label="return '__arglist'; 980073"];
3368 [label="FullWidth = this.Text.Length; 980074"];
3369 [label="FullWidth 980075"];
3370 [label="this.AdjustFlagsAndWidth(trailing); 980076"];
3371 [label="return '__makeref'; 980077"];
3372 [label="FullWidth = this.Text.Length; 980078"];
3373 [label="FullWidth 980079"];
3374 [label="return '__makeref'; 980080"];
3375 [label="FullWidth = this.Text.Length; 980081"];
3376 [label="FullWidth 980082"];
3377 [label="this.AdjustFlagsAndWidth(leading); 980083"];
3378 [label="return '__makeref'; 980084"];
3379 [label="FullWidth = this.Text.Length; 980085"];
3380 [label="FullWidth 980086"];
3381 [label="this.AdjustFlagsAndWidth(trailing); 980087"];
3382 [label="return '__makeref'; 980088"];
3383 [label="FullWidth = this.Text.Length; 980089"];
3384 [label="FullWidth 980090"];
3385 [label="this.AdjustFlagsAndWidth(trailing); 980091"];
3386 [label="return '__reftype'; 980092"];
3387 [label="FullWidth = this.Text.Length; 980093"];
3388 [label="FullWidth 980094"];
3389 [label="return '__reftype'; 980095"];
3390 [label="FullWidth = this.Text.Length; 980096"];
3391 [label="FullWidth 980097"];
3392 [label="this.AdjustFlagsAndWidth(leading); 980098"];
3393 [label="return '__reftype'; 980099"];
3394 [label="FullWidth = this.Text.Length; 980100"];
3395 [label="FullWidth 980101"];
3396 [label="this.AdjustFlagsAndWidth(trailing); 980102"];
3397 [label="return '__reftype'; 980103"];
3398 [label="FullWidth = this.Text.Length; 980104"];
3399 [label="FullWidth 980105"];
3400 [label="this.AdjustFlagsAndWidth(trailing); 980106"];
3401 [label="return '__refvalue'; 980107"];
3402 [label="FullWidth = this.Text.Length; 980108"];
3403 [label="FullWidth 980109"];
3404 [label="return '__refvalue'; 980110"];
3405 [label="FullWidth = this.Text.Length; 980111"];
3406 [label="FullWidth 980112"];
3407 [label="this.AdjustFlagsAndWidth(leading); 980113"];
3408 [label="return '__refvalue'; 980114"];
3409 [label="FullWidth = this.Text.Length; 980115"];
3410 [label="FullWidth 980116"];
3411 [label="this.AdjustFlagsAndWidth(trailing); 980117"];
3412 [label="return '__refvalue'; 980118"];
3413 [label="FullWidth = this.Text.Length; 980119"];
3414 [label="FullWidth 980120"];
3415 [label="this.AdjustFlagsAndWidth(trailing); 980121"];
3416 [label="return 'this'; 980122"];
3417 [label="FullWidth = this.Text.Length; 980123"];
3418 [label="FullWidth 980124"];
3419 [label="return 'this'; 980125"];
3420 [label="FullWidth = this.Text.Length; 980126"];
3421 [label="FullWidth 980127"];
3422 [label="this.AdjustFlagsAndWidth(leading); 980128"];
3423 [label="return 'this'; 980129"];
3424 [label="FullWidth = this.Text.Length; 980130"];
3425 [label="FullWidth 980131"];
3426 [label="this.AdjustFlagsAndWidth(trailing); 980132"];
3427 [label="return 'this'; 980133"];
3428 [label="FullWidth = this.Text.Length; 980134"];
3429 [label="FullWidth 980135"];
3430 [label="this.AdjustFlagsAndWidth(trailing); 980136"];
3431 [label="return 'base'; 980137"];
3432 [label="FullWidth = this.Text.Length; 980138"];
3433 [label="FullWidth 980139"];
3434 [label="return 'base'; 980140"];
3435 [label="FullWidth = this.Text.Length; 980141"];
3436 [label="FullWidth 980142"];
3437 [label="this.AdjustFlagsAndWidth(leading); 980143"];
3438 [label="return 'base'; 980144"];
3439 [label="FullWidth = this.Text.Length; 980145"];
3440 [label="FullWidth 980146"];
3441 [label="this.AdjustFlagsAndWidth(trailing); 980147"];
3442 [label="return 'base'; 980148"];
3443 [label="FullWidth = this.Text.Length; 980149"];
3444 [label="FullWidth 980150"];
3445 [label="this.AdjustFlagsAndWidth(trailing); 980151"];
3446 [label="return 'namespace'; 980152"];
3447 [label="FullWidth = this.Text.Length; 980153"];
3448 [label="FullWidth 980154"];
3449 [label="return 'namespace'; 980155"];
3450 [label="FullWidth = this.Text.Length; 980156"];
3451 [label="FullWidth 980157"];
3452 [label="this.AdjustFlagsAndWidth(leading); 980158"];
3453 [label="return 'namespace'; 980159"];
3454 [label="FullWidth = this.Text.Length; 980160"];
3455 [label="FullWidth 980161"];
3456 [label="this.AdjustFlagsAndWidth(trailing); 980162"];
3457 [label="return 'namespace'; 980163"];
3458 [label="FullWidth = this.Text.Length; 980164"];
3459 [label="FullWidth 980165"];
3460 [label="this.AdjustFlagsAndWidth(trailing); 980166"];
3461 [label="return 'using'; 980167"];
3462 [label="FullWidth = this.Text.Length; 980168"];
3463 [label="FullWidth 980169"];
3464 [label="return 'using'; 980170"];
3465 [label="FullWidth = this.Text.Length; 980171"];
3466 [label="FullWidth 980172"];
3467 [label="this.AdjustFlagsAndWidth(leading); 980173"];
3468 [label="return 'using'; 980174"];
3469 [label="FullWidth = this.Text.Length; 980175"];
3470 [label="FullWidth 980176"];
3471 [label="this.AdjustFlagsAndWidth(trailing); 980177"];
3472 [label="return 'using'; 980178"];
3473 [label="FullWidth = this.Text.Length; 980179"];
3474 [label="FullWidth 980180"];
3475 [label="this.AdjustFlagsAndWidth(trailing); 980181"];
3476 [label="return 'class'; 980182"];
3477 [label="FullWidth = this.Text.Length; 980183"];
3478 [label="FullWidth 980184"];
3479 [label="return 'class'; 980185"];
3480 [label="FullWidth = this.Text.Length; 980186"];
3481 [label="FullWidth 980187"];
3482 [label="this.AdjustFlagsAndWidth(leading); 980188"];
3483 [label="return 'class'; 980189"];
3484 [label="FullWidth = this.Text.Length; 980190"];
3485 [label="FullWidth 980191"];
3486 [label="this.AdjustFlagsAndWidth(trailing); 980192"];
3487 [label="return 'class'; 980193"];
3488 [label="FullWidth = this.Text.Length; 980194"];
3489 [label="FullWidth 980195"];
3490 [label="this.AdjustFlagsAndWidth(trailing); 980196"];
3491 [label="return 'struct'; 980197"];
3492 [label="FullWidth = this.Text.Length; 980198"];
3493 [label="FullWidth 980199"];
3494 [label="return 'struct'; 980200"];
3495 [label="FullWidth = this.Text.Length; 980201"];
3496 [label="FullWidth 980202"];
3497 [label="this.AdjustFlagsAndWidth(leading); 980203"];
3498 [label="return 'struct'; 980204"];
3499 [label="FullWidth = this.Text.Length; 980205"];
3500 [label="FullWidth 980206"];
3501 [label="this.AdjustFlagsAndWidth(trailing); 980207"];
3502 [label="return 'struct'; 980208"];
3503 [label="FullWidth = this.Text.Length; 980209"];
3504 [label="FullWidth 980210"];
3505 [label="this.AdjustFlagsAndWidth(trailing); 980211"];
3506 [label="return 'interface'; 980212"];
3507 [label="FullWidth = this.Text.Length; 980213"];
3508 [label="FullWidth 980214"];
3509 [label="return 'interface'; 980215"];
3510 [label="FullWidth = this.Text.Length; 980216"];
3511 [label="FullWidth 980217"];
3512 [label="this.AdjustFlagsAndWidth(leading); 980218"];
3513 [label="return 'interface'; 980219"];
3514 [label="FullWidth = this.Text.Length; 980220"];
3515 [label="FullWidth 980221"];
3516 [label="this.AdjustFlagsAndWidth(trailing); 980222"];
3517 [label="return 'interface'; 980223"];
3518 [label="FullWidth = this.Text.Length; 980224"];
3519 [label="FullWidth 980225"];
3520 [label="this.AdjustFlagsAndWidth(trailing); 980226"];
3521 [label="return 'enum'; 980227"];
3522 [label="FullWidth = this.Text.Length; 980228"];
3523 [label="FullWidth 980229"];
3524 [label="return 'enum'; 980230"];
3525 [label="FullWidth = this.Text.Length; 980231"];
3526 [label="FullWidth 980232"];
3527 [label="this.AdjustFlagsAndWidth(leading); 980233"];
3528 [label="return 'enum'; 980234"];
3529 [label="FullWidth = this.Text.Length; 980235"];
3530 [label="FullWidth 980236"];
3531 [label="this.AdjustFlagsAndWidth(trailing); 980237"];
3532 [label="return 'enum'; 980238"];
3533 [label="FullWidth = this.Text.Length; 980239"];
3534 [label="FullWidth 980240"];
3535 [label="this.AdjustFlagsAndWidth(trailing); 980241"];
3536 [label="return 'delegate'; 980242"];
3537 [label="FullWidth = this.Text.Length; 980243"];
3538 [label="FullWidth 980244"];
3539 [label="return 'delegate'; 980245"];
3540 [label="FullWidth = this.Text.Length; 980246"];
3541 [label="FullWidth 980247"];
3542 [label="this.AdjustFlagsAndWidth(leading); 980248"];
3543 [label="return 'delegate'; 980249"];
3544 [label="FullWidth = this.Text.Length; 980250"];
3545 [label="FullWidth 980251"];
3546 [label="this.AdjustFlagsAndWidth(trailing); 980252"];
3547 [label="return 'delegate'; 980253"];
3548 [label="FullWidth = this.Text.Length; 980254"];
3549 [label="FullWidth 980255"];
3550 [label="this.AdjustFlagsAndWidth(trailing); 980256"];
3551 [label="return 'checked'; 980257"];
3552 [label="FullWidth = this.Text.Length; 980258"];
3553 [label="FullWidth 980259"];
3554 [label="return 'checked'; 980260"];
3555 [label="FullWidth = this.Text.Length; 980261"];
3556 [label="FullWidth 980262"];
3557 [label="this.AdjustFlagsAndWidth(leading); 980263"];
3558 [label="return 'checked'; 980264"];
3559 [label="FullWidth = this.Text.Length; 980265"];
3560 [label="FullWidth 980266"];
3561 [label="this.AdjustFlagsAndWidth(trailing); 980267"];
3562 [label="return 'checked'; 980268"];
3563 [label="FullWidth = this.Text.Length; 980269"];
3564 [label="FullWidth 980270"];
3565 [label="this.AdjustFlagsAndWidth(trailing); 980271"];
3566 [label="return 'unchecked'; 980272"];
3567 [label="FullWidth = this.Text.Length; 980273"];
3568 [label="FullWidth 980274"];
3569 [label="return 'unchecked'; 980275"];
3570 [label="FullWidth = this.Text.Length; 980276"];
3571 [label="FullWidth 980277"];
3572 [label="this.AdjustFlagsAndWidth(leading); 980278"];
3573 [label="return 'unchecked'; 980279"];
3574 [label="FullWidth = this.Text.Length; 980280"];
3575 [label="FullWidth 980281"];
3576 [label="this.AdjustFlagsAndWidth(trailing); 980282"];
3577 [label="return 'unchecked'; 980283"];
3578 [label="FullWidth = this.Text.Length; 980284"];
3579 [label="FullWidth 980285"];
3580 [label="this.AdjustFlagsAndWidth(trailing); 980286"];
3581 [label="return 'unsafe'; 980287"];
3582 [label="FullWidth = this.Text.Length; 980288"];
3583 [label="FullWidth 980289"];
3584 [label="return 'unsafe'; 980290"];
3585 [label="FullWidth = this.Text.Length; 980291"];
3586 [label="FullWidth 980292"];
3587 [label="this.AdjustFlagsAndWidth(leading); 980293"];
3588 [label="return 'unsafe'; 980294"];
3589 [label="FullWidth = this.Text.Length; 980295"];
3590 [label="FullWidth 980296"];
3591 [label="this.AdjustFlagsAndWidth(trailing); 980297"];
3592 [label="return 'unsafe'; 980298"];
3593 [label="FullWidth = this.Text.Length; 980299"];
3594 [label="FullWidth 980300"];
3595 [label="this.AdjustFlagsAndWidth(trailing); 980301"];
3596 [label="return 'operator'; 980302"];
3597 [label="FullWidth = this.Text.Length; 980303"];
3598 [label="FullWidth 980304"];
3599 [label="return 'operator'; 980305"];
3600 [label="FullWidth = this.Text.Length; 980306"];
3601 [label="FullWidth 980307"];
3602 [label="this.AdjustFlagsAndWidth(leading); 980308"];
3603 [label="return 'operator'; 980309"];
3604 [label="FullWidth = this.Text.Length; 980310"];
3605 [label="FullWidth 980311"];
3606 [label="this.AdjustFlagsAndWidth(trailing); 980312"];
3607 [label="return 'operator'; 980313"];
3608 [label="FullWidth = this.Text.Length; 980314"];
3609 [label="FullWidth 980315"];
3610 [label="this.AdjustFlagsAndWidth(trailing); 980316"];
3611 [label="return 'explicit'; 980317"];
3612 [label="FullWidth = this.Text.Length; 980318"];
3613 [label="FullWidth 980319"];
3614 [label="return 'explicit'; 980320"];
3615 [label="FullWidth = this.Text.Length; 980321"];
3616 [label="FullWidth 980322"];
3617 [label="this.AdjustFlagsAndWidth(leading); 980323"];
3618 [label="return 'explicit'; 980324"];
3619 [label="FullWidth = this.Text.Length; 980325"];
3620 [label="FullWidth 980326"];
3621 [label="this.AdjustFlagsAndWidth(trailing); 980327"];
3622 [label="return 'explicit'; 980328"];
3623 [label="FullWidth = this.Text.Length; 980329"];
3624 [label="FullWidth 980330"];
3625 [label="this.AdjustFlagsAndWidth(trailing); 980331"];
3626 [label="return 'implicit'; 980332"];
3627 [label="FullWidth = this.Text.Length; 980333"];
3628 [label="FullWidth 980334"];
3629 [label="return 'implicit'; 980335"];
3630 [label="FullWidth = this.Text.Length; 980336"];
3631 [label="FullWidth 980337"];
3632 [label="this.AdjustFlagsAndWidth(leading); 980338"];
3633 [label="return 'implicit'; 980339"];
3634 [label="FullWidth = this.Text.Length; 980340"];
3635 [label="FullWidth 980341"];
3636 [label="this.AdjustFlagsAndWidth(trailing); 980342"];
3637 [label="return 'implicit'; 980343"];
3638 [label="FullWidth = this.Text.Length; 980344"];
3639 [label="FullWidth 980345"];
3640 [label="this.AdjustFlagsAndWidth(trailing); 980346"];
3641 [label="return 'yield'; 980347"];
3642 [label="FullWidth = this.Text.Length; 980348"];
3643 [label="FullWidth 980349"];
3644 [label="return 'yield'; 980350"];
3645 [label="FullWidth = this.Text.Length; 980351"];
3646 [label="FullWidth 980352"];
3647 [label="this.AdjustFlagsAndWidth(leading); 980353"];
3648 [label="return 'yield'; 980354"];
3649 [label="FullWidth = this.Text.Length; 980355"];
3650 [label="FullWidth 980356"];
3651 [label="this.AdjustFlagsAndWidth(trailing); 980357"];
3652 [label="return 'yield'; 980358"];
3653 [label="FullWidth = this.Text.Length; 980359"];
3654 [label="FullWidth 980360"];
3655 [label="this.AdjustFlagsAndWidth(trailing); 980361"];
3656 [label="return 'partial'; 980362"];
3657 [label="FullWidth = this.Text.Length; 980363"];
3658 [label="FullWidth 980364"];
3659 [label="return 'partial'; 980365"];
3660 [label="FullWidth = this.Text.Length; 980366"];
3661 [label="FullWidth 980367"];
3662 [label="this.AdjustFlagsAndWidth(leading); 980368"];
3663 [label="return 'partial'; 980369"];
3664 [label="FullWidth = this.Text.Length; 980370"];
3665 [label="FullWidth 980371"];
3666 [label="this.AdjustFlagsAndWidth(trailing); 980372"];
3667 [label="return 'partial'; 980373"];
3668 [label="FullWidth = this.Text.Length; 980374"];
3669 [label="FullWidth 980375"];
3670 [label="this.AdjustFlagsAndWidth(trailing); 980376"];
3671 [label="return 'alias'; 980377"];
3672 [label="FullWidth = this.Text.Length; 980378"];
3673 [label="FullWidth 980379"];
3674 [label="return 'alias'; 980380"];
3675 [label="FullWidth = this.Text.Length; 980381"];
3676 [label="FullWidth 980382"];
3677 [label="this.AdjustFlagsAndWidth(leading); 980383"];
3678 [label="return 'alias'; 980384"];
3679 [label="FullWidth = this.Text.Length; 980385"];
3680 [label="FullWidth 980386"];
3681 [label="this.AdjustFlagsAndWidth(trailing); 980387"];
3682 [label="return 'alias'; 980388"];
3683 [label="FullWidth = this.Text.Length; 980389"];
3684 [label="FullWidth 980390"];
3685 [label="this.AdjustFlagsAndWidth(trailing); 980391"];
3686 [label="return 'global'; 980392"];
3687 [label="FullWidth = this.Text.Length; 980393"];
3688 [label="FullWidth 980394"];
3689 [label="return 'global'; 980395"];
3690 [label="FullWidth = this.Text.Length; 980396"];
3691 [label="FullWidth 980397"];
3692 [label="this.AdjustFlagsAndWidth(leading); 980398"];
3693 [label="return 'global'; 980399"];
3694 [label="FullWidth = this.Text.Length; 980400"];
3695 [label="FullWidth 980401"];
3696 [label="this.AdjustFlagsAndWidth(trailing); 980402"];
3697 [label="return 'global'; 980403"];
3698 [label="FullWidth = this.Text.Length; 980404"];
3699 [label="FullWidth 980405"];
3700 [label="this.AdjustFlagsAndWidth(trailing); 980406"];
3701 [label="return 'assembly'; 980407"];
3702 [label="FullWidth = this.Text.Length; 980408"];
3703 [label="FullWidth 980409"];
3704 [label="return 'assembly'; 980410"];
3705 [label="FullWidth = this.Text.Length; 980411"];
3706 [label="FullWidth 980412"];
3707 [label="this.AdjustFlagsAndWidth(leading); 980413"];
3708 [label="return 'assembly'; 980414"];
3709 [label="FullWidth = this.Text.Length; 980415"];
3710 [label="FullWidth 980416"];
3711 [label="this.AdjustFlagsAndWidth(trailing); 980417"];
3712 [label="return 'assembly'; 980418"];
3713 [label="FullWidth = this.Text.Length; 980419"];
3714 [label="FullWidth 980420"];
3715 [label="this.AdjustFlagsAndWidth(trailing); 980421"];
3716 [label="return 'module'; 980422"];
3717 [label="FullWidth = this.Text.Length; 980423"];
3718 [label="FullWidth 980424"];
3719 [label="return 'module'; 980425"];
3720 [label="FullWidth = this.Text.Length; 980426"];
3721 [label="FullWidth 980427"];
3722 [label="this.AdjustFlagsAndWidth(leading); 980428"];
3723 [label="return 'module'; 980429"];
3724 [label="FullWidth = this.Text.Length; 980430"];
3725 [label="FullWidth 980431"];
3726 [label="this.AdjustFlagsAndWidth(trailing); 980432"];
3727 [label="return 'module'; 980433"];
3728 [label="FullWidth = this.Text.Length; 980434"];
3729 [label="FullWidth 980435"];
3730 [label="this.AdjustFlagsAndWidth(trailing); 980436"];
3731 [label="return 'type'; 980437"];
3732 [label="FullWidth = this.Text.Length; 980438"];
3733 [label="FullWidth 980439"];
3734 [label="return 'type'; 980440"];
3735 [label="FullWidth = this.Text.Length; 980441"];
3736 [label="FullWidth 980442"];
3737 [label="this.AdjustFlagsAndWidth(leading); 980443"];
3738 [label="return 'type'; 980444"];
3739 [label="FullWidth = this.Text.Length; 980445"];
3740 [label="FullWidth 980446"];
3741 [label="this.AdjustFlagsAndWidth(trailing); 980447"];
3742 [label="return 'type'; 980448"];
3743 [label="FullWidth = this.Text.Length; 980449"];
3744 [label="FullWidth 980450"];
3745 [label="this.AdjustFlagsAndWidth(trailing); 980451"];
3746 [label="return 'field'; 980452"];
3747 [label="FullWidth = this.Text.Length; 980453"];
3748 [label="FullWidth 980454"];
3749 [label="return 'field'; 980455"];
3750 [label="FullWidth = this.Text.Length; 980456"];
3751 [label="FullWidth 980457"];
3752 [label="this.AdjustFlagsAndWidth(leading); 980458"];
3753 [label="return 'field'; 980459"];
3754 [label="FullWidth = this.Text.Length; 980460"];
3755 [label="FullWidth 980461"];
3756 [label="this.AdjustFlagsAndWidth(trailing); 980462"];
3757 [label="return 'field'; 980463"];
3758 [label="FullWidth = this.Text.Length; 980464"];
3759 [label="FullWidth 980465"];
3760 [label="this.AdjustFlagsAndWidth(trailing); 980466"];
3761 [label="return 'method'; 980467"];
3762 [label="FullWidth = this.Text.Length; 980468"];
3763 [label="FullWidth 980469"];
3764 [label="return 'method'; 980470"];
3765 [label="FullWidth = this.Text.Length; 980471"];
3766 [label="FullWidth 980472"];
3767 [label="this.AdjustFlagsAndWidth(leading); 980473"];
3768 [label="return 'method'; 980474"];
3769 [label="FullWidth = this.Text.Length; 980475"];
3770 [label="FullWidth 980476"];
3771 [label="this.AdjustFlagsAndWidth(trailing); 980477"];
3772 [label="return 'method'; 980478"];
3773 [label="FullWidth = this.Text.Length; 980479"];
3774 [label="FullWidth 980480"];
3775 [label="this.AdjustFlagsAndWidth(trailing); 980481"];
3776 [label="return 'param'; 980482"];
3777 [label="FullWidth = this.Text.Length; 980483"];
3778 [label="FullWidth 980484"];
3779 [label="return 'param'; 980485"];
3780 [label="FullWidth = this.Text.Length; 980486"];
3781 [label="FullWidth 980487"];
3782 [label="this.AdjustFlagsAndWidth(leading); 980488"];
3783 [label="return 'param'; 980489"];
3784 [label="FullWidth = this.Text.Length; 980490"];
3785 [label="FullWidth 980491"];
3786 [label="this.AdjustFlagsAndWidth(trailing); 980492"];
3787 [label="return 'param'; 980493"];
3788 [label="FullWidth = this.Text.Length; 980494"];
3789 [label="FullWidth 980495"];
3790 [label="this.AdjustFlagsAndWidth(trailing); 980496"];
3791 [label="return 'property'; 980497"];
3792 [label="FullWidth = this.Text.Length; 980498"];
3793 [label="FullWidth 980499"];
3794 [label="return 'property'; 980500"];
3795 [label="FullWidth = this.Text.Length; 980501"];
3796 [label="FullWidth 980502"];
3797 [label="this.AdjustFlagsAndWidth(leading); 980503"];
3798 [label="return 'property'; 980504"];
3799 [label="FullWidth = this.Text.Length; 980505"];
3800 [label="FullWidth 980506"];
3801 [label="this.AdjustFlagsAndWidth(trailing); 980507"];
3802 [label="return 'property'; 980508"];
3803 [label="FullWidth = this.Text.Length; 980509"];
3804 [label="FullWidth 980510"];
3805 [label="this.AdjustFlagsAndWidth(trailing); 980511"];
3806 [label="return 'typevar'; 980512"];
3807 [label="FullWidth = this.Text.Length; 980513"];
3808 [label="FullWidth 980514"];
3809 [label="return 'typevar'; 980515"];
3810 [label="FullWidth = this.Text.Length; 980516"];
3811 [label="FullWidth 980517"];
3812 [label="this.AdjustFlagsAndWidth(leading); 980518"];
3813 [label="return 'typevar'; 980519"];
3814 [label="FullWidth = this.Text.Length; 980520"];
3815 [label="FullWidth 980521"];
3816 [label="this.AdjustFlagsAndWidth(trailing); 980522"];
3817 [label="return 'typevar'; 980523"];
3818 [label="FullWidth = this.Text.Length; 980524"];
3819 [label="FullWidth 980525"];
3820 [label="this.AdjustFlagsAndWidth(trailing); 980526"];
3821 [label="return 'get'; 980527"];
3822 [label="FullWidth = this.Text.Length; 980528"];
3823 [label="FullWidth 980529"];
3824 [label="return 'get'; 980530"];
3825 [label="FullWidth = this.Text.Length; 980531"];
3826 [label="FullWidth 980532"];
3827 [label="this.AdjustFlagsAndWidth(leading); 980533"];
3828 [label="return 'get'; 980534"];
3829 [label="FullWidth = this.Text.Length; 980535"];
3830 [label="FullWidth 980536"];
3831 [label="this.AdjustFlagsAndWidth(trailing); 980537"];
3832 [label="return 'get'; 980538"];
3833 [label="FullWidth = this.Text.Length; 980539"];
3834 [label="FullWidth 980540"];
3835 [label="this.AdjustFlagsAndWidth(trailing); 980541"];
3836 [label="return 'set'; 980542"];
3837 [label="FullWidth = this.Text.Length; 980543"];
3838 [label="FullWidth 980544"];
3839 [label="return 'set'; 980545"];
3840 [label="FullWidth = this.Text.Length; 980546"];
3841 [label="FullWidth 980547"];
3842 [label="this.AdjustFlagsAndWidth(leading); 980548"];
3843 [label="return 'set'; 980549"];
3844 [label="FullWidth = this.Text.Length; 980550"];
3845 [label="FullWidth 980551"];
3846 [label="this.AdjustFlagsAndWidth(trailing); 980552"];
3847 [label="return 'set'; 980553"];
3848 [label="FullWidth = this.Text.Length; 980554"];
3849 [label="FullWidth 980555"];
3850 [label="this.AdjustFlagsAndWidth(trailing); 980556"];
3851 [label="return 'add'; 980557"];
3852 [label="FullWidth = this.Text.Length; 980558"];
3853 [label="FullWidth 980559"];
3854 [label="return 'add'; 980560"];
3855 [label="FullWidth = this.Text.Length; 980561"];
3856 [label="FullWidth 980562"];
3857 [label="this.AdjustFlagsAndWidth(leading); 980563"];
3858 [label="return 'add'; 980564"];
3859 [label="FullWidth = this.Text.Length; 980565"];
3860 [label="FullWidth 980566"];
3861 [label="this.AdjustFlagsAndWidth(trailing); 980567"];
3862 [label="return 'add'; 980568"];
3863 [label="FullWidth = this.Text.Length; 980569"];
3864 [label="FullWidth 980570"];
3865 [label="this.AdjustFlagsAndWidth(trailing); 980571"];
3866 [label="return 'remove'; 980572"];
3867 [label="FullWidth = this.Text.Length; 980573"];
3868 [label="FullWidth 980574"];
3869 [label="return 'remove'; 980575"];
3870 [label="FullWidth = this.Text.Length; 980576"];
3871 [label="FullWidth 980577"];
3872 [label="this.AdjustFlagsAndWidth(leading); 980578"];
3873 [label="return 'remove'; 980579"];
3874 [label="FullWidth = this.Text.Length; 980580"];
3875 [label="FullWidth 980581"];
3876 [label="this.AdjustFlagsAndWidth(trailing); 980582"];
3877 [label="return 'remove'; 980583"];
3878 [label="FullWidth = this.Text.Length; 980584"];
3879 [label="FullWidth 980585"];
3880 [label="this.AdjustFlagsAndWidth(trailing); 980586"];
3881 [label="return 'where'; 980587"];
3882 [label="FullWidth = this.Text.Length; 980588"];
3883 [label="FullWidth 980589"];
3884 [label="return 'where'; 980590"];
3885 [label="FullWidth = this.Text.Length; 980591"];
3886 [label="FullWidth 980592"];
3887 [label="this.AdjustFlagsAndWidth(leading); 980593"];
3888 [label="return 'where'; 980594"];
3889 [label="FullWidth = this.Text.Length; 980595"];
3890 [label="FullWidth 980596"];
3891 [label="this.AdjustFlagsAndWidth(trailing); 980597"];
3892 [label="return 'where'; 980598"];
3893 [label="FullWidth = this.Text.Length; 980599"];
3894 [label="FullWidth 980600"];
3895 [label="this.AdjustFlagsAndWidth(trailing); 980601"];
3896 [label="return 'from'; 980602"];
3897 [label="FullWidth = this.Text.Length; 980603"];
3898 [label="FullWidth 980604"];
3899 [label="return 'from'; 980605"];
3900 [label="FullWidth = this.Text.Length; 980606"];
3901 [label="FullWidth 980607"];
3902 [label="this.AdjustFlagsAndWidth(leading); 980608"];
3903 [label="return 'from'; 980609"];
3904 [label="FullWidth = this.Text.Length; 980610"];
3905 [label="FullWidth 980611"];
3906 [label="this.AdjustFlagsAndWidth(trailing); 980612"];
3907 [label="return 'from'; 980613"];
3908 [label="FullWidth = this.Text.Length; 980614"];
3909 [label="FullWidth 980615"];
3910 [label="this.AdjustFlagsAndWidth(trailing); 980616"];
3911 [label="return 'group'; 980617"];
3912 [label="FullWidth = this.Text.Length; 980618"];
3913 [label="FullWidth 980619"];
3914 [label="return 'group'; 980620"];
3915 [label="FullWidth = this.Text.Length; 980621"];
3916 [label="FullWidth 980622"];
3917 [label="this.AdjustFlagsAndWidth(leading); 980623"];
3918 [label="return 'group'; 980624"];
3919 [label="FullWidth = this.Text.Length; 980625"];
3920 [label="FullWidth 980626"];
3921 [label="this.AdjustFlagsAndWidth(trailing); 980627"];
3922 [label="return 'group'; 980628"];
3923 [label="FullWidth = this.Text.Length; 980629"];
3924 [label="FullWidth 980630"];
3925 [label="this.AdjustFlagsAndWidth(trailing); 980631"];
3926 [label="return 'join'; 980632"];
3927 [label="FullWidth = this.Text.Length; 980633"];
3928 [label="FullWidth 980634"];
3929 [label="return 'join'; 980635"];
3930 [label="FullWidth = this.Text.Length; 980636"];
3931 [label="FullWidth 980637"];
3932 [label="this.AdjustFlagsAndWidth(leading); 980638"];
3933 [label="return 'join'; 980639"];
3934 [label="FullWidth = this.Text.Length; 980640"];
3935 [label="FullWidth 980641"];
3936 [label="this.AdjustFlagsAndWidth(trailing); 980642"];
3937 [label="return 'join'; 980643"];
3938 [label="FullWidth = this.Text.Length; 980644"];
3939 [label="FullWidth 980645"];
3940 [label="this.AdjustFlagsAndWidth(trailing); 980646"];
3941 [label="return 'into'; 980647"];
3942 [label="FullWidth = this.Text.Length; 980648"];
3943 [label="FullWidth 980649"];
3944 [label="return 'into'; 980650"];
3945 [label="FullWidth = this.Text.Length; 980651"];
3946 [label="FullWidth 980652"];
3947 [label="this.AdjustFlagsAndWidth(leading); 980653"];
3948 [label="return 'into'; 980654"];
3949 [label="FullWidth = this.Text.Length; 980655"];
3950 [label="FullWidth 980656"];
3951 [label="this.AdjustFlagsAndWidth(trailing); 980657"];
3952 [label="return 'into'; 980658"];
3953 [label="FullWidth = this.Text.Length; 980659"];
3954 [label="FullWidth 980660"];
3955 [label="this.AdjustFlagsAndWidth(trailing); 980661"];
3956 [label="return 'let'; 980662"];
3957 [label="FullWidth = this.Text.Length; 980663"];
3958 [label="FullWidth 980664"];
3959 [label="return 'let'; 980665"];
3960 [label="FullWidth = this.Text.Length; 980666"];
3961 [label="FullWidth 980667"];
3962 [label="this.AdjustFlagsAndWidth(leading); 980668"];
3963 [label="return 'let'; 980669"];
3964 [label="FullWidth = this.Text.Length; 980670"];
3965 [label="FullWidth 980671"];
3966 [label="this.AdjustFlagsAndWidth(trailing); 980672"];
3967 [label="return 'let'; 980673"];
3968 [label="FullWidth = this.Text.Length; 980674"];
3969 [label="FullWidth 980675"];
3970 [label="this.AdjustFlagsAndWidth(trailing); 980676"];
3971 [label="return 'by'; 980677"];
3972 [label="FullWidth = this.Text.Length; 980678"];
3973 [label="FullWidth 980679"];
3974 [label="return 'by'; 980680"];
3975 [label="FullWidth = this.Text.Length; 980681"];
3976 [label="FullWidth 980682"];
3977 [label="this.AdjustFlagsAndWidth(leading); 980683"];
3978 [label="return 'by'; 980684"];
3979 [label="FullWidth = this.Text.Length; 980685"];
3980 [label="FullWidth 980686"];
3981 [label="this.AdjustFlagsAndWidth(trailing); 980687"];
3982 [label="return 'by'; 980688"];
3983 [label="FullWidth = this.Text.Length; 980689"];
3984 [label="FullWidth 980690"];
3985 [label="this.AdjustFlagsAndWidth(trailing); 980691"];
3986 [label="return 'select'; 980692"];
3987 [label="FullWidth = this.Text.Length; 980693"];
3988 [label="FullWidth 980694"];
3989 [label="return 'select'; 980695"];
3990 [label="FullWidth = this.Text.Length; 980696"];
3991 [label="FullWidth 980697"];
3992 [label="this.AdjustFlagsAndWidth(leading); 980698"];
3993 [label="return 'select'; 980699"];
3994 [label="FullWidth = this.Text.Length; 980700"];
3995 [label="FullWidth 980701"];
3996 [label="this.AdjustFlagsAndWidth(trailing); 980702"];
3997 [label="return 'select'; 980703"];
3998 [label="FullWidth = this.Text.Length; 980704"];
3999 [label="FullWidth 980705"];
4000 [label="this.AdjustFlagsAndWidth(trailing); 980706"];
4001 [label="return 'orderby'; 980707"];
4002 [label="FullWidth = this.Text.Length; 980708"];
4003 [label="FullWidth 980709"];
4004 [label="return 'orderby'; 980710"];
4005 [label="FullWidth = this.Text.Length; 980711"];
4006 [label="FullWidth 980712"];
4007 [label="this.AdjustFlagsAndWidth(leading); 980713"];
4008 [label="return 'orderby'; 980714"];
4009 [label="FullWidth = this.Text.Length; 980715"];
4010 [label="FullWidth 980716"];
4011 [label="this.AdjustFlagsAndWidth(trailing); 980717"];
4012 [label="return 'orderby'; 980718"];
4013 [label="FullWidth = this.Text.Length; 980719"];
4014 [label="FullWidth 980720"];
4015 [label="this.AdjustFlagsAndWidth(trailing); 980721"];
4016 [label="return 'on'; 980722"];
4017 [label="FullWidth = this.Text.Length; 980723"];
4018 [label="FullWidth 980724"];
4019 [label="return 'on'; 980725"];
4020 [label="FullWidth = this.Text.Length; 980726"];
4021 [label="FullWidth 980727"];
4022 [label="this.AdjustFlagsAndWidth(leading); 980728"];
4023 [label="return 'on'; 980729"];
4024 [label="FullWidth = this.Text.Length; 980730"];
4025 [label="FullWidth 980731"];
4026 [label="this.AdjustFlagsAndWidth(trailing); 980732"];
4027 [label="return 'on'; 980733"];
4028 [label="FullWidth = this.Text.Length; 980734"];
4029 [label="FullWidth 980735"];
4030 [label="this.AdjustFlagsAndWidth(trailing); 980736"];
4031 [label="return 'equals'; 980737"];
4032 [label="FullWidth = this.Text.Length; 980738"];
4033 [label="FullWidth 980739"];
4034 [label="return 'equals'; 980740"];
4035 [label="FullWidth = this.Text.Length; 980741"];
4036 [label="FullWidth 980742"];
4037 [label="this.AdjustFlagsAndWidth(leading); 980743"];
4038 [label="return 'equals'; 980744"];
4039 [label="FullWidth = this.Text.Length; 980745"];
4040 [label="FullWidth 980746"];
4041 [label="this.AdjustFlagsAndWidth(trailing); 980747"];
4042 [label="return 'equals'; 980748"];
4043 [label="FullWidth = this.Text.Length; 980749"];
4044 [label="FullWidth 980750"];
4045 [label="this.AdjustFlagsAndWidth(trailing); 980751"];
4046 [label="return 'ascending'; 980752"];
4047 [label="FullWidth = this.Text.Length; 980753"];
4048 [label="FullWidth 980754"];
4049 [label="return 'ascending'; 980755"];
4050 [label="FullWidth = this.Text.Length; 980756"];
4051 [label="FullWidth 980757"];
4052 [label="this.AdjustFlagsAndWidth(leading); 980758"];
4053 [label="return 'ascending'; 980759"];
4054 [label="FullWidth = this.Text.Length; 980760"];
4055 [label="FullWidth 980761"];
4056 [label="this.AdjustFlagsAndWidth(trailing); 980762"];
4057 [label="return 'ascending'; 980763"];
4058 [label="FullWidth = this.Text.Length; 980764"];
4059 [label="FullWidth 980765"];
4060 [label="this.AdjustFlagsAndWidth(trailing); 980766"];
4061 [label="return 'descending'; 980767"];
4062 [label="FullWidth = this.Text.Length; 980768"];
4063 [label="FullWidth 980769"];
4064 [label="return 'descending'; 980770"];
4065 [label="FullWidth = this.Text.Length; 980771"];
4066 [label="FullWidth 980772"];
4067 [label="this.AdjustFlagsAndWidth(leading); 980773"];
4068 [label="return 'descending'; 980774"];
4069 [label="FullWidth = this.Text.Length; 980775"];
4070 [label="FullWidth 980776"];
4071 [label="this.AdjustFlagsAndWidth(trailing); 980777"];
4072 [label="return 'descending'; 980778"];
4073 [label="FullWidth = this.Text.Length; 980779"];
4074 [label="FullWidth 980780"];
4075 [label="this.AdjustFlagsAndWidth(trailing); 980781"];
4076 [label="return 'nameof'; 980782"];
4077 [label="FullWidth = this.Text.Length; 980783"];
4078 [label="FullWidth 980784"];
4079 [label="return 'nameof'; 980785"];
4080 [label="FullWidth = this.Text.Length; 980786"];
4081 [label="FullWidth 980787"];
4082 [label="this.AdjustFlagsAndWidth(leading); 980788"];
4083 [label="return 'nameof'; 980789"];
4084 [label="FullWidth = this.Text.Length; 980790"];
4085 [label="FullWidth 980791"];
4086 [label="this.AdjustFlagsAndWidth(trailing); 980792"];
4087 [label="return 'nameof'; 980793"];
4088 [label="FullWidth = this.Text.Length; 980794"];
4089 [label="FullWidth 980795"];
4090 [label="this.AdjustFlagsAndWidth(trailing); 980796"];
4091 [label="return 'async'; 980797"];
4092 [label="FullWidth = this.Text.Length; 980798"];
4093 [label="FullWidth 980799"];
4094 [label="return 'async'; 980800"];
4095 [label="FullWidth = this.Text.Length; 980801"];
4096 [label="FullWidth 980802"];
4097 [label="this.AdjustFlagsAndWidth(leading); 980803"];
4098 [label="return 'async'; 980804"];
4099 [label="FullWidth = this.Text.Length; 980805"];
4100 [label="FullWidth 980806"];
4101 [label="this.AdjustFlagsAndWidth(trailing); 980807"];
4102 [label="return 'async'; 980808"];
4103 [label="FullWidth = this.Text.Length; 980809"];
4104 [label="FullWidth 980810"];
4105 [label="this.AdjustFlagsAndWidth(trailing); 980811"];
4106 [label="return 'await'; 980812"];
4107 [label="FullWidth = this.Text.Length; 980813"];
4108 [label="FullWidth 980814"];
4109 [label="return 'await'; 980815"];
4110 [label="FullWidth = this.Text.Length; 980816"];
4111 [label="FullWidth 980817"];
4112 [label="this.AdjustFlagsAndWidth(leading); 980818"];
4113 [label="return 'await'; 980819"];
4114 [label="FullWidth = this.Text.Length; 980820"];
4115 [label="FullWidth 980821"];
4116 [label="this.AdjustFlagsAndWidth(trailing); 980822"];
4117 [label="return 'await'; 980823"];
4118 [label="FullWidth = this.Text.Length; 980824"];
4119 [label="FullWidth 980825"];
4120 [label="this.AdjustFlagsAndWidth(trailing); 980826"];
4121 [label="return 'when'; 980827"];
4122 [label="FullWidth = this.Text.Length; 980828"];
4123 [label="FullWidth 980829"];
4124 [label="return 'when'; 980830"];
4125 [label="FullWidth = this.Text.Length; 980831"];
4126 [label="FullWidth 980832"];
4127 [label="this.AdjustFlagsAndWidth(leading); 980833"];
4128 [label="return 'when'; 980834"];
4129 [label="FullWidth = this.Text.Length; 980835"];
4130 [label="FullWidth 980836"];
4131 [label="this.AdjustFlagsAndWidth(trailing); 980837"];
4132 [label="return 'when'; 980838"];
4133 [label="FullWidth = this.Text.Length; 980839"];
4134 [label="FullWidth 980840"];
4135 [label="this.AdjustFlagsAndWidth(trailing); 980841"];
4136 [label="return 'or'; 980842"];
4137 [label="FullWidth = this.Text.Length; 980843"];
4138 [label="FullWidth 980844"];
4139 [label="return 'or'; 980845"];
4140 [label="FullWidth = this.Text.Length; 980846"];
4141 [label="FullWidth 980847"];
4142 [label="this.AdjustFlagsAndWidth(leading); 980848"];
4143 [label="return 'or'; 980849"];
4144 [label="FullWidth = this.Text.Length; 980850"];
4145 [label="FullWidth 980851"];
4146 [label="this.AdjustFlagsAndWidth(trailing); 980852"];
4147 [label="return 'or'; 980853"];
4148 [label="FullWidth = this.Text.Length; 980854"];
4149 [label="FullWidth 980855"];
4150 [label="this.AdjustFlagsAndWidth(trailing); 980856"];
4151 [label="return 'and'; 980857"];
4152 [label="FullWidth = this.Text.Length; 980858"];
4153 [label="FullWidth 980859"];
4154 [label="return 'and'; 980860"];
4155 [label="FullWidth = this.Text.Length; 980861"];
4156 [label="FullWidth 980862"];
4157 [label="this.AdjustFlagsAndWidth(leading); 980863"];
4158 [label="return 'and'; 980864"];
4159 [label="FullWidth = this.Text.Length; 980865"];
4160 [label="FullWidth 980866"];
4161 [label="this.AdjustFlagsAndWidth(trailing); 980867"];
4162 [label="return 'and'; 980868"];
4163 [label="FullWidth = this.Text.Length; 980869"];
4164 [label="FullWidth 980870"];
4165 [label="this.AdjustFlagsAndWidth(trailing); 980871"];
4166 [label="return 'not'; 980872"];
4167 [label="FullWidth = this.Text.Length; 980873"];
4168 [label="FullWidth 980874"];
4169 [label="return 'not'; 980875"];
4170 [label="FullWidth = this.Text.Length; 980876"];
4171 [label="FullWidth 980877"];
4172 [label="this.AdjustFlagsAndWidth(leading); 980878"];
4173 [label="return 'not'; 980879"];
4174 [label="FullWidth = this.Text.Length; 980880"];
4175 [label="FullWidth 980881"];
4176 [label="this.AdjustFlagsAndWidth(trailing); 980882"];
4177 [label="return 'not'; 980883"];
4178 [label="FullWidth = this.Text.Length; 980884"];
4179 [label="FullWidth 980885"];
4180 [label="this.AdjustFlagsAndWidth(trailing); 980886"];
4181 [label="return 'data'; 980887"];
4182 [label="FullWidth = this.Text.Length; 980888"];
4183 [label="FullWidth 980889"];
4184 [label="return 'data'; 980890"];
4185 [label="FullWidth = this.Text.Length; 980891"];
4186 [label="FullWidth 980892"];
4187 [label="this.AdjustFlagsAndWidth(leading); 980893"];
4188 [label="return 'data'; 980894"];
4189 [label="FullWidth = this.Text.Length; 980895"];
4190 [label="FullWidth 980896"];
4191 [label="this.AdjustFlagsAndWidth(trailing); 980897"];
4192 [label="return 'data'; 980898"];
4193 [label="FullWidth = this.Text.Length; 980899"];
4194 [label="FullWidth 980900"];
4195 [label="this.AdjustFlagsAndWidth(trailing); 980901"];
4196 [label="return 'with'; 980902"];
4197 [label="FullWidth = this.Text.Length; 980903"];
4198 [label="FullWidth 980904"];
4199 [label="return 'with'; 980905"];
4200 [label="FullWidth = this.Text.Length; 980906"];
4201 [label="FullWidth 980907"];
4202 [label="this.AdjustFlagsAndWidth(leading); 980908"];
4203 [label="return 'with'; 980909"];
4204 [label="FullWidth = this.Text.Length; 980910"];
4205 [label="FullWidth 980911"];
4206 [label="this.AdjustFlagsAndWidth(trailing); 980912"];
4207 [label="return 'with'; 980913"];
4208 [label="FullWidth = this.Text.Length; 980914"];
4209 [label="FullWidth 980915"];
4210 [label="this.AdjustFlagsAndWidth(trailing); 980916"];
4211 [label="return 'init'; 980917"];
4212 [label="FullWidth = this.Text.Length; 980918"];
4213 [label="FullWidth 980919"];
4214 [label="return 'init'; 980920"];
4215 [label="FullWidth = this.Text.Length; 980921"];
4216 [label="FullWidth 980922"];
4217 [label="this.AdjustFlagsAndWidth(leading); 980923"];
4218 [label="return 'init'; 980924"];
4219 [label="FullWidth = this.Text.Length; 980925"];
4220 [label="FullWidth 980926"];
4221 [label="this.AdjustFlagsAndWidth(trailing); 980927"];
4222 [label="return 'init'; 980928"];
4223 [label="FullWidth = this.Text.Length; 980929"];
4224 [label="FullWidth 980930"];
4225 [label="this.AdjustFlagsAndWidth(trailing); 980931"];
4226 [label="return 'record'; 980932"];
4227 [label="FullWidth = this.Text.Length; 980933"];
4228 [label="FullWidth 980934"];
4229 [label="return 'record'; 980935"];
4230 [label="FullWidth = this.Text.Length; 980936"];
4231 [label="FullWidth 980937"];
4232 [label="this.AdjustFlagsAndWidth(leading); 980938"];
4233 [label="return 'record'; 980939"];
4234 [label="FullWidth = this.Text.Length; 980940"];
4235 [label="FullWidth 980941"];
4236 [label="this.AdjustFlagsAndWidth(trailing); 980942"];
4237 [label="return 'record'; 980943"];
4238 [label="FullWidth = this.Text.Length; 980944"];
4239 [label="FullWidth 980945"];
4240 [label="this.AdjustFlagsAndWidth(trailing); 980946"];
4241 [label="return 'managed'; 980947"];
4242 [label="FullWidth = this.Text.Length; 980948"];
4243 [label="FullWidth 980949"];
4244 [label="return 'managed'; 980950"];
4245 [label="FullWidth = this.Text.Length; 980951"];
4246 [label="FullWidth 980952"];
4247 [label="this.AdjustFlagsAndWidth(leading); 980953"];
4248 [label="return 'managed'; 980954"];
4249 [label="FullWidth = this.Text.Length; 980955"];
4250 [label="FullWidth 980956"];
4251 [label="this.AdjustFlagsAndWidth(trailing); 980957"];
4252 [label="return 'managed'; 980958"];
4253 [label="FullWidth = this.Text.Length; 980959"];
4254 [label="FullWidth 980960"];
4255 [label="this.AdjustFlagsAndWidth(trailing); 980961"];
4256 [label="return 'unmanaged'; 980962"];
4257 [label="FullWidth = this.Text.Length; 980963"];
4258 [label="FullWidth 980964"];
4259 [label="return 'unmanaged'; 980965"];
4260 [label="FullWidth = this.Text.Length; 980966"];
4261 [label="FullWidth 980967"];
4262 [label="this.AdjustFlagsAndWidth(leading); 980968"];
4263 [label="return 'unmanaged'; 980969"];
4264 [label="FullWidth = this.Text.Length; 980970"];
4265 [label="FullWidth 980971"];
4266 [label="this.AdjustFlagsAndWidth(trailing); 980972"];
4267 [label="return 'unmanaged'; 980973"];
4268 [label="FullWidth = this.Text.Length; 980974"];
4269 [label="FullWidth 980975"];
4270 [label="this.AdjustFlagsAndWidth(trailing); 980976"];
4271 [label="return 'elif'; 980977"];
4272 [label="FullWidth = this.Text.Length; 980978"];
4273 [label="FullWidth 980979"];
4274 [label="return 'elif'; 980980"];
4275 [label="FullWidth = this.Text.Length; 980981"];
4276 [label="FullWidth 980982"];
4277 [label="this.AdjustFlagsAndWidth(leading); 980983"];
4278 [label="return 'elif'; 980984"];
4279 [label="FullWidth = this.Text.Length; 980985"];
4280 [label="FullWidth 980986"];
4281 [label="this.AdjustFlagsAndWidth(trailing); 980987"];
4282 [label="return 'elif'; 980988"];
4283 [label="FullWidth = this.Text.Length; 980989"];
4284 [label="FullWidth 980990"];
4285 [label="this.AdjustFlagsAndWidth(trailing); 980991"];
4286 [label="return 'endif'; 980992"];
4287 [label="FullWidth = this.Text.Length; 980993"];
4288 [label="FullWidth 980994"];
4289 [label="return 'endif'; 980995"];
4290 [label="FullWidth = this.Text.Length; 980996"];
4291 [label="FullWidth 980997"];
4292 [label="this.AdjustFlagsAndWidth(leading); 980998"];
4293 [label="return 'endif'; 980999"];
4294 [label="FullWidth = this.Text.Length; 981000"];
4295 [label="FullWidth 981001"];
4296 [label="this.AdjustFlagsAndWidth(trailing); 981002"];
4297 [label="return 'endif'; 981003"];
4298 [label="FullWidth = this.Text.Length; 981004"];
4299 [label="FullWidth 981005"];
4300 [label="this.AdjustFlagsAndWidth(trailing); 981006"];
4301 [label="return 'region'; 981007"];
4302 [label="FullWidth = this.Text.Length; 981008"];
4303 [label="FullWidth 981009"];
4304 [label="return 'region'; 981010"];
4305 [label="FullWidth = this.Text.Length; 981011"];
4306 [label="FullWidth 981012"];
4307 [label="this.AdjustFlagsAndWidth(leading); 981013"];
4308 [label="return 'region'; 981014"];
4309 [label="FullWidth = this.Text.Length; 981015"];
4310 [label="FullWidth 981016"];
4311 [label="this.AdjustFlagsAndWidth(trailing); 981017"];
4312 [label="return 'region'; 981018"];
4313 [label="FullWidth = this.Text.Length; 981019"];
4314 [label="FullWidth 981020"];
4315 [label="this.AdjustFlagsAndWidth(trailing); 981021"];
4316 [label="return 'endregion'; 981022"];
4317 [label="FullWidth = this.Text.Length; 981023"];
4318 [label="FullWidth 981024"];
4319 [label="return 'endregion'; 981025"];
4320 [label="FullWidth = this.Text.Length; 981026"];
4321 [label="FullWidth 981027"];
4322 [label="this.AdjustFlagsAndWidth(leading); 981028"];
4323 [label="return 'endregion'; 981029"];
4324 [label="FullWidth = this.Text.Length; 981030"];
4325 [label="FullWidth 981031"];
4326 [label="this.AdjustFlagsAndWidth(trailing); 981032"];
4327 [label="return 'endregion'; 981033"];
4328 [label="FullWidth = this.Text.Length; 981034"];
4329 [label="FullWidth 981035"];
4330 [label="this.AdjustFlagsAndWidth(trailing); 981036"];
4331 [label="return 'define'; 981037"];
4332 [label="FullWidth = this.Text.Length; 981038"];
4333 [label="FullWidth 981039"];
4334 [label="return 'define'; 981040"];
4335 [label="FullWidth = this.Text.Length; 981041"];
4336 [label="FullWidth 981042"];
4337 [label="this.AdjustFlagsAndWidth(leading); 981043"];
4338 [label="return 'define'; 981044"];
4339 [label="FullWidth = this.Text.Length; 981045"];
4340 [label="FullWidth 981046"];
4341 [label="this.AdjustFlagsAndWidth(trailing); 981047"];
4342 [label="return 'define'; 981048"];
4343 [label="FullWidth = this.Text.Length; 981049"];
4344 [label="FullWidth 981050"];
4345 [label="this.AdjustFlagsAndWidth(trailing); 981051"];
4346 [label="return 'undef'; 981052"];
4347 [label="FullWidth = this.Text.Length; 981053"];
4348 [label="FullWidth 981054"];
4349 [label="return 'undef'; 981055"];
4350 [label="FullWidth = this.Text.Length; 981056"];
4351 [label="FullWidth 981057"];
4352 [label="this.AdjustFlagsAndWidth(leading); 981058"];
4353 [label="return 'undef'; 981059"];
4354 [label="FullWidth = this.Text.Length; 981060"];
4355 [label="FullWidth 981061"];
4356 [label="this.AdjustFlagsAndWidth(trailing); 981062"];
4357 [label="return 'undef'; 981063"];
4358 [label="FullWidth = this.Text.Length; 981064"];
4359 [label="FullWidth 981065"];
4360 [label="this.AdjustFlagsAndWidth(trailing); 981066"];
4361 [label="return 'warning'; 981067"];
4362 [label="FullWidth = this.Text.Length; 981068"];
4363 [label="FullWidth 981069"];
4364 [label="return 'warning'; 981070"];
4365 [label="FullWidth = this.Text.Length; 981071"];
4366 [label="FullWidth 981072"];
4367 [label="this.AdjustFlagsAndWidth(leading); 981073"];
4368 [label="return 'warning'; 981074"];
4369 [label="FullWidth = this.Text.Length; 981075"];
4370 [label="FullWidth 981076"];
4371 [label="this.AdjustFlagsAndWidth(trailing); 981077"];
4372 [label="return 'warning'; 981078"];
4373 [label="FullWidth = this.Text.Length; 981079"];
4374 [label="FullWidth 981080"];
4375 [label="this.AdjustFlagsAndWidth(trailing); 981081"];
4376 [label="return 'error'; 981082"];
4377 [label="FullWidth = this.Text.Length; 981083"];
4378 [label="FullWidth 981084"];
4379 [label="return 'error'; 981085"];
4380 [label="FullWidth = this.Text.Length; 981086"];
4381 [label="FullWidth 981087"];
4382 [label="this.AdjustFlagsAndWidth(leading); 981088"];
4383 [label="return 'error'; 981089"];
4384 [label="FullWidth = this.Text.Length; 981090"];
4385 [label="FullWidth 981091"];
4386 [label="this.AdjustFlagsAndWidth(trailing); 981092"];
4387 [label="return 'error'; 981093"];
4388 [label="FullWidth = this.Text.Length; 981094"];
4389 [label="FullWidth 981095"];
4390 [label="this.AdjustFlagsAndWidth(trailing); 981096"];
4391 [label="return 'line'; 981097"];
4392 [label="FullWidth = this.Text.Length; 981098"];
4393 [label="FullWidth 981099"];
4394 [label="return 'line'; 981100"];
4395 [label="FullWidth = this.Text.Length; 981101"];
4396 [label="FullWidth 981102"];
4397 [label="this.AdjustFlagsAndWidth(leading); 981103"];
4398 [label="return 'line'; 981104"];
4399 [label="FullWidth = this.Text.Length; 981105"];
4400 [label="FullWidth 981106"];
4401 [label="this.AdjustFlagsAndWidth(trailing); 981107"];
4402 [label="return 'line'; 981108"];
4403 [label="FullWidth = this.Text.Length; 981109"];
4404 [label="FullWidth 981110"];
4405 [label="this.AdjustFlagsAndWidth(trailing); 981111"];
4406 [label="return 'pragma'; 981112"];
4407 [label="FullWidth = this.Text.Length; 981113"];
4408 [label="FullWidth 981114"];
4409 [label="return 'pragma'; 981115"];
4410 [label="FullWidth = this.Text.Length; 981116"];
4411 [label="FullWidth 981117"];
4412 [label="this.AdjustFlagsAndWidth(leading); 981118"];
4413 [label="return 'pragma'; 981119"];
4414 [label="FullWidth = this.Text.Length; 981120"];
4415 [label="FullWidth 981121"];
4416 [label="this.AdjustFlagsAndWidth(trailing); 981122"];
4417 [label="return 'pragma'; 981123"];
4418 [label="FullWidth = this.Text.Length; 981124"];
4419 [label="FullWidth 981125"];
4420 [label="this.AdjustFlagsAndWidth(trailing); 981126"];
4421 [label="return 'hidden'; 981127"];
4422 [label="FullWidth = this.Text.Length; 981128"];
4423 [label="FullWidth 981129"];
4424 [label="return 'hidden'; 981130"];
4425 [label="FullWidth = this.Text.Length; 981131"];
4426 [label="FullWidth 981132"];
4427 [label="this.AdjustFlagsAndWidth(leading); 981133"];
4428 [label="return 'hidden'; 981134"];
4429 [label="FullWidth = this.Text.Length; 981135"];
4430 [label="FullWidth 981136"];
4431 [label="this.AdjustFlagsAndWidth(trailing); 981137"];
4432 [label="return 'hidden'; 981138"];
4433 [label="FullWidth = this.Text.Length; 981139"];
4434 [label="FullWidth 981140"];
4435 [label="this.AdjustFlagsAndWidth(trailing); 981141"];
4436 [label="return 'checksum'; 981142"];
4437 [label="FullWidth = this.Text.Length; 981143"];
4438 [label="FullWidth 981144"];
4439 [label="return 'checksum'; 981145"];
4440 [label="FullWidth = this.Text.Length; 981146"];
4441 [label="FullWidth 981147"];
4442 [label="this.AdjustFlagsAndWidth(leading); 981148"];
4443 [label="return 'checksum'; 981149"];
4444 [label="FullWidth = this.Text.Length; 981150"];
4445 [label="FullWidth 981151"];
4446 [label="this.AdjustFlagsAndWidth(trailing); 981152"];
4447 [label="return 'checksum'; 981153"];
4448 [label="FullWidth = this.Text.Length; 981154"];
4449 [label="FullWidth 981155"];
4450 [label="this.AdjustFlagsAndWidth(trailing); 981156"];
4451 [label="return 'disable'; 981157"];
4452 [label="FullWidth = this.Text.Length; 981158"];
4453 [label="FullWidth 981159"];
4454 [label="return 'disable'; 981160"];
4455 [label="FullWidth = this.Text.Length; 981161"];
4456 [label="FullWidth 981162"];
4457 [label="this.AdjustFlagsAndWidth(leading); 981163"];
4458 [label="return 'disable'; 981164"];
4459 [label="FullWidth = this.Text.Length; 981165"];
4460 [label="FullWidth 981166"];
4461 [label="this.AdjustFlagsAndWidth(trailing); 981167"];
4462 [label="return 'disable'; 981168"];
4463 [label="FullWidth = this.Text.Length; 981169"];
4464 [label="FullWidth 981170"];
4465 [label="this.AdjustFlagsAndWidth(trailing); 981171"];
4466 [label="return 'restore'; 981172"];
4467 [label="FullWidth = this.Text.Length; 981173"];
4468 [label="FullWidth 981174"];
4469 [label="return 'restore'; 981175"];
4470 [label="FullWidth = this.Text.Length; 981176"];
4471 [label="FullWidth 981177"];
4472 [label="this.AdjustFlagsAndWidth(leading); 981178"];
4473 [label="return 'restore'; 981179"];
4474 [label="FullWidth = this.Text.Length; 981180"];
4475 [label="FullWidth 981181"];
4476 [label="this.AdjustFlagsAndWidth(trailing); 981182"];
4477 [label="return 'restore'; 981183"];
4478 [label="FullWidth = this.Text.Length; 981184"];
4479 [label="FullWidth 981185"];
4480 [label="this.AdjustFlagsAndWidth(trailing); 981186"];
4481 [label="return 'r'; 981187"];
4482 [label="FullWidth = this.Text.Length; 981188"];
4483 [label="FullWidth 981189"];
4484 [label="return 'r'; 981190"];
4485 [label="FullWidth = this.Text.Length; 981191"];
4486 [label="FullWidth 981192"];
4487 [label="this.AdjustFlagsAndWidth(leading); 981193"];
4488 [label="return 'r'; 981194"];
4489 [label="FullWidth = this.Text.Length; 981195"];
4490 [label="FullWidth 981196"];
4491 [label="this.AdjustFlagsAndWidth(trailing); 981197"];
4492 [label="return 'r'; 981198"];
4493 [label="FullWidth = this.Text.Length; 981199"];
4494 [label="FullWidth 981200"];
4495 [label="this.AdjustFlagsAndWidth(trailing); 981201"];
4496 [label="return '$\\''; 981202"];
4497 [label="FullWidth = this.Text.Length; 981203"];
4498 [label="FullWidth 981204"];
4499 [label="return '$\\''; 981205"];
4500 [label="FullWidth = this.Text.Length; 981206"];
4501 [label="FullWidth 981207"];
4502 [label="this.AdjustFlagsAndWidth(leading); 981208"];
4503 [label="return '$\\''; 981209"];
4504 [label="FullWidth = this.Text.Length; 981210"];
4505 [label="FullWidth 981211"];
4506 [label="this.AdjustFlagsAndWidth(trailing); 981212"];
4507 [label="return '$\\''; 981213"];
4508 [label="FullWidth = this.Text.Length; 981214"];
4509 [label="FullWidth 981215"];
4510 [label="this.AdjustFlagsAndWidth(trailing); 981216"];
4511 [label="return '\\''; 981217"];
4512 [label="FullWidth = this.Text.Length; 981218"];
4513 [label="FullWidth 981219"];
4514 [label="return '\\''; 981220"];
4515 [label="FullWidth = this.Text.Length; 981221"];
4516 [label="FullWidth 981222"];
4517 [label="this.AdjustFlagsAndWidth(leading); 981223"];
4518 [label="return '\\''; 981224"];
4519 [label="FullWidth = this.Text.Length; 981225"];
4520 [label="FullWidth 981226"];
4521 [label="this.AdjustFlagsAndWidth(trailing); 981227"];
4522 [label="return '\\''; 981228"];
4523 [label="FullWidth = this.Text.Length; 981229"];
4524 [label="FullWidth 981230"];
4525 [label="this.AdjustFlagsAndWidth(trailing); 981231"];
4526 [label="return '$@\\''; 981232"];
4527 [label="FullWidth = this.Text.Length; 981233"];
4528 [label="FullWidth 981234"];
4529 [label="return '$@\\''; 981235"];
4530 [label="FullWidth = this.Text.Length; 981236"];
4531 [label="FullWidth 981237"];
4532 [label="this.AdjustFlagsAndWidth(leading); 981238"];
4533 [label="return '$@\\''; 981239"];
4534 [label="FullWidth = this.Text.Length; 981240"];
4535 [label="FullWidth 981241"];
4536 [label="this.AdjustFlagsAndWidth(trailing); 981242"];
4537 [label="return '$@\\''; 981243"];
4538 [label="FullWidth = this.Text.Length; 981244"];
4539 [label="FullWidth 981245"];
4540 [label="this.AdjustFlagsAndWidth(trailing); 981246"];
4541 [label="return 'load'; 981247"];
4542 [label="FullWidth = this.Text.Length; 981248"];
4543 [label="FullWidth 981249"];
4544 [label="return 'load'; 981250"];
4545 [label="FullWidth = this.Text.Length; 981251"];
4546 [label="FullWidth 981252"];
4547 [label="this.AdjustFlagsAndWidth(leading); 981253"];
4548 [label="return 'load'; 981254"];
4549 [label="FullWidth = this.Text.Length; 981255"];
4550 [label="FullWidth 981256"];
4551 [label="this.AdjustFlagsAndWidth(trailing); 981257"];
4552 [label="return 'load'; 981258"];
4553 [label="FullWidth = this.Text.Length; 981259"];
4554 [label="FullWidth 981260"];
4555 [label="this.AdjustFlagsAndWidth(trailing); 981261"];
4556 [label="return 'nullable'; 981262"];
4557 [label="FullWidth = this.Text.Length; 981263"];
4558 [label="FullWidth 981264"];
4559 [label="return 'nullable'; 981265"];
4560 [label="FullWidth = this.Text.Length; 981266"];
4561 [label="FullWidth 981267"];
4562 [label="this.AdjustFlagsAndWidth(leading); 981268"];
4563 [label="return 'nullable'; 981269"];
4564 [label="FullWidth = this.Text.Length; 981270"];
4565 [label="FullWidth 981271"];
4566 [label="this.AdjustFlagsAndWidth(trailing); 981272"];
4567 [label="return 'nullable'; 981273"];
4568 [label="FullWidth = this.Text.Length; 981274"];
4569 [label="FullWidth 981275"];
4570 [label="this.AdjustFlagsAndWidth(trailing); 981276"];
4571 [label="return 'enable'; 981277"];
4572 [label="FullWidth = this.Text.Length; 981278"];
4573 [label="FullWidth 981279"];
4574 [label="return 'enable'; 981280"];
4575 [label="FullWidth = this.Text.Length; 981281"];
4576 [label="FullWidth 981282"];
4577 [label="this.AdjustFlagsAndWidth(leading); 981283"];
4578 [label="return 'enable'; 981284"];
4579 [label="FullWidth = this.Text.Length; 981285"];
4580 [label="FullWidth 981286"];
4581 [label="this.AdjustFlagsAndWidth(trailing); 981287"];
4582 [label="return 'enable'; 981288"];
4583 [label="FullWidth = this.Text.Length; 981289"];
4584 [label="FullWidth 981290"];
4585 [label="this.AdjustFlagsAndWidth(trailing); 981291"];
4586 [label="return 'warnings'; 981292"];
4587 [label="FullWidth = this.Text.Length; 981293"];
4588 [label="FullWidth 981294"];
4589 [label="return 'warnings'; 981295"];
4590 [label="FullWidth = this.Text.Length; 981296"];
4591 [label="FullWidth 981297"];
4592 [label="this.AdjustFlagsAndWidth(leading); 981298"];
4593 [label="return 'warnings'; 981299"];
4594 [label="FullWidth = this.Text.Length; 981300"];
4595 [label="FullWidth 981301"];
4596 [label="this.AdjustFlagsAndWidth(trailing); 981302"];
4597 [label="return 'warnings'; 981303"];
4598 [label="FullWidth = this.Text.Length; 981304"];
4599 [label="FullWidth 981305"];
4600 [label="this.AdjustFlagsAndWidth(trailing); 981306"];
4601 [label="return 'annotations'; 981307"];
4602 [label="FullWidth = this.Text.Length; 981308"];
4603 [label="FullWidth 981309"];
4604 [label="return 'annotations'; 981310"];
4605 [label="FullWidth = this.Text.Length; 981311"];
4606 [label="FullWidth 981312"];
4607 [label="this.AdjustFlagsAndWidth(leading); 981313"];
4608 [label="return 'annotations'; 981314"];
4609 [label="FullWidth = this.Text.Length; 981315"];
4610 [label="FullWidth 981316"];
4611 [label="this.AdjustFlagsAndWidth(trailing); 981317"];
4612 [label="return 'annotations'; 981318"];
4613 [label="FullWidth = this.Text.Length; 981319"];
4614 [label="FullWidth 981320"];
4615 [label="this.AdjustFlagsAndWidth(trailing); 981321"];
4616 [label="return 'var'; 981322"];
4617 [label="FullWidth = this.Text.Length; 981323"];
4618 [label="FullWidth 981324"];
4619 [label="return 'var'; 981325"];
4620 [label="FullWidth = this.Text.Length; 981326"];
4621 [label="FullWidth 981327"];
4622 [label="this.AdjustFlagsAndWidth(leading); 981328"];
4623 [label="return 'var'; 981329"];
4624 [label="FullWidth = this.Text.Length; 981330"];
4625 [label="FullWidth 981331"];
4626 [label="this.AdjustFlagsAndWidth(trailing); 981332"];
4627 [label="return 'var'; 981333"];
4628 [label="FullWidth = this.Text.Length; 981334"];
4629 [label="FullWidth 981335"];
4630 [label="this.AdjustFlagsAndWidth(trailing); 981336"];
4631 [label="return '_'; 981337"];
4632 [label="FullWidth = this.Text.Length; 981338"];
4633 [label="FullWidth 981339"];
4634 [label="return '_'; 981340"];
4635 [label="FullWidth = this.Text.Length; 981341"];
4636 [label="FullWidth 981342"];
4637 [label="this.AdjustFlagsAndWidth(leading); 981343"];
4638 [label="return '_'; 981344"];
4639 [label="FullWidth = this.Text.Length; 981345"];
4640 [label="FullWidth 981346"];
4641 [label="this.AdjustFlagsAndWidth(trailing); 981347"];
4642 [label="return '_'; 981348"];
4643 [label="FullWidth = this.Text.Length; 981349"];
4644 [label="FullWidth 981350"];
4645 [label="this.AdjustFlagsAndWidth(trailing); 981351"];
4646 [label="return SyntaxToken.Create(kind, leading, trailing); 981352"];
4647 [label="return SyntaxToken.Create(kind, leading, trailing); 981353"];
4648 [label="return SyntaxToken.Create(kind, leading, trailing); 981354"];
4649 [label="SyntaxToken.Create(kind, leading, trailing) 981355"];
4650 [label="param Create(SyntaxKind kind) 981356"];
4651 [label="param Create(GreenNode leading) 981357"];
4652 [label="param Create(GreenNode trailing) 981358"];
4653 [label="if (kind > LastTokenWithWellKnownText)\n            {\n                if (!SyntaxFacts.IsAnyToken(kind))\n                {\n                    throw new ArgumentException(string.Format(CSharpResources.ThisMethodCanOnlyBeUsedToCreateTokens, kind), nameof(kind));\n                }\n\n                return CreateMissing(kind, leading, trailing);\n            } 981359"];
4654 [label="if (leading == null)\n            {\n                if (trailing == null)\n                {\n                    return s_tokensWithNoTrivia[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                }\n            } 981360"];
4655 [label="if (leading == null)\n            {\n                if (trailing == null)\n                {\n                    return s_tokensWithNoTrivia[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                }\n            } 981361"];
4656 [label="if (trailing == null)\n                {\n                    return s_tokensWithNoTrivia[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                } 981362"];
4657 [label="if (trailing == null)\n                {\n                    return s_tokensWithNoTrivia[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                } 981363"];
4658 [label="return s_tokensWithNoTrivia[(int)kind].Value; 981364"];
4659 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 981365"];
4660 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 981366"];
4661 [label="return token; 981367"];
4662 [label="this.AddLexedToken(token); 981368"];
4663 [label="this.AddLexedToken(token) 981369"];
4664 [label="param AddLexedToken(SyntaxToken token) 981370"];
4665 [label="param AddLexedToken(this) 981371"];
4666 [label="Debug.Assert(token != null); 981372"];
4667 [label="Debug.Assert(token != null); 981373"];
4668 [label="if (_tokenCount >= _lexedTokens.Length)\n            {\n                this.AddLexedTokenSlot();\n            } 981374"];
4669 [label="_lexedTokens[_tokenCount].Value = token; 981375"];
4670 [label="_lexedTokens[_tokenCount].Value 981376"];
4671 [label="_tokenCount 981377"];
4672 [label="this.AddLexedToken(token); 981378"];
4673 [label="token.Kind 981379"];
4674 [label="get { return (SyntaxKind)this.RawKind; } 981380"];
4675 [label="return (SyntaxKind)this.RawKind; 981381"];
4676 [label="if (token.Kind == SyntaxKind.EndOfFileToken)\n                {\n                    break;\n                } 981382"];
4677 [label="this.PreLex(); 981383"];
4678 [label="new SyntaxListPool() 981384"];
4679 [label="_pool = new SyntaxListPool() 981385"];
4680 [label="_syntaxFactoryContext 981386"];
4681 [label="_syntaxFactory 981387"];
4682 [label="_recursionDepth 981388"];
4683 [label="_termState 981389"];
4684 [label="_isInTry 981390"];
4685 [label="_checkedTopLevelStatementsFeatureAvailability 981391"];
4686 [label="_syntaxFactoryContext = new SyntaxFactoryContext(); 981392"];
4687 [label="_syntaxFactoryContext 981393"];
4688 [label="_syntaxFactory = new ContextAwareSyntax(_syntaxFactoryContext); 981394"];
4689 [label="_syntaxFactory = new ContextAwareSyntax(_syntaxFactoryContext); 981395"];
4690 [label="_syntaxFactory 981396"];
4691 [label="using (var parser = MakeParser(lexer))\n            {\n                var node = parser.ParseCompilationUnit();\n                return (CompilationUnitSyntax)node.CreateRed();\n            } 981397"];
4692 [label="parser.ParseCompilationUnit() 981398"];
4693 [label="param ParseCompilationUnit(this) 981399"];
4694 [label="return ParseWithStackGuard(\n                ParseCompilationUnitCore,\n                () => SyntaxFactory.CompilationUnit(\n                        new SyntaxList<ExternAliasDirectiveSyntax>(),\n                        new SyntaxList<UsingDirectiveSyntax>(),\n                        new SyntaxList<AttributeListSyntax>(),\n                        new SyntaxList<MemberDeclarationSyntax>(),\n                        SyntaxFactory.Token(SyntaxKind.EndOfFileToken))); 981400"];
4695 [label="return ParseWithStackGuard(\n                ParseCompilationUnitCore,\n                () => SyntaxFactory.CompilationUnit(\n                        new SyntaxList<ExternAliasDirectiveSyntax>(),\n                        new SyntaxList<UsingDirectiveSyntax>(),\n                        new SyntaxList<AttributeListSyntax>(),\n                        new SyntaxList<MemberDeclarationSyntax>(),\n                        SyntaxFactory.Token(SyntaxKind.EndOfFileToken))); 981401"];
4696 [label="ParseWithStackGuard(\n                ParseCompilationUnitCore,\n                () => SyntaxFactory.CompilationUnit(\n                        new SyntaxList<ExternAliasDirectiveSyntax>(),\n                        new SyntaxList<UsingDirectiveSyntax>(),\n                        new SyntaxList<AttributeListSyntax>(),\n                        new SyntaxList<MemberDeclarationSyntax>(),\n                        SyntaxFactory.Token(SyntaxKind.EndOfFileToken))) 981402"];
4697 [label="param ParseWithStackGuard(Func<TNode> parseFunc) 981403"];
4698 [label="param ParseWithStackGuard(Func<TNode> createEmptyNodeFunc) 981404"];
4699 [label="param ParseWithStackGuard(this) 981405"];
4700 [label="Debug.Assert(_recursionDepth == 0); 981406"];
4701 [label="Debug.Assert(_recursionDepth == 0); 981407"];
4702 [label="return parseFunc(); 981408"];
4703 [label="return parseFunc(); 981409"];
4704 [label="param ParseCompilationUnitCore(this) 981410"];
4705 [label="SyntaxToken tmp = null; 981411"];
4706 [label="SyntaxListBuilder initialBadNodes = null; 981412"];
4707 [label="var body = new NamespaceBodyBuilder(_pool); 981413"];
4708 [label="var body = new NamespaceBodyBuilder(_pool); 981414"];
4709 [label="new NamespaceBodyBuilder(_pool) 981415"];
4710 [label="param NamespaceBodyBuilder(SyntaxListPool pool) 981416"];
4711 [label="param NamespaceBodyBuilder(this) 981417"];
4712 [label="Externs = pool.Allocate<ExternAliasDirectiveSyntax>(); 981418"];
4713 [label="Externs 981419"];
4714 [label="Usings = pool.Allocate<UsingDirectiveSyntax>(); 981420"];
4715 [label="Usings 981421"];
4716 [label="Attributes = pool.Allocate<AttributeListSyntax>(); 981422"];
4717 [label="Attributes 981423"];
4718 [label="Members = pool.Allocate<MemberDeclarationSyntax>(); 981424"];
4719 [label="Members 981425"];
4720 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 981426"];
4721 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 981427"];
4722 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 981428"];
4723 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 981429"];
4724 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 981430"];
4725 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 981431"];
4726 [label="get\n            {\n                return _syntaxFactoryContext.IsInAsync;\n            } 981432"];
4727 [label="return _syntaxFactoryContext.IsInAsync; 981433"];
4728 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 981434"];
4729 [label="this.FetchCurrentToken() 981435"];
4730 [label="param FetchCurrentToken(this) 981436"];
4731 [label="if (_tokenOffset >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 981437"];
4732 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 981438"];
4733 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 981439"];
4734 [label="return _lexedTokens[_tokenOffset]; 981440"];
4735 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 981441"];
4736 [label="_currentToken 981442"];
4737 [label="get { return (SyntaxKind)this.RawKind; } 981443"];
4738 [label="return (SyntaxKind)this.RawKind; 981444"];
4739 [label="param AddIncompleteMembers(ref SyntaxListBuilder<MemberDeclarationSyntax> incompleteMembers) 981445"];
4740 [label="param AddIncompleteMembers(ref NamespaceBodyBuilder body) 981446"];
4741 [label="if (incompleteMembers.Count > 0)\n            {\n                body.Members.AddRange(incompleteMembers);\n                incompleteMembers.Clear();\n            } 981447"];
4742 [label="if (incompleteMembers.Count > 0)\n            {\n                body.Members.AddRange(incompleteMembers);\n                incompleteMembers.Clear();\n            } 981448"];
4743 [label="var eof = this.EatToken(SyntaxKind.EndOfFileToken); 981449"];
4744 [label="this.EatToken(SyntaxKind.EndOfFileToken) 981450"];
4745 [label="param EatToken(SyntaxKind kind) 981451"];
4746 [label="param EatToken(this) 981452"];
4747 [label="Debug.Assert(SyntaxFacts.IsAnyToken(kind)); 981453"];
4748 [label="SyntaxFacts.IsAnyToken(kind) 981454"];
4749 [label="param IsAnyToken(SyntaxKind kind) 981455"];
4750 [label="if (kind >= SyntaxKind.TildeToken && kind < SyntaxKind.EndOfLineTrivia) return true; 981456"];
4751 [label="return true; 981457"];
4752 [label="this.CurrentToken 981458"];
4753 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 981459"];
4754 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 981460"];
4755 [label="var ct = this.CurrentToken; 981461"];
4756 [label="ct.Kind 981462"];
4757 [label="get { return (SyntaxKind)this.RawKind; } 981463"];
4758 [label="if (ct.Kind == kind)\n            {\n                MoveToNextToken();\n                return ct;\n            } 981464"];
4759 [label="if (ct.Kind == kind)\n            {\n                MoveToNextToken();\n                return ct;\n            } 981465"];
4760 [label="MoveToNextToken() 981466"];
4761 [label="param MoveToNextToken(this) 981467"];
4762 [label="_currentToken.GetTrailingTrivia() 981468"];
4763 [label="param GetTrailingTrivia(this) 981469"];
4764 [label="return null; 981470"];
4765 [label="_prevTokenTrailingTrivia = _currentToken.GetTrailingTrivia(); 981471"];
4766 [label="_prevTokenTrailingTrivia 981472"];
4767 [label="_currentToken = null; 981473"];
4768 [label="_currentToken 981474"];
4769 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 981475"];
4770 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 981476"];
4771 [label="_tokenOffset 981477"];
4772 [label="MoveToNextToken(); 981478"];
4773 [label="return ct; 981479"];
4774 [label="var result = _syntaxFactory.CompilationUnit(body.Externs, body.Usings, body.Attributes, body.Members, eof); 981480"];
4775 [label="var result = _syntaxFactory.CompilationUnit(body.Externs, body.Usings, body.Attributes, body.Members, eof); 981481"];
4776 [label="var result = _syntaxFactory.CompilationUnit(body.Externs, body.Usings, body.Attributes, body.Members, eof); 981482"];
4777 [label="var result = _syntaxFactory.CompilationUnit(body.Externs, body.Usings, body.Attributes, body.Members, eof); 981483"];
4778 [label="param CSharpSyntaxNode(SyntaxKind kind) 981484"];
4779 [label="param CSharpSyntaxNode(this) 981485"];
4780 [label="kind 981486"];
4781 [label="param CSharpSyntaxNode(this) 981487"];
4782 [label="param CSharpSyntaxNode(this) 981488"];
4783 [label="GreenStats.NoteGreen(this); 981489"];
4784 [label="GreenStats.NoteGreen(this); 981490"];
4785 [label="param SetFactoryContext(SyntaxFactoryContext context) 981491"];
4786 [label="param SetFactoryContext(this) 981492"];
4787 [label="if (context.IsInAsync)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInAsync;\n            } 981493"];
4788 [label="if (context.IsInQuery)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInQuery;\n            } 981494"];
4789 [label="if (initialBadNodes != null)\n                {\n                    // attach initial bad nodes as leading trivia on first token\n                    result = AddLeadingSkippedSyntax(result, initialBadNodes.ToListNode());\n                    _pool.Free(initialBadNodes);\n                } 981495"];
4790 [label="if (initialBadNodes != null)\n                {\n                    // attach initial bad nodes as leading trivia on first token\n                    result = AddLeadingSkippedSyntax(result, initialBadNodes.ToListNode());\n                    _pool.Free(initialBadNodes);\n                } 981496"];
4791 [label="return result; 981497"];
4792 [label="body.Free(_pool); 981498"];
4793 [label="body.Free(_pool) 981499"];
4794 [label="param Free(SyntaxListPool pool) 981500"];
4795 [label="param Free(this) 981501"];
4796 [label="pool.Free(Members); 981502"];
4797 [label="pool.Free(Members); 981503"];
4798 [label="pool.Free(Attributes); 981504"];
4799 [label="pool.Free(Attributes); 981505"];
4800 [label="pool.Free(Usings); 981506"];
4801 [label="pool.Free(Usings); 981507"];
4802 [label="pool.Free(Externs); 981508"];
4803 [label="pool.Free(Externs); 981509"];
4804 [label="body.Free(_pool); 981510"];
4805 [label="return parseFunc(); 981511"];
4806 [label="var node = parser.ParseCompilationUnit(); 981512"];
4807 [label="return (CompilationUnitSyntax)node.CreateRed(); 981513"];
4808 [label="return (CompilationUnitSyntax)node.CreateRed(); 981514"];
4809 [label="return (CompilationUnitSyntax)node.CreateRed(); 981515"];
4810 [label="param CSharpSyntaxNode(GreenNode green) 981516"];
4811 [label="param CSharpSyntaxNode(SyntaxNode? parent) 981517"];
4812 [label="param CSharpSyntaxNode(int position) 981518"];
4813 [label="param CSharpSyntaxNode(this) 981519"];
4814 [label="green 981520"];
4815 [label="parent 981521"];
4816 [label="position 981522"];
4817 [label="param CSharpSyntaxNode(this) 981523"];
4818 [label="param CSharpSyntaxNode(this) 981524"];
4819 [label="_node = this.CloneNodeAsRoot(SyntaxFactory.ParseCompilationUnit(string.Empty)); 981525"];
4820 [label="this.CloneNodeAsRoot(SyntaxFactory.ParseCompilationUnit(string.Empty)) 981526"];
4821 [label="param CloneNodeAsRoot(T node) 981527"];
4822 [label="param CloneNodeAsRoot(this) 981528"];
4823 [label="return CSharpSyntaxNode.CloneNodeAsRoot(node, this); 981529"];
4824 [label="return CSharpSyntaxNode.CloneNodeAsRoot(node, this); 981530"];
4825 [label="return CSharpSyntaxNode.CloneNodeAsRoot(node, this); 981531"];
4826 [label="return CSharpSyntaxNode.CloneNodeAsRoot(node, this); 981532"];
4827 [label="return CSharpSyntaxNode.CloneNodeAsRoot(node, this); 981533"];
4828 [label="param CSharpSyntaxNode(this) 981534"];
4829 [label="_node 981535"];
4830 [label="Dummy = new DummySyntaxTree() 981536"];
4831 [label="return CSharpSyntaxTree.ParseText(text, (CSharpParseOptions?)options, path, cancellationToken); 981537"];
4832 [label="return CSharpSyntaxTree.ParseText(text, (CSharpParseOptions?)options, path, cancellationToken); 981538"];
4833 [label="return CSharpSyntaxTree.ParseText(text, (CSharpParseOptions?)options, path, cancellationToken); 981539"];
4834 [label="return CSharpSyntaxTree.ParseText(text, (CSharpParseOptions?)options, path, cancellationToken); 981540"];
4835 [label="CSharpSyntaxTree.ParseText(text, (CSharpParseOptions?)options, path, cancellationToken) 981541"];
4836 [label="param ParseText(SourceText text) 981542"];
4837 [label="param ParseText(CSharpParseOptions? options = null) 981543"];
4838 [label="param ParseText(string path = '') 981544"];
4839 [label="param ParseText(CancellationToken cancellationToken = default) 981545"];
4840 [label="return ParseText(text, options, path, diagnosticOptions: null, cancellationToken); 981546"];
4841 [label="return ParseText(text, options, path, diagnosticOptions: null, cancellationToken); 981547"];
4842 [label="return ParseText(text, options, path, diagnosticOptions: null, cancellationToken); 981548"];
4843 [label="return ParseText(text, options, path, diagnosticOptions: null, cancellationToken); 981549"];
4844 [label="return ParseText(text, options, path, diagnosticOptions: null, cancellationToken); 981550"];
4845 [label="ParseText(text, options, path, diagnosticOptions: null, cancellationToken) 981551"];
4846 [label="param ParseText(SourceText text) 981552"];
4847 [label="param ParseText(CSharpParseOptions? options) 981553"];
4848 [label="param ParseText(string path) 981554"];
4849 [label="param ParseText(ImmutableDictionary<string, ReportDiagnostic>? diagnosticOptions) 981555"];
4850 [label="param ParseText(CancellationToken cancellationToken) 981556"];
4851 [label="text 981557"];
4852 [label="options 981558"];
4853 [label="path 981559"];
4854 [label="diagnosticOptions 981560"];
4855 [label="null 981561"];
4856 [label="isGeneratedCode: null 981562"];
4857 [label="cancellationToken 981563"];
4858 [label="ParseText(text, options, path, diagnosticOptions, isGeneratedCode: null, cancellationToken) 981564"];
4859 [label="param ParseText(SourceText text) 981565"];
4860 [label="param ParseText(CSharpParseOptions? options) 981566"];
4861 [label="param ParseText(string path) 981567"];
4862 [label="param ParseText(ImmutableDictionary<string, ReportDiagnostic>? diagnosticOptions) 981568"];
4863 [label="param ParseText(bool? isGeneratedCode) 981569"];
4864 [label="param ParseText(CancellationToken cancellationToken) 981570"];
4865 [label="if (text == null)\n            {\n                throw new ArgumentNullException(nameof(text));\n            } 981571"];
4866 [label="if (text == null)\n            {\n                throw new ArgumentNullException(nameof(text));\n            } 981572"];
4867 [label="options = options ?? CSharpParseOptions.Default; 981573"];
4868 [label="using var lexer = new InternalSyntax.Lexer(text, options); 981574"];
4869 [label="using var lexer = new InternalSyntax.Lexer(text, options); 981575"];
4870 [label="using var lexer = new InternalSyntax.Lexer(text, options); 981576"];
4871 [label="new InternalSyntax.Lexer(text, options) 981577"];
4872 [label="param Lexer(SourceText text) 981578"];
4873 [label="param Lexer(CSharpParseOptions options) 981579"];
4874 [label="param Lexer(bool allowPreprocessorDirectives = true) 981580"];
4875 [label="param Lexer(bool interpolationFollowedByColon = false) 981581"];
4876 [label="param Lexer(this) 981582"];
4877 [label="text 981583"];
4878 [label="param Lexer(this) 981584"];
4879 [label="param AbstractLexer(SourceText text) 981585"];
4880 [label="param AbstractLexer(this) 981586"];
4881 [label="TextWindow 981587"];
4882 [label="_errors 981588"];
4883 [label="this.TextWindow = new SlidingTextWindow(text); 981589"];
4884 [label="this.TextWindow = new SlidingTextWindow(text); 981590"];
4885 [label="new SlidingTextWindow(text) 981591"];
4886 [label="param SlidingTextWindow(SourceText text) 981592"];
4887 [label="param SlidingTextWindow(this) 981593"];
4888 [label="_text 981594"];
4889 [label="_basis 981595"];
4890 [label="_offset 981596"];
4891 [label="_textEnd 981597"];
4892 [label="_characterWindow 981598"];
4893 [label="_characterWindowCount 981599"];
4894 [label="_lexemeStart 981600"];
4895 [label="_strings 981601"];
4896 [label="_text 981602"];
4897 [label="_basis = 0; 981603"];
4898 [label="_basis 981604"];
4899 [label="_offset = 0; 981605"];
4900 [label="_offset 981606"];
4901 [label="_textEnd 981607"];
4902 [label="_strings = StringTable.GetInstance(); 981608"];
4903 [label="_strings 981609"];
4904 [label="_characterWindow = s_windowPool.Allocate(); 981610"];
4905 [label="_lexemeStart = 0; 981611"];
4906 [label="_lexemeStart 981612"];
4907 [label="this.TextWindow 981613"];
4908 [label="_options 981614"];
4909 [label="_mode 981615"];
4910 [label="_builder 981616"];
4911 [label="_identBuffer 981617"];
4912 [label="_identLen 981618"];
4913 [label="_cache 981619"];
4914 [label="_allowPreprocessorDirectives 981620"];
4915 [label="_interpolationFollowedByColon 981621"];
4916 [label="_xmlParser 981622"];
4917 [label="_badTokenCount 981623"];
4918 [label="10 981624"];
4919 [label="new SyntaxListBuilder(10) 981625"];
4920 [label="_leadingTriviaCache = new SyntaxListBuilder(10) 981626"];
4921 [label="10 981627"];
4922 [label="new SyntaxListBuilder(10) 981628"];
4923 [label="_trailingTriviaCache = new SyntaxListBuilder(10) 981629"];
4924 [label="_createWhitespaceTriviaFunction 981630"];
4925 [label="_createQuickTokenFunction 981631"];
4926 [label="Debug.Assert(options != null); 981632"];
4927 [label="Debug.Assert(options != null); 981633"];
4928 [label="_options 981634"];
4929 [label="_builder = new StringBuilder(); 981635"];
4930 [label="_builder 981636"];
4931 [label="_identBuffer = new char[32]; 981637"];
4932 [label="_identBuffer 981638"];
4933 [label="_cache = new LexerCache(); 981639"];
4934 [label="new LexerCache() 981640"];
4935 [label="param LexerCache(this) 981641"];
4936 [label="_triviaMap 981642"];
4937 [label="_tokenMap 981643"];
4938 [label="_keywordKindMap 981644"];
4939 [label="_triviaMap = TextKeyedCache<SyntaxTrivia>.GetInstance(); 981645"];
4940 [label="_triviaMap 981646"];
4941 [label="_tokenMap = TextKeyedCache<SyntaxToken>.GetInstance(); 981647"];
4942 [label="_tokenMap 981648"];
4943 [label="_cache 981649"];
4944 [label="_createQuickTokenFunction 981650"];
4945 [label="_allowPreprocessorDirectives 981651"];
4946 [label="_interpolationFollowedByColon 981652"];
4947 [label="using var parser = new InternalSyntax.LanguageParser(lexer, oldTree: null, changes: null, cancellationToken: cancellationToken); 981653"];
4948 [label="using var parser = new InternalSyntax.LanguageParser(lexer, oldTree: null, changes: null, cancellationToken: cancellationToken); 981654"];
4949 [label="using var parser = new InternalSyntax.LanguageParser(lexer, oldTree: null, changes: null, cancellationToken: cancellationToken); 981655"];
4950 [label="new InternalSyntax.LanguageParser(lexer, oldTree: null, changes: null, cancellationToken: cancellationToken) 981656"];
4951 [label="param LanguageParser(Lexer lexer) 981657"];
4952 [label="param LanguageParser(CSharp.CSharpSyntaxNode oldTree) 981658"];
4953 [label="param LanguageParser(IEnumerable<TextChangeRange> changes) 981659"];
4954 [label="param LanguageParser(LexerMode lexerMode = LexerMode.Syntax) 981660"];
4955 [label="param LanguageParser(CancellationToken cancellationToken = default(CancellationToken)) 981661"];
4956 [label="param LanguageParser(this) 981662"];
4957 [label="lexer 981663"];
4958 [label="lexerMode 981664"];
4959 [label="oldTree 981665"];
4960 [label="changes 981666"];
4961 [label="false 981667"];
4962 [label="true 981668"];
4963 [label="cancellationToken 981669"];
4964 [label="param LanguageParser(this) 981670"];
4965 [label="param SyntaxParser(Lexer lexer) 981671"];
4966 [label="param SyntaxParser(LexerMode mode) 981672"];
4967 [label="param SyntaxParser(CSharp.CSharpSyntaxNode oldTree) 981673"];
4968 [label="param SyntaxParser(IEnumerable<TextChangeRange> changes) 981674"];
4969 [label="param SyntaxParser(bool allowModeReset) 981675"];
4970 [label="param SyntaxParser(bool preLexIfNotIncremental = false) 981676"];
4971 [label="param SyntaxParser(CancellationToken cancellationToken = default(CancellationToken)) 981677"];
4972 [label="param SyntaxParser(this) 981678"];
4973 [label="lexer 981679"];
4974 [label="_isIncremental 981680"];
4975 [label="_allowModeReset 981681"];
4976 [label="_mode 981682"];
4977 [label="_currentToken 981683"];
4978 [label="_lexedTokens 981684"];
4979 [label="_prevTokenTrailingTrivia 981685"];
4980 [label="_firstToken 981686"];
4981 [label="_tokenOffset 981687"];
4982 [label="_tokenCount 981688"];
4983 [label="_resetCount 981689"];
4984 [label="_resetStart 981690"];
4985 [label="_blendedTokens 981691"];
4986 [label="this.lexer 981692"];
4987 [label="_mode 981693"];
4988 [label="_allowModeReset 981694"];
4989 [label="this.cancellationToken 981695"];
4990 [label="_currentNode = default(BlendedNode); 981696"];
4991 [label="_currentNode 981697"];
4992 [label="_isIncremental = oldTree != null; 981698"];
4993 [label="_isIncremental = oldTree != null; 981699"];
4994 [label="_isIncremental 981700"];
4995 [label="this.IsIncremental 981701"];
4996 [label="get\n            {\n                return _isIncremental;\n            } 981702"];
4997 [label="return _isIncremental; 981703"];
4998 [label="if (this.IsIncremental || allowModeReset)\n            {\n                _firstBlender = new Blender(lexer, oldTree, changes);\n                _blendedTokens = s_blendedNodesPool.Allocate();\n            }\n            else\n            {\n                _firstBlender = default(Blender);\n                _lexedTokens = new ArrayElement<SyntaxToken>[32];\n            } 981704"];
4999 [label="if (this.IsIncremental || allowModeReset)\n            {\n                _firstBlender = new Blender(lexer, oldTree, changes);\n                _blendedTokens = s_blendedNodesPool.Allocate();\n            }\n            else\n            {\n                _firstBlender = default(Blender);\n                _lexedTokens = new ArrayElement<SyntaxToken>[32];\n            } 981705"];
5000 [label="_firstBlender = default(Blender); 981706"];
5001 [label="_firstBlender 981707"];
5002 [label="_lexedTokens = new ArrayElement<SyntaxToken>[32]; 981708"];
5003 [label="_lexedTokens 981709"];
5004 [label="this.IsIncremental 981710"];
5005 [label="get\n            {\n                return _isIncremental;\n            } 981711"];
5006 [label="return _isIncremental; 981712"];
5007 [label="if (preLexIfNotIncremental && !this.IsIncremental && !cancellationToken.CanBeCanceled)\n            {\n                this.PreLex();\n            } 981713"];
5008 [label="if (preLexIfNotIncremental && !this.IsIncremental && !cancellationToken.CanBeCanceled)\n            {\n                this.PreLex();\n            } 981714"];
5009 [label="if (preLexIfNotIncremental && !this.IsIncremental && !cancellationToken.CanBeCanceled)\n            {\n                this.PreLex();\n            } 981715"];
5010 [label="this.PreLex() 981716"];
5011 [label="param PreLex(this) 981717"];
5012 [label="var size = Math.Min(4096, Math.Max(32, this.lexer.TextWindow.Text.Length / 2)); 981718"];
5013 [label="this.lexer.TextWindow.Text 981719"];
5014 [label="=> _text 981720"];
5015 [label="_text 981721"];
5016 [label="var size = Math.Min(4096, Math.Max(32, this.lexer.TextWindow.Text.Length / 2)); 981722"];
5017 [label="var size = Math.Min(4096, Math.Max(32, this.lexer.TextWindow.Text.Length / 2)); 981723"];
5018 [label="_lexedTokens = new ArrayElement<SyntaxToken>[size]; 981724"];
5019 [label="_lexedTokens 981725"];
5020 [label="var lexer = this.lexer; 981726"];
5021 [label="var mode = _mode; 981727"];
5022 [label="for (int i = 0; i < size; i++)\n            {\n                var token = lexer.Lex(mode);\n                this.AddLexedToken(token);\n                if (token.Kind == SyntaxKind.EndOfFileToken)\n                {\n                    break;\n                }\n            } 981728"];
5023 [label="var token = lexer.Lex(mode); 981729"];
5024 [label="TokensLexed++; 981730"];
5025 [label="return this.QuickScanSyntaxToken() ?? this.LexSyntaxToken(); 981731"];
5026 [label="TextWindow.Start(); 981732"];
5027 [label="TextWindow.Position 981733"];
5028 [label="get\n            {\n                return _basis + _offset;\n            } 981734"];
5029 [label="param LexSyntaxTrivia(bool afterFirstToken) 981735"];
5030 [label="param LexSyntaxTrivia(bool isTrailing) 981736"];
5031 [label="bool onlyWhitespaceOnLine = !isTrailing; 981737"];
5032 [label="this.Start(); 981738"];
5033 [label="TextWindow.PeekChar() 981739"];
5034 [label="param PeekChar(this) 981740"];
5035 [label="char ch = TextWindow.PeekChar(); 981741"];
5036 [label="if (ch == ' ')\n                {\n                    this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                    continue;\n                }\n                else if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 981742"];
5037 [label="if (ch == ' ')\n                {\n                    this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                    continue;\n                }\n                else if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 981743"];
5038 [label="if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 981744"];
5039 [label="if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    } 981745"];
5040 [label="SyntaxFacts.IsWhitespace(ch) 981746"];
5041 [label="param IsWhitespace(char ch) 981747"];
5042 [label="return ch == ' '\n                || ch == '\\t'\n                || ch == '\\v'\n                || ch == '\\f'\n                || ch == '\\u00A0' // NO-BREAK SPACE\n                                  // The native compiler, in ScanToken, recognized both the byte-order\n                                  // marker '\\uFEFF' as well as ^Z '\\u001A' as whitespace, although\n                                  // this is not to spec since neither of these are in Zs. For the\n                                  // sake of compatibility, we recognize them both here. Note: '\\uFEFF'\n                                  // also happens to be a formatting character (class Cf), which means\n                                  // that it is a legal non-initial identifier character. So it's\n                                  // especially funny, because it will be whitespace UNLESS we happen\n                                  // to be scanning an identifier or keyword, in which case it winds\n                                  // up in the identifier or keyword.\n                || ch == '\\uFEFF'\n                || ch == '\\u001A'\n                || (ch > 255 && CharUnicodeInfo.GetUnicodeCategory(ch) == UnicodeCategory.SpaceSeparator); 981748"];
5043 [label="return ch == ' '\n                || ch == '\\t'\n                || ch == '\\v'\n                || ch == '\\f'\n                || ch == '\\u00A0' // NO-BREAK SPACE\n                                  // The native compiler, in ScanToken, recognized both the byte-order\n                                  // marker '\\uFEFF' as well as ^Z '\\u001A' as whitespace, although\n                                  // this is not to spec since neither of these are in Zs. For the\n                                  // sake of compatibility, we recognize them both here. Note: '\\uFEFF'\n                                  // also happens to be a formatting character (class Cf), which means\n                                  // that it is a legal non-initial identifier character. So it's\n                                  // especially funny, because it will be whitespace UNLESS we happen\n                                  // to be scanning an identifier or keyword, in which case it winds\n                                  // up in the identifier or keyword.\n                || ch == '\\uFEFF'\n                || ch == '\\u001A'\n                || (ch > 255 && CharUnicodeInfo.GetUnicodeCategory(ch) == UnicodeCategory.SpaceSeparator); 981749"];
5044 [label="return ch == ' '\n                || ch == '\\t'\n                || ch == '\\v'\n                || ch == '\\f'\n                || ch == '\\u00A0' // NO-BREAK SPACE\n                                  // The native compiler, in ScanToken, recognized both the byte-order\n                                  // marker '\\uFEFF' as well as ^Z '\\u001A' as whitespace, although\n                                  // this is not to spec since neither of these are in Zs. For the\n                                  // sake of compatibility, we recognize them both here. Note: '\\uFEFF'\n                                  // also happens to be a formatting character (class Cf), which means\n                                  // that it is a legal non-initial identifier character. So it's\n                                  // especially funny, because it will be whitespace UNLESS we happen\n                                  // to be scanning an identifier or keyword, in which case it winds\n                                  // up in the identifier or keyword.\n                || ch == '\\uFEFF'\n                || ch == '\\u001A'\n                || (ch > 255 && CharUnicodeInfo.GetUnicodeCategory(ch) == UnicodeCategory.SpaceSeparator); 981750"];
5045 [label="if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    } 981751"];
5046 [label="SyntaxFacts.IsNewLine(ch) 981752"];
5047 [label="param IsNewLine(char ch) 981753"];
5048 [label="return ch == '\\r'\n                || ch == '\\n'\n                || ch == '\\u0085'\n                || ch == '\\u2028'\n                || ch == '\\u2029'; 981754"];
5049 [label="return ch == '\\r'\n                || ch == '\\n'\n                || ch == '\\u0085'\n                || ch == '\\u2028'\n                || ch == '\\u2029'; 981755"];
5050 [label="switch (ch)\n                {\n                    case ' ':\n                    case '\\t':       // Horizontal tab\n                    case '\\v':       // Vertical Tab\n                    case '\\f':       // Form-feed\n                    case '\\u001A':\n                        this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                        break;\n                    case '/':\n                        if ((ch = TextWindow.PeekChar(1)) == '/')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '/' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.SingleLine), ref triviaList);\n                                break;\n                            }\n\n                            // normal single line comment\n                            this.ScanToEndOfLine();\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n                        else if (ch == '*')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '*' &&\n                                TextWindow.PeekChar(3) != '*' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.Delimited), ref triviaList);\n                                break;\n                            }\n\n                            bool isTerminated;\n                            this.ScanMultiLineComment(out isTerminated);\n                            if (!isTerminated)\n                            {\n                                // The comment didn't end.  Report an error at the start point.\n                                this.AddError(ErrorCode.ERR_OpenEndedComment);\n                            }\n\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n\n                        // not trivia\n                        return;\n                    case '\\r':\n                    case '\\n':\n                        this.AddTrivia(this.ScanEndOfLine(), ref triviaList);\n                        if (isTrailing)\n                        {\n                            return;\n                        }\n\n                        onlyWhitespaceOnLine = true;\n                        break;\n                    case '#':\n                        if (_allowPreprocessorDirectives)\n                        {\n                            this.LexDirectiveAndExcludedTrivia(afterFirstToken, isTrailing || !onlyWhitespaceOnLine, ref triviaList);\n                            break;\n                        }\n                        else\n                        {\n                            return;\n                        }\n\n                    // Note: we specifically do not look for the >>>>>>> pattern as the start of\n                    // a conflict marker trivia.  That's because *technically* (albeit unlikely)\n                    // >>>>>>> could be the end of a very generic construct.  So, instead, we only\n                    // recognize >>>>>>> as we are scanning the trivia after a ======= marker \n                    // (which can never be part of legal code).\n                    // case '>':\n                    case '=':\n                    case '<':\n                        if (!isTrailing)\n                        {\n                            if (IsConflictMarkerTrivia())\n                            {\n                                this.LexConflictMarkerTrivia(ref triviaList);\n                                break;\n                            }\n                        }\n\n                        return;\n\n                    default:\n                        return;\n                } 981756"];
5051 [label="return; 981757"];
5052 [label="this.Start(); 981758"];
5053 [label="param MoreChars(this) 981759"];
5054 [label="while (current != null && current.Any())\n            {\n                switch (current.Head.Kind)\n                {\n                    case SyntaxKind.IfDirectiveTrivia:\n                    case SyntaxKind.ElifDirectiveTrivia:\n                    case SyntaxKind.ElseDirectiveTrivia:\n                    case SyntaxKind.RegionDirectiveTrivia:\n                        return current;\n                }\n\n                current = current.Tail;\n            } 981760"];
5055 [label="while (current != null && current.Any())\n            {\n                switch (current.Head.Kind)\n                {\n                    case SyntaxKind.IfDirectiveTrivia:\n                    case SyntaxKind.ElifDirectiveTrivia:\n                    case SyntaxKind.ElseDirectiveTrivia:\n                    case SyntaxKind.RegionDirectiveTrivia:\n                        return current;\n                }\n\n                current = current.Tail;\n            } 981761"];
5056 [label="var errors = this.GetErrors(GetFullWidth(leading)); 981762"];
5057 [label="GetFullWidth(leading) 981763"];
5058 [label="param GetFullWidth(SyntaxListBuilder builder) 981764"];
5059 [label="int width = 0; 981765"];
5060 [label="if (builder != null)\n            {\n                for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                }\n            } 981766"];
5061 [label="if (builder != null)\n            {\n                for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                }\n            } 981767"];
5062 [label="for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                } 981768"];
5063 [label="for (int i = 0; i < builder.Count; i++)\n                {\n                    width += builder[i].FullWidth;\n                } 981769"];
5064 [label="return width; 981770"];
5065 [label="var errors = this.GetErrors(GetFullWidth(leading)); 981771"];
5066 [label="this.GetErrors(GetFullWidth(leading)) 981772"];
5067 [label="param GetErrors(int leadingTriviaWidth) 981773"];
5068 [label="param GetErrors(this) 981774"];
5069 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 981775"];
5070 [label="if (_errors != null)\n            {\n                if (leadingTriviaWidth > 0)\n                {\n                    var array = new SyntaxDiagnosticInfo[_errors.Count];\n                    for (int i = 0; i < _errors.Count; i++)\n                    {\n                        // fixup error positioning to account for leading trivia\n                        array[i] = _errors[i].WithOffset(_errors[i].Offset + leadingTriviaWidth);\n                    }\n\n                    return array;\n                }\n                else\n                {\n                    return _errors.ToArray();\n                }\n            }\n            else\n            {\n                return null;\n            } 981776"];
5071 [label="return null; 981777"];
5072 [label="var errors = this.GetErrors(GetFullWidth(leading)); 981778"];
5073 [label="param LexSyntaxTrivia(bool afterFirstToken) 981779"];
5074 [label="char ch = TextWindow.PeekChar(); 981780"];
5075 [label="if (ch == ' ')\n                {\n                    this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                    continue;\n                }\n                else if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 981781"];
5076 [label="if (ch > 127)\n                {\n                    if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    }\n                } 981782"];
5077 [label="if (SyntaxFacts.IsWhitespace(ch))\n                    {\n                        ch = ' ';\n                    }\n                    else if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    } 981783"];
5078 [label="SyntaxFacts.IsWhitespace(ch) 981784"];
5079 [label="param IsWhitespace(char ch) 981785"];
5080 [label="return ch == ' '\n                || ch == '\\t'\n                || ch == '\\v'\n                || ch == '\\f'\n                || ch == '\\u00A0' // NO-BREAK SPACE\n                                  // The native compiler, in ScanToken, recognized both the byte-order\n                                  // marker '\\uFEFF' as well as ^Z '\\u001A' as whitespace, although\n                                  // this is not to spec since neither of these are in Zs. For the\n                                  // sake of compatibility, we recognize them both here. Note: '\\uFEFF'\n                                  // also happens to be a formatting character (class Cf), which means\n                                  // that it is a legal non-initial identifier character. So it's\n                                  // especially funny, because it will be whitespace UNLESS we happen\n                                  // to be scanning an identifier or keyword, in which case it winds\n                                  // up in the identifier or keyword.\n                || ch == '\\uFEFF'\n                || ch == '\\u001A'\n                || (ch > 255 && CharUnicodeInfo.GetUnicodeCategory(ch) == UnicodeCategory.SpaceSeparator); 981786"];
5081 [label="return ch == ' '\n                || ch == '\\t'\n                || ch == '\\v'\n                || ch == '\\f'\n                || ch == '\\u00A0' // NO-BREAK SPACE\n                                  // The native compiler, in ScanToken, recognized both the byte-order\n                                  // marker '\\uFEFF' as well as ^Z '\\u001A' as whitespace, although\n                                  // this is not to spec since neither of these are in Zs. For the\n                                  // sake of compatibility, we recognize them both here. Note: '\\uFEFF'\n                                  // also happens to be a formatting character (class Cf), which means\n                                  // that it is a legal non-initial identifier character. So it's\n                                  // especially funny, because it will be whitespace UNLESS we happen\n                                  // to be scanning an identifier or keyword, in which case it winds\n                                  // up in the identifier or keyword.\n                || ch == '\\uFEFF'\n                || ch == '\\u001A'\n                || (ch > 255 && CharUnicodeInfo.GetUnicodeCategory(ch) == UnicodeCategory.SpaceSeparator); 981787"];
5082 [label="return ch == ' '\n                || ch == '\\t'\n                || ch == '\\v'\n                || ch == '\\f'\n                || ch == '\\u00A0' // NO-BREAK SPACE\n                                  // The native compiler, in ScanToken, recognized both the byte-order\n                                  // marker '\\uFEFF' as well as ^Z '\\u001A' as whitespace, although\n                                  // this is not to spec since neither of these are in Zs. For the\n                                  // sake of compatibility, we recognize them both here. Note: '\\uFEFF'\n                                  // also happens to be a formatting character (class Cf), which means\n                                  // that it is a legal non-initial identifier character. So it's\n                                  // especially funny, because it will be whitespace UNLESS we happen\n                                  // to be scanning an identifier or keyword, in which case it winds\n                                  // up in the identifier or keyword.\n                || ch == '\\uFEFF'\n                || ch == '\\u001A'\n                || (ch > 255 && CharUnicodeInfo.GetUnicodeCategory(ch) == UnicodeCategory.SpaceSeparator); 981788"];
5083 [label="if (SyntaxFacts.IsNewLine(ch))\n                    {\n                        ch = '\\n';\n                    } 981789"];
5084 [label="SyntaxFacts.IsNewLine(ch) 981790"];
5085 [label="param IsNewLine(char ch) 981791"];
5086 [label="return ch == '\\r'\n                || ch == '\\n'\n                || ch == '\\u0085'\n                || ch == '\\u2028'\n                || ch == '\\u2029'; 981792"];
5087 [label="return ch == '\\r'\n                || ch == '\\n'\n                || ch == '\\u0085'\n                || ch == '\\u2028'\n                || ch == '\\u2029'; 981793"];
5088 [label="switch (ch)\n                {\n                    case ' ':\n                    case '\\t':       // Horizontal tab\n                    case '\\v':       // Vertical Tab\n                    case '\\f':       // Form-feed\n                    case '\\u001A':\n                        this.AddTrivia(this.ScanWhitespace(), ref triviaList);\n                        break;\n                    case '/':\n                        if ((ch = TextWindow.PeekChar(1)) == '/')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '/' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.SingleLine), ref triviaList);\n                                break;\n                            }\n\n                            // normal single line comment\n                            this.ScanToEndOfLine();\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n                        else if (ch == '*')\n                        {\n                            if (!this.SuppressDocumentationCommentParse && TextWindow.PeekChar(2) == '*' &&\n                                TextWindow.PeekChar(3) != '*' && TextWindow.PeekChar(3) != '/')\n                            {\n                                // Doc comments should never be in trailing trivia.\n                                // Stop processing so that it will be leading trivia on the next token.\n                                if (isTrailing)\n                                {\n                                    return;\n                                }\n\n                                this.AddTrivia(this.LexXmlDocComment(XmlDocCommentStyle.Delimited), ref triviaList);\n                                break;\n                            }\n\n                            bool isTerminated;\n                            this.ScanMultiLineComment(out isTerminated);\n                            if (!isTerminated)\n                            {\n                                // The comment didn't end.  Report an error at the start point.\n                                this.AddError(ErrorCode.ERR_OpenEndedComment);\n                            }\n\n                            var text = TextWindow.GetText(false);\n                            this.AddTrivia(SyntaxFactory.Comment(text), ref triviaList);\n                            onlyWhitespaceOnLine = false;\n                            break;\n                        }\n\n                        // not trivia\n                        return;\n                    case '\\r':\n                    case '\\n':\n                        this.AddTrivia(this.ScanEndOfLine(), ref triviaList);\n                        if (isTrailing)\n                        {\n                            return;\n                        }\n\n                        onlyWhitespaceOnLine = true;\n                        break;\n                    case '#':\n                        if (_allowPreprocessorDirectives)\n                        {\n                            this.LexDirectiveAndExcludedTrivia(afterFirstToken, isTrailing || !onlyWhitespaceOnLine, ref triviaList);\n                            break;\n                        }\n                        else\n                        {\n                            return;\n                        }\n\n                    // Note: we specifically do not look for the >>>>>>> pattern as the start of\n                    // a conflict marker trivia.  That's because *technically* (albeit unlikely)\n                    // >>>>>>> could be the end of a very generic construct.  So, instead, we only\n                    // recognize >>>>>>> as we are scanning the trivia after a ======= marker \n                    // (which can never be part of legal code).\n                    // case '>':\n                    case '=':\n                    case '<':\n                        if (!isTrailing)\n                        {\n                            if (IsConflictMarkerTrivia())\n                            {\n                                this.LexConflictMarkerTrivia(ref triviaList);\n                                break;\n                            }\n                        }\n\n                        return;\n\n                    default:\n                        return;\n                } 981794"];
5089 [label="return; 981795"];
5090 [label="param Create(ref TokenInfo info) 981796"];
5091 [label="param Create(SyntaxDiagnosticInfo[] errors) 981797"];
5092 [label="param Create(this) 981798"];
5093 [label="Debug.Assert(info.Kind != SyntaxKind.IdentifierToken || info.StringValue != null); 981799"];
5094 [label="SyntaxToken token; 981800"];
5095 [label="if (info.RequiresTextForXmlEntity)\n            {\n                token = SyntaxFactory.Token(leadingNode, info.Kind, info.Text, info.StringValue, trailingNode);\n            }\n            else\n            {\n                switch (info.Kind)\n                {\n                    case SyntaxKind.IdentifierToken:\n                        token = SyntaxFactory.Identifier(info.ContextualKind, leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.NumericLiteralToken:\n                        switch (info.ValueKind)\n                        {\n                            case SpecialType.System_Int32:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.IntValue, trailingNode);\n                                break;\n                            case SpecialType.System_UInt32:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.UintValue, trailingNode);\n                                break;\n                            case SpecialType.System_Int64:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.LongValue, trailingNode);\n                                break;\n                            case SpecialType.System_UInt64:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.UlongValue, trailingNode);\n                                break;\n                            case SpecialType.System_Single:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.FloatValue, trailingNode);\n                                break;\n                            case SpecialType.System_Double:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.DoubleValue, trailingNode);\n                                break;\n                            case SpecialType.System_Decimal:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.DecimalValue, trailingNode);\n                                break;\n                            default:\n                                throw ExceptionUtilities.UnexpectedValue(info.ValueKind);\n                        }\n\n                        break;\n                    case SyntaxKind.InterpolatedStringToken:\n                        // we do not record a separate 'value' for an interpolated string token, as it must be rescanned during parsing.\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.Kind, info.Text, trailingNode);\n                        break;\n                    case SyntaxKind.StringLiteralToken:\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.Kind, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.CharacterLiteralToken:\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.CharValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlTextLiteralNewLineToken:\n                        token = SyntaxFactory.XmlTextNewLine(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlTextLiteralToken:\n                        token = SyntaxFactory.XmlTextLiteral(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlEntityLiteralToken:\n                        token = SyntaxFactory.XmlEntity(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.EndOfDocumentationCommentToken:\n                    case SyntaxKind.EndOfFileToken:\n                        token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode);\n                        break;\n                    case SyntaxKind.None:\n                        token = SyntaxFactory.BadToken(leadingNode, info.Text, trailingNode);\n                        break;\n\n                    default:\n                        Debug.Assert(SyntaxFacts.IsPunctuationOrKeyword(info.Kind));\n                        token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode);\n                        break;\n                }\n            } 981801"];
5096 [label="switch (info.Kind)\n                {\n                    case SyntaxKind.IdentifierToken:\n                        token = SyntaxFactory.Identifier(info.ContextualKind, leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.NumericLiteralToken:\n                        switch (info.ValueKind)\n                        {\n                            case SpecialType.System_Int32:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.IntValue, trailingNode);\n                                break;\n                            case SpecialType.System_UInt32:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.UintValue, trailingNode);\n                                break;\n                            case SpecialType.System_Int64:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.LongValue, trailingNode);\n                                break;\n                            case SpecialType.System_UInt64:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.UlongValue, trailingNode);\n                                break;\n                            case SpecialType.System_Single:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.FloatValue, trailingNode);\n                                break;\n                            case SpecialType.System_Double:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.DoubleValue, trailingNode);\n                                break;\n                            case SpecialType.System_Decimal:\n                                token = SyntaxFactory.Literal(leadingNode, info.Text, info.DecimalValue, trailingNode);\n                                break;\n                            default:\n                                throw ExceptionUtilities.UnexpectedValue(info.ValueKind);\n                        }\n\n                        break;\n                    case SyntaxKind.InterpolatedStringToken:\n                        // we do not record a separate 'value' for an interpolated string token, as it must be rescanned during parsing.\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.Kind, info.Text, trailingNode);\n                        break;\n                    case SyntaxKind.StringLiteralToken:\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.Kind, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.CharacterLiteralToken:\n                        token = SyntaxFactory.Literal(leadingNode, info.Text, info.CharValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlTextLiteralNewLineToken:\n                        token = SyntaxFactory.XmlTextNewLine(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlTextLiteralToken:\n                        token = SyntaxFactory.XmlTextLiteral(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.XmlEntityLiteralToken:\n                        token = SyntaxFactory.XmlEntity(leadingNode, info.Text, info.StringValue, trailingNode);\n                        break;\n                    case SyntaxKind.EndOfDocumentationCommentToken:\n                    case SyntaxKind.EndOfFileToken:\n                        token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode);\n                        break;\n                    case SyntaxKind.None:\n                        token = SyntaxFactory.BadToken(leadingNode, info.Text, trailingNode);\n                        break;\n\n                    default:\n                        Debug.Assert(SyntaxFacts.IsPunctuationOrKeyword(info.Kind));\n                        token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode);\n                        break;\n                } 981802"];
5097 [label="token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode); 981803"];
5098 [label="token = SyntaxFactory.Token(leadingNode, info.Kind, trailingNode); 981804"];
5099 [label="SyntaxFactory.Token(leadingNode, info.Kind, trailingNode) 981805"];
5100 [label="param Token(GreenNode leading) 981806"];
5101 [label="param Token(SyntaxKind kind) 981807"];
5102 [label="param Token(GreenNode trailing) 981808"];
5103 [label="return SyntaxToken.Create(kind, leading, trailing); 981809"];
5104 [label="return SyntaxToken.Create(kind, leading, trailing); 981810"];
5105 [label="return SyntaxToken.Create(kind, leading, trailing); 981811"];
5106 [label="SyntaxToken.Create(kind, leading, trailing) 981812"];
5107 [label="param Create(SyntaxKind kind) 981813"];
5108 [label="param Create(GreenNode leading) 981814"];
5109 [label="param Create(GreenNode trailing) 981815"];
5110 [label="if (kind > LastTokenWithWellKnownText)\n            {\n                if (!SyntaxFacts.IsAnyToken(kind))\n                {\n                    throw new ArgumentException(string.Format(CSharpResources.ThisMethodCanOnlyBeUsedToCreateTokens, kind), nameof(kind));\n                }\n\n                return CreateMissing(kind, leading, trailing);\n            } 981816"];
5111 [label="if (leading == null)\n            {\n                if (trailing == null)\n                {\n                    return s_tokensWithNoTrivia[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                }\n            } 981817"];
5112 [label="if (leading == null)\n            {\n                if (trailing == null)\n                {\n                    return s_tokensWithNoTrivia[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                }\n            } 981818"];
5113 [label="if (trailing == null)\n                {\n                    return s_tokensWithNoTrivia[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                } 981819"];
5114 [label="if (trailing == null)\n                {\n                    return s_tokensWithNoTrivia[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.Space)\n                {\n                    return s_tokensWithSingleTrailingSpace[(int)kind].Value;\n                }\n                else if (trailing == SyntaxFactory.CarriageReturnLineFeed)\n                {\n                    return s_tokensWithSingleTrailingCRLF[(int)kind].Value;\n                } 981820"];
5115 [label="return s_tokensWithNoTrivia[(int)kind].Value; 981821"];
5116 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 981822"];
5117 [label="if (errors != null && (_options.DocumentationMode >= DocumentationMode.Diagnose || !InDocumentationComment))\n            {\n                token = token.WithDiagnosticsGreen(errors);\n            } 981823"];
5118 [label="return token; 981824"];
5119 [label="this.AddLexedToken(token); 981825"];
5120 [label="this.AddLexedToken(token) 981826"];
5121 [label="param AddLexedToken(SyntaxToken token) 981827"];
5122 [label="param AddLexedToken(this) 981828"];
5123 [label="Debug.Assert(token != null); 981829"];
5124 [label="Debug.Assert(token != null); 981830"];
5125 [label="if (_tokenCount >= _lexedTokens.Length)\n            {\n                this.AddLexedTokenSlot();\n            } 981831"];
5126 [label="_lexedTokens[_tokenCount].Value = token; 981832"];
5127 [label="_lexedTokens[_tokenCount].Value 981833"];
5128 [label="_tokenCount 981834"];
5129 [label="this.AddLexedToken(token); 981835"];
5130 [label="token.Kind 981836"];
5131 [label="get { return (SyntaxKind)this.RawKind; } 981837"];
5132 [label="return (SyntaxKind)this.RawKind; 981838"];
5133 [label="if (token.Kind == SyntaxKind.EndOfFileToken)\n                {\n                    break;\n                } 981839"];
5134 [label="this.PreLex(); 981840"];
5135 [label="new SyntaxListPool() 981841"];
5136 [label="_pool = new SyntaxListPool() 981842"];
5137 [label="_syntaxFactoryContext 981843"];
5138 [label="_syntaxFactory 981844"];
5139 [label="_recursionDepth 981845"];
5140 [label="_termState 981846"];
5141 [label="_isInTry 981847"];
5142 [label="_checkedTopLevelStatementsFeatureAvailability 981848"];
5143 [label="_syntaxFactoryContext = new SyntaxFactoryContext(); 981849"];
5144 [label="_syntaxFactoryContext 981850"];
5145 [label="_syntaxFactory = new ContextAwareSyntax(_syntaxFactoryContext); 981851"];
5146 [label="_syntaxFactory = new ContextAwareSyntax(_syntaxFactoryContext); 981852"];
5147 [label="_syntaxFactory 981853"];
5148 [label="parser.ParseCompilationUnit() 981854"];
5149 [label="param ParseCompilationUnit(this) 981855"];
5150 [label="return ParseWithStackGuard(\n                ParseCompilationUnitCore,\n                () => SyntaxFactory.CompilationUnit(\n                        new SyntaxList<ExternAliasDirectiveSyntax>(),\n                        new SyntaxList<UsingDirectiveSyntax>(),\n                        new SyntaxList<AttributeListSyntax>(),\n                        new SyntaxList<MemberDeclarationSyntax>(),\n                        SyntaxFactory.Token(SyntaxKind.EndOfFileToken))); 981856"];
5151 [label="return ParseWithStackGuard(\n                ParseCompilationUnitCore,\n                () => SyntaxFactory.CompilationUnit(\n                        new SyntaxList<ExternAliasDirectiveSyntax>(),\n                        new SyntaxList<UsingDirectiveSyntax>(),\n                        new SyntaxList<AttributeListSyntax>(),\n                        new SyntaxList<MemberDeclarationSyntax>(),\n                        SyntaxFactory.Token(SyntaxKind.EndOfFileToken))); 981857"];
5152 [label="ParseWithStackGuard(\n                ParseCompilationUnitCore,\n                () => SyntaxFactory.CompilationUnit(\n                        new SyntaxList<ExternAliasDirectiveSyntax>(),\n                        new SyntaxList<UsingDirectiveSyntax>(),\n                        new SyntaxList<AttributeListSyntax>(),\n                        new SyntaxList<MemberDeclarationSyntax>(),\n                        SyntaxFactory.Token(SyntaxKind.EndOfFileToken))) 981858"];
5153 [label="param ParseWithStackGuard(Func<TNode> parseFunc) 981859"];
5154 [label="param ParseWithStackGuard(Func<TNode> createEmptyNodeFunc) 981860"];
5155 [label="param ParseWithStackGuard(this) 981861"];
5156 [label="Debug.Assert(_recursionDepth == 0); 981862"];
5157 [label="Debug.Assert(_recursionDepth == 0); 981863"];
5158 [label="return parseFunc(); 981864"];
5159 [label="return parseFunc(); 981865"];
5160 [label="param ParseCompilationUnitCore(this) 981866"];
5161 [label="SyntaxToken tmp = null; 981867"];
5162 [label="SyntaxListBuilder initialBadNodes = null; 981868"];
5163 [label="var body = new NamespaceBodyBuilder(_pool); 981869"];
5164 [label="var body = new NamespaceBodyBuilder(_pool); 981870"];
5165 [label="new NamespaceBodyBuilder(_pool) 981871"];
5166 [label="param NamespaceBodyBuilder(SyntaxListPool pool) 981872"];
5167 [label="param NamespaceBodyBuilder(this) 981873"];
5168 [label="Externs = pool.Allocate<ExternAliasDirectiveSyntax>(); 981874"];
5169 [label="Externs 981875"];
5170 [label="Usings = pool.Allocate<UsingDirectiveSyntax>(); 981876"];
5171 [label="Usings 981877"];
5172 [label="Attributes = pool.Allocate<AttributeListSyntax>(); 981878"];
5173 [label="Attributes 981879"];
5174 [label="Members = pool.Allocate<MemberDeclarationSyntax>(); 981880"];
5175 [label="Members 981881"];
5176 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 981882"];
5177 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 981883"];
5178 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 981884"];
5179 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 981885"];
5180 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 981886"];
5181 [label="this.ParseNamespaceBody(ref tmp, ref body, ref initialBadNodes, SyntaxKind.CompilationUnit); 981887"];
5182 [label="get\n            {\n                return _syntaxFactoryContext.IsInAsync;\n            } 981888"];
5183 [label="return _syntaxFactoryContext.IsInAsync; 981889"];
5184 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 981890"];
5185 [label="this.FetchCurrentToken() 981891"];
5186 [label="param FetchCurrentToken(this) 981892"];
5187 [label="if (_tokenOffset >= _tokenCount)\n            {\n                this.AddNewToken();\n            } 981893"];
5188 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 981894"];
5189 [label="if (_blendedTokens != null)\n            {\n                return _blendedTokens[_tokenOffset].Token;\n            }\n            else\n            {\n                return _lexedTokens[_tokenOffset];\n            } 981895"];
5190 [label="return _lexedTokens[_tokenOffset]; 981896"];
5191 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 981897"];
5192 [label="_currentToken 981898"];
5193 [label="get { return (SyntaxKind)this.RawKind; } 981899"];
5194 [label="return (SyntaxKind)this.RawKind; 981900"];
5195 [label="param AddIncompleteMembers(ref SyntaxListBuilder<MemberDeclarationSyntax> incompleteMembers) 981901"];
5196 [label="param AddIncompleteMembers(ref NamespaceBodyBuilder body) 981902"];
5197 [label="if (incompleteMembers.Count > 0)\n            {\n                body.Members.AddRange(incompleteMembers);\n                incompleteMembers.Clear();\n            } 981903"];
5198 [label="if (incompleteMembers.Count > 0)\n            {\n                body.Members.AddRange(incompleteMembers);\n                incompleteMembers.Clear();\n            } 981904"];
5199 [label="var eof = this.EatToken(SyntaxKind.EndOfFileToken); 981905"];
5200 [label="this.EatToken(SyntaxKind.EndOfFileToken) 981906"];
5201 [label="param EatToken(SyntaxKind kind) 981907"];
5202 [label="param EatToken(this) 981908"];
5203 [label="Debug.Assert(SyntaxFacts.IsAnyToken(kind)); 981909"];
5204 [label="SyntaxFacts.IsAnyToken(kind) 981910"];
5205 [label="param IsAnyToken(SyntaxKind kind) 981911"];
5206 [label="if (kind >= SyntaxKind.TildeToken && kind < SyntaxKind.EndOfLineTrivia) return true; 981912"];
5207 [label="return true; 981913"];
5208 [label="this.CurrentToken 981914"];
5209 [label="get\n            {\n                return _currentToken ?? (_currentToken = this.FetchCurrentToken());\n            } 981915"];
5210 [label="return _currentToken ?? (_currentToken = this.FetchCurrentToken()); 981916"];
5211 [label="var ct = this.CurrentToken; 981917"];
5212 [label="ct.Kind 981918"];
5213 [label="get { return (SyntaxKind)this.RawKind; } 981919"];
5214 [label="if (ct.Kind == kind)\n            {\n                MoveToNextToken();\n                return ct;\n            } 981920"];
5215 [label="if (ct.Kind == kind)\n            {\n                MoveToNextToken();\n                return ct;\n            } 981921"];
5216 [label="MoveToNextToken() 981922"];
5217 [label="param MoveToNextToken(this) 981923"];
5218 [label="_currentToken.GetTrailingTrivia() 981924"];
5219 [label="param GetTrailingTrivia(this) 981925"];
5220 [label="return null; 981926"];
5221 [label="_prevTokenTrailingTrivia = _currentToken.GetTrailingTrivia(); 981927"];
5222 [label="_prevTokenTrailingTrivia 981928"];
5223 [label="_currentToken = null; 981929"];
5224 [label="_currentToken 981930"];
5225 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 981931"];
5226 [label="if (_blendedTokens != null)\n            {\n                _currentNode = default(BlendedNode);\n            } 981932"];
5227 [label="_tokenOffset 981933"];
5228 [label="MoveToNextToken(); 981934"];
5229 [label="return ct; 981935"];
5230 [label="var result = _syntaxFactory.CompilationUnit(body.Externs, body.Usings, body.Attributes, body.Members, eof); 981936"];
5231 [label="var result = _syntaxFactory.CompilationUnit(body.Externs, body.Usings, body.Attributes, body.Members, eof); 981937"];
5232 [label="var result = _syntaxFactory.CompilationUnit(body.Externs, body.Usings, body.Attributes, body.Members, eof); 981938"];
5233 [label="var result = _syntaxFactory.CompilationUnit(body.Externs, body.Usings, body.Attributes, body.Members, eof); 981939"];
5234 [label="param CSharpSyntaxNode(SyntaxKind kind) 981940"];
5235 [label="param CSharpSyntaxNode(this) 981941"];
5236 [label="kind 981942"];
5237 [label="param CSharpSyntaxNode(this) 981943"];
5238 [label="param CSharpSyntaxNode(this) 981944"];
5239 [label="GreenStats.NoteGreen(this); 981945"];
5240 [label="GreenStats.NoteGreen(this); 981946"];
5241 [label="param SetFactoryContext(SyntaxFactoryContext context) 981947"];
5242 [label="param SetFactoryContext(this) 981948"];
5243 [label="if (context.IsInAsync)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInAsync;\n            } 981949"];
5244 [label="if (context.IsInQuery)\n            {\n                this.flags |= NodeFlags.FactoryContextIsInQuery;\n            } 981950"];
5245 [label="if (initialBadNodes != null)\n                {\n                    // attach initial bad nodes as leading trivia on first token\n                    result = AddLeadingSkippedSyntax(result, initialBadNodes.ToListNode());\n                    _pool.Free(initialBadNodes);\n                } 981951"];
5246 [label="if (initialBadNodes != null)\n                {\n                    // attach initial bad nodes as leading trivia on first token\n                    result = AddLeadingSkippedSyntax(result, initialBadNodes.ToListNode());\n                    _pool.Free(initialBadNodes);\n                } 981952"];
5247 [label="return result; 981953"];
5248 [label="body.Free(_pool); 981954"];
5249 [label="body.Free(_pool) 981955"];
5250 [label="param Free(SyntaxListPool pool) 981956"];
5251 [label="param Free(this) 981957"];
5252 [label="pool.Free(Members); 981958"];
5253 [label="pool.Free(Members); 981959"];
5254 [label="pool.Free(Attributes); 981960"];
5255 [label="pool.Free(Attributes); 981961"];
5256 [label="pool.Free(Usings); 981962"];
5257 [label="pool.Free(Usings); 981963"];
5258 [label="pool.Free(Externs); 981964"];
5259 [label="pool.Free(Externs); 981965"];
5260 [label="body.Free(_pool); 981966"];
5261 [label="return parseFunc(); 981967"];
5262 [label="var compilationUnit = (CompilationUnitSyntax)parser.ParseCompilationUnit().CreateRed(); 981968"];
5263 [label="var compilationUnit = (CompilationUnitSyntax)parser.ParseCompilationUnit().CreateRed(); 981969"];
5264 [label="param CSharpSyntaxNode(GreenNode green) 981970"];
5265 [label="param CSharpSyntaxNode(SyntaxNode? parent) 981971"];
5266 [label="param CSharpSyntaxNode(int position) 981972"];
5267 [label="param CSharpSyntaxNode(this) 981973"];
5268 [label="green 981974"];
5269 [label="parent 981975"];
5270 [label="position 981976"];
5271 [label="param CSharpSyntaxNode(this) 981977"];
5272 [label="param CSharpSyntaxNode(this) 981978"];
5273 [label="var tree = new ParsedSyntaxTree(\n                text,\n                text.Encoding,\n                text.ChecksumAlgorithm,\n                path,\n                options,\n                compilationUnit,\n                parser.Directives,\n                diagnosticOptions: diagnosticOptions,\n                cloneRoot: true); 981979"];
5274 [label="var tree = new ParsedSyntaxTree(\n                text,\n                text.Encoding,\n                text.ChecksumAlgorithm,\n                path,\n                options,\n                compilationUnit,\n                parser.Directives,\n                diagnosticOptions: diagnosticOptions,\n                cloneRoot: true); 981980"];
5275 [label="var tree = new ParsedSyntaxTree(\n                text,\n                text.Encoding,\n                text.ChecksumAlgorithm,\n                path,\n                options,\n                compilationUnit,\n                parser.Directives,\n                diagnosticOptions: diagnosticOptions,\n                cloneRoot: true); 981981"];
5276 [label="var tree = new ParsedSyntaxTree(\n                text,\n                text.Encoding,\n                text.ChecksumAlgorithm,\n                path,\n                options,\n                compilationUnit,\n                parser.Directives,\n                diagnosticOptions: diagnosticOptions,\n                cloneRoot: true); 981982"];
5277 [label="var tree = new ParsedSyntaxTree(\n                text,\n                text.Encoding,\n                text.ChecksumAlgorithm,\n                path,\n                options,\n                compilationUnit,\n                parser.Directives,\n                diagnosticOptions: diagnosticOptions,\n                cloneRoot: true); 981983"];
5278 [label="parser.Directives 981984"];
5279 [label="get { return lexer.Directives; } 981985"];
5280 [label="lexer.Directives 981986"];
5281 [label="get { return _directives; } 981987"];
5282 [label="return _directives; 981988"];
5283 [label="return lexer.Directives; 981989"];
5284 [label="var tree = new ParsedSyntaxTree(\n                text,\n                text.Encoding,\n                text.ChecksumAlgorithm,\n                path,\n                options,\n                compilationUnit,\n                parser.Directives,\n                diagnosticOptions: diagnosticOptions,\n                cloneRoot: true); 981990"];
5285 [label="var tree = new ParsedSyntaxTree(\n                text,\n                text.Encoding,\n                text.ChecksumAlgorithm,\n                path,\n                options,\n                compilationUnit,\n                parser.Directives,\n                diagnosticOptions: diagnosticOptions,\n                cloneRoot: true); 981991"];
5286 [label="var tree = new ParsedSyntaxTree(\n                text,\n                text.Encoding,\n                text.ChecksumAlgorithm,\n                path,\n                options,\n                compilationUnit,\n                parser.Directives,\n                diagnosticOptions: diagnosticOptions,\n                cloneRoot: true); 981992"];
5287 [label="new ParsedSyntaxTree(\n                text,\n                text.Encoding,\n                text.ChecksumAlgorithm,\n                path,\n                options,\n                compilationUnit,\n                parser.Directives,\n                diagnosticOptions: diagnosticOptions,\n                cloneRoot: true) 981993"];
5288 [label="param ParsedSyntaxTree(SourceText? textOpt) 981994"];
5289 [label="param ParsedSyntaxTree(Encoding? encodingOpt) 981995"];
5290 [label="param ParsedSyntaxTree(SourceHashAlgorithm checksumAlgorithm) 981996"];
5291 [label="param ParsedSyntaxTree(string path) 981997"];
5292 [label="param ParsedSyntaxTree(CSharpParseOptions options) 981998"];
5293 [label="param ParsedSyntaxTree(CSharpSyntaxNode root) 981999"];
5294 [label="param ParsedSyntaxTree(Syntax.InternalSyntax.DirectiveStack directives) 982000"];
5295 [label="param ParsedSyntaxTree(ImmutableDictionary<string, ReportDiagnostic>? diagnosticOptions) 982001"];
5296 [label="param ParsedSyntaxTree(bool cloneRoot) 982002"];
5297 [label="param ParsedSyntaxTree(this) 982003"];
5298 [label="param ParsedSyntaxTree(this) 982004"];
5299 [label="param CSharpSyntaxTree(this) 982005"];
5300 [label="param CSharpSyntaxTree(this) 982006"];
5301 [label="_hasDirectives 982007"];
5302 [label="_lazyLineDirectiveMap 982008"];
5303 [label="_lazyPragmaWarningStateMap 982009"];
5304 [label="_lazyNullableContextStateMap 982010"];
5305 [label="_lazyIsGeneratedCode = GeneratedKind.Unknown 982011"];
5306 [label="_options 982012"];
5307 [label="_path 982013"];
5308 [label="_root 982014"];
5309 [label="_hasCompilationUnitRoot 982015"];
5310 [label="_encodingOpt 982016"];
5311 [label="_checksumAlgorithm 982017"];
5312 [label="_diagnosticOptions 982018"];
5313 [label="_lazyText 982019"];
5314 [label="Debug.Assert(root != null); 982020"];
5315 [label="Debug.Assert(root != null); 982021"];
5316 [label="Debug.Assert(options != null); 982022"];
5317 [label="Debug.Assert(options != null); 982023"];
5318 [label="Debug.Assert(textOpt == null || textOpt.Encoding == encodingOpt && textOpt.ChecksumAlgorithm == checksumAlgorithm); 982024"];
5319 [label="Debug.Assert(textOpt == null || textOpt.Encoding == encodingOpt && textOpt.ChecksumAlgorithm == checksumAlgorithm); 982025"];
5320 [label="Debug.Assert(textOpt == null || textOpt.Encoding == encodingOpt && textOpt.ChecksumAlgorithm == checksumAlgorithm); 982026"];
5321 [label="Debug.Assert(textOpt == null || textOpt.Encoding == encodingOpt && textOpt.ChecksumAlgorithm == checksumAlgorithm); 982027"];
5322 [label="Debug.Assert(textOpt == null || textOpt.Encoding == encodingOpt && textOpt.ChecksumAlgorithm == checksumAlgorithm); 982028"];
5323 [label="_lazyText 982029"];
5324 [label="_encodingOpt = encodingOpt ?? textOpt?.Encoding; 982030"];
5325 [label="_encodingOpt 982031"];
5326 [label="_checksumAlgorithm 982032"];
5327 [label="_options 982033"];
5328 [label="_path = path ?? string.Empty; 982034"];
5329 [label="_path 982035"];
5330 [label="cloneRoot 982036"];
5331 [label="_root = cloneRoot ? this.CloneNodeAsRoot(root) : root; 982037"];
5332 [label="this.CloneNodeAsRoot(root) 982038"];
5333 [label="param CloneNodeAsRoot(T node) 982039"];
5334 [label="param CloneNodeAsRoot(this) 982040"];
5335 [label="return CSharpSyntaxNode.CloneNodeAsRoot(node, this); 982041"];
5336 [label="return CSharpSyntaxNode.CloneNodeAsRoot(node, this); 982042"];
5337 [label="return CSharpSyntaxNode.CloneNodeAsRoot(node, this); 982043"];
5338 [label="return CSharpSyntaxNode.CloneNodeAsRoot(node, this); 982044"];
5339 [label="return CSharpSyntaxNode.CloneNodeAsRoot(node, this); 982045"];
5340 [label="param CSharpSyntaxNode(this) 982046"];
5341 [label="_root 982047"];
5342 [label="root.Kind() 982048"];
5343 [label="param Kind(this) 982049"];
5344 [label="return (SyntaxKind)this.Green.RawKind; 982050"];
5345 [label="_hasCompilationUnitRoot = root.Kind() == SyntaxKind.CompilationUnit; 982051"];
5346 [label="_hasCompilationUnitRoot 982052"];
5347 [label="_diagnosticOptions = diagnosticOptions ?? EmptyDiagnosticOptions; 982053"];
5348 [label="_diagnosticOptions = diagnosticOptions ?? EmptyDiagnosticOptions; 982054"];
5349 [label="_diagnosticOptions 982055"];
5350 [label="this.SetDirectiveStack(directives); 982056"];
5351 [label="this.SetDirectiveStack(directives) 982057"];
5352 [label="param SetDirectiveStack(InternalSyntax.DirectiveStack directives) 982058"];
5353 [label="param SetDirectiveStack(this) 982059"];
5354 [label="_directives 982060"];
5355 [label="_hasDirectives = true; 982061"];
5356 [label="_hasDirectives 982062"];
5357 [label="this.SetDirectiveStack(directives); 982063"];
5358 [label="tree.VerifySource(); 982064"];
5359 [label="tree.VerifySource(); 982065"];
5360 [label="tree.VerifySource(); 982066"];
5361 [label="param GetRootCore(CancellationToken cancellationToken) 982067"];
5362 [label="param GetRootCore(this) 982068"];
5363 [label="return this.GetRoot(cancellationToken); 982069"];
5364 [label="this.GetRoot(cancellationToken) 982070"];
5365 [label="param GetRoot(CancellationToken cancellationToken) 982071"];
5366 [label="param GetRoot(this) 982072"];
5367 [label="return _root; 982073"];
5368 [label="return this.GetRoot(cancellationToken); 982074"];
5369 [label="param GetText(CancellationToken cancellationToken) 982075"];
5370 [label="param GetText(this) 982076"];
5371 [label="if (_lazyText == null)\n                {\n                    Interlocked.CompareExchange(ref _lazyText, this.GetRoot(cancellationToken).GetText(_encodingOpt, _checksumAlgorithm), null);\n                } 982077"];
5372 [label="if (_lazyText == null)\n                {\n                    Interlocked.CompareExchange(ref _lazyText, this.GetRoot(cancellationToken).GetText(_encodingOpt, _checksumAlgorithm), null);\n                } 982078"];
5373 [label="return _lazyText; 982079"];
5374 [label="=> true 982080"];
5375 [label="true 982081"];
5376 [label="tree.VerifySource(); 982082"];
5377 [label="param WriteTokenTo(System.IO.TextWriter writer) 982083"];
5378 [label="param WriteTokenTo(bool leading) 982084"];
5379 [label="param WriteTokenTo(bool trailing) 982085"];
5380 [label="param WriteTokenTo(this) 982086"];
5381 [label="if (leading)\n            {\n                var trivia = this.GetLeadingTrivia();\n                if (trivia != null)\n                {\n                    trivia.WriteTo(writer, true, true);\n                }\n            } 982087"];
5382 [label="this.GetLeadingTrivia() 982088"];
5383 [label="param GetLeadingTrivia(this) 982089"];
5384 [label="return null; 982090"];
5385 [label="var trivia = this.GetLeadingTrivia(); 982091"];
5386 [label="if (trivia != null)\n                {\n                    trivia.WriteTo(writer, true, true);\n                } 982092"];
5387 [label="if (trivia != null)\n                {\n                    trivia.WriteTo(writer, true, true);\n                } 982093"];
5388 [label="this.Text 982094"];
5389 [label="get { return SyntaxFacts.GetText(this.Kind); } 982095"];
5390 [label="this.Kind 982096"];
5391 [label="get { return (SyntaxKind)this.RawKind; } 982097"];
5392 [label="return (SyntaxKind)this.RawKind; 982098"];
5393 [label="return SyntaxFacts.GetText(this.Kind); 982099"];
5394 [label="SyntaxFacts.GetText(this.Kind) 982100"];
5395 [label="param GetText(SyntaxKind kind) 982101"];
5396 [label="switch (kind)\n            {\n                case SyntaxKind.TildeToken:\n                    return '~';\n                case SyntaxKind.ExclamationToken:\n                    return '!';\n                case SyntaxKind.DollarToken:\n                    return '$';\n                case SyntaxKind.PercentToken:\n                    return '%';\n                case SyntaxKind.CaretToken:\n                    return '^';\n                case SyntaxKind.AmpersandToken:\n                    return '&';\n                case SyntaxKind.AsteriskToken:\n                    return '*';\n                case SyntaxKind.OpenParenToken:\n                    return '(';\n                case SyntaxKind.CloseParenToken:\n                    return ')';\n                case SyntaxKind.MinusToken:\n                    return '-';\n                case SyntaxKind.PlusToken:\n                    return '+';\n                case SyntaxKind.EqualsToken:\n                    return '=';\n                case SyntaxKind.OpenBraceToken:\n                    return '{';\n                case SyntaxKind.CloseBraceToken:\n                    return '}';\n                case SyntaxKind.OpenBracketToken:\n                    return '[';\n                case SyntaxKind.CloseBracketToken:\n                    return ']';\n                case SyntaxKind.BarToken:\n                    return '|';\n                case SyntaxKind.BackslashToken:\n                    return '\\\\';\n                case SyntaxKind.ColonToken:\n                    return ':';\n                case SyntaxKind.SemicolonToken:\n                    return ';';\n                case SyntaxKind.DoubleQuoteToken:\n                    return '\\'';\n                case SyntaxKind.SingleQuoteToken:\n                    return ''';\n                case SyntaxKind.LessThanToken:\n                    return '<';\n                case SyntaxKind.CommaToken:\n                    return ',';\n                case SyntaxKind.GreaterThanToken:\n                    return '>';\n                case SyntaxKind.DotToken:\n                    return '.';\n                case SyntaxKind.QuestionToken:\n                    return '?';\n                case SyntaxKind.HashToken:\n                    return '#';\n                case SyntaxKind.SlashToken:\n                    return '/';\n                case SyntaxKind.SlashGreaterThanToken:\n                    return '/>';\n                case SyntaxKind.LessThanSlashToken:\n                    return '</';\n                case SyntaxKind.XmlCommentStartToken:\n                    return '<!--';\n                case SyntaxKind.XmlCommentEndToken:\n                    return '-->';\n                case SyntaxKind.XmlCDataStartToken:\n                    return '<![CDATA[';\n                case SyntaxKind.XmlCDataEndToken:\n                    return ']]>';\n                case SyntaxKind.XmlProcessingInstructionStartToken:\n                    return '<?';\n                case SyntaxKind.XmlProcessingInstructionEndToken:\n                    return '?>';\n\n                // compound\n                case SyntaxKind.BarBarToken:\n                    return '||';\n                case SyntaxKind.AmpersandAmpersandToken:\n                    return '&&';\n                case SyntaxKind.MinusMinusToken:\n                    return '--';\n                case SyntaxKind.PlusPlusToken:\n                    return '++';\n                case SyntaxKind.ColonColonToken:\n                    return '::';\n                case SyntaxKind.QuestionQuestionToken:\n                    return '??';\n                case SyntaxKind.MinusGreaterThanToken:\n                    return '->';\n                case SyntaxKind.ExclamationEqualsToken:\n                    return '!=';\n                case SyntaxKind.EqualsEqualsToken:\n                    return '==';\n                case SyntaxKind.EqualsGreaterThanToken:\n                    return '=>';\n                case SyntaxKind.LessThanEqualsToken:\n                    return '<=';\n                case SyntaxKind.LessThanLessThanToken:\n                    return '<<';\n                case SyntaxKind.LessThanLessThanEqualsToken:\n                    return '<<=';\n                case SyntaxKind.GreaterThanEqualsToken:\n                    return '>=';\n                case SyntaxKind.GreaterThanGreaterThanToken:\n                    return '>>';\n                case SyntaxKind.GreaterThanGreaterThanEqualsToken:\n                    return '>>=';\n                case SyntaxKind.SlashEqualsToken:\n                    return '/=';\n                case SyntaxKind.AsteriskEqualsToken:\n                    return '*=';\n                case SyntaxKind.BarEqualsToken:\n                    return '|=';\n                case SyntaxKind.AmpersandEqualsToken:\n                    return '&=';\n                case SyntaxKind.PlusEqualsToken:\n                    return '+=';\n                case SyntaxKind.MinusEqualsToken:\n                    return '-=';\n                case SyntaxKind.CaretEqualsToken:\n                    return '^=';\n                case SyntaxKind.PercentEqualsToken:\n                    return '%=';\n                case SyntaxKind.QuestionQuestionEqualsToken:\n                    return '??=';\n                case SyntaxKind.DotDotToken:\n                    return '..';\n\n                // Keywords\n                case SyntaxKind.BoolKeyword:\n                    return 'bool';\n                case SyntaxKind.ByteKeyword:\n                    return 'byte';\n                case SyntaxKind.SByteKeyword:\n                    return 'sbyte';\n                case SyntaxKind.ShortKeyword:\n                    return 'short';\n                case SyntaxKind.UShortKeyword:\n                    return 'ushort';\n                case SyntaxKind.IntKeyword:\n                    return 'int';\n                case SyntaxKind.UIntKeyword:\n                    return 'uint';\n                case SyntaxKind.LongKeyword:\n                    return 'long';\n                case SyntaxKind.ULongKeyword:\n                    return 'ulong';\n                case SyntaxKind.DoubleKeyword:\n                    return 'double';\n                case SyntaxKind.FloatKeyword:\n                    return 'float';\n                case SyntaxKind.DecimalKeyword:\n                    return 'decimal';\n                case SyntaxKind.StringKeyword:\n                    return 'string';\n                case SyntaxKind.CharKeyword:\n                    return 'char';\n                case SyntaxKind.VoidKeyword:\n                    return 'void';\n                case SyntaxKind.ObjectKeyword:\n                    return 'object';\n                case SyntaxKind.TypeOfKeyword:\n                    return 'typeof';\n                case SyntaxKind.SizeOfKeyword:\n                    return 'sizeof';\n                case SyntaxKind.NullKeyword:\n                    return 'null';\n                case SyntaxKind.TrueKeyword:\n                    return 'true';\n                case SyntaxKind.FalseKeyword:\n                    return 'false';\n                case SyntaxKind.IfKeyword:\n                    return 'if';\n                case SyntaxKind.ElseKeyword:\n                    return 'else';\n                case SyntaxKind.WhileKeyword:\n                    return 'while';\n                case SyntaxKind.ForKeyword:\n                    return 'for';\n                case SyntaxKind.ForEachKeyword:\n                    return 'foreach';\n                case SyntaxKind.DoKeyword:\n                    return 'do';\n                case SyntaxKind.SwitchKeyword:\n                    return 'switch';\n                case SyntaxKind.CaseKeyword:\n                    return 'case';\n                case SyntaxKind.DefaultKeyword:\n                    return 'default';\n                case SyntaxKind.TryKeyword:\n                    return 'try';\n                case SyntaxKind.CatchKeyword:\n                    return 'catch';\n                case SyntaxKind.FinallyKeyword:\n                    return 'finally';\n                case SyntaxKind.LockKeyword:\n                    return 'lock';\n                case SyntaxKind.GotoKeyword:\n                    return 'goto';\n                case SyntaxKind.BreakKeyword:\n                    return 'break';\n                case SyntaxKind.ContinueKeyword:\n                    return 'continue';\n                case SyntaxKind.ReturnKeyword:\n                    return 'return';\n                case SyntaxKind.ThrowKeyword:\n                    return 'throw';\n                case SyntaxKind.PublicKeyword:\n                    return 'public';\n                case SyntaxKind.PrivateKeyword:\n                    return 'private';\n                case SyntaxKind.InternalKeyword:\n                    return 'internal';\n                case SyntaxKind.ProtectedKeyword:\n                    return 'protected';\n                case SyntaxKind.StaticKeyword:\n                    return 'static';\n                case SyntaxKind.ReadOnlyKeyword:\n                    return 'readonly';\n                case SyntaxKind.SealedKeyword:\n                    return 'sealed';\n                case SyntaxKind.ConstKeyword:\n                    return 'const';\n                case SyntaxKind.FixedKeyword:\n                    return 'fixed';\n                case SyntaxKind.StackAllocKeyword:\n                    return 'stackalloc';\n                case SyntaxKind.VolatileKeyword:\n                    return 'volatile';\n                case SyntaxKind.NewKeyword:\n                    return 'new';\n                case SyntaxKind.OverrideKeyword:\n                    return 'override';\n                case SyntaxKind.AbstractKeyword:\n                    return 'abstract';\n                case SyntaxKind.VirtualKeyword:\n                    return 'virtual';\n                case SyntaxKind.EventKeyword:\n                    return 'event';\n                case SyntaxKind.ExternKeyword:\n                    return 'extern';\n                case SyntaxKind.RefKeyword:\n                    return 'ref';\n                case SyntaxKind.OutKeyword:\n                    return 'out';\n                case SyntaxKind.InKeyword:\n                    return 'in';\n                case SyntaxKind.IsKeyword:\n                    return 'is';\n                case SyntaxKind.AsKeyword:\n                    return 'as';\n                case SyntaxKind.ParamsKeyword:\n                    return 'params';\n                case SyntaxKind.ArgListKeyword:\n                    return '__arglist';\n                case SyntaxKind.MakeRefKeyword:\n                    return '__makeref';\n                case SyntaxKind.RefTypeKeyword:\n                    return '__reftype';\n                case SyntaxKind.RefValueKeyword:\n                    return '__refvalue';\n                case SyntaxKind.ThisKeyword:\n                    return 'this';\n                case SyntaxKind.BaseKeyword:\n                    return 'base';\n                case SyntaxKind.NamespaceKeyword:\n                    return 'namespace';\n                case SyntaxKind.UsingKeyword:\n                    return 'using';\n                case SyntaxKind.ClassKeyword:\n                    return 'class';\n                case SyntaxKind.StructKeyword:\n                    return 'struct';\n                case SyntaxKind.InterfaceKeyword:\n                    return 'interface';\n                case SyntaxKind.EnumKeyword:\n                    return 'enum';\n                case SyntaxKind.DelegateKeyword:\n                    return 'delegate';\n                case SyntaxKind.CheckedKeyword:\n                    return 'checked';\n                case SyntaxKind.UncheckedKeyword:\n                    return 'unchecked';\n                case SyntaxKind.UnsafeKeyword:\n                    return 'unsafe';\n                case SyntaxKind.OperatorKeyword:\n                    return 'operator';\n                case SyntaxKind.ImplicitKeyword:\n                    return 'implicit';\n                case SyntaxKind.ExplicitKeyword:\n                    return 'explicit';\n                case SyntaxKind.ElifKeyword:\n                    return 'elif';\n                case SyntaxKind.EndIfKeyword:\n                    return 'endif';\n                case SyntaxKind.RegionKeyword:\n                    return 'region';\n                case SyntaxKind.EndRegionKeyword:\n                    return 'endregion';\n                case SyntaxKind.DefineKeyword:\n                    return 'define';\n                case SyntaxKind.UndefKeyword:\n                    return 'undef';\n                case SyntaxKind.WarningKeyword:\n                    return 'warning';\n                case SyntaxKind.ErrorKeyword:\n                    return 'error';\n                case SyntaxKind.LineKeyword:\n                    return 'line';\n                case SyntaxKind.PragmaKeyword:\n                    return 'pragma';\n                case SyntaxKind.HiddenKeyword:\n                    return 'hidden';\n                case SyntaxKind.ChecksumKeyword:\n                    return 'checksum';\n                case SyntaxKind.DisableKeyword:\n                    return 'disable';\n                case SyntaxKind.RestoreKeyword:\n                    return 'restore';\n                case SyntaxKind.ReferenceKeyword:\n                    return 'r';\n                case SyntaxKind.LoadKeyword:\n                    return 'load';\n                case SyntaxKind.NullableKeyword:\n                    return 'nullable';\n                case SyntaxKind.EnableKeyword:\n                    return 'enable';\n                case SyntaxKind.WarningsKeyword:\n                    return 'warnings';\n                case SyntaxKind.AnnotationsKeyword:\n                    return 'annotations';\n\n                // contextual keywords\n                case SyntaxKind.YieldKeyword:\n                    return 'yield';\n                case SyntaxKind.PartialKeyword:\n                    return 'partial';\n                case SyntaxKind.FromKeyword:\n                    return 'from';\n                case SyntaxKind.GroupKeyword:\n                    return 'group';\n                case SyntaxKind.JoinKeyword:\n                    return 'join';\n                case SyntaxKind.IntoKeyword:\n                    return 'into';\n                case SyntaxKind.LetKeyword:\n                    return 'let';\n                case SyntaxKind.ByKeyword:\n                    return 'by';\n                case SyntaxKind.WhereKeyword:\n                    return 'where';\n                case SyntaxKind.SelectKeyword:\n                    return 'select';\n                case SyntaxKind.GetKeyword:\n                    return 'get';\n                case SyntaxKind.SetKeyword:\n                    return 'set';\n                case SyntaxKind.AddKeyword:\n                    return 'add';\n                case SyntaxKind.RemoveKeyword:\n                    return 'remove';\n                case SyntaxKind.OrderByKeyword:\n                    return 'orderby';\n                case SyntaxKind.AliasKeyword:\n                    return 'alias';\n                case SyntaxKind.OnKeyword:\n                    return 'on';\n                case SyntaxKind.EqualsKeyword:\n                    return 'equals';\n                case SyntaxKind.AscendingKeyword:\n                    return 'ascending';\n                case SyntaxKind.DescendingKeyword:\n                    return 'descending';\n                case SyntaxKind.AssemblyKeyword:\n                    return 'assembly';\n                case SyntaxKind.ModuleKeyword:\n                    return 'module';\n                case SyntaxKind.TypeKeyword:\n                    return 'type';\n                case SyntaxKind.FieldKeyword:\n                    return 'field';\n                case SyntaxKind.MethodKeyword:\n                    return 'method';\n                case SyntaxKind.ParamKeyword:\n                    return 'param';\n                case SyntaxKind.PropertyKeyword:\n                    return 'property';\n                case SyntaxKind.TypeVarKeyword:\n                    return 'typevar';\n                case SyntaxKind.GlobalKeyword:\n                    return 'global';\n                case SyntaxKind.NameOfKeyword:\n                    return 'nameof';\n                case SyntaxKind.AsyncKeyword:\n                    return 'async';\n                case SyntaxKind.AwaitKeyword:\n                    return 'await';\n                case SyntaxKind.WhenKeyword:\n                    return 'when';\n                case SyntaxKind.InterpolatedStringStartToken:\n                    return '$\\'';\n                case SyntaxKind.InterpolatedStringEndToken:\n                    return '\\'';\n                case SyntaxKind.InterpolatedVerbatimStringStartToken:\n                    return '$@\\'';\n                case SyntaxKind.UnderscoreToken:\n                    return '_';\n                case SyntaxKind.VarKeyword:\n                    return 'var';\n                case SyntaxKind.AndKeyword:\n                    return 'and';\n                case SyntaxKind.OrKeyword:\n                    return 'or';\n                case SyntaxKind.NotKeyword:\n                    return 'not';\n                case SyntaxKind.DataKeyword:\n                    return 'data';\n                case SyntaxKind.WithKeyword:\n                    return 'with';\n                case SyntaxKind.InitKeyword:\n                    return 'init';\n                case SyntaxKind.RecordKeyword:\n                    return 'record';\n                case SyntaxKind.ManagedKeyword:\n                    return 'managed';\n                case SyntaxKind.UnmanagedKeyword:\n                    return 'unmanaged';\n                default:\n                    return string.Empty;\n            } 982102"];
5397 [label="return string.Empty; 982103"];
5398 [label="writer.Write(this.Text); 982104"];
5399 [label="writer.Write(this.Text); 982105"];
5400 [label="if (trailing)\n            {\n                var trivia = this.GetTrailingTrivia();\n                if (trivia != null)\n                {\n                    trivia.WriteTo(writer, true, true);\n                }\n            } 982106"];
5401 [label="this.GetTrailingTrivia() 982107"];
5402 [label="param GetTrailingTrivia(this) 982108"];
5403 [label="var trivia = this.GetTrailingTrivia(); 982109"];
5404 [label="if (trivia != null)\n                {\n                    trivia.WriteTo(writer, true, true);\n                } 982110"];
5405 [label="if (trivia != null)\n                {\n                    trivia.WriteTo(writer, true, true);\n                } 982111"];
5406 [label="return tree; 982112"];
5407 [label="return ParseText(text, options, path, diagnosticOptions: null, cancellationToken); 982113"];
5408 [label="return CSharpSyntaxTree.ParseText(text, (CSharpParseOptions?)options, path, cancellationToken); 982114"];
5409 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 982115"];
5410 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 982116"];
5411 [label="param CheckSerializable(SyntaxTree tree) 982117"];
5412 [label="var stream = new MemoryStream(); 982118"];
5413 [label="var root = tree.GetRoot(); 982119"];
5414 [label="var root = tree.GetRoot(); 982120"];
5415 [label="param GetRootCore(CancellationToken cancellationToken) 982121"];
5416 [label="this.GetRoot(cancellationToken) 982122"];
5417 [label="param GetRoot(CancellationToken cancellationToken) 982123"];
5418 [label="root.SerializeTo(stream); 982124"];
5419 [label="root.SerializeTo(stream); 982125"];
5420 [label="root.SerializeTo(stream); 982126"];
5421 [label="=> base.ShouldReuseInSerialization &&\n                                                             FullWidth < Lexer.MaxCachedTokenSize 982127"];
5422 [label="FullWidth < Lexer.MaxCachedTokenSize 982128"];
5423 [label="base.ShouldReuseInSerialization &&\n                                                             FullWidth < Lexer.MaxCachedTokenSize 982129"];
5424 [label="stream.Position = 0; 982130"];
5425 [label="stream.Position 982131"];
5426 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 982132"];
5427 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 982133"];
5428 [label="CSharpSyntaxNode.DeserializeFrom(stream) 982134"];
5429 [label="param DeserializeFrom(Stream stream) 982135"];
5430 [label="param DeserializeFrom(CancellationToken cancellationToken = default) 982136"];
5431 [label="if (stream == null)\n            {\n                throw new ArgumentNullException(nameof(stream));\n            } 982137"];
5432 [label="if (stream == null)\n            {\n                throw new ArgumentNullException(nameof(stream));\n            } 982138"];
5433 [label="if (!stream.CanRead)\n            {\n                throw new InvalidOperationException(CodeAnalysisResources.TheStreamCannotBeReadFrom);\n            } 982139"];
5434 [label="using var reader = ObjectReader.TryGetReader(stream, leaveOpen: true, cancellationToken); 982140"];
5435 [label="using var reader = ObjectReader.TryGetReader(stream, leaveOpen: true, cancellationToken); 982141"];
5436 [label="using var reader = ObjectReader.TryGetReader(stream, leaveOpen: true, cancellationToken); 982142"];
5437 [label="using var reader = ObjectReader.TryGetReader(stream, leaveOpen: true, cancellationToken); 982143"];
5438 [label="if (reader == null)\n            {\n                throw new ArgumentException(CodeAnalysisResources.Stream_contains_invalid_data, nameof(stream));\n            } 982144"];
5439 [label="if (reader == null)\n            {\n                throw new ArgumentException(CodeAnalysisResources.Stream_contains_invalid_data, nameof(stream));\n            } 982145"];
5440 [label="var root = (Syntax.InternalSyntax.CSharpSyntaxNode)reader.ReadValue(); 982146"];
5441 [label="var root = (Syntax.InternalSyntax.CSharpSyntaxNode)reader.ReadValue(); 982147"];
5442 [label="param CSharpSyntaxNode(ObjectReader reader) 982148"];
5443 [label="param CSharpSyntaxNode(this) 982149"];
5444 [label="reader 982150"];
5445 [label="param CSharpSyntaxNode(this) 982151"];
5446 [label="param CSharpSyntaxNode(this) 982152"];
5447 [label="param SyntaxToken(ObjectReader reader) 982153"];
5448 [label="param SyntaxToken(this) 982154"];
5449 [label="reader 982155"];
5450 [label="param SyntaxToken(this) 982156"];
5451 [label="param CSharpSyntaxNode(ObjectReader reader) 982157"];
5452 [label="param CSharpSyntaxNode(this) 982158"];
5453 [label="reader 982159"];
5454 [label="param CSharpSyntaxNode(this) 982160"];
5455 [label="param CSharpSyntaxNode(this) 982161"];
5456 [label="this.Text 982162"];
5457 [label="get { return SyntaxFacts.GetText(this.Kind); } 982163"];
5458 [label="this.Kind 982164"];
5459 [label="return (SyntaxKind)this.RawKind; 982165"];
5460 [label="SyntaxFacts.GetText(this.Kind) 982166"];
5461 [label="var text = this.Text; 982167"];
5462 [label="if (text != null)\n            {\n                FullWidth = text.Length;\n            } 982168"];
5463 [label="if (text != null)\n            {\n                FullWidth = text.Length;\n            } 982169"];
5464 [label="FullWidth 982170"];
5465 [label="this.flags |= NodeFlags.IsNotMissing; 982171"];
5466 [label="this.flags 982172"];
5467 [label="var root = (Syntax.InternalSyntax.CSharpSyntaxNode)reader.ReadValue(); 982173"];
5468 [label="return root.CreateRed(); 982174"];
5469 [label="return root.CreateRed(); 982175"];
5470 [label="param CSharpSyntaxNode(this) 982176"];
5471 [label="return tree; 982177"];
5472 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 982178"];
5473 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 982179"];
5474 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 982180"];
5475 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 982181"];
5476 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 982182"];
5477 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 982183"];
5478 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 982184"];
5479 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 982185"];
5480 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 982186"];
5481 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 982187"];
5482 [label="param ValidateIOperations(Func<Compilation> createCompilation) 982188"];
5483 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 982189"];
5484 [label="return; 982190"];
5485 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 982191"];
5486 [label="var compilation = createCompilationLambda(); 982192"];
5487 [label="var compilation = createCompilationLambda(); 982193"];
5488 [label="return Guid.NewGuid().ToString('D'); 982194"];
5489 [label="var compilation = createCompilationLambda(); 982195"];
5490 [label="OutputKind.ConsoleApplication 982196"];
5491 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 982197"];
5492 [label="param CSharpCompilationOptions(OutputKind outputKind) 982198"];
5493 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics = false) 982199"];
5494 [label="param CSharpCompilationOptions(string? moduleName = null) 982200"];
5495 [label="param CSharpCompilationOptions(string? mainTypeName = null) 982201"];
5496 [label="param CSharpCompilationOptions(string? scriptClassName = null) 982202"];
5497 [label="param CSharpCompilationOptions(IEnumerable<string>? usings = null) 982203"];
5498 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel = OptimizationLevel.Debug) 982204"];
5499 [label="param CSharpCompilationOptions(bool checkOverflow = false) 982205"];
5500 [label="param CSharpCompilationOptions(bool allowUnsafe = false) 982206"];
5501 [label="param CSharpCompilationOptions(string? cryptoKeyContainer = null) 982207"];
5502 [label="param CSharpCompilationOptions(string? cryptoKeyFile = null) 982208"];
5503 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey = default) 982209"];
5504 [label="param CSharpCompilationOptions(bool? delaySign = null) 982210"];
5505 [label="param CSharpCompilationOptions(Platform platform = Platform.AnyCpu) 982211"];
5506 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption = ReportDiagnostic.Default) 982212"];
5507 [label="param CSharpCompilationOptions(int warningLevel = Diagnostic.DefaultWarningLevel) 982213"];
5508 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions = null) 982214"];
5509 [label="param CSharpCompilationOptions(bool concurrentBuild = true) 982215"];
5510 [label="param CSharpCompilationOptions(bool deterministic = false) 982216"];
5511 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver = null) 982217"];
5512 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver = null) 982218"];
5513 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver = null) 982219"];
5514 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer = null) 982220"];
5515 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider = null) 982221"];
5516 [label="param CSharpCompilationOptions(bool publicSign = false) 982222"];
5517 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions = MetadataImportOptions.Public) 982223"];
5518 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions = NullableContextOptions.Disable) 982224"];
5519 [label="param CSharpCompilationOptions(this) 982225"];
5520 [label="outputKind 982226"];
5521 [label="reportSuppressedDiagnostics 982227"];
5522 [label="moduleName 982228"];
5523 [label="mainTypeName 982229"];
5524 [label="scriptClassName 982230"];
5525 [label="usings 982231"];
5526 [label="optimizationLevel 982232"];
5527 [label="checkOverflow 982233"];
5528 [label="allowUnsafe 982234"];
5529 [label="cryptoKeyContainer 982235"];
5530 [label="cryptoKeyFile 982236"];
5531 [label="cryptoPublicKey 982237"];
5532 [label="delaySign 982238"];
5533 [label="platform 982239"];
5534 [label="generalDiagnosticOption 982240"];
5535 [label="warningLevel 982241"];
5536 [label="specificDiagnosticOptions 982242"];
5537 [label="concurrentBuild 982243"];
5538 [label="deterministic 982244"];
5539 [label="default 982245"];
5540 [label="false 982246"];
5541 [label="xmlReferenceResolver 982247"];
5542 [label="sourceReferenceResolver 982248"];
5543 [label="null 982249"];
5544 [label="metadataReferenceResolver 982250"];
5545 [label="assemblyIdentityComparer 982251"];
5546 [label="strongNameProvider 982252"];
5547 [label="metadataImportOptions 982253"];
5548 [label="false 982254"];
5549 [label="publicSign 982255"];
5550 [label="BinderFlags.None 982256"];
5551 [label="nullableContextOptions 982257"];
5552 [label="param CSharpCompilationOptions(OutputKind outputKind) 982258"];
5553 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics) 982259"];
5554 [label="param CSharpCompilationOptions(string? moduleName) 982260"];
5555 [label="param CSharpCompilationOptions(string? mainTypeName) 982261"];
5556 [label="param CSharpCompilationOptions(string? scriptClassName) 982262"];
5557 [label="param CSharpCompilationOptions(IEnumerable<string>? usings) 982263"];
5558 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel) 982264"];
5559 [label="param CSharpCompilationOptions(bool checkOverflow) 982265"];
5560 [label="param CSharpCompilationOptions(bool allowUnsafe) 982266"];
5561 [label="param CSharpCompilationOptions(string? cryptoKeyContainer) 982267"];
5562 [label="param CSharpCompilationOptions(string? cryptoKeyFile) 982268"];
5563 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey) 982269"];
5564 [label="param CSharpCompilationOptions(bool? delaySign) 982270"];
5565 [label="param CSharpCompilationOptions(Platform platform) 982271"];
5566 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption) 982272"];
5567 [label="param CSharpCompilationOptions(int warningLevel) 982273"];
5568 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions) 982274"];
5569 [label="param CSharpCompilationOptions(bool concurrentBuild) 982275"];
5570 [label="param CSharpCompilationOptions(bool deterministic) 982276"];
5571 [label="param CSharpCompilationOptions(DateTime currentLocalTime) 982277"];
5572 [label="param CSharpCompilationOptions(bool debugPlusMode) 982278"];
5573 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver) 982279"];
5574 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver) 982280"];
5575 [label="param CSharpCompilationOptions(SyntaxTreeOptionsProvider? syntaxTreeOptionsProvider) 982281"];
5576 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver) 982282"];
5577 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer) 982283"];
5578 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider) 982284"];
5579 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions) 982285"];
5580 [label="param CSharpCompilationOptions(bool referencesSupersedeLowerVersions) 982286"];
5581 [label="param CSharpCompilationOptions(bool publicSign) 982287"];
5582 [label="param CSharpCompilationOptions(BinderFlags topLevelBinderFlags) 982288"];
5583 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions) 982289"];
5584 [label="param CSharpCompilationOptions(this) 982290"];
5585 [label="outputKind 982291"];
5586 [label="reportSuppressedDiagnostics 982292"];
5587 [label="moduleName 982293"];
5588 [label="mainTypeName 982294"];
5589 [label="scriptClassName 982295"];
5590 [label="cryptoKeyContainer 982296"];
5591 [label="cryptoKeyFile 982297"];
5592 [label="cryptoPublicKey 982298"];
5593 [label="delaySign 982299"];
5594 [label="publicSign 982300"];
5595 [label="optimizationLevel 982301"];
5596 [label="checkOverflow 982302"];
5597 [label="platform 982303"];
5598 [label="generalDiagnosticOption 982304"];
5599 [label="warningLevel 982305"];
5600 [label="specificDiagnosticOptions 982306"];
5601 [label="specificDiagnosticOptions.ToImmutableDictionaryOrEmpty() 982307"];
5602 [label="concurrentBuild 982308"];
5603 [label="deterministic 982309"];
5604 [label="currentLocalTime 982310"];
5605 [label="debugPlusMode 982311"];
5606 [label="xmlReferenceResolver 982312"];
5607 [label="sourceReferenceResolver 982313"];
5608 [label="syntaxTreeOptionsProvider 982314"];
5609 [label="metadataReferenceResolver 982315"];
5610 [label="assemblyIdentityComparer 982316"];
5611 [label="strongNameProvider 982317"];
5612 [label="metadataImportOptions 982318"];
5613 [label="referencesSupersedeLowerVersions 982319"];
5614 [label="param CSharpCompilationOptions(this) 982320"];
5615 [label="public bool AllowUnsafe { get; private set; } 982321"];
5616 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 982322"];
5617 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 982323"];
5618 [label="this.Usings = usings.AsImmutableOrEmpty(); 982324"];
5619 [label="this.Usings 982325"];
5620 [label="this.AllowUnsafe 982326"];
5621 [label="this.TopLevelBinderFlags 982327"];
5622 [label="this.NullableContextOptions 982328"];
5623 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 982329"];
5624 [label="OutputKind.DynamicallyLinkedLibrary 982330"];
5625 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 982331"];
5626 [label="param CSharpCompilationOptions(OutputKind outputKind) 982332"];
5627 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics = false) 982333"];
5628 [label="param CSharpCompilationOptions(string? moduleName = null) 982334"];
5629 [label="param CSharpCompilationOptions(string? mainTypeName = null) 982335"];
5630 [label="param CSharpCompilationOptions(string? scriptClassName = null) 982336"];
5631 [label="param CSharpCompilationOptions(IEnumerable<string>? usings = null) 982337"];
5632 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel = OptimizationLevel.Debug) 982338"];
5633 [label="param CSharpCompilationOptions(bool checkOverflow = false) 982339"];
5634 [label="param CSharpCompilationOptions(bool allowUnsafe = false) 982340"];
5635 [label="param CSharpCompilationOptions(string? cryptoKeyContainer = null) 982341"];
5636 [label="param CSharpCompilationOptions(string? cryptoKeyFile = null) 982342"];
5637 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey = default) 982343"];
5638 [label="param CSharpCompilationOptions(bool? delaySign = null) 982344"];
5639 [label="param CSharpCompilationOptions(Platform platform = Platform.AnyCpu) 982345"];
5640 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption = ReportDiagnostic.Default) 982346"];
5641 [label="param CSharpCompilationOptions(int warningLevel = Diagnostic.DefaultWarningLevel) 982347"];
5642 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions = null) 982348"];
5643 [label="param CSharpCompilationOptions(bool concurrentBuild = true) 982349"];
5644 [label="param CSharpCompilationOptions(bool deterministic = false) 982350"];
5645 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver = null) 982351"];
5646 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver = null) 982352"];
5647 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver = null) 982353"];
5648 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer = null) 982354"];
5649 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider = null) 982355"];
5650 [label="param CSharpCompilationOptions(bool publicSign = false) 982356"];
5651 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions = MetadataImportOptions.Public) 982357"];
5652 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions = NullableContextOptions.Disable) 982358"];
5653 [label="param CSharpCompilationOptions(this) 982359"];
5654 [label="outputKind 982360"];
5655 [label="reportSuppressedDiagnostics 982361"];
5656 [label="moduleName 982362"];
5657 [label="mainTypeName 982363"];
5658 [label="scriptClassName 982364"];
5659 [label="usings 982365"];
5660 [label="optimizationLevel 982366"];
5661 [label="checkOverflow 982367"];
5662 [label="allowUnsafe 982368"];
5663 [label="cryptoKeyContainer 982369"];
5664 [label="cryptoKeyFile 982370"];
5665 [label="cryptoPublicKey 982371"];
5666 [label="delaySign 982372"];
5667 [label="platform 982373"];
5668 [label="generalDiagnosticOption 982374"];
5669 [label="warningLevel 982375"];
5670 [label="specificDiagnosticOptions 982376"];
5671 [label="concurrentBuild 982377"];
5672 [label="deterministic 982378"];
5673 [label="default 982379"];
5674 [label="false 982380"];
5675 [label="xmlReferenceResolver 982381"];
5676 [label="sourceReferenceResolver 982382"];
5677 [label="null 982383"];
5678 [label="metadataReferenceResolver 982384"];
5679 [label="assemblyIdentityComparer 982385"];
5680 [label="strongNameProvider 982386"];
5681 [label="metadataImportOptions 982387"];
5682 [label="false 982388"];
5683 [label="publicSign 982389"];
5684 [label="BinderFlags.None 982390"];
5685 [label="nullableContextOptions 982391"];
5686 [label="param CSharpCompilationOptions(OutputKind outputKind) 982392"];
5687 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics) 982393"];
5688 [label="param CSharpCompilationOptions(string? moduleName) 982394"];
5689 [label="param CSharpCompilationOptions(string? mainTypeName) 982395"];
5690 [label="param CSharpCompilationOptions(string? scriptClassName) 982396"];
5691 [label="param CSharpCompilationOptions(IEnumerable<string>? usings) 982397"];
5692 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel) 982398"];
5693 [label="param CSharpCompilationOptions(bool checkOverflow) 982399"];
5694 [label="param CSharpCompilationOptions(bool allowUnsafe) 982400"];
5695 [label="param CSharpCompilationOptions(string? cryptoKeyContainer) 982401"];
5696 [label="param CSharpCompilationOptions(string? cryptoKeyFile) 982402"];
5697 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey) 982403"];
5698 [label="param CSharpCompilationOptions(bool? delaySign) 982404"];
5699 [label="param CSharpCompilationOptions(Platform platform) 982405"];
5700 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption) 982406"];
5701 [label="param CSharpCompilationOptions(int warningLevel) 982407"];
5702 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions) 982408"];
5703 [label="param CSharpCompilationOptions(bool concurrentBuild) 982409"];
5704 [label="param CSharpCompilationOptions(bool deterministic) 982410"];
5705 [label="param CSharpCompilationOptions(DateTime currentLocalTime) 982411"];
5706 [label="param CSharpCompilationOptions(bool debugPlusMode) 982412"];
5707 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver) 982413"];
5708 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver) 982414"];
5709 [label="param CSharpCompilationOptions(SyntaxTreeOptionsProvider? syntaxTreeOptionsProvider) 982415"];
5710 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver) 982416"];
5711 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer) 982417"];
5712 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider) 982418"];
5713 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions) 982419"];
5714 [label="param CSharpCompilationOptions(bool referencesSupersedeLowerVersions) 982420"];
5715 [label="param CSharpCompilationOptions(bool publicSign) 982421"];
5716 [label="param CSharpCompilationOptions(BinderFlags topLevelBinderFlags) 982422"];
5717 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions) 982423"];
5718 [label="param CSharpCompilationOptions(this) 982424"];
5719 [label="outputKind 982425"];
5720 [label="reportSuppressedDiagnostics 982426"];
5721 [label="moduleName 982427"];
5722 [label="mainTypeName 982428"];
5723 [label="scriptClassName 982429"];
5724 [label="cryptoKeyContainer 982430"];
5725 [label="cryptoKeyFile 982431"];
5726 [label="cryptoPublicKey 982432"];
5727 [label="delaySign 982433"];
5728 [label="publicSign 982434"];
5729 [label="optimizationLevel 982435"];
5730 [label="checkOverflow 982436"];
5731 [label="platform 982437"];
5732 [label="generalDiagnosticOption 982438"];
5733 [label="warningLevel 982439"];
5734 [label="specificDiagnosticOptions 982440"];
5735 [label="specificDiagnosticOptions.ToImmutableDictionaryOrEmpty() 982441"];
5736 [label="concurrentBuild 982442"];
5737 [label="deterministic 982443"];
5738 [label="currentLocalTime 982444"];
5739 [label="debugPlusMode 982445"];
5740 [label="xmlReferenceResolver 982446"];
5741 [label="sourceReferenceResolver 982447"];
5742 [label="syntaxTreeOptionsProvider 982448"];
5743 [label="metadataReferenceResolver 982449"];
5744 [label="assemblyIdentityComparer 982450"];
5745 [label="strongNameProvider 982451"];
5746 [label="metadataImportOptions 982452"];
5747 [label="referencesSupersedeLowerVersions 982453"];
5748 [label="param CSharpCompilationOptions(this) 982454"];
5749 [label="public bool AllowUnsafe { get; private set; } 982455"];
5750 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 982456"];
5751 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 982457"];
5752 [label="this.Usings = usings.AsImmutableOrEmpty(); 982458"];
5753 [label="this.Usings 982459"];
5754 [label="this.AllowUnsafe 982460"];
5755 [label="this.TopLevelBinderFlags 982461"];
5756 [label="this.NullableContextOptions 982462"];
5757 [label="true 982463"];
5758 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 982464"];
5759 [label="param WithReferencesSupersedeLowerVersions(bool value) 982465"];
5760 [label="param WithReferencesSupersedeLowerVersions(this) 982466"];
5761 [label="if (value == this.ReferencesSupersedeLowerVersions)\n            {\n                return this;\n            } 982467"];
5762 [label="return new CSharpCompilationOptions(this) { ReferencesSupersedeLowerVersions = value }; 982468"];
5763 [label="return new CSharpCompilationOptions(this) { ReferencesSupersedeLowerVersions = value }; 982469"];
5764 [label="new CSharpCompilationOptions(this) { ReferencesSupersedeLowerVersions = value } 982470"];
5765 [label="param CSharpCompilationOptions(CSharpCompilationOptions other) 982471"];
5766 [label="param CSharpCompilationOptions(this) 982472"];
5767 [label="other.OutputKind 982473"];
5768 [label="other.ModuleName 982474"];
5769 [label="other.MainTypeName 982475"];
5770 [label="other.ScriptClassName 982476"];
5771 [label="other.Usings 982477"];
5772 [label="other.OptimizationLevel 982478"];
5773 [label="other.CheckOverflow 982479"];
5774 [label="other.AllowUnsafe 982480"];
5775 [label="other.CryptoKeyContainer 982481"];
5776 [label="other.CryptoKeyFile 982482"];
5777 [label="other.CryptoPublicKey 982483"];
5778 [label="other.DelaySign 982484"];
5779 [label="other.Platform 982485"];
5780 [label="other.GeneralDiagnosticOption 982486"];
5781 [label="other.WarningLevel 982487"];
5782 [label="other.SpecificDiagnosticOptions 982488"];
5783 [label="other.ConcurrentBuild 982489"];
5784 [label="other.Deterministic 982490"];
5785 [label="other.CurrentLocalTime 982491"];
5786 [label="other.DebugPlusMode 982492"];
5787 [label="other.XmlReferenceResolver 982493"];
5788 [label="other.SourceReferenceResolver 982494"];
5789 [label="other.SyntaxTreeOptionsProvider 982495"];
5790 [label="other.MetadataReferenceResolver 982496"];
5791 [label="other.AssemblyIdentityComparer 982497"];
5792 [label="other.StrongNameProvider 982498"];
5793 [label="other.MetadataImportOptions 982499"];
5794 [label="other.ReferencesSupersedeLowerVersions 982500"];
5795 [label="other.ReportSuppressedDiagnostics 982501"];
5796 [label="other.PublicSign 982502"];
5797 [label="other.TopLevelBinderFlags 982503"];
5798 [label="other.NullableContextOptions 982504"];
5799 [label="param CSharpCompilationOptions(this) 982505"];
5800 [label="param CSharpCompilationOptions(OutputKind outputKind) 982506"];
5801 [label="param CSharpCompilationOptions(bool reportSuppressedDiagnostics) 982507"];
5802 [label="param CSharpCompilationOptions(string? moduleName) 982508"];
5803 [label="param CSharpCompilationOptions(string? mainTypeName) 982509"];
5804 [label="param CSharpCompilationOptions(string? scriptClassName) 982510"];
5805 [label="param CSharpCompilationOptions(IEnumerable<string>? usings) 982511"];
5806 [label="param CSharpCompilationOptions(OptimizationLevel optimizationLevel) 982512"];
5807 [label="param CSharpCompilationOptions(bool checkOverflow) 982513"];
5808 [label="param CSharpCompilationOptions(bool allowUnsafe) 982514"];
5809 [label="param CSharpCompilationOptions(string? cryptoKeyContainer) 982515"];
5810 [label="param CSharpCompilationOptions(string? cryptoKeyFile) 982516"];
5811 [label="param CSharpCompilationOptions(ImmutableArray<byte> cryptoPublicKey) 982517"];
5812 [label="param CSharpCompilationOptions(bool? delaySign) 982518"];
5813 [label="param CSharpCompilationOptions(Platform platform) 982519"];
5814 [label="param CSharpCompilationOptions(ReportDiagnostic generalDiagnosticOption) 982520"];
5815 [label="param CSharpCompilationOptions(int warningLevel) 982521"];
5816 [label="param CSharpCompilationOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>>? specificDiagnosticOptions) 982522"];
5817 [label="param CSharpCompilationOptions(bool concurrentBuild) 982523"];
5818 [label="param CSharpCompilationOptions(bool deterministic) 982524"];
5819 [label="param CSharpCompilationOptions(DateTime currentLocalTime) 982525"];
5820 [label="param CSharpCompilationOptions(bool debugPlusMode) 982526"];
5821 [label="param CSharpCompilationOptions(XmlReferenceResolver? xmlReferenceResolver) 982527"];
5822 [label="param CSharpCompilationOptions(SourceReferenceResolver? sourceReferenceResolver) 982528"];
5823 [label="param CSharpCompilationOptions(SyntaxTreeOptionsProvider? syntaxTreeOptionsProvider) 982529"];
5824 [label="param CSharpCompilationOptions(MetadataReferenceResolver? metadataReferenceResolver) 982530"];
5825 [label="param CSharpCompilationOptions(AssemblyIdentityComparer? assemblyIdentityComparer) 982531"];
5826 [label="param CSharpCompilationOptions(StrongNameProvider? strongNameProvider) 982532"];
5827 [label="param CSharpCompilationOptions(MetadataImportOptions metadataImportOptions) 982533"];
5828 [label="param CSharpCompilationOptions(bool referencesSupersedeLowerVersions) 982534"];
5829 [label="param CSharpCompilationOptions(bool publicSign) 982535"];
5830 [label="param CSharpCompilationOptions(BinderFlags topLevelBinderFlags) 982536"];
5831 [label="param CSharpCompilationOptions(NullableContextOptions nullableContextOptions) 982537"];
5832 [label="param CSharpCompilationOptions(this) 982538"];
5833 [label="param CSharpCompilationOptions(this) 982539"];
5834 [label="param CSharpCompilationOptions(this) 982540"];
5835 [label="public bool AllowUnsafe { get; private set; } 982541"];
5836 [label="internal BinderFlags TopLevelBinderFlags { get; private set; } 982542"];
5837 [label="public override NullableContextOptions NullableContextOptions { get; protected set; } 982543"];
5838 [label="this.Usings = usings.AsImmutableOrEmpty(); 982544"];
5839 [label="this.Usings 982545"];
5840 [label="this.AllowUnsafe 982546"];
5841 [label="ReferencesSupersedeLowerVersions 982547"];
5842 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 982548"];
5843 [label="param Create(string? assemblyName) 982549"];
5844 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 982550"];
5845 [label="param Create(IEnumerable<MetadataReference>? references = null) 982551"];
5846 [label="param Create(CSharpCompilationOptions? options = null) 982552"];
5847 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 982553"];
5848 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 982554"];
5849 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 982555"];
5850 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 982556"];
5851 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 982557"];
5852 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 982558"];
5853 [label="param Create(string? assemblyName) 982559"];
5854 [label="param Create(CSharpCompilationOptions options) 982560"];
5855 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 982561"];
5856 [label="param Create(IEnumerable<MetadataReference>? references) 982562"];
5857 [label="param Create(CSharpCompilation? previousSubmission) 982563"];
5858 [label="param Create(Type? returnType) 982564"];
5859 [label="param Create(Type? hostObjectType) 982565"];
5860 [label="param Create(bool isSubmission) 982566"];
5861 [label="RoslynDebug.Assert(options != null); 982567"];
5862 [label="RoslynDebug.Assert(options != null); 982568"];
5863 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 982569"];
5864 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 982570"];
5865 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 982571"];
5866 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 982572"];
5867 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 982573"];
5868 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 982574"];
5869 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 982575"];
5870 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 982576"];
5871 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 982577"];
5872 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 982578"];
5873 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 982579"];
5874 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 982580"];
5875 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 982581"];
5876 [label="new MessageProvider() 982582"];
5877 [label="param MessageProvider(this) 982583"];
5878 [label="Instance = new MessageProvider() 982584"];
5879 [label="ObjectBinder.RegisterTypeReader(typeof(MessageProvider), r => Instance); 982585"];
5880 [label="ObjectBinder.RegisterTypeReader(typeof(MessageProvider), r => Instance); 982586"];
5881 [label="ObjectBinder.RegisterTypeReader(typeof(MessageProvider), r => Instance); 982587"];
5882 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 982588"];
5883 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 982589"];
5884 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 982590"];
5885 [label="param SyntaxAndDeclarationManager(string scriptClassName) 982591"];
5886 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 982592"];
5887 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 982593"];
5888 [label="param SyntaxAndDeclarationManager(bool isSubmission) 982594"];
5889 [label="param SyntaxAndDeclarationManager(State state) 982595"];
5890 [label="param SyntaxAndDeclarationManager(this) 982596"];
5891 [label="externalSyntaxTrees 982597"];
5892 [label="scriptClassName 982598"];
5893 [label="resolver 982599"];
5894 [label="messageProvider 982600"];
5895 [label="isSubmission 982601"];
5896 [label="param SyntaxAndDeclarationManager(this) 982602"];
5897 [label="param SyntaxAndDeclarationManager(this) 982603"];
5898 [label="_lazyState 982604"];
5899 [label="_lazyState 982605"];
5900 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 982606"];
5901 [label="param CSharpCompilation(string? assemblyName) 982607"];
5902 [label="param CSharpCompilation(CSharpCompilationOptions options) 982608"];
5903 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 982609"];
5904 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 982610"];
5905 [label="param CSharpCompilation(Type? submissionReturnType) 982611"];
5906 [label="param CSharpCompilation(Type? hostObjectType) 982612"];
5907 [label="param CSharpCompilation(bool isSubmission) 982613"];
5908 [label="param CSharpCompilation(ReferenceManager? referenceManager) 982614"];
5909 [label="param CSharpCompilation(bool reuseReferenceManager) 982615"];
5910 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 982616"];
5911 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 982617"];
5912 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 982618"];
5913 [label="param CSharpCompilation(this) 982619"];
5914 [label="assemblyName 982620"];
5915 [label="options 982621"];
5916 [label="references 982622"];
5917 [label="previousSubmission 982623"];
5918 [label="submissionReturnType 982624"];
5919 [label="hostObjectType 982625"];
5920 [label="isSubmission 982626"];
5921 [label="referenceManager 982627"];
5922 [label="reuseReferenceManager 982628"];
5923 [label="syntaxAndDeclarations 982629"];
5924 [label="syntaxAndDeclarations.ExternalSyntaxTrees 982630"];
5925 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 982631"];
5926 [label="semanticModelProvider 982632"];
5927 [label="eventQueue 982633"];
5928 [label="param CSharpCompilation(this) 982634"];
5929 [label="param CSharpCompilation(string? assemblyName) 982635"];
5930 [label="param CSharpCompilation(CSharpCompilationOptions options) 982636"];
5931 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 982637"];
5932 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 982638"];
5933 [label="param CSharpCompilation(Type? submissionReturnType) 982639"];
5934 [label="param CSharpCompilation(Type? hostObjectType) 982640"];
5935 [label="param CSharpCompilation(bool isSubmission) 982641"];
5936 [label="param CSharpCompilation(ReferenceManager? referenceManager) 982642"];
5937 [label="param CSharpCompilation(bool reuseReferenceManager) 982643"];
5938 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 982644"];
5939 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 982645"];
5940 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 982646"];
5941 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 982647"];
5942 [label="param CSharpCompilation(this) 982648"];
5943 [label="assemblyName 982649"];
5944 [label="references 982650"];
5945 [label="features 982651"];
5946 [label="isSubmission 982652"];
5947 [label="semanticModelProvider 982653"];
5948 [label="eventQueue 982654"];
5949 [label="param CSharpCompilation(this) 982655"];
5950 [label="param CSharpCompilation(this) 982656"];
5951 [label="_options 982657"];
5952 [label="_globalImports 982658"];
5953 [label="_previousSubmissionImports 982659"];
5954 [label="_globalNamespaceAlias 982660"];
5955 [label="_scriptClass 982661"];
5956 [label="_lazyHostObjectTypeSymbol 982662"];
5957 [label="_lazyImportInfos 982663"];
5958 [label="_conversions 982664"];
5959 [label="_anonymousTypeManager 982665"];
5960 [label="_lazyGlobalNamespace 982666"];
5961 [label="builtInOperators 982667"];
5962 [label="_lazyAssemblySymbol 982668"];
5963 [label="_referenceManager 982669"];
5964 [label="_syntaxAndDeclarations 982670"];
5965 [label="_lazyEntryPoint 982671"];
5966 [label="_lazyEmitNullablePublicOnly 982672"];
5967 [label="_lazyCompilationUnitCompletedTrees 982673"];
5968 [label="NullableAnalysisData 982674"];
5969 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 982675"];
5970 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 982676"];
5971 [label="_externAliasTargets 982677"];
5972 [label="_moduleInitializerMethods 982678"];
5973 [label="_binderFactories 982679"];
5974 [label="_ignoreAccessibilityBinderFactories 982680"];
5975 [label="_lazyDeclarationDiagnostics 982681"];
5976 [label="_declarationDiagnosticsFrozen 982682"];
5977 [label="new DiagnosticBag() 982683"];
5978 [label="_additionalCodegenWarnings = new DiagnosticBag() 982684"];
5979 [label="WellKnownMemberSignatureComparer 982685"];
5980 [label="_lazyWellKnownTypes 982686"];
5981 [label="_lazyWellKnownTypeMembers 982687"];
5982 [label="_usesNullableAttributes 982688"];
5983 [label="_needsGeneratedAttributes 982689"];
5984 [label="_needsGeneratedAttributes_IsFrozen 982690"];
5985 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 982691"];
5986 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 982692"];
5987 [label="new WellKnownMembersSignatureComparer(this) 982693"];
5988 [label="param WellKnownMembersSignatureComparer(CSharpCompilation compilation) 982694"];
5989 [label="param WellKnownMembersSignatureComparer(this) 982695"];
5990 [label="new SpecialMembersSignatureComparer() 982696"];
5991 [label="param SpecialMembersSignatureComparer(this) 982697"];
5992 [label="Instance = new SpecialMembersSignatureComparer() 982698"];
5993 [label="param WellKnownMembersSignatureComparer(this) 982699"];
5994 [label="param SpecialMembersSignatureComparer(this) 982700"];
5995 [label="param SpecialMembersSignatureComparer(this) 982701"];
5996 [label="_compilation 982702"];
5997 [label="_compilation 982703"];
5998 [label="WellKnownMemberSignatureComparer 982704"];
5999 [label="_options 982705"];
6000 [label="this.builtInOperators = new BuiltInOperators(this); 982706"];
6001 [label="this.builtInOperators = new BuiltInOperators(this); 982707"];
6002 [label="new BuiltInOperators(this) 982708"];
6003 [label="param BuiltInOperators(CSharpCompilation compilation) 982709"];
6004 [label="param BuiltInOperators(this) 982710"];
6005 [label="_compilation 982711"];
6006 [label="_builtInUnaryOperators 982712"];
6007 [label="_builtInOperators 982713"];
6008 [label="_compilation 982714"];
6009 [label="this.builtInOperators 982715"];
6010 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 982716"];
6011 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 982717"];
6012 [label="_scriptClass 982718"];
6013 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 982719"];
6014 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 982720"];
6015 [label="_globalImports 982721"];
6016 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 982722"];
6017 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 982723"];
6018 [label="_previousSubmissionImports 982724"];
6019 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 982725"];
6020 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 982726"];
6021 [label="_globalNamespaceAlias 982727"];
6022 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 982728"];
6023 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 982729"];
6024 [label="new AnonymousTypeManager(this) 982730"];
6025 [label="param AnonymousTypeManager(CSharpCompilation compilation) 982731"];
6026 [label="param AnonymousTypeManager(this) 982732"];
6027 [label="param AnonymousTypeManager(this) 982733"];
6028 [label="public CSharpCompilation Compilation { get; } 982734"];
6029 [label="_lazyAnonymousTypeTemplates 982735"];
6030 [label="_lazySynthesizedDelegates 982736"];
6031 [label="new ConcurrentDictionary<Location, bool>() 982737"];
6032 [label="_sourceLocationsSeen = new ConcurrentDictionary<Location, bool>() 982738"];
6033 [label="Debug.Assert(compilation != null); 982739"];
6034 [label="Debug.Assert(compilation != null); 982740"];
6035 [label="this.Compilation 982741"];
6036 [label="_anonymousTypeManager 982742"];
6037 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 982743"];
6038 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 982744"];
6039 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 982745"];
6040 [label="LanguageVersion? result = null; 982746"];
6041 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 982747"];
6042 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 982748"];
6043 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 982749"];
6044 [label="LanguageVersion.Default.MapSpecifiedToEffectiveVersion() 982750"];
6045 [label="param MapSpecifiedToEffectiveVersion(this LanguageVersion version) 982751"];
6046 [label="switch (version)\n            {\n                case LanguageVersion.Latest:\n                case LanguageVersion.Default:\n                case LanguageVersion.LatestMajor:\n                    return LanguageVersion.CSharp9;\n                default:\n                    return version;\n            } 982752"];
6047 [label="return LanguageVersion.CSharp9; 982753"];
6048 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 982754"];
6049 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 982755"];
6050 [label="this.LanguageVersion 982756"];
6051 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 982757"];
6052 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 982758"];
6053 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 982759"];
6054 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 982760"];
6055 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 982761"];
6056 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 982762"];
6057 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 982763"];
6058 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 982764"];
6059 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 982765"];
6060 [label="this.Options 982766"];
6061 [label="get\n            {\n                return _options;\n            } 982767"];
6062 [label="return _options; 982768"];
6063 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 982769"];
6064 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 982770"];
6065 [label="new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata) 982771"];
6066 [label="param ReferenceManager(string simpleAssemblyName) 982772"];
6067 [label="param ReferenceManager(AssemblyIdentityComparer identityComparer) 982773"];
6068 [label="param ReferenceManager(Dictionary<MetadataReference, MetadataOrDiagnostic>? observedMetadata) 982774"];
6069 [label="param ReferenceManager(this) 982775"];
6070 [label="simpleAssemblyName 982776"];
6071 [label="identityComparer 982777"];
6072 [label="observedMetadata 982778"];
6073 [label="param ReferenceManager(this) 982779"];
6074 [label="param ReferenceManager(this) 982780"];
6075 [label="_referenceManager 982781"];
6076 [label="_syntaxAndDeclarations 982782"];
6077 [label="Debug.Assert(_lazyAssemblySymbol is null); 982783"];
6078 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 982784"];
6079 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 982785"];
6080 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 982786"];
6081 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 982787"];
6082 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 982788"];
6083 [label="compilation.AddSyntaxTrees(syntaxTrees) 982789"];
6084 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 982790"];
6085 [label="param AddSyntaxTrees(this) 982791"];
6086 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 982792"];
6087 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 982793"];
6088 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 982794"];
6089 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 982795"];
6090 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 982796"];
6091 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 982797"];
6092 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 982798"];
6093 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 982799"];
6094 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 982800"];
6095 [label="bool reuseReferenceManager = true; 982801"];
6096 [label="int i = 0; 982802"];
6097 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 982803"];
6098 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 982804"];
6099 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 982805"];
6100 [label="tree.HasCompilationUnitRoot 982806"];
6101 [label="get\n                {\n                    return _hasCompilationUnitRoot;\n                } 982807"];
6102 [label="return _hasCompilationUnitRoot; 982808"];
6103 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 982809"];
6104 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 982810"];
6105 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 982811"];
6106 [label="externalSyntaxTrees.Add(tree); 982812"];
6107 [label="externalSyntaxTrees.Add(tree); 982813"];
6108 [label="tree.HasReferenceOrLoadDirectives 982814"];
6109 [label="get\n            {\n                Debug.Assert(HasCompilationUnitRoot);\n\n                if (Options.Kind == SourceCodeKind.Script)\n                {\n                    var compilationUnitRoot = GetCompilationUnitRoot();\n                    return compilationUnitRoot.GetReferenceDirectives().Count > 0 || compilationUnitRoot.GetLoadDirectives().Count > 0;\n                }\n\n                return false;\n            } 982815"];
6110 [label="HasCompilationUnitRoot 982816"];
6111 [label="get\n                {\n                    return _hasCompilationUnitRoot;\n                } 982817"];
6112 [label="return _hasCompilationUnitRoot; 982818"];
6113 [label="Debug.Assert(HasCompilationUnitRoot); 982819"];
6114 [label="Options 982820"];
6115 [label="get\n                {\n                    return _options;\n                } 982821"];
6116 [label="return _options; 982822"];
6117 [label="if (Options.Kind == SourceCodeKind.Script)\n                {\n                    var compilationUnitRoot = GetCompilationUnitRoot();\n                    return compilationUnitRoot.GetReferenceDirectives().Count > 0 || compilationUnitRoot.GetLoadDirectives().Count > 0;\n                } 982823"];
6118 [label="return false; 982824"];
6119 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 982825"];
6120 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 982826"];
6121 [label="i++; 982827"];
6122 [label="externalSyntaxTrees.Free(); 982828"];
6123 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 982829"];
6124 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 982830"];
6125 [label="syntaxAndDeclarations.AddSyntaxTrees(trees) 982831"];
6126 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 982832"];
6127 [label="param AddSyntaxTrees(this) 982833"];
6128 [label="var scriptClassName = this.ScriptClassName; 982834"];
6129 [label="var resolver = this.Resolver; 982835"];
6130 [label="var messageProvider = this.MessageProvider; 982836"];
6131 [label="var isSubmission = this.IsSubmission; 982837"];
6132 [label="var state = _lazyState; 982838"];
6133 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 982839"];
6134 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 982840"];
6135 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 982841"];
6136 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 982842"];
6137 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 982843"];
6138 [label="this.WithExternalSyntaxTrees(newExternalSyntaxTrees) 982844"];
6139 [label="param WithExternalSyntaxTrees(ImmutableArray<SyntaxTree> trees) 982845"];
6140 [label="param WithExternalSyntaxTrees(this) 982846"];
6141 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 982847"];
6142 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 982848"];
6143 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 982849"];
6144 [label="new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null) 982850"];
6145 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 982851"];
6146 [label="param SyntaxAndDeclarationManager(string scriptClassName) 982852"];
6147 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 982853"];
6148 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 982854"];
6149 [label="param SyntaxAndDeclarationManager(bool isSubmission) 982855"];
6150 [label="param SyntaxAndDeclarationManager(State state) 982856"];
6151 [label="param SyntaxAndDeclarationManager(this) 982857"];
6152 [label="param SyntaxAndDeclarationManager(this) 982858"];
6153 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 982859"];
6154 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 982860"];
6155 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 982861"];
6156 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 982862"];
6157 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 982863"];
6158 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 982864"];
6159 [label="param Update(ReferenceManager referenceManager) 982865"];
6160 [label="param Update(bool reuseReferenceManager) 982866"];
6161 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 982867"];
6162 [label="param Update(this) 982868"];
6163 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 982869"];
6164 [label="this.PreviousSubmission 982870"];
6165 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 982871"];
6166 [label="ScriptCompilationInfo 982872"];
6167 [label="ScriptCompilationInfo?.PreviousScriptCompilation 982873"];
6168 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 982874"];
6169 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 982875"];
6170 [label="this.SubmissionReturnType 982876"];
6171 [label="=> ScriptCompilationInfo 982877"];
6172 [label="ScriptCompilationInfo 982878"];
6173 [label="this.HostObjectType 982879"];
6174 [label="=> ScriptCompilationInfo 982880"];
6175 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 982881"];
6176 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 982882"];
6177 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 982883"];
6178 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 982884"];
6179 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 982885"];
6180 [label="param CSharpCompilation(string? assemblyName) 982886"];
6181 [label="param CSharpCompilation(CSharpCompilationOptions options) 982887"];
6182 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 982888"];
6183 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 982889"];
6184 [label="param CSharpCompilation(Type? submissionReturnType) 982890"];
6185 [label="param CSharpCompilation(Type? hostObjectType) 982891"];
6186 [label="param CSharpCompilation(bool isSubmission) 982892"];
6187 [label="param CSharpCompilation(ReferenceManager? referenceManager) 982893"];
6188 [label="param CSharpCompilation(bool reuseReferenceManager) 982894"];
6189 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 982895"];
6190 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 982896"];
6191 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 982897"];
6192 [label="param CSharpCompilation(this) 982898"];
6193 [label="previousSubmission 982899"];
6194 [label="submissionReturnType 982900"];
6195 [label="hostObjectType 982901"];
6196 [label="syntaxAndDeclarations.ExternalSyntaxTrees 982902"];
6197 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 982903"];
6198 [label="get\n            {\n                return this.Options;\n            } 982904"];
6199 [label="this.Options 982905"];
6200 [label="get\n                {\n                    return _options;\n                } 982906"];
6201 [label="return _options; 982907"];
6202 [label="return this.Options; 982908"];
6203 [label="get\n            {\n                return _features;\n            } 982909"];
6204 [label="return _features; 982910"];
6205 [label="eventQueue 982911"];
6206 [label="param CSharpCompilation(this) 982912"];
6207 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 982913"];
6208 [label="param CSharpCompilation(Type? submissionReturnType) 982914"];
6209 [label="param CSharpCompilation(Type? hostObjectType) 982915"];
6210 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 982916"];
6211 [label="param CSharpCompilation(this) 982917"];
6212 [label="eventQueue 982918"];
6213 [label="param CSharpCompilation(this) 982919"];
6214 [label="_options 982920"];
6215 [label="_globalImports 982921"];
6216 [label="_previousSubmissionImports 982922"];
6217 [label="_globalNamespaceAlias 982923"];
6218 [label="_scriptClass 982924"];
6219 [label="_lazyHostObjectTypeSymbol 982925"];
6220 [label="_lazyImportInfos 982926"];
6221 [label="_conversions 982927"];
6222 [label="_anonymousTypeManager 982928"];
6223 [label="_lazyGlobalNamespace 982929"];
6224 [label="builtInOperators 982930"];
6225 [label="_lazyAssemblySymbol 982931"];
6226 [label="_referenceManager 982932"];
6227 [label="_syntaxAndDeclarations 982933"];
6228 [label="_lazyEntryPoint 982934"];
6229 [label="_lazyEmitNullablePublicOnly 982935"];
6230 [label="_lazyCompilationUnitCompletedTrees 982936"];
6231 [label="NullableAnalysisData 982937"];
6232 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 982938"];
6233 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 982939"];
6234 [label="_externAliasTargets 982940"];
6235 [label="_moduleInitializerMethods 982941"];
6236 [label="_binderFactories 982942"];
6237 [label="_ignoreAccessibilityBinderFactories 982943"];
6238 [label="_lazyDeclarationDiagnostics 982944"];
6239 [label="_declarationDiagnosticsFrozen 982945"];
6240 [label="new DiagnosticBag() 982946"];
6241 [label="_additionalCodegenWarnings = new DiagnosticBag() 982947"];
6242 [label="WellKnownMemberSignatureComparer 982948"];
6243 [label="_lazyWellKnownTypes 982949"];
6244 [label="_lazyWellKnownTypeMembers 982950"];
6245 [label="_usesNullableAttributes 982951"];
6246 [label="_needsGeneratedAttributes 982952"];
6247 [label="_needsGeneratedAttributes_IsFrozen 982953"];
6248 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 982954"];
6249 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 982955"];
6250 [label="new WellKnownMembersSignatureComparer(this) 982956"];
6251 [label="param WellKnownMembersSignatureComparer(CSharpCompilation compilation) 982957"];
6252 [label="param WellKnownMembersSignatureComparer(this) 982958"];
6253 [label="param WellKnownMembersSignatureComparer(this) 982959"];
6254 [label="param SpecialMembersSignatureComparer(this) 982960"];
6255 [label="param SpecialMembersSignatureComparer(this) 982961"];
6256 [label="_compilation 982962"];
6257 [label="_compilation 982963"];
6258 [label="WellKnownMemberSignatureComparer 982964"];
6259 [label="this.builtInOperators = new BuiltInOperators(this); 982965"];
6260 [label="this.builtInOperators = new BuiltInOperators(this); 982966"];
6261 [label="new BuiltInOperators(this) 982967"];
6262 [label="param BuiltInOperators(CSharpCompilation compilation) 982968"];
6263 [label="param BuiltInOperators(this) 982969"];
6264 [label="_compilation 982970"];
6265 [label="_builtInUnaryOperators 982971"];
6266 [label="_builtInOperators 982972"];
6267 [label="_compilation 982973"];
6268 [label="this.builtInOperators 982974"];
6269 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 982975"];
6270 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 982976"];
6271 [label="new AnonymousTypeManager(this) 982977"];
6272 [label="param AnonymousTypeManager(CSharpCompilation compilation) 982978"];
6273 [label="param AnonymousTypeManager(this) 982979"];
6274 [label="param AnonymousTypeManager(this) 982980"];
6275 [label="public CSharpCompilation Compilation { get; } 982981"];
6276 [label="_lazyAnonymousTypeTemplates 982982"];
6277 [label="_lazySynthesizedDelegates 982983"];
6278 [label="new ConcurrentDictionary<Location, bool>() 982984"];
6279 [label="_sourceLocationsSeen = new ConcurrentDictionary<Location, bool>() 982985"];
6280 [label="Debug.Assert(compilation != null); 982986"];
6281 [label="Debug.Assert(compilation != null); 982987"];
6282 [label="this.Compilation 982988"];
6283 [label="_anonymousTypeManager 982989"];
6284 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 982990"];
6285 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 982991"];
6286 [label="LanguageVersion? result = null; 982992"];
6287 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 982993"];
6288 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 982994"];
6289 [label="tree.Options 982995"];
6290 [label="get\n            {\n                return this.Options;\n            } 982996"];
6291 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 982997"];
6292 [label="result = version; 982998"];
6293 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 982999"];
6294 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 983000"];
6295 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 983001"];
6296 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 983002"];
6297 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 983003"];
6298 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 983004"];
6299 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 983005"];
6300 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 983006"];
6301 [label="referenceManager.AssertCanReuseForCompilation(this); 983007"];
6302 [label="referenceManager.AssertCanReuseForCompilation(this); 983008"];
6303 [label="_referenceManager 983009"];
6304 [label="Debug.Assert(_lazyAssemblySymbol is null); 983010"];
6305 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 983011"];
6306 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 983012"];
6307 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 983013"];
6308 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 983014"];
6309 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 983015"];
6310 [label="return compilation; 983016"];
6311 [label="var compilation = createCompilationLambda(); 983017"];
6312 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 983018"];
6313 [label="IsNullableEnabled(compilation) 983019"];
6314 [label="param IsNullableEnabled(CSharpCompilation compilation) 983020"];
6315 [label="compilation.SyntaxTrees 983021"];
6316 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 983022"];
6317 [label="_syntaxAndDeclarations.GetLazyState() 983023"];
6318 [label="param GetLazyState(this) 983024"];
6319 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 983025"];
6320 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 983026"];
6321 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 983027"];
6322 [label="CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission) 983028"];
6323 [label="param CreateState(ImmutableArray<SyntaxTree> externalSyntaxTrees) 983029"];
6324 [label="param CreateState(string scriptClassName) 983030"];
6325 [label="param CreateState(SourceReferenceResolver resolver) 983031"];
6326 [label="param CreateState(CommonMessageProvider messageProvider) 983032"];
6327 [label="param CreateState(bool isSubmission) 983033"];
6328 [label="var treesBuilder = ArrayBuilder<SyntaxTree>.GetInstance(); 983034"];
6329 [label="var ordinalMapBuilder = PooledDictionary<SyntaxTree, int>.GetInstance(); 983035"];
6330 [label="var loadDirectiveMapBuilder = PooledDictionary<SyntaxTree, ImmutableArray<LoadDirective>>.GetInstance(); 983036"];
6331 [label="var loadedSyntaxTreeMapBuilder = PooledDictionary<string, SyntaxTree>.GetInstance(); 983037"];
6332 [label="var declMapBuilder = PooledDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>>.GetInstance(); 983038"];
6333 [label="allOlderRootDeclarations: ImmutableSetWithInsertionOrder<RootSingleNamespaceDeclaration>.Empty 983039"];
6334 [label="null 983040"];
6335 [label="latestLazyRootDeclaration: null 983041"];
6336 [label="null 983042"];
6337 [label="cache: null 983043"];
6338 [label="new DeclarationTable(\n            allOlderRootDeclarations: ImmutableSetWithInsertionOrder<RootSingleNamespaceDeclaration>.Empty,\n            latestLazyRootDeclaration: null,\n            cache: null) 983044"];
6339 [label="param DeclarationTable(ImmutableSetWithInsertionOrder<RootSingleNamespaceDeclaration> allOlderRootDeclarations) 983045"];
6340 [label="param DeclarationTable(Lazy<RootSingleNamespaceDeclaration> latestLazyRootDeclaration) 983046"];
6341 [label="param DeclarationTable(Cache cache) 983047"];
6342 [label="param DeclarationTable(this) 983048"];
6343 [label="_allOlderRootDeclarations 983049"];
6344 [label="_latestLazyRootDeclaration 983050"];
6345 [label="_cache 983051"];
6346 [label="_mergedRoot 983052"];
6347 [label="_typeNames 983053"];
6348 [label="_namespaceNames 983054"];
6349 [label="_referenceDirectives 983055"];
6350 [label="_allOlderRootDeclarations 983056"];
6351 [label="_latestLazyRootDeclaration 983057"];
6352 [label="_cache = cache ?? new Cache(this); 983058"];
6353 [label="_cache = cache ?? new Cache(this); 983059"];
6354 [label="new Cache(this) 983060"];
6355 [label="param Cache(DeclarationTable table) 983061"];
6356 [label="param Cache(this) 983062"];
6357 [label="MergedRoot 983063"];
6358 [label="TypeNames 983064"];
6359 [label="NamespaceNames 983065"];
6360 [label="ReferenceDirectives 983066"];
6361 [label="this.MergedRoot = new Lazy<MergedNamespaceDeclaration>(\n                    () => MergedNamespaceDeclaration.Create(table._allOlderRootDeclarations.InInsertionOrder.AsImmutable<SingleNamespaceDeclaration>())); 983067"];
6362 [label="this.MergedRoot 983068"];
6363 [label="this.TypeNames = new Lazy<ISet<string>>(\n                    () => GetTypeNames(this.MergedRoot.Value)); 983069"];
6364 [label="this.TypeNames 983070"];
6365 [label="this.NamespaceNames = new Lazy<ISet<string>>(\n                    () => GetNamespaceNames(this.MergedRoot.Value)); 983071"];
6366 [label="this.NamespaceNames 983072"];
6367 [label="this.ReferenceDirectives = new Lazy<ImmutableArray<ReferenceDirective>>(\n                    () => MergedRoot.Value.Declarations.OfType<RootSingleNamespaceDeclaration>().SelectMany(r => r.ReferenceDirectives).AsImmutable()); 983073"];
6368 [label="this.ReferenceDirectives 983074"];
6369 [label="_cache = cache ?? new Cache(this); 983075"];
6370 [label="_cache 983076"];
6371 [label="_typeNames = new Lazy<ICollection<string>>(GetMergedTypeNames); 983077"];
6372 [label="_typeNames 983078"];
6373 [label="_namespaceNames = new Lazy<ICollection<string>>(GetMergedNamespaceNames); 983079"];
6374 [label="_namespaceNames 983080"];
6375 [label="_referenceDirectives = new Lazy<ICollection<ReferenceDirective>>(GetMergedReferenceDirectives); 983081"];
6376 [label="_referenceDirectives 983082"];
6377 [label="Empty = new DeclarationTable(\n            allOlderRootDeclarations: ImmutableSetWithInsertionOrder<RootSingleNamespaceDeclaration>.Empty,\n            latestLazyRootDeclaration: null,\n            cache: null) 983083"];
6378 [label="d => d.Kind == DeclarationKind.Namespace 983084"];
6379 [label="s_isNamespacePredicate = d => d.Kind == DeclarationKind.Namespace 983085"];
6380 [label="d => d.Kind != DeclarationKind.Namespace 983086"];
6381 [label="s_isTypePredicate = d => d.Kind != DeclarationKind.Namespace 983087"];
6382 [label="var declTable = DeclarationTable.Empty; 983088"];
6383 [label="foreach (var tree in externalSyntaxTrees)\n            {\n                AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable);\n            } 983089"];
6384 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 983090"];
6385 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 983091"];
6386 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 983092"];
6387 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 983093"];
6388 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 983094"];
6389 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 983095"];
6390 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 983096"];
6391 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 983097"];
6392 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 983098"];
6393 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 983099"];
6394 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 983100"];
6395 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable) 983101"];
6396 [label="param AppendAllSyntaxTrees(ArrayBuilder<SyntaxTree> treesBuilder) 983102"];
6397 [label="param AppendAllSyntaxTrees(SyntaxTree tree) 983103"];
6398 [label="param AppendAllSyntaxTrees(string scriptClassName) 983104"];
6399 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 983105"];
6400 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 983106"];
6401 [label="param AppendAllSyntaxTrees(bool isSubmission) 983107"];
6402 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, int> ordinalMapBuilder) 983108"];
6403 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 983109"];
6404 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 983110"];
6405 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 983111"];
6406 [label="param AppendAllSyntaxTrees(ref DeclarationTable declTable) 983112"];
6407 [label="var sourceCodeKind = tree.Options.Kind; 983113"];
6408 [label="tree.Options 983114"];
6409 [label="get\n            {\n                return this.Options;\n            } 983115"];
6410 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 983116"];
6411 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 983117"];
6412 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 983118"];
6413 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 983119"];
6414 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 983120"];
6415 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 983121"];
6416 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable) 983122"];
6417 [label="param AddSyntaxTreeToDeclarationMapAndTable(SyntaxTree tree) 983123"];
6418 [label="param AddSyntaxTreeToDeclarationMapAndTable(string scriptClassName) 983124"];
6419 [label="param AddSyntaxTreeToDeclarationMapAndTable(bool isSubmission) 983125"];
6420 [label="param AddSyntaxTreeToDeclarationMapAndTable(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 983126"];
6421 [label="param AddSyntaxTreeToDeclarationMapAndTable(ref DeclarationTable declTable) 983127"];
6422 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 983128"];
6423 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 983129"];
6424 [label="declMapBuilder.Add(tree, lazyRoot); 983130"];
6425 [label="declMapBuilder.Add(tree, lazyRoot); 983131"];
6426 [label="declMapBuilder.Add(tree, lazyRoot); 983132"];
6427 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 983133"];
6428 [label="declTable.AddRootDeclaration(lazyRoot) 983134"];
6429 [label="param AddRootDeclaration(Lazy<RootSingleNamespaceDeclaration> lazyRootDeclaration) 983135"];
6430 [label="param AddRootDeclaration(this) 983136"];
6431 [label="if (_latestLazyRootDeclaration == null)\n            {\n                return new DeclarationTable(_allOlderRootDeclarations, lazyRootDeclaration, _cache);\n            }\n            else\n            {\n                // we already had a 'latest' item.  This means we're hearing about a change to a\n                // different tree.  Realize the old latest item, add it to the 'oldest' collection\n                // and don't reuse the cache.\n                return new DeclarationTable(_allOlderRootDeclarations.Add(_latestLazyRootDeclaration.Value), lazyRootDeclaration, cache: null);\n            } 983137"];
6432 [label="if (_latestLazyRootDeclaration == null)\n            {\n                return new DeclarationTable(_allOlderRootDeclarations, lazyRootDeclaration, _cache);\n            }\n            else\n            {\n                // we already had a 'latest' item.  This means we're hearing about a change to a\n                // different tree.  Realize the old latest item, add it to the 'oldest' collection\n                // and don't reuse the cache.\n                return new DeclarationTable(_allOlderRootDeclarations.Add(_latestLazyRootDeclaration.Value), lazyRootDeclaration, cache: null);\n            } 983138"];
6433 [label="return new DeclarationTable(_allOlderRootDeclarations, lazyRootDeclaration, _cache); 983139"];
6434 [label="return new DeclarationTable(_allOlderRootDeclarations, lazyRootDeclaration, _cache); 983140"];
6435 [label="return new DeclarationTable(_allOlderRootDeclarations, lazyRootDeclaration, _cache); 983141"];
6436 [label="return new DeclarationTable(_allOlderRootDeclarations, lazyRootDeclaration, _cache); 983142"];
6437 [label="new DeclarationTable(_allOlderRootDeclarations, lazyRootDeclaration, _cache) 983143"];
6438 [label="param DeclarationTable(ImmutableSetWithInsertionOrder<RootSingleNamespaceDeclaration> allOlderRootDeclarations) 983144"];
6439 [label="param DeclarationTable(Lazy<RootSingleNamespaceDeclaration> latestLazyRootDeclaration) 983145"];
6440 [label="param DeclarationTable(Cache cache) 983146"];
6441 [label="param DeclarationTable(this) 983147"];
6442 [label="_allOlderRootDeclarations 983148"];
6443 [label="_latestLazyRootDeclaration 983149"];
6444 [label="_cache 983150"];
6445 [label="_mergedRoot 983151"];
6446 [label="_typeNames 983152"];
6447 [label="_namespaceNames 983153"];
6448 [label="_referenceDirectives 983154"];
6449 [label="_typeNames = new Lazy<ICollection<string>>(GetMergedTypeNames); 983155"];
6450 [label="_typeNames 983156"];
6451 [label="_namespaceNames = new Lazy<ICollection<string>>(GetMergedNamespaceNames); 983157"];
6452 [label="_namespaceNames 983158"];
6453 [label="_referenceDirectives = new Lazy<ICollection<ReferenceDirective>>(GetMergedReferenceDirectives); 983159"];
6454 [label="_referenceDirectives 983160"];
6455 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 983161"];
6456 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 983162"];
6457 [label="treesBuilder.Add(tree); 983163"];
6458 [label="treesBuilder.Add(tree); 983164"];
6459 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 983165"];
6460 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 983166"];
6461 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 983167"];
6462 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 983168"];
6463 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 983169"];
6464 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 983170"];
6465 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 983171"];
6466 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 983172"];
6467 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 983173"];
6468 [label="new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable) 983174"];
6469 [label="param State(ImmutableArray<SyntaxTree> syntaxTrees) 983175"];
6470 [label="param State(ImmutableDictionary<SyntaxTree, int> syntaxTreeOrdinalMap) 983176"];
6471 [label="param State(ImmutableDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMap) 983177"];
6472 [label="param State(ImmutableDictionary<string, SyntaxTree> loadedSyntaxTreeMap) 983178"];
6473 [label="param State(ImmutableDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> rootNamespaces) 983179"];
6474 [label="param State(DeclarationTable declarationTable) 983180"];
6475 [label="param State(this) 983181"];
6476 [label="OrdinalMap 983182"];
6477 [label="LoadDirectiveMap 983183"];
6478 [label="LoadedSyntaxTreeMap 983184"];
6479 [label="RootNamespaces 983185"];
6480 [label="DeclarationTable 983186"];
6481 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 983187"];
6482 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 983188"];
6483 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 983189"];
6484 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 983190"];
6485 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 983191"];
6486 [label="this.SyntaxTrees 983192"];
6487 [label="this.OrdinalMap 983193"];
6488 [label="this.LoadDirectiveMap 983194"];
6489 [label="this.LoadedSyntaxTreeMap 983195"];
6490 [label="this.RootNamespaces 983196"];
6491 [label="this.DeclarationTable 983197"];
6492 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 983198"];
6493 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 983199"];
6494 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 983200"];
6495 [label="return _lazyState; 983201"];
6496 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 983202"];
6497 [label="var trees = compilation.SyntaxTrees; 983203"];
6498 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 983204"];
6499 [label="var options = (CSharpParseOptions)trees[0].Options; 983205"];
6500 [label="var options = (CSharpParseOptions)trees[0].Options; 983206"];
6501 [label="trees[0].Options 983207"];
6502 [label="get\n            {\n                return this.Options;\n            } 983208"];
6503 [label="this.Options 983209"];
6504 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 983210"];
6505 [label="options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes) 983211"];
6506 [label="param IsFeatureEnabled(MessageID feature) 983212"];
6507 [label="param IsFeatureEnabled(this) 983213"];
6508 [label="string? featureFlag = feature.RequiredFeature(); 983214"];
6509 [label="feature.RequiredFeature() 983215"];
6510 [label="param RequiredFeature(this MessageID feature) 983216"];
6511 [label="switch (feature)\n            {\n                default:\n                    return null;\n            } 983217"];
6512 [label="return null; 983218"];
6513 [label="if (featureFlag != null)\n            {\n                return Features.ContainsKey(featureFlag);\n            } 983219"];
6514 [label="if (featureFlag != null)\n            {\n                return Features.ContainsKey(featureFlag);\n            } 983220"];
6515 [label="LanguageVersion availableVersion = LanguageVersion; 983221"];
6516 [label="LanguageVersion requiredVersion = feature.RequiredVersion(); 983222"];
6517 [label="feature.RequiredVersion() 983223"];
6518 [label="param RequiredVersion(this MessageID feature) 983224"];
6519 [label="Debug.Assert(RequiredFeature(feature) == null); 983225"];
6520 [label="RequiredFeature(feature) 983226"];
6521 [label="param RequiredFeature(this MessageID feature) 983227"];
6522 [label="switch (feature)\n            {\n                default:\n                    return null;\n            } 983228"];
6523 [label="return null; 983229"];
6524 [label="Debug.Assert(RequiredFeature(feature) == null); 983230"];
6525 [label="switch (feature)\n            {\n                // C# preview features.\n                case MessageID.IDS_FeatureMixedDeclarationsAndExpressionsInDeconstruction:\n                    return LanguageVersion.Preview;\n                // C# 9.0 features.\n                case MessageID.IDS_FeatureLambdaDiscardParameters: // semantic check\n                case MessageID.IDS_FeatureFunctionPointers:\n                case MessageID.IDS_FeatureLocalFunctionAttributes: // syntax check\n                case MessageID.IDS_FeatureExternLocalFunctions: // syntax check\n                case MessageID.IDS_FeatureImplicitObjectCreation: // syntax check\n                case MessageID.IDS_FeatureMemberNotNull:\n                case MessageID.IDS_FeatureAndPattern:\n                case MessageID.IDS_FeatureNotPattern:\n                case MessageID.IDS_FeatureOrPattern:\n                case MessageID.IDS_FeatureParenthesizedPattern:\n                case MessageID.IDS_FeatureTypePattern:\n                case MessageID.IDS_FeatureRelationalPattern:\n                case MessageID.IDS_FeatureExtensionGetEnumerator: // semantic check\n                case MessageID.IDS_FeatureExtensionGetAsyncEnumerator: // semantic check\n                case MessageID.IDS_FeatureNativeInt:\n                case MessageID.IDS_FeatureExtendedPartialMethods: // semantic check\n                case MessageID.IDS_TopLevelStatements:\n                case MessageID.IDS_FeatureInitOnlySetters: // semantic check\n                case MessageID.IDS_FeatureRecords:\n                case MessageID.IDS_FeatureTargetTypedConditional:  // semantic check\n                case MessageID.IDS_FeatureCovariantReturnsForOverrides: // semantic check\n                case MessageID.IDS_FeatureStaticAnonymousFunction: // syntax check\n                case MessageID.IDS_FeatureModuleInitializers: // semantic check on method attribute\n                case MessageID.IDS_FeatureDefaultTypeParameterConstraint:\n                    return LanguageVersion.CSharp9;\n\n                case MessageID.IDS_FeatureVarianceSafetyForStaticInterfaceMembers: //semantic check\n                case MessageID.IDS_FeatureConstantInterpolatedStrings: //semantic check\n                    return LanguageVersion.Preview;\n\n                // C# 8.0 features.\n                case MessageID.IDS_FeatureAltInterpolatedVerbatimStrings:\n                case MessageID.IDS_FeatureCoalesceAssignmentExpression:\n                case MessageID.IDS_FeatureUnconstrainedTypeParameterInNullCoalescingOperator:\n                case MessageID.IDS_FeatureNullableReferenceTypes: // syntax and semantic check\n                case MessageID.IDS_FeatureIndexOperator: // semantic check\n                case MessageID.IDS_FeatureRangeOperator: // semantic check\n                case MessageID.IDS_FeatureAsyncStreams:\n                case MessageID.IDS_FeatureRecursivePatterns:\n                case MessageID.IDS_FeatureUsingDeclarations:\n                case MessageID.IDS_FeatureStaticLocalFunctions:\n                case MessageID.IDS_FeatureNameShadowingInNestedFunctions:\n                case MessageID.IDS_FeatureUnmanagedConstructedTypes: // semantic check\n                case MessageID.IDS_FeatureObsoleteOnPropertyAccessor:\n                case MessageID.IDS_FeatureReadOnlyMembers:\n                case MessageID.IDS_DefaultInterfaceImplementation: // semantic check\n                case MessageID.IDS_OverrideWithConstraints: // semantic check\n                case MessageID.IDS_FeatureNestedStackalloc: // semantic check\n                case MessageID.IDS_FeatureNotNullGenericTypeConstraint:// semantic check\n                case MessageID.IDS_FeatureSwitchExpression:\n                case MessageID.IDS_FeatureAsyncUsing:\n                case MessageID.IDS_FeatureNullPointerConstantPattern: //semantic check\n                    return LanguageVersion.CSharp8;\n\n                // C# 7.3 features.\n                case MessageID.IDS_FeatureAttributesOnBackingFields: // semantic check\n                case MessageID.IDS_FeatureImprovedOverloadCandidates: // semantic check\n                case MessageID.IDS_FeatureTupleEquality: // semantic check\n                case MessageID.IDS_FeatureRefReassignment:\n                case MessageID.IDS_FeatureRefFor:\n                case MessageID.IDS_FeatureRefForEach:\n                case MessageID.IDS_FeatureEnumGenericTypeConstraint: // semantic check\n                case MessageID.IDS_FeatureDelegateGenericTypeConstraint: // semantic check\n                case MessageID.IDS_FeatureUnmanagedGenericTypeConstraint: // semantic check\n                case MessageID.IDS_FeatureStackAllocInitializer:\n                case MessageID.IDS_FeatureExpressionVariablesInQueriesAndInitializers: // semantic check\n                case MessageID.IDS_FeatureExtensibleFixedStatement:  // semantic check\n                case MessageID.IDS_FeatureIndexingMovableFixedBuffers: //semantic check\n                    return LanguageVersion.CSharp7_3;\n\n                // C# 7.2 features.\n                case MessageID.IDS_FeatureNonTrailingNamedArguments: // semantic check\n                case MessageID.IDS_FeatureLeadingDigitSeparator:\n                case MessageID.IDS_FeaturePrivateProtected:\n                case MessageID.IDS_FeatureReadOnlyReferences:\n                case MessageID.IDS_FeatureRefStructs:\n                case MessageID.IDS_FeatureReadOnlyStructs:\n                case MessageID.IDS_FeatureRefExtensionMethods:\n                case MessageID.IDS_FeatureRefConditional:\n                    return LanguageVersion.CSharp7_2;\n\n                // C# 7.1 features.\n                case MessageID.IDS_FeatureAsyncMain:\n                case MessageID.IDS_FeatureDefaultLiteral:\n                case MessageID.IDS_FeatureInferredTupleNames:\n                case MessageID.IDS_FeatureGenericPatternMatching:\n                    return LanguageVersion.CSharp7_1;\n\n                // C# 7 features.\n                case MessageID.IDS_FeatureBinaryLiteral:\n                case MessageID.IDS_FeatureDigitSeparator:\n                case MessageID.IDS_FeatureLocalFunctions:\n                case MessageID.IDS_FeatureRefLocalsReturns:\n                case MessageID.IDS_FeaturePatternMatching:\n                case MessageID.IDS_FeatureThrowExpression:\n                case MessageID.IDS_FeatureTuples:\n                case MessageID.IDS_FeatureOutVar:\n                case MessageID.IDS_FeatureExpressionBodiedAccessor:\n                case MessageID.IDS_FeatureExpressionBodiedDeOrConstructor:\n                case MessageID.IDS_FeatureDiscards:\n                    return LanguageVersion.CSharp7;\n\n                // C# 6 features.\n                case MessageID.IDS_FeatureExceptionFilter:\n                case MessageID.IDS_FeatureAutoPropertyInitializer:\n                case MessageID.IDS_FeatureNullPropagatingOperator:\n                case MessageID.IDS_FeatureExpressionBodiedMethod:\n                case MessageID.IDS_FeatureExpressionBodiedProperty:\n                case MessageID.IDS_FeatureExpressionBodiedIndexer:\n                case MessageID.IDS_FeatureNameof:\n                case MessageID.IDS_FeatureDictionaryInitializer:\n                case MessageID.IDS_FeatureUsingStatic:\n                case MessageID.IDS_FeatureInterpolatedStrings:\n                case MessageID.IDS_AwaitInCatchAndFinally:\n                case MessageID.IDS_FeatureReadonlyAutoImplementedProperties:\n                    return LanguageVersion.CSharp6;\n\n                // C# 5 features.\n                case MessageID.IDS_FeatureAsync:\n                    return LanguageVersion.CSharp5;\n\n                // C# 4 features.\n                case MessageID.IDS_FeatureDynamic: // Checked in the binder.\n                case MessageID.IDS_FeatureTypeVariance:\n                case MessageID.IDS_FeatureNamedArgument:\n                case MessageID.IDS_FeatureOptionalParameter:\n                    return LanguageVersion.CSharp4;\n\n                // C# 3 features.\n                case MessageID.IDS_FeatureImplicitArray:\n                case MessageID.IDS_FeatureAnonymousTypes:\n                case MessageID.IDS_FeatureObjectInitializer:\n                case MessageID.IDS_FeatureCollectionInitializer:\n                case MessageID.IDS_FeatureLambda:\n                case MessageID.IDS_FeatureQueryExpression:\n                case MessageID.IDS_FeatureExtensionMethod:\n                case MessageID.IDS_FeaturePartialMethod:\n                case MessageID.IDS_FeatureImplicitLocal: // Checked in the binder.\n                case MessageID.IDS_FeatureAutoImplementedProperties:\n                    return LanguageVersion.CSharp3;\n\n                // C# 2 features.\n                case MessageID.IDS_FeatureGenerics: // Also affects crefs.\n                case MessageID.IDS_FeatureAnonDelegates:\n                case MessageID.IDS_FeatureGlobalNamespace: // Also affects crefs.\n                case MessageID.IDS_FeatureFixedBuffer:\n                case MessageID.IDS_FeatureStaticClasses:\n                case MessageID.IDS_FeaturePartialTypes:\n                case MessageID.IDS_FeaturePropertyAccessorMods:\n                case MessageID.IDS_FeatureExternAlias:\n                case MessageID.IDS_FeatureIterators:\n                case MessageID.IDS_FeatureDefault:\n                case MessageID.IDS_FeatureNullable:\n                case MessageID.IDS_FeaturePragma: // Checked in the directive parser.\n                case MessageID.IDS_FeatureSwitchOnBool: // Checked in the binder.\n                    return LanguageVersion.CSharp2;\n\n                // Special C# 2 feature: only a warning in C# 1.\n                case MessageID.IDS_FeatureModuleAttrLoc:\n                    return LanguageVersion.CSharp1;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(feature);\n            } 983231"];
6526 [label="return LanguageVersion.CSharp8; 983232"];
6527 [label="return availableVersion >= requiredVersion; 983233"];
6528 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 983234"];
6529 [label="return compilation; 983235"];
6530 [label="CompileAndVerify(comp, verify: Verification.Fails); 983236"];
6531 [label="CompileAndVerify(comp, verify: Verification.Fails); 983237"];
6532 [label="CompileAndVerify(comp, verify: Verification.Fails); 983238"];
6533 [label="CompileAndVerify(comp, verify: Verification.Fails) 983239"];
6534 [label="param CompileAndVerify(Compilation compilation) 983240"];
6535 [label="param CompileAndVerify(IEnumerable<ResourceDescription> manifestResources = null) 983241"];
6536 [label="param CompileAndVerify(IEnumerable<ModuleData> dependencies = null) 983242"];
6537 [label="param CompileAndVerify(Action<ModuleSymbol> sourceSymbolValidator = null) 983243"];
6538 [label="param CompileAndVerify(Action<PEAssembly> validator = null) 983244"];
6539 [label="param CompileAndVerify(Action<ModuleSymbol> symbolValidator = null) 983245"];
6540 [label="param CompileAndVerify(SignatureDescription[] expectedSignatures = null) 983246"];
6541 [label="param CompileAndVerify(string expectedOutput = null) 983247"];
6542 [label="param CompileAndVerify(int? expectedReturnCode = null) 983248"];
6543 [label="param CompileAndVerify(string[] args = null) 983249"];
6544 [label="param CompileAndVerify(EmitOptions emitOptions = null) 983250"];
6545 [label="param CompileAndVerify(Verification verify = Verification.Passes) 983251"];
6546 [label="param CompileAndVerify(this) 983252"];
6547 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 983253"];
6548 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 983254"];
6549 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 983255"];
6550 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 983256"];
6551 [label="translate(sourceSymbolValidator) 983257"];
6552 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 983258"];
6553 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 983259"];
6554 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 983260"];
6555 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 983261"];
6556 [label="return null; 983262"];
6557 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 983263"];
6558 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 983264"];
6559 [label="translate(symbolValidator) 983265"];
6560 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 983266"];
6561 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 983267"];
6562 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 983268"];
6563 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 983269"];
6564 [label="return null; 983270"];
6565 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 983271"];
6566 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 983272"];
6567 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 983273"];
6568 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 983274"];
6569 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 983275"];
6570 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 983276"];
6571 [label="CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify) 983277"];
6572 [label="param CompileAndVerifyCommon(Compilation compilation) 983278"];
6573 [label="param CompileAndVerifyCommon(IEnumerable<ResourceDescription> manifestResources = null) 983279"];
6574 [label="param CompileAndVerifyCommon(IEnumerable<ModuleData> dependencies = null) 983280"];
6575 [label="param CompileAndVerifyCommon(Action<IModuleSymbol> sourceSymbolValidator = null) 983281"];
6576 [label="param CompileAndVerifyCommon(Action<PEAssembly> assemblyValidator = null) 983282"];
6577 [label="param CompileAndVerifyCommon(Action<IModuleSymbol> symbolValidator = null) 983283"];
6578 [label="param CompileAndVerifyCommon(SignatureDescription[] expectedSignatures = null) 983284"];
6579 [label="param CompileAndVerifyCommon(string expectedOutput = null) 983285"];
6580 [label="param CompileAndVerifyCommon(int? expectedReturnCode = null) 983286"];
6581 [label="param CompileAndVerifyCommon(string[] args = null) 983287"];
6582 [label="param CompileAndVerifyCommon(EmitOptions emitOptions = null) 983288"];
6583 [label="param CompileAndVerifyCommon(Verification verify = Verification.Passes) 983289"];
6584 [label="param CompileAndVerifyCommon(this) 983290"];
6585 [label="CustomAssert.NotNull(compilation); 983291"];
6586 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 983292"];
6587 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 983293"];
6588 [label="if (sourceSymbolValidator != null)\n            {\n                var module = compilation.Assembly.Modules.First();\n                sourceSymbolValidator(module);\n            } 983294"];
6589 [label="if (sourceSymbolValidator != null)\n            {\n                var module = compilation.Assembly.Modules.First();\n                sourceSymbolValidator(module);\n            } 983295"];
6590 [label="CompilationVerifier result = null; 983296"];
6591 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 983297"];
6592 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 983298"];
6593 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 983299"];
6594 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 983300"];
6595 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 983301"];
6596 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 983302"];
6597 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 983303"];
6598 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 983304"];
6599 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 983305"];
6600 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 983306"];
6601 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 983307"];
6602 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 983308"];
6603 [label="Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify) 983309"];
6604 [label="param Emit(Compilation compilation) 983310"];
6605 [label="param Emit(IEnumerable<ModuleData> dependencies) 983311"];
6606 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 983312"];
6607 [label="param Emit(SignatureDescription[] expectedSignatures) 983313"];
6608 [label="param Emit(string expectedOutput) 983314"];
6609 [label="param Emit(int? expectedReturnCode) 983315"];
6610 [label="param Emit(string[] args) 983316"];
6611 [label="param Emit(Action<PEAssembly> assemblyValidator) 983317"];
6612 [label="param Emit(Action<IModuleSymbol> symbolValidator) 983318"];
6613 [label="param Emit(EmitOptions emitOptions) 983319"];
6614 [label="param Emit(Verification verify) 983320"];
6615 [label="param Emit(this) 983321"];
6616 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 983322"];
6617 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 983323"];
6618 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 983324"];
6619 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 983325"];
6620 [label="new CompilationVerifier(compilation, VisualizeRealIL, dependencies) 983326"];
6621 [label="param CompilationVerifier(Compilation compilation) 983327"];
6622 [label="param CompilationVerifier(Func<IModuleSymbol, CompilationTestData.MethodData, IReadOnlyDictionary<int, string>, bool, string> visualizeRealIL = null) 983328"];
6623 [label="param CompilationVerifier(IEnumerable<ModuleData> dependencies = null) 983329"];
6624 [label="param CompilationVerifier(this) 983330"];
6625 [label="_compilation 983331"];
6626 [label="_testData 983332"];
6627 [label="_dependencies 983333"];
6628 [label="_lazyModuleSymbol 983334"];
6629 [label="_allModuleData 983335"];
6630 [label="_visualizeRealIL 983336"];
6631 [label="_compilation 983337"];
6632 [label="_dependencies 983338"];
6633 [label="_visualizeRealIL 983339"];
6634 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 983340"];
6635 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 983341"];
6636 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 983342"];
6637 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 983343"];
6638 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 983344"];
6639 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 983345"];
6640 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 983346"];
6641 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures) 983347"];
6642 [label="param Emit(string expectedOutput) 983348"];
6643 [label="param Emit(int? expectedReturnCode) 983349"];
6644 [label="param Emit(string[] args) 983350"];
6645 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 983351"];
6646 [label="param Emit(EmitOptions emitOptions) 983352"];
6647 [label="param Emit(Verification peVerify) 983353"];
6648 [label="param Emit(SignatureDescription[] expectedSignatures) 983354"];
6649 [label="param Emit(this) 983355"];
6650 [label="RuntimeUtilities.GetRuntimeEnvironmentFactory 983356"];
6651 [label="new Lazy<IRuntimeEnvironmentFactory>(RuntimeUtilities.GetRuntimeEnvironmentFactory) 983357"];
6652 [label="s_lazyFactory = new Lazy<IRuntimeEnvironmentFactory>(RuntimeUtilities.GetRuntimeEnvironmentFactory) 983358"];
6653 [label="using var testEnvironment = RuntimeEnvironmentFactory.Create(_dependencies); 983359"];
6654 [label="RuntimeEnvironmentFactory.Create(_dependencies) 983360"];
6655 [label="param Create(IEnumerable<ModuleData> additionalDependencies = null) 983361"];
6656 [label="return s_lazyFactory.Value.Create(additionalDependencies); 983362"];
6657 [label="return s_lazyFactory.Value.Create(additionalDependencies); 983363"];
6658 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 983364"];
6659 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 983365"];
6660 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 983366"];
6661 [label="Emit(testEnvironment, manifestResources, emitOptions) 983367"];
6662 [label="param Emit(IRuntimeEnvironment testEnvironment) 983368"];
6663 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 983369"];
6664 [label="param Emit(EmitOptions emitOptions) 983370"];
6665 [label="param Emit(this) 983371"];
6666 [label="s_dumpCount 983372"];
6667 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 983373"];
6668 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 983374"];
6669 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 983375"];
6670 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 983376"];
6671 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 983377"];
6672 [label="param EmitCompilation(Compilation compilation) 983378"];
6673 [label="param EmitCompilation(IEnumerable<ResourceDescription> manifestResources) 983379"];
6674 [label="param EmitCompilation(List<ModuleData> dependencies) 983380"];
6675 [label="param EmitCompilation(DiagnosticBag diagnostics) 983381"];
6676 [label="param EmitCompilation(CompilationTestData testData) 983382"];
6677 [label="param EmitCompilation(EmitOptions emitOptions) 983383"];
6678 [label="var referencedCompilations = FindReferencedCompilations(compilation); 983384"];
6679 [label="FindReferencedCompilations(compilation) 983385"];
6680 [label="param FindReferencedCompilations(Compilation original) 983386"];
6681 [label="var list = new List<Compilation>(); 983387"];
6682 [label="var toVisit = new Queue<Compilation>(FindDirectReferencedCompilations(original)); 983388"];
6683 [label="FindDirectReferencedCompilations(original) 983389"];
6684 [label="param FindDirectReferencedCompilations(Compilation compilation) 983390"];
6685 [label="var list = new List<Compilation>(); 983391"];
6686 [label="var previousCompilation = compilation.ScriptCompilationInfo?.PreviousScriptCompilation; 983392"];
6687 [label="compilation.ScriptCompilationInfo 983393"];
6688 [label="=> ScriptCompilationInfo 983394"];
6689 [label="if (previousCompilation != null)\n            {\n                list.Add(previousCompilation);\n            } 983395"];
6690 [label="if (previousCompilation != null)\n            {\n                list.Add(previousCompilation);\n            } 983396"];
6691 [label="foreach (var reference in compilation.References.OfType<CompilationReference>())\n            {\n                list.Add(reference.Compilation);\n            } 983397"];
6692 [label="foreach (var reference in compilation.References.OfType<CompilationReference>())\n            {\n                list.Add(reference.Compilation);\n            } 983398"];
6693 [label="get\n            {\n                return GetBoundReferenceManager().DirectiveReferences;\n            } 983399"];
6694 [label="GetBoundReferenceManager() 983400"];
6695 [label="param GetBoundReferenceManager(this) 983401"];
6696 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 983402"];
6697 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 983403"];
6698 [label="_referenceManager.CreateSourceAssemblyForCompilation(this) 983404"];
6699 [label="param CreateSourceAssemblyForCompilation(CSharpCompilation compilation) 983405"];
6700 [label="param CreateSourceAssemblyForCompilation(this) 983406"];
6701 [label="if (!IsBound && CreateAndSetSourceAssemblyFullBind(compilation))\n                {\n                    // we have successfully bound the references for the compilation\n                }\n                else if (!HasCircularReference)\n                {\n                    // Another compilation that shares the manager with the given compilation\n                    // already bound its references and produced tables that we can use to construct \n                    // source assembly symbol faster. Unless we encountered a circular reference.\n                    CreateAndSetSourceAssemblyReuseData(compilation);\n                }\n                else\n                {\n                    // We encountered a circular reference while binding the previous compilation.\n                    // This compilation can't share bound references with other compilations. Create a new manager.\n\n                    // NOTE: The CreateSourceAssemblyFullBind is going to replace compilation's reference manager with newManager.\n\n                    var newManager = new ReferenceManager(this.SimpleAssemblyName, this.IdentityComparer, this.ObservedMetadata);\n                    var successful = newManager.CreateAndSetSourceAssemblyFullBind(compilation);\n\n                    // The new manager isn't shared with any other compilation so there is no other \n                    // thread but the current one could have initialized it.\n                    Debug.Assert(successful);\n\n                    newManager.AssertBound();\n                } 983407"];
6702 [label="CreateAndSetSourceAssemblyFullBind(compilation) 983408"];
6703 [label="param CreateAndSetSourceAssemblyFullBind(CSharpCompilation compilation) 983409"];
6704 [label="param CreateAndSetSourceAssemblyFullBind(this) 983410"];
6705 [label="var resolutionDiagnostics = DiagnosticBag.GetInstance(); 983411"];
6706 [label="var assemblyReferencesBySimpleName = PooledDictionary<string, List<ReferencedAssemblyIdentity>>.GetInstance(); 983412"];
6707 [label="compilation.Options 983413"];
6708 [label="get\n            {\n                return _options;\n            } 983414"];
6709 [label="bool supersedeLowerVersions = compilation.Options.ReferencesSupersedeLowerVersions; 983415"];
6710 [label="IDictionary<(string, string), MetadataReference>? boundReferenceDirectiveMap; 983416"];
6711 [label="ImmutableArray<MetadataReference> boundReferenceDirectives; 983417"];
6712 [label="boundReferenceDirectives 983418"];
6713 [label="ImmutableArray<AssemblyData> referencedAssemblies; 983419"];
6714 [label="referencedAssemblies 983420"];
6715 [label="ImmutableArray<PEModule> modules; 983421"];
6716 [label="modules 983422"];
6717 [label="ImmutableArray<MetadataReference> explicitReferences; 983423"];
6718 [label="explicitReferences 983424"];
6719 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 983425"];
6720 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 983426"];
6721 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 983427"];
6722 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 983428"];
6723 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 983429"];
6724 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 983430"];
6725 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 983431"];
6726 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 983432"];
6727 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 983433"];
6728 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 983434"];
6729 [label="get { return this.Declarations.ReferenceDirectives; } 983435"];
6730 [label="this.Declarations 983436"];
6731 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 983437"];
6732 [label="_syntaxAndDeclarations.GetLazyState() 983438"];
6733 [label="param GetLazyState(this) 983439"];
6734 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 983440"];
6735 [label="return this.Declarations.ReferenceDirectives; 983441"];
6736 [label="this.Declarations.ReferenceDirectives 983442"];
6737 [label="get\n            {\n                return _referenceDirectives.Value;\n            } 983443"];
6738 [label="return _referenceDirectives.Value; 983444"];
6739 [label="_referenceDirectives.Value 983445"];
6740 [label="param GetMergedReferenceDirectives(this) 983446"];
6741 [label="var cachedReferenceDirectives = _cache.ReferenceDirectives.Value; 983447"];
6742 [label="_cache.ReferenceDirectives.Value 983448"];
6743 [label="param Create(ImmutableArray<SingleNamespaceDeclaration> declarations) 983449"];
6744 [label="return new MergedNamespaceDeclaration(declarations); 983450"];
6745 [label="return new MergedNamespaceDeclaration(declarations); 983451"];
6746 [label="new MergedNamespaceDeclaration(declarations) 983452"];
6747 [label="param MergedNamespaceDeclaration(ImmutableArray<SingleNamespaceDeclaration> declarations) 983453"];
6748 [label="param MergedNamespaceDeclaration(this) 983454"];
6749 [label="declarations.IsEmpty 983455"];
6750 [label="string.Empty 983456"];
6751 [label="param MergedNamespaceDeclaration(this) 983457"];
6752 [label="param MergedNamespaceOrTypeDeclaration(string name) 983458"];
6753 [label="param MergedNamespaceOrTypeDeclaration(this) 983459"];
6754 [label="name 983460"];
6755 [label="param MergedNamespaceOrTypeDeclaration(this) 983461"];
6756 [label="param Declaration(string name) 983462"];
6757 [label="param Declaration(this) 983463"];
6758 [label="name 983464"];
6759 [label="this.name 983465"];
6760 [label="_declarations 983466"];
6761 [label="var cachedReferenceDirectives = _cache.ReferenceDirectives.Value; 983467"];
6762 [label="var cachedReferenceDirectives = _cache.ReferenceDirectives.Value; 983468"];
6763 [label="get { return _declarations; } 983469"];
6764 [label="return _declarations; 983470"];
6765 [label="if (_latestLazyRootDeclaration == null)\n            {\n                return cachedReferenceDirectives;\n            }\n            else\n            {\n                return UnionCollection<ReferenceDirective>.Create(cachedReferenceDirectives, _latestLazyRootDeclaration.Value.ReferenceDirectives);\n            } 983471"];
6766 [label="if (_latestLazyRootDeclaration == null)\n            {\n                return cachedReferenceDirectives;\n            }\n            else\n            {\n                return UnionCollection<ReferenceDirective>.Create(cachedReferenceDirectives, _latestLazyRootDeclaration.Value.ReferenceDirectives);\n            } 983472"];
6767 [label="() => ImmutableHashSet.CreateBuilder<string>() 983473"];
6768 [label="new ObjectPool<ImmutableHashSet<string>.Builder>(() => ImmutableHashSet.CreateBuilder<string>()) 983474"];
6769 [label="s_memberNameBuilderPool =\n            new ObjectPool<ImmutableHashSet<string>.Builder>(() => ImmutableHashSet.CreateBuilder<string>()) 983475"];
6770 [label="return UnionCollection<ReferenceDirective>.Create(cachedReferenceDirectives, _latestLazyRootDeclaration.Value.ReferenceDirectives); 983476"];
6771 [label="return UnionCollection<ReferenceDirective>.Create(cachedReferenceDirectives, _latestLazyRootDeclaration.Value.ReferenceDirectives); 983477"];
6772 [label="_latestLazyRootDeclaration.Value 983478"];
6773 [label="param ForTree(SyntaxTree syntaxTree) 983479"];
6774 [label="param ForTree(string scriptClassName) 983480"];
6775 [label="param ForTree(bool isSubmission) 983481"];
6776 [label="var builder = new DeclarationTreeBuilder(syntaxTree, scriptClassName, isSubmission); 983482"];
6777 [label="var builder = new DeclarationTreeBuilder(syntaxTree, scriptClassName, isSubmission); 983483"];
6778 [label="var builder = new DeclarationTreeBuilder(syntaxTree, scriptClassName, isSubmission); 983484"];
6779 [label="var builder = new DeclarationTreeBuilder(syntaxTree, scriptClassName, isSubmission); 983485"];
6780 [label="new DeclarationTreeBuilder(syntaxTree, scriptClassName, isSubmission) 983486"];
6781 [label="param DeclarationTreeBuilder(SyntaxTree syntaxTree) 983487"];
6782 [label="param DeclarationTreeBuilder(string scriptClassName) 983488"];
6783 [label="param DeclarationTreeBuilder(bool isSubmission) 983489"];
6784 [label="param DeclarationTreeBuilder(this) 983490"];
6785 [label="param DeclarationTreeBuilder(this) 983491"];
6786 [label="param CSharpSyntaxVisitor(this) 983492"];
6787 [label="_syntaxTree 983493"];
6788 [label="_scriptClassName 983494"];
6789 [label="_isSubmission 983495"];
6790 [label="_syntaxTree 983496"];
6791 [label="_scriptClassName 983497"];
6792 [label="_isSubmission 983498"];
6793 [label="return (RootSingleNamespaceDeclaration)builder.Visit(syntaxTree.GetRoot()); 983499"];
6794 [label="return (RootSingleNamespaceDeclaration)builder.Visit(syntaxTree.GetRoot()); 983500"];
6795 [label="param GetRoot(CancellationToken cancellationToken) 983501"];
6796 [label="builder.Visit(syntaxTree.GetRoot()) 983502"];
6797 [label="param Visit(SyntaxNode? node) 983503"];
6798 [label="param Visit(this) 983504"];
6799 [label="if (node != null)\n            {\n                return ((CSharpSyntaxNode)node).Accept(this);\n            } 983505"];
6800 [label="if (node != null)\n            {\n                return ((CSharpSyntaxNode)node).Accept(this);\n            } 983506"];
6801 [label="return ((CSharpSyntaxNode)node).Accept(this); 983507"];
6802 [label="return ((CSharpSyntaxNode)node).Accept(this); 983508"];
6803 [label="return ((CSharpSyntaxNode)node).Accept(this); 983509"];
6804 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 983510"];
6805 [label="param VisitCompilationUnit(this) 983511"];
6806 [label="if (_syntaxTree.Options.Kind != SourceCodeKind.Regular)\n            {\n                return CreateScriptRootDeclaration(compilationUnit);\n            } 983512"];
6807 [label="_syntaxTree.Options 983513"];
6808 [label="get\n            {\n                return this.Options;\n            } 983514"];
6809 [label="var children = VisitNamespaceChildren(compilationUnit, compilationUnit.Members, ((Syntax.InternalSyntax.CompilationUnitSyntax)(compilationUnit.Green)).Members); 983515"];
6810 [label="var children = VisitNamespaceChildren(compilationUnit, compilationUnit.Members, ((Syntax.InternalSyntax.CompilationUnitSyntax)(compilationUnit.Green)).Members); 983516"];
6811 [label="VisitNamespaceChildren(compilationUnit, compilationUnit.Members, ((Syntax.InternalSyntax.CompilationUnitSyntax)(compilationUnit.Green)).Members) 983517"];
6812 [label="param VisitNamespaceChildren(CSharpSyntaxNode node) 983518"];
6813 [label="param VisitNamespaceChildren(SyntaxList<MemberDeclarationSyntax> members) 983519"];
6814 [label="param VisitNamespaceChildren(CoreInternalSyntax.SyntaxList<Syntax.InternalSyntax.MemberDeclarationSyntax> internalMembers) 983520"];
6815 [label="param VisitNamespaceChildren(this) 983521"];
6816 [label="node.Kind() 983522"];
6817 [label="param Kind(this) 983523"];
6818 [label="return (SyntaxKind)this.Green.RawKind; 983524"];
6819 [label="Debug.Assert(node.Kind() == SyntaxKind.NamespaceDeclaration || (node.Kind() == SyntaxKind.CompilationUnit && _syntaxTree.Options.Kind == SourceCodeKind.Regular)); 983525"];
6820 [label="node.Kind() 983526"];
6821 [label="param Kind(this) 983527"];
6822 [label="return (SyntaxKind)this.Green.RawKind; 983528"];
6823 [label="Debug.Assert(node.Kind() == SyntaxKind.NamespaceDeclaration || (node.Kind() == SyntaxKind.CompilationUnit && _syntaxTree.Options.Kind == SourceCodeKind.Regular)); 983529"];
6824 [label="Debug.Assert(node.Kind() == SyntaxKind.NamespaceDeclaration || (node.Kind() == SyntaxKind.CompilationUnit && _syntaxTree.Options.Kind == SourceCodeKind.Regular)); 983530"];
6825 [label="_syntaxTree.Options 983531"];
6826 [label="get\n            {\n                return this.Options;\n            } 983532"];
6827 [label="Debug.Assert(node.Kind() == SyntaxKind.NamespaceDeclaration || (node.Kind() == SyntaxKind.CompilationUnit && _syntaxTree.Options.Kind == SourceCodeKind.Regular)); 983533"];
6828 [label="Debug.Assert(node.Kind() == SyntaxKind.NamespaceDeclaration || (node.Kind() == SyntaxKind.CompilationUnit && _syntaxTree.Options.Kind == SourceCodeKind.Regular)); 983534"];
6829 [label="if (members.Count == 0)\n            {\n                return ImmutableArray<SingleNamespaceOrTypeDeclaration>.Empty;\n            } 983535"];
6830 [label="if (members.Count == 0)\n            {\n                return ImmutableArray<SingleNamespaceOrTypeDeclaration>.Empty;\n            } 983536"];
6831 [label="return ImmutableArray<SingleNamespaceOrTypeDeclaration>.Empty; 983537"];
6832 [label="return new RootSingleNamespaceDeclaration(\n                hasUsings: compilationUnit.Usings.Any(),\n                hasExternAliases: compilationUnit.Externs.Any(),\n                treeNode: _syntaxTree.GetReference(compilationUnit),\n                children: children,\n                referenceDirectives: ImmutableArray<ReferenceDirective>.Empty,\n                hasAssemblyAttributes: compilationUnit.AttributeLists.Any()); 983538"];
6833 [label="compilationUnit.Usings 983539"];
6834 [label="param GetReference(SyntaxNode node) 983540"];
6835 [label="param GetReference(this) 983541"];
6836 [label="return new SimpleSyntaxReference(node); 983542"];
6837 [label="return new SimpleSyntaxReference(node); 983543"];
6838 [label="new SimpleSyntaxReference(node) 983544"];
6839 [label="param SimpleSyntaxReference(SyntaxNode node) 983545"];
6840 [label="param SimpleSyntaxReference(this) 983546"];
6841 [label="param SimpleSyntaxReference(this) 983547"];
6842 [label="_node 983548"];
6843 [label="_node 983549"];
6844 [label="return new RootSingleNamespaceDeclaration(\n                hasUsings: compilationUnit.Usings.Any(),\n                hasExternAliases: compilationUnit.Externs.Any(),\n                treeNode: _syntaxTree.GetReference(compilationUnit),\n                children: children,\n                referenceDirectives: ImmutableArray<ReferenceDirective>.Empty,\n                hasAssemblyAttributes: compilationUnit.AttributeLists.Any()); 983550"];
6845 [label="return new RootSingleNamespaceDeclaration(\n                hasUsings: compilationUnit.Usings.Any(),\n                hasExternAliases: compilationUnit.Externs.Any(),\n                treeNode: _syntaxTree.GetReference(compilationUnit),\n                children: children,\n                referenceDirectives: ImmutableArray<ReferenceDirective>.Empty,\n                hasAssemblyAttributes: compilationUnit.AttributeLists.Any()); 983551"];
6846 [label="return new RootSingleNamespaceDeclaration(\n                hasUsings: compilationUnit.Usings.Any(),\n                hasExternAliases: compilationUnit.Externs.Any(),\n                treeNode: _syntaxTree.GetReference(compilationUnit),\n                children: children,\n                referenceDirectives: ImmutableArray<ReferenceDirective>.Empty,\n                hasAssemblyAttributes: compilationUnit.AttributeLists.Any()); 983552"];
6847 [label="return new RootSingleNamespaceDeclaration(\n                hasUsings: compilationUnit.Usings.Any(),\n                hasExternAliases: compilationUnit.Externs.Any(),\n                treeNode: _syntaxTree.GetReference(compilationUnit),\n                children: children,\n                referenceDirectives: ImmutableArray<ReferenceDirective>.Empty,\n                hasAssemblyAttributes: compilationUnit.AttributeLists.Any()); 983553"];
6848 [label="return new RootSingleNamespaceDeclaration(\n                hasUsings: compilationUnit.Usings.Any(),\n                hasExternAliases: compilationUnit.Externs.Any(),\n                treeNode: _syntaxTree.GetReference(compilationUnit),\n                children: children,\n                referenceDirectives: ImmutableArray<ReferenceDirective>.Empty,\n                hasAssemblyAttributes: compilationUnit.AttributeLists.Any()); 983554"];
6849 [label="compilationUnit.AttributeLists 983555"];
6850 [label="param RootSingleNamespaceDeclaration(bool hasUsings) 983556"];
6851 [label="param RootSingleNamespaceDeclaration(bool hasExternAliases) 983557"];
6852 [label="param RootSingleNamespaceDeclaration(SyntaxReference treeNode) 983558"];
6853 [label="param RootSingleNamespaceDeclaration(ImmutableArray<SingleNamespaceOrTypeDeclaration> children) 983559"];
6854 [label="param RootSingleNamespaceDeclaration(ImmutableArray<ReferenceDirective> referenceDirectives) 983560"];
6855 [label="param RootSingleNamespaceDeclaration(bool hasAssemblyAttributes) 983561"];
6856 [label="param RootSingleNamespaceDeclaration(this) 983562"];
6857 [label="string.Empty 983563"];
6858 [label="treeNode 983564"];
6859 [label="treeNode 983565"];
6860 [label="new SourceLocation(treeNode) 983566"];
6861 [label="new SourceLocation(treeNode) 983567"];
6862 [label="get\n            {\n                return _node.SyntaxTree;\n            } 983568"];
6863 [label="return _node.SyntaxTree; 983569"];
6864 [label="_node.SyntaxTree 983570"];
6865 [label="get\n            {\n                return this.SyntaxTree;\n            } 983571"];
6866 [label="this.SyntaxTree 983572"];
6867 [label="get\n            {\n                var result = this._syntaxTree ?? ComputeSyntaxTree(this);\n                Debug.Assert(result != null);\n                return result;\n            } 983573"];
6868 [label="var result = this._syntaxTree ?? ComputeSyntaxTree(this); 983574"];
6869 [label="Debug.Assert(result != null); 983575"];
6870 [label="Debug.Assert(result != null); 983576"];
6871 [label="return result; 983577"];
6872 [label="return this.SyntaxTree; 983578"];
6873 [label="get\n            {\n                return _node.Span;\n            } 983579"];
6874 [label="return _node.Span; 983580"];
6875 [label="children 983581"];
6876 [label="ImmutableArray<Diagnostic>.Empty 983582"];
6877 [label="param RootSingleNamespaceDeclaration(this) 983583"];
6878 [label="param SingleNamespaceDeclaration(string name) 983584"];
6879 [label="param SingleNamespaceDeclaration(SyntaxReference syntaxReference) 983585"];
6880 [label="param SingleNamespaceDeclaration(SourceLocation nameLocation) 983586"];
6881 [label="param SingleNamespaceDeclaration(ImmutableArray<SingleNamespaceOrTypeDeclaration> children) 983587"];
6882 [label="param SingleNamespaceDeclaration(ImmutableArray<Diagnostic> diagnostics) 983588"];
6883 [label="param SingleNamespaceDeclaration(this) 983589"];
6884 [label="name 983590"];
6885 [label="syntaxReference 983591"];
6886 [label="nameLocation 983592"];
6887 [label="diagnostics 983593"];
6888 [label="param SingleNamespaceDeclaration(this) 983594"];
6889 [label="param SingleNamespaceOrTypeDeclaration(string name) 983595"];
6890 [label="param SingleNamespaceOrTypeDeclaration(SyntaxReference syntaxReference) 983596"];
6891 [label="param SingleNamespaceOrTypeDeclaration(SourceLocation nameLocation) 983597"];
6892 [label="param SingleNamespaceOrTypeDeclaration(ImmutableArray<Diagnostic> diagnostics) 983598"];
6893 [label="param SingleNamespaceOrTypeDeclaration(this) 983599"];
6894 [label="name 983600"];
6895 [label="param SingleNamespaceOrTypeDeclaration(this) 983601"];
6896 [label="param Declaration(string name) 983602"];
6897 [label="name 983603"];
6898 [label="this.name 983604"];
6899 [label="_syntaxReference 983605"];
6900 [label="_nameLocation 983606"];
6901 [label="_syntaxReference 983607"];
6902 [label="_nameLocation 983608"];
6903 [label="Diagnostics 983609"];
6904 [label="_children 983610"];
6905 [label="_hasAssemblyAttributes 983611"];
6906 [label="_hasUsings 983612"];
6907 [label="_hasExternAliases 983613"];
6908 [label="Debug.Assert(!referenceDirectives.IsDefault); 983614"];
6909 [label="_referenceDirectives 983615"];
6910 [label="_hasAssemblyAttributes 983616"];
6911 [label="_hasUsings 983617"];
6912 [label="_hasExternAliases 983618"];
6913 [label="return new RootSingleNamespaceDeclaration(\n                hasUsings: compilationUnit.Usings.Any(),\n                hasExternAliases: compilationUnit.Externs.Any(),\n                treeNode: _syntaxTree.GetReference(compilationUnit),\n                children: children,\n                referenceDirectives: ImmutableArray<ReferenceDirective>.Empty,\n                hasAssemblyAttributes: compilationUnit.AttributeLists.Any()); 983619"];
6914 [label="return new RootSingleNamespaceDeclaration(\n                hasUsings: compilationUnit.Usings.Any(),\n                hasExternAliases: compilationUnit.Externs.Any(),\n                treeNode: _syntaxTree.GetReference(compilationUnit),\n                children: children,\n                referenceDirectives: ImmutableArray<ReferenceDirective>.Empty,\n                hasAssemblyAttributes: compilationUnit.AttributeLists.Any()); 983620"];
6915 [label="_latestLazyRootDeclaration.Value.ReferenceDirectives 983621"];
6916 [label="get\n            {\n                return _referenceDirectives;\n            } 983622"];
6917 [label="return _referenceDirectives; 983623"];
6918 [label="get { return _options; } 983624"];
6919 [label="return _options; 983625"];
6920 [label="get { return CSharp.MessageProvider.Instance; } 983626"];
6921 [label="return CSharp.MessageProvider.Instance; 983627"];
6922 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 983628"];
6923 [label="var assemblyBeingBuiltData = new AssemblyDataForAssemblyBeingBuilt(new AssemblyIdentity(name: SimpleAssemblyName, noThrow: true), referencedAssemblies, modules); 983629"];
6924 [label="var assemblyBeingBuiltData = new AssemblyDataForAssemblyBeingBuilt(new AssemblyIdentity(name: SimpleAssemblyName, noThrow: true), referencedAssemblies, modules); 983630"];
6925 [label="var assemblyBeingBuiltData = new AssemblyDataForAssemblyBeingBuilt(new AssemblyIdentity(name: SimpleAssemblyName, noThrow: true), referencedAssemblies, modules); 983631"];
6926 [label="var explicitAssemblyData = referencedAssemblies.Insert(0, assemblyBeingBuiltData); 983632"];
6927 [label="var explicitAssemblyData = referencedAssemblies.Insert(0, assemblyBeingBuiltData); 983633"];
6928 [label="bool hasCircularReference; 983634"];
6929 [label="int corLibraryIndex; 983635"];
6930 [label="ImmutableArray<MetadataReference> implicitlyResolvedReferences; 983636"];
6931 [label="implicitlyResolvedReferences 983637"];
6932 [label="ImmutableArray<ResolvedReference> implicitlyResolvedReferenceMap; 983638"];
6933 [label="implicitlyResolvedReferenceMap 983639"];
6934 [label="ImmutableArray<AssemblyData> allAssemblyData; 983640"];
6935 [label="allAssemblyData 983641"];
6936 [label="var temp1 = compilation.ScriptCompilationInfo; 983642"];
6937 [label="var temp2 = temp1 != null ? temp1.PreviousScriptCompilation : null; 983643"];
6938 [label="var temp2 = temp1 != null ? temp1.PreviousScriptCompilation : null; 983644"];
6939 [label="temp1 != null 983645"];
6940 [label="var temp3 = temp2 != null ? temp2.GetBoundReferenceManager() : null; 983646"];
6941 [label="var temp3 = temp2 != null ? temp2.GetBoundReferenceManager() : null; 983647"];
6942 [label="temp2 != null 983648"];
6943 [label="var temp4 = temp3 != null ? temp3.ImplicitReferenceResolutions : null; 983649"];
6944 [label="var temp4 = temp3 != null ? temp3.ImplicitReferenceResolutions : null; 983650"];
6945 [label="temp3 != null 983651"];
6946 [label="var implicitReferenceResolutions = temp4 ?? ImmutableDictionary<AssemblyIdentity, PortableExecutableReference?>.Empty; 983652"];
6947 [label="var implicitReferenceResolutions = temp4 ?? ImmutableDictionary<AssemblyIdentity, PortableExecutableReference?>.Empty; 983653"];
6948 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 983654"];
6949 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 983655"];
6950 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 983656"];
6951 [label="compilation.Options 983657"];
6952 [label="get\n            {\n                return _options;\n            } 983658"];
6953 [label="return _options; 983659"];
6954 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 983660"];
6955 [label="compilation.Options 983661"];
6956 [label="get\n            {\n                return _options;\n            } 983662"];
6957 [label="return _options; 983663"];
6958 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 983664"];
6959 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 983665"];
6960 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 983666"];
6961 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 983667"];
6962 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 983668"];
6963 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 983669"];
6964 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 983670"];
6965 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 983671"];
6966 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 983672"];
6967 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 983673"];
6968 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 983674"];
6969 [label="Debug.Assert(bindingResult.Length == allAssemblyData.Length); 983675"];
6970 [label="var references = explicitReferences.AddRange(implicitlyResolvedReferences); 983676"];
6971 [label="referenceMap = referenceMap.AddRange(implicitlyResolvedReferenceMap); 983677"];
6972 [label="referenceMap = referenceMap.AddRange(implicitlyResolvedReferenceMap); 983678"];
6973 [label="Dictionary<MetadataReference, int> referencedAssembliesMap, referencedModulesMap; 983679"];
6974 [label="ImmutableArray<ImmutableArray<string>> aliasesOfReferencedAssemblies; 983680"];
6975 [label="aliasesOfReferencedAssemblies 983681"];
6976 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 983682"];
6977 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 983683"];
6978 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 983684"];
6979 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 983685"];
6980 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 983686"];
6981 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 983687"];
6982 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 983688"];
6983 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 983689"];
6984 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 983690"];
6985 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 983691"];
6986 [label="var newSymbols = new List<int>(); 983692"];
6987 [label="for (int i = 1; i < bindingResult.Length; i++)\n                    {\n                        ref BoundInputAssembly bound = ref bindingResult[i];\n                        if (bound.AssemblySymbol is null)\n                        {\n                            // symbol hasn't been found in the cache, create a new one\n                            bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol();\n                            newSymbols.Add(i);\n                        }\n\n                        Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked);\n                    } 983693"];
6988 [label="for (int i = 1; i < bindingResult.Length; i++)\n                    {\n                        ref BoundInputAssembly bound = ref bindingResult[i];\n                        if (bound.AssemblySymbol is null)\n                        {\n                            // symbol hasn't been found in the cache, create a new one\n                            bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol();\n                            newSymbols.Add(i);\n                        }\n\n                        Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked);\n                    } 983694"];
6989 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 983695"];
6990 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 983696"];
6991 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 983697"];
6992 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 983698"];
6993 [label="t_assemblyForWhichCurrentThreadIsComputingKeys 983699"];
6994 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 983700"];
6995 [label="new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules) 983701"];
6996 [label="param SourceAssemblySymbol(CSharpCompilation compilation) 983702"];
6997 [label="param SourceAssemblySymbol(string assemblySimpleName) 983703"];
6998 [label="param SourceAssemblySymbol(string moduleName) 983704"];
6999 [label="param SourceAssemblySymbol(ImmutableArray<PEModule> netModules) 983705"];
7000 [label="param SourceAssemblySymbol(this) 983706"];
7001 [label="param SourceAssemblySymbol(this) 983707"];
7002 [label="param MetadataOrSourceAssemblySymbol(this) 983708"];
7003 [label="param MetadataOrSourceAssemblySymbol(this) 983709"];
7004 [label="param NonMissingAssemblySymbol(this) 983710"];
7005 [label="new char[] { '+' } 983711"];
7006 [label="'+' 983712"];
7007 [label="new char[] { '+' } 983713"];
7008 [label="s_nestedTypeNameSeparators = new char[] { '+' } 983714"];
7009 [label="param NonMissingAssemblySymbol(this) 983715"];
7010 [label="param AssemblySymbol(this) 983716"];
7011 [label="SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier\n                    | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier 983717"];
7012 [label="SymbolDisplayFormat.TestFormat\n                .AddMiscellaneousOptions(SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier\n                    | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier) 983718"];
7013 [label="SymbolDisplayCompilerInternalOptions.None 983719"];
7014 [label="SymbolDisplayFormat.TestFormat\n                .AddMiscellaneousOptions(SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier\n                    | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier)\n                .WithCompilerInternalOptions(SymbolDisplayCompilerInternalOptions.None) 983720"];
7015 [label="s_debuggerDisplayFormat =\n            SymbolDisplayFormat.TestFormat\n                .AddMiscellaneousOptions(SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier\n                    | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier)\n                .WithCompilerInternalOptions(SymbolDisplayCompilerInternalOptions.None) 983721"];
7016 [label="param AssemblySymbol(this) 983722"];
7017 [label="param Symbol(this) 983723"];
7018 [label="_lazyISymbol 983724"];
7019 [label="_corLibrary 983725"];
7020 [label="new ConcurrentDictionary<MetadataTypeName.Key, NamedTypeSymbol>() 983726"];
7021 [label="_emittedNameToTypeMap =\n            new ConcurrentDictionary<MetadataTypeName.Key, NamedTypeSymbol>() 983727"];
7022 [label="_globalNamespace 983728"];
7023 [label="_lazySpecialTypes 983729"];
7024 [label="_cachedSpecialTypes 983730"];
7025 [label="_lazyNativeIntegerTypes 983731"];
7026 [label="_lazyTypeNames 983732"];
7027 [label="_lazyNamespaceNames 983733"];
7028 [label="_lazySpecialTypeMembers 983734"];
7029 [label="_assembliesToWhichInternalAccessHasBeenAnalyzed 983735"];
7030 [label="_compilation 983736"];
7031 [label="lazyAssemblyIdentity 983737"];
7032 [label="_assemblySimpleName 983738"];
7033 [label="_lazyStrongNameKeys 983739"];
7034 [label="_lazySourceAttributesBag 983740"];
7035 [label="_lazyNetModuleAttributesBag 983741"];
7036 [label="_lazyForwardedTypesFromSource 983742"];
7037 [label="_lazyOmittedAttributeIndices 983743"];
7038 [label="_lazyContainsExtensionMethods 983744"];
7039 [label="new ConcurrentDictionary<FieldSymbol, bool>() 983745"];
7040 [label="_unassignedFieldsMap = new ConcurrentDictionary<FieldSymbol, bool>() 983746"];
7041 [label="new ConcurrentSet<FieldSymbol>() 983747"];
7042 [label="_unreadFields = new ConcurrentSet<FieldSymbol>() 983748"];
7043 [label="new ConcurrentSet<TypeSymbol>() 983749"];
7044 [label="TypesReferencedInExternalMethods = new ConcurrentSet<TypeSymbol>() 983750"];
7045 [label="_optimisticallyGrantedInternalsAccess 983751"];
7046 [label="_lazyInternalsVisibleToMap 983752"];
7047 [label="Debug.Assert(compilation != null); 983753"];
7048 [label="Debug.Assert(compilation != null); 983754"];
7049 [label="Debug.Assert(assemblySimpleName != null); 983755"];
7050 [label="Debug.Assert(assemblySimpleName != null); 983756"];
7051 [label="Debug.Assert(!String.IsNullOrWhiteSpace(moduleName)); 983757"];
7052 [label="Debug.Assert(!netModules.IsDefault); 983758"];
7053 [label="_compilation 983759"];
7054 [label="_assemblySimpleName 983760"];
7055 [label="ArrayBuilder<ModuleSymbol> moduleBuilder = new ArrayBuilder<ModuleSymbol>(1 + netModules.Length); 983761"];
7056 [label="ArrayBuilder<ModuleSymbol> moduleBuilder = new ArrayBuilder<ModuleSymbol>(1 + netModules.Length); 983762"];
7057 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 983763"];
7058 [label="compilation.Declarations 983764"];
7059 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 983765"];
7060 [label="_syntaxAndDeclarations.GetLazyState() 983766"];
7061 [label="param GetLazyState(this) 983767"];
7062 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 983768"];
7063 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 983769"];
7064 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 983770"];
7065 [label="new SourceModuleSymbol(this, compilation.Declarations, moduleName) 983771"];
7066 [label="param SourceModuleSymbol(SourceAssemblySymbol assemblySymbol) 983772"];
7067 [label="param SourceModuleSymbol(DeclarationTable declarations) 983773"];
7068 [label="param SourceModuleSymbol(string moduleName) 983774"];
7069 [label="param SourceModuleSymbol(this) 983775"];
7070 [label="param SourceModuleSymbol(this) 983776"];
7071 [label="param NonMissingModuleSymbol(this) 983777"];
7072 [label="param NonMissingModuleSymbol(this) 983778"];
7073 [label="param ModuleSymbol(this) 983779"];
7074 [label="param ModuleSymbol(this) 983780"];
7075 [label="param Symbol(this) 983781"];
7076 [label="_lazyISymbol 983782"];
7077 [label="_moduleReferences 983783"];
7078 [label="_assemblySymbol 983784"];
7079 [label="_lazyContainsExplicitDefinitionOfNoPiaLocalTypes = ThreeState.Unknown 983785"];
7080 [label="_sources 983786"];
7081 [label="_lazyCustomAttributesBag 983787"];
7082 [label="_globalNamespace 983788"];
7083 [label="_hasBadAttributes 983789"];
7084 [label="_name 983790"];
7085 [label="Debug.Assert((object)assemblySymbol != null); 983791"];
7086 [label="Debug.Assert((object)assemblySymbol != null); 983792"];
7087 [label="_assemblySymbol 983793"];
7088 [label="_sources 983794"];
7089 [label="_name 983795"];
7090 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 983796"];
7091 [label="compilation.Options 983797"];
7092 [label="get\n            {\n                return _options;\n            } 983798"];
7093 [label="return _options; 983799"];
7094 [label="var importOptions = (compilation.Options.MetadataImportOptions == MetadataImportOptions.All) ?\n                MetadataImportOptions.All : MetadataImportOptions.Internal; 983800"];
7095 [label="(compilation.Options.MetadataImportOptions == MetadataImportOptions.All) 983801"];
7096 [label="foreach (PEModule netModule in netModules)\n            {\n                moduleBuilder.Add(new PEModuleSymbol(this, netModule, importOptions, moduleBuilder.Count));\n                // SetReferences will be called later by the ReferenceManager (in CreateSourceAssemblyFullBind for \n                // a fresh manager, in CreateSourceAssemblyReuseData for a reused one).\n            } 983802"];
7097 [label="moduleBuilder.Add(new PEModuleSymbol(this, netModule, importOptions, moduleBuilder.Count)); 983803"];
7098 [label="moduleBuilder.Add(new PEModuleSymbol(this, netModule, importOptions, moduleBuilder.Count)); 983804"];
7099 [label="moduleBuilder.Add(new PEModuleSymbol(this, netModule, importOptions, moduleBuilder.Count)); 983805"];
7100 [label="31 983806"];
7101 [label="DefaultTypeMapCapacity = 31 983807"];
7102 [label="moduleBuilder.Add(new PEModuleSymbol(this, netModule, importOptions, moduleBuilder.Count)); 983808"];
7103 [label="new PEModuleSymbol(this, netModule, importOptions, moduleBuilder.Count) 983809"];
7104 [label="param PEModuleSymbol(SourceAssemblySymbol assemblySymbol) 983810"];
7105 [label="param PEModuleSymbol(PEModule module) 983811"];
7106 [label="param PEModuleSymbol(MetadataImportOptions importOptions) 983812"];
7107 [label="param PEModuleSymbol(int ordinal) 983813"];
7108 [label="param PEModuleSymbol(this) 983814"];
7109 [label="assemblySymbol 983815"];
7110 [label="module 983816"];
7111 [label="importOptions 983817"];
7112 [label="ordinal 983818"];
7113 [label="param PEModuleSymbol(this) 983819"];
7114 [label="param PEModuleSymbol(AssemblySymbol assemblySymbol) 983820"];
7115 [label="param PEModuleSymbol(PEModule module) 983821"];
7116 [label="param PEModuleSymbol(MetadataImportOptions importOptions) 983822"];
7117 [label="param PEModuleSymbol(int ordinal) 983823"];
7118 [label="param PEModuleSymbol(this) 983824"];
7119 [label="param PEModuleSymbol(this) 983825"];
7120 [label="param NonMissingModuleSymbol(this) 983826"];
7121 [label="param NonMissingModuleSymbol(this) 983827"];
7122 [label="param ModuleSymbol(this) 983828"];
7123 [label="param ModuleSymbol(this) 983829"];
7124 [label="param Symbol(this) 983830"];
7125 [label="_lazyISymbol 983831"];
7126 [label="_moduleReferences 983832"];
7127 [label="_assemblySymbol 983833"];
7128 [label="_ordinal 983834"];
7129 [label="_module 983835"];
7130 [label="_globalNamespace 983836"];
7131 [label="_lazySystemTypeSymbol 983837"];
7132 [label="_lazyEventRegistrationTokenSymbol 983838"];
7133 [label="_lazyEventRegistrationTokenTableSymbol 983839"];
7134 [label="2 983840"];
7135 [label="concurrencyLevel: 2 983841"];
7136 [label="capacity: DefaultTypeMapCapacity 983842"];
7137 [label="new ConcurrentDictionary<TypeDefinitionHandle, TypeSymbol>(concurrencyLevel: 2, capacity: DefaultTypeMapCapacity) 983843"];
7138 [label="TypeHandleToTypeMap =\n                                    new ConcurrentDictionary<TypeDefinitionHandle, TypeSymbol>(concurrencyLevel: 2, capacity: DefaultTypeMapCapacity) 983844"];
7139 [label="2 983845"];
7140 [label="concurrencyLevel: 2 983846"];
7141 [label="capacity: DefaultTypeMapCapacity 983847"];
7142 [label="new ConcurrentDictionary<TypeReferenceHandle, TypeSymbol>(concurrencyLevel: 2, capacity: DefaultTypeMapCapacity) 983848"];
7143 [label="TypeRefHandleToTypeMap =\n                                    new ConcurrentDictionary<TypeReferenceHandle, TypeSymbol>(concurrencyLevel: 2, capacity: DefaultTypeMapCapacity) 983849"];
7144 [label="ImportOptions 983850"];
7145 [label="_lazyTypeNames 983851"];
7146 [label="_lazyNamespaceNames 983852"];
7147 [label="_lazyNullableMemberMetadata 983853"];
7148 [label="Debug.Assert((object)assemblySymbol != null); 983854"];
7149 [label="Debug.Assert((object)assemblySymbol != null); 983855"];
7150 [label="Debug.Assert(module != null); 983856"];
7151 [label="Debug.Assert(module != null); 983857"];
7152 [label="_assemblySymbol 983858"];
7153 [label="_ordinal 983859"];
7154 [label="_module 983860"];
7155 [label="this.ImportOptions 983861"];
7156 [label="_globalNamespace = new PEGlobalNamespaceSymbol(this); 983862"];
7157 [label="_globalNamespace = new PEGlobalNamespaceSymbol(this); 983863"];
7158 [label="new PEGlobalNamespaceSymbol(this) 983864"];
7159 [label="param PEGlobalNamespaceSymbol(PEModuleSymbol moduleSymbol) 983865"];
7160 [label="param PEGlobalNamespaceSymbol(this) 983866"];
7161 [label="param PEGlobalNamespaceSymbol(this) 983867"];
7162 [label="param PENamespaceSymbol(this) 983868"];
7163 [label="param PENamespaceSymbol(this) 983869"];
7164 [label="param NamespaceSymbol(this) 983870"];
7165 [label="param NamespaceSymbol(this) 983871"];
7166 [label="param NamespaceOrTypeSymbol(this) 983872"];
7167 [label="param NamespaceOrTypeSymbol(this) 983873"];
7168 [label="param Symbol(this) 983874"];
7169 [label="_lazyISymbol 983875"];
7170 [label="_lazyAdapter 983876"];
7171 [label="_lazyQualifiedName 983877"];
7172 [label="lazyNamespaces 983878"];
7173 [label="lazyTypes 983879"];
7174 [label="_lazyNoPiaLocalTypes 983880"];
7175 [label="_moduleSymbol 983881"];
7176 [label="Debug.Assert((object)moduleSymbol != null); 983882"];
7177 [label="Debug.Assert((object)moduleSymbol != null); 983883"];
7178 [label="_moduleSymbol 983884"];
7179 [label="_globalNamespace 983885"];
7180 [label="this.MetadataLocation = ImmutableArray.Create<MetadataLocation>(new MetadataLocation(this)); 983886"];
7181 [label="this.MetadataLocation = ImmutableArray.Create<MetadataLocation>(new MetadataLocation(this)); 983887"];
7182 [label="this.MetadataLocation 983888"];
7183 [label="Debug.Assert(ordinal > 0); 983889"];
7184 [label="Debug.Assert(ordinal > 0); 983890"];
7185 [label="_modules = moduleBuilder.ToImmutableAndFree(); 983891"];
7186 [label="_modules 983892"];
7187 [label="compilation.Options 983893"];
7188 [label="get\n            {\n                return _options;\n            } 983894"];
7189 [label="return _options; 983895"];
7190 [label="if (!compilation.Options.CryptoPublicKey.IsEmpty)\n            {\n                // Private key is not necessary for assembly identity, only when emitting.  For this reason, the private key can remain null.\n                _lazyStrongNameKeys = StrongNameKeys.Create(compilation.Options.CryptoPublicKey, privateKey: null, hasCounterSignature: false, MessageProvider.Instance);\n            } 983896"];
7191 [label="if (!compilation.Options.CryptoPublicKey.IsEmpty)\n            {\n                // Private key is not necessary for assembly identity, only when emitting.  For this reason, the private key can remain null.\n                _lazyStrongNameKeys = StrongNameKeys.Create(compilation.Options.CryptoPublicKey, privateKey: null, hasCounterSignature: false, MessageProvider.Instance);\n            } 983897"];
7192 [label="AssemblySymbol? corLibrary; 983898"];
7193 [label="if (corLibraryIndex == 0)\n                    {\n                        corLibrary = assemblySymbol;\n                    }\n                    else if (corLibraryIndex > 0)\n                    {\n                        corLibrary = bindingResult[corLibraryIndex].AssemblySymbol;\n                    }\n                    else\n                    {\n                        corLibrary = MissingCorLibrarySymbol.Instance;\n                    } 983899"];
7194 [label="if (corLibraryIndex == 0)\n                    {\n                        corLibrary = assemblySymbol;\n                    }\n                    else if (corLibraryIndex > 0)\n                    {\n                        corLibrary = bindingResult[corLibraryIndex].AssemblySymbol;\n                    }\n                    else\n                    {\n                        corLibrary = MissingCorLibrarySymbol.Instance;\n                    } 983900"];
7195 [label="if (corLibraryIndex > 0)\n                    {\n                        corLibrary = bindingResult[corLibraryIndex].AssemblySymbol;\n                    }\n                    else\n                    {\n                        corLibrary = MissingCorLibrarySymbol.Instance;\n                    } 983901"];
7196 [label="new MissingCorLibrarySymbol() 983902"];
7197 [label="param MissingCorLibrarySymbol(this) 983903"];
7198 [label="'<Missing Core Assembly>' 983904"];
7199 [label="new AssemblyIdentity('<Missing Core Assembly>') 983905"];
7200 [label="new AssemblyIdentity('<Missing Core Assembly>') 983906"];
7201 [label="param MissingAssemblySymbol(AssemblyIdentity identity) 983907"];
7202 [label="param MissingAssemblySymbol(this) 983908"];
7203 [label="param AssemblySymbol(this) 983909"];
7204 [label="param Symbol(this) 983910"];
7205 [label="_lazyISymbol 983911"];
7206 [label="_corLibrary 983912"];
7207 [label="identity 983913"];
7208 [label="moduleSymbol 983914"];
7209 [label="Debug.Assert(identity != null); 983915"];
7210 [label="Debug.Assert(identity != null); 983916"];
7211 [label="this.identity 983917"];
7212 [label="moduleSymbol = new MissingModuleSymbol(this, 0); 983918"];
7213 [label="moduleSymbol = new MissingModuleSymbol(this, 0); 983919"];
7214 [label="new MissingModuleSymbol(this, 0) 983920"];
7215 [label="param MissingModuleSymbol(AssemblySymbol assembly) 983921"];
7216 [label="param MissingModuleSymbol(int ordinal) 983922"];
7217 [label="param MissingModuleSymbol(this) 983923"];
7218 [label="param MissingModuleSymbol(this) 983924"];
7219 [label="param ModuleSymbol(this) 983925"];
7220 [label="param ModuleSymbol(this) 983926"];
7221 [label="param Symbol(this) 983927"];
7222 [label="_lazyISymbol 983928"];
7223 [label="assembly 983929"];
7224 [label="ordinal 983930"];
7225 [label="globalNamespace 983931"];
7226 [label="Debug.Assert((object)assembly != null); 983932"];
7227 [label="Debug.Assert((object)assembly != null); 983933"];
7228 [label="Debug.Assert(ordinal >= -1); 983934"];
7229 [label="Debug.Assert(ordinal >= -1); 983935"];
7230 [label="this.assembly 983936"];
7231 [label="this.ordinal 983937"];
7232 [label="globalNamespace = new MissingNamespaceSymbol(this); 983938"];
7233 [label="globalNamespace = new MissingNamespaceSymbol(this); 983939"];
7234 [label="new MissingNamespaceSymbol(this) 983940"];
7235 [label="param MissingNamespaceSymbol(MissingModuleSymbol containingModule) 983941"];
7236 [label="param MissingNamespaceSymbol(this) 983942"];
7237 [label="param MissingNamespaceSymbol(this) 983943"];
7238 [label="param NamespaceSymbol(this) 983944"];
7239 [label="param NamespaceSymbol(this) 983945"];
7240 [label="param NamespaceOrTypeSymbol(this) 983946"];
7241 [label="param NamespaceOrTypeSymbol(this) 983947"];
7242 [label="param Symbol(this) 983948"];
7243 [label="_lazyISymbol 983949"];
7244 [label="_lazyAdapter 983950"];
7245 [label="_lazyQualifiedName 983951"];
7246 [label="_name 983952"];
7247 [label="_containingSymbol 983953"];
7248 [label="Debug.Assert((object)containingModule != null); 983954"];
7249 [label="Debug.Assert((object)containingModule != null); 983955"];
7250 [label="_containingSymbol 983956"];
7251 [label="_name 983957"];
7252 [label="globalNamespace 983958"];
7253 [label="moduleSymbol 983959"];
7254 [label="_lazySpecialTypes 983960"];
7255 [label="this.SetCorLibrary(this); 983961"];
7256 [label="this.SetCorLibrary(this) 983962"];
7257 [label="param SetCorLibrary(AssemblySymbol corLibrary) 983963"];
7258 [label="param SetCorLibrary(this) 983964"];
7259 [label="Debug.Assert((object)_corLibrary == null); 983965"];
7260 [label="Debug.Assert((object)_corLibrary == null); 983966"];
7261 [label="_corLibrary 983967"];
7262 [label="this.SetCorLibrary(this); 983968"];
7263 [label="Instance = new MissingCorLibrarySymbol() 983969"];
7264 [label="corLibrary = MissingCorLibrarySymbol.Instance; 983970"];
7265 [label="assemblySymbol.SetCorLibrary(corLibrary); 983971"];
7266 [label="assemblySymbol.SetCorLibrary(corLibrary) 983972"];
7267 [label="param SetCorLibrary(AssemblySymbol corLibrary) 983973"];
7268 [label="param SetCorLibrary(this) 983974"];
7269 [label="Debug.Assert((object)_corLibrary == null); 983975"];
7270 [label="Debug.Assert((object)_corLibrary == null); 983976"];
7271 [label="_corLibrary 983977"];
7272 [label="assemblySymbol.SetCorLibrary(corLibrary); 983978"];
7273 [label="Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies = null; 983979"];
7274 [label="int totalReferencedAssemblyCount = allAssemblyData.Length - 1; 983980"];
7275 [label="int totalReferencedAssemblyCount = allAssemblyData.Length - 1; 983981"];
7276 [label="ImmutableArray<ModuleReferences<AssemblySymbol>> moduleReferences; 983982"];
7277 [label="moduleReferences 983983"];
7278 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 983984"];
7279 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 983985"];
7280 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 983986"];
7281 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 983987"];
7282 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 983988"];
7283 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 983989"];
7284 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences) 983990"];
7285 [label="param SetupReferencesForSourceAssembly(SourceAssemblySymbol sourceAssembly) 983991"];
7286 [label="param SetupReferencesForSourceAssembly(ImmutableArray<PEModule> modules) 983992"];
7287 [label="param SetupReferencesForSourceAssembly(int totalReferencedAssemblyCount) 983993"];
7288 [label="param SetupReferencesForSourceAssembly(BoundInputAssembly[] bindingResult) 983994"];
7289 [label="param SetupReferencesForSourceAssembly(ref Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies) 983995"];
7290 [label="param SetupReferencesForSourceAssembly(out ImmutableArray<ModuleReferences<AssemblySymbol>> moduleReferences) 983996"];
7291 [label="sourceAssembly.Modules 983997"];
7292 [label="get\n            {\n                return _modules;\n            } 983998"];
7293 [label="return _modules; 983999"];
7294 [label="var moduleSymbols = sourceAssembly.Modules; 984000"];
7295 [label="Debug.Assert(moduleSymbols.Length == 1 + modules.Length); 984001"];
7296 [label="Debug.Assert(moduleSymbols.Length == 1 + modules.Length); 984002"];
7297 [label="Debug.Assert(moduleSymbols.Length == 1 + modules.Length); 984003"];
7298 [label="var moduleReferencesBuilder = (moduleSymbols.Length > 1) ? ArrayBuilder<ModuleReferences<AssemblySymbol>>.GetInstance() : null; 984004"];
7299 [label="var moduleReferencesBuilder = (moduleSymbols.Length > 1) ? ArrayBuilder<ModuleReferences<AssemblySymbol>>.GetInstance() : null; 984005"];
7300 [label="(moduleSymbols.Length > 1) 984006"];
7301 [label="int refsUsed = 0; 984007"];
7302 [label="for (int moduleIndex = 0; moduleIndex < moduleSymbols.Length; moduleIndex++)\n                {\n                    int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length;\n\n                    var identities = new AssemblyIdentity[refsCount];\n                    var symbols = new AssemblySymbol[refsCount];\n\n                    ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null;\n\n                    for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    }\n\n                    var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty());\n\n                    if (moduleIndex > 0)\n                    {\n                        moduleReferencesBuilder!.Add(references);\n                    }\n\n                    moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly);\n\n                    refsUsed += refsCount;\n                } 984008"];
7303 [label="for (int moduleIndex = 0; moduleIndex < moduleSymbols.Length; moduleIndex++)\n                {\n                    int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length;\n\n                    var identities = new AssemblyIdentity[refsCount];\n                    var symbols = new AssemblySymbol[refsCount];\n\n                    ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null;\n\n                    for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    }\n\n                    var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty());\n\n                    if (moduleIndex > 0)\n                    {\n                        moduleReferencesBuilder!.Add(references);\n                    }\n\n                    moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly);\n\n                    refsUsed += refsCount;\n                } 984009"];
7304 [label="int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length; 984010"];
7305 [label="(moduleIndex == 0) 984011"];
7306 [label="int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length; 984012"];
7307 [label="var identities = new AssemblyIdentity[refsCount]; 984013"];
7308 [label="var symbols = new AssemblySymbol[refsCount]; 984014"];
7309 [label="ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null; 984015"];
7310 [label="for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    } 984016"];
7311 [label="for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    } 984017"];
7312 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 984018"];
7313 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 984019"];
7314 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 984020"];
7315 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 984021"];
7316 [label="if (moduleIndex > 0)\n                    {\n                        moduleReferencesBuilder!.Add(references);\n                    } 984022"];
7317 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly); 984023"];
7318 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly); 984024"];
7319 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly); 984025"];
7320 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly) 984026"];
7321 [label="param SetReferences(ModuleReferences<AssemblySymbol> moduleReferences) 984027"];
7322 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 984028"];
7323 [label="param SetReferences(this) 984029"];
7324 [label="Debug.Assert(moduleReferences != null); 984030"];
7325 [label="Debug.Assert(moduleReferences != null); 984031"];
7326 [label="AssertReferencesUninitialized() 984032"];
7327 [label="param AssertReferencesUninitialized(this) 984033"];
7328 [label="Debug.Assert(_moduleReferences == null); 984034"];
7329 [label="Debug.Assert(_moduleReferences == null); 984035"];
7330 [label="AssertReferencesUninitialized(); 984036"];
7331 [label="_moduleReferences 984037"];
7332 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly); 984038"];
7333 [label="refsUsed += refsCount; 984039"];
7334 [label="int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length; 984040"];
7335 [label="(moduleIndex == 0) 984041"];
7336 [label="int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length; 984042"];
7337 [label="modules[moduleIndex - 1].ReferencedAssemblies.Length 984043"];
7338 [label="ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null; 984044"];
7339 [label="for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    } 984045"];
7340 [label="for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    } 984046"];
7341 [label="Debug.Assert(bindingResult[0].ReferenceBinding is object); 984047"];
7342 [label="Debug.Assert(bindingResult[0].ReferenceBinding is object); 984048"];
7343 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 984049"];
7344 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 984050"];
7345 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 984051"];
7346 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 984052"];
7347 [label="Debug.Assert(boundReference.ReferenceIdentity is object); 984053"];
7348 [label="if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        } 984054"];
7349 [label="symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies); 984055"];
7350 [label="symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies); 984056"];
7351 [label="GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies) 984057"];
7352 [label="param GetOrAddMissingAssemblySymbol(AssemblyIdentity assemblyIdentity) 984058"];
7353 [label="param GetOrAddMissingAssemblySymbol(ref Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies) 984059"];
7354 [label="MissingAssemblySymbol? missingAssembly; 984060"];
7355 [label="if (missingAssemblies == null)\n                {\n                    missingAssemblies = new Dictionary<AssemblyIdentity, MissingAssemblySymbol>();\n                }\n                else if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 984061"];
7356 [label="if (missingAssemblies == null)\n                {\n                    missingAssemblies = new Dictionary<AssemblyIdentity, MissingAssemblySymbol>();\n                }\n                else if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 984062"];
7357 [label="missingAssemblies = new Dictionary<AssemblyIdentity, MissingAssemblySymbol>(); 984063"];
7358 [label="missingAssembly = new MissingAssemblySymbol(assemblyIdentity); 984064"];
7359 [label="missingAssembly = new MissingAssemblySymbol(assemblyIdentity); 984065"];
7360 [label="new MissingAssemblySymbol(assemblyIdentity) 984066"];
7361 [label="param MissingAssemblySymbol(AssemblyIdentity identity) 984067"];
7362 [label="param MissingAssemblySymbol(this) 984068"];
7363 [label="identity 984069"];
7364 [label="moduleSymbol 984070"];
7365 [label="Debug.Assert(identity != null); 984071"];
7366 [label="Debug.Assert(identity != null); 984072"];
7367 [label="assembly 984073"];
7368 [label="ordinal 984074"];
7369 [label="globalNamespace 984075"];
7370 [label="Debug.Assert((object)assembly != null); 984076"];
7371 [label="Debug.Assert((object)assembly != null); 984077"];
7372 [label="Debug.Assert(ordinal >= -1); 984078"];
7373 [label="_name 984079"];
7374 [label="_containingSymbol 984080"];
7375 [label="Debug.Assert((object)containingModule != null); 984081"];
7376 [label="missingAssemblies.Add(assemblyIdentity, missingAssembly); 984082"];
7377 [label="missingAssemblies.Add(assemblyIdentity, missingAssembly); 984083"];
7378 [label="missingAssemblies.Add(assemblyIdentity, missingAssembly); 984084"];
7379 [label="return missingAssembly; 984085"];
7380 [label="symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies); 984086"];
7381 [label="symbols[k] 984087"];
7382 [label="identities[k] 984088"];
7383 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 984089"];
7384 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 984090"];
7385 [label="Debug.Assert(boundReference.ReferenceIdentity is object); 984091"];
7386 [label="if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        } 984092"];
7387 [label="symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies); 984093"];
7388 [label="GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies) 984094"];
7389 [label="param GetOrAddMissingAssemblySymbol(AssemblyIdentity assemblyIdentity) 984095"];
7390 [label="MissingAssemblySymbol? missingAssembly; 984096"];
7391 [label="if (missingAssemblies == null)\n                {\n                    missingAssemblies = new Dictionary<AssemblyIdentity, MissingAssemblySymbol>();\n                }\n                else if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 984097"];
7392 [label="if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 984098"];
7393 [label="if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 984099"];
7394 [label="if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 984100"];
7395 [label="return missingAssembly; 984101"];
7396 [label="symbols[k] 984102"];
7397 [label="identities[k] 984103"];
7398 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 984104"];
7399 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 984105"];
7400 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 984106"];
7401 [label="if (moduleIndex > 0)\n                    {\n                        moduleReferencesBuilder!.Add(references);\n                    } 984107"];
7402 [label="moduleReferencesBuilder!.Add(references); 984108"];
7403 [label="moduleReferencesBuilder!.Add(references); 984109"];
7404 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly) 984110"];
7405 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 984111"];
7406 [label="Debug.Assert(moduleReferences != null); 984112"];
7407 [label="Debug.Assert(moduleReferences != null); 984113"];
7408 [label="AssertReferencesUninitialized() 984114"];
7409 [label="param AssertReferencesUninitialized(this) 984115"];
7410 [label="Debug.Assert(_moduleReferences == null); 984116"];
7411 [label="Debug.Assert(_moduleReferences == null); 984117"];
7412 [label="AssertReferencesUninitialized(); 984118"];
7413 [label="refsUsed += refsCount; 984119"];
7414 [label="moduleReferences = moduleReferencesBuilder.ToImmutableOrEmptyAndFree(); 984120"];
7415 [label="moduleReferences = moduleReferencesBuilder.ToImmutableOrEmptyAndFree(); 984121"];
7416 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 984122"];
7417 [label="if (newSymbols.Count > 0)\n                    {\n                        // Only if we detected that a referenced assembly refers to the assembly being built\n                        // we allow the references to get a hold of the assembly being built.\n                        if (hasCircularReference)\n                        {\n                            bindingResult[0].AssemblySymbol = assemblySymbol;\n                        }\n\n                        InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies);\n                    } 984123"];
7418 [label="if (newSymbols.Count > 0)\n                    {\n                        // Only if we detected that a referenced assembly refers to the assembly being built\n                        // we allow the references to get a hold of the assembly being built.\n                        if (hasCircularReference)\n                        {\n                            bindingResult[0].AssemblySymbol = assemblySymbol;\n                        }\n\n                        InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies);\n                    } 984124"];
7419 [label="if (compilation._lazyAssemblySymbol is null)\n                    {\n                        lock (SymbolCacheAndReferenceManagerStateGuard)\n                        {\n                            if (compilation._lazyAssemblySymbol is null)\n                            {\n                                if (IsBound)\n                                {\n                                    // Another thread has finished constructing AssemblySymbol for another compilation that shares this manager.\n                                    // Drop the results and reuse the symbols that were created for the other compilation.\n                                    return false;\n                                }\n\n                                UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult);\n\n                                InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies());\n\n                                // Make sure that the given compilation holds on this instance of reference manager.\n                                Debug.Assert(ReferenceEquals(compilation._referenceManager, this) || HasCircularReference);\n                                compilation._referenceManager = this;\n\n                                // Finally, publish the source symbol after all data have been written.\n                                // Once lazyAssemblySymbol is non-null other readers might start reading the data written above.\n                                compilation._lazyAssemblySymbol = assemblySymbol;\n                            }\n                        }\n                    } 984125"];
7420 [label="if (compilation._lazyAssemblySymbol is null)\n                            {\n                                if (IsBound)\n                                {\n                                    // Another thread has finished constructing AssemblySymbol for another compilation that shares this manager.\n                                    // Drop the results and reuse the symbols that were created for the other compilation.\n                                    return false;\n                                }\n\n                                UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult);\n\n                                InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies());\n\n                                // Make sure that the given compilation holds on this instance of reference manager.\n                                Debug.Assert(ReferenceEquals(compilation._referenceManager, this) || HasCircularReference);\n                                compilation._referenceManager = this;\n\n                                // Finally, publish the source symbol after all data have been written.\n                                // Once lazyAssemblySymbol is non-null other readers might start reading the data written above.\n                                compilation._lazyAssemblySymbol = assemblySymbol;\n                            } 984126"];
7421 [label="if (IsBound)\n                                {\n                                    // Another thread has finished constructing AssemblySymbol for another compilation that shares this manager.\n                                    // Drop the results and reuse the symbols that were created for the other compilation.\n                                    return false;\n                                } 984127"];
7422 [label="UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult); 984128"];
7423 [label="UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult); 984129"];
7424 [label="UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult) 984130"];
7425 [label="param UpdateSymbolCacheNoLock(List<int> newSymbols) 984131"];
7426 [label="param UpdateSymbolCacheNoLock(ImmutableArray<AssemblyData> assemblies) 984132"];
7427 [label="param UpdateSymbolCacheNoLock(BoundInputAssembly[] bindingResult) 984133"];
7428 [label="foreach (int i in newSymbols)\n                {\n                    ref BoundInputAssembly current = ref bindingResult[i];\n                    Debug.Assert(current.AssemblySymbol is object);\n\n                    var compilationData = assemblies[i] as AssemblyDataForCompilation;\n                    if (compilationData != null)\n                    {\n                        compilationData.Compilation.CacheRetargetingAssemblySymbolNoLock(current.AssemblySymbol);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        fileData.CachedSymbols.Add((PEAssemblySymbol)current.AssemblySymbol);\n                    }\n                } 984134"];
7429 [label="UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult); 984135"];
7430 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 984136"];
7431 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 984137"];
7432 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 984138"];
7433 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 984139"];
7434 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 984140"];
7435 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 984141"];
7436 [label="ReferenceEquals(corLibrary, assemblySymbol) 984142"];
7437 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 984143"];
7438 [label="assemblySymbol.SourceModule 984144"];
7439 [label="get { return (SourceModuleSymbol)this.Modules[0]; } 984145"];
7440 [label="this.Modules 984146"];
7441 [label="get\n            {\n                return _modules;\n            } 984147"];
7442 [label="return _modules; 984148"];
7443 [label="return (SourceModuleSymbol)this.Modules[0]; 984149"];
7444 [label="return (SourceModuleSymbol)this.Modules[0]; 984150"];
7445 [label="assemblySymbol.SourceModule.GetReferencedAssemblySymbols() 984151"];
7446 [label="param GetReferencedAssemblySymbols(this) 984152"];
7447 [label="AssertReferencesInitialized() 984153"];
7448 [label="param AssertReferencesInitialized(this) 984154"];
7449 [label="Debug.Assert(_moduleReferences != null); 984155"];
7450 [label="Debug.Assert(_moduleReferences != null); 984156"];
7451 [label="AssertReferencesInitialized(); 984157"];
7452 [label="return _moduleReferences.Symbols; 984158"];
7453 [label="assemblySymbol.SourceModule 984159"];
7454 [label="get { return (SourceModuleSymbol)this.Modules[0]; } 984160"];
7455 [label="this.Modules 984161"];
7456 [label="get\n            {\n                return _modules;\n            } 984162"];
7457 [label="return _modules; 984163"];
7458 [label="return (SourceModuleSymbol)this.Modules[0]; 984164"];
7459 [label="assemblySymbol.SourceModule.GetUnifiedAssemblies() 984165"];
7460 [label="param GetUnifiedAssemblies(this) 984166"];
7461 [label="AssertReferencesInitialized() 984167"];
7462 [label="param AssertReferencesInitialized(this) 984168"];
7463 [label="Debug.Assert(_moduleReferences != null); 984169"];
7464 [label="Debug.Assert(_moduleReferences != null); 984170"];
7465 [label="AssertReferencesInitialized(); 984171"];
7466 [label="return _moduleReferences.UnifiedAssemblies; 984172"];
7467 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 984173"];
7468 [label="Debug.Assert(ReferenceEquals(compilation._referenceManager, this) || HasCircularReference); 984174"];
7469 [label="Debug.Assert(ReferenceEquals(compilation._referenceManager, this) || HasCircularReference); 984175"];
7470 [label="compilation._referenceManager 984176"];
7471 [label="compilation._lazyAssemblySymbol 984177"];
7472 [label="return true; 984178"];
7473 [label="resolutionDiagnostics.Free(); 984179"];
7474 [label="assemblyReferencesBySimpleName.Free(); 984180"];
7475 [label="if (!IsBound && CreateAndSetSourceAssemblyFullBind(compilation))\n                {\n                    // we have successfully bound the references for the compilation\n                }\n                else if (!HasCircularReference)\n                {\n                    // Another compilation that shares the manager with the given compilation\n                    // already bound its references and produced tables that we can use to construct \n                    // source assembly symbol faster. Unless we encountered a circular reference.\n                    CreateAndSetSourceAssemblyReuseData(compilation);\n                }\n                else\n                {\n                    // We encountered a circular reference while binding the previous compilation.\n                    // This compilation can't share bound references with other compilations. Create a new manager.\n\n                    // NOTE: The CreateSourceAssemblyFullBind is going to replace compilation's reference manager with newManager.\n\n                    var newManager = new ReferenceManager(this.SimpleAssemblyName, this.IdentityComparer, this.ObservedMetadata);\n                    var successful = newManager.CreateAndSetSourceAssemblyFullBind(compilation);\n\n                    // The new manager isn't shared with any other compilation so there is no other \n                    // thread but the current one could have initialized it.\n                    Debug.Assert(successful);\n\n                    newManager.AssertBound();\n                } 984181"];
7476 [label="if (!IsBound && CreateAndSetSourceAssemblyFullBind(compilation))\n                {\n                    // we have successfully bound the references for the compilation\n                }\n                else if (!HasCircularReference)\n                {\n                    // Another compilation that shares the manager with the given compilation\n                    // already bound its references and produced tables that we can use to construct \n                    // source assembly symbol faster. Unless we encountered a circular reference.\n                    CreateAndSetSourceAssemblyReuseData(compilation);\n                }\n                else\n                {\n                    // We encountered a circular reference while binding the previous compilation.\n                    // This compilation can't share bound references with other compilations. Create a new manager.\n\n                    // NOTE: The CreateSourceAssemblyFullBind is going to replace compilation's reference manager with newManager.\n\n                    var newManager = new ReferenceManager(this.SimpleAssemblyName, this.IdentityComparer, this.ObservedMetadata);\n                    var successful = newManager.CreateAndSetSourceAssemblyFullBind(compilation);\n\n                    // The new manager isn't shared with any other compilation so there is no other \n                    // thread but the current one could have initialized it.\n                    Debug.Assert(successful);\n\n                    newManager.AssertBound();\n                } 984182"];
7477 [label="AssertBound(); 984183"];
7478 [label="Debug.Assert(compilation._lazyAssemblySymbol is object); 984184"];
7479 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 984185"];
7480 [label="Debug.Assert(_lazyAssemblySymbol is object); 984186"];
7481 [label="return _referenceManager; 984187"];
7482 [label="return GetBoundReferenceManager().DirectiveReferences; 984188"];
7483 [label="return list; 984189"];
7484 [label="var toVisit = new Queue<Compilation>(FindDirectReferencedCompilations(original)); 984190"];
7485 [label="while (toVisit.Count > 0)\n            {\n                var current = toVisit.Dequeue();\n                if (list.Contains(current))\n                {\n                    continue;\n                }\n\n                list.Add(current);\n\n                foreach (var other in FindDirectReferencedCompilations(current))\n                {\n                    toVisit.Enqueue(other);\n                }\n            } 984191"];
7486 [label="while (toVisit.Count > 0)\n            {\n                var current = toVisit.Dequeue();\n                if (list.Contains(current))\n                {\n                    continue;\n                }\n\n                list.Add(current);\n\n                foreach (var other in FindDirectReferencedCompilations(current))\n                {\n                    toVisit.Enqueue(other);\n                }\n            } 984192"];
7487 [label="return list; 984193"];
7488 [label="var referencedCompilations = FindReferencedCompilations(compilation); 984194"];
7489 [label="var fullNameSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase); 984195"];
7490 [label="foreach (var referencedCompilation in referencedCompilations)\n            {\n                var emitData = EmitCompilationCore(referencedCompilation, null, diagnostics, null, emitOptions);\n                if (emitData.HasValue)\n                {\n                    var moduleData = new ModuleData(referencedCompilation.Assembly.Identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    emitData.Value.Assembly,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    fullNameSet.Add(moduleData.Id.FullName);\n                    dependencies.Add(moduleData);\n                }\n            } 984196"];
7491 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 984197"];
7492 [label="new[] { compilation } 984198"];
7493 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 984199"];
7494 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 984200"];
7495 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 984201"];
7496 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 984202"];
7497 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 984203"];
7498 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 984204"];
7499 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics) 984205"];
7500 [label="param EmitReferences(Compilation compilation) 984206"];
7501 [label="param EmitReferences(HashSet<string> fullNameSet) 984207"];
7502 [label="param EmitReferences(List<ModuleData> dependencies) 984208"];
7503 [label="param EmitReferences(DiagnosticBag diagnostics) 984209"];
7504 [label="foreach (var metadataReference in compilation.References)\n            {\n                if (metadataReference is CompilationReference)\n                {\n                    continue;\n                }\n\n                var peRef = (PortableExecutableReference)metadataReference;\n                var metadata = peRef.GetMetadataNoCopy();\n                var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly;\n                var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null;\n\n                // If this is an indirect reference to a Compilation then it is already been emitted \n                // so no more work to be done.\n                if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                }\n\n                foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                }\n            } 984210"];
7505 [label="if (metadataReference is CompilationReference)\n                {\n                    continue;\n                } 984211"];
7506 [label="var peRef = (PortableExecutableReference)metadataReference; 984212"];
7507 [label="var metadata = peRef.GetMetadataNoCopy(); 984213"];
7508 [label="var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly; 984214"];
7509 [label="isManifestModule 984215"];
7510 [label="var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null; 984216"];
7511 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 984217"];
7512 [label="foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                } 984218"];
7513 [label="EnumerateModules(metadata) 984219"];
7514 [label="param EnumerateModules(Metadata metadata) 984220"];
7515 [label="return (metadata.Kind == MetadataImageKind.Assembly) ? ((AssemblyMetadata)metadata).GetModules().AsEnumerable() : SpecializedCollections.SingletonEnumerable((ModuleMetadata)metadata); 984221"];
7516 [label="(metadata.Kind == MetadataImageKind.Assembly) 984222"];
7517 [label="ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent(); 984223"];
7518 [label="ModuleData moduleData; 984224"];
7519 [label="if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    } 984225"];
7520 [label="moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 984226"];
7521 [label="moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 984227"];
7522 [label="moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 984228"];
7523 [label="dependencies.Add(moduleData); 984229"];
7524 [label="dependencies.Add(moduleData); 984230"];
7525 [label="isManifestModule = false; 984231"];
7526 [label="foreach (var metadataReference in compilation.References)\n            {\n                if (metadataReference is CompilationReference)\n                {\n                    continue;\n                }\n\n                var peRef = (PortableExecutableReference)metadataReference;\n                var metadata = peRef.GetMetadataNoCopy();\n                var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly;\n                var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null;\n\n                // If this is an indirect reference to a Compilation then it is already been emitted \n                // so no more work to be done.\n                if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                }\n\n                foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                }\n            } 984232"];
7527 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 984233"];
7528 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 984234"];
7529 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 984235"];
7530 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 984236"];
7531 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 984237"];
7532 [label="EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions) 984238"];
7533 [label="param EmitCompilationCore(Compilation compilation) 984239"];
7534 [label="param EmitCompilationCore(IEnumerable<ResourceDescription> manifestResources) 984240"];
7535 [label="param EmitCompilationCore(DiagnosticBag diagnostics) 984241"];
7536 [label="param EmitCompilationCore(CompilationTestData testData) 984242"];
7537 [label="param EmitCompilationCore(EmitOptions emitOptions) 984243"];
7538 [label="if (emitOptions == null)\n                emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 984244"];
7539 [label="if (emitOptions == null)\n                emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 984245"];
7540 [label="emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 984246"];
7541 [label="using var executableStream = new MemoryStream(); 984247"];
7542 [label="var pdb = default(ImmutableArray<byte>); 984248"];
7543 [label="var assembly = default(ImmutableArray<byte>); 984249"];
7544 [label="var pdbStream = (emitOptions.DebugInformationFormat != DebugInformationFormat.Embedded) ? new MemoryStream() : null; 984250"];
7545 [label="(emitOptions.DebugInformationFormat != DebugInformationFormat.Embedded) 984251"];
7546 [label="var embeddedTexts = compilation.SyntaxTrees\n                .Select(t => (filePath: t.FilePath, text: t.GetText()))\n                .Where(t => t.text.CanBeEmbedded && !string.IsNullOrEmpty(t.filePath))\n                .Select(t => EmbeddedText.FromSource(t.filePath, t.text))\n                .ToImmutableArray(); 984252"];
7547 [label="compilation.SyntaxTrees 984253"];
7548 [label="get\n            {\n                return this.SyntaxTrees;\n            } 984254"];
7549 [label="this.SyntaxTrees 984255"];
7550 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 984256"];
7551 [label="_syntaxAndDeclarations.GetLazyState() 984257"];
7552 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 984258"];
7553 [label="return this.SyntaxTrees; 984259"];
7554 [label="var embeddedTexts = compilation.SyntaxTrees\n                .Select(t => (filePath: t.FilePath, text: t.GetText()))\n                .Where(t => t.text.CanBeEmbedded && !string.IsNullOrEmpty(t.filePath))\n                .Select(t => EmbeddedText.FromSource(t.filePath, t.text))\n                .ToImmutableArray(); 984260"];
7555 [label="get { return _path; } 984261"];
7556 [label="return _path; 984262"];
7557 [label="param GetText(CancellationToken cancellationToken) 984263"];
7558 [label="if (_lazyText == null)\n                {\n                    Interlocked.CompareExchange(ref _lazyText, this.GetRoot(cancellationToken).GetText(_encodingOpt, _checksumAlgorithm), null);\n                } 984264"];
7559 [label="if (_lazyText == null)\n                {\n                    Interlocked.CompareExchange(ref _lazyText, this.GetRoot(cancellationToken).GetText(_encodingOpt, _checksumAlgorithm), null);\n                } 984265"];
7560 [label="EmitResult result; 984266"];
7561 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 984267"];
7562 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 984268"];
7563 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 984269"];
7564 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 984270"];
7565 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 984271"];
7566 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 984272"];
7567 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 984273"];
7568 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 984274"];
7569 [label="get { return _syntaxAndDeclarations.MessageProvider; } 984275"];
7570 [label="return _syntaxAndDeclarations.MessageProvider; 984276"];
7571 [label="param CreateModuleBuilder(EmitOptions emitOptions) 984277"];
7572 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 984278"];
7573 [label="param CreateModuleBuilder(Stream? sourceLinkStream) 984279"];
7574 [label="param CreateModuleBuilder(IEnumerable<EmbeddedText>? embeddedTexts) 984280"];
7575 [label="param CreateModuleBuilder(IEnumerable<ResourceDescription>? manifestResources) 984281"];
7576 [label="param CreateModuleBuilder(CompilationTestData? testData) 984282"];
7577 [label="param CreateModuleBuilder(DiagnosticBag diagnostics) 984283"];
7578 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 984284"];
7579 [label="param CreateModuleBuilder(this) 984285"];
7580 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 984286"];
7581 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 984287"];
7582 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 984288"];
7583 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 984289"];
7584 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 984290"];
7585 [label="param GetRuntimeMetadataVersion(DiagnosticBag diagnostics) 984291"];
7586 [label="param GetRuntimeMetadataVersion(this) 984292"];
7587 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 984293"];
7588 [label="GetRuntimeMetadataVersion(emitOptions) 984294"];
7589 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 984295"];
7590 [label="param GetRuntimeMetadataVersion(this) 984296"];
7591 [label="Assembly 984297"];
7592 [label="get\n            {\n                return SourceAssembly;\n            } 984298"];
7593 [label="SourceAssembly 984299"];
7594 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 984300"];
7595 [label="GetBoundReferenceManager() 984301"];
7596 [label="param GetBoundReferenceManager(this) 984302"];
7597 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 984303"];
7598 [label="return _referenceManager; 984304"];
7599 [label="GetBoundReferenceManager(); 984305"];
7600 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 984306"];
7601 [label="return _lazyAssemblySymbol; 984307"];
7602 [label="return SourceAssembly; 984308"];
7603 [label="var corAssembly = Assembly.CorLibrary as Symbols.Metadata.PE.PEAssemblySymbol; 984309"];
7604 [label="Assembly.CorLibrary 984310"];
7605 [label="get\n            {\n                return _corLibrary;\n            } 984311"];
7606 [label="return _corLibrary; 984312"];
7607 [label="if (corAssembly is object)\n            {\n                return corAssembly.Assembly.ManifestModule.MetadataVersion;\n            } 984313"];
7608 [label="return emitOptions.RuntimeMetadataVersion; 984314"];
7609 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 984315"];
7610 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 984316"];
7611 [label="DiagnosticBag? runtimeMDVersionDiagnostics = DiagnosticBag.GetInstance(); 984317"];
7612 [label="runtimeMDVersionDiagnostics.Add(ErrorCode.WRN_NoRuntimeMetadataVersion, NoLocation.Singleton); 984318"];
7613 [label="runtimeMDVersionDiagnostics.Add(ErrorCode.WRN_NoRuntimeMetadataVersion, NoLocation.Singleton); 984319"];
7614 [label="runtimeMDVersionDiagnostics.Add(ErrorCode.WRN_NoRuntimeMetadataVersion, NoLocation.Singleton) 984320"];
7615 [label="param Add(this DiagnosticBag diagnostics) 984321"];
7616 [label="param Add(ErrorCode code) 984322"];
7617 [label="param Add(Location location) 984323"];
7618 [label="0 984324"];
7619 [label="new CSDiagnosticInfo(0) 984325"];
7620 [label="param CSDiagnosticInfo(ErrorCode code) 984326"];
7621 [label="param CSDiagnosticInfo(this) 984327"];
7622 [label="code 984328"];
7623 [label="Array.Empty<object>() 984329"];
7624 [label="ImmutableArray<Symbol>.Empty 984330"];
7625 [label="ImmutableArray<Location>.Empty 984331"];
7626 [label="param CSDiagnosticInfo(ErrorCode code) 984332"];
7627 [label="param CSDiagnosticInfo(object[] args) 984333"];
7628 [label="param CSDiagnosticInfo(ImmutableArray<Symbol> symbols) 984334"];
7629 [label="param CSDiagnosticInfo(ImmutableArray<Location> additionalLocations) 984335"];
7630 [label="param CSDiagnosticInfo(this) 984336"];
7631 [label="code 984337"];
7632 [label="args 984338"];
7633 [label="symbols 984339"];
7634 [label="param DiagnosticInfoWithSymbols(ErrorCode errorCode) 984340"];
7635 [label="param DiagnosticInfoWithSymbols(object[] arguments) 984341"];
7636 [label="param DiagnosticInfoWithSymbols(ImmutableArray<Symbol> symbols) 984342"];
7637 [label="param DiagnosticInfoWithSymbols(this) 984343"];
7638 [label="CSharp.MessageProvider.Instance 984344"];
7639 [label="errorCode 984345"];
7640 [label="arguments 984346"];
7641 [label="param DiagnosticInfoWithSymbols(this) 984347"];
7642 [label="param GetSeverity(int code) 984348"];
7643 [label="param GetSeverity(this) 984349"];
7644 [label="'_Title' 984350"];
7645 [label="s_titleSuffix = '_Title' 984351"];
7646 [label="'_Description' 984352"];
7647 [label="s_descriptionSuffix = '_Description' 984353"];
7648 [label="CreateCategoriesMap 984354"];
7649 [label="new Lazy<ImmutableDictionary<ErrorCode, string>>(CreateCategoriesMap) 984355"];
7650 [label="s_categoriesMap = new Lazy<ImmutableDictionary<ErrorCode, string>>(CreateCategoriesMap) 984356"];
7651 [label="NullableWarnings 984357"];
7652 [label="s_resourceManager 984358"];
7653 [label="ImmutableHashSet<string>.Builder nullableWarnings = ImmutableHashSet.CreateBuilder<string>(); 984359"];
7654 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullReferenceAssignment)); 984360"];
7655 [label="GetId(ErrorCode.WRN_NullReferenceAssignment) 984361"];
7656 [label="param GetId(ErrorCode errorCode) 984362"];
7657 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984363"];
7658 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984364"];
7659 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984365"];
7660 [label="get\n            {\n                return 'CS';\n            } 984366"];
7661 [label="return 'CS'; 984367"];
7662 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984368"];
7663 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullReferenceAssignment)); 984369"];
7664 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullReferenceReceiver)); 984370"];
7665 [label="GetId(ErrorCode.WRN_NullReferenceReceiver) 984371"];
7666 [label="param GetId(ErrorCode errorCode) 984372"];
7667 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984373"];
7668 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984374"];
7669 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984375"];
7670 [label="get\n            {\n                return 'CS';\n            } 984376"];
7671 [label="return 'CS'; 984377"];
7672 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullReferenceReceiver)); 984378"];
7673 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullReferenceReturn)); 984379"];
7674 [label="GetId(ErrorCode.WRN_NullReferenceReturn) 984380"];
7675 [label="param GetId(ErrorCode errorCode) 984381"];
7676 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984382"];
7677 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984383"];
7678 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984384"];
7679 [label="get\n            {\n                return 'CS';\n            } 984385"];
7680 [label="return 'CS'; 984386"];
7681 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullReferenceReturn)); 984387"];
7682 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullReferenceArgument)); 984388"];
7683 [label="GetId(ErrorCode.WRN_NullReferenceArgument) 984389"];
7684 [label="param GetId(ErrorCode errorCode) 984390"];
7685 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984391"];
7686 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984392"];
7687 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984393"];
7688 [label="get\n            {\n                return 'CS';\n            } 984394"];
7689 [label="return 'CS'; 984395"];
7690 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullReferenceArgument)); 984396"];
7691 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_UninitializedNonNullableField)); 984397"];
7692 [label="GetId(ErrorCode.WRN_UninitializedNonNullableField) 984398"];
7693 [label="param GetId(ErrorCode errorCode) 984399"];
7694 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984400"];
7695 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984401"];
7696 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984402"];
7697 [label="get\n            {\n                return 'CS';\n            } 984403"];
7698 [label="return 'CS'; 984404"];
7699 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_UninitializedNonNullableField)); 984405"];
7700 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInAssignment)); 984406"];
7701 [label="GetId(ErrorCode.WRN_NullabilityMismatchInAssignment) 984407"];
7702 [label="param GetId(ErrorCode errorCode) 984408"];
7703 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984409"];
7704 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984410"];
7705 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984411"];
7706 [label="get\n            {\n                return 'CS';\n            } 984412"];
7707 [label="return 'CS'; 984413"];
7708 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInAssignment)); 984414"];
7709 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInArgument)); 984415"];
7710 [label="GetId(ErrorCode.WRN_NullabilityMismatchInArgument) 984416"];
7711 [label="param GetId(ErrorCode errorCode) 984417"];
7712 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984418"];
7713 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984419"];
7714 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984420"];
7715 [label="get\n            {\n                return 'CS';\n            } 984421"];
7716 [label="return 'CS'; 984422"];
7717 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInArgument)); 984423"];
7718 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInArgumentForOutput)); 984424"];
7719 [label="GetId(ErrorCode.WRN_NullabilityMismatchInArgumentForOutput) 984425"];
7720 [label="param GetId(ErrorCode errorCode) 984426"];
7721 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984427"];
7722 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984428"];
7723 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984429"];
7724 [label="get\n            {\n                return 'CS';\n            } 984430"];
7725 [label="return 'CS'; 984431"];
7726 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInArgumentForOutput)); 984432"];
7727 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOfTargetDelegate)); 984433"];
7728 [label="GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOfTargetDelegate) 984434"];
7729 [label="param GetId(ErrorCode errorCode) 984435"];
7730 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984436"];
7731 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984437"];
7732 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984438"];
7733 [label="get\n            {\n                return 'CS';\n            } 984439"];
7734 [label="return 'CS'; 984440"];
7735 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOfTargetDelegate)); 984441"];
7736 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOfTargetDelegate)); 984442"];
7737 [label="GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOfTargetDelegate) 984443"];
7738 [label="param GetId(ErrorCode errorCode) 984444"];
7739 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984445"];
7740 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984446"];
7741 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984447"];
7742 [label="get\n            {\n                return 'CS';\n            } 984448"];
7743 [label="return 'CS'; 984449"];
7744 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOfTargetDelegate)); 984450"];
7745 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullAsNonNullable)); 984451"];
7746 [label="GetId(ErrorCode.WRN_NullAsNonNullable) 984452"];
7747 [label="param GetId(ErrorCode errorCode) 984453"];
7748 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984454"];
7749 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984455"];
7750 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984456"];
7751 [label="get\n            {\n                return 'CS';\n            } 984457"];
7752 [label="return 'CS'; 984458"];
7753 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullAsNonNullable)); 984459"];
7754 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullableValueTypeMayBeNull)); 984460"];
7755 [label="GetId(ErrorCode.WRN_NullableValueTypeMayBeNull) 984461"];
7756 [label="param GetId(ErrorCode errorCode) 984462"];
7757 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984463"];
7758 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984464"];
7759 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984465"];
7760 [label="get\n            {\n                return 'CS';\n            } 984466"];
7761 [label="return 'CS'; 984467"];
7762 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullableValueTypeMayBeNull)); 984468"];
7763 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeParameterConstraint)); 984469"];
7764 [label="GetId(ErrorCode.WRN_NullabilityMismatchInTypeParameterConstraint) 984470"];
7765 [label="param GetId(ErrorCode errorCode) 984471"];
7766 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984472"];
7767 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984473"];
7768 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984474"];
7769 [label="get\n            {\n                return 'CS';\n            } 984475"];
7770 [label="return 'CS'; 984476"];
7771 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeParameterConstraint)); 984477"];
7772 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeParameterReferenceTypeConstraint)); 984478"];
7773 [label="GetId(ErrorCode.WRN_NullabilityMismatchInTypeParameterReferenceTypeConstraint) 984479"];
7774 [label="param GetId(ErrorCode errorCode) 984480"];
7775 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984481"];
7776 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984482"];
7777 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984483"];
7778 [label="get\n            {\n                return 'CS';\n            } 984484"];
7779 [label="return 'CS'; 984485"];
7780 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeParameterReferenceTypeConstraint)); 984486"];
7781 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeParameterNotNullConstraint)); 984487"];
7782 [label="GetId(ErrorCode.WRN_NullabilityMismatchInTypeParameterNotNullConstraint) 984488"];
7783 [label="param GetId(ErrorCode errorCode) 984489"];
7784 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984490"];
7785 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984491"];
7786 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984492"];
7787 [label="get\n            {\n                return 'CS';\n            } 984493"];
7788 [label="return 'CS'; 984494"];
7789 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeParameterNotNullConstraint)); 984495"];
7790 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ThrowPossibleNull)); 984496"];
7791 [label="GetId(ErrorCode.WRN_ThrowPossibleNull) 984497"];
7792 [label="param GetId(ErrorCode errorCode) 984498"];
7793 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984499"];
7794 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984500"];
7795 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984501"];
7796 [label="get\n            {\n                return 'CS';\n            } 984502"];
7797 [label="return 'CS'; 984503"];
7798 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ThrowPossibleNull)); 984504"];
7799 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_UnboxPossibleNull)); 984505"];
7800 [label="GetId(ErrorCode.WRN_UnboxPossibleNull) 984506"];
7801 [label="param GetId(ErrorCode errorCode) 984507"];
7802 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984508"];
7803 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984509"];
7804 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984510"];
7805 [label="get\n            {\n                return 'CS';\n            } 984511"];
7806 [label="return 'CS'; 984512"];
7807 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_UnboxPossibleNull)); 984513"];
7808 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_SwitchExpressionNotExhaustiveForNull)); 984514"];
7809 [label="GetId(ErrorCode.WRN_SwitchExpressionNotExhaustiveForNull) 984515"];
7810 [label="param GetId(ErrorCode errorCode) 984516"];
7811 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984517"];
7812 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984518"];
7813 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984519"];
7814 [label="get\n            {\n                return 'CS';\n            } 984520"];
7815 [label="return 'CS'; 984521"];
7816 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_SwitchExpressionNotExhaustiveForNull)); 984522"];
7817 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_SwitchExpressionNotExhaustiveForNullWithWhen)); 984523"];
7818 [label="GetId(ErrorCode.WRN_SwitchExpressionNotExhaustiveForNullWithWhen) 984524"];
7819 [label="param GetId(ErrorCode errorCode) 984525"];
7820 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984526"];
7821 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984527"];
7822 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984528"];
7823 [label="get\n            {\n                return 'CS';\n            } 984529"];
7824 [label="return 'CS'; 984530"];
7825 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_SwitchExpressionNotExhaustiveForNullWithWhen)); 984531"];
7826 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ConvertingNullableToNonNullable)); 984532"];
7827 [label="GetId(ErrorCode.WRN_ConvertingNullableToNonNullable) 984533"];
7828 [label="param GetId(ErrorCode errorCode) 984534"];
7829 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984535"];
7830 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984536"];
7831 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984537"];
7832 [label="get\n            {\n                return 'CS';\n            } 984538"];
7833 [label="return 'CS'; 984539"];
7834 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ConvertingNullableToNonNullable)); 984540"];
7835 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_DisallowNullAttributeForbidsMaybeNullAssignment)); 984541"];
7836 [label="GetId(ErrorCode.WRN_DisallowNullAttributeForbidsMaybeNullAssignment) 984542"];
7837 [label="param GetId(ErrorCode errorCode) 984543"];
7838 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984544"];
7839 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984545"];
7840 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984546"];
7841 [label="get\n            {\n                return 'CS';\n            } 984547"];
7842 [label="return 'CS'; 984548"];
7843 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_DisallowNullAttributeForbidsMaybeNullAssignment)); 984549"];
7844 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ParameterConditionallyDisallowsNull)); 984550"];
7845 [label="GetId(ErrorCode.WRN_ParameterConditionallyDisallowsNull) 984551"];
7846 [label="param GetId(ErrorCode errorCode) 984552"];
7847 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984553"];
7848 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984554"];
7849 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984555"];
7850 [label="get\n            {\n                return 'CS';\n            } 984556"];
7851 [label="return 'CS'; 984557"];
7852 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ParameterConditionallyDisallowsNull)); 984558"];
7853 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ShouldNotReturn)); 984559"];
7854 [label="GetId(ErrorCode.WRN_ShouldNotReturn) 984560"];
7855 [label="param GetId(ErrorCode errorCode) 984561"];
7856 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984562"];
7857 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984563"];
7858 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984564"];
7859 [label="get\n            {\n                return 'CS';\n            } 984565"];
7860 [label="return 'CS'; 984566"];
7861 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ShouldNotReturn)); 984567"];
7862 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeOnOverride)); 984568"];
7863 [label="GetId(ErrorCode.WRN_NullabilityMismatchInTypeOnOverride) 984569"];
7864 [label="param GetId(ErrorCode errorCode) 984570"];
7865 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984571"];
7866 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984572"];
7867 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984573"];
7868 [label="get\n            {\n                return 'CS';\n            } 984574"];
7869 [label="return 'CS'; 984575"];
7870 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeOnOverride)); 984576"];
7871 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnOverride)); 984577"];
7872 [label="GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnOverride) 984578"];
7873 [label="param GetId(ErrorCode errorCode) 984579"];
7874 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984580"];
7875 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984581"];
7876 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984582"];
7877 [label="get\n            {\n                return 'CS';\n            } 984583"];
7878 [label="return 'CS'; 984584"];
7879 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnOverride)); 984585"];
7880 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnPartial)); 984586"];
7881 [label="GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnPartial) 984587"];
7882 [label="param GetId(ErrorCode errorCode) 984588"];
7883 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984589"];
7884 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984590"];
7885 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984591"];
7886 [label="get\n            {\n                return 'CS';\n            } 984592"];
7887 [label="return 'CS'; 984593"];
7888 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnPartial)); 984594"];
7889 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnOverride)); 984595"];
7890 [label="GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnOverride) 984596"];
7891 [label="param GetId(ErrorCode errorCode) 984597"];
7892 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984598"];
7893 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984599"];
7894 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984600"];
7895 [label="get\n            {\n                return 'CS';\n            } 984601"];
7896 [label="return 'CS'; 984602"];
7897 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnOverride)); 984603"];
7898 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnPartial)); 984604"];
7899 [label="GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnPartial) 984605"];
7900 [label="param GetId(ErrorCode errorCode) 984606"];
7901 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984607"];
7902 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984608"];
7903 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984609"];
7904 [label="get\n            {\n                return 'CS';\n            } 984610"];
7905 [label="return 'CS'; 984611"];
7906 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnPartial)); 984612"];
7907 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeOnImplicitImplementation)); 984613"];
7908 [label="GetId(ErrorCode.WRN_NullabilityMismatchInTypeOnImplicitImplementation) 984614"];
7909 [label="param GetId(ErrorCode errorCode) 984615"];
7910 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984616"];
7911 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984617"];
7912 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984618"];
7913 [label="get\n            {\n                return 'CS';\n            } 984619"];
7914 [label="return 'CS'; 984620"];
7915 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeOnImplicitImplementation)); 984621"];
7916 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnImplicitImplementation)); 984622"];
7917 [label="GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnImplicitImplementation) 984623"];
7918 [label="param GetId(ErrorCode errorCode) 984624"];
7919 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984625"];
7920 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984626"];
7921 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984627"];
7922 [label="get\n            {\n                return 'CS';\n            } 984628"];
7923 [label="return 'CS'; 984629"];
7924 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnImplicitImplementation)); 984630"];
7925 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnImplicitImplementation)); 984631"];
7926 [label="GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnImplicitImplementation) 984632"];
7927 [label="param GetId(ErrorCode errorCode) 984633"];
7928 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984634"];
7929 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984635"];
7930 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984636"];
7931 [label="get\n            {\n                return 'CS';\n            } 984637"];
7932 [label="return 'CS'; 984638"];
7933 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnImplicitImplementation)); 984639"];
7934 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeOnExplicitImplementation)); 984640"];
7935 [label="GetId(ErrorCode.WRN_NullabilityMismatchInTypeOnExplicitImplementation) 984641"];
7936 [label="param GetId(ErrorCode errorCode) 984642"];
7937 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984643"];
7938 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984644"];
7939 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984645"];
7940 [label="get\n            {\n                return 'CS';\n            } 984646"];
7941 [label="return 'CS'; 984647"];
7942 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInTypeOnExplicitImplementation)); 984648"];
7943 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnExplicitImplementation)); 984649"];
7944 [label="GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnExplicitImplementation) 984650"];
7945 [label="param GetId(ErrorCode errorCode) 984651"];
7946 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984652"];
7947 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984653"];
7948 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984654"];
7949 [label="get\n            {\n                return 'CS';\n            } 984655"];
7950 [label="return 'CS'; 984656"];
7951 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInReturnTypeOnExplicitImplementation)); 984657"];
7952 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnExplicitImplementation)); 984658"];
7953 [label="GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnExplicitImplementation) 984659"];
7954 [label="param GetId(ErrorCode errorCode) 984660"];
7955 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984661"];
7956 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984662"];
7957 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984663"];
7958 [label="get\n            {\n                return 'CS';\n            } 984664"];
7959 [label="return 'CS'; 984665"];
7960 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInParameterTypeOnExplicitImplementation)); 984666"];
7961 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInConstraintsOnImplicitImplementation)); 984667"];
7962 [label="GetId(ErrorCode.WRN_NullabilityMismatchInConstraintsOnImplicitImplementation) 984668"];
7963 [label="param GetId(ErrorCode errorCode) 984669"];
7964 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984670"];
7965 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984671"];
7966 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984672"];
7967 [label="get\n            {\n                return 'CS';\n            } 984673"];
7968 [label="return 'CS'; 984674"];
7969 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInConstraintsOnImplicitImplementation)); 984675"];
7970 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInExplicitlyImplementedInterface)); 984676"];
7971 [label="GetId(ErrorCode.WRN_NullabilityMismatchInExplicitlyImplementedInterface) 984677"];
7972 [label="param GetId(ErrorCode errorCode) 984678"];
7973 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984679"];
7974 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984680"];
7975 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984681"];
7976 [label="get\n            {\n                return 'CS';\n            } 984682"];
7977 [label="return 'CS'; 984683"];
7978 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInExplicitlyImplementedInterface)); 984684"];
7979 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInInterfaceImplementedByBase)); 984685"];
7980 [label="GetId(ErrorCode.WRN_NullabilityMismatchInInterfaceImplementedByBase) 984686"];
7981 [label="param GetId(ErrorCode errorCode) 984687"];
7982 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984688"];
7983 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984689"];
7984 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984690"];
7985 [label="get\n            {\n                return 'CS';\n            } 984691"];
7986 [label="return 'CS'; 984692"];
7987 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInInterfaceImplementedByBase)); 984693"];
7988 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_DuplicateInterfaceWithNullabilityMismatchInBaseList)); 984694"];
7989 [label="GetId(ErrorCode.WRN_DuplicateInterfaceWithNullabilityMismatchInBaseList) 984695"];
7990 [label="param GetId(ErrorCode errorCode) 984696"];
7991 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984697"];
7992 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984698"];
7993 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984699"];
7994 [label="get\n            {\n                return 'CS';\n            } 984700"];
7995 [label="return 'CS'; 984701"];
7996 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_DuplicateInterfaceWithNullabilityMismatchInBaseList)); 984702"];
7997 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInConstraintsOnPartialImplementation)); 984703"];
7998 [label="GetId(ErrorCode.WRN_NullabilityMismatchInConstraintsOnPartialImplementation) 984704"];
7999 [label="param GetId(ErrorCode errorCode) 984705"];
8000 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984706"];
8001 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984707"];
8002 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984708"];
8003 [label="get\n            {\n                return 'CS';\n            } 984709"];
8004 [label="return 'CS'; 984710"];
8005 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullabilityMismatchInConstraintsOnPartialImplementation)); 984711"];
8006 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullReferenceInitializer)); 984712"];
8007 [label="GetId(ErrorCode.WRN_NullReferenceInitializer) 984713"];
8008 [label="param GetId(ErrorCode errorCode) 984714"];
8009 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984715"];
8010 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984716"];
8011 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984717"];
8012 [label="get\n            {\n                return 'CS';\n            } 984718"];
8013 [label="return 'CS'; 984719"];
8014 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_NullReferenceInitializer)); 984720"];
8015 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ShouldNotReturn)); 984721"];
8016 [label="GetId(ErrorCode.WRN_ShouldNotReturn) 984722"];
8017 [label="param GetId(ErrorCode errorCode) 984723"];
8018 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984724"];
8019 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984725"];
8020 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984726"];
8021 [label="get\n            {\n                return 'CS';\n            } 984727"];
8022 [label="return 'CS'; 984728"];
8023 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ShouldNotReturn)); 984729"];
8024 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_DoesNotReturnMismatch)); 984730"];
8025 [label="GetId(ErrorCode.WRN_DoesNotReturnMismatch) 984731"];
8026 [label="param GetId(ErrorCode errorCode) 984732"];
8027 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984733"];
8028 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984734"];
8029 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984735"];
8030 [label="get\n            {\n                return 'CS';\n            } 984736"];
8031 [label="return 'CS'; 984737"];
8032 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_DoesNotReturnMismatch)); 984738"];
8033 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnExplicitImplementation)); 984739"];
8034 [label="GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnExplicitImplementation) 984740"];
8035 [label="param GetId(ErrorCode errorCode) 984741"];
8036 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984742"];
8037 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984743"];
8038 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984744"];
8039 [label="get\n            {\n                return 'CS';\n            } 984745"];
8040 [label="return 'CS'; 984746"];
8041 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnExplicitImplementation)); 984747"];
8042 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnImplicitImplementation)); 984748"];
8043 [label="GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnImplicitImplementation) 984749"];
8044 [label="param GetId(ErrorCode errorCode) 984750"];
8045 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984751"];
8046 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984752"];
8047 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984753"];
8048 [label="get\n            {\n                return 'CS';\n            } 984754"];
8049 [label="return 'CS'; 984755"];
8050 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnImplicitImplementation)); 984756"];
8051 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride)); 984757"];
8052 [label="GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride) 984758"];
8053 [label="param GetId(ErrorCode errorCode) 984759"];
8054 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984760"];
8055 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984761"];
8056 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984762"];
8057 [label="get\n            {\n                return 'CS';\n            } 984763"];
8058 [label="return 'CS'; 984764"];
8059 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride)); 984765"];
8060 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnExplicitImplementation)); 984766"];
8061 [label="GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnExplicitImplementation) 984767"];
8062 [label="param GetId(ErrorCode errorCode) 984768"];
8063 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984769"];
8064 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984770"];
8065 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984771"];
8066 [label="get\n            {\n                return 'CS';\n            } 984772"];
8067 [label="return 'CS'; 984773"];
8068 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnExplicitImplementation)); 984774"];
8069 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnImplicitImplementation)); 984775"];
8070 [label="GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnImplicitImplementation) 984776"];
8071 [label="param GetId(ErrorCode errorCode) 984777"];
8072 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984778"];
8073 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984779"];
8074 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984780"];
8075 [label="get\n            {\n                return 'CS';\n            } 984781"];
8076 [label="return 'CS'; 984782"];
8077 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnImplicitImplementation)); 984783"];
8078 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride)); 984784"];
8079 [label="GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride) 984785"];
8080 [label="param GetId(ErrorCode errorCode) 984786"];
8081 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984787"];
8082 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984788"];
8083 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984789"];
8084 [label="get\n            {\n                return 'CS';\n            } 984790"];
8085 [label="return 'CS'; 984791"];
8086 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride)); 984792"];
8087 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_MemberNotNull)); 984793"];
8088 [label="GetId(ErrorCode.WRN_MemberNotNull) 984794"];
8089 [label="param GetId(ErrorCode errorCode) 984795"];
8090 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984796"];
8091 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984797"];
8092 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984798"];
8093 [label="get\n            {\n                return 'CS';\n            } 984799"];
8094 [label="return 'CS'; 984800"];
8095 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_MemberNotNull)); 984801"];
8096 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_MemberNotNullBadMember)); 984802"];
8097 [label="GetId(ErrorCode.WRN_MemberNotNullBadMember) 984803"];
8098 [label="param GetId(ErrorCode errorCode) 984804"];
8099 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984805"];
8100 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984806"];
8101 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984807"];
8102 [label="get\n            {\n                return 'CS';\n            } 984808"];
8103 [label="return 'CS'; 984809"];
8104 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_MemberNotNullBadMember)); 984810"];
8105 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_MemberNotNullWhen)); 984811"];
8106 [label="GetId(ErrorCode.WRN_MemberNotNullWhen) 984812"];
8107 [label="param GetId(ErrorCode errorCode) 984813"];
8108 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984814"];
8109 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984815"];
8110 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984816"];
8111 [label="get\n            {\n                return 'CS';\n            } 984817"];
8112 [label="return 'CS'; 984818"];
8113 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_MemberNotNullWhen)); 984819"];
8114 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ParameterDisallowsNull)); 984820"];
8115 [label="GetId(ErrorCode.WRN_ParameterDisallowsNull) 984821"];
8116 [label="param GetId(ErrorCode errorCode) 984822"];
8117 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984823"];
8118 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984824"];
8119 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984825"];
8120 [label="get\n            {\n                return 'CS';\n            } 984826"];
8121 [label="return 'CS'; 984827"];
8122 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ParameterDisallowsNull)); 984828"];
8123 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ParameterNotNullIfNotNull)); 984829"];
8124 [label="GetId(ErrorCode.WRN_ParameterNotNullIfNotNull) 984830"];
8125 [label="param GetId(ErrorCode errorCode) 984831"];
8126 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984832"];
8127 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984833"];
8128 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984834"];
8129 [label="get\n            {\n                return 'CS';\n            } 984835"];
8130 [label="return 'CS'; 984836"];
8131 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ParameterNotNullIfNotNull)); 984837"];
8132 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ReturnNotNullIfNotNull)); 984838"];
8133 [label="GetId(ErrorCode.WRN_ReturnNotNullIfNotNull) 984839"];
8134 [label="param GetId(ErrorCode errorCode) 984840"];
8135 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984841"];
8136 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984842"];
8137 [label="return MessageProvider.Instance.GetIdForErrorCode((int)errorCode); 984843"];
8138 [label="get\n            {\n                return 'CS';\n            } 984844"];
8139 [label="return 'CS'; 984845"];
8140 [label="nullableWarnings.Add(GetId(ErrorCode.WRN_ReturnNotNullIfNotNull)); 984846"];
8141 [label="NullableWarnings = nullableWarnings.ToImmutable(); 984847"];
8142 [label="return ErrorFacts.GetSeverity((ErrorCode)code); 984848"];
8143 [label="ErrorFacts.GetSeverity((ErrorCode)code) 984849"];
8144 [label="param GetSeverity(ErrorCode code) 984850"];
8145 [label="if (code == ErrorCode.Void)\n            {\n                return InternalDiagnosticSeverity.Void;\n            }\n            else if (code == ErrorCode.Unknown)\n            {\n                return InternalDiagnosticSeverity.Unknown;\n            }\n            else if (IsWarning(code))\n            {\n                return DiagnosticSeverity.Warning;\n            }\n            else if (IsInfo(code))\n            {\n                return DiagnosticSeverity.Info;\n            }\n            else if (IsHidden(code))\n            {\n                return DiagnosticSeverity.Hidden;\n            }\n            else\n            {\n                return DiagnosticSeverity.Error;\n            } 984851"];
8146 [label="if (code == ErrorCode.Unknown)\n            {\n                return InternalDiagnosticSeverity.Unknown;\n            }\n            else if (IsWarning(code))\n            {\n                return DiagnosticSeverity.Warning;\n            }\n            else if (IsInfo(code))\n            {\n                return DiagnosticSeverity.Info;\n            }\n            else if (IsHidden(code))\n            {\n                return DiagnosticSeverity.Hidden;\n            }\n            else\n            {\n                return DiagnosticSeverity.Error;\n            } 984852"];
8147 [label="if (IsWarning(code))\n            {\n                return DiagnosticSeverity.Warning;\n            }\n            else if (IsInfo(code))\n            {\n                return DiagnosticSeverity.Info;\n            }\n            else if (IsHidden(code))\n            {\n                return DiagnosticSeverity.Hidden;\n            }\n            else\n            {\n                return DiagnosticSeverity.Error;\n            } 984853"];
8148 [label="IsWarning(code) 984854"];
8149 [label="param IsWarning(ErrorCode code) 984855"];
8150 [label="switch (code)\n            {\n                case ErrorCode.WRN_InvalidMainSig:\n                case ErrorCode.WRN_UnreferencedEvent:\n                case ErrorCode.WRN_LowercaseEllSuffix:\n                case ErrorCode.WRN_DuplicateUsing:\n                case ErrorCode.WRN_NewRequired:\n                case ErrorCode.WRN_NewNotRequired:\n                case ErrorCode.WRN_NewOrOverrideExpected:\n                case ErrorCode.WRN_UnreachableCode:\n                case ErrorCode.WRN_UnreferencedLabel:\n                case ErrorCode.WRN_UnreferencedVar:\n                case ErrorCode.WRN_UnreferencedField:\n                case ErrorCode.WRN_IsAlwaysTrue:\n                case ErrorCode.WRN_IsAlwaysFalse:\n                case ErrorCode.WRN_ByRefNonAgileField:\n                case ErrorCode.WRN_UnreferencedVarAssg:\n                case ErrorCode.WRN_NegativeArrayIndex:\n                case ErrorCode.WRN_BadRefCompareLeft:\n                case ErrorCode.WRN_BadRefCompareRight:\n                case ErrorCode.WRN_PatternIsAmbiguous:\n                case ErrorCode.WRN_PatternNotPublicOrNotInstance:\n                case ErrorCode.WRN_PatternBadSignature:\n                case ErrorCode.WRN_SequentialOnPartialClass:\n                case ErrorCode.WRN_MainCantBeGeneric:\n                case ErrorCode.WRN_UnreferencedFieldAssg:\n                case ErrorCode.WRN_AmbiguousXMLReference:\n                case ErrorCode.WRN_VolatileByRef:\n                case ErrorCode.WRN_SameFullNameThisNsAgg:\n                case ErrorCode.WRN_SameFullNameThisAggAgg:\n                case ErrorCode.WRN_SameFullNameThisAggNs:\n                case ErrorCode.WRN_GlobalAliasDefn:\n                case ErrorCode.WRN_AlwaysNull:\n                case ErrorCode.WRN_CmpAlwaysFalse:\n                case ErrorCode.WRN_FinalizeMethod:\n                case ErrorCode.WRN_GotoCaseShouldConvert:\n                case ErrorCode.WRN_NubExprIsConstBool:\n                case ErrorCode.WRN_ExplicitImplCollision:\n                case ErrorCode.WRN_DeprecatedSymbol:\n                case ErrorCode.WRN_DeprecatedSymbolStr:\n                case ErrorCode.WRN_ExternMethodNoImplementation:\n                case ErrorCode.WRN_ProtectedInSealed:\n                case ErrorCode.WRN_PossibleMistakenNullStatement:\n                case ErrorCode.WRN_UnassignedInternalField:\n                case ErrorCode.WRN_VacuousIntegralComp:\n                case ErrorCode.WRN_AttributeLocationOnBadDeclaration:\n                case ErrorCode.WRN_InvalidAttributeLocation:\n                case ErrorCode.WRN_EqualsWithoutGetHashCode:\n                case ErrorCode.WRN_EqualityOpWithoutEquals:\n                case ErrorCode.WRN_EqualityOpWithoutGetHashCode:\n                case ErrorCode.WRN_IncorrectBooleanAssg:\n                case ErrorCode.WRN_NonObsoleteOverridingObsolete:\n                case ErrorCode.WRN_BitwiseOrSignExtend:\n                case ErrorCode.WRN_CoClassWithoutComImport:\n                case ErrorCode.WRN_TypeParameterSameAsOuterTypeParameter:\n                case ErrorCode.WRN_AssignmentToLockOrDispose:\n                case ErrorCode.WRN_ObsoleteOverridingNonObsolete:\n                case ErrorCode.WRN_DebugFullNameTooLong:\n                case ErrorCode.WRN_ExternCtorNoImplementation:\n                case ErrorCode.WRN_WarningDirective:\n                case ErrorCode.WRN_UnreachableGeneralCatch:\n                case ErrorCode.WRN_DeprecatedCollectionInitAddStr:\n                case ErrorCode.WRN_DeprecatedCollectionInitAdd:\n                case ErrorCode.WRN_DefaultValueForUnconsumedLocation:\n                case ErrorCode.WRN_IdentifierOrNumericLiteralExpected:\n                case ErrorCode.WRN_EmptySwitch:\n                case ErrorCode.WRN_XMLParseError:\n                case ErrorCode.WRN_DuplicateParamTag:\n                case ErrorCode.WRN_UnmatchedParamTag:\n                case ErrorCode.WRN_MissingParamTag:\n                case ErrorCode.WRN_BadXMLRef:\n                case ErrorCode.WRN_BadXMLRefParamType:\n                case ErrorCode.WRN_BadXMLRefReturnType:\n                case ErrorCode.WRN_BadXMLRefSyntax:\n                case ErrorCode.WRN_UnprocessedXMLComment:\n                case ErrorCode.WRN_FailedInclude:\n                case ErrorCode.WRN_InvalidInclude:\n                case ErrorCode.WRN_MissingXMLComment:\n                case ErrorCode.WRN_XMLParseIncludeError:\n                case ErrorCode.WRN_ALinkWarn:\n                case ErrorCode.WRN_CmdOptionConflictsSource:\n                case ErrorCode.WRN_IllegalPragma:\n                case ErrorCode.WRN_IllegalPPWarning:\n                case ErrorCode.WRN_BadRestoreNumber:\n                case ErrorCode.WRN_NonECMAFeature:\n                case ErrorCode.WRN_ErrorOverride:\n                case ErrorCode.WRN_InvalidSearchPathDir:\n                case ErrorCode.WRN_MultiplePredefTypes:\n                case ErrorCode.WRN_TooManyLinesForDebugger:\n                case ErrorCode.WRN_CallOnNonAgileField:\n                case ErrorCode.WRN_InvalidNumber:\n                case ErrorCode.WRN_IllegalPPChecksum:\n                case ErrorCode.WRN_EndOfPPLineExpected:\n                case ErrorCode.WRN_ConflictingChecksum:\n                case ErrorCode.WRN_InvalidAssemblyName:\n                case ErrorCode.WRN_UnifyReferenceMajMin:\n                case ErrorCode.WRN_UnifyReferenceBldRev:\n                case ErrorCode.WRN_DuplicateTypeParamTag:\n                case ErrorCode.WRN_UnmatchedTypeParamTag:\n                case ErrorCode.WRN_MissingTypeParamTag:\n                case ErrorCode.WRN_AssignmentToSelf:\n                case ErrorCode.WRN_ComparisonToSelf:\n                case ErrorCode.WRN_DotOnDefault:\n                case ErrorCode.WRN_BadXMLRefTypeVar:\n                case ErrorCode.WRN_UnmatchedParamRefTag:\n                case ErrorCode.WRN_UnmatchedTypeParamRefTag:\n                case ErrorCode.WRN_ReferencedAssemblyReferencesLinkedPIA:\n                case ErrorCode.WRN_CantHaveManifestForModule:\n                case ErrorCode.WRN_MultipleRuntimeImplementationMatches:\n                case ErrorCode.WRN_MultipleRuntimeOverrideMatches:\n                case ErrorCode.WRN_DynamicDispatchToConditionalMethod:\n                case ErrorCode.WRN_IsDynamicIsConfusing:\n                case ErrorCode.WRN_AsyncLacksAwaits:\n                case ErrorCode.WRN_FileAlreadyIncluded:\n                case ErrorCode.WRN_NoSources:\n                case ErrorCode.WRN_NoConfigNotOnCommandLine:\n                case ErrorCode.WRN_DefineIdentifierRequired:\n                case ErrorCode.WRN_BadUILang:\n                case ErrorCode.WRN_CLS_NoVarArgs:\n                case ErrorCode.WRN_CLS_BadArgType:\n                case ErrorCode.WRN_CLS_BadReturnType:\n                case ErrorCode.WRN_CLS_BadFieldPropType:\n                case ErrorCode.WRN_CLS_BadIdentifierCase:\n                case ErrorCode.WRN_CLS_OverloadRefOut:\n                case ErrorCode.WRN_CLS_OverloadUnnamed:\n                case ErrorCode.WRN_CLS_BadIdentifier:\n                case ErrorCode.WRN_CLS_BadBase:\n                case ErrorCode.WRN_CLS_BadInterfaceMember:\n                case ErrorCode.WRN_CLS_NoAbstractMembers:\n                case ErrorCode.WRN_CLS_NotOnModules:\n                case ErrorCode.WRN_CLS_ModuleMissingCLS:\n                case ErrorCode.WRN_CLS_AssemblyNotCLS:\n                case ErrorCode.WRN_CLS_BadAttributeType:\n                case ErrorCode.WRN_CLS_ArrayArgumentToAttribute:\n                case ErrorCode.WRN_CLS_NotOnModules2:\n                case ErrorCode.WRN_CLS_IllegalTrueInFalse:\n                case ErrorCode.WRN_CLS_MeaninglessOnPrivateType:\n                case ErrorCode.WRN_CLS_AssemblyNotCLS2:\n                case ErrorCode.WRN_CLS_MeaninglessOnParam:\n                case ErrorCode.WRN_CLS_MeaninglessOnReturn:\n                case ErrorCode.WRN_CLS_BadTypeVar:\n                case ErrorCode.WRN_CLS_VolatileField:\n                case ErrorCode.WRN_CLS_BadInterface:\n                case ErrorCode.WRN_UnobservedAwaitableExpression:\n                case ErrorCode.WRN_CallerLineNumberParamForUnconsumedLocation:\n                case ErrorCode.WRN_CallerFilePathParamForUnconsumedLocation:\n                case ErrorCode.WRN_CallerMemberNameParamForUnconsumedLocation:\n                case ErrorCode.WRN_MainIgnored:\n                case ErrorCode.WRN_StaticInAsOrIs:\n                case ErrorCode.WRN_DelaySignButNoKey:\n                case ErrorCode.WRN_InvalidVersionFormat:\n                case ErrorCode.WRN_CallerFilePathPreferredOverCallerMemberName:\n                case ErrorCode.WRN_CallerLineNumberPreferredOverCallerMemberName:\n                case ErrorCode.WRN_CallerLineNumberPreferredOverCallerFilePath:\n                case ErrorCode.WRN_AssemblyAttributeFromModuleIsOverridden:\n                case ErrorCode.WRN_FilterIsConstantTrue:\n                case ErrorCode.WRN_UnimplementedCommandLineSwitch:\n                case ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName:\n                case ErrorCode.WRN_RefCultureMismatch:\n                case ErrorCode.WRN_ConflictingMachineAssembly:\n                case ErrorCode.WRN_UnqualifiedNestedTypeInCref:\n                case ErrorCode.WRN_NoRuntimeMetadataVersion:\n                case ErrorCode.WRN_PdbLocalNameTooLong:\n                case ErrorCode.WRN_AnalyzerCannotBeCreated:\n                case ErrorCode.WRN_NoAnalyzerInAssembly:\n                case ErrorCode.WRN_UnableToLoadAnalyzer:\n                case ErrorCode.WRN_NubExprIsConstBool2:\n                case ErrorCode.WRN_AlignmentMagnitude:\n                case ErrorCode.WRN_AttributeIgnoredWhenPublicSigning:\n                case ErrorCode.WRN_TupleLiteralNameMismatch:\n                case ErrorCode.WRN_Experimental:\n                case ErrorCode.WRN_UnreferencedLocalFunction:\n                case ErrorCode.WRN_FilterIsConstantFalse:\n                case ErrorCode.WRN_FilterIsConstantFalseRedundantTryCatch:\n                case ErrorCode.WRN_AttributesOnBackingFieldsNotAvailable:\n                case ErrorCode.WRN_TupleBinopLiteralNameMismatch:\n                case ErrorCode.WRN_TypeParameterSameAsOuterMethodTypeParameter:\n                case ErrorCode.WRN_UnconsumedEnumeratorCancellationAttributeUsage:\n                case ErrorCode.WRN_UndecoratedCancellationTokenParameter:\n                case ErrorCode.WRN_SwitchExpressionNotExhaustive:\n                case ErrorCode.WRN_CaseConstantNamedUnderscore:\n                case ErrorCode.WRN_IsTypeNamedUnderscore:\n                case ErrorCode.WRN_GivenExpressionNeverMatchesPattern:\n                case ErrorCode.WRN_GivenExpressionAlwaysMatchesConstant:\n                case ErrorCode.WRN_SwitchExpressionNotExhaustiveWithUnnamedEnumValue:\n                case ErrorCode.WRN_ThrowPossibleNull:\n                case ErrorCode.WRN_ConvertingNullableToNonNullable:\n                case ErrorCode.WRN_NullReferenceAssignment:\n                case ErrorCode.WRN_NullReferenceReceiver:\n                case ErrorCode.WRN_NullReferenceReturn:\n                case ErrorCode.WRN_NullReferenceArgument:\n                case ErrorCode.WRN_UnboxPossibleNull:\n                case ErrorCode.WRN_DisallowNullAttributeForbidsMaybeNullAssignment:\n                case ErrorCode.WRN_NullabilityMismatchInTypeOnOverride:\n                case ErrorCode.WRN_NullabilityMismatchInReturnTypeOnOverride:\n                case ErrorCode.WRN_NullabilityMismatchInParameterTypeOnOverride:\n                case ErrorCode.WRN_NullabilityMismatchInParameterTypeOnPartial:\n                case ErrorCode.WRN_NullabilityMismatchInTypeOnImplicitImplementation:\n                case ErrorCode.WRN_NullabilityMismatchInReturnTypeOnImplicitImplementation:\n                case ErrorCode.WRN_NullabilityMismatchInParameterTypeOnImplicitImplementation:\n                case ErrorCode.WRN_NullabilityMismatchInTypeOnExplicitImplementation:\n                case ErrorCode.WRN_NullabilityMismatchInReturnTypeOnExplicitImplementation:\n                case ErrorCode.WRN_NullabilityMismatchInParameterTypeOnExplicitImplementation:\n                case ErrorCode.WRN_UninitializedNonNullableField:\n                case ErrorCode.WRN_NullabilityMismatchInAssignment:\n                case ErrorCode.WRN_NullabilityMismatchInArgument:\n                case ErrorCode.WRN_NullabilityMismatchInReturnTypeOfTargetDelegate:\n                case ErrorCode.WRN_NullabilityMismatchInParameterTypeOfTargetDelegate:\n                case ErrorCode.WRN_NullabilityMismatchInArgumentForOutput:\n                case ErrorCode.WRN_NullAsNonNullable:\n                case ErrorCode.WRN_NullableValueTypeMayBeNull:\n                case ErrorCode.WRN_NullabilityMismatchInTypeParameterConstraint:\n                case ErrorCode.WRN_MissingNonNullTypesContextForAnnotation:\n                case ErrorCode.WRN_NullabilityMismatchInConstraintsOnImplicitImplementation:\n                case ErrorCode.WRN_NullabilityMismatchInTypeParameterReferenceTypeConstraint:\n                case ErrorCode.WRN_NullabilityMismatchInExplicitlyImplementedInterface:\n                case ErrorCode.WRN_NullabilityMismatchInInterfaceImplementedByBase:\n                case ErrorCode.WRN_DuplicateInterfaceWithNullabilityMismatchInBaseList:\n                case ErrorCode.WRN_SwitchExpressionNotExhaustiveForNull:\n                case ErrorCode.WRN_ImplicitCopyInReadOnlyMember:\n                case ErrorCode.WRN_NullabilityMismatchInConstraintsOnPartialImplementation:\n                case ErrorCode.WRN_MissingNonNullTypesContextForAnnotationInGeneratedCode:\n                case ErrorCode.WRN_NullReferenceInitializer:\n                case ErrorCode.WRN_NullabilityMismatchInTypeParameterNotNullConstraint:\n                case ErrorCode.WRN_ParameterConditionallyDisallowsNull:\n                case ErrorCode.WRN_ShouldNotReturn:\n                case ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride:\n                case ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride:\n                case ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnImplicitImplementation:\n                case ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnImplicitImplementation:\n                case ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnExplicitImplementation:\n                case ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnExplicitImplementation:\n                case ErrorCode.WRN_DoesNotReturnMismatch:\n                case ErrorCode.WRN_MemberNotNull:\n                case ErrorCode.WRN_MemberNotNullWhen:\n                case ErrorCode.WRN_MemberNotNullBadMember:\n                case ErrorCode.WRN_ParameterDisallowsNull:\n                case ErrorCode.WRN_ConstOutOfRangeChecked:\n                case ErrorCode.WRN_GeneratorFailedDuringInitialization:\n                case ErrorCode.WRN_GeneratorFailedDuringGeneration:\n                case ErrorCode.WRN_GivenExpressionAlwaysMatchesPattern:\n                case ErrorCode.WRN_IsPatternAlways:\n                case ErrorCode.WRN_NullabilityMismatchInReturnTypeOnPartial:\n                case ErrorCode.WRN_ParameterNotNullIfNotNull:\n                case ErrorCode.WRN_ReturnNotNullIfNotNull:\n                case ErrorCode.WRN_SwitchExpressionNotExhaustiveWithWhen:\n                case ErrorCode.WRN_SwitchExpressionNotExhaustiveForNullWithWhen:\n                case ErrorCode.WRN_PrecedenceInversion:\n                case ErrorCode.WRN_AnalyzerReferencesFramework:\n                case ErrorCode.WRN_RecordEqualsWithoutGetHashCode:\n                case ErrorCode.WRN_RecordNamedDisallowed:\n                case ErrorCode.WRN_UnassignedThisAutoProperty:\n                case ErrorCode.WRN_UnassignedThis:\n                case ErrorCode.WRN_ParamUnassigned:\n                case ErrorCode.WRN_UseDefViolationProperty:\n                case ErrorCode.WRN_UseDefViolationField:\n                case ErrorCode.WRN_UseDefViolationThis:\n                case ErrorCode.WRN_UseDefViolationOut:\n                case ErrorCode.WRN_UseDefViolation:\n                case ErrorCode.WRN_SyncAndAsyncEntryPoints:\n                case ErrorCode.WRN_ParameterIsStaticClass:\n                case ErrorCode.WRN_ReturnTypeIsStaticClass:\n                case ErrorCode.WRN_UnreadRecordParameter:\n                case ErrorCode.WRN_DoNotCompareFunctionPointers:\n                    return true;\n                default:\n                    return false;\n            } 984856"];
8151 [label="return false; 984857"];
8152 [label="if (IsInfo(code))\n            {\n                return DiagnosticSeverity.Info;\n            }\n            else if (IsHidden(code))\n            {\n                return DiagnosticSeverity.Hidden;\n            }\n            else\n            {\n                return DiagnosticSeverity.Error;\n            } 984858"];
8153 [label="IsInfo(code) 984859"];
8154 [label="param IsInfo(ErrorCode code) 984860"];
8155 [label="switch (code)\n            {\n                case ErrorCode.INF_UnableToLoadSomeTypesInAnalyzer:\n                    return true;\n                default:\n                    return false;\n            } 984861"];
8156 [label="return false; 984862"];
8157 [label="if (IsHidden(code))\n            {\n                return DiagnosticSeverity.Hidden;\n            }\n            else\n            {\n                return DiagnosticSeverity.Error;\n            } 984863"];
8158 [label="IsHidden(code) 984864"];
8159 [label="param IsHidden(ErrorCode code) 984865"];
8160 [label="switch (code)\n            {\n                case ErrorCode.HDN_UnusedUsingDirective:\n                case ErrorCode.HDN_UnusedExternAlias:\n                    return true;\n                default:\n                    return false;\n            } 984866"];
8161 [label="return false; 984867"];
8162 [label="return DiagnosticSeverity.Error; 984868"];
8163 [label="param DiagnosticInfoWithSymbols(this) 984869"];
8164 [label="this.Symbols 984870"];
8165 [label="_additionalLocations 984871"];
8166 [label="Debug.Assert(code != ErrorCode.ERR_InternalError); 984872"];
8167 [label="additionalLocations.IsDefaultOrEmpty 984873"];
8168 [label="_additionalLocations = additionalLocations.IsDefaultOrEmpty ? SpecializedCollections.EmptyReadOnlyList<Location>() : additionalLocations; 984874"];
8169 [label="_additionalLocations 984875"];
8170 [label="EmptyErrorInfo = new CSDiagnosticInfo(0) 984876"];
8171 [label="ErrorCode.Void 984877"];
8172 [label="new CSDiagnosticInfo(ErrorCode.Void) 984878"];
8173 [label="param CSDiagnosticInfo(ErrorCode code) 984879"];
8174 [label="param CSDiagnosticInfo(this) 984880"];
8175 [label="code 984881"];
8176 [label="Array.Empty<object>() 984882"];
8177 [label="ImmutableArray<Symbol>.Empty 984883"];
8178 [label="ImmutableArray<Location>.Empty 984884"];
8179 [label="param CSDiagnosticInfo(ErrorCode code) 984885"];
8180 [label="param CSDiagnosticInfo(object[] args) 984886"];
8181 [label="param CSDiagnosticInfo(ImmutableArray<Symbol> symbols) 984887"];
8182 [label="param CSDiagnosticInfo(ImmutableArray<Location> additionalLocations) 984888"];
8183 [label="param CSDiagnosticInfo(this) 984889"];
8184 [label="code 984890"];
8185 [label="args 984891"];
8186 [label="symbols 984892"];
8187 [label="param DiagnosticInfoWithSymbols(ErrorCode errorCode) 984893"];
8188 [label="param DiagnosticInfoWithSymbols(object[] arguments) 984894"];
8189 [label="param DiagnosticInfoWithSymbols(ImmutableArray<Symbol> symbols) 984895"];
8190 [label="param DiagnosticInfoWithSymbols(this) 984896"];
8191 [label="CSharp.MessageProvider.Instance 984897"];
8192 [label="errorCode 984898"];
8193 [label="arguments 984899"];
8194 [label="param DiagnosticInfoWithSymbols(this) 984900"];
8195 [label="param GetSeverity(this) 984901"];
8196 [label="ErrorFacts.GetSeverity((ErrorCode)code) 984902"];
8197 [label="return InternalDiagnosticSeverity.Void; 984903"];
8198 [label="this.Symbols 984904"];
8199 [label="_additionalLocations 984905"];
8200 [label="Debug.Assert(code != ErrorCode.ERR_InternalError); 984906"];
8201 [label="additionalLocations.IsDefaultOrEmpty 984907"];
8202 [label="_additionalLocations = additionalLocations.IsDefaultOrEmpty ? SpecializedCollections.EmptyReadOnlyList<Location>() : additionalLocations; 984908"];
8203 [label="_additionalLocations 984909"];
8204 [label="VoidDiagnosticInfo = new CSDiagnosticInfo(ErrorCode.Void) 984910"];
8205 [label="var info = new CSDiagnosticInfo(code); 984911"];
8206 [label="var info = new CSDiagnosticInfo(code); 984912"];
8207 [label="new CSDiagnosticInfo(code) 984913"];
8208 [label="param CSDiagnosticInfo(ErrorCode code) 984914"];
8209 [label="param CSDiagnosticInfo(this) 984915"];
8210 [label="code 984916"];
8211 [label="Array.Empty<object>() 984917"];
8212 [label="ImmutableArray<Symbol>.Empty 984918"];
8213 [label="ImmutableArray<Location>.Empty 984919"];
8214 [label="param CSDiagnosticInfo(this) 984920"];
8215 [label="param CSDiagnosticInfo(ErrorCode code) 984921"];
8216 [label="param CSDiagnosticInfo(object[] args) 984922"];
8217 [label="param CSDiagnosticInfo(ImmutableArray<Symbol> symbols) 984923"];
8218 [label="param CSDiagnosticInfo(ImmutableArray<Location> additionalLocations) 984924"];
8219 [label="param CSDiagnosticInfo(this) 984925"];
8220 [label="code 984926"];
8221 [label="args 984927"];
8222 [label="symbols 984928"];
8223 [label="param CSDiagnosticInfo(this) 984929"];
8224 [label="param DiagnosticInfoWithSymbols(ErrorCode errorCode) 984930"];
8225 [label="param DiagnosticInfoWithSymbols(object[] arguments) 984931"];
8226 [label="param DiagnosticInfoWithSymbols(ImmutableArray<Symbol> symbols) 984932"];
8227 [label="param DiagnosticInfoWithSymbols(this) 984933"];
8228 [label="CSharp.MessageProvider.Instance 984934"];
8229 [label="errorCode 984935"];
8230 [label="arguments 984936"];
8231 [label="param DiagnosticInfoWithSymbols(this) 984937"];
8232 [label="param DiagnosticInfoWithSymbols(this) 984938"];
8233 [label="param GetSeverity(this) 984939"];
8234 [label="ErrorFacts.GetSeverity((ErrorCode)code) 984940"];
8235 [label="return true; 984941"];
8236 [label="return DiagnosticSeverity.Warning; 984942"];
8237 [label="this.Symbols 984943"];
8238 [label="_additionalLocations 984944"];
8239 [label="Debug.Assert(code != ErrorCode.ERR_InternalError); 984945"];
8240 [label="additionalLocations.IsDefaultOrEmpty 984946"];
8241 [label="_additionalLocations = additionalLocations.IsDefaultOrEmpty ? SpecializedCollections.EmptyReadOnlyList<Location>() : additionalLocations; 984947"];
8242 [label="_additionalLocations 984948"];
8243 [label="var diag = new CSDiagnostic(info, location); 984949"];
8244 [label="var diag = new CSDiagnostic(info, location); 984950"];
8245 [label="var diag = new CSDiagnostic(info, location); 984951"];
8246 [label="new CSDiagnostic(info, location) 984952"];
8247 [label="param CSDiagnostic(DiagnosticInfo info) 984953"];
8248 [label="param CSDiagnostic(Location location) 984954"];
8249 [label="param CSDiagnostic(bool isSuppressed = false) 984955"];
8250 [label="param CSDiagnostic(this) 984956"];
8251 [label="info 984957"];
8252 [label="location 984958"];
8253 [label="isSuppressed 984959"];
8254 [label="param CSDiagnostic(this) 984960"];
8255 [label="param CSDiagnostic(this) 984961"];
8256 [label="diagnostics.Add(diag); 984962"];
8257 [label="diagnostics.Add(diag); 984963"];
8258 [label="return info; 984964"];
8259 [label="runtimeMDVersionDiagnostics.Add(ErrorCode.WRN_NoRuntimeMetadataVersion, NoLocation.Singleton); 984965"];
8260 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref runtimeMDVersionDiagnostics, CancellationToken.None))\n            {\n                return null;\n            } 984966"];
8261 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref runtimeMDVersionDiagnostics, CancellationToken.None))\n            {\n                return null;\n            } 984967"];
8262 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref runtimeMDVersionDiagnostics, CancellationToken.None))\n            {\n                return null;\n            } 984968"];
8263 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref runtimeMDVersionDiagnostics, CancellationToken.None))\n            {\n                return null;\n            } 984969"];
8264 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref runtimeMDVersionDiagnostics, CancellationToken.None))\n            {\n                return null;\n            } 984970"];
8265 [label="param FilterDiagnostic(Diagnostic diagnostic) 984971"];
8266 [label="param FilterDiagnostic(CancellationToken cancellationToken) 984972"];
8267 [label="param FilterDiagnostic(this) 984973"];
8268 [label="return CSharpDiagnosticFilter.Filter(\n                diagnostic,\n                WarningLevel,\n                NullableContextOptions,\n                GeneralDiagnosticOption,\n                SpecificDiagnosticOptions,\n                SyntaxTreeOptionsProvider,\n                cancellationToken); 984974"];
8269 [label="return CSharpDiagnosticFilter.Filter(\n                diagnostic,\n                WarningLevel,\n                NullableContextOptions,\n                GeneralDiagnosticOption,\n                SpecificDiagnosticOptions,\n                SyntaxTreeOptionsProvider,\n                cancellationToken); 984975"];
8270 [label="{ ErrorCode.WRN_ConflictingMachineAssembly,\n                                                              ErrorCode.WRN_RefCultureMismatch,\n                                                              ErrorCode.WRN_InvalidVersionFormat } 984976"];
8271 [label="s_alinkWarnings = { ErrorCode.WRN_ConflictingMachineAssembly,\n                                                              ErrorCode.WRN_RefCultureMismatch,\n                                                              ErrorCode.WRN_InvalidVersionFormat } 984977"];
8272 [label="return CSharpDiagnosticFilter.Filter(\n                diagnostic,\n                WarningLevel,\n                NullableContextOptions,\n                GeneralDiagnosticOption,\n                SpecificDiagnosticOptions,\n                SyntaxTreeOptionsProvider,\n                cancellationToken); 984978"];
8273 [label="CSharpDiagnosticFilter.Filter(\n                diagnostic,\n                WarningLevel,\n                NullableContextOptions,\n                GeneralDiagnosticOption,\n                SpecificDiagnosticOptions,\n                SyntaxTreeOptionsProvider,\n                cancellationToken) 984979"];
8274 [label="param Filter(Diagnostic d) 984980"];
8275 [label="param Filter(int warningLevelOption) 984981"];
8276 [label="param Filter(NullableContextOptions nullableOption) 984982"];
8277 [label="param Filter(ReportDiagnostic generalDiagnosticOption) 984983"];
8278 [label="param Filter(IDictionary<string, ReportDiagnostic> specificDiagnosticOptions) 984984"];
8279 [label="param Filter(SyntaxTreeOptionsProvider? syntaxTreeOptions) 984985"];
8280 [label="param Filter(CancellationToken cancellationToken) 984986"];
8281 [label="if (d == null)\n            {\n                return d;\n            }\n            else if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 984987"];
8282 [label="if (d == null)\n            {\n                return d;\n            }\n            else if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 984988"];
8283 [label="if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 984989"];
8284 [label="if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 984990"];
8285 [label="ReportDiagnostic reportAction; 984991"];
8286 [label="bool hasPragmaSuppression; 984992"];
8287 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 984993"];
8288 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 984994"];
8289 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 984995"];
8290 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 984996"];
8291 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 984997"];
8292 [label="d.Id 984998"];
8293 [label="get\n            {\n                return 'CS';\n            } 984999"];
8294 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 985000"];
8295 [label="d.WarningLevel 985001"];
8296 [label="param GetWarningLevel(int code) 985002"];
8297 [label="param GetWarningLevel(this) 985003"];
8298 [label="return ErrorFacts.GetWarningLevel((ErrorCode)code); 985004"];
8299 [label="ErrorFacts.GetWarningLevel((ErrorCode)code) 985005"];
8300 [label="param GetWarningLevel(ErrorCode code) 985006"];
8301 [label="if (IsInfo(code) || IsHidden(code))\n            {\n                // Info and hidden diagnostics should always be produced because some analyzers depend on them.\n                return Diagnostic.InfoAndHiddenWarningLevel;\n            } 985007"];
8302 [label="IsInfo(code) 985008"];
8303 [label="param IsInfo(ErrorCode code) 985009"];
8304 [label="IsHidden(code) 985010"];
8305 [label="param IsHidden(ErrorCode code) 985011"];
8306 [label="if (IsInfo(code) || IsHidden(code))\n            {\n                // Info and hidden diagnostics should always be produced because some analyzers depend on them.\n                return Diagnostic.InfoAndHiddenWarningLevel;\n            } 985012"];
8307 [label="switch (code)\n            {\n                case ErrorCode.WRN_NubExprIsConstBool2:\n                case ErrorCode.WRN_StaticInAsOrIs:\n                case ErrorCode.WRN_PrecedenceInversion:\n                case ErrorCode.WRN_UnassignedThisAutoProperty:\n                case ErrorCode.WRN_UnassignedThis:\n                case ErrorCode.WRN_ParamUnassigned:\n                case ErrorCode.WRN_UseDefViolationProperty:\n                case ErrorCode.WRN_UseDefViolationField:\n                case ErrorCode.WRN_UseDefViolationThis:\n                case ErrorCode.WRN_UseDefViolationOut:\n                case ErrorCode.WRN_UseDefViolation:\n                case ErrorCode.WRN_SyncAndAsyncEntryPoints:\n                case ErrorCode.WRN_ParameterIsStaticClass:\n                case ErrorCode.WRN_ReturnTypeIsStaticClass:\n                    // Warning level 5 is exclusively for warnings introduced in the compiler\n                    // shipped with dotnet 5 (C# 9) and that can be reported for pre-existing code.\n                    return 5;\n                case ErrorCode.WRN_InvalidMainSig:\n                case ErrorCode.WRN_LowercaseEllSuffix:\n                case ErrorCode.WRN_NewNotRequired:\n                case ErrorCode.WRN_MainCantBeGeneric:\n                case ErrorCode.WRN_ProtectedInSealed:\n                case ErrorCode.WRN_UnassignedInternalField:\n                case ErrorCode.WRN_MissingParamTag:\n                case ErrorCode.WRN_MissingXMLComment:\n                case ErrorCode.WRN_MissingTypeParamTag:\n                case ErrorCode.WRN_InvalidVersionFormat:\n                    return 4;\n                case ErrorCode.WRN_UnreferencedEvent:\n                case ErrorCode.WRN_DuplicateUsing:\n                case ErrorCode.WRN_UnreferencedVar:\n                case ErrorCode.WRN_UnreferencedField:\n                case ErrorCode.WRN_UnreferencedVarAssg:\n                case ErrorCode.WRN_UnreferencedLocalFunction:\n                case ErrorCode.WRN_SequentialOnPartialClass:\n                case ErrorCode.WRN_UnreferencedFieldAssg:\n                case ErrorCode.WRN_AmbiguousXMLReference:\n                case ErrorCode.WRN_PossibleMistakenNullStatement:\n                case ErrorCode.WRN_EqualsWithoutGetHashCode:\n                case ErrorCode.WRN_EqualityOpWithoutEquals:\n                case ErrorCode.WRN_EqualityOpWithoutGetHashCode:\n                case ErrorCode.WRN_IncorrectBooleanAssg:\n                case ErrorCode.WRN_BitwiseOrSignExtend:\n                case ErrorCode.WRN_TypeParameterSameAsOuterTypeParameter:\n                case ErrorCode.WRN_InvalidAssemblyName:\n                case ErrorCode.WRN_UnifyReferenceBldRev:\n                case ErrorCode.WRN_AssignmentToSelf:\n                case ErrorCode.WRN_ComparisonToSelf:\n                case ErrorCode.WRN_IsDynamicIsConfusing:\n                case ErrorCode.WRN_DebugFullNameTooLong:\n                case ErrorCode.WRN_PdbLocalNameTooLong:\n                case ErrorCode.WRN_RecordEqualsWithoutGetHashCode:\n                    return 3;\n                case ErrorCode.WRN_NewRequired:\n                case ErrorCode.WRN_NewOrOverrideExpected:\n                case ErrorCode.WRN_UnreachableCode:\n                case ErrorCode.WRN_UnreferencedLabel:\n                case ErrorCode.WRN_NegativeArrayIndex:\n                case ErrorCode.WRN_BadRefCompareLeft:\n                case ErrorCode.WRN_BadRefCompareRight:\n                case ErrorCode.WRN_PatternIsAmbiguous:\n                case ErrorCode.WRN_PatternNotPublicOrNotInstance:\n                case ErrorCode.WRN_PatternBadSignature:\n                case ErrorCode.WRN_SameFullNameThisNsAgg:\n                case ErrorCode.WRN_SameFullNameThisAggAgg:\n                case ErrorCode.WRN_SameFullNameThisAggNs:\n                case ErrorCode.WRN_GlobalAliasDefn:\n                case ErrorCode.WRN_AlwaysNull:\n                case ErrorCode.WRN_CmpAlwaysFalse:\n                case ErrorCode.WRN_GotoCaseShouldConvert:\n                case ErrorCode.WRN_NubExprIsConstBool:\n                case ErrorCode.WRN_ExplicitImplCollision:\n                case ErrorCode.WRN_DeprecatedSymbolStr:\n                case ErrorCode.WRN_VacuousIntegralComp:\n                case ErrorCode.WRN_AssignmentToLockOrDispose:\n                case ErrorCode.WRN_DeprecatedCollectionInitAddStr:\n                case ErrorCode.WRN_DeprecatedCollectionInitAdd:\n                case ErrorCode.WRN_DuplicateParamTag:\n                case ErrorCode.WRN_UnmatchedParamTag:\n                case ErrorCode.WRN_UnprocessedXMLComment:\n                case ErrorCode.WRN_InvalidSearchPathDir:\n                case ErrorCode.WRN_UnifyReferenceMajMin:\n                case ErrorCode.WRN_DuplicateTypeParamTag:\n                case ErrorCode.WRN_UnmatchedTypeParamTag:\n                case ErrorCode.WRN_UnmatchedParamRefTag:\n                case ErrorCode.WRN_UnmatchedTypeParamRefTag:\n                case ErrorCode.WRN_CantHaveManifestForModule:\n                case ErrorCode.WRN_DynamicDispatchToConditionalMethod:\n                case ErrorCode.WRN_NoSources:\n                case ErrorCode.WRN_CLS_MeaninglessOnPrivateType:\n                case ErrorCode.WRN_CLS_AssemblyNotCLS2:\n                case ErrorCode.WRN_MainIgnored:\n                case ErrorCode.WRN_UnqualifiedNestedTypeInCref:\n                case ErrorCode.WRN_NoRuntimeMetadataVersion:\n                    return 2;\n                case ErrorCode.WRN_IsAlwaysTrue:\n                case ErrorCode.WRN_IsAlwaysFalse:\n                case ErrorCode.WRN_ByRefNonAgileField:\n                case ErrorCode.WRN_VolatileByRef:\n                case ErrorCode.WRN_FinalizeMethod:\n                case ErrorCode.WRN_DeprecatedSymbol:\n                case ErrorCode.WRN_ExternMethodNoImplementation:\n                case ErrorCode.WRN_AttributeLocationOnBadDeclaration:\n                case ErrorCode.WRN_InvalidAttributeLocation:\n                case ErrorCode.WRN_NonObsoleteOverridingObsolete:\n                case ErrorCode.WRN_CoClassWithoutComImport:\n                case ErrorCode.WRN_ObsoleteOverridingNonObsolete:\n                case ErrorCode.WRN_ExternCtorNoImplementation:\n                case ErrorCode.WRN_WarningDirective:\n                case ErrorCode.WRN_UnreachableGeneralCatch:\n                case ErrorCode.WRN_DefaultValueForUnconsumedLocation:\n                case ErrorCode.WRN_EmptySwitch:\n                case ErrorCode.WRN_XMLParseError:\n                case ErrorCode.WRN_BadXMLRef:\n                case ErrorCode.WRN_BadXMLRefParamType:\n                case ErrorCode.WRN_BadXMLRefReturnType:\n                case ErrorCode.WRN_BadXMLRefSyntax:\n                case ErrorCode.WRN_FailedInclude:\n                case ErrorCode.WRN_InvalidInclude:\n                case ErrorCode.WRN_XMLParseIncludeError:\n                case ErrorCode.WRN_ALinkWarn:\n                case ErrorCode.WRN_AssemblyAttributeFromModuleIsOverridden:\n                case ErrorCode.WRN_CmdOptionConflictsSource:\n                case ErrorCode.WRN_IllegalPragma:\n                case ErrorCode.WRN_IllegalPPWarning:\n                case ErrorCode.WRN_BadRestoreNumber:\n                case ErrorCode.WRN_NonECMAFeature:\n                case ErrorCode.WRN_ErrorOverride:\n                case ErrorCode.WRN_MultiplePredefTypes:\n                case ErrorCode.WRN_TooManyLinesForDebugger:\n                case ErrorCode.WRN_CallOnNonAgileField:\n                case ErrorCode.WRN_InvalidNumber:\n                case ErrorCode.WRN_IllegalPPChecksum:\n                case ErrorCode.WRN_EndOfPPLineExpected:\n                case ErrorCode.WRN_ConflictingChecksum:\n                case ErrorCode.WRN_DotOnDefault:\n                case ErrorCode.WRN_BadXMLRefTypeVar:\n                case ErrorCode.WRN_ReferencedAssemblyReferencesLinkedPIA:\n                case ErrorCode.WRN_MultipleRuntimeImplementationMatches:\n                case ErrorCode.WRN_MultipleRuntimeOverrideMatches:\n                case ErrorCode.WRN_FileAlreadyIncluded:\n                case ErrorCode.WRN_NoConfigNotOnCommandLine:\n                case ErrorCode.WRN_AnalyzerCannotBeCreated:\n                case ErrorCode.WRN_NoAnalyzerInAssembly:\n                case ErrorCode.WRN_UnableToLoadAnalyzer:\n                case ErrorCode.WRN_DefineIdentifierRequired:\n                case ErrorCode.WRN_CLS_NoVarArgs:\n                case ErrorCode.WRN_CLS_BadArgType:\n                case ErrorCode.WRN_CLS_BadReturnType:\n                case ErrorCode.WRN_CLS_BadFieldPropType:\n                case ErrorCode.WRN_CLS_BadIdentifierCase:\n                case ErrorCode.WRN_CLS_OverloadRefOut:\n                case ErrorCode.WRN_CLS_OverloadUnnamed:\n                case ErrorCode.WRN_CLS_BadIdentifier:\n                case ErrorCode.WRN_CLS_BadBase:\n                case ErrorCode.WRN_CLS_BadInterfaceMember:\n                case ErrorCode.WRN_CLS_NoAbstractMembers:\n                case ErrorCode.WRN_CLS_NotOnModules:\n                case ErrorCode.WRN_CLS_ModuleMissingCLS:\n                case ErrorCode.WRN_CLS_AssemblyNotCLS:\n                case ErrorCode.WRN_CLS_BadAttributeType:\n                case ErrorCode.WRN_CLS_ArrayArgumentToAttribute:\n                case ErrorCode.WRN_CLS_NotOnModules2:\n                case ErrorCode.WRN_CLS_IllegalTrueInFalse:\n                case ErrorCode.WRN_CLS_MeaninglessOnParam:\n                case ErrorCode.WRN_CLS_MeaninglessOnReturn:\n                case ErrorCode.WRN_CLS_BadTypeVar:\n                case ErrorCode.WRN_CLS_VolatileField:\n                case ErrorCode.WRN_CLS_BadInterface:\n                case ErrorCode.WRN_UnobservedAwaitableExpression:\n                case ErrorCode.WRN_CallerLineNumberParamForUnconsumedLocation:\n                case ErrorCode.WRN_CallerFilePathParamForUnconsumedLocation:\n                case ErrorCode.WRN_CallerMemberNameParamForUnconsumedLocation:\n                case ErrorCode.WRN_CallerFilePathPreferredOverCallerMemberName:\n                case ErrorCode.WRN_CallerLineNumberPreferredOverCallerMemberName:\n                case ErrorCode.WRN_CallerLineNumberPreferredOverCallerFilePath:\n                case ErrorCode.WRN_DelaySignButNoKey:\n                case ErrorCode.WRN_UnimplementedCommandLineSwitch:\n                case ErrorCode.WRN_AsyncLacksAwaits:\n                case ErrorCode.WRN_BadUILang:\n                case ErrorCode.WRN_RefCultureMismatch:\n                case ErrorCode.WRN_ConflictingMachineAssembly:\n                case ErrorCode.WRN_FilterIsConstantTrue:\n                case ErrorCode.WRN_FilterIsConstantFalse:\n                case ErrorCode.WRN_FilterIsConstantFalseRedundantTryCatch:\n                case ErrorCode.WRN_IdentifierOrNumericLiteralExpected:\n                case ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName:\n                case ErrorCode.WRN_AlignmentMagnitude:\n                case ErrorCode.WRN_AttributeIgnoredWhenPublicSigning:\n                case ErrorCode.WRN_TupleLiteralNameMismatch:\n                case ErrorCode.WRN_Experimental:\n                case ErrorCode.WRN_AttributesOnBackingFieldsNotAvailable:\n                case ErrorCode.WRN_TupleBinopLiteralNameMismatch:\n                case ErrorCode.WRN_TypeParameterSameAsOuterMethodTypeParameter:\n                case ErrorCode.WRN_ConvertingNullableToNonNullable:\n                case ErrorCode.WRN_NullReferenceAssignment:\n                case ErrorCode.WRN_NullReferenceReceiver:\n                case ErrorCode.WRN_NullReferenceReturn:\n                case ErrorCode.WRN_NullReferenceArgument:\n                case ErrorCode.WRN_NullabilityMismatchInTypeOnOverride:\n                case ErrorCode.WRN_NullabilityMismatchInReturnTypeOnOverride:\n                case ErrorCode.WRN_NullabilityMismatchInReturnTypeOnPartial:\n                case ErrorCode.WRN_NullabilityMismatchInParameterTypeOnOverride:\n                case ErrorCode.WRN_NullabilityMismatchInParameterTypeOnPartial:\n                case ErrorCode.WRN_NullabilityMismatchInConstraintsOnPartialImplementation:\n                case ErrorCode.WRN_NullabilityMismatchInTypeOnImplicitImplementation:\n                case ErrorCode.WRN_NullabilityMismatchInReturnTypeOnImplicitImplementation:\n                case ErrorCode.WRN_NullabilityMismatchInParameterTypeOnImplicitImplementation:\n                case ErrorCode.WRN_DuplicateInterfaceWithNullabilityMismatchInBaseList:\n                case ErrorCode.WRN_NullabilityMismatchInInterfaceImplementedByBase:\n                case ErrorCode.WRN_NullabilityMismatchInExplicitlyImplementedInterface:\n                case ErrorCode.WRN_NullabilityMismatchInTypeOnExplicitImplementation:\n                case ErrorCode.WRN_NullabilityMismatchInReturnTypeOnExplicitImplementation:\n                case ErrorCode.WRN_NullabilityMismatchInParameterTypeOnExplicitImplementation:\n                case ErrorCode.WRN_UninitializedNonNullableField:\n                case ErrorCode.WRN_NullabilityMismatchInAssignment:\n                case ErrorCode.WRN_NullabilityMismatchInArgument:\n                case ErrorCode.WRN_NullabilityMismatchInArgumentForOutput:\n                case ErrorCode.WRN_NullabilityMismatchInReturnTypeOfTargetDelegate:\n                case ErrorCode.WRN_NullabilityMismatchInParameterTypeOfTargetDelegate:\n                case ErrorCode.WRN_NullAsNonNullable:\n                case ErrorCode.WRN_NullableValueTypeMayBeNull:\n                case ErrorCode.WRN_NullabilityMismatchInTypeParameterConstraint:\n                case ErrorCode.WRN_MissingNonNullTypesContextForAnnotation:\n                case ErrorCode.WRN_MissingNonNullTypesContextForAnnotationInGeneratedCode:\n                case ErrorCode.WRN_NullabilityMismatchInConstraintsOnImplicitImplementation:\n                case ErrorCode.WRN_NullabilityMismatchInTypeParameterReferenceTypeConstraint:\n                case ErrorCode.WRN_SwitchExpressionNotExhaustive:\n                case ErrorCode.WRN_IsTypeNamedUnderscore:\n                case ErrorCode.WRN_GivenExpressionNeverMatchesPattern:\n                case ErrorCode.WRN_GivenExpressionAlwaysMatchesConstant:\n                case ErrorCode.WRN_SwitchExpressionNotExhaustiveWithUnnamedEnumValue:\n                case ErrorCode.WRN_CaseConstantNamedUnderscore:\n                case ErrorCode.WRN_ThrowPossibleNull:\n                case ErrorCode.WRN_UnboxPossibleNull:\n                case ErrorCode.WRN_SwitchExpressionNotExhaustiveForNull:\n                case ErrorCode.WRN_ImplicitCopyInReadOnlyMember:\n                case ErrorCode.WRN_UnconsumedEnumeratorCancellationAttributeUsage:\n                case ErrorCode.WRN_UndecoratedCancellationTokenParameter:\n                case ErrorCode.WRN_NullabilityMismatchInTypeParameterNotNullConstraint:\n                case ErrorCode.WRN_DisallowNullAttributeForbidsMaybeNullAssignment:\n                case ErrorCode.WRN_ParameterConditionallyDisallowsNull:\n                case ErrorCode.WRN_NullReferenceInitializer:\n                case ErrorCode.WRN_ShouldNotReturn:\n                case ErrorCode.WRN_DoesNotReturnMismatch:\n                case ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride:\n                case ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride:\n                case ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnImplicitImplementation:\n                case ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnImplicitImplementation:\n                case ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnExplicitImplementation:\n                case ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnExplicitImplementation:\n                case ErrorCode.WRN_ConstOutOfRangeChecked:\n                case ErrorCode.WRN_MemberNotNull:\n                case ErrorCode.WRN_MemberNotNullBadMember:\n                case ErrorCode.WRN_MemberNotNullWhen:\n                case ErrorCode.WRN_GeneratorFailedDuringInitialization:\n                case ErrorCode.WRN_GeneratorFailedDuringGeneration:\n                case ErrorCode.WRN_ParameterDisallowsNull:\n                case ErrorCode.WRN_GivenExpressionAlwaysMatchesPattern:\n                case ErrorCode.WRN_IsPatternAlways:\n                case ErrorCode.WRN_SwitchExpressionNotExhaustiveWithWhen:\n                case ErrorCode.WRN_SwitchExpressionNotExhaustiveForNullWithWhen:\n                case ErrorCode.WRN_RecordNamedDisallowed:\n                case ErrorCode.WRN_ParameterNotNullIfNotNull:\n                case ErrorCode.WRN_ReturnNotNullIfNotNull:\n                case ErrorCode.WRN_AnalyzerReferencesFramework:\n                case ErrorCode.WRN_UnreadRecordParameter:\n                case ErrorCode.WRN_DoNotCompareFunctionPointers:\n                    return 1;\n                default:\n                    return 0;\n            } 985013"];
8308 [label="return 2; 985014"];
8309 [label="d.Category 985015"];
8310 [label="param GetCategory(int code) 985016"];
8311 [label="param GetCategory(this) 985017"];
8312 [label="return ErrorFacts.GetCategory((ErrorCode)code); 985018"];
8313 [label="ErrorFacts.GetCategory((ErrorCode)code) 985019"];
8314 [label="param GetCategory(ErrorCode code) 985020"];
8315 [label="string category; 985021"];
8316 [label="if (s_categoriesMap.Value.TryGetValue(code, out category))\n            {\n                return category;\n            } 985022"];
8317 [label="s_categoriesMap.Value 985023"];
8318 [label="var map = new Dictionary<ErrorCode, string>()\n            {\n                // { ERROR_CODE,    CATEGORY }\n            }; 985024"];
8319 [label="return map.ToImmutableDictionary(); 985025"];
8320 [label="if (s_categoriesMap.Value.TryGetValue(code, out category))\n            {\n                return category;\n            } 985026"];
8321 [label="if (s_categoriesMap.Value.TryGetValue(code, out category))\n            {\n                return category;\n            } 985027"];
8322 [label="if (s_categoriesMap.Value.TryGetValue(code, out category))\n            {\n                return category;\n            } 985028"];
8323 [label="if (s_categoriesMap.Value.TryGetValue(code, out category))\n            {\n                return category;\n            } 985029"];
8324 [label="if (s_categoriesMap.Value.TryGetValue(code, out category))\n            {\n                return category;\n            } 985030"];
8325 [label="return Diagnostic.CompilerDiagnosticCategory; 985031"];
8326 [label="return ErrorFacts.GetCategory((ErrorCode)code); 985032"];
8327 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 985033"];
8328 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 985034"];
8329 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 985035"];
8330 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 985036"];
8331 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 985037"];
8332 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 985038"];
8333 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 985039"];
8334 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 985040"];
8335 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 985041"];
8336 [label="GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression) 985042"];
8337 [label="param GetDiagnosticReport(DiagnosticSeverity severity) 985043"];
8338 [label="param GetDiagnosticReport(bool isEnabledByDefault) 985044"];
8339 [label="param GetDiagnosticReport(string id) 985045"];
8340 [label="param GetDiagnosticReport(int diagnosticWarningLevel) 985046"];
8341 [label="param GetDiagnosticReport(Location location) 985047"];
8342 [label="param GetDiagnosticReport(string category) 985048"];
8343 [label="param GetDiagnosticReport(int warningLevelOption) 985049"];
8344 [label="param GetDiagnosticReport(NullableContextOptions nullableOption) 985050"];
8345 [label="param GetDiagnosticReport(ReportDiagnostic generalDiagnosticOption) 985051"];
8346 [label="param GetDiagnosticReport(IDictionary<string, ReportDiagnostic> specificDiagnosticOptions) 985052"];
8347 [label="param GetDiagnosticReport(SyntaxTreeOptionsProvider? syntaxTreeOptions) 985053"];
8348 [label="param GetDiagnosticReport(CancellationToken cancellationToken) 985054"];
8349 [label="param GetDiagnosticReport(out bool hasPragmaSuppression) 985055"];
8350 [label="hasPragmaSuppression = false; 985056"];
8351 [label="Debug.Assert(location.SourceTree is null || location.SourceTree is CSharpSyntaxTree); 985057"];
8352 [label="var tree = location.SourceTree as CSharpSyntaxTree; 985058"];
8353 [label="var position = location.SourceSpan.Start; 985059"];
8354 [label="bool isNullableFlowAnalysisWarning = ErrorFacts.NullableWarnings.Contains(id); 985060"];
8355 [label="bool isNullableFlowAnalysisWarning = ErrorFacts.NullableWarnings.Contains(id); 985061"];
8356 [label="if (isNullableFlowAnalysisWarning)\n            {\n                // LAFHIS\n                Syntax.NullableContextState.State? warningsState = tree is not null ? tree.GetNullableContextState(position).WarningsState : null;\n                var nullableWarningsEnabled = warningsState switch\n                {\n                    Syntax.NullableContextState.State.Enabled => true,\n                    Syntax.NullableContextState.State.Disabled => false,\n                    Syntax.NullableContextState.State.ExplicitlyRestored => nullableOption.WarningsEnabled(),\n                    Syntax.NullableContextState.State.Unknown =>\n                        tree?.IsGeneratedCode(syntaxTreeOptions, cancellationToken) != true && nullableOption.WarningsEnabled(),\n                    null => nullableOption.WarningsEnabled(),\n                    _ => throw ExceptionUtilities.UnexpectedValue(warningsState)\n                };\n\n                if (!nullableWarningsEnabled)\n                {\n                    return ReportDiagnostic.Suppress;\n                }\n            } 985062"];
8357 [label="if (diagnosticWarningLevel > warningLevelOption)  // honor the warning level\n            {\n                return ReportDiagnostic.Suppress;\n            } 985063"];
8358 [label="ReportDiagnostic report; 985064"];
8359 [label="bool isSpecified = false; 985065"];
8360 [label="bool specifiedWarnAsErrorMinus = false; 985066"];
8361 [label="if (specificDiagnosticOptions.TryGetValue(id, out report))\n            {\n                // 2. Command line options (/nowarn, /warnaserror)\n                isSpecified = true;\n\n                // 'ReportDiagnostic.Default' is added to SpecificDiagnosticOptions for '/warnaserror-:DiagnosticId',\n                if (report == ReportDiagnostic.Default)\n                {\n                    specifiedWarnAsErrorMinus = true;\n                }\n            } 985067"];
8362 [label="if (specificDiagnosticOptions.TryGetValue(id, out report))\n            {\n                // 2. Command line options (/nowarn, /warnaserror)\n                isSpecified = true;\n\n                // 'ReportDiagnostic.Default' is added to SpecificDiagnosticOptions for '/warnaserror-:DiagnosticId',\n                if (report == ReportDiagnostic.Default)\n                {\n                    specifiedWarnAsErrorMinus = true;\n                }\n            } 985068"];
8363 [label="if (specificDiagnosticOptions.TryGetValue(id, out report))\n            {\n                // 2. Command line options (/nowarn, /warnaserror)\n                isSpecified = true;\n\n                // 'ReportDiagnostic.Default' is added to SpecificDiagnosticOptions for '/warnaserror-:DiagnosticId',\n                if (report == ReportDiagnostic.Default)\n                {\n                    specifiedWarnAsErrorMinus = true;\n                }\n            } 985069"];
8364 [label="if (syntaxTreeOptions != null &&\n                (!isSpecified || specifiedWarnAsErrorMinus))\n            {\n                // 3. Editor config options (syntax tree level)\n                // 4. Global analyzer config options (compilation level)\n                // Do not apply config options if it is bumping a warning to an error and '/warnaserror-:DiagnosticId' was specified on the command line.\n                if ((tree != null && syntaxTreeOptions.TryGetDiagnosticValue(tree, id, cancellationToken, out var reportFromSyntaxTreeOptions) ||\n                    syntaxTreeOptions.TryGetGlobalDiagnosticValue(id, cancellationToken, out reportFromSyntaxTreeOptions)) &&\n                    !(specifiedWarnAsErrorMinus && severity == DiagnosticSeverity.Warning && reportFromSyntaxTreeOptions == ReportDiagnostic.Error))\n                {\n                    isSpecified = true;\n                    report = reportFromSyntaxTreeOptions;\n\n                    // '/warnaserror' should promote warnings configured in analyzer config to error.\n                    if (!specifiedWarnAsErrorMinus && report == ReportDiagnostic.Warn && generalDiagnosticOption == ReportDiagnostic.Error)\n                    {\n                        report = ReportDiagnostic.Error;\n                    }\n                }\n            } 985070"];
8365 [label="if (syntaxTreeOptions != null &&\n                (!isSpecified || specifiedWarnAsErrorMinus))\n            {\n                // 3. Editor config options (syntax tree level)\n                // 4. Global analyzer config options (compilation level)\n                // Do not apply config options if it is bumping a warning to an error and '/warnaserror-:DiagnosticId' was specified on the command line.\n                if ((tree != null && syntaxTreeOptions.TryGetDiagnosticValue(tree, id, cancellationToken, out var reportFromSyntaxTreeOptions) ||\n                    syntaxTreeOptions.TryGetGlobalDiagnosticValue(id, cancellationToken, out reportFromSyntaxTreeOptions)) &&\n                    !(specifiedWarnAsErrorMinus && severity == DiagnosticSeverity.Warning && reportFromSyntaxTreeOptions == ReportDiagnostic.Error))\n                {\n                    isSpecified = true;\n                    report = reportFromSyntaxTreeOptions;\n\n                    // '/warnaserror' should promote warnings configured in analyzer config to error.\n                    if (!specifiedWarnAsErrorMinus && report == ReportDiagnostic.Warn && generalDiagnosticOption == ReportDiagnostic.Error)\n                    {\n                        report = ReportDiagnostic.Error;\n                    }\n                }\n            } 985071"];
8366 [label="if (!isSpecified)\n            {\n                report = isEnabledByDefault ? ReportDiagnostic.Default : ReportDiagnostic.Suppress;\n            } 985072"];
8367 [label="isEnabledByDefault 985073"];
8368 [label="report = isEnabledByDefault ? ReportDiagnostic.Default : ReportDiagnostic.Suppress; 985074"];
8369 [label="if (report == ReportDiagnostic.Suppress)\n            {\n                return ReportDiagnostic.Suppress;\n            } 985075"];
8370 [label="var pragmaWarningState = tree?.GetPragmaDirectiveWarningState(id, position) ?? Syntax.PragmaWarningState.Default; 985076"];
8371 [label="var pragmaWarningState = tree?.GetPragmaDirectiveWarningState(id, position) ?? Syntax.PragmaWarningState.Default; 985077"];
8372 [label="if (pragmaWarningState == Syntax.PragmaWarningState.Disabled)\n            {\n                hasPragmaSuppression = true;\n            } 985078"];
8373 [label="if (pragmaWarningState == Syntax.PragmaWarningState.Enabled)\n            {\n                switch (report)\n                {\n                    case ReportDiagnostic.Error:\n                    case ReportDiagnostic.Hidden:\n                    case ReportDiagnostic.Info:\n                    case ReportDiagnostic.Warn:\n                        // No need to adjust the current report state, it already means 'enabled'\n                        return report;\n\n                    case ReportDiagnostic.Suppress:\n                        // Enable the warning\n                        return ReportDiagnostic.Default;\n\n                    case ReportDiagnostic.Default:\n                        if (generalDiagnosticOption == ReportDiagnostic.Error && promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n\n                        return ReportDiagnostic.Default;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(report);\n                }\n            }\n            else if (report == ReportDiagnostic.Suppress) // check options (/nowarn)\n            {\n                return ReportDiagnostic.Suppress;\n            } 985079"];
8374 [label="if (report == ReportDiagnostic.Suppress) // check options (/nowarn)\n            {\n                return ReportDiagnostic.Suppress;\n            } 985080"];
8375 [label="if (report == ReportDiagnostic.Default)\n            {\n                switch (generalDiagnosticOption)\n                {\n                    case ReportDiagnostic.Error:\n                        if (promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n                        break;\n                    case ReportDiagnostic.Suppress:\n                        // When doing suppress-all-warnings, don't lower severity for anything other than warning and info.\n                        // We shouldn't suppress hidden diagnostics here because then features that use hidden diagnostics to\n                        // display a lightbulb would stop working if someone has suppress-all-warnings (/nowarn) specified in their project.\n                        if (severity == DiagnosticSeverity.Warning || severity == DiagnosticSeverity.Info)\n                        {\n                            report = ReportDiagnostic.Suppress;\n                            isSpecified = true;\n                        }\n                        break;\n                }\n            } 985081"];
8376 [label="switch (generalDiagnosticOption)\n                {\n                    case ReportDiagnostic.Error:\n                        if (promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n                        break;\n                    case ReportDiagnostic.Suppress:\n                        // When doing suppress-all-warnings, don't lower severity for anything other than warning and info.\n                        // We shouldn't suppress hidden diagnostics here because then features that use hidden diagnostics to\n                        // display a lightbulb would stop working if someone has suppress-all-warnings (/nowarn) specified in their project.\n                        if (severity == DiagnosticSeverity.Warning || severity == DiagnosticSeverity.Info)\n                        {\n                            report = ReportDiagnostic.Suppress;\n                            isSpecified = true;\n                        }\n                        break;\n                } 985082"];
8377 [label="return report; 985083"];
8378 [label="if (hasPragmaSuppression)\n            {\n                d = d.WithIsSuppressed(true);\n            } 985084"];
8379 [label="return d.WithReportDiagnostic(reportAction); 985085"];
8380 [label="return d.WithReportDiagnostic(reportAction); 985086"];
8381 [label="return string.Empty; 985087"];
8382 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 985088"];
8383 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 985089"];
8384 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 985090"];
8385 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 985091"];
8386 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 985092"];
8387 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 985093"];
8388 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 985094"];
8389 [label="get { return SourceAssembly.IsDelaySigned; } 985095"];
8390 [label="SourceAssembly 985096"];
8391 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 985097"];
8392 [label="GetBoundReferenceManager() 985098"];
8393 [label="param GetBoundReferenceManager(this) 985099"];
8394 [label="GetBoundReferenceManager(); 985100"];
8395 [label="return _lazyAssemblySymbol; 985101"];
8396 [label="return SourceAssembly.IsDelaySigned; 985102"];
8397 [label="SourceAssembly.IsDelaySigned 985103"];
8398 [label="get\n            {\n                //commandline setting trumps attribute value. Warning assumed to be given elsewhere\n                if (_compilation.Options.DelaySign.HasValue)\n                {\n                    return _compilation.Options.DelaySign.Value;\n                }\n\n                // The public sign argument should also override the attribute\n                if (_compilation.Options.PublicSign)\n                {\n                    return false;\n                }\n\n                return (this.AssemblyDelaySignAttributeSetting == ThreeState.True);\n            } 985104"];
8399 [label="_compilation.Options 985105"];
8400 [label="get\n            {\n                return _options;\n            } 985106"];
8401 [label="if (_compilation.Options.DelaySign.HasValue)\n                {\n                    return _compilation.Options.DelaySign.Value;\n                } 985107"];
8402 [label="_compilation.Options 985108"];
8403 [label="get\n            {\n                return _options;\n            } 985109"];
8404 [label="if (_compilation.Options.PublicSign)\n                {\n                    return false;\n                } 985110"];
8405 [label="this.AssemblyDelaySignAttributeSetting 985111"];
8406 [label="get\n            {\n                var defaultValue = ThreeState.Unknown;\n                var fieldValue = defaultValue;\n\n                var data = GetSourceDecodedWellKnownAttributeData();\n                if (data != null)\n                {\n                    fieldValue = data.AssemblyDelaySignAttributeSetting;\n                }\n\n                if (fieldValue == defaultValue)\n                {\n                    data = GetNetModuleDecodedWellKnownAttributeData();\n                    if (data != null)\n                    {\n                        fieldValue = data.AssemblyDelaySignAttributeSetting;\n                    }\n                }\n\n                return fieldValue;\n            } 985112"];
8407 [label="var defaultValue = ThreeState.Unknown; 985113"];
8408 [label="var fieldValue = defaultValue; 985114"];
8409 [label="GetSourceDecodedWellKnownAttributeData() 985115"];
8410 [label="param GetSourceDecodedWellKnownAttributeData(this) 985116"];
8411 [label="var attributesBag = _lazySourceAttributesBag; 985117"];
8412 [label="if (attributesBag == null || !attributesBag.IsDecodedWellKnownAttributeDataComputed)\n            {\n                attributesBag = this.GetSourceAttributesBag();\n            } 985118"];
8413 [label="if (attributesBag == null || !attributesBag.IsDecodedWellKnownAttributeDataComputed)\n            {\n                attributesBag = this.GetSourceAttributesBag();\n            } 985119"];
8414 [label="this.GetSourceAttributesBag() 985120"];
8415 [label="param GetSourceAttributesBag(this) 985121"];
8416 [label="EnsureAttributesAreBound() 985122"];
8417 [label="param EnsureAttributesAreBound(this) 985123"];
8418 [label="if ((_lazySourceAttributesBag == null || !_lazySourceAttributesBag.IsSealed) &&\n                LoadAndValidateAttributes(OneOrMany.Create(GetAttributeDeclarations()), ref _lazySourceAttributesBag))\n            {\n                _state.NotePartComplete(CompletionPart.Attributes);\n            } 985124"];
8419 [label="if ((_lazySourceAttributesBag == null || !_lazySourceAttributesBag.IsSealed) &&\n                LoadAndValidateAttributes(OneOrMany.Create(GetAttributeDeclarations()), ref _lazySourceAttributesBag))\n            {\n                _state.NotePartComplete(CompletionPart.Attributes);\n            } 985125"];
8420 [label="GetAttributeDeclarations() 985126"];
8421 [label="param GetAttributeDeclarations(this) 985127"];
8422 [label="var builder = ArrayBuilder<SyntaxList<AttributeListSyntax>>.GetInstance(); 985128"];
8423 [label="DeclaringCompilation 985129"];
8424 [label="get\n            {\n                return _compilation;\n            } 985130"];
8425 [label="return _compilation; 985131"];
8426 [label="var declarations = DeclaringCompilation.MergedRootDeclaration.Declarations; 985132"];
8427 [label="DeclaringCompilation.MergedRootDeclaration 985133"];
8428 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 985134"];
8429 [label="Declarations 985135"];
8430 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 985136"];
8431 [label="return Declarations.GetMergedRoot(this); 985137"];
8432 [label="return Declarations.GetMergedRoot(this); 985138"];
8433 [label="Declarations.GetMergedRoot(this) 985139"];
8434 [label="param GetMergedRoot(CSharpCompilation compilation) 985140"];
8435 [label="param GetMergedRoot(this) 985141"];
8436 [label="compilation.Declarations 985142"];
8437 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 985143"];
8438 [label="Debug.Assert(compilation.Declarations == this); 985144"];
8439 [label="Debug.Assert(compilation.Declarations == this); 985145"];
8440 [label="if (_mergedRoot == null)\n            {\n                Interlocked.CompareExchange(ref _mergedRoot, CalculateMergedRoot(compilation), null);\n            } 985146"];
8441 [label="if (_mergedRoot == null)\n            {\n                Interlocked.CompareExchange(ref _mergedRoot, CalculateMergedRoot(compilation), null);\n            } 985147"];
8442 [label="Interlocked.CompareExchange(ref _mergedRoot, CalculateMergedRoot(compilation), null); 985148"];
8443 [label="Interlocked.CompareExchange(ref _mergedRoot, CalculateMergedRoot(compilation), null); 985149"];
8444 [label="CalculateMergedRoot(compilation) 985150"];
8445 [label="param CalculateMergedRoot(CSharpCompilation compilation) 985151"];
8446 [label="param CalculateMergedRoot(this) 985152"];
8447 [label="var oldRoot = _cache.MergedRoot.Value; 985153"];
8448 [label="if (_latestLazyRootDeclaration == null)\n            {\n                return oldRoot;\n            }\n            else if (oldRoot == null)\n            {\n                return MergedNamespaceDeclaration.Create(_latestLazyRootDeclaration.Value);\n            }\n            else\n            {\n                var oldRootDeclarations = oldRoot.Declarations;\n                var builder = ArrayBuilder<SingleNamespaceDeclaration>.GetInstance(oldRootDeclarations.Length + 1);\n                builder.AddRange(oldRootDeclarations);\n                builder.Add(_latestLazyRootDeclaration.Value);\n                // Sort the root namespace declarations to match the order of SyntaxTrees.\n                if (compilation != null)\n                {\n                    builder.Sort(new RootNamespaceLocationComparer(compilation));\n                }\n                return MergedNamespaceDeclaration.Create(builder.ToImmutableAndFree());\n            } 985154"];
8449 [label="if (_latestLazyRootDeclaration == null)\n            {\n                return oldRoot;\n            }\n            else if (oldRoot == null)\n            {\n                return MergedNamespaceDeclaration.Create(_latestLazyRootDeclaration.Value);\n            }\n            else\n            {\n                var oldRootDeclarations = oldRoot.Declarations;\n                var builder = ArrayBuilder<SingleNamespaceDeclaration>.GetInstance(oldRootDeclarations.Length + 1);\n                builder.AddRange(oldRootDeclarations);\n                builder.Add(_latestLazyRootDeclaration.Value);\n                // Sort the root namespace declarations to match the order of SyntaxTrees.\n                if (compilation != null)\n                {\n                    builder.Sort(new RootNamespaceLocationComparer(compilation));\n                }\n                return MergedNamespaceDeclaration.Create(builder.ToImmutableAndFree());\n            } 985155"];
8450 [label="if (oldRoot == null)\n            {\n                return MergedNamespaceDeclaration.Create(_latestLazyRootDeclaration.Value);\n            }\n            else\n            {\n                var oldRootDeclarations = oldRoot.Declarations;\n                var builder = ArrayBuilder<SingleNamespaceDeclaration>.GetInstance(oldRootDeclarations.Length + 1);\n                builder.AddRange(oldRootDeclarations);\n                builder.Add(_latestLazyRootDeclaration.Value);\n                // Sort the root namespace declarations to match the order of SyntaxTrees.\n                if (compilation != null)\n                {\n                    builder.Sort(new RootNamespaceLocationComparer(compilation));\n                }\n                return MergedNamespaceDeclaration.Create(builder.ToImmutableAndFree());\n            } 985156"];
8451 [label="if (oldRoot == null)\n            {\n                return MergedNamespaceDeclaration.Create(_latestLazyRootDeclaration.Value);\n            }\n            else\n            {\n                var oldRootDeclarations = oldRoot.Declarations;\n                var builder = ArrayBuilder<SingleNamespaceDeclaration>.GetInstance(oldRootDeclarations.Length + 1);\n                builder.AddRange(oldRootDeclarations);\n                builder.Add(_latestLazyRootDeclaration.Value);\n                // Sort the root namespace declarations to match the order of SyntaxTrees.\n                if (compilation != null)\n                {\n                    builder.Sort(new RootNamespaceLocationComparer(compilation));\n                }\n                return MergedNamespaceDeclaration.Create(builder.ToImmutableAndFree());\n            } 985157"];
8452 [label="oldRoot.Declarations 985158"];
8453 [label="var oldRootDeclarations = oldRoot.Declarations; 985159"];
8454 [label="var builder = ArrayBuilder<SingleNamespaceDeclaration>.GetInstance(oldRootDeclarations.Length + 1); 985160"];
8455 [label="var builder = ArrayBuilder<SingleNamespaceDeclaration>.GetInstance(oldRootDeclarations.Length + 1); 985161"];
8456 [label="builder.AddRange(oldRootDeclarations); 985162"];
8457 [label="builder.AddRange(oldRootDeclarations); 985163"];
8458 [label="builder.Add(_latestLazyRootDeclaration.Value); 985164"];
8459 [label="if (compilation != null)\n                {\n                    builder.Sort(new RootNamespaceLocationComparer(compilation));\n                } 985165"];
8460 [label="if (compilation != null)\n                {\n                    builder.Sort(new RootNamespaceLocationComparer(compilation));\n                } 985166"];
8461 [label="builder.Sort(new RootNamespaceLocationComparer(compilation)); 985167"];
8462 [label="builder.Sort(new RootNamespaceLocationComparer(compilation)); 985168"];
8463 [label="new RootNamespaceLocationComparer(compilation) 985169"];
8464 [label="param RootNamespaceLocationComparer(CSharpCompilation compilation) 985170"];
8465 [label="param RootNamespaceLocationComparer(this) 985171"];
8466 [label="_compilation 985172"];
8467 [label="_compilation 985173"];
8468 [label="builder.Sort(new RootNamespaceLocationComparer(compilation)); 985174"];
8469 [label="return MergedNamespaceDeclaration.Create(builder.ToImmutableAndFree()); 985175"];
8470 [label="MergedNamespaceDeclaration.Create(builder.ToImmutableAndFree()) 985176"];
8471 [label="param Create(ImmutableArray<SingleNamespaceDeclaration> declarations) 985177"];
8472 [label="0 985178"];
8473 [label="declarations[0] 985179"];
8474 [label="declarations[0].Name 985180"];
8475 [label="get\n            {\n                return this.name;\n            } 985181"];
8476 [label="return this.name; 985182"];
8477 [label="name 985183"];
8478 [label="return MergedNamespaceDeclaration.Create(builder.ToImmutableAndFree()); 985184"];
8479 [label="Interlocked.CompareExchange(ref _mergedRoot, CalculateMergedRoot(compilation), null); 985185"];
8480 [label="Interlocked.CompareExchange(ref _mergedRoot, CalculateMergedRoot(compilation), null); 985186"];
8481 [label="return _mergedRoot; 985187"];
8482 [label="DeclaringCompilation.MergedRootDeclaration.Declarations 985188"];
8483 [label="get { return _declarations; } 985189"];
8484 [label="foreach (RootSingleNamespaceDeclaration rootNs in declarations)\n            {\n                if (rootNs.HasAssemblyAttributes)\n                {\n                    var tree = rootNs.Location.SourceTree;\n                    var root = (CompilationUnitSyntax)tree.GetRoot();\n                    builder.Add(root.AttributeLists);\n                }\n            } 985190"];
8485 [label="rootNs.HasAssemblyAttributes 985191"];
8486 [label="get\n            {\n                return _hasAssemblyAttributes;\n            } 985192"];
8487 [label="return _hasAssemblyAttributes; 985193"];
8488 [label="if (rootNs.HasAssemblyAttributes)\n                {\n                    var tree = rootNs.Location.SourceTree;\n                    var root = (CompilationUnitSyntax)tree.GetRoot();\n                    builder.Add(root.AttributeLists);\n                } 985194"];
8489 [label="return builder.ToImmutableAndFree(); 985195"];
8490 [label="if ((_lazySourceAttributesBag == null || !_lazySourceAttributesBag.IsSealed) &&\n                LoadAndValidateAttributes(OneOrMany.Create(GetAttributeDeclarations()), ref _lazySourceAttributesBag))\n            {\n                _state.NotePartComplete(CompletionPart.Attributes);\n            } 985196"];
8491 [label="if ((_lazySourceAttributesBag == null || !_lazySourceAttributesBag.IsSealed) &&\n                LoadAndValidateAttributes(OneOrMany.Create(GetAttributeDeclarations()), ref _lazySourceAttributesBag))\n            {\n                _state.NotePartComplete(CompletionPart.Attributes);\n            } 985197"];
8492 [label="LoadAndValidateAttributes(OneOrMany.Create(GetAttributeDeclarations()), ref _lazySourceAttributesBag) 985198"];
8493 [label="param LoadAndValidateAttributes(OneOrMany<SyntaxList<AttributeListSyntax>> attributesSyntaxLists) 985199"];
8494 [label="param LoadAndValidateAttributes(ref CustomAttributesBag<CSharpAttributeData> lazyCustomAttributesBag) 985200"];
8495 [label="param LoadAndValidateAttributes(AttributeLocation symbolPart = AttributeLocation.None) 985201"];
8496 [label="param LoadAndValidateAttributes(bool earlyDecodingOnly = false) 985202"];
8497 [label="param LoadAndValidateAttributes(Binder binderOpt = null) 985203"];
8498 [label="param LoadAndValidateAttributes(Func<AttributeSyntax, bool> attributeMatchesOpt = null) 985204"];
8499 [label="param LoadAndValidateAttributes(this) 985205"];
8500 [label="var diagnostics = DiagnosticBag.GetInstance(); 985206"];
8501 [label="this.DeclaringCompilation 985207"];
8502 [label="get\n            {\n                return _compilation;\n            } 985208"];
8503 [label="return _compilation; 985209"];
8504 [label="var compilation = this.DeclaringCompilation; 985210"];
8505 [label="ImmutableArray<Binder> binders; 985211"];
8506 [label="binders 985212"];
8507 [label="ImmutableArray<AttributeSyntax> attributesToBind = this.GetAttributesToBind(attributesSyntaxLists, symbolPart, diagnostics, compilation, attributeMatchesOpt, binderOpt, out binders); 985213"];
8508 [label="ImmutableArray<AttributeSyntax> attributesToBind = this.GetAttributesToBind(attributesSyntaxLists, symbolPart, diagnostics, compilation, attributeMatchesOpt, binderOpt, out binders); 985214"];
8509 [label="ImmutableArray<AttributeSyntax> attributesToBind = this.GetAttributesToBind(attributesSyntaxLists, symbolPart, diagnostics, compilation, attributeMatchesOpt, binderOpt, out binders); 985215"];
8510 [label="ImmutableArray<AttributeSyntax> attributesToBind = this.GetAttributesToBind(attributesSyntaxLists, symbolPart, diagnostics, compilation, attributeMatchesOpt, binderOpt, out binders); 985216"];
8511 [label="ImmutableArray<AttributeSyntax> attributesToBind = this.GetAttributesToBind(attributesSyntaxLists, symbolPart, diagnostics, compilation, attributeMatchesOpt, binderOpt, out binders); 985217"];
8512 [label="ImmutableArray<AttributeSyntax> attributesToBind = this.GetAttributesToBind(attributesSyntaxLists, symbolPart, diagnostics, compilation, attributeMatchesOpt, binderOpt, out binders); 985218"];
8513 [label="ImmutableArray<AttributeSyntax> attributesToBind = this.GetAttributesToBind(attributesSyntaxLists, symbolPart, diagnostics, compilation, attributeMatchesOpt, binderOpt, out binders); 985219"];
8514 [label="this.GetAttributesToBind(attributesSyntaxLists, symbolPart, diagnostics, compilation, attributeMatchesOpt, binderOpt, out binders) 985220"];
8515 [label="param GetAttributesToBind(OneOrMany<SyntaxList<AttributeListSyntax>> attributeDeclarationSyntaxLists) 985221"];
8516 [label="param GetAttributesToBind(AttributeLocation symbolPart) 985222"];
8517 [label="param GetAttributesToBind(DiagnosticBag diagnostics) 985223"];
8518 [label="param GetAttributesToBind(CSharpCompilation compilation) 985224"];
8519 [label="param GetAttributesToBind(Func<AttributeSyntax, bool> attributeMatchesOpt) 985225"];
8520 [label="param GetAttributesToBind(Binder rootBinderOpt) 985226"];
8521 [label="param GetAttributesToBind(out ImmutableArray<Binder> binders) 985227"];
8522 [label="param GetAttributesToBind(this) 985228"];
8523 [label="var attributeTarget = (IAttributeTargetSymbol)this; 985229"];
8524 [label="ArrayBuilder<AttributeSyntax> syntaxBuilder = null; 985230"];
8525 [label="ArrayBuilder<Binder> bindersBuilder = null; 985231"];
8526 [label="int attributesToBindCount = 0; 985232"];
8527 [label="for (int listIndex = 0; listIndex < attributeDeclarationSyntaxLists.Count; listIndex++)\n            {\n                var attributeDeclarationSyntaxList = attributeDeclarationSyntaxLists[listIndex];\n                if (attributeDeclarationSyntaxList.Any())\n                {\n                    int prevCount = attributesToBindCount;\n                    foreach (var attributeDeclarationSyntax in attributeDeclarationSyntaxList)\n                    {\n                        // We bind the attribute only if it has a matching target for the given ownerSymbol and attributeLocation.\n                        if (MatchAttributeTarget(attributeTarget, symbolPart, attributeDeclarationSyntax.Target, diagnostics))\n                        {\n                            if (syntaxBuilder == null)\n                            {\n                                syntaxBuilder = new ArrayBuilder<AttributeSyntax>();\n                                bindersBuilder = new ArrayBuilder<Binder>();\n                            }\n\n                            var attributesToBind = attributeDeclarationSyntax.Attributes;\n                            if (attributeMatchesOpt is null)\n                            {\n                                syntaxBuilder.AddRange(attributesToBind);\n                                attributesToBindCount += attributesToBind.Count;\n                            }\n                            else\n                            {\n                                foreach (var attribute in attributesToBind)\n                                {\n                                    if (attributeMatchesOpt(attribute))\n                                    {\n                                        syntaxBuilder.Add(attribute);\n                                        attributesToBindCount++;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    if (attributesToBindCount != prevCount)\n                    {\n                        Debug.Assert(attributeDeclarationSyntaxList.Node != null);\n                        Debug.Assert(bindersBuilder != null);\n\n                        var syntaxTree = attributeDeclarationSyntaxList.Node.SyntaxTree;\n                        var binder = rootBinderOpt ?? compilation.GetBinderFactory(syntaxTree).GetBinder(attributeDeclarationSyntaxList.Node);\n\n                        binder = new ContextualAttributeBinder(binder, this);\n                        Debug.Assert(!binder.InAttributeArgument, 'Possible cycle in attribute binding');\n\n                        for (int i = 0; i < attributesToBindCount - prevCount; i++)\n                        {\n                            bindersBuilder.Add(binder);\n                        }\n                    }\n                }\n            } 985233"];
8528 [label="for (int listIndex = 0; listIndex < attributeDeclarationSyntaxLists.Count; listIndex++)\n            {\n                var attributeDeclarationSyntaxList = attributeDeclarationSyntaxLists[listIndex];\n                if (attributeDeclarationSyntaxList.Any())\n                {\n                    int prevCount = attributesToBindCount;\n                    foreach (var attributeDeclarationSyntax in attributeDeclarationSyntaxList)\n                    {\n                        // We bind the attribute only if it has a matching target for the given ownerSymbol and attributeLocation.\n                        if (MatchAttributeTarget(attributeTarget, symbolPart, attributeDeclarationSyntax.Target, diagnostics))\n                        {\n                            if (syntaxBuilder == null)\n                            {\n                                syntaxBuilder = new ArrayBuilder<AttributeSyntax>();\n                                bindersBuilder = new ArrayBuilder<Binder>();\n                            }\n\n                            var attributesToBind = attributeDeclarationSyntax.Attributes;\n                            if (attributeMatchesOpt is null)\n                            {\n                                syntaxBuilder.AddRange(attributesToBind);\n                                attributesToBindCount += attributesToBind.Count;\n                            }\n                            else\n                            {\n                                foreach (var attribute in attributesToBind)\n                                {\n                                    if (attributeMatchesOpt(attribute))\n                                    {\n                                        syntaxBuilder.Add(attribute);\n                                        attributesToBindCount++;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    if (attributesToBindCount != prevCount)\n                    {\n                        Debug.Assert(attributeDeclarationSyntaxList.Node != null);\n                        Debug.Assert(bindersBuilder != null);\n\n                        var syntaxTree = attributeDeclarationSyntaxList.Node.SyntaxTree;\n                        var binder = rootBinderOpt ?? compilation.GetBinderFactory(syntaxTree).GetBinder(attributeDeclarationSyntaxList.Node);\n\n                        binder = new ContextualAttributeBinder(binder, this);\n                        Debug.Assert(!binder.InAttributeArgument, 'Possible cycle in attribute binding');\n\n                        for (int i = 0; i < attributesToBindCount - prevCount; i++)\n                        {\n                            bindersBuilder.Add(binder);\n                        }\n                    }\n                }\n            } 985234"];
8529 [label="if (syntaxBuilder != null)\n            {\n                binders = bindersBuilder.ToImmutableAndFree();\n                return syntaxBuilder.ToImmutableAndFree();\n            }\n            else\n            {\n                binders = ImmutableArray<Binder>.Empty;\n                return ImmutableArray<AttributeSyntax>.Empty;\n            } 985235"];
8530 [label="if (syntaxBuilder != null)\n            {\n                binders = bindersBuilder.ToImmutableAndFree();\n                return syntaxBuilder.ToImmutableAndFree();\n            }\n            else\n            {\n                binders = ImmutableArray<Binder>.Empty;\n                return ImmutableArray<AttributeSyntax>.Empty;\n            } 985236"];
8531 [label="binders = ImmutableArray<Binder>.Empty; 985237"];
8532 [label="return ImmutableArray<AttributeSyntax>.Empty; 985238"];
8533 [label="ImmutableArray<AttributeSyntax> attributesToBind = this.GetAttributesToBind(attributesSyntaxLists, symbolPart, diagnostics, compilation, attributeMatchesOpt, binderOpt, out binders); 985239"];
8534 [label="Debug.Assert(!attributesToBind.IsDefault); 985240"];
8535 [label="ImmutableArray<CSharpAttributeData> boundAttributes; 985241"];
8536 [label="boundAttributes 985242"];
8537 [label="WellKnownAttributeData wellKnownAttributeData; 985243"];
8538 [label="if (attributesToBind.Any())\n            {\n                Debug.Assert(!binders.IsDefault);\n                Debug.Assert(binders.Length == attributesToBind.Length);\n\n                // Initialize the bag so that data decoded from early attributes can be stored onto it.\n                if (lazyCustomAttributesBag == null)\n                {\n                    Interlocked.CompareExchange(ref lazyCustomAttributesBag, new CustomAttributesBag<CSharpAttributeData>(), null);\n                }\n\n                // Bind the attribute types and then early decode them.\n                int totalAttributesCount = attributesToBind.Length;\n                var attributeTypesBuilder = new NamedTypeSymbol[totalAttributesCount];\n\n                Binder.BindAttributeTypes(binders, attributesToBind, this, attributeTypesBuilder, diagnostics);\n                ImmutableArray<NamedTypeSymbol> boundAttributeTypes = attributeTypesBuilder.AsImmutableOrNull();\n\n                this.EarlyDecodeWellKnownAttributeTypes(boundAttributeTypes, attributesToBind);\n                this.PostEarlyDecodeWellKnownAttributeTypes();\n\n                // Bind the attribute in two stages - early and normal.\n                var attributesBuilder = new CSharpAttributeData[totalAttributesCount];\n\n                // Early bind and decode some well-known attributes.\n                EarlyWellKnownAttributeData earlyData = this.EarlyDecodeWellKnownAttributes(binders, boundAttributeTypes, attributesToBind, symbolPart, attributesBuilder);\n                Debug.Assert(!attributesBuilder.Contains((attr) => attr != null && attr.HasErrors));\n\n                // Store data decoded from early bound well-known attributes.\n                // TODO: what if this succeeds on another thread, not ours?\n                lazyCustomAttributesBag.SetEarlyDecodedWellKnownAttributeData(earlyData);\n\n                if (earlyDecodingOnly)\n                {\n                    diagnostics.Free(); //NOTE: dropped.\n                    return false;\n                }\n\n                // Bind attributes.\n                Binder.GetAttributes(binders, attributesToBind, boundAttributeTypes, attributesBuilder, diagnostics);\n                boundAttributes = attributesBuilder.AsImmutableOrNull();\n\n                // All attributes must be bound by now.\n                Debug.Assert(!boundAttributes.Any((attr) => attr == null));\n\n                // Validate attribute usage and Decode remaining well-known attributes.\n                wellKnownAttributeData = this.ValidateAttributeUsageAndDecodeWellKnownAttributes(binders, attributesToBind, boundAttributes, diagnostics, symbolPart);\n\n                // Store data decoded from remaining well-known attributes.\n                // TODO: what if this succeeds on another thread but not this thread?\n                lazyCustomAttributesBag.SetDecodedWellKnownAttributeData(wellKnownAttributeData);\n            }\n            else if (earlyDecodingOnly)\n            {\n                diagnostics.Free(); //NOTE: dropped.\n                return false;\n            }\n            else\n            {\n                boundAttributes = ImmutableArray<CSharpAttributeData>.Empty;\n                wellKnownAttributeData = null;\n                Interlocked.CompareExchange(ref lazyCustomAttributesBag, CustomAttributesBag<CSharpAttributeData>.WithEmptyData(), null);\n                this.PostEarlyDecodeWellKnownAttributeTypes();\n            } 985244"];
8539 [label="if (earlyDecodingOnly)\n            {\n                diagnostics.Free(); //NOTE: dropped.\n                return false;\n            }\n            else\n            {\n                boundAttributes = ImmutableArray<CSharpAttributeData>.Empty;\n                wellKnownAttributeData = null;\n                Interlocked.CompareExchange(ref lazyCustomAttributesBag, CustomAttributesBag<CSharpAttributeData>.WithEmptyData(), null);\n                this.PostEarlyDecodeWellKnownAttributeTypes();\n            } 985245"];
8540 [label="boundAttributes = ImmutableArray<CSharpAttributeData>.Empty; 985246"];
8541 [label="wellKnownAttributeData = null; 985247"];
8542 [label="Interlocked.CompareExchange(ref lazyCustomAttributesBag, CustomAttributesBag<CSharpAttributeData>.WithEmptyData(), null); 985248"];
8543 [label="Interlocked.CompareExchange(ref lazyCustomAttributesBag, CustomAttributesBag<CSharpAttributeData>.WithEmptyData(), null); 985249"];
8544 [label="this.PostEarlyDecodeWellKnownAttributeTypes() 985250"];
8545 [label="param PostEarlyDecodeWellKnownAttributeTypes(this) 985251"];
8546 [label="this.PostEarlyDecodeWellKnownAttributeTypes(); 985252"];
8547 [label="this.PostDecodeWellKnownAttributes(boundAttributes, attributesToBind, diagnostics, symbolPart, wellKnownAttributeData); 985253"];
8548 [label="this.PostDecodeWellKnownAttributes(boundAttributes, attributesToBind, diagnostics, symbolPart, wellKnownAttributeData); 985254"];
8549 [label="this.PostDecodeWellKnownAttributes(boundAttributes, attributesToBind, diagnostics, symbolPart, wellKnownAttributeData); 985255"];
8550 [label="this.PostDecodeWellKnownAttributes(boundAttributes, attributesToBind, diagnostics, symbolPart, wellKnownAttributeData); 985256"];
8551 [label="this.PostDecodeWellKnownAttributes(boundAttributes, attributesToBind, diagnostics, symbolPart, wellKnownAttributeData); 985257"];
8552 [label="this.PostDecodeWellKnownAttributes(boundAttributes, attributesToBind, diagnostics, symbolPart, wellKnownAttributeData) 985258"];
8553 [label="param PostDecodeWellKnownAttributes(ImmutableArray<CSharpAttributeData> boundAttributes) 985259"];
8554 [label="param PostDecodeWellKnownAttributes(ImmutableArray<AttributeSyntax> allAttributeSyntaxNodes) 985260"];
8555 [label="param PostDecodeWellKnownAttributes(DiagnosticBag diagnostics) 985261"];
8556 [label="param PostDecodeWellKnownAttributes(AttributeLocation symbolPart) 985262"];
8557 [label="param PostDecodeWellKnownAttributes(WellKnownAttributeData decodedData) 985263"];
8558 [label="param PostDecodeWellKnownAttributes(this) 985264"];
8559 [label="this.PostDecodeWellKnownAttributes(boundAttributes, attributesToBind, diagnostics, symbolPart, wellKnownAttributeData); 985265"];
8560 [label="bool lazyAttributesStoredOnThisThread = false; 985266"];
8561 [label="if (lazyCustomAttributesBag.SetAttributes(boundAttributes))\n            {\n                if (attributeMatchesOpt is null)\n                {\n                    this.RecordPresenceOfBadAttributes(boundAttributes);\n                    AddDeclarationDiagnostics(diagnostics);\n                }\n                lazyAttributesStoredOnThisThread = true;\n                if (lazyCustomAttributesBag.IsEmpty) lazyCustomAttributesBag = CustomAttributesBag<CSharpAttributeData>.Empty;\n            } 985267"];
8562 [label="if (lazyCustomAttributesBag.SetAttributes(boundAttributes))\n            {\n                if (attributeMatchesOpt is null)\n                {\n                    this.RecordPresenceOfBadAttributes(boundAttributes);\n                    AddDeclarationDiagnostics(diagnostics);\n                }\n                lazyAttributesStoredOnThisThread = true;\n                if (lazyCustomAttributesBag.IsEmpty) lazyCustomAttributesBag = CustomAttributesBag<CSharpAttributeData>.Empty;\n            } 985268"];
8563 [label="if (attributeMatchesOpt is null)\n                {\n                    this.RecordPresenceOfBadAttributes(boundAttributes);\n                    AddDeclarationDiagnostics(diagnostics);\n                } 985269"];
8564 [label="this.RecordPresenceOfBadAttributes(boundAttributes); 985270"];
8565 [label="this.RecordPresenceOfBadAttributes(boundAttributes) 985271"];
8566 [label="param RecordPresenceOfBadAttributes(ImmutableArray<CSharpAttributeData> boundAttributes) 985272"];
8567 [label="param RecordPresenceOfBadAttributes(this) 985273"];
8568 [label="foreach (var attribute in boundAttributes)\n            {\n                if (attribute.HasErrors)\n                {\n                    CSharpCompilation compilation = this.DeclaringCompilation;\n                    Debug.Assert(compilation != null);\n                    ((SourceModuleSymbol)compilation.SourceModule).RecordPresenceOfBadAttributes();\n                    break;\n                }\n            } 985274"];
8569 [label="this.RecordPresenceOfBadAttributes(boundAttributes); 985275"];
8570 [label="AddDeclarationDiagnostics(diagnostics); 985276"];
8571 [label="AddDeclarationDiagnostics(diagnostics) 985277"];
8572 [label="param AddDeclarationDiagnostics(DiagnosticBag diagnostics) 985278"];
8573 [label="param AddDeclarationDiagnostics(this) 985279"];
8574 [label="ContainingSymbol 985280"];
8575 [label="get\n            {\n                return null;\n            } 985281"];
8576 [label="return null; 985282"];
8577 [label="if (ContainingSymbol is SourceMemberContainerTypeSymbol container)\n            {\n                container.AssertMemberExposure(this, forDiagnostics: true);\n            } 985283"];
8578 [label="if (!diagnostics.IsEmptyWithoutResolution)\n            {\n                CSharpCompilation compilation = this.DeclaringCompilation;\n                Debug.Assert(compilation != null);\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n            } 985284"];
8579 [label="AddDeclarationDiagnostics(diagnostics); 985285"];
8580 [label="lazyAttributesStoredOnThisThread = true; 985286"];
8581 [label="if (lazyCustomAttributesBag.IsEmpty) lazyCustomAttributesBag = CustomAttributesBag<CSharpAttributeData>.Empty; 985287"];
8582 [label="lazyCustomAttributesBag = CustomAttributesBag<CSharpAttributeData>.Empty; 985288"];
8583 [label="Debug.Assert(lazyCustomAttributesBag.IsSealed); 985289"];
8584 [label="diagnostics.Free(); 985290"];
8585 [label="return lazyAttributesStoredOnThisThread; 985291"];
8586 [label="_state.NotePartComplete(CompletionPart.Attributes); 985292"];
8587 [label="_state.NotePartComplete(CompletionPart.Attributes) 985293"];
8588 [label="param NotePartComplete(CompletionPart part) 985294"];
8589 [label="param NotePartComplete(this) 985295"];
8590 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 985296"];
8591 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 985297"];
8592 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 985298"];
8593 [label="EnsureAttributesAreBound(); 985299"];
8594 [label="return _lazySourceAttributesBag; 985300"];
8595 [label="attributesBag = this.GetSourceAttributesBag(); 985301"];
8596 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 985302"];
8597 [label="var data = GetSourceDecodedWellKnownAttributeData(); 985303"];
8598 [label="if (data != null)\n                {\n                    fieldValue = data.AssemblyDelaySignAttributeSetting;\n                } 985304"];
8599 [label="if (data != null)\n                {\n                    fieldValue = data.AssemblyDelaySignAttributeSetting;\n                } 985305"];
8600 [label="if (fieldValue == defaultValue)\n                {\n                    data = GetNetModuleDecodedWellKnownAttributeData();\n                    if (data != null)\n                    {\n                        fieldValue = data.AssemblyDelaySignAttributeSetting;\n                    }\n                } 985306"];
8601 [label="GetNetModuleDecodedWellKnownAttributeData() 985307"];
8602 [label="param GetNetModuleDecodedWellKnownAttributeData(this) 985308"];
8603 [label="this.GetNetModuleAttributesBag() 985309"];
8604 [label="param GetNetModuleAttributesBag(this) 985310"];
8605 [label="EnsureNetModuleAttributesAreBound() 985311"];
8606 [label="param EnsureNetModuleAttributesAreBound(this) 985312"];
8607 [label="if (_lazyNetModuleAttributesBag == null)\n            {\n                LoadAndValidateNetModuleAttributes(ref _lazyNetModuleAttributesBag);\n            } 985313"];
8608 [label="if (_lazyNetModuleAttributesBag == null)\n            {\n                LoadAndValidateNetModuleAttributes(ref _lazyNetModuleAttributesBag);\n            } 985314"];
8609 [label="LoadAndValidateNetModuleAttributes(ref _lazyNetModuleAttributesBag); 985315"];
8610 [label="LoadAndValidateNetModuleAttributes(ref _lazyNetModuleAttributesBag) 985316"];
8611 [label="param LoadAndValidateNetModuleAttributes(ref CustomAttributesBag<CSharpAttributeData> lazyNetModuleAttributesBag) 985317"];
8612 [label="param LoadAndValidateNetModuleAttributes(this) 985318"];
8613 [label="_compilation.Options 985319"];
8614 [label="get\n            {\n                return _options;\n            } 985320"];
8615 [label="if (_compilation.Options.OutputKind.IsNetModule())\n            {\n                Interlocked.CompareExchange(ref lazyNetModuleAttributesBag, CustomAttributesBag<CSharpAttributeData>.Empty, null);\n            }\n            else\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n\n                ImmutableArray<string> netModuleNames;\n                ImmutableArray<CSharpAttributeData> attributesFromNetModules = GetNetModuleAttributes(out netModuleNames);\n\n                WellKnownAttributeData wellKnownData = null;\n\n                if (attributesFromNetModules.Any())\n                {\n                    wellKnownData = ValidateAttributeUsageAndDecodeWellKnownAttributes(attributesFromNetModules, netModuleNames, diagnostics);\n                }\n                else\n                {\n                    // Compute duplicate source assembly attributes, i.e. attributes with same constructor and arguments, that must not be emitted.\n                    var unused = GetUniqueSourceAssemblyAttributes();\n                }\n\n                // Load type forwarders from modules\n                HashSet<NamedTypeSymbol> forwardedTypes = null;\n\n                // Similar to attributes, type forwarders from the second added module should override type forwarders from the first added module, etc. \n                // This affects only diagnostics.\n                for (int i = _modules.Length - 1; i > 0; i--)\n                {\n                    var peModuleSymbol = (Metadata.PE.PEModuleSymbol)_modules[i];\n\n                    foreach (NamedTypeSymbol forwarded in peModuleSymbol.GetForwardedTypes())\n                    {\n                        if (forwardedTypes == null)\n                        {\n                            if (wellKnownData == null)\n                            {\n                                wellKnownData = new CommonAssemblyWellKnownAttributeData();\n                            }\n\n                            forwardedTypes = ((CommonAssemblyWellKnownAttributeData)wellKnownData).ForwardedTypes;\n                            if (forwardedTypes == null)\n                            {\n                                forwardedTypes = new HashSet<NamedTypeSymbol>();\n                                ((CommonAssemblyWellKnownAttributeData)wellKnownData).ForwardedTypes = forwardedTypes;\n                            }\n                        }\n\n                        if (forwardedTypes.Add(forwarded))\n                        {\n                            if (forwarded.IsErrorType())\n                            {\n                                DiagnosticInfo info = forwarded.GetUseSiteDiagnostic() ?? ((ErrorTypeSymbol)forwarded).ErrorInfo;\n\n                                if ((object)info != null)\n                                {\n                                    diagnostics.Add(info, NoLocation.Singleton);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                CustomAttributesBag<CSharpAttributeData> netModuleAttributesBag;\n\n                if (wellKnownData != null || attributesFromNetModules.Any())\n                {\n                    netModuleAttributesBag = new CustomAttributesBag<CSharpAttributeData>();\n\n                    netModuleAttributesBag.SetEarlyDecodedWellKnownAttributeData(null);\n                    netModuleAttributesBag.SetDecodedWellKnownAttributeData(wellKnownData);\n                    netModuleAttributesBag.SetAttributes(attributesFromNetModules);\n                    if (netModuleAttributesBag.IsEmpty) netModuleAttributesBag = CustomAttributesBag<CSharpAttributeData>.Empty;\n                }\n                else\n                {\n                    netModuleAttributesBag = CustomAttributesBag<CSharpAttributeData>.Empty;\n                }\n\n                if (Interlocked.CompareExchange(ref lazyNetModuleAttributesBag, netModuleAttributesBag, null) == null)\n                {\n                    this.AddDeclarationDiagnostics(diagnostics);\n                }\n\n                diagnostics.Free();\n            } 985321"];
8616 [label="var diagnostics = DiagnosticBag.GetInstance(); 985322"];
8617 [label="ImmutableArray<string> netModuleNames; 985323"];
8618 [label="netModuleNames 985324"];
8619 [label="ImmutableArray<CSharpAttributeData> attributesFromNetModules = GetNetModuleAttributes(out netModuleNames); 985325"];
8620 [label="GetNetModuleAttributes(out netModuleNames) 985326"];
8621 [label="param GetNetModuleAttributes(out ImmutableArray<string> netModuleNames) 985327"];
8622 [label="param GetNetModuleAttributes(this) 985328"];
8623 [label="ArrayBuilder<CSharpAttributeData> moduleAssemblyAttributesBuilder = null; 985329"];
8624 [label="ArrayBuilder<string> netModuleNameBuilder = null; 985330"];
8625 [label="for (int i = 1; i < _modules.Length; i++)\n            {\n                var peModuleSymbol = (Metadata.PE.PEModuleSymbol)_modules[i];\n                string netModuleName = peModuleSymbol.Name;\n                foreach (var attributeData in peModuleSymbol.GetAssemblyAttributes())\n                {\n                    if (netModuleNameBuilder == null)\n                    {\n                        netModuleNameBuilder = ArrayBuilder<string>.GetInstance();\n                        moduleAssemblyAttributesBuilder = ArrayBuilder<CSharpAttributeData>.GetInstance();\n                    }\n\n                    netModuleNameBuilder.Add(netModuleName);\n                    moduleAssemblyAttributesBuilder.Add(attributeData);\n                }\n            } 985331"];
8626 [label="for (int i = 1; i < _modules.Length; i++)\n            {\n                var peModuleSymbol = (Metadata.PE.PEModuleSymbol)_modules[i];\n                string netModuleName = peModuleSymbol.Name;\n                foreach (var attributeData in peModuleSymbol.GetAssemblyAttributes())\n                {\n                    if (netModuleNameBuilder == null)\n                    {\n                        netModuleNameBuilder = ArrayBuilder<string>.GetInstance();\n                        moduleAssemblyAttributesBuilder = ArrayBuilder<CSharpAttributeData>.GetInstance();\n                    }\n\n                    netModuleNameBuilder.Add(netModuleName);\n                    moduleAssemblyAttributesBuilder.Add(attributeData);\n                }\n            } 985332"];
8627 [label="var peModuleSymbol = (Metadata.PE.PEModuleSymbol)_modules[i]; 985333"];
8628 [label="peModuleSymbol.Name 985334"];
8629 [label="get\n            {\n                return _module.Name;\n            } 985335"];
8630 [label="return _module.Name; 985336"];
8631 [label="string netModuleName = peModuleSymbol.Name; 985337"];
8632 [label="peModuleSymbol.GetAssemblyAttributes() 985338"];
8633 [label="param GetAssemblyAttributes(this) 985339"];
8634 [label="if (_lazyAssemblyAttributes.IsDefault)\n            {\n                ArrayBuilder<CSharpAttributeData> moduleAssemblyAttributesBuilder = null;\n\n                string corlibName = ContainingAssembly.CorLibrary.Name;\n                EntityHandle assemblyMSCorLib = Module.GetAssemblyRef(corlibName);\n                if (!assemblyMSCorLib.IsNil)\n                {\n                    foreach (var qualifier in Cci.MetadataWriter.dummyAssemblyAttributeParentQualifier)\n                    {\n                        EntityHandle typerefAssemblyAttributesGoHere =\n                                    Module.GetTypeRef(\n                                        assemblyMSCorLib,\n                                        Cci.MetadataWriter.dummyAssemblyAttributeParentNamespace,\n                                        Cci.MetadataWriter.dummyAssemblyAttributeParentName + qualifier);\n\n                        if (!typerefAssemblyAttributesGoHere.IsNil)\n                        {\n                            try\n                            {\n                                foreach (var customAttributeHandle in Module.GetCustomAttributesOrThrow(typerefAssemblyAttributesGoHere))\n                                {\n                                    if (moduleAssemblyAttributesBuilder == null)\n                                    {\n                                        moduleAssemblyAttributesBuilder = new ArrayBuilder<CSharpAttributeData>();\n                                    }\n                                    moduleAssemblyAttributesBuilder.Add(new PEAttributeData(this, customAttributeHandle));\n                                }\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                }\n\n                ImmutableInterlocked.InterlockedCompareExchange(\n                    ref _lazyAssemblyAttributes,\n                    (moduleAssemblyAttributesBuilder != null) ? moduleAssemblyAttributesBuilder.ToImmutableAndFree() : ImmutableArray<CSharpAttributeData>.Empty,\n                    default(ImmutableArray<CSharpAttributeData>));\n            } 985340"];
8635 [label="ArrayBuilder<CSharpAttributeData> moduleAssemblyAttributesBuilder = null; 985341"];
8636 [label="ContainingAssembly 985342"];
8637 [label="get\n            {\n                return _assemblySymbol;\n            } 985343"];
8638 [label="return _assemblySymbol; 985344"];
8639 [label="string corlibName = ContainingAssembly.CorLibrary.Name; 985345"];
8640 [label="ContainingAssembly.CorLibrary 985346"];
8641 [label="get\n            {\n                return _corLibrary;\n            } 985347"];
8642 [label="return _corLibrary; 985348"];
8643 [label="ContainingAssembly.CorLibrary.Name 985349"];
8644 [label="get\n            {\n                return Identity.Name;\n            } 985350"];
8645 [label="Identity 985351"];
8646 [label="get\n            {\n                return identity;\n            } 985352"];
8647 [label="return identity; 985353"];
8648 [label="return Identity.Name; 985354"];
8649 [label="Module 985355"];
8650 [label="get\n            {\n                return _module;\n            } 985356"];
8651 [label="return _module; 985357"];
8652 [label="EntityHandle assemblyMSCorLib = Module.GetAssemblyRef(corlibName); 985358"];
8653 [label="EntityHandle assemblyMSCorLib = Module.GetAssemblyRef(corlibName); 985359"];
8654 [label="EntityHandle assemblyMSCorLib = Module.GetAssemblyRef(corlibName); 985360"];
8655 [label="if (!assemblyMSCorLib.IsNil)\n                {\n                    foreach (var qualifier in Cci.MetadataWriter.dummyAssemblyAttributeParentQualifier)\n                    {\n                        EntityHandle typerefAssemblyAttributesGoHere =\n                                    Module.GetTypeRef(\n                                        assemblyMSCorLib,\n                                        Cci.MetadataWriter.dummyAssemblyAttributeParentNamespace,\n                                        Cci.MetadataWriter.dummyAssemblyAttributeParentName + qualifier);\n\n                        if (!typerefAssemblyAttributesGoHere.IsNil)\n                        {\n                            try\n                            {\n                                foreach (var customAttributeHandle in Module.GetCustomAttributesOrThrow(typerefAssemblyAttributesGoHere))\n                                {\n                                    if (moduleAssemblyAttributesBuilder == null)\n                                    {\n                                        moduleAssemblyAttributesBuilder = new ArrayBuilder<CSharpAttributeData>();\n                                    }\n                                    moduleAssemblyAttributesBuilder.Add(new PEAttributeData(this, customAttributeHandle));\n                                }\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                } 985361"];
8656 [label="ImmutableInterlocked.InterlockedCompareExchange(\n                    ref _lazyAssemblyAttributes,\n                    (moduleAssemblyAttributesBuilder != null) ? moduleAssemblyAttributesBuilder.ToImmutableAndFree() : ImmutableArray<CSharpAttributeData>.Empty,\n                    default(ImmutableArray<CSharpAttributeData>)); 985362"];
8657 [label="ImmutableInterlocked.InterlockedCompareExchange(\n                    ref _lazyAssemblyAttributes,\n                    (moduleAssemblyAttributesBuilder != null) ? moduleAssemblyAttributesBuilder.ToImmutableAndFree() : ImmutableArray<CSharpAttributeData>.Empty,\n                    default(ImmutableArray<CSharpAttributeData>)); 985363"];
8658 [label="ImmutableInterlocked.InterlockedCompareExchange(\n                    ref _lazyAssemblyAttributes,\n                    (moduleAssemblyAttributesBuilder != null) ? moduleAssemblyAttributesBuilder.ToImmutableAndFree() : ImmutableArray<CSharpAttributeData>.Empty,\n                    default(ImmutableArray<CSharpAttributeData>)); 985364"];
8659 [label="(moduleAssemblyAttributesBuilder != null) 985365"];
8660 [label="ImmutableInterlocked.InterlockedCompareExchange(\n                    ref _lazyAssemblyAttributes,\n                    (moduleAssemblyAttributesBuilder != null) ? moduleAssemblyAttributesBuilder.ToImmutableAndFree() : ImmutableArray<CSharpAttributeData>.Empty,\n                    default(ImmutableArray<CSharpAttributeData>)); 985366"];
8661 [label="return _lazyAssemblyAttributes; 985367"];
8662 [label="foreach (var attributeData in peModuleSymbol.GetAssemblyAttributes())\n                {\n                    if (netModuleNameBuilder == null)\n                    {\n                        netModuleNameBuilder = ArrayBuilder<string>.GetInstance();\n                        moduleAssemblyAttributesBuilder = ArrayBuilder<CSharpAttributeData>.GetInstance();\n                    }\n\n                    netModuleNameBuilder.Add(netModuleName);\n                    moduleAssemblyAttributesBuilder.Add(attributeData);\n                } 985368"];
8663 [label="if (netModuleNameBuilder == null)\n            {\n                netModuleNames = ImmutableArray<string>.Empty;\n                return ImmutableArray<CSharpAttributeData>.Empty;\n            } 985369"];
8664 [label="if (netModuleNameBuilder == null)\n            {\n                netModuleNames = ImmutableArray<string>.Empty;\n                return ImmutableArray<CSharpAttributeData>.Empty;\n            } 985370"];
8665 [label="netModuleNames = ImmutableArray<string>.Empty; 985371"];
8666 [label="return ImmutableArray<CSharpAttributeData>.Empty; 985372"];
8667 [label="ImmutableArray<CSharpAttributeData> attributesFromNetModules = GetNetModuleAttributes(out netModuleNames); 985373"];
8668 [label="WellKnownAttributeData wellKnownData = null; 985374"];
8669 [label="if (attributesFromNetModules.Any())\n                {\n                    wellKnownData = ValidateAttributeUsageAndDecodeWellKnownAttributes(attributesFromNetModules, netModuleNames, diagnostics);\n                }\n                else\n                {\n                    // Compute duplicate source assembly attributes, i.e. attributes with same constructor and arguments, that must not be emitted.\n                    var unused = GetUniqueSourceAssemblyAttributes();\n                } 985375"];
8670 [label="GetUniqueSourceAssemblyAttributes() 985376"];
8671 [label="param GetUniqueSourceAssemblyAttributes(this) 985377"];
8672 [label="this.GetSourceAttributesBag() 985378"];
8673 [label="param GetSourceAttributesBag(this) 985379"];
8674 [label="if ((_lazySourceAttributesBag == null || !_lazySourceAttributesBag.IsSealed) &&\n                LoadAndValidateAttributes(OneOrMany.Create(GetAttributeDeclarations()), ref _lazySourceAttributesBag))\n            {\n                _state.NotePartComplete(CompletionPart.Attributes);\n            } 985380"];
8675 [label="EnsureAttributesAreBound(); 985381"];
8676 [label="return _lazySourceAttributesBag; 985382"];
8677 [label="ImmutableArray<CSharpAttributeData> appliedSourceAttributes = this.GetSourceAttributesBag().Attributes; 985383"];
8678 [label="HashSet<CSharpAttributeData> uniqueAttributes = null; 985384"];
8679 [label="for (int i = 0; i < appliedSourceAttributes.Length; i++)\n            {\n                CSharpAttributeData attribute = appliedSourceAttributes[i];\n                if (!attribute.HasErrors)\n                {\n                    if (!AddUniqueAssemblyAttribute(attribute, ref uniqueAttributes))\n                    {\n                        AddOmittedAttributeIndex(i);\n                    }\n                }\n            } 985385"];
8680 [label="for (int i = 0; i < appliedSourceAttributes.Length; i++)\n            {\n                CSharpAttributeData attribute = appliedSourceAttributes[i];\n                if (!attribute.HasErrors)\n                {\n                    if (!AddUniqueAssemblyAttribute(attribute, ref uniqueAttributes))\n                    {\n                        AddOmittedAttributeIndex(i);\n                    }\n                }\n            } 985386"];
8681 [label="return uniqueAttributes; 985387"];
8682 [label="var unused = GetUniqueSourceAssemblyAttributes(); 985388"];
8683 [label="HashSet<NamedTypeSymbol> forwardedTypes = null; 985389"];
8684 [label="for (int i = _modules.Length - 1; i > 0; i--)\n                {\n                    var peModuleSymbol = (Metadata.PE.PEModuleSymbol)_modules[i];\n\n                    foreach (NamedTypeSymbol forwarded in peModuleSymbol.GetForwardedTypes())\n                    {\n                        if (forwardedTypes == null)\n                        {\n                            if (wellKnownData == null)\n                            {\n                                wellKnownData = new CommonAssemblyWellKnownAttributeData();\n                            }\n\n                            forwardedTypes = ((CommonAssemblyWellKnownAttributeData)wellKnownData).ForwardedTypes;\n                            if (forwardedTypes == null)\n                            {\n                                forwardedTypes = new HashSet<NamedTypeSymbol>();\n                                ((CommonAssemblyWellKnownAttributeData)wellKnownData).ForwardedTypes = forwardedTypes;\n                            }\n                        }\n\n                        if (forwardedTypes.Add(forwarded))\n                        {\n                            if (forwarded.IsErrorType())\n                            {\n                                DiagnosticInfo info = forwarded.GetUseSiteDiagnostic() ?? ((ErrorTypeSymbol)forwarded).ErrorInfo;\n\n                                if ((object)info != null)\n                                {\n                                    diagnostics.Add(info, NoLocation.Singleton);\n                                }\n                            }\n                        }\n                    }\n                } 985390"];
8685 [label="for (int i = _modules.Length - 1; i > 0; i--)\n                {\n                    var peModuleSymbol = (Metadata.PE.PEModuleSymbol)_modules[i];\n\n                    foreach (NamedTypeSymbol forwarded in peModuleSymbol.GetForwardedTypes())\n                    {\n                        if (forwardedTypes == null)\n                        {\n                            if (wellKnownData == null)\n                            {\n                                wellKnownData = new CommonAssemblyWellKnownAttributeData();\n                            }\n\n                            forwardedTypes = ((CommonAssemblyWellKnownAttributeData)wellKnownData).ForwardedTypes;\n                            if (forwardedTypes == null)\n                            {\n                                forwardedTypes = new HashSet<NamedTypeSymbol>();\n                                ((CommonAssemblyWellKnownAttributeData)wellKnownData).ForwardedTypes = forwardedTypes;\n                            }\n                        }\n\n                        if (forwardedTypes.Add(forwarded))\n                        {\n                            if (forwarded.IsErrorType())\n                            {\n                                DiagnosticInfo info = forwarded.GetUseSiteDiagnostic() ?? ((ErrorTypeSymbol)forwarded).ErrorInfo;\n\n                                if ((object)info != null)\n                                {\n                                    diagnostics.Add(info, NoLocation.Singleton);\n                                }\n                            }\n                        }\n                    }\n                } 985391"];
8686 [label="var peModuleSymbol = (Metadata.PE.PEModuleSymbol)_modules[i]; 985392"];
8687 [label="peModuleSymbol.GetForwardedTypes() 985393"];
8688 [label="param GetForwardedTypes(this) 985394"];
8689 [label="Module 985395"];
8690 [label="get\n            {\n                return _module;\n            } 985396"];
8691 [label="foreach (KeyValuePair<string, (int FirstIndex, int SecondIndex)> forwarder in Module.GetForwardedTypes())\n            {\n                var name = MetadataTypeName.FromFullName(forwarder.Key);\n\n                Debug.Assert(forwarder.Value.FirstIndex >= 0, 'First index should never be negative');\n                AssemblySymbol firstSymbol = this.GetReferencedAssemblySymbol(forwarder.Value.FirstIndex);\n                Debug.Assert((object)firstSymbol != null, 'Invalid indexes (out of bound) are discarded during reading metadata in PEModule.EnsureForwardTypeToAssemblyMap()');\n\n                if (forwarder.Value.SecondIndex >= 0)\n                {\n                    var secondSymbol = this.GetReferencedAssemblySymbol(forwarder.Value.SecondIndex);\n                    Debug.Assert((object)secondSymbol != null, 'Invalid indexes (out of bound) are discarded during reading metadata in PEModule.EnsureForwardTypeToAssemblyMap()');\n\n                    yield return ContainingAssembly.CreateMultipleForwardingErrorTypeSymbol(ref name, this, firstSymbol, secondSymbol);\n                }\n                else\n                {\n                    yield return firstSymbol.LookupTopLevelMetadataType(ref name, digThroughForwardedTypes: true);\n                }\n            } 985397"];
8692 [label="param GetForwardedTypes(this) 985398"];
8693 [label="foreach (NamedTypeSymbol forwarded in peModuleSymbol.GetForwardedTypes())\n                    {\n                        if (forwardedTypes == null)\n                        {\n                            if (wellKnownData == null)\n                            {\n                                wellKnownData = new CommonAssemblyWellKnownAttributeData();\n                            }\n\n                            forwardedTypes = ((CommonAssemblyWellKnownAttributeData)wellKnownData).ForwardedTypes;\n                            if (forwardedTypes == null)\n                            {\n                                forwardedTypes = new HashSet<NamedTypeSymbol>();\n                                ((CommonAssemblyWellKnownAttributeData)wellKnownData).ForwardedTypes = forwardedTypes;\n                            }\n                        }\n\n                        if (forwardedTypes.Add(forwarded))\n                        {\n                            if (forwarded.IsErrorType())\n                            {\n                                DiagnosticInfo info = forwarded.GetUseSiteDiagnostic() ?? ((ErrorTypeSymbol)forwarded).ErrorInfo;\n\n                                if ((object)info != null)\n                                {\n                                    diagnostics.Add(info, NoLocation.Singleton);\n                                }\n                            }\n                        }\n                    } 985399"];
8694 [label="CustomAttributesBag<CSharpAttributeData> netModuleAttributesBag; 985400"];
8695 [label="if (wellKnownData != null || attributesFromNetModules.Any())\n                {\n                    netModuleAttributesBag = new CustomAttributesBag<CSharpAttributeData>();\n\n                    netModuleAttributesBag.SetEarlyDecodedWellKnownAttributeData(null);\n                    netModuleAttributesBag.SetDecodedWellKnownAttributeData(wellKnownData);\n                    netModuleAttributesBag.SetAttributes(attributesFromNetModules);\n                    if (netModuleAttributesBag.IsEmpty) netModuleAttributesBag = CustomAttributesBag<CSharpAttributeData>.Empty;\n                }\n                else\n                {\n                    netModuleAttributesBag = CustomAttributesBag<CSharpAttributeData>.Empty;\n                } 985401"];
8696 [label="if (wellKnownData != null || attributesFromNetModules.Any())\n                {\n                    netModuleAttributesBag = new CustomAttributesBag<CSharpAttributeData>();\n\n                    netModuleAttributesBag.SetEarlyDecodedWellKnownAttributeData(null);\n                    netModuleAttributesBag.SetDecodedWellKnownAttributeData(wellKnownData);\n                    netModuleAttributesBag.SetAttributes(attributesFromNetModules);\n                    if (netModuleAttributesBag.IsEmpty) netModuleAttributesBag = CustomAttributesBag<CSharpAttributeData>.Empty;\n                }\n                else\n                {\n                    netModuleAttributesBag = CustomAttributesBag<CSharpAttributeData>.Empty;\n                } 985402"];
8697 [label="if (wellKnownData != null || attributesFromNetModules.Any())\n                {\n                    netModuleAttributesBag = new CustomAttributesBag<CSharpAttributeData>();\n\n                    netModuleAttributesBag.SetEarlyDecodedWellKnownAttributeData(null);\n                    netModuleAttributesBag.SetDecodedWellKnownAttributeData(wellKnownData);\n                    netModuleAttributesBag.SetAttributes(attributesFromNetModules);\n                    if (netModuleAttributesBag.IsEmpty) netModuleAttributesBag = CustomAttributesBag<CSharpAttributeData>.Empty;\n                }\n                else\n                {\n                    netModuleAttributesBag = CustomAttributesBag<CSharpAttributeData>.Empty;\n                } 985403"];
8698 [label="if (wellKnownData != null || attributesFromNetModules.Any())\n                {\n                    netModuleAttributesBag = new CustomAttributesBag<CSharpAttributeData>();\n\n                    netModuleAttributesBag.SetEarlyDecodedWellKnownAttributeData(null);\n                    netModuleAttributesBag.SetDecodedWellKnownAttributeData(wellKnownData);\n                    netModuleAttributesBag.SetAttributes(attributesFromNetModules);\n                    if (netModuleAttributesBag.IsEmpty) netModuleAttributesBag = CustomAttributesBag<CSharpAttributeData>.Empty;\n                }\n                else\n                {\n                    netModuleAttributesBag = CustomAttributesBag<CSharpAttributeData>.Empty;\n                } 985404"];
8699 [label="netModuleAttributesBag = CustomAttributesBag<CSharpAttributeData>.Empty; 985405"];
8700 [label="if (Interlocked.CompareExchange(ref lazyNetModuleAttributesBag, netModuleAttributesBag, null) == null)\n                {\n                    this.AddDeclarationDiagnostics(diagnostics);\n                } 985406"];
8701 [label="if (Interlocked.CompareExchange(ref lazyNetModuleAttributesBag, netModuleAttributesBag, null) == null)\n                {\n                    this.AddDeclarationDiagnostics(diagnostics);\n                } 985407"];
8702 [label="if (Interlocked.CompareExchange(ref lazyNetModuleAttributesBag, netModuleAttributesBag, null) == null)\n                {\n                    this.AddDeclarationDiagnostics(diagnostics);\n                } 985408"];
8703 [label="if (Interlocked.CompareExchange(ref lazyNetModuleAttributesBag, netModuleAttributesBag, null) == null)\n                {\n                    this.AddDeclarationDiagnostics(diagnostics);\n                } 985409"];
8704 [label="this.AddDeclarationDiagnostics(diagnostics); 985410"];
8705 [label="this.AddDeclarationDiagnostics(diagnostics) 985411"];
8706 [label="param AddDeclarationDiagnostics(DiagnosticBag diagnostics) 985412"];
8707 [label="param AddDeclarationDiagnostics(this) 985413"];
8708 [label="ContainingSymbol 985414"];
8709 [label="get\n            {\n                return null;\n            } 985415"];
8710 [label="return null; 985416"];
8711 [label="if (ContainingSymbol is SourceMemberContainerTypeSymbol container)\n            {\n                container.AssertMemberExposure(this, forDiagnostics: true);\n            } 985417"];
8712 [label="if (!diagnostics.IsEmptyWithoutResolution)\n            {\n                CSharpCompilation compilation = this.DeclaringCompilation;\n                Debug.Assert(compilation != null);\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n            } 985418"];
8713 [label="this.AddDeclarationDiagnostics(diagnostics); 985419"];
8714 [label="diagnostics.Free(); 985420"];
8715 [label="Debug.Assert(lazyNetModuleAttributesBag.IsSealed); 985421"];
8716 [label="LoadAndValidateNetModuleAttributes(ref _lazyNetModuleAttributesBag); 985422"];
8717 [label="EnsureNetModuleAttributesAreBound(); 985423"];
8718 [label="return _lazyNetModuleAttributesBag; 985424"];
8719 [label="var attributesBag = this.GetNetModuleAttributesBag(); 985425"];
8720 [label="Debug.Assert(attributesBag.IsSealed); 985426"];
8721 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 985427"];
8722 [label="data = GetNetModuleDecodedWellKnownAttributeData(); 985428"];
8723 [label="if (data != null)\n                    {\n                        fieldValue = data.AssemblyDelaySignAttributeSetting;\n                    } 985429"];
8724 [label="if (data != null)\n                    {\n                        fieldValue = data.AssemblyDelaySignAttributeSetting;\n                    } 985430"];
8725 [label="return fieldValue; 985431"];
8726 [label="return (this.AssemblyDelaySignAttributeSetting == ThreeState.True); 985432"];
8727 [label="return SourceAssembly.IsDelaySigned; 985433"];
8728 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 985434"];
8729 [label="get { return SourceAssembly.StrongNameKeys; } 985435"];
8730 [label="SourceAssembly 985436"];
8731 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 985437"];
8732 [label="GetBoundReferenceManager() 985438"];
8733 [label="param GetBoundReferenceManager(this) 985439"];
8734 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 985440"];
8735 [label="return _referenceManager; 985441"];
8736 [label="GetBoundReferenceManager(); 985442"];
8737 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 985443"];
8738 [label="return SourceAssembly.StrongNameKeys; 985444"];
8739 [label="SourceAssembly.StrongNameKeys 985445"];
8740 [label="get\n            {\n                if (_lazyStrongNameKeys == null)\n                {\n                    try\n                    {\n                        t_assemblyForWhichCurrentThreadIsComputingKeys = this;\n                        Interlocked.CompareExchange(ref _lazyStrongNameKeys, ComputeStrongNameKeys(), null);\n                    }\n                    finally\n                    {\n                        t_assemblyForWhichCurrentThreadIsComputingKeys = null;\n                    }\n                }\n\n                return _lazyStrongNameKeys;\n            } 985446"];
8741 [label="if (_lazyStrongNameKeys == null)\n                {\n                    try\n                    {\n                        t_assemblyForWhichCurrentThreadIsComputingKeys = this;\n                        Interlocked.CompareExchange(ref _lazyStrongNameKeys, ComputeStrongNameKeys(), null);\n                    }\n                    finally\n                    {\n                        t_assemblyForWhichCurrentThreadIsComputingKeys = null;\n                    }\n                } 985447"];
8742 [label="if (_lazyStrongNameKeys == null)\n                {\n                    try\n                    {\n                        t_assemblyForWhichCurrentThreadIsComputingKeys = this;\n                        Interlocked.CompareExchange(ref _lazyStrongNameKeys, ComputeStrongNameKeys(), null);\n                    }\n                    finally\n                    {\n                        t_assemblyForWhichCurrentThreadIsComputingKeys = null;\n                    }\n                } 985448"];
8743 [label="t_assemblyForWhichCurrentThreadIsComputingKeys = this; 985449"];
8744 [label="Interlocked.CompareExchange(ref _lazyStrongNameKeys, ComputeStrongNameKeys(), null); 985450"];
8745 [label="ComputeStrongNameKeys() 985451"];
8746 [label="param ComputeStrongNameKeys(this) 985452"];
8747 [label="EnsureAttributesAreBound() 985453"];
8748 [label="param EnsureAttributesAreBound(this) 985454"];
8749 [label="EnsureAttributesAreBound(); 985455"];
8750 [label="_compilation.Options 985456"];
8751 [label="get\n            {\n                return _options;\n            } 985457"];
8752 [label="string keyFile = _compilation.Options.CryptoKeyFile; 985458"];
8753 [label="DeclaringCompilation 985459"];
8754 [label="get\n            {\n                return _compilation;\n            } 985460"];
8755 [label="if (DeclaringCompilation.Options.PublicSign)\n            {\n                // TODO(https://github.com/dotnet/roslyn/issues/9150):\n                // Provide better error message if keys are provided by\n                // the attributes. Right now we'll just fall through to the\n                // 'no key available' error.\n\n                if (!string.IsNullOrEmpty(keyFile) && !PathUtilities.IsAbsolute(keyFile))\n                {\n                    // If keyFile has a relative path then there should be a diagnostic\n                    // about it\n                    Debug.Assert(!DeclaringCompilation.Options.Errors.IsEmpty);\n                    return StrongNameKeys.None;\n                }\n\n                // If we're public signing, we don't need a strong name provider\n                return StrongNameKeys.Create(keyFile, MessageProvider.Instance);\n            } 985461"];
8756 [label="DeclaringCompilation.Options 985462"];
8757 [label="get\n            {\n                return _options;\n            } 985463"];
8758 [label="if (string.IsNullOrEmpty(keyFile))\n            {\n                keyFile = this.AssemblyKeyFileAttributeSetting;\n\n                if ((object)keyFile == (object)WellKnownAttributeData.StringMissingValue)\n                {\n                    keyFile = null;\n                }\n            } 985464"];
8759 [label="this.AssemblyKeyFileAttributeSetting 985465"];
8760 [label="get\n            {\n                return GetWellKnownAttributeDataStringField(data => data.AssemblyKeyFileAttributeSetting, WellKnownAttributeData.StringMissingValue);\n            } 985466"];
8761 [label="return GetWellKnownAttributeDataStringField(data => data.AssemblyKeyFileAttributeSetting, WellKnownAttributeData.StringMissingValue); 985467"];
8762 [label="return GetWellKnownAttributeDataStringField(data => data.AssemblyKeyFileAttributeSetting, WellKnownAttributeData.StringMissingValue); 985468"];
8763 [label="GetWellKnownAttributeDataStringField(data => data.AssemblyKeyFileAttributeSetting, WellKnownAttributeData.StringMissingValue) 985469"];
8764 [label="param GetWellKnownAttributeDataStringField(Func<CommonAssemblyWellKnownAttributeData, string> fieldGetter) 985470"];
8765 [label="param GetWellKnownAttributeDataStringField(string missingValue = null) 985471"];
8766 [label="param GetWellKnownAttributeDataStringField(this) 985472"];
8767 [label="string fieldValue = missingValue; 985473"];
8768 [label="GetSourceDecodedWellKnownAttributeData() 985474"];
8769 [label="param GetSourceDecodedWellKnownAttributeData(this) 985475"];
8770 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 985476"];
8771 [label="var data = GetSourceDecodedWellKnownAttributeData(); 985477"];
8772 [label="if (data != null)\n            {\n                fieldValue = fieldGetter(data);\n            } 985478"];
8773 [label="if (data != null)\n            {\n                fieldValue = fieldGetter(data);\n            } 985479"];
8774 [label="if ((object)fieldValue == (object)missingValue)\n            {\n                data = GetNetModuleDecodedWellKnownAttributeData();\n                if (data != null)\n                {\n                    fieldValue = fieldGetter(data);\n                }\n            } 985480"];
8775 [label="GetNetModuleDecodedWellKnownAttributeData() 985481"];
8776 [label="param GetNetModuleDecodedWellKnownAttributeData(this) 985482"];
8777 [label="EnsureNetModuleAttributesAreBound(); 985483"];
8778 [label="return _lazyNetModuleAttributesBag; 985484"];
8779 [label="var attributesBag = this.GetNetModuleAttributesBag(); 985485"];
8780 [label="Debug.Assert(attributesBag.IsSealed); 985486"];
8781 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 985487"];
8782 [label="data = GetNetModuleDecodedWellKnownAttributeData(); 985488"];
8783 [label="if (data != null)\n                {\n                    fieldValue = fieldGetter(data);\n                } 985489"];
8784 [label="if (data != null)\n                {\n                    fieldValue = fieldGetter(data);\n                } 985490"];
8785 [label="return fieldValue; 985491"];
8786 [label="keyFile = this.AssemblyKeyFileAttributeSetting; 985492"];
8787 [label="if ((object)keyFile == (object)WellKnownAttributeData.StringMissingValue)\n                {\n                    keyFile = null;\n                } 985493"];
8788 [label="keyFile = null; 985494"];
8789 [label="_compilation.Options 985495"];
8790 [label="get\n            {\n                return _options;\n            } 985496"];
8791 [label="string keyContainer = _compilation.Options.CryptoKeyContainer; 985497"];
8792 [label="if (string.IsNullOrEmpty(keyContainer))\n            {\n                keyContainer = this.AssemblyKeyContainerAttributeSetting;\n\n                if ((object)keyContainer == (object)WellKnownAttributeData.StringMissingValue)\n                {\n                    keyContainer = null;\n                }\n            } 985498"];
8793 [label="this.AssemblyKeyContainerAttributeSetting 985499"];
8794 [label="get\n            {\n                return GetWellKnownAttributeDataStringField(data => data.AssemblyKeyContainerAttributeSetting, WellKnownAttributeData.StringMissingValue);\n            } 985500"];
8795 [label="return GetWellKnownAttributeDataStringField(data => data.AssemblyKeyContainerAttributeSetting, WellKnownAttributeData.StringMissingValue); 985501"];
8796 [label="return GetWellKnownAttributeDataStringField(data => data.AssemblyKeyContainerAttributeSetting, WellKnownAttributeData.StringMissingValue); 985502"];
8797 [label="GetWellKnownAttributeDataStringField(data => data.AssemblyKeyContainerAttributeSetting, WellKnownAttributeData.StringMissingValue) 985503"];
8798 [label="param GetWellKnownAttributeDataStringField(Func<CommonAssemblyWellKnownAttributeData, string> fieldGetter) 985504"];
8799 [label="param GetWellKnownAttributeDataStringField(string missingValue = null) 985505"];
8800 [label="param GetWellKnownAttributeDataStringField(this) 985506"];
8801 [label="string fieldValue = missingValue; 985507"];
8802 [label="GetSourceDecodedWellKnownAttributeData() 985508"];
8803 [label="param GetSourceDecodedWellKnownAttributeData(this) 985509"];
8804 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 985510"];
8805 [label="var data = GetSourceDecodedWellKnownAttributeData(); 985511"];
8806 [label="if (data != null)\n            {\n                fieldValue = fieldGetter(data);\n            } 985512"];
8807 [label="if (data != null)\n            {\n                fieldValue = fieldGetter(data);\n            } 985513"];
8808 [label="if ((object)fieldValue == (object)missingValue)\n            {\n                data = GetNetModuleDecodedWellKnownAttributeData();\n                if (data != null)\n                {\n                    fieldValue = fieldGetter(data);\n                }\n            } 985514"];
8809 [label="GetNetModuleDecodedWellKnownAttributeData() 985515"];
8810 [label="param GetNetModuleDecodedWellKnownAttributeData(this) 985516"];
8811 [label="EnsureNetModuleAttributesAreBound(); 985517"];
8812 [label="return _lazyNetModuleAttributesBag; 985518"];
8813 [label="var attributesBag = this.GetNetModuleAttributesBag(); 985519"];
8814 [label="Debug.Assert(attributesBag.IsSealed); 985520"];
8815 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 985521"];
8816 [label="data = GetNetModuleDecodedWellKnownAttributeData(); 985522"];
8817 [label="if (data != null)\n                {\n                    fieldValue = fieldGetter(data);\n                } 985523"];
8818 [label="if (data != null)\n                {\n                    fieldValue = fieldGetter(data);\n                } 985524"];
8819 [label="return fieldValue; 985525"];
8820 [label="keyContainer = this.AssemblyKeyContainerAttributeSetting; 985526"];
8821 [label="if ((object)keyContainer == (object)WellKnownAttributeData.StringMissingValue)\n                {\n                    keyContainer = null;\n                } 985527"];
8822 [label="keyContainer = null; 985528"];
8823 [label="this.SignatureKey 985529"];
8824 [label="get\n            {\n                return GetWellKnownAttributeDataStringField(data => data.AssemblySignatureKeyAttributeSetting);\n            } 985530"];
8825 [label="return GetWellKnownAttributeDataStringField(data => data.AssemblySignatureKeyAttributeSetting); 985531"];
8826 [label="GetWellKnownAttributeDataStringField(data => data.AssemblySignatureKeyAttributeSetting) 985532"];
8827 [label="param GetWellKnownAttributeDataStringField(Func<CommonAssemblyWellKnownAttributeData, string> fieldGetter) 985533"];
8828 [label="param GetWellKnownAttributeDataStringField(string missingValue = null) 985534"];
8829 [label="param GetWellKnownAttributeDataStringField(this) 985535"];
8830 [label="string fieldValue = missingValue; 985536"];
8831 [label="GetSourceDecodedWellKnownAttributeData() 985537"];
8832 [label="param GetSourceDecodedWellKnownAttributeData(this) 985538"];
8833 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 985539"];
8834 [label="var data = GetSourceDecodedWellKnownAttributeData(); 985540"];
8835 [label="if (data != null)\n            {\n                fieldValue = fieldGetter(data);\n            } 985541"];
8836 [label="if (data != null)\n            {\n                fieldValue = fieldGetter(data);\n            } 985542"];
8837 [label="if ((object)fieldValue == (object)missingValue)\n            {\n                data = GetNetModuleDecodedWellKnownAttributeData();\n                if (data != null)\n                {\n                    fieldValue = fieldGetter(data);\n                }\n            } 985543"];
8838 [label="GetNetModuleDecodedWellKnownAttributeData() 985544"];
8839 [label="param GetNetModuleDecodedWellKnownAttributeData(this) 985545"];
8840 [label="EnsureNetModuleAttributesAreBound(); 985546"];
8841 [label="return _lazyNetModuleAttributesBag; 985547"];
8842 [label="var attributesBag = this.GetNetModuleAttributesBag(); 985548"];
8843 [label="Debug.Assert(attributesBag.IsSealed); 985549"];
8844 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 985550"];
8845 [label="data = GetNetModuleDecodedWellKnownAttributeData(); 985551"];
8846 [label="if (data != null)\n                {\n                    fieldValue = fieldGetter(data);\n                } 985552"];
8847 [label="if (data != null)\n                {\n                    fieldValue = fieldGetter(data);\n                } 985553"];
8848 [label="return fieldValue; 985554"];
8849 [label="var hasCounterSignature = !string.IsNullOrEmpty(this.SignatureKey); 985555"];
8850 [label="DeclaringCompilation 985556"];
8851 [label="get\n            {\n                return _compilation;\n            } 985557"];
8852 [label="return StrongNameKeys.Create(DeclaringCompilation.Options.StrongNameProvider, keyFile, keyContainer, hasCounterSignature, MessageProvider.Instance); 985558"];
8853 [label="DeclaringCompilation.Options 985559"];
8854 [label="get\n            {\n                return _options;\n            } 985560"];
8855 [label="return StrongNameKeys.Create(DeclaringCompilation.Options.StrongNameProvider, keyFile, keyContainer, hasCounterSignature, MessageProvider.Instance); 985561"];
8856 [label="return StrongNameKeys.Create(DeclaringCompilation.Options.StrongNameProvider, keyFile, keyContainer, hasCounterSignature, MessageProvider.Instance); 985562"];
8857 [label="return StrongNameKeys.Create(DeclaringCompilation.Options.StrongNameProvider, keyFile, keyContainer, hasCounterSignature, MessageProvider.Instance); 985563"];
8858 [label="return StrongNameKeys.Create(DeclaringCompilation.Options.StrongNameProvider, keyFile, keyContainer, hasCounterSignature, MessageProvider.Instance); 985564"];
8859 [label="return StrongNameKeys.Create(DeclaringCompilation.Options.StrongNameProvider, keyFile, keyContainer, hasCounterSignature, MessageProvider.Instance); 985565"];
8860 [label="Interlocked.CompareExchange(ref _lazyStrongNameKeys, ComputeStrongNameKeys(), null); 985566"];
8861 [label="Interlocked.CompareExchange(ref _lazyStrongNameKeys, ComputeStrongNameKeys(), null); 985567"];
8862 [label="t_assemblyForWhichCurrentThreadIsComputingKeys = null; 985568"];
8863 [label="return _lazyStrongNameKeys; 985569"];
8864 [label="=> 0x30 985570"];
8865 [label="0x30 985571"];
8866 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 985572"];
8867 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 985573"];
8868 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 985574"];
8869 [label="manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>(); 985575"];
8870 [label="PEModuleBuilder moduleBeingBuilt; 985576"];
8871 [label="if (_options.OutputKind.IsNetModule())\n            {\n                moduleBeingBuilt = new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources);\n            }\n            else\n            {\n                var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary;\n                moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources);\n            } 985577"];
8872 [label="var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary; 985578"];
8873 [label="_options.OutputKind.IsValid() 985579"];
8874 [label="_options.OutputKind 985580"];
8875 [label="SourceAssembly 985581"];
8876 [label="GetBoundReferenceManager() 985582"];
8877 [label="GetBoundReferenceManager(); 985583"];
8878 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 985584"];
8879 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 985585"];
8880 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 985586"];
8881 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 985587"];
8882 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 985588"];
8883 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 985589"];
8884 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 985590"];
8885 [label="new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources) 985591"];
8886 [label="param PEAssemblyBuilder(SourceAssemblySymbol sourceAssembly) 985592"];
8887 [label="param PEAssemblyBuilder(EmitOptions emitOptions) 985593"];
8888 [label="param PEAssemblyBuilder(OutputKind outputKind) 985594"];
8889 [label="param PEAssemblyBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 985595"];
8890 [label="param PEAssemblyBuilder(IEnumerable<ResourceDescription> manifestResources) 985596"];
8891 [label="param PEAssemblyBuilder(this) 985597"];
8892 [label="sourceAssembly 985598"];
8893 [label="emitOptions 985599"];
8894 [label="outputKind 985600"];
8895 [label="serializationProperties 985601"];
8896 [label="manifestResources 985602"];
8897 [label="ImmutableArray<NamedTypeSymbol>.Empty 985603"];
8898 [label="param PEAssemblyBuilder(this) 985604"];
8899 [label="param PEAssemblyBuilderBase(SourceAssemblySymbol sourceAssembly) 985605"];
8900 [label="param PEAssemblyBuilderBase(EmitOptions emitOptions) 985606"];
8901 [label="param PEAssemblyBuilderBase(OutputKind outputKind) 985607"];
8902 [label="param PEAssemblyBuilderBase(Cci.ModulePropertiesForSerialization serializationProperties) 985608"];
8903 [label="param PEAssemblyBuilderBase(IEnumerable<ResourceDescription> manifestResources) 985609"];
8904 [label="param PEAssemblyBuilderBase(ImmutableArray<NamedTypeSymbol> additionalTypes) 985610"];
8905 [label="param PEAssemblyBuilderBase(this) 985611"];
8906 [label="sourceAssembly.Modules 985612"];
8907 [label="get\n            {\n                return _modules;\n            } 985613"];
8908 [label="0 985614"];
8909 [label="sourceAssembly.Modules[0] 985615"];
8910 [label="emitOptions 985616"];
8911 [label="outputKind 985617"];
8912 [label="serializationProperties 985618"];
8913 [label="manifestResources 985619"];
8914 [label="param PEAssemblyBuilderBase(this) 985620"];
8915 [label="param PEModuleBuilder(SourceModuleSymbol sourceModule) 985621"];
8916 [label="param PEModuleBuilder(EmitOptions emitOptions) 985622"];
8917 [label="param PEModuleBuilder(OutputKind outputKind) 985623"];
8918 [label="param PEModuleBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 985624"];
8919 [label="param PEModuleBuilder(IEnumerable<ResourceDescription> manifestResources) 985625"];
8920 [label="param PEModuleBuilder(this) 985626"];
8921 [label="sourceModule.ContainingSourceAssembly 985627"];
8922 [label="get\n            {\n                return _assemblySymbol;\n            } 985628"];
8923 [label="return _assemblySymbol; 985629"];
8924 [label="sourceModule.ContainingSourceAssembly.DeclaringCompilation 985630"];
8925 [label="get\n            {\n                return _compilation;\n            } 985631"];
8926 [label="sourceModule 985632"];
8927 [label="serializationProperties 985633"];
8928 [label="manifestResources 985634"];
8929 [label="outputKind 985635"];
8930 [label="emitOptions 985636"];
8931 [label="new ModuleCompilationState() 985637"];
8932 [label="param ModuleCompilationState(this) 985638"];
8933 [label="param PEModuleBuilder(this) 985639"];
8934 [label="param PEModuleBuilder(this) 985640"];
8935 [label="get\n            {\n                return true;\n            } 985641"];
8936 [label="return true; 985642"];
8937 [label="param PEModuleBuilder(this) 985643"];
8938 [label="new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 985644"];
8939 [label="AssemblyOrModuleSymbolToModuleRefMap = new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 985645"];
8940 [label="TypeCompareKind.ConsiderEverything 985646"];
8941 [label="new SymbolEqualityComparer(TypeCompareKind.ConsiderEverything) 985647"];
8942 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 985648"];
8943 [label="param SymbolEqualityComparer(this) 985649"];
8944 [label="_comparison 985650"];
8945 [label="_comparison 985651"];
8946 [label="ConsiderEverything = new SymbolEqualityComparer(TypeCompareKind.ConsiderEverything) 985652"];
8947 [label="TypeCompareKind.IgnoreTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 985653"];
8948 [label="new SymbolEqualityComparer(TypeCompareKind.IgnoreTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 985654"];
8949 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 985655"];
8950 [label="param SymbolEqualityComparer(this) 985656"];
8951 [label="_comparison 985657"];
8952 [label="_comparison 985658"];
8953 [label="IgnoringTupleNamesAndNullability = new SymbolEqualityComparer(TypeCompareKind.IgnoreTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 985659"];
8954 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 985660"];
8955 [label="new SymbolEqualityComparer(TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 985661"];
8956 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 985662"];
8957 [label="param SymbolEqualityComparer(this) 985663"];
8958 [label="_comparison 985664"];
8959 [label="_comparison 985665"];
8960 [label="IgnoringDynamicTupleNamesAndNullability = new SymbolEqualityComparer(TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 985666"];
8961 [label="TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 985667"];
8962 [label="new SymbolEqualityComparer(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 985668"];
8963 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 985669"];
8964 [label="param SymbolEqualityComparer(this) 985670"];
8965 [label="_comparison 985671"];
8966 [label="_comparison 985672"];
8967 [label="IgnoringNullable = new SymbolEqualityComparer(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 985673"];
8968 [label="TypeCompareKind.ObliviousNullableModifierMatchesAny 985674"];
8969 [label="new SymbolEqualityComparer(TypeCompareKind.ObliviousNullableModifierMatchesAny) 985675"];
8970 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 985676"];
8971 [label="param SymbolEqualityComparer(this) 985677"];
8972 [label="_comparison 985678"];
8973 [label="_comparison 985679"];
8974 [label="ObliviousNullableModifierMatchesAny = new SymbolEqualityComparer(TypeCompareKind.ObliviousNullableModifierMatchesAny) 985680"];
8975 [label="TypeCompareKind.AllIgnoreOptions 985681"];
8976 [label="new SymbolEqualityComparer(TypeCompareKind.AllIgnoreOptions) 985682"];
8977 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 985683"];
8978 [label="param SymbolEqualityComparer(this) 985684"];
8979 [label="_comparison 985685"];
8980 [label="_comparison 985686"];
8981 [label="AllIgnoreOptions = new SymbolEqualityComparer(TypeCompareKind.AllIgnoreOptions) 985687"];
8982 [label="TypeCompareKind.AllIgnoreOptions & ~(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 985688"];
8983 [label="new SymbolEqualityComparer(TypeCompareKind.AllIgnoreOptions & ~(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes)) 985689"];
8984 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 985690"];
8985 [label="param SymbolEqualityComparer(this) 985691"];
8986 [label="_comparison 985692"];
8987 [label="_comparison 985693"];
8988 [label="AllIgnoreOptionsPlusNullableWithUnknownMatchesAny =\n                                                                  new SymbolEqualityComparer(TypeCompareKind.AllIgnoreOptions & ~(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes)) 985694"];
8989 [label="TypeCompareKind.CLRSignatureCompareOptions 985695"];
8990 [label="new SymbolEqualityComparer(TypeCompareKind.CLRSignatureCompareOptions) 985696"];
8991 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 985697"];
8992 [label="param SymbolEqualityComparer(this) 985698"];
8993 [label="_comparison 985699"];
8994 [label="_comparison 985700"];
8995 [label="CLRSignature = new SymbolEqualityComparer(TypeCompareKind.CLRSignatureCompareOptions) 985701"];
8996 [label="Symbols.SymbolEqualityComparer.ConsiderEverything 985702"];
8997 [label="new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 985703"];
8998 [label="_genericInstanceMap = new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 985704"];
8999 [label="new ConcurrentSet<TypeSymbol>() 985705"];
9000 [label="_reportedErrorTypesMap = new ConcurrentSet<TypeSymbol>() 985706"];
9001 [label="_embeddedTypesManagerOpt 985707"];
9002 [label="_metadataName 985708"];
9003 [label="_fixedImplementationTypes 985709"];
9004 [label="_needsGeneratedAttributes 985710"];
9005 [label="_needsGeneratedAttributes_IsFrozen 985711"];
9006 [label="sourceModule.MetadataName 985712"];
9007 [label="get\n            {\n                return this.Name;\n            } 985713"];
9008 [label="this.Name 985714"];
9009 [label="get\n            {\n                return _name;\n            } 985715"];
9010 [label="return _name; 985716"];
9011 [label="return this.Name; 985717"];
9012 [label="var specifiedName = sourceModule.MetadataName; 985718"];
9013 [label="_metadataName = specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName ?\n                            specifiedName :\n                            emitOptions.OutputNameOverride ?? specifiedName; 985719"];
9014 [label="specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName 985720"];
9015 [label="_metadataName 985721"];
9016 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 985722"];
9017 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 985723"];
9018 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 985724"];
9019 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 985725"];
9020 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 985726"];
9021 [label="param GetHashCode(this) 985727"];
9022 [label="return System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(this); 985728"];
9023 [label="sourceModule.AnyReferencedAssembliesAreLinked 985729"];
9024 [label="get\n            {\n                return GetAssembliesToEmbedTypesFrom().Length > 0;\n            } 985730"];
9025 [label="GetAssembliesToEmbedTypesFrom() 985731"];
9026 [label="param GetAssembliesToEmbedTypesFrom(this) 985732"];
9027 [label="if (_lazyAssembliesToEmbedTypesFrom.IsDefault)\n            {\n                AssertReferencesInitialized();\n                var buffer = ArrayBuilder<AssemblySymbol>.GetInstance();\n\n                foreach (AssemblySymbol asm in this.GetReferencedAssemblySymbols())\n                {\n                    if (asm.IsLinked)\n                    {\n                        buffer.Add(asm);\n                    }\n                }\n\n                ImmutableInterlocked.InterlockedCompareExchange(ref _lazyAssembliesToEmbedTypesFrom,\n                                                    buffer.ToImmutableAndFree(),\n                                                    default(ImmutableArray<AssemblySymbol>));\n            } 985733"];
9028 [label="AssertReferencesInitialized() 985734"];
9029 [label="param AssertReferencesInitialized(this) 985735"];
9030 [label="Debug.Assert(_moduleReferences != null); 985736"];
9031 [label="Debug.Assert(_moduleReferences != null); 985737"];
9032 [label="AssertReferencesInitialized(); 985738"];
9033 [label="var buffer = ArrayBuilder<AssemblySymbol>.GetInstance(); 985739"];
9034 [label="this.GetReferencedAssemblySymbols() 985740"];
9035 [label="AssertReferencesInitialized() 985741"];
9036 [label="param AssertReferencesInitialized(this) 985742"];
9037 [label="Debug.Assert(_moduleReferences != null); 985743"];
9038 [label="Debug.Assert(_moduleReferences != null); 985744"];
9039 [label="AssertReferencesInitialized(); 985745"];
9040 [label="foreach (AssemblySymbol asm in this.GetReferencedAssemblySymbols())\n                {\n                    if (asm.IsLinked)\n                    {\n                        buffer.Add(asm);\n                    }\n                } 985746"];
9041 [label="ImmutableInterlocked.InterlockedCompareExchange(ref _lazyAssembliesToEmbedTypesFrom,\n                                                    buffer.ToImmutableAndFree(),\n                                                    default(ImmutableArray<AssemblySymbol>)); 985747"];
9042 [label="ImmutableInterlocked.InterlockedCompareExchange(ref _lazyAssembliesToEmbedTypesFrom,\n                                                    buffer.ToImmutableAndFree(),\n                                                    default(ImmutableArray<AssemblySymbol>)); 985748"];
9043 [label="ImmutableInterlocked.InterlockedCompareExchange(ref _lazyAssembliesToEmbedTypesFrom,\n                                                    buffer.ToImmutableAndFree(),\n                                                    default(ImmutableArray<AssemblySymbol>)); 985749"];
9044 [label="Debug.Assert(!_lazyAssembliesToEmbedTypesFrom.IsDefault); 985750"];
9045 [label="return _lazyAssembliesToEmbedTypesFrom; 985751"];
9046 [label="return GetAssembliesToEmbedTypesFrom().Length > 0; 985752"];
9047 [label="return GetAssembliesToEmbedTypesFrom().Length > 0; 985753"];
9048 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 985754"];
9049 [label="_sourceAssembly 985755"];
9050 [label="_lazyEmbeddedAttribute 985756"];
9051 [label="_lazyIsReadOnlyAttribute 985757"];
9052 [label="_lazyIsByRefLikeAttribute 985758"];
9053 [label="_lazyIsUnmanagedAttribute 985759"];
9054 [label="_lazyNullableAttribute 985760"];
9055 [label="_lazyNullableContextAttribute 985761"];
9056 [label="_lazyNullablePublicOnlyAttribute 985762"];
9057 [label="_lazyNativeIntegerAttribute 985763"];
9058 [label="_metadataName 985764"];
9059 [label="Debug.Assert(sourceAssembly is object); 985765"];
9060 [label="_sourceAssembly 985766"];
9061 [label="_additionalTypes = additionalTypes.NullToEmpty(); 985767"];
9062 [label="_additionalTypes 985768"];
9063 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 985769"];
9064 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 985770"];
9065 [label="(emitOptions.OutputNameOverride == null) 985771"];
9066 [label="sourceAssembly.MetadataName 985772"];
9067 [label="get\n            {\n                return _assemblySimpleName;\n            } 985773"];
9068 [label="return _assemblySimpleName; 985774"];
9069 [label="_metadataName 985775"];
9070 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 985776"];
9071 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 985777"];
9072 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 985778"];
9073 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 985779"];
9074 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 985780"];
9075 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 985781"];
9076 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 985782"];
9077 [label="moduleBeingBuilt.SourceLinkStreamOpt 985783"];
9078 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 985784"];
9079 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 985785"];
9080 [label="moduleBeingBuilt.EmbeddedTexts 985786"];
9081 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 985787"];
9082 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 985788"];
9083 [label="moduleBeingBuilt.SetMethodTestData(testData.Methods); 985789"];
9084 [label="moduleBeingBuilt.SetMethodTestData(testData.Methods); 985790"];
9085 [label="testData.Module 985791"];
9086 [label="return moduleBeingBuilt; 985792"];
9087 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 985793"];
9088 [label="param CompileMethods(CommonPEModuleBuilder moduleBuilder) 985794"];
9089 [label="param CompileMethods(bool emittingPdb) 985795"];
9090 [label="param CompileMethods(bool emitMetadataOnly) 985796"];
9091 [label="param CompileMethods(bool emitTestCoverageData) 985797"];
9092 [label="param CompileMethods(DiagnosticBag diagnostics) 985798"];
9093 [label="param CompileMethods(Predicate<ISymbolInternal>? filterOpt) 985799"];
9094 [label="param CompileMethods(CancellationToken cancellationToken) 985800"];
9095 [label="param CompileMethods(this) 985801"];
9096 [label="PooledHashSet<int>? excludeDiagnostics = null; 985802"];
9097 [label="if (emitMetadataOnly)\n            {\n                excludeDiagnostics = PooledHashSet<int>.GetInstance();\n                excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody);\n            } 985803"];
9098 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 985804"];
9099 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 985805"];
9100 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 985806"];
9101 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 985807"];
9102 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 985808"];
9103 [label="param GetDiagnostics(CompilationStage stage) 985809"];
9104 [label="param GetDiagnostics(bool includeEarlierStages) 985810"];
9105 [label="param GetDiagnostics(CancellationToken cancellationToken) 985811"];
9106 [label="param GetDiagnostics(this) 985812"];
9107 [label="var diagnostics = DiagnosticBag.GetInstance(); 985813"];
9108 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 985814"];
9109 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 985815"];
9110 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 985816"];
9111 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 985817"];
9112 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 985818"];
9113 [label="param GetDiagnostics(CompilationStage stage) 985819"];
9114 [label="param GetDiagnostics(bool includeEarlierStages) 985820"];
9115 [label="param GetDiagnostics(DiagnosticBag diagnostics) 985821"];
9116 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 985822"];
9117 [label="param GetDiagnostics(this) 985823"];
9118 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 985824"];
9119 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 985825"];
9120 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 985826"];
9121 [label="this.SyntaxTrees 985827"];
9122 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 985828"];
9123 [label="_syntaxAndDeclarations.GetLazyState() 985829"];
9124 [label="param GetLazyState(this) 985830"];
9125 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 985831"];
9126 [label="var syntaxTrees = this.SyntaxTrees; 985832"];
9127 [label="this.Options 985833"];
9128 [label="get\n            {\n                return _options;\n            } 985834"];
9129 [label="return _options; 985835"];
9130 [label="if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                } 985836"];
9131 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 985837"];
9132 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 985838"];
9133 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 985839"];
9134 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 985840"];
9135 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 985841"];
9136 [label="param AppendLoadDirectiveDiagnostics(SyntaxAndDeclarationManager syntaxAndDeclarations) 985842"];
9137 [label="param AppendLoadDirectiveDiagnostics(SyntaxTree syntaxTree) 985843"];
9138 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 985844"];
9139 [label="ImmutableArray<LoadDirective> loadDirectives; 985845"];
9140 [label="loadDirectives 985846"];
9141 [label="syntaxAndDeclarations.GetLazyState() 985847"];
9142 [label="param GetLazyState(this) 985848"];
9143 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 985849"];
9144 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 985850"];
9145 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 985851"];
9146 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 985852"];
9147 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 985853"];
9148 [label="param GetDiagnostics(this) 985854"];
9149 [label="return this.GetDiagnostics(this.GetRoot(cancellationToken)); 985855"];
9150 [label="this.GetRoot(cancellationToken) 985856"];
9151 [label="param GetRoot(CancellationToken cancellationToken) 985857"];
9152 [label="param GetRoot(this) 985858"];
9153 [label="return _root; 985859"];
9154 [label="return this.GetDiagnostics(this.GetRoot(cancellationToken)); 985860"];
9155 [label="this.GetDiagnostics(this.GetRoot(cancellationToken)) 985861"];
9156 [label="param GetDiagnostics(SyntaxNode node) 985862"];
9157 [label="param GetDiagnostics(this) 985863"];
9158 [label="if (node == null)\n            {\n                throw new ArgumentNullException(nameof(node));\n            } 985864"];
9159 [label="if (node == null)\n            {\n                throw new ArgumentNullException(nameof(node));\n            } 985865"];
9160 [label="return GetDiagnostics(node.Green, node.Position); 985866"];
9161 [label="GetDiagnostics(node.Green, node.Position) 985867"];
9162 [label="param GetDiagnostics(GreenNode greenNode) 985868"];
9163 [label="param GetDiagnostics(int position) 985869"];
9164 [label="param GetDiagnostics(this) 985870"];
9165 [label="if (greenNode == null)\n            {\n                throw new InvalidOperationException();\n            } 985871"];
9166 [label="if (greenNode == null)\n            {\n                throw new InvalidOperationException();\n            } 985872"];
9167 [label="if (greenNode.ContainsDiagnostics)\n            {\n                return EnumerateDiagnostics(greenNode, position);\n            } 985873"];
9168 [label="return SpecializedCollections.EmptyEnumerable<Diagnostic>(); 985874"];
9169 [label="return GetDiagnostics(node.Green, node.Position); 985875"];
9170 [label="return this.GetDiagnostics(this.GetRoot(cancellationToken)); 985876"];
9171 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 985877"];
9172 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 985878"];
9173 [label="foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                } 985879"];
9174 [label="cancellationToken.ThrowIfCancellationRequested(); 985880"];
9175 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 985881"];
9176 [label="syntaxTree.Options 985882"];
9177 [label="get\n            {\n                return this.Options;\n            } 985883"];
9178 [label="syntaxTree.Options.Errors 985884"];
9179 [label="param ValidateOptions(ArrayBuilder<Diagnostic> builder) 985885"];
9180 [label="param ValidateOptions(this) 985886"];
9181 [label="ValidateOptions(builder, MessageProvider.Instance); 985887"];
9182 [label="ValidateOptions(builder, MessageProvider.Instance); 985888"];
9183 [label="ValidateOptions(builder, MessageProvider.Instance); 985889"];
9184 [label="if (!LanguageVersion.IsValid())\n            {\n                builder.Add(Diagnostic.Create(MessageProvider.Instance, (int)ErrorCode.ERR_BadLanguageVersion, LanguageVersion.ToString()));\n            } 985890"];
9185 [label="LanguageVersion.IsValid() 985891"];
9186 [label="param IsValid(this LanguageVersion value) 985892"];
9187 [label="switch (value)\n            {\n                case LanguageVersion.CSharp1:\n                case LanguageVersion.CSharp2:\n                case LanguageVersion.CSharp3:\n                case LanguageVersion.CSharp4:\n                case LanguageVersion.CSharp5:\n                case LanguageVersion.CSharp6:\n                case LanguageVersion.CSharp7:\n                case LanguageVersion.CSharp7_1:\n                case LanguageVersion.CSharp7_2:\n                case LanguageVersion.CSharp7_3:\n                case LanguageVersion.CSharp8:\n                case LanguageVersion.CSharp9:\n                case LanguageVersion.Preview:\n                    return true;\n            } 985893"];
9188 [label="return true; 985894"];
9189 [label="if (!PreprocessorSymbols.IsDefaultOrEmpty)\n            {\n                foreach (var symbol in PreprocessorSymbols)\n                {\n                    if (symbol == null)\n                    {\n                        builder.Add(Diagnostic.Create(MessageProvider.Instance, (int)ErrorCode.ERR_InvalidPreprocessingSymbol, 'null'));\n                    }\n                    else if (!SyntaxFacts.IsValidIdentifier(symbol))\n                    {\n                        builder.Add(Diagnostic.Create(MessageProvider.Instance, (int)ErrorCode.ERR_InvalidPreprocessingSymbol, symbol));\n                    }\n                }\n            } 985895"];
9190 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 985896"];
9191 [label="CheckAssemblyName(builder); 985897"];
9192 [label="CheckAssemblyName(builder); 985898"];
9193 [label="CheckAssemblyName(builder); 985899"];
9194 [label="=> (int)ErrorCode.ERR_BadAssemblyName 985900"];
9195 [label="(int)ErrorCode.ERR_BadAssemblyName 985901"];
9196 [label="CheckAssemblyName(builder); 985902"];
9197 [label="Options 985903"];
9198 [label="get\n            {\n                return _options;\n            } 985904"];
9199 [label="return _options; 985905"];
9200 [label="builder.AddRange(Options.Errors); 985906"];
9201 [label="Options.Errors 985907"];
9202 [label="param ValidateOptions(ArrayBuilder<Diagnostic> builder) 985908"];
9203 [label="param ValidateOptions(this) 985909"];
9204 [label="ValidateOptions(builder, MessageProvider.Instance); 985910"];
9205 [label="ValidateOptions(builder, MessageProvider.Instance); 985911"];
9206 [label="ValidateOptions(builder, MessageProvider.Instance); 985912"];
9207 [label="if (this.MainTypeName != null)\n            {\n                if (this.OutputKind.IsValid() && !this.OutputKind.IsApplication())\n                {\n                    builder.Add(Diagnostic.Create(MessageProvider.Instance, (int)ErrorCode.ERR_NoMainOnDLL));\n                }\n\n                if (!MainTypeName.IsValidClrTypeName())\n                {\n                    builder.Add(Diagnostic.Create(MessageProvider.Instance, (int)ErrorCode.ERR_BadCompilationOptionValue, nameof(MainTypeName), MainTypeName));\n                }\n            } 985913"];
9208 [label="if (this.MainTypeName != null)\n            {\n                if (this.OutputKind.IsValid() && !this.OutputKind.IsApplication())\n                {\n                    builder.Add(Diagnostic.Create(MessageProvider.Instance, (int)ErrorCode.ERR_NoMainOnDLL));\n                }\n\n                if (!MainTypeName.IsValidClrTypeName())\n                {\n                    builder.Add(Diagnostic.Create(MessageProvider.Instance, (int)ErrorCode.ERR_BadCompilationOptionValue, nameof(MainTypeName), MainTypeName));\n                }\n            } 985914"];
9209 [label="if (!Platform.IsValid())\n            {\n                builder.Add(Diagnostic.Create(MessageProvider.Instance, (int)ErrorCode.ERR_BadPlatformType, Platform.ToString()));\n            } 985915"];
9210 [label="if (ModuleName != null)\n            {\n                MetadataHelpers.CheckAssemblyOrModuleName(ModuleName, MessageProvider.Instance, (int)ErrorCode.ERR_BadModuleName, builder);\n            } 985916"];
9211 [label="if (ModuleName != null)\n            {\n                MetadataHelpers.CheckAssemblyOrModuleName(ModuleName, MessageProvider.Instance, (int)ErrorCode.ERR_BadModuleName, builder);\n            } 985917"];
9212 [label="if (!OutputKind.IsValid())\n            {\n                builder.Add(Diagnostic.Create(MessageProvider.Instance, (int)ErrorCode.ERR_BadCompilationOptionValue, nameof(OutputKind), OutputKind.ToString()));\n            } 985918"];
9213 [label="if (!OptimizationLevel.IsValid())\n            {\n                builder.Add(Diagnostic.Create(MessageProvider.Instance, (int)ErrorCode.ERR_BadCompilationOptionValue, nameof(OptimizationLevel), OptimizationLevel.ToString()));\n            } 985919"];
9214 [label="if (ScriptClassName == null || !ScriptClassName.IsValidClrTypeName())\n            {\n                builder.Add(Diagnostic.Create(MessageProvider.Instance, (int)ErrorCode.ERR_BadCompilationOptionValue, nameof(ScriptClassName), ScriptClassName ?? 'null'));\n            } 985920"];
9215 [label="if (ScriptClassName == null || !ScriptClassName.IsValidClrTypeName())\n            {\n                builder.Add(Diagnostic.Create(MessageProvider.Instance, (int)ErrorCode.ERR_BadCompilationOptionValue, nameof(ScriptClassName), ScriptClassName ?? 'null'));\n            } 985921"];
9216 [label="if (ScriptClassName == null || !ScriptClassName.IsValidClrTypeName())\n            {\n                builder.Add(Diagnostic.Create(MessageProvider.Instance, (int)ErrorCode.ERR_BadCompilationOptionValue, nameof(ScriptClassName), ScriptClassName ?? 'null'));\n            } 985922"];
9217 [label="if (WarningLevel < 0)\n            {\n                builder.Add(Diagnostic.Create(MessageProvider.Instance, (int)ErrorCode.ERR_BadCompilationOptionValue, nameof(WarningLevel), WarningLevel));\n            } 985923"];
9218 [label="if (WarningLevel < 0)\n            {\n                builder.Add(Diagnostic.Create(MessageProvider.Instance, (int)ErrorCode.ERR_BadCompilationOptionValue, nameof(WarningLevel), WarningLevel));\n            } 985924"];
9219 [label="if (Usings != null && Usings.Any(u => !u.IsValidClrNamespaceName()))\n            {\n                builder.Add(Diagnostic.Create(MessageProvider.Instance, (int)ErrorCode.ERR_BadCompilationOptionValue, nameof(Usings), Usings.Where(u => !u.IsValidClrNamespaceName()).First() ?? 'null'));\n            } 985925"];
9220 [label="if (Usings != null && Usings.Any(u => !u.IsValidClrNamespaceName()))\n            {\n                builder.Add(Diagnostic.Create(MessageProvider.Instance, (int)ErrorCode.ERR_BadCompilationOptionValue, nameof(Usings), Usings.Where(u => !u.IsValidClrNamespaceName()).First() ?? 'null'));\n            } 985926"];
9221 [label="if (Usings != null && Usings.Any(u => !u.IsValidClrNamespaceName()))\n            {\n                builder.Add(Diagnostic.Create(MessageProvider.Instance, (int)ErrorCode.ERR_BadCompilationOptionValue, nameof(Usings), Usings.Where(u => !u.IsValidClrNamespaceName()).First() ?? 'null'));\n            } 985927"];
9222 [label="if (Platform == Platform.AnyCpu32BitPreferred && OutputKind.IsValid() && !(OutputKind == OutputKind.ConsoleApplication || OutputKind == OutputKind.WindowsApplication || OutputKind == OutputKind.WindowsRuntimeApplication))\n            {\n                builder.Add(Diagnostic.Create(MessageProvider.Instance, (int)ErrorCode.ERR_BadPrefer32OnLib));\n            } 985928"];
9223 [label="if (!MetadataImportOptions.IsValid())\n            {\n                builder.Add(Diagnostic.Create(MessageProvider.Instance, (int)ErrorCode.ERR_BadCompilationOptionValue, nameof(MetadataImportOptions), MetadataImportOptions.ToString()));\n            } 985929"];
9224 [label="Options 985930"];
9225 [label="get\n            {\n                return _options;\n            } 985931"];
9226 [label="return _options; 985932"];
9227 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 985933"];
9228 [label="cancellationToken.ThrowIfCancellationRequested(); 985934"];
9229 [label="GetBoundReferenceManager() 985935"];
9230 [label="param GetBoundReferenceManager(this) 985936"];
9231 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 985937"];
9232 [label="return _referenceManager; 985938"];
9233 [label="builder.AddRange(GetBoundReferenceManager().Diagnostics); 985939"];
9234 [label="cancellationToken.ThrowIfCancellationRequested(); 985940"];
9235 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 985941"];
9236 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 985942"];
9237 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 985943"];
9238 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 985944"];
9239 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 985945"];
9240 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 985946"];
9241 [label="param GetSourceDeclarationDiagnostics(CancellationToken cancellationToken = default) 985947"];
9242 [label="param GetSourceDeclarationDiagnostics(this) 985948"];
9243 [label="GlobalImports 985949"];
9244 [label="=> _globalImports.Value 985950"];
9245 [label="_globalImports.Value 985951"];
9246 [label="_globalImports.Value 985952"];
9247 [label="=> Imports.FromGlobalUsings(this) 985953"];
9248 [label="null 985954"];
9249 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Empty 985955"];
9250 [label="ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty 985956"];
9251 [label="ImmutableArray<AliasAndExternAliasDirective>.Empty 985957"];
9252 [label="null 985958"];
9253 [label="new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 985959"];
9254 [label="param Imports(CSharpCompilation compilation) 985960"];
9255 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 985961"];
9256 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 985962"];
9257 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 985963"];
9258 [label="param Imports(DiagnosticBag diagnostics) 985964"];
9259 [label="param Imports(this) 985965"];
9260 [label="_compilation 985966"];
9261 [label="_diagnostics 985967"];
9262 [label="UsingAliases 985968"];
9263 [label="Debug.Assert(usingAliases != null); 985969"];
9264 [label="Debug.Assert(usingAliases != null); 985970"];
9265 [label="Debug.Assert(!usings.IsDefault); 985971"];
9266 [label="Debug.Assert(!externs.IsDefault); 985972"];
9267 [label="_compilation 985973"];
9268 [label="this.UsingAliases 985974"];
9269 [label="this.Usings 985975"];
9270 [label="_diagnostics 985976"];
9271 [label="this.ExternAliases 985977"];
9272 [label="Empty = new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 985978"];
9273 [label="this 985979"];
9274 [label="Imports.FromGlobalUsings(this) 985980"];
9275 [label="param FromGlobalUsings(CSharpCompilation compilation) 985981"];
9276 [label="compilation.Options 985982"];
9277 [label="get\n            {\n                return _options;\n            } 985983"];
9278 [label="var usings = compilation.Options.Usings; 985984"];
9279 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 985985"];
9280 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 985986"];
9281 [label="compilation.PreviousSubmission 985987"];
9282 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 985988"];
9283 [label="ScriptCompilationInfo 985989"];
9284 [label="ScriptCompilationInfo?.PreviousScriptCompilation 985990"];
9285 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 985991"];
9286 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 985992"];
9287 [label="return Empty; 985993"];
9288 [label="_globalImports.Value 985994"];
9289 [label="GlobalImports.Complete(cancellationToken); 985995"];
9290 [label="GlobalImports.Complete(cancellationToken); 985996"];
9291 [label="GlobalImports.Complete(cancellationToken) 985997"];
9292 [label="param Complete(CancellationToken cancellationToken) 985998"];
9293 [label="param Complete(this) 985999"];
9294 [label="while (true)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                var incompletePart = _state.NextIncompletePart;\n                switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                }\n\n                _state.SpinWaitComplete(incompletePart, cancellationToken);\n            } 986000"];
9295 [label="cancellationToken.ThrowIfCancellationRequested(); 986001"];
9296 [label="_state.NextIncompletePart 986002"];
9297 [label="get\n            {\n                // NOTE: It's very important to store this value in a local.\n                // If we were to inline the field access, the value of the\n                // field could change between the two accesses and the formula\n                // might not produce a result with a single 1-bit.\n                int incomplete = IncompleteParts;\n                int next = incomplete & ~(incomplete - 1);\n                Debug.Assert(HasAtMostOneBitSet(next), 'ForceComplete won't handle the result correctly if more than one bit is set.');\n                return (CompletionPart)next;\n            } 986003"];
9298 [label="IncompleteParts 986004"];
9299 [label="get\n            {\n                return ~_completeParts & (int)CompletionPart.All;\n            } 986005"];
9300 [label="return ~_completeParts & (int)CompletionPart.All; 986006"];
9301 [label="int incomplete = IncompleteParts; 986007"];
9302 [label="int next = incomplete & ~(incomplete - 1); 986008"];
9303 [label="int next = incomplete & ~(incomplete - 1); 986009"];
9304 [label="Debug.Assert(HasAtMostOneBitSet(next), 'ForceComplete won't handle the result correctly if more than one bit is set.'); 986010"];
9305 [label="HasAtMostOneBitSet(next) 986011"];
9306 [label="param HasAtMostOneBitSet(int bits) 986012"];
9307 [label="return (bits & (bits - 1)) == 0; 986013"];
9308 [label="return (bits & (bits - 1)) == 0; 986014"];
9309 [label="Debug.Assert(HasAtMostOneBitSet(next), 'ForceComplete won't handle the result correctly if more than one bit is set.'); 986015"];
9310 [label="return (CompletionPart)next; 986016"];
9311 [label="var incompletePart = _state.NextIncompletePart; 986017"];
9312 [label="switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                } 986018"];
9313 [label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 986019"];
9314 [label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll) 986020"];
9315 [label="param NotePartComplete(CompletionPart part) 986021"];
9316 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 986022"];
9317 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 986023"];
9318 [label="_state.SpinWaitComplete(incompletePart, cancellationToken) 986024"];
9319 [label="param SpinWaitComplete(CompletionPart part) 986025"];
9320 [label="param SpinWaitComplete(CancellationToken cancellationToken) 986026"];
9321 [label="param SpinWaitComplete(this) 986027"];
9322 [label="if (HasComplete(part))\n            {\n                return;\n            } 986028"];
9323 [label="HasComplete(part) 986029"];
9324 [label="param HasComplete(CompletionPart part) 986030"];
9325 [label="param HasComplete(this) 986031"];
9326 [label="return (_completeParts & (int)part) == (int)part; 986032"];
9327 [label="return; 986033"];
9328 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 986034"];
9329 [label="Debug.Assert(HasAtMostOneBitSet(next), 'ForceComplete won't handle the result correctly if more than one bit is set.'); 986035"];
9330 [label="param HasAtMostOneBitSet(int bits) 986036"];
9331 [label="return (bits & (bits - 1)) == 0; 986037"];
9332 [label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            } 986038"];
9333 [label="_state.NotePartComplete(CompletionPart.StartValidatingImports) 986039"];
9334 [label="param NotePartComplete(CompletionPart part) 986040"];
9335 [label="Validate() 986041"];
9336 [label="param Validate(this) 986042"];
9337 [label="if (this == Empty)\n            {\n                return;\n            } 986043"];
9338 [label="return; 986044"];
9339 [label="Validate(); 986045"];
9340 [label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 986046"];
9341 [label="_state.NotePartComplete(CompletionPart.FinishValidatingImports) 986047"];
9342 [label="param NotePartComplete(CompletionPart part) 986048"];
9343 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 986049"];
9344 [label="param SpinWaitComplete(CompletionPart part) 986050"];
9345 [label="param SpinWaitComplete(this) 986051"];
9346 [label="if (HasComplete(part))\n            {\n                return;\n            } 986052"];
9347 [label="param HasComplete(CompletionPart part) 986053"];
9348 [label="param HasComplete(this) 986054"];
9349 [label="return (_completeParts & (int)part) == (int)part; 986055"];
9350 [label="return; 986056"];
9351 [label="Debug.Assert(HasAtMostOneBitSet(next), 'ForceComplete won't handle the result correctly if more than one bit is set.'); 986057"];
9352 [label="param HasAtMostOneBitSet(int bits) 986058"];
9353 [label="return (bits & (bits - 1)) == 0; 986059"];
9354 [label="return; 986060"];
9355 [label="GlobalImports.Complete(cancellationToken); 986061"];
9356 [label="SourceLocation? location = null; 986062"];
9357 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 986063"];
9358 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 986064"];
9359 [label="Assembly 986065"];
9360 [label="get\n            {\n                return SourceAssembly;\n            } 986066"];
9361 [label="SourceAssembly 986067"];
9362 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 986068"];
9363 [label="GetBoundReferenceManager() 986069"];
9364 [label="param GetBoundReferenceManager(this) 986070"];
9365 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 986071"];
9366 [label="return _referenceManager; 986072"];
9367 [label="GetBoundReferenceManager(); 986073"];
9368 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 986074"];
9369 [label="return SourceAssembly; 986075"];
9370 [label="Assembly.ForceComplete(location, cancellationToken); 986076"];
9371 [label="Assembly.ForceComplete(location, cancellationToken); 986077"];
9372 [label="Assembly.ForceComplete(location, cancellationToken); 986078"];
9373 [label="Assembly.ForceComplete(location, cancellationToken); 986079"];
9374 [label="Assembly.ForceComplete(location, cancellationToken); 986080"];
9375 [label="IncompleteParts 986081"];
9376 [label="int next = incomplete & ~(incomplete - 1); 986082"];
9377 [label="Debug.Assert(HasAtMostOneBitSet(next), 'ForceComplete won't handle the result correctly if more than one bit is set.'); 986083"];
9378 [label="HasAtMostOneBitSet(next) 986084"];
9379 [label="param HasAtMostOneBitSet(int bits) 986085"];
9380 [label="return (bits & (bits - 1)) == 0; 986086"];
9381 [label="return (bits & (bits - 1)) == 0; 986087"];
9382 [label="Debug.Assert(HasAtMostOneBitSet(next), 'ForceComplete won't handle the result correctly if more than one bit is set.'); 986088"];
9383 [label="param SpinWaitComplete(CompletionPart part) 986089"];
9384 [label="param SpinWaitComplete(CancellationToken cancellationToken) 986090"];
9385 [label="param SpinWaitComplete(this) 986091"];
9386 [label="if (HasComplete(part))\n            {\n                return;\n            } 986092"];
9387 [label="HasComplete(part) 986093"];
9388 [label="param HasComplete(CompletionPart part) 986094"];
9389 [label="param HasComplete(this) 986095"];
9390 [label="return (_completeParts & (int)part) == (int)part; 986096"];
9391 [label="return; 986097"];
9392 [label="param ValidateAttributeSemantics(DiagnosticBag diagnostics) 986098"];
9393 [label="param ValidateAttributeSemantics(this) 986099"];
9394 [label="StrongNameKeys 986100"];
9395 [label="get\n            {\n                if (_lazyStrongNameKeys == null)\n                {\n                    try\n                    {\n                        t_assemblyForWhichCurrentThreadIsComputingKeys = this;\n                        Interlocked.CompareExchange(ref _lazyStrongNameKeys, ComputeStrongNameKeys(), null);\n                    }\n                    finally\n                    {\n                        t_assemblyForWhichCurrentThreadIsComputingKeys = null;\n                    }\n                }\n\n                return _lazyStrongNameKeys;\n            } 986101"];
9396 [label="if (_lazyStrongNameKeys == null)\n                {\n                    try\n                    {\n                        t_assemblyForWhichCurrentThreadIsComputingKeys = this;\n                        Interlocked.CompareExchange(ref _lazyStrongNameKeys, ComputeStrongNameKeys(), null);\n                    }\n                    finally\n                    {\n                        t_assemblyForWhichCurrentThreadIsComputingKeys = null;\n                    }\n                } 986102"];
9397 [label="if (StrongNameKeys.DiagnosticOpt != null && !_compilation.Options.OutputKind.IsNetModule())\n            {\n                diagnostics.Add(StrongNameKeys.DiagnosticOpt);\n            } 986103"];
9398 [label="if (StrongNameKeys.DiagnosticOpt != null && !_compilation.Options.OutputKind.IsNetModule())\n            {\n                diagnostics.Add(StrongNameKeys.DiagnosticOpt);\n            } 986104"];
9399 [label="ValidateIVTPublicKeys(diagnostics); 986105"];
9400 [label="ValidateIVTPublicKeys(diagnostics) 986106"];
9401 [label="param ValidateIVTPublicKeys(DiagnosticBag diagnostics) 986107"];
9402 [label="param ValidateIVTPublicKeys(this) 986108"];
9403 [label="EnsureAttributesAreBound() 986109"];
9404 [label="param EnsureAttributesAreBound(this) 986110"];
9405 [label="if ((_lazySourceAttributesBag == null || !_lazySourceAttributesBag.IsSealed) &&\n                LoadAndValidateAttributes(OneOrMany.Create(GetAttributeDeclarations()), ref _lazySourceAttributesBag))\n            {\n                _state.NotePartComplete(CompletionPart.Attributes);\n            } 986111"];
9406 [label="EnsureAttributesAreBound(); 986112"];
9407 [label="this.Identity 986113"];
9408 [label="get\n            {\n                if (lazyAssemblyIdentity == null)\n                    Interlocked.CompareExchange(ref lazyAssemblyIdentity, ComputeIdentity(), null);\n\n                return lazyAssemblyIdentity;\n            } 986114"];
9409 [label="if (lazyAssemblyIdentity == null)\n                    Interlocked.CompareExchange(ref lazyAssemblyIdentity, ComputeIdentity(), null); 986115"];
9410 [label="if (lazyAssemblyIdentity == null)\n                    Interlocked.CompareExchange(ref lazyAssemblyIdentity, ComputeIdentity(), null); 986116"];
9411 [label="Interlocked.CompareExchange(ref lazyAssemblyIdentity, ComputeIdentity(), null); 986117"];
9412 [label="ComputeIdentity() 986118"];
9413 [label="param ComputeIdentity(this) 986119"];
9414 [label="return new AssemblyIdentity(\n                _assemblySimpleName,\n                VersionHelper.GenerateVersionFromPatternAndCurrentTime(_compilation.Options.CurrentLocalTime, AssemblyVersionAttributeSetting),\n                this.AssemblyCultureAttributeSetting,\n                StrongNameKeys.PublicKey,\n                hasPublicKey: !StrongNameKeys.PublicKey.IsDefault); 986120"];
9415 [label="_compilation.Options 986121"];
9416 [label="get\n            {\n                return _options;\n            } 986122"];
9417 [label="return new AssemblyIdentity(\n                _assemblySimpleName,\n                VersionHelper.GenerateVersionFromPatternAndCurrentTime(_compilation.Options.CurrentLocalTime, AssemblyVersionAttributeSetting),\n                this.AssemblyCultureAttributeSetting,\n                StrongNameKeys.PublicKey,\n                hasPublicKey: !StrongNameKeys.PublicKey.IsDefault); 986123"];
9418 [label="AssemblyVersionAttributeSetting 986124"];
9419 [label="get\n            {\n                var defaultValue = (Version)null;\n                var fieldValue = defaultValue;\n\n                var data = GetSourceDecodedWellKnownAttributeData();\n                if (data != null)\n                {\n                    fieldValue = data.AssemblyVersionAttributeSetting;\n                }\n\n                if (fieldValue == defaultValue)\n                {\n                    data = GetNetModuleDecodedWellKnownAttributeData();\n                    if (data != null)\n                    {\n                        fieldValue = data.AssemblyVersionAttributeSetting;\n                    }\n                }\n\n                return fieldValue;\n            } 986125"];
9420 [label="var defaultValue = (Version)null; 986126"];
9421 [label="var fieldValue = defaultValue; 986127"];
9422 [label="GetSourceDecodedWellKnownAttributeData() 986128"];
9423 [label="param GetSourceDecodedWellKnownAttributeData(this) 986129"];
9424 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 986130"];
9425 [label="var data = GetSourceDecodedWellKnownAttributeData(); 986131"];
9426 [label="if (data != null)\n                {\n                    fieldValue = data.AssemblyVersionAttributeSetting;\n                } 986132"];
9427 [label="if (data != null)\n                {\n                    fieldValue = data.AssemblyVersionAttributeSetting;\n                } 986133"];
9428 [label="if (fieldValue == defaultValue)\n                {\n                    data = GetNetModuleDecodedWellKnownAttributeData();\n                    if (data != null)\n                    {\n                        fieldValue = data.AssemblyVersionAttributeSetting;\n                    }\n                } 986134"];
9429 [label="GetNetModuleDecodedWellKnownAttributeData() 986135"];
9430 [label="param GetNetModuleDecodedWellKnownAttributeData(this) 986136"];
9431 [label="EnsureNetModuleAttributesAreBound(); 986137"];
9432 [label="return _lazyNetModuleAttributesBag; 986138"];
9433 [label="var attributesBag = this.GetNetModuleAttributesBag(); 986139"];
9434 [label="Debug.Assert(attributesBag.IsSealed); 986140"];
9435 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 986141"];
9436 [label="data = GetNetModuleDecodedWellKnownAttributeData(); 986142"];
9437 [label="if (data != null)\n                    {\n                        fieldValue = data.AssemblyVersionAttributeSetting;\n                    } 986143"];
9438 [label="if (data != null)\n                    {\n                        fieldValue = data.AssemblyVersionAttributeSetting;\n                    } 986144"];
9439 [label="return fieldValue; 986145"];
9440 [label="return new AssemblyIdentity(\n                _assemblySimpleName,\n                VersionHelper.GenerateVersionFromPatternAndCurrentTime(_compilation.Options.CurrentLocalTime, AssemblyVersionAttributeSetting),\n                this.AssemblyCultureAttributeSetting,\n                StrongNameKeys.PublicKey,\n                hasPublicKey: !StrongNameKeys.PublicKey.IsDefault); 986146"];
9441 [label="return new AssemblyIdentity(\n                _assemblySimpleName,\n                VersionHelper.GenerateVersionFromPatternAndCurrentTime(_compilation.Options.CurrentLocalTime, AssemblyVersionAttributeSetting),\n                this.AssemblyCultureAttributeSetting,\n                StrongNameKeys.PublicKey,\n                hasPublicKey: !StrongNameKeys.PublicKey.IsDefault); 986147"];
9442 [label="this.AssemblyCultureAttributeSetting 986148"];
9443 [label="get\n            {\n                return GetWellKnownAttributeDataStringField(data => data.AssemblyCultureAttributeSetting);\n            } 986149"];
9444 [label="return GetWellKnownAttributeDataStringField(data => data.AssemblyCultureAttributeSetting); 986150"];
9445 [label="GetWellKnownAttributeDataStringField(data => data.AssemblyCultureAttributeSetting) 986151"];
9446 [label="param GetWellKnownAttributeDataStringField(Func<CommonAssemblyWellKnownAttributeData, string> fieldGetter) 986152"];
9447 [label="param GetWellKnownAttributeDataStringField(string missingValue = null) 986153"];
9448 [label="param GetWellKnownAttributeDataStringField(this) 986154"];
9449 [label="GetSourceDecodedWellKnownAttributeData() 986155"];
9450 [label="param GetSourceDecodedWellKnownAttributeData(this) 986156"];
9451 [label="var attributesBag = _lazySourceAttributesBag; 986157"];
9452 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 986158"];
9453 [label="var data = GetSourceDecodedWellKnownAttributeData(); 986159"];
9454 [label="if (data != null)\n            {\n                fieldValue = fieldGetter(data);\n            } 986160"];
9455 [label="if (data != null)\n            {\n                fieldValue = fieldGetter(data);\n            } 986161"];
9456 [label="if ((object)fieldValue == (object)missingValue)\n            {\n                data = GetNetModuleDecodedWellKnownAttributeData();\n                if (data != null)\n                {\n                    fieldValue = fieldGetter(data);\n                }\n            } 986162"];
9457 [label="GetNetModuleDecodedWellKnownAttributeData() 986163"];
9458 [label="param GetNetModuleDecodedWellKnownAttributeData(this) 986164"];
9459 [label="if (_lazyNetModuleAttributesBag == null)\n            {\n                LoadAndValidateNetModuleAttributes(ref _lazyNetModuleAttributesBag);\n            } 986165"];
9460 [label="EnsureNetModuleAttributesAreBound(); 986166"];
9461 [label="return _lazyNetModuleAttributesBag; 986167"];
9462 [label="var attributesBag = this.GetNetModuleAttributesBag(); 986168"];
9463 [label="Debug.Assert(attributesBag.IsSealed); 986169"];
9464 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 986170"];
9465 [label="data = GetNetModuleDecodedWellKnownAttributeData(); 986171"];
9466 [label="if (data != null)\n                {\n                    fieldValue = fieldGetter(data);\n                } 986172"];
9467 [label="if (data != null)\n                {\n                    fieldValue = fieldGetter(data);\n                } 986173"];
9468 [label="return new AssemblyIdentity(\n                _assemblySimpleName,\n                VersionHelper.GenerateVersionFromPatternAndCurrentTime(_compilation.Options.CurrentLocalTime, AssemblyVersionAttributeSetting),\n                this.AssemblyCultureAttributeSetting,\n                StrongNameKeys.PublicKey,\n                hasPublicKey: !StrongNameKeys.PublicKey.IsDefault); 986174"];
9469 [label="StrongNameKeys 986175"];
9470 [label="get\n            {\n                if (_lazyStrongNameKeys == null)\n                {\n                    try\n                    {\n                        t_assemblyForWhichCurrentThreadIsComputingKeys = this;\n                        Interlocked.CompareExchange(ref _lazyStrongNameKeys, ComputeStrongNameKeys(), null);\n                    }\n                    finally\n                    {\n                        t_assemblyForWhichCurrentThreadIsComputingKeys = null;\n                    }\n                }\n\n                return _lazyStrongNameKeys;\n            } 986176"];
9471 [label="if (_lazyStrongNameKeys == null)\n                {\n                    try\n                    {\n                        t_assemblyForWhichCurrentThreadIsComputingKeys = this;\n                        Interlocked.CompareExchange(ref _lazyStrongNameKeys, ComputeStrongNameKeys(), null);\n                    }\n                    finally\n                    {\n                        t_assemblyForWhichCurrentThreadIsComputingKeys = null;\n                    }\n                } 986177"];
9472 [label="return _lazyStrongNameKeys; 986178"];
9473 [label="StrongNameKeys 986179"];
9474 [label="get\n            {\n                if (_lazyStrongNameKeys == null)\n                {\n                    try\n                    {\n                        t_assemblyForWhichCurrentThreadIsComputingKeys = this;\n                        Interlocked.CompareExchange(ref _lazyStrongNameKeys, ComputeStrongNameKeys(), null);\n                    }\n                    finally\n                    {\n                        t_assemblyForWhichCurrentThreadIsComputingKeys = null;\n                    }\n                }\n\n                return _lazyStrongNameKeys;\n            } 986180"];
9475 [label="if (_lazyStrongNameKeys == null)\n                {\n                    try\n                    {\n                        t_assemblyForWhichCurrentThreadIsComputingKeys = this;\n                        Interlocked.CompareExchange(ref _lazyStrongNameKeys, ComputeStrongNameKeys(), null);\n                    }\n                    finally\n                    {\n                        t_assemblyForWhichCurrentThreadIsComputingKeys = null;\n                    }\n                } 986181"];
9476 [label="return _lazyStrongNameKeys; 986182"];
9477 [label="return new AssemblyIdentity(\n                _assemblySimpleName,\n                VersionHelper.GenerateVersionFromPatternAndCurrentTime(_compilation.Options.CurrentLocalTime, AssemblyVersionAttributeSetting),\n                this.AssemblyCultureAttributeSetting,\n                StrongNameKeys.PublicKey,\n                hasPublicKey: !StrongNameKeys.PublicKey.IsDefault); 986183"];
9478 [label="Interlocked.CompareExchange(ref lazyAssemblyIdentity, ComputeIdentity(), null); 986184"];
9479 [label="Interlocked.CompareExchange(ref lazyAssemblyIdentity, ComputeIdentity(), null); 986185"];
9480 [label="return lazyAssemblyIdentity; 986186"];
9481 [label="if (!this.Identity.IsStrongName)\n                return; 986187"];
9482 [label="return; 986188"];
9483 [label="ValidateIVTPublicKeys(diagnostics); 986189"];
9484 [label="CheckOptimisticIVTAccessGrants(diagnostics); 986190"];
9485 [label="CheckOptimisticIVTAccessGrants(diagnostics) 986191"];
9486 [label="param CheckOptimisticIVTAccessGrants(DiagnosticBag bag) 986192"];
9487 [label="param CheckOptimisticIVTAccessGrants(this) 986193"];
9488 [label="ConcurrentDictionary<AssemblySymbol, bool> haveGrantedAssemblies = _optimisticallyGrantedInternalsAccess; 986194"];
9489 [label="if (haveGrantedAssemblies != null)\n            {\n                foreach (var otherAssembly in haveGrantedAssemblies.Keys)\n                {\n                    IVTConclusion conclusion = MakeFinalIVTDetermination(otherAssembly);\n\n                    Debug.Assert(conclusion != IVTConclusion.NoRelationshipClaimed);\n\n                    if (conclusion == IVTConclusion.PublicKeyDoesntMatch)\n                        bag.Add(ErrorCode.ERR_FriendRefNotEqualToThis, NoLocation.Singleton,\n                                                                      otherAssembly.Identity, this.Identity);\n                    else if (conclusion == IVTConclusion.OneSignedOneNot)\n                        bag.Add(ErrorCode.ERR_FriendRefSigningMismatch, NoLocation.Singleton,\n                                                                      otherAssembly.Identity);\n                }\n            } 986195"];
9490 [label="if (haveGrantedAssemblies != null)\n            {\n                foreach (var otherAssembly in haveGrantedAssemblies.Keys)\n                {\n                    IVTConclusion conclusion = MakeFinalIVTDetermination(otherAssembly);\n\n                    Debug.Assert(conclusion != IVTConclusion.NoRelationshipClaimed);\n\n                    if (conclusion == IVTConclusion.PublicKeyDoesntMatch)\n                        bag.Add(ErrorCode.ERR_FriendRefNotEqualToThis, NoLocation.Singleton,\n                                                                      otherAssembly.Identity, this.Identity);\n                    else if (conclusion == IVTConclusion.OneSignedOneNot)\n                        bag.Add(ErrorCode.ERR_FriendRefSigningMismatch, NoLocation.Singleton,\n                                                                      otherAssembly.Identity);\n                }\n            } 986196"];
9491 [label="CheckOptimisticIVTAccessGrants(diagnostics); 986197"];
9492 [label="DetectAttributeAndOptionConflicts(diagnostics); 986198"];
9493 [label="DetectAttributeAndOptionConflicts(diagnostics) 986199"];
9494 [label="param DetectAttributeAndOptionConflicts(DiagnosticBag diagnostics) 986200"];
9495 [label="param DetectAttributeAndOptionConflicts(this) 986201"];
9496 [label="EnsureAttributesAreBound() 986202"];
9497 [label="param EnsureAttributesAreBound(this) 986203"];
9498 [label="if ((_lazySourceAttributesBag == null || !_lazySourceAttributesBag.IsSealed) &&\n                LoadAndValidateAttributes(OneOrMany.Create(GetAttributeDeclarations()), ref _lazySourceAttributesBag))\n            {\n                _state.NotePartComplete(CompletionPart.Attributes);\n            } 986204"];
9499 [label="if ((_lazySourceAttributesBag == null || !_lazySourceAttributesBag.IsSealed) &&\n                LoadAndValidateAttributes(OneOrMany.Create(GetAttributeDeclarations()), ref _lazySourceAttributesBag))\n            {\n                _state.NotePartComplete(CompletionPart.Attributes);\n            } 986205"];
9500 [label="EnsureAttributesAreBound(); 986206"];
9501 [label="this.AssemblyDelaySignAttributeSetting 986207"];
9502 [label="get\n            {\n                var defaultValue = ThreeState.Unknown;\n                var fieldValue = defaultValue;\n\n                var data = GetSourceDecodedWellKnownAttributeData();\n                if (data != null)\n                {\n                    fieldValue = data.AssemblyDelaySignAttributeSetting;\n                }\n\n                if (fieldValue == defaultValue)\n                {\n                    data = GetNetModuleDecodedWellKnownAttributeData();\n                    if (data != null)\n                    {\n                        fieldValue = data.AssemblyDelaySignAttributeSetting;\n                    }\n                }\n\n                return fieldValue;\n            } 986208"];
9503 [label="var defaultValue = ThreeState.Unknown; 986209"];
9504 [label="var fieldValue = defaultValue; 986210"];
9505 [label="GetSourceDecodedWellKnownAttributeData() 986211"];
9506 [label="var attributesBag = _lazySourceAttributesBag; 986212"];
9507 [label="if (attributesBag == null || !attributesBag.IsDecodedWellKnownAttributeDataComputed)\n            {\n                attributesBag = this.GetSourceAttributesBag();\n            } 986213"];
9508 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 986214"];
9509 [label="var data = GetSourceDecodedWellKnownAttributeData(); 986215"];
9510 [label="if (data != null)\n                {\n                    fieldValue = data.AssemblyDelaySignAttributeSetting;\n                } 986216"];
9511 [label="if (data != null)\n                {\n                    fieldValue = data.AssemblyDelaySignAttributeSetting;\n                } 986217"];
9512 [label="if (fieldValue == defaultValue)\n                {\n                    data = GetNetModuleDecodedWellKnownAttributeData();\n                    if (data != null)\n                    {\n                        fieldValue = data.AssemblyDelaySignAttributeSetting;\n                    }\n                } 986218"];
9513 [label="GetNetModuleDecodedWellKnownAttributeData() 986219"];
9514 [label="this.GetNetModuleAttributesBag() 986220"];
9515 [label="EnsureNetModuleAttributesAreBound() 986221"];
9516 [label="if (_lazyNetModuleAttributesBag == null)\n            {\n                LoadAndValidateNetModuleAttributes(ref _lazyNetModuleAttributesBag);\n            } 986222"];
9517 [label="if (_lazyNetModuleAttributesBag == null)\n            {\n                LoadAndValidateNetModuleAttributes(ref _lazyNetModuleAttributesBag);\n            } 986223"];
9518 [label="EnsureNetModuleAttributesAreBound(); 986224"];
9519 [label="return _lazyNetModuleAttributesBag; 986225"];
9520 [label="var attributesBag = this.GetNetModuleAttributesBag(); 986226"];
9521 [label="Debug.Assert(attributesBag.IsSealed); 986227"];
9522 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 986228"];
9523 [label="data = GetNetModuleDecodedWellKnownAttributeData(); 986229"];
9524 [label="if (data != null)\n                    {\n                        fieldValue = data.AssemblyDelaySignAttributeSetting;\n                    } 986230"];
9525 [label="if (data != null)\n                    {\n                        fieldValue = data.AssemblyDelaySignAttributeSetting;\n                    } 986231"];
9526 [label="return fieldValue; 986232"];
9527 [label="ThreeState assemblyDelaySignAttributeSetting = this.AssemblyDelaySignAttributeSetting; 986233"];
9528 [label="_compilation.Options 986234"];
9529 [label="get\n            {\n                return _options;\n            } 986235"];
9530 [label="if (_compilation.Options.DelaySign.HasValue && (assemblyDelaySignAttributeSetting != ThreeState.Unknown) &&\n                (DeclaringCompilation.Options.DelaySign.Value != (assemblyDelaySignAttributeSetting == ThreeState.True)))\n            {\n                diagnostics.Add(ErrorCode.WRN_CmdOptionConflictsSource, NoLocation.Singleton, 'DelaySign', AttributeDescription.AssemblyDelaySignAttribute.FullName);\n            } 986236"];
9531 [label="_compilation.Options 986237"];
9532 [label="get\n            {\n                return _options;\n            } 986238"];
9533 [label="if (_compilation.Options.PublicSign && assemblyDelaySignAttributeSetting == ThreeState.True)\n            {\n                diagnostics.Add(ErrorCode.WRN_CmdOptionConflictsSource, NoLocation.Singleton,\n                    nameof(_compilation.Options.PublicSign),\n                    AttributeDescription.AssemblyDelaySignAttribute.FullName);\n            } 986239"];
9534 [label="_compilation.Options 986240"];
9535 [label="get\n            {\n                return _options;\n            } 986241"];
9536 [label="if (!String.IsNullOrEmpty(_compilation.Options.CryptoKeyContainer))\n            {\n                string assemblyKeyContainerAttributeSetting = this.AssemblyKeyContainerAttributeSetting;\n\n                if ((object)assemblyKeyContainerAttributeSetting == (object)CommonAssemblyWellKnownAttributeData.StringMissingValue)\n                {\n                    if (_compilation.Options.OutputKind == OutputKind.NetModule)\n                    {\n                        // We need to synthesize this attribute for .NET module,\n                        // touch the constructor in order to generate proper use-site diagnostics\n                        Binder.ReportUseSiteDiagnosticForSynthesizedAttribute(_compilation,\n                            WellKnownMember.System_Reflection_AssemblyKeyNameAttribute__ctor,\n                            diagnostics,\n                            NoLocation.Singleton);\n                    }\n                }\n                else if (String.Compare(_compilation.Options.CryptoKeyContainer, assemblyKeyContainerAttributeSetting, StringComparison.OrdinalIgnoreCase) != 0)\n                {\n                    // Native compiler reports a warning in this case, notifying the user that attribute value from source is ignored,\n                    // but it doesn't drop the attribute during emit. That might be fine if we produce an assembly because we actually sign it with correct\n                    // key (the one from compilation options) without relying on the emitted attribute.\n                    // If we are building a .NET module, things get more complicated. In particular, we don't sign the module, we emit an attribute with the key \n                    // information, which will be used to sign an assembly once the module is linked into it. If there is already an attribute like that in source,\n                    // native compiler emits both of them, synthetic attribute is emitted after the one from source. Incidentally, ALink picks the last attribute\n                    // for signing and things seem to work out. However, relying on the order of attributes feels fragile, especially given that Roslyn emits\n                    // synthetic attributes before attributes from source. The behavior we settled on for .NET modules is that, if the attribute in source has the\n                    // same value as the one in compilation options, we won't emit the synthetic attribute. If the value doesn't match, we report an error, which \n                    // is a breaking change. Bottom line, we will never produce a module or an assembly with two attributes, regardless whether values are the same\n                    // or not.\n                    if (_compilation.Options.OutputKind == OutputKind.NetModule)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_CmdOptionConflictsSource, NoLocation.Singleton, AttributeDescription.AssemblyKeyNameAttribute.FullName, 'CryptoKeyContainer');\n                    }\n                    else\n                    {\n                        diagnostics.Add(ErrorCode.WRN_CmdOptionConflictsSource, NoLocation.Singleton, 'CryptoKeyContainer', AttributeDescription.AssemblyKeyNameAttribute.FullName);\n                    }\n                }\n            } 986242"];
9537 [label="_compilation.Options 986243"];
9538 [label="get\n            {\n                return _options;\n            } 986244"];
9539 [label="if (_compilation.Options.PublicSign &&\n                !_compilation.Options.OutputKind.IsNetModule() &&\n                (object)this.AssemblyKeyContainerAttributeSetting != (object)CommonAssemblyWellKnownAttributeData.StringMissingValue)\n            {\n                diagnostics.Add(ErrorCode.WRN_AttributeIgnoredWhenPublicSigning, NoLocation.Singleton, AttributeDescription.AssemblyKeyNameAttribute.FullName);\n            } 986245"];
9540 [label="_compilation.Options 986246"];
9541 [label="get\n            {\n                return _options;\n            } 986247"];
9542 [label="if (!String.IsNullOrEmpty(_compilation.Options.CryptoKeyFile))\n            {\n                string assemblyKeyFileAttributeSetting = this.AssemblyKeyFileAttributeSetting;\n\n                if ((object)assemblyKeyFileAttributeSetting == (object)CommonAssemblyWellKnownAttributeData.StringMissingValue)\n                {\n                    if (_compilation.Options.OutputKind == OutputKind.NetModule)\n                    {\n                        // We need to synthesize this attribute for .NET module,\n                        // touch the constructor in order to generate proper use-site diagnostics\n                        Binder.ReportUseSiteDiagnosticForSynthesizedAttribute(_compilation,\n                            WellKnownMember.System_Reflection_AssemblyKeyFileAttribute__ctor,\n                            diagnostics,\n                            NoLocation.Singleton);\n                    }\n                }\n                else if (String.Compare(_compilation.Options.CryptoKeyFile, assemblyKeyFileAttributeSetting, StringComparison.OrdinalIgnoreCase) != 0)\n                {\n                    // Comment in similar section for CryptoKeyContainer is applicable here as well.\n                    if (_compilation.Options.OutputKind == OutputKind.NetModule)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_CmdOptionConflictsSource, NoLocation.Singleton, AttributeDescription.AssemblyKeyFileAttribute.FullName, 'CryptoKeyFile');\n                    }\n                    else\n                    {\n                        diagnostics.Add(ErrorCode.WRN_CmdOptionConflictsSource, NoLocation.Singleton, 'CryptoKeyFile', AttributeDescription.AssemblyKeyFileAttribute.FullName);\n                    }\n                }\n            } 986248"];
9543 [label="_compilation.Options 986249"];
9544 [label="get\n            {\n                return _options;\n            } 986250"];
9545 [label="if (_compilation.Options.PublicSign &&\n                !_compilation.Options.OutputKind.IsNetModule() &&\n                (object)this.AssemblyKeyFileAttributeSetting != (object)CommonAssemblyWellKnownAttributeData.StringMissingValue)\n            {\n                diagnostics.Add(ErrorCode.WRN_AttributeIgnoredWhenPublicSigning, NoLocation.Singleton, AttributeDescription.AssemblyKeyFileAttribute.FullName);\n            } 986251"];
9546 [label="DetectAttributeAndOptionConflicts(diagnostics); 986252"];
9547 [label="IsDelaySigned 986253"];
9548 [label="get\n            {\n                //commandline setting trumps attribute value. Warning assumed to be given elsewhere\n                if (_compilation.Options.DelaySign.HasValue)\n                {\n                    return _compilation.Options.DelaySign.Value;\n                }\n\n                // The public sign argument should also override the attribute\n                if (_compilation.Options.PublicSign)\n                {\n                    return false;\n                }\n\n                return (this.AssemblyDelaySignAttributeSetting == ThreeState.True);\n            } 986254"];
9549 [label="_compilation.Options 986255"];
9550 [label="get\n            {\n                return _options;\n            } 986256"];
9551 [label="if (_compilation.Options.DelaySign.HasValue)\n                {\n                    return _compilation.Options.DelaySign.Value;\n                } 986257"];
9552 [label="_compilation.Options 986258"];
9553 [label="get\n            {\n                return _options;\n            } 986259"];
9554 [label="if (_compilation.Options.PublicSign)\n                {\n                    return false;\n                } 986260"];
9555 [label="this.AssemblyDelaySignAttributeSetting 986261"];
9556 [label="var defaultValue = ThreeState.Unknown; 986262"];
9557 [label="var fieldValue = defaultValue; 986263"];
9558 [label="GetSourceDecodedWellKnownAttributeData() 986264"];
9559 [label="var attributesBag = _lazySourceAttributesBag; 986265"];
9560 [label="if (attributesBag == null || !attributesBag.IsDecodedWellKnownAttributeDataComputed)\n            {\n                attributesBag = this.GetSourceAttributesBag();\n            } 986266"];
9561 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 986267"];
9562 [label="var data = GetSourceDecodedWellKnownAttributeData(); 986268"];
9563 [label="if (data != null)\n                {\n                    fieldValue = data.AssemblyDelaySignAttributeSetting;\n                } 986269"];
9564 [label="if (data != null)\n                {\n                    fieldValue = data.AssemblyDelaySignAttributeSetting;\n                } 986270"];
9565 [label="if (fieldValue == defaultValue)\n                {\n                    data = GetNetModuleDecodedWellKnownAttributeData();\n                    if (data != null)\n                    {\n                        fieldValue = data.AssemblyDelaySignAttributeSetting;\n                    }\n                } 986271"];
9566 [label="GetNetModuleDecodedWellKnownAttributeData() 986272"];
9567 [label="this.GetNetModuleAttributesBag() 986273"];
9568 [label="EnsureNetModuleAttributesAreBound() 986274"];
9569 [label="if (_lazyNetModuleAttributesBag == null)\n            {\n                LoadAndValidateNetModuleAttributes(ref _lazyNetModuleAttributesBag);\n            } 986275"];
9570 [label="if (_lazyNetModuleAttributesBag == null)\n            {\n                LoadAndValidateNetModuleAttributes(ref _lazyNetModuleAttributesBag);\n            } 986276"];
9571 [label="EnsureNetModuleAttributesAreBound(); 986277"];
9572 [label="return _lazyNetModuleAttributesBag; 986278"];
9573 [label="var attributesBag = this.GetNetModuleAttributesBag(); 986279"];
9574 [label="Debug.Assert(attributesBag.IsSealed); 986280"];
9575 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 986281"];
9576 [label="data = GetNetModuleDecodedWellKnownAttributeData(); 986282"];
9577 [label="if (data != null)\n                    {\n                        fieldValue = data.AssemblyDelaySignAttributeSetting;\n                    } 986283"];
9578 [label="if (data != null)\n                    {\n                        fieldValue = data.AssemblyDelaySignAttributeSetting;\n                    } 986284"];
9579 [label="return fieldValue; 986285"];
9580 [label="return (this.AssemblyDelaySignAttributeSetting == ThreeState.True); 986286"];
9581 [label="if (IsDelaySigned && !Identity.HasPublicKey)\n            {\n                diagnostics.Add(ErrorCode.WRN_DelaySignButNoKey, NoLocation.Singleton);\n            } 986287"];
9582 [label="DeclaringCompilation 986288"];
9583 [label="get\n            {\n                return _compilation;\n            } 986289"];
9584 [label="return _compilation; 986290"];
9585 [label="if (DeclaringCompilation.Options.PublicSign)\n            {\n                if (_compilation.Options.OutputKind.IsNetModule())\n                {\n                    diagnostics.Add(ErrorCode.ERR_PublicSignNetModule, NoLocation.Singleton);\n                }\n                else if (!Identity.HasPublicKey)\n                {\n                    diagnostics.Add(ErrorCode.ERR_PublicSignButNoKey, NoLocation.Singleton);\n                }\n            } 986291"];
9586 [label="DeclaringCompilation.Options 986292"];
9587 [label="get\n            {\n                return _options;\n            } 986293"];
9588 [label="DeclaringCompilation 986294"];
9589 [label="get\n            {\n                return _compilation;\n            } 986295"];
9590 [label="return _compilation; 986296"];
9591 [label="if (DeclaringCompilation.Options.OutputKind != OutputKind.NetModule &&\n                DeclaringCompilation.Options.CryptoPublicKey.IsEmpty &&\n                Identity.HasPublicKey &&\n                !IsDelaySigned &&\n                !DeclaringCompilation.Options.PublicSign &&\n                !StrongNameKeys.CanSign &&\n                StrongNameKeys.DiagnosticOpt == null)\n            {\n                // Since the container always contains both keys, the problem is that the key file didn't contain private key.\n                diagnostics.Add(ErrorCode.ERR_SignButNoPrivateKey, NoLocation.Singleton, StrongNameKeys.KeyFilePath);\n            } 986297"];
9592 [label="DeclaringCompilation.Options 986298"];
9593 [label="get\n            {\n                return _options;\n            } 986299"];
9594 [label="DeclaringCompilation 986300"];
9595 [label="get\n            {\n                return _compilation;\n            } 986301"];
9596 [label="return _compilation; 986302"];
9597 [label="if (DeclaringCompilation.Options.OutputKind != OutputKind.NetModule &&\n                DeclaringCompilation.Options.CryptoPublicKey.IsEmpty &&\n                Identity.HasPublicKey &&\n                !IsDelaySigned &&\n                !DeclaringCompilation.Options.PublicSign &&\n                !StrongNameKeys.CanSign &&\n                StrongNameKeys.DiagnosticOpt == null)\n            {\n                // Since the container always contains both keys, the problem is that the key file didn't contain private key.\n                diagnostics.Add(ErrorCode.ERR_SignButNoPrivateKey, NoLocation.Singleton, StrongNameKeys.KeyFilePath);\n            } 986303"];
9598 [label="DeclaringCompilation.Options 986304"];
9599 [label="get\n            {\n                return _options;\n            } 986305"];
9600 [label="if (DeclaringCompilation.Options.OutputKind != OutputKind.NetModule &&\n                DeclaringCompilation.Options.CryptoPublicKey.IsEmpty &&\n                Identity.HasPublicKey &&\n                !IsDelaySigned &&\n                !DeclaringCompilation.Options.PublicSign &&\n                !StrongNameKeys.CanSign &&\n                StrongNameKeys.DiagnosticOpt == null)\n            {\n                // Since the container always contains both keys, the problem is that the key file didn't contain private key.\n                diagnostics.Add(ErrorCode.ERR_SignButNoPrivateKey, NoLocation.Singleton, StrongNameKeys.KeyFilePath);\n            } 986306"];
9601 [label="Identity 986307"];
9602 [label="get\n            {\n                if (lazyAssemblyIdentity == null)\n                    Interlocked.CompareExchange(ref lazyAssemblyIdentity, ComputeIdentity(), null);\n\n                return lazyAssemblyIdentity;\n            } 986308"];
9603 [label="if (lazyAssemblyIdentity == null)\n                    Interlocked.CompareExchange(ref lazyAssemblyIdentity, ComputeIdentity(), null); 986309"];
9604 [label="if (lazyAssemblyIdentity == null)\n                    Interlocked.CompareExchange(ref lazyAssemblyIdentity, ComputeIdentity(), null); 986310"];
9605 [label="return lazyAssemblyIdentity; 986311"];
9606 [label="if (DeclaringCompilation.Options.OutputKind != OutputKind.NetModule &&\n                DeclaringCompilation.Options.CryptoPublicKey.IsEmpty &&\n                Identity.HasPublicKey &&\n                !IsDelaySigned &&\n                !DeclaringCompilation.Options.PublicSign &&\n                !StrongNameKeys.CanSign &&\n                StrongNameKeys.DiagnosticOpt == null)\n            {\n                // Since the container always contains both keys, the problem is that the key file didn't contain private key.\n                diagnostics.Add(ErrorCode.ERR_SignButNoPrivateKey, NoLocation.Singleton, StrongNameKeys.KeyFilePath);\n            } 986312"];
9607 [label="if (DeclaringCompilation.Options.OutputKind != OutputKind.NetModule &&\n                DeclaringCompilation.Options.CryptoPublicKey.IsEmpty &&\n                Identity.HasPublicKey &&\n                !IsDelaySigned &&\n                !DeclaringCompilation.Options.PublicSign &&\n                !StrongNameKeys.CanSign &&\n                StrongNameKeys.DiagnosticOpt == null)\n            {\n                // Since the container always contains both keys, the problem is that the key file didn't contain private key.\n                diagnostics.Add(ErrorCode.ERR_SignButNoPrivateKey, NoLocation.Singleton, StrongNameKeys.KeyFilePath);\n            } 986313"];
9608 [label="ReportDiagnosticsForSynthesizedAttributes(_compilation, diagnostics); 986314"];
9609 [label="ReportDiagnosticsForSynthesizedAttributes(_compilation, diagnostics); 986315"];
9610 [label="ReportDiagnosticsForSynthesizedAttributes(_compilation, diagnostics) 986316"];
9611 [label="param ReportDiagnosticsForSynthesizedAttributes(CSharpCompilation compilation) 986317"];
9612 [label="param ReportDiagnosticsForSynthesizedAttributes(DiagnosticBag diagnostics) 986318"];
9613 [label="ReportDiagnosticsForUnsafeSynthesizedAttributes(compilation, diagnostics); 986319"];
9614 [label="ReportDiagnosticsForUnsafeSynthesizedAttributes(compilation, diagnostics); 986320"];
9615 [label="ReportDiagnosticsForUnsafeSynthesizedAttributes(compilation, diagnostics) 986321"];
9616 [label="param ReportDiagnosticsForUnsafeSynthesizedAttributes(CSharpCompilation compilation) 986322"];
9617 [label="param ReportDiagnosticsForUnsafeSynthesizedAttributes(DiagnosticBag diagnostics) 986323"];
9618 [label="compilation.Options 986324"];
9619 [label="get\n            {\n                return _options;\n            } 986325"];
9620 [label="CSharpCompilationOptions compilationOptions = compilation.Options; 986326"];
9621 [label="if (!compilationOptions.AllowUnsafe)\n            {\n                return;\n            } 986327"];
9622 [label="return; 986328"];
9623 [label="ReportDiagnosticsForUnsafeSynthesizedAttributes(compilation, diagnostics); 986329"];
9624 [label="compilation.Options 986330"];
9625 [label="get\n            {\n                return _options;\n            } 986331"];
9626 [label="CSharpCompilationOptions compilationOptions = compilation.Options; 986332"];
9627 [label="if (!compilationOptions.OutputKind.IsNetModule())\n            {\n                TypeSymbol compilationRelaxationsAttribute = compilation.GetWellKnownType(WellKnownType.System_Runtime_CompilerServices_CompilationRelaxationsAttribute);\n                Debug.Assert((object)compilationRelaxationsAttribute != null, 'GetWellKnownType unexpectedly returned null');\n                if (!(compilationRelaxationsAttribute is MissingMetadataTypeSymbol))\n                {\n                    // As in Dev10 (see GlobalAttrBind::EmitCompilerGeneratedAttrs), we only synthesize this attribute if CompilationRelaxationsAttribute is found.\n                    Binder.ReportUseSiteDiagnosticForSynthesizedAttribute(compilation,\n                        WellKnownMember.System_Runtime_CompilerServices_CompilationRelaxationsAttribute__ctorInt32, diagnostics, NoLocation.Singleton);\n                }\n\n                TypeSymbol runtimeCompatibilityAttribute = compilation.GetWellKnownType(WellKnownType.System_Runtime_CompilerServices_RuntimeCompatibilityAttribute);\n                Debug.Assert((object)runtimeCompatibilityAttribute != null, 'GetWellKnownType unexpectedly returned null');\n                if (!(runtimeCompatibilityAttribute is MissingMetadataTypeSymbol))\n                {\n                    // As in Dev10 (see GlobalAttrBind::EmitCompilerGeneratedAttrs), we only synthesize this attribute if RuntimeCompatibilityAttribute is found.\n                    Binder.ReportUseSiteDiagnosticForSynthesizedAttribute(compilation,\n                        WellKnownMember.System_Runtime_CompilerServices_RuntimeCompatibilityAttribute__ctor, diagnostics, NoLocation.Singleton);\n\n                    Binder.ReportUseSiteDiagnosticForSynthesizedAttribute(compilation,\n                        WellKnownMember.System_Runtime_CompilerServices_RuntimeCompatibilityAttribute__WrapNonExceptionThrows, diagnostics, NoLocation.Singleton);\n                }\n            } 986333"];
9628 [label="TypeSymbol compilationRelaxationsAttribute = compilation.GetWellKnownType(WellKnownType.System_Runtime_CompilerServices_CompilationRelaxationsAttribute); 986334"];
9629 [label="compilation.GetWellKnownType(WellKnownType.System_Runtime_CompilerServices_CompilationRelaxationsAttribute) 986335"];
9630 [label="param GetWellKnownType(WellKnownType type) 986336"];
9631 [label="param GetWellKnownType(this) 986337"];
9632 [label="Debug.Assert(type.IsValid()); 986338"];
9633 [label="this.Options 986339"];
9634 [label="get\n            {\n                return _options;\n            } 986340"];
9635 [label="bool ignoreCorLibraryDuplicatedTypes = this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes); 986341"];
9636 [label="bool ignoreCorLibraryDuplicatedTypes = this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes); 986342"];
9637 [label="this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) 986343"];
9638 [label="param Includes(this BinderFlags self) 986344"];
9639 [label="param Includes(BinderFlags other) 986345"];
9640 [label="return (self & other) == other; 986346"];
9641 [label="int index = (int)type - (int)WellKnownType.First; 986347"];
9642 [label="if (_lazyWellKnownTypes == null || _lazyWellKnownTypes[index] is null)\n            {\n                if (_lazyWellKnownTypes == null)\n                {\n                    Interlocked.CompareExchange(ref _lazyWellKnownTypes, new NamedTypeSymbol[(int)WellKnownTypes.Count], null);\n                }\n\n                string mdName = type.GetMetadataName();\n                var warnings = DiagnosticBag.GetInstance();\n                NamedTypeSymbol? result;\n                (AssemblySymbol, AssemblySymbol) conflicts = default;\n\n                if (IsTypeMissing(type))\n                {\n                    result = null;\n                }\n                else\n                {\n                    // well-known types introduced before CSharp7 allow lookup ambiguity and report a warning\n                    DiagnosticBag? legacyWarnings = (type <= WellKnownType.CSharp7Sentinel) ? warnings : null;\n                    result = this.Assembly.GetTypeByMetadataName(\n                        mdName, includeReferences: true, useCLSCompliantNameArityEncoding: true, isWellKnownType: true, conflicts: out conflicts,\n                        warnings: legacyWarnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes);\n                }\n\n                if (result is null)\n                {\n                    // TODO: should GetTypeByMetadataName rather return a missing symbol?\n                    MetadataTypeName emittedName = MetadataTypeName.FromFullName(mdName, useCLSCompliantNameArityEncoding: true);\n                    if (type.IsValueTupleType())\n                    {\n                        CSDiagnosticInfo errorInfo;\n                        if (conflicts.Item1 is null)\n                        {\n                            Debug.Assert(conflicts.Item2 is null);\n                            errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_PredefinedValueTupleTypeNotFound, emittedName.FullName);\n                        }\n                        else\n                        {\n                            errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_PredefinedValueTupleTypeAmbiguous3, emittedName.FullName, conflicts.Item1, conflicts.Item2);\n                        }\n\n                        result = new MissingMetadataTypeSymbol.TopLevel(this.Assembly.Modules[0], ref emittedName, type, errorInfo);\n                    }\n                    else\n                    {\n                        result = new MissingMetadataTypeSymbol.TopLevel(this.Assembly.Modules[0], ref emittedName, type);\n                    }\n                }\n\n                if (Interlocked.CompareExchange(ref _lazyWellKnownTypes[index], result, null) is object)\n                {\n                    Debug.Assert(\n                        TypeSymbol.Equals(result, _lazyWellKnownTypes[index], TypeCompareKind.ConsiderEverything2) || (_lazyWellKnownTypes[index]!.IsErrorType() && result.IsErrorType())\n                    );\n                }\n                else\n                {\n                    AdditionalCodegenWarnings.AddRange(warnings);\n                }\n\n                warnings.Free();\n            } 986348"];
9643 [label="if (_lazyWellKnownTypes == null || _lazyWellKnownTypes[index] is null)\n            {\n                if (_lazyWellKnownTypes == null)\n                {\n                    Interlocked.CompareExchange(ref _lazyWellKnownTypes, new NamedTypeSymbol[(int)WellKnownTypes.Count], null);\n                }\n\n                string mdName = type.GetMetadataName();\n                var warnings = DiagnosticBag.GetInstance();\n                NamedTypeSymbol? result;\n                (AssemblySymbol, AssemblySymbol) conflicts = default;\n\n                if (IsTypeMissing(type))\n                {\n                    result = null;\n                }\n                else\n                {\n                    // well-known types introduced before CSharp7 allow lookup ambiguity and report a warning\n                    DiagnosticBag? legacyWarnings = (type <= WellKnownType.CSharp7Sentinel) ? warnings : null;\n                    result = this.Assembly.GetTypeByMetadataName(\n                        mdName, includeReferences: true, useCLSCompliantNameArityEncoding: true, isWellKnownType: true, conflicts: out conflicts,\n                        warnings: legacyWarnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes);\n                }\n\n                if (result is null)\n                {\n                    // TODO: should GetTypeByMetadataName rather return a missing symbol?\n                    MetadataTypeName emittedName = MetadataTypeName.FromFullName(mdName, useCLSCompliantNameArityEncoding: true);\n                    if (type.IsValueTupleType())\n                    {\n                        CSDiagnosticInfo errorInfo;\n                        if (conflicts.Item1 is null)\n                        {\n                            Debug.Assert(conflicts.Item2 is null);\n                            errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_PredefinedValueTupleTypeNotFound, emittedName.FullName);\n                        }\n                        else\n                        {\n                            errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_PredefinedValueTupleTypeAmbiguous3, emittedName.FullName, conflicts.Item1, conflicts.Item2);\n                        }\n\n                        result = new MissingMetadataTypeSymbol.TopLevel(this.Assembly.Modules[0], ref emittedName, type, errorInfo);\n                    }\n                    else\n                    {\n                        result = new MissingMetadataTypeSymbol.TopLevel(this.Assembly.Modules[0], ref emittedName, type);\n                    }\n                }\n\n                if (Interlocked.CompareExchange(ref _lazyWellKnownTypes[index], result, null) is object)\n                {\n                    Debug.Assert(\n                        TypeSymbol.Equals(result, _lazyWellKnownTypes[index], TypeCompareKind.ConsiderEverything2) || (_lazyWellKnownTypes[index]!.IsErrorType() && result.IsErrorType())\n                    );\n                }\n                else\n                {\n                    AdditionalCodegenWarnings.AddRange(warnings);\n                }\n\n                warnings.Free();\n            } 986349"];
9644 [label="if (_lazyWellKnownTypes == null)\n                {\n                    Interlocked.CompareExchange(ref _lazyWellKnownTypes, new NamedTypeSymbol[(int)WellKnownTypes.Count], null);\n                } 986350"];
9645 [label="Interlocked.CompareExchange(ref _lazyWellKnownTypes, new NamedTypeSymbol[(int)WellKnownTypes.Count], null); 986351"];
9646 [label="Interlocked.CompareExchange(ref _lazyWellKnownTypes, new NamedTypeSymbol[(int)WellKnownTypes.Count], null); 986352"];
9647 [label="Interlocked.CompareExchange(ref _lazyWellKnownTypes, new NamedTypeSymbol[(int)WellKnownTypes.Count], null); 986353"];
9648 [label="string mdName = type.GetMetadataName(); 986354"];
9649 [label="var warnings = DiagnosticBag.GetInstance(); 986355"];
9650 [label="NamedTypeSymbol? result; 986356"];
9651 [label="(AssemblySymbol, AssemblySymbol) conflicts = default; 986357"];
9652 [label="if (IsTypeMissing(type))\n                {\n                    result = null;\n                }\n                else\n                {\n                    // well-known types introduced before CSharp7 allow lookup ambiguity and report a warning\n                    DiagnosticBag? legacyWarnings = (type <= WellKnownType.CSharp7Sentinel) ? warnings : null;\n                    result = this.Assembly.GetTypeByMetadataName(\n                        mdName, includeReferences: true, useCLSCompliantNameArityEncoding: true, isWellKnownType: true, conflicts: out conflicts,\n                        warnings: legacyWarnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes);\n                } 986358"];
9653 [label="if (IsTypeMissing(type))\n                {\n                    result = null;\n                }\n                else\n                {\n                    // well-known types introduced before CSharp7 allow lookup ambiguity and report a warning\n                    DiagnosticBag? legacyWarnings = (type <= WellKnownType.CSharp7Sentinel) ? warnings : null;\n                    result = this.Assembly.GetTypeByMetadataName(\n                        mdName, includeReferences: true, useCLSCompliantNameArityEncoding: true, isWellKnownType: true, conflicts: out conflicts,\n                        warnings: legacyWarnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes);\n                } 986359"];
9654 [label="DiagnosticBag? legacyWarnings = (type <= WellKnownType.CSharp7Sentinel) ? warnings : null; 986360"];
9655 [label="(type <= WellKnownType.CSharp7Sentinel) 986361"];
9656 [label="DiagnosticBag? legacyWarnings = (type <= WellKnownType.CSharp7Sentinel) ? warnings : null; 986362"];
9657 [label="this.Assembly 986363"];
9658 [label="GetBoundReferenceManager() 986364"];
9659 [label="GetBoundReferenceManager(); 986365"];
9660 [label="result = this.Assembly.GetTypeByMetadataName(\n                        mdName, includeReferences: true, useCLSCompliantNameArityEncoding: true, isWellKnownType: true, conflicts: out conflicts,\n                        warnings: legacyWarnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes); 986366"];
9661 [label="result = this.Assembly.GetTypeByMetadataName(\n                        mdName, includeReferences: true, useCLSCompliantNameArityEncoding: true, isWellKnownType: true, conflicts: out conflicts,\n                        warnings: legacyWarnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes); 986367"];
9662 [label="result = this.Assembly.GetTypeByMetadataName(\n                        mdName, includeReferences: true, useCLSCompliantNameArityEncoding: true, isWellKnownType: true, conflicts: out conflicts,\n                        warnings: legacyWarnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes); 986368"];
9663 [label="result = this.Assembly.GetTypeByMetadataName(\n                        mdName, includeReferences: true, useCLSCompliantNameArityEncoding: true, isWellKnownType: true, conflicts: out conflicts,\n                        warnings: legacyWarnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes); 986369"];
9664 [label="result = this.Assembly.GetTypeByMetadataName(\n                        mdName, includeReferences: true, useCLSCompliantNameArityEncoding: true, isWellKnownType: true, conflicts: out conflicts,\n                        warnings: legacyWarnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes); 986370"];
9665 [label="result = this.Assembly.GetTypeByMetadataName(\n                        mdName, includeReferences: true, useCLSCompliantNameArityEncoding: true, isWellKnownType: true, conflicts: out conflicts,\n                        warnings: legacyWarnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes); 986371"];
9666 [label="this.Assembly.GetTypeByMetadataName(\n                        mdName, includeReferences: true, useCLSCompliantNameArityEncoding: true, isWellKnownType: true, conflicts: out conflicts,\n                        warnings: legacyWarnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes) 986372"];
9667 [label="param GetTypeByMetadataName(string metadataName) 986373"];
9668 [label="param GetTypeByMetadataName(bool includeReferences) 986374"];
9669 [label="param GetTypeByMetadataName(bool isWellKnownType) 986375"];
9670 [label="param GetTypeByMetadataName(out (AssemblySymbol, AssemblySymbol) conflicts) 986376"];
9671 [label="param GetTypeByMetadataName(bool useCLSCompliantNameArityEncoding = false) 986377"];
9672 [label="param GetTypeByMetadataName(DiagnosticBag warnings = null) 986378"];
9673 [label="param GetTypeByMetadataName(bool ignoreCorLibraryDuplicatedTypes = false) 986379"];
9674 [label="param GetTypeByMetadataName(this) 986380"];
9675 [label="NamedTypeSymbol type; 986381"];
9676 [label="MetadataTypeName mdName; 986382"];
9677 [label="mdName 986383"];
9678 [label="if (metadataName.IndexOf('+') >= 0)\n            {\n                var parts = metadataName.Split(s_nestedTypeNameSeparators);\n                Debug.Assert(parts.Length > 0);\n                mdName = MetadataTypeName.FromFullName(parts[0], useCLSCompliantNameArityEncoding);\n                type = GetTopLevelTypeByMetadataName(ref mdName, assemblyOpt: null, includeReferences: includeReferences, isWellKnownType: isWellKnownType,\n                    conflicts: out conflicts, warnings: warnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes);\n\n                for (int i = 1; (object)type != null && !type.IsErrorType() && i < parts.Length; i++)\n                {\n                    mdName = MetadataTypeName.FromTypeName(parts[i]);\n                    NamedTypeSymbol temp = type.LookupMetadataType(ref mdName);\n                    type = (!isWellKnownType || IsValidWellKnownType(temp)) ? temp : null;\n                }\n            }\n            else\n            {\n                mdName = MetadataTypeName.FromFullName(metadataName, useCLSCompliantNameArityEncoding);\n                type = GetTopLevelTypeByMetadataName(ref mdName, assemblyOpt: null, includeReferences: includeReferences, isWellKnownType: isWellKnownType,\n                    conflicts: out conflicts, warnings: warnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes);\n            } 986384"];
9679 [label="if (metadataName.IndexOf('+') >= 0)\n            {\n                var parts = metadataName.Split(s_nestedTypeNameSeparators);\n                Debug.Assert(parts.Length > 0);\n                mdName = MetadataTypeName.FromFullName(parts[0], useCLSCompliantNameArityEncoding);\n                type = GetTopLevelTypeByMetadataName(ref mdName, assemblyOpt: null, includeReferences: includeReferences, isWellKnownType: isWellKnownType,\n                    conflicts: out conflicts, warnings: warnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes);\n\n                for (int i = 1; (object)type != null && !type.IsErrorType() && i < parts.Length; i++)\n                {\n                    mdName = MetadataTypeName.FromTypeName(parts[i]);\n                    NamedTypeSymbol temp = type.LookupMetadataType(ref mdName);\n                    type = (!isWellKnownType || IsValidWellKnownType(temp)) ? temp : null;\n                }\n            }\n            else\n            {\n                mdName = MetadataTypeName.FromFullName(metadataName, useCLSCompliantNameArityEncoding);\n                type = GetTopLevelTypeByMetadataName(ref mdName, assemblyOpt: null, includeReferences: includeReferences, isWellKnownType: isWellKnownType,\n                    conflicts: out conflicts, warnings: warnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes);\n            } 986385"];
9680 [label="mdName = MetadataTypeName.FromFullName(metadataName, useCLSCompliantNameArityEncoding); 986386"];
9681 [label="mdName = MetadataTypeName.FromFullName(metadataName, useCLSCompliantNameArityEncoding); 986387"];
9682 [label="mdName = MetadataTypeName.FromFullName(metadataName, useCLSCompliantNameArityEncoding); 986388"];
9683 [label="type = GetTopLevelTypeByMetadataName(ref mdName, assemblyOpt: null, includeReferences: includeReferences, isWellKnownType: isWellKnownType,\n                    conflicts: out conflicts, warnings: warnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes); 986389"];
9684 [label="type = GetTopLevelTypeByMetadataName(ref mdName, assemblyOpt: null, includeReferences: includeReferences, isWellKnownType: isWellKnownType,\n                    conflicts: out conflicts, warnings: warnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes); 986390"];
9685 [label="type = GetTopLevelTypeByMetadataName(ref mdName, assemblyOpt: null, includeReferences: includeReferences, isWellKnownType: isWellKnownType,\n                    conflicts: out conflicts, warnings: warnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes); 986391"];
9686 [label="type = GetTopLevelTypeByMetadataName(ref mdName, assemblyOpt: null, includeReferences: includeReferences, isWellKnownType: isWellKnownType,\n                    conflicts: out conflicts, warnings: warnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes); 986392"];
9687 [label="type = GetTopLevelTypeByMetadataName(ref mdName, assemblyOpt: null, includeReferences: includeReferences, isWellKnownType: isWellKnownType,\n                    conflicts: out conflicts, warnings: warnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes); 986393"];
9688 [label="type = GetTopLevelTypeByMetadataName(ref mdName, assemblyOpt: null, includeReferences: includeReferences, isWellKnownType: isWellKnownType,\n                    conflicts: out conflicts, warnings: warnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes); 986394"];
9689 [label="type = GetTopLevelTypeByMetadataName(ref mdName, assemblyOpt: null, includeReferences: includeReferences, isWellKnownType: isWellKnownType,\n                    conflicts: out conflicts, warnings: warnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes); 986395"];
9690 [label="GetTopLevelTypeByMetadataName(ref mdName, assemblyOpt: null, includeReferences: includeReferences, isWellKnownType: isWellKnownType,\n                    conflicts: out conflicts, warnings: warnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes) 986396"];
9691 [label="param GetTopLevelTypeByMetadataName(ref MetadataTypeName metadataName) 986397"];
9692 [label="param GetTopLevelTypeByMetadataName(AssemblyIdentity assemblyOpt) 986398"];
9693 [label="param GetTopLevelTypeByMetadataName(bool includeReferences) 986399"];
9694 [label="param GetTopLevelTypeByMetadataName(bool isWellKnownType) 986400"];
9695 [label="param GetTopLevelTypeByMetadataName(out (AssemblySymbol, AssemblySymbol) conflicts) 986401"];
9696 [label="param GetTopLevelTypeByMetadataName(DiagnosticBag warnings = null) 986402"];
9697 [label="param GetTopLevelTypeByMetadataName(bool ignoreCorLibraryDuplicatedTypes = false) 986403"];
9698 [label="param GetTopLevelTypeByMetadataName(this) 986404"];
9699 [label="conflicts = default; 986405"];
9700 [label="NamedTypeSymbol result; 986406"];
9701 [label="result = GetTopLevelTypeByMetadataName(this, ref metadataName, assemblyOpt); 986407"];
9702 [label="result = GetTopLevelTypeByMetadataName(this, ref metadataName, assemblyOpt); 986408"];
9703 [label="result = GetTopLevelTypeByMetadataName(this, ref metadataName, assemblyOpt); 986409"];
9704 [label="GetTopLevelTypeByMetadataName(this, ref metadataName, assemblyOpt) 986410"];
9705 [label="param GetTopLevelTypeByMetadataName(AssemblySymbol assembly) 986411"];
9706 [label="param GetTopLevelTypeByMetadataName(ref MetadataTypeName metadataName) 986412"];
9707 [label="param GetTopLevelTypeByMetadataName(AssemblyIdentity assemblyOpt) 986413"];
9708 [label="var result = assembly.LookupTopLevelMetadataType(ref metadataName, digThroughForwardedTypes: false); 986414"];
9709 [label="var result = assembly.LookupTopLevelMetadataType(ref metadataName, digThroughForwardedTypes: false); 986415"];
9710 [label="assembly.LookupTopLevelMetadataType(ref metadataName, digThroughForwardedTypes: false) 986416"];
9711 [label="param LookupTopLevelMetadataType(ref MetadataTypeName emittedName) 986417"];
9712 [label="param LookupTopLevelMetadataType(bool digThroughForwardedTypes) 986418"];
9713 [label="param LookupTopLevelMetadataType(this) 986419"];
9714 [label="return LookupTopLevelMetadataTypeWithCycleDetection(ref emittedName, visitedAssemblies: null, digThroughForwardedTypes: digThroughForwardedTypes); 986420"];
9715 [label="return LookupTopLevelMetadataTypeWithCycleDetection(ref emittedName, visitedAssemblies: null, digThroughForwardedTypes: digThroughForwardedTypes); 986421"];
9716 [label="return LookupTopLevelMetadataTypeWithCycleDetection(ref emittedName, visitedAssemblies: null, digThroughForwardedTypes: digThroughForwardedTypes); 986422"];
9717 [label="LookupTopLevelMetadataTypeWithCycleDetection(ref emittedName, visitedAssemblies: null, digThroughForwardedTypes: digThroughForwardedTypes) 986423"];
9718 [label="param LookupTopLevelMetadataTypeWithCycleDetection(ref MetadataTypeName emittedName) 986424"];
9719 [label="param LookupTopLevelMetadataTypeWithCycleDetection(ConsList<AssemblySymbol> visitedAssemblies) 986425"];
9720 [label="param LookupTopLevelMetadataTypeWithCycleDetection(bool digThroughForwardedTypes) 986426"];
9721 [label="param LookupTopLevelMetadataTypeWithCycleDetection(this) 986427"];
9722 [label="NamedTypeSymbol result = null; 986428"];
9723 [label="result = LookupTopLevelMetadataTypeInCache(ref emittedName); 986429"];
9724 [label="LookupTopLevelMetadataTypeInCache(ref emittedName) 986430"];
9725 [label="param LookupTopLevelMetadataTypeInCache(ref MetadataTypeName emittedName) 986431"];
9726 [label="param LookupTopLevelMetadataTypeInCache(this) 986432"];
9727 [label="NamedTypeSymbol result = null; 986433"];
9728 [label="if (_emittedNameToTypeMap.TryGetValue(emittedName.ToKey(), out result))\n            {\n                return result;\n            } 986434"];
9729 [label="if (_emittedNameToTypeMap.TryGetValue(emittedName.ToKey(), out result))\n            {\n                return result;\n            } 986435"];
9730 [label="if (_emittedNameToTypeMap.TryGetValue(emittedName.ToKey(), out result))\n            {\n                return result;\n            } 986436"];
9731 [label="return null; 986437"];
9732 [label="result = LookupTopLevelMetadataTypeInCache(ref emittedName); 986438"];
9733 [label="if ((object)result != null)\n            {\n                // We only cache result equivalent to digging through type forwarders, which\n                // might produce a forwarder specific ErrorTypeSymbol. We don't want to \n                // return that error symbol, unless digThroughForwardedTypes is true.\n                if (digThroughForwardedTypes || (!result.IsErrorType() && (object)result.ContainingAssembly == (object)this))\n                {\n                    return result;\n                }\n\n                // According to the cache, the type wasn't found, or isn't declared in this assembly (forwarded).\n                return new MissingMetadataTypeSymbol.TopLevel(this.Modules[0], ref emittedName);\n            }\n            else\n            {\n                // Now we will look for the type in each module of the assembly and pick the first type\n                // we find, this is what native VB compiler does.\n\n                var modules = this.Modules;\n                var count = modules.Length;\n                var i = 0;\n\n                result = modules[i].LookupTopLevelMetadataType(ref emittedName);\n\n                if (result is MissingMetadataTypeSymbol)\n                {\n                    for (i = 1; i < count; i++)\n                    {\n                        var newResult = modules[i].LookupTopLevelMetadataType(ref emittedName);\n\n                        // Hold on to the first missing type result, unless we found the type.\n                        if (!(newResult is MissingMetadataTypeSymbol))\n                        {\n                            result = newResult;\n                            break;\n                        }\n                    }\n                }\n\n                bool foundMatchInThisAssembly = (i < count);\n\n                Debug.Assert(!foundMatchInThisAssembly || (object)result.ContainingAssembly == (object)this);\n\n                if (!foundMatchInThisAssembly && digThroughForwardedTypes)\n                {\n                    // We didn't find the type\n                    System.Diagnostics.Debug.Assert(result is MissingMetadataTypeSymbol);\n\n                    NamedTypeSymbol forwarded = TryLookupForwardedMetadataTypeWithCycleDetection(ref emittedName, visitedAssemblies);\n                    if ((object)forwarded != null)\n                    {\n                        result = forwarded;\n                    }\n                }\n\n                System.Diagnostics.Debug.Assert((object)result != null);\n\n                // Add result of the lookup into the cache\n                if (digThroughForwardedTypes || foundMatchInThisAssembly)\n                {\n                    CacheTopLevelMetadataType(ref emittedName, result);\n                }\n\n                return result;\n            } 986439"];
9734 [label="if ((object)result != null)\n            {\n                // We only cache result equivalent to digging through type forwarders, which\n                // might produce a forwarder specific ErrorTypeSymbol. We don't want to \n                // return that error symbol, unless digThroughForwardedTypes is true.\n                if (digThroughForwardedTypes || (!result.IsErrorType() && (object)result.ContainingAssembly == (object)this))\n                {\n                    return result;\n                }\n\n                // According to the cache, the type wasn't found, or isn't declared in this assembly (forwarded).\n                return new MissingMetadataTypeSymbol.TopLevel(this.Modules[0], ref emittedName);\n            }\n            else\n            {\n                // Now we will look for the type in each module of the assembly and pick the first type\n                // we find, this is what native VB compiler does.\n\n                var modules = this.Modules;\n                var count = modules.Length;\n                var i = 0;\n\n                result = modules[i].LookupTopLevelMetadataType(ref emittedName);\n\n                if (result is MissingMetadataTypeSymbol)\n                {\n                    for (i = 1; i < count; i++)\n                    {\n                        var newResult = modules[i].LookupTopLevelMetadataType(ref emittedName);\n\n                        // Hold on to the first missing type result, unless we found the type.\n                        if (!(newResult is MissingMetadataTypeSymbol))\n                        {\n                            result = newResult;\n                            break;\n                        }\n                    }\n                }\n\n                bool foundMatchInThisAssembly = (i < count);\n\n                Debug.Assert(!foundMatchInThisAssembly || (object)result.ContainingAssembly == (object)this);\n\n                if (!foundMatchInThisAssembly && digThroughForwardedTypes)\n                {\n                    // We didn't find the type\n                    System.Diagnostics.Debug.Assert(result is MissingMetadataTypeSymbol);\n\n                    NamedTypeSymbol forwarded = TryLookupForwardedMetadataTypeWithCycleDetection(ref emittedName, visitedAssemblies);\n                    if ((object)forwarded != null)\n                    {\n                        result = forwarded;\n                    }\n                }\n\n                System.Diagnostics.Debug.Assert((object)result != null);\n\n                // Add result of the lookup into the cache\n                if (digThroughForwardedTypes || foundMatchInThisAssembly)\n                {\n                    CacheTopLevelMetadataType(ref emittedName, result);\n                }\n\n                return result;\n            } 986440"];
9735 [label="this.Modules 986441"];
9736 [label="get\n            {\n                return _modules;\n            } 986442"];
9737 [label="return _modules; 986443"];
9738 [label="var modules = this.Modules; 986444"];
9739 [label="var count = modules.Length; 986445"];
9740 [label="var i = 0; 986446"];
9741 [label="result = modules[i].LookupTopLevelMetadataType(ref emittedName); 986447"];
9742 [label="result = modules[i].LookupTopLevelMetadataType(ref emittedName); 986448"];
9743 [label="modules[i].LookupTopLevelMetadataType(ref emittedName) 986449"];
9744 [label="param LookupTopLevelMetadataType(ref MetadataTypeName emittedName) 986450"];
9745 [label="param LookupTopLevelMetadataType(this) 986451"];
9746 [label="NamedTypeSymbol result; 986452"];
9747 [label="this.GlobalNamespace 986453"];
9748 [label="get\n            {\n                if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                }\n\n                return _globalNamespace;\n            } 986454"];
9749 [label="if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                } 986455"];
9750 [label="if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                } 986456"];
9751 [label="var diagnostics = DiagnosticBag.GetInstance(); 986457"];
9752 [label="var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics); 986458"];
9753 [label="DeclaringCompilation 986459"];
9754 [label="get\n            {\n                return _assemblySymbol.DeclaringCompilation;\n            } 986460"];
9755 [label="_assemblySymbol.DeclaringCompilation 986461"];
9756 [label="get\n            {\n                return _compilation;\n            } 986462"];
9757 [label="return _assemblySymbol.DeclaringCompilation; 986463"];
9758 [label="var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics); 986464"];
9759 [label="DeclaringCompilation.MergedRootDeclaration 986465"];
9760 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 986466"];
9761 [label="compilation.Declarations 986467"];
9762 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 986468"];
9763 [label="Debug.Assert(compilation.Declarations == this); 986469"];
9764 [label="return _mergedRoot; 986470"];
9765 [label="0x1 986471"];
9766 [label="LazyAllMembersIsSorted = 0x1 986472"];
9767 [label="d =>\n            new NamespaceDeclarationSyntaxReference(d.SyntaxReference) 986473"];
9768 [label="s_declaringSyntaxReferencesSelector = d =>\n            new NamespaceDeclarationSyntaxReference(d.SyntaxReference) 986474"];
9769 [label="var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics); 986475"];
9770 [label="var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics); 986476"];
9771 [label="new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics) 986477"];
9772 [label="param SourceNamespaceSymbol(SourceModuleSymbol module) 986478"];
9773 [label="param SourceNamespaceSymbol(Symbol container) 986479"];
9774 [label="param SourceNamespaceSymbol(MergedNamespaceDeclaration mergedDeclaration) 986480"];
9775 [label="param SourceNamespaceSymbol(DiagnosticBag diagnostics) 986481"];
9776 [label="param SourceNamespaceSymbol(this) 986482"];
9777 [label="param SourceNamespaceSymbol(this) 986483"];
9778 [label="_module 986484"];
9779 [label="_container 986485"];
9780 [label="_mergedDeclaration 986486"];
9781 [label="_nameToMembersMap 986487"];
9782 [label="_nameToTypeMembersMap 986488"];
9783 [label="_flags 986489"];
9784 [label="new LexicalSortKey() { _treeOrdinal = -1, _position = 0 } 986490"];
9785 [label="1 986491"];
9786 [label="_treeOrdinal 986492"];
9787 [label="0 986493"];
9788 [label="_position 986494"];
9789 [label="NotInSource = new LexicalSortKey() { _treeOrdinal = -1, _position = 0 } 986495"];
9790 [label="new LexicalSortKey() { _treeOrdinal = -1, _position = -1 } 986496"];
9791 [label="1 986497"];
9792 [label="_treeOrdinal 986498"];
9793 [label="1 986499"];
9794 [label="_position 986500"];
9795 [label="NotInitialized = new LexicalSortKey() { _treeOrdinal = -1, _position = -1 } 986501"];
9796 [label="new LexicalSortKey() { _treeOrdinal = int.MaxValue, _position = int.MaxValue - 1 } 986502"];
9797 [label="_treeOrdinal 986503"];
9798 [label="1 986504"];
9799 [label="int.MaxValue - 1 986505"];
9800 [label="_position 986506"];
9801 [label="SynthesizedCtor = new LexicalSortKey() { _treeOrdinal = int.MaxValue, _position = int.MaxValue - 1 } 986507"];
9802 [label="new LexicalSortKey() { _treeOrdinal = int.MaxValue, _position = int.MaxValue } 986508"];
9803 [label="_treeOrdinal 986509"];
9804 [label="_position 986510"];
9805 [label="SynthesizedCCtor = new LexicalSortKey() { _treeOrdinal = int.MaxValue, _position = int.MaxValue } 986511"];
9806 [label="_lazyLexicalSortKey = LexicalSortKey.NotInitialized 986512"];
9807 [label="Debug.Assert(mergedDeclaration != null); 986513"];
9808 [label="Debug.Assert(mergedDeclaration != null); 986514"];
9809 [label="_module 986515"];
9810 [label="_container 986516"];
9811 [label="_mergedDeclaration 986517"];
9812 [label="mergedDeclaration.Declarations 986518"];
9813 [label="get { return _declarations; } 986519"];
9814 [label="foreach (var singleDeclaration in mergedDeclaration.Declarations)\n            {\n                diagnostics.AddRange(singleDeclaration.Diagnostics);\n            } 986520"];
9815 [label="diagnostics.AddRange(singleDeclaration.Diagnostics); 986521"];
9816 [label="diagnostics.AddRange(singleDeclaration.Diagnostics); 986522"];
9817 [label="Debug.Assert(diagnostics.IsEmptyWithoutResolution); 986523"];
9818 [label="diagnostics.Free(); 986524"];
9819 [label="Interlocked.CompareExchange(ref _globalNamespace, globalNS, null); 986525"];
9820 [label="Interlocked.CompareExchange(ref _globalNamespace, globalNS, null); 986526"];
9821 [label="Interlocked.CompareExchange(ref _globalNamespace, globalNS, null); 986527"];
9822 [label="Interlocked.CompareExchange(ref _globalNamespace, globalNS, null); 986528"];
9823 [label="return _globalNamespace; 986529"];
9824 [label="NamespaceSymbol scope = this.GlobalNamespace.LookupNestedNamespace(emittedName.NamespaceSegments); 986530"];
9825 [label="NamespaceSymbol scope = this.GlobalNamespace.LookupNestedNamespace(emittedName.NamespaceSegments); 986531"];
9826 [label="this.GlobalNamespace.LookupNestedNamespace(emittedName.NamespaceSegments) 986532"];
9827 [label="param LookupNestedNamespace(ImmutableArray<string> names) 986533"];
9828 [label="param LookupNestedNamespace(this) 986534"];
9829 [label="NamespaceSymbol scope = this; 986535"];
9830 [label="foreach (string name in names)\n            {\n                NamespaceSymbol nextScope = null;\n\n                foreach (NamespaceOrTypeSymbol symbol in scope.GetMembers(name))\n                {\n                    var ns = symbol as NamespaceSymbol;\n\n                    if ((object)ns != null)\n                    {\n                        if ((object)nextScope != null)\n                        {\n                            Debug.Assert((object)nextScope == null, 'Why did we run into an unmerged namespace?');\n                            nextScope = null;\n                            break;\n                        }\n\n                        nextScope = ns;\n                    }\n                }\n\n                scope = nextScope;\n\n                if ((object)scope == null)\n                {\n                    break;\n                }\n            } 986536"];
9831 [label="foreach (string name in names)\n            {\n                NamespaceSymbol nextScope = null;\n\n                foreach (NamespaceOrTypeSymbol symbol in scope.GetMembers(name))\n                {\n                    var ns = symbol as NamespaceSymbol;\n\n                    if ((object)ns != null)\n                    {\n                        if ((object)nextScope != null)\n                        {\n                            Debug.Assert((object)nextScope == null, 'Why did we run into an unmerged namespace?');\n                            nextScope = null;\n                            break;\n                        }\n\n                        nextScope = ns;\n                    }\n                }\n\n                scope = nextScope;\n\n                if ((object)scope == null)\n                {\n                    break;\n                }\n            } 986537"];
9832 [label="NamespaceSymbol nextScope = null; 986538"];
9833 [label="foreach (NamespaceOrTypeSymbol symbol in scope.GetMembers(name))\n                {\n                    var ns = symbol as NamespaceSymbol;\n\n                    if ((object)ns != null)\n                    {\n                        if ((object)nextScope != null)\n                        {\n                            Debug.Assert((object)nextScope == null, 'Why did we run into an unmerged namespace?');\n                            nextScope = null;\n                            break;\n                        }\n\n                        nextScope = ns;\n                    }\n                } 986539"];
9834 [label="scope.GetMembers(name) 986540"];
9835 [label="param GetMembers(string name) 986541"];
9836 [label="param GetMembers(this) 986542"];
9837 [label="ImmutableArray<NamespaceOrTypeSymbol> members; 986543"];
9838 [label="members 986544"];
9839 [label="this.GetNameToMembersMap() 986545"];
9840 [label="param GetNameToMembersMap(this) 986546"];
9841 [label="if (_nameToMembersMap == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                }\n\n                diagnostics.Free();\n            } 986547"];
9842 [label="if (_nameToMembersMap == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                }\n\n                diagnostics.Free();\n            } 986548"];
9843 [label="var diagnostics = DiagnosticBag.GetInstance(); 986549"];
9844 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 986550"];
9845 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 986551"];
9846 [label="MakeNameToMembersMap(diagnostics) 986552"];
9847 [label="param MakeNameToMembersMap(DiagnosticBag diagnostics) 986553"];
9848 [label="param MakeNameToMembersMap(this) 986554"];
9849 [label="_mergedDeclaration.Children 986555"];
9850 [label="get\n            {\n                if (_lazyChildren.IsDefault)\n                {\n                    ImmutableInterlocked.InterlockedInitialize(ref _lazyChildren, MakeChildren());\n                }\n\n                return _lazyChildren;\n            } 986556"];
9851 [label="if (_lazyChildren.IsDefault)\n                {\n                    ImmutableInterlocked.InterlockedInitialize(ref _lazyChildren, MakeChildren());\n                } 986557"];
9852 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyChildren, MakeChildren()); 986558"];
9853 [label="MakeChildren() 986559"];
9854 [label="param MakeChildren(this) 986560"];
9855 [label="ArrayBuilder<SingleNamespaceDeclaration> namespaces = null; 986561"];
9856 [label="ArrayBuilder<SingleTypeDeclaration> types = null; 986562"];
9857 [label="bool allNamespacesHaveSameName = true; 986563"];
9858 [label="bool allTypesHaveSameIdentity = true; 986564"];
9859 [label="foreach (var decl in _declarations)\n            {\n                foreach (var child in decl.Children)\n                {\n                    // it is either a type (more likely)\n                    var asType = child as SingleTypeDeclaration;\n                    if (asType != null)\n                    {\n                        // handle types\n                        if (types == null)\n                        {\n                            types = ArrayBuilder<SingleTypeDeclaration>.GetInstance();\n                        }\n                        else if (allTypesHaveSameIdentity && !asType.Identity.Equals(types[0].Identity))\n                        {\n                            allTypesHaveSameIdentity = false;\n                        }\n\n                        types.Add(asType);\n                        continue;\n                    }\n\n                    // or it is a namespace\n                    var asNamespace = child as SingleNamespaceDeclaration;\n                    if (asNamespace != null)\n                    {\n                        // handle namespace\n                        if (namespaces == null)\n                        {\n                            namespaces = ArrayBuilder<SingleNamespaceDeclaration>.GetInstance();\n                        }\n                        else if (allNamespacesHaveSameName && !asNamespace.Name.Equals(namespaces[0].Name))\n                        {\n                            allNamespacesHaveSameName = false;\n                        }\n\n                        namespaces.Add(asNamespace);\n                        continue;\n                    }\n\n                    // Not sure if we can get here, perhaps, if we have errors, \n                    // but we care only about types and namespaces anyways.\n                }\n            } 986565"];
9860 [label="decl.Children 986566"];
9861 [label="get\n            {\n                return this.GetNamespaceOrTypeDeclarationChildren();\n            } 986567"];
9862 [label="this.GetNamespaceOrTypeDeclarationChildren() 986568"];
9863 [label="param GetNamespaceOrTypeDeclarationChildren(this) 986569"];
9864 [label="return _children; 986570"];
9865 [label="return this.GetNamespaceOrTypeDeclarationChildren(); 986571"];
9866 [label="foreach (var child in decl.Children)\n                {\n                    // it is either a type (more likely)\n                    var asType = child as SingleTypeDeclaration;\n                    if (asType != null)\n                    {\n                        // handle types\n                        if (types == null)\n                        {\n                            types = ArrayBuilder<SingleTypeDeclaration>.GetInstance();\n                        }\n                        else if (allTypesHaveSameIdentity && !asType.Identity.Equals(types[0].Identity))\n                        {\n                            allTypesHaveSameIdentity = false;\n                        }\n\n                        types.Add(asType);\n                        continue;\n                    }\n\n                    // or it is a namespace\n                    var asNamespace = child as SingleNamespaceDeclaration;\n                    if (asNamespace != null)\n                    {\n                        // handle namespace\n                        if (namespaces == null)\n                        {\n                            namespaces = ArrayBuilder<SingleNamespaceDeclaration>.GetInstance();\n                        }\n                        else if (allNamespacesHaveSameName && !asNamespace.Name.Equals(namespaces[0].Name))\n                        {\n                            allNamespacesHaveSameName = false;\n                        }\n\n                        namespaces.Add(asNamespace);\n                        continue;\n                    }\n\n                    // Not sure if we can get here, perhaps, if we have errors, \n                    // but we care only about types and namespaces anyways.\n                } 986572"];
9867 [label="var children = ArrayBuilder<MergedNamespaceOrTypeDeclaration>.GetInstance(); 986573"];
9868 [label="if (namespaces != null)\n            {\n                if (allNamespacesHaveSameName)\n                {\n                    children.Add(MergedNamespaceDeclaration.Create(namespaces.ToImmutableAndFree()));\n                }\n                else\n                {\n                    var namespaceGroups = namespaces.ToDictionary(n => n.Name, StringOrdinalComparer.Instance);\n                    namespaces.Free();\n\n                    foreach (var namespaceGroup in namespaceGroups.Values)\n                    {\n                        children.Add(MergedNamespaceDeclaration.Create(namespaceGroup));\n                    }\n                }\n            } 986574"];
9869 [label="if (namespaces != null)\n            {\n                if (allNamespacesHaveSameName)\n                {\n                    children.Add(MergedNamespaceDeclaration.Create(namespaces.ToImmutableAndFree()));\n                }\n                else\n                {\n                    var namespaceGroups = namespaces.ToDictionary(n => n.Name, StringOrdinalComparer.Instance);\n                    namespaces.Free();\n\n                    foreach (var namespaceGroup in namespaceGroups.Values)\n                    {\n                        children.Add(MergedNamespaceDeclaration.Create(namespaceGroup));\n                    }\n                }\n            } 986575"];
9870 [label="if (types != null)\n            {\n                if (allTypesHaveSameIdentity)\n                {\n                    children.Add(new MergedTypeDeclaration(types.ToImmutableAndFree()));\n                }\n                else\n                {\n                    var typeGroups = types.ToDictionary(t => t.Identity);\n                    types.Free();\n\n                    foreach (var typeGroup in typeGroups.Values)\n                    {\n                        children.Add(new MergedTypeDeclaration(typeGroup));\n                    }\n                }\n            } 986576"];
9871 [label="if (types != null)\n            {\n                if (allTypesHaveSameIdentity)\n                {\n                    children.Add(new MergedTypeDeclaration(types.ToImmutableAndFree()));\n                }\n                else\n                {\n                    var typeGroups = types.ToDictionary(t => t.Identity);\n                    types.Free();\n\n                    foreach (var typeGroup in typeGroups.Values)\n                    {\n                        children.Add(new MergedTypeDeclaration(typeGroup));\n                    }\n                }\n            } 986577"];
9872 [label="return children.ToImmutableAndFree(); 986578"];
9873 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyChildren, MakeChildren()); 986579"];
9874 [label="return _lazyChildren; 986580"];
9875 [label="var builder = new NameToSymbolMapBuilder(_mergedDeclaration.Children.Length); 986581"];
9876 [label="var builder = new NameToSymbolMapBuilder(_mergedDeclaration.Children.Length); 986582"];
9877 [label="new NameToSymbolMapBuilder(_mergedDeclaration.Children.Length) 986583"];
9878 [label="param NameToSymbolMapBuilder(int capacity) 986584"];
9879 [label="param NameToSymbolMapBuilder(this) 986585"];
9880 [label="_dictionary = new Dictionary<string, object>(capacity, StringOrdinalComparer.Instance); 986586"];
9881 [label="_dictionary = new Dictionary<string, object>(capacity, StringOrdinalComparer.Instance); 986587"];
9882 [label="_dictionary 986588"];
9883 [label="_mergedDeclaration.Children 986589"];
9884 [label="get\n            {\n                if (_lazyChildren.IsDefault)\n                {\n                    ImmutableInterlocked.InterlockedInitialize(ref _lazyChildren, MakeChildren());\n                }\n\n                return _lazyChildren;\n            } 986590"];
9885 [label="return _lazyChildren; 986591"];
9886 [label="foreach (var declaration in _mergedDeclaration.Children)\n            {\n                builder.Add(BuildSymbol(declaration, diagnostics));\n            } 986592"];
9887 [label="builder.CreateMap() 986593"];
9888 [label="param CreateMap(this) 986594"];
9889 [label="var result = new Dictionary<String, ImmutableArray<NamespaceOrTypeSymbol>>(_dictionary.Count, StringOrdinalComparer.Instance); 986595"];
9890 [label="var result = new Dictionary<String, ImmutableArray<NamespaceOrTypeSymbol>>(_dictionary.Count, StringOrdinalComparer.Instance); 986596"];
9891 [label="foreach (var kvp in _dictionary)\n                {\n                    object value = kvp.Value;\n                    ImmutableArray<NamespaceOrTypeSymbol> members;\n\n                    var builder = value as ArrayBuilder<NamespaceOrTypeSymbol>;\n                    if (builder != null)\n                    {\n                        Debug.Assert(builder.Count > 1);\n                        bool hasNamespaces = false;\n                        for (int i = 0; (i < builder.Count) && !hasNamespaces; i++)\n                        {\n                            hasNamespaces |= (builder[i].Kind == SymbolKind.Namespace);\n                        }\n\n                        members = hasNamespaces\n                            ? builder.ToImmutable()\n                            : StaticCast<NamespaceOrTypeSymbol>.From(builder.ToDowncastedImmutable<NamedTypeSymbol>());\n\n                        builder.Free();\n                    }\n                    else\n                    {\n                        NamespaceOrTypeSymbol symbol = (NamespaceOrTypeSymbol)value;\n                        members = symbol.Kind == SymbolKind.Namespace\n                            ? ImmutableArray.Create<NamespaceOrTypeSymbol>(symbol)\n                            : StaticCast<NamespaceOrTypeSymbol>.From(ImmutableArray.Create<NamedTypeSymbol>((NamedTypeSymbol)symbol));\n                    }\n\n                    result.Add(kvp.Key, members);\n                } 986597"];
9892 [label="return result; 986598"];
9893 [label="var result = builder.CreateMap(); 986599"];
9894 [label="CheckMembers(this, result, diagnostics); 986600"];
9895 [label="CheckMembers(this, result, diagnostics); 986601"];
9896 [label="CheckMembers(this, result, diagnostics); 986602"];
9897 [label="CheckMembers(this, result, diagnostics) 986603"];
9898 [label="param CheckMembers(NamespaceSymbol @namespace) 986604"];
9899 [label="param CheckMembers(Dictionary<string, ImmutableArray<NamespaceOrTypeSymbol>> result) 986605"];
9900 [label="param CheckMembers(DiagnosticBag diagnostics) 986606"];
9901 [label="var memberOfArity = new Symbol[10]; 986607"];
9902 [label="MergedNamespaceSymbol mergedAssemblyNamespace = null; 986608"];
9903 [label="@namespace.ContainingAssembly 986609"];
9904 [label="=> _module.ContainingAssembly 986610"];
9905 [label="_module.ContainingAssembly 986611"];
9906 [label="get\n            {\n                return _assemblySymbol;\n            } 986612"];
9907 [label="return _assemblySymbol; 986613"];
9908 [label="if (@namespace.ContainingAssembly.Modules.Length > 1)\n            {\n                mergedAssemblyNamespace = @namespace.ContainingAssembly.GetAssemblyNamespace(@namespace) as MergedNamespaceSymbol;\n            } 986614"];
9909 [label="@namespace.ContainingAssembly.Modules 986615"];
9910 [label="get\n            {\n                return _modules;\n            } 986616"];
9911 [label="if (@namespace.ContainingAssembly.Modules.Length > 1)\n            {\n                mergedAssemblyNamespace = @namespace.ContainingAssembly.GetAssemblyNamespace(@namespace) as MergedNamespaceSymbol;\n            } 986617"];
9912 [label="@namespace.ContainingAssembly 986618"];
9913 [label="mergedAssemblyNamespace = @namespace.ContainingAssembly.GetAssemblyNamespace(@namespace) as MergedNamespaceSymbol; 986619"];
9914 [label="mergedAssemblyNamespace = @namespace.ContainingAssembly.GetAssemblyNamespace(@namespace) as MergedNamespaceSymbol; 986620"];
9915 [label="@namespace.ContainingAssembly.GetAssemblyNamespace(@namespace) 986621"];
9916 [label="param GetAssemblyNamespace(NamespaceSymbol namespaceSymbol) 986622"];
9917 [label="param GetAssemblyNamespace(this) 986623"];
9918 [label="namespaceSymbol.IsGlobalNamespace 986624"];
9919 [label="get\n            {\n                return (object)ContainingNamespace == null;\n            } 986625"];
9920 [label="ContainingNamespace 986626"];
9921 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 986627"];
9922 [label="this.ContainingSymbol 986628"];
9923 [label="=> _container 986629"];
9924 [label="_container 986630"];
9925 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 986631"];
9926 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 986632"];
9927 [label="var ns = container as NamespaceSymbol; 986633"];
9928 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 986634"];
9929 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 986635"];
9930 [label="container.ContainingSymbol 986636"];
9931 [label="get\n            {\n                return _assemblySymbol;\n            } 986637"];
9932 [label="return _assemblySymbol; 986638"];
9933 [label="var ns = container as NamespaceSymbol; 986639"];
9934 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 986640"];
9935 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 986641"];
9936 [label="get\n            {\n                return null;\n            } 986642"];
9937 [label="return null; 986643"];
9938 [label="return null; 986644"];
9939 [label="return (object)ContainingNamespace == null; 986645"];
9940 [label="return (object)ContainingNamespace == null; 986646"];
9941 [label="if (namespaceSymbol.IsGlobalNamespace)\n            {\n                return this.GlobalNamespace;\n            } 986647"];
9942 [label="this.GlobalNamespace 986648"];
9943 [label="get\n            {\n                if ((object)_globalNamespace == null)\n                {\n                    // Get the root namespace from each module, and merge them all together. If there is only one, \n                    // then MergedNamespaceSymbol.Create will just return that one.\n\n                    IEnumerable<NamespaceSymbol> allGlobalNamespaces = from m in Modules select m.GlobalNamespace;\n                    var result = MergedNamespaceSymbol.Create(new NamespaceExtent(this),\n                                                        null,\n                                                        allGlobalNamespaces.AsImmutable());\n                    Interlocked.CompareExchange(ref _globalNamespace, result, null);\n                }\n\n                return _globalNamespace;\n            } 986649"];
9944 [label="if ((object)_globalNamespace == null)\n                {\n                    // Get the root namespace from each module, and merge them all together. If there is only one, \n                    // then MergedNamespaceSymbol.Create will just return that one.\n\n                    IEnumerable<NamespaceSymbol> allGlobalNamespaces = from m in Modules select m.GlobalNamespace;\n                    var result = MergedNamespaceSymbol.Create(new NamespaceExtent(this),\n                                                        null,\n                                                        allGlobalNamespaces.AsImmutable());\n                    Interlocked.CompareExchange(ref _globalNamespace, result, null);\n                } 986650"];
9945 [label="if ((object)_globalNamespace == null)\n                {\n                    // Get the root namespace from each module, and merge them all together. If there is only one, \n                    // then MergedNamespaceSymbol.Create will just return that one.\n\n                    IEnumerable<NamespaceSymbol> allGlobalNamespaces = from m in Modules select m.GlobalNamespace;\n                    var result = MergedNamespaceSymbol.Create(new NamespaceExtent(this),\n                                                        null,\n                                                        allGlobalNamespaces.AsImmutable());\n                    Interlocked.CompareExchange(ref _globalNamespace, result, null);\n                } 986651"];
9946 [label="IEnumerable<NamespaceSymbol> allGlobalNamespaces = from m in Modules select m.GlobalNamespace; 986652"];
9947 [label="IEnumerable<NamespaceSymbol> allGlobalNamespaces = from m in Modules select m.GlobalNamespace; 986653"];
9948 [label="var result = MergedNamespaceSymbol.Create(new NamespaceExtent(this),\n                                                        null,\n                                                        allGlobalNamespaces.AsImmutable()); 986654"];
9949 [label="var result = MergedNamespaceSymbol.Create(new NamespaceExtent(this),\n                                                        null,\n                                                        allGlobalNamespaces.AsImmutable()); 986655"];
9950 [label="new NamespaceExtent(this) 986656"];
9951 [label="param NamespaceExtent(AssemblySymbol assembly) 986657"];
9952 [label="param NamespaceExtent(this) 986658"];
9953 [label="_kind 986659"];
9954 [label="_symbolOrCompilation 986660"];
9955 [label="var result = MergedNamespaceSymbol.Create(new NamespaceExtent(this),\n                                                        null,\n                                                        allGlobalNamespaces.AsImmutable()); 986661"];
9956 [label="get { return _globalNamespace; } 986662"];
9957 [label="return _globalNamespace; 986663"];
9958 [label="MergedNamespaceSymbol.Create(new NamespaceExtent(this),\n                                                        null,\n                                                        allGlobalNamespaces.AsImmutable()) 986664"];
9959 [label="param Create(NamespaceExtent extent) 986665"];
9960 [label="param Create(NamespaceSymbol containingNamespace) 986666"];
9961 [label="param Create(ImmutableArray<NamespaceSymbol> namespacesToMerge) 986667"];
9962 [label="param Create(string nameOpt = null) 986668"];
9963 [label="Debug.Assert(namespacesToMerge.Length != 0); 986669"];
9964 [label="Debug.Assert(namespacesToMerge.Length != 0); 986670"];
9965 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 986671"];
9966 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 986672"];
9967 [label="(namespacesToMerge.Length == 1 && nameOpt == null) 986673"];
9968 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 986674"];
9969 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 986675"];
9970 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 986676"];
9971 [label="new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt) 986677"];
9972 [label="param MergedNamespaceSymbol(NamespaceExtent extent) 986678"];
9973 [label="param MergedNamespaceSymbol(NamespaceSymbol containingNamespace) 986679"];
9974 [label="param MergedNamespaceSymbol(ImmutableArray<NamespaceSymbol> namespacesToMerge) 986680"];
9975 [label="param MergedNamespaceSymbol(string nameOpt) 986681"];
9976 [label="param MergedNamespaceSymbol(this) 986682"];
9977 [label="param MergedNamespaceSymbol(this) 986683"];
9978 [label="_containingNamespace 986684"];
9979 [label="_nameOpt 986685"];
9980 [label="_cachedLookup 986686"];
9981 [label="_extent 986687"];
9982 [label="_namespacesToMerge 986688"];
9983 [label="_containingNamespace 986689"];
9984 [label="_cachedLookup = new CachingDictionary<string, Symbol>(SlowGetChildrenOfName, SlowGetChildNames, EqualityComparer<string>.Default); 986690"];
9985 [label="_cachedLookup = new CachingDictionary<string, Symbol>(SlowGetChildrenOfName, SlowGetChildNames, EqualityComparer<string>.Default); 986691"];
9986 [label="_cachedLookup 986692"];
9987 [label="_nameOpt 986693"];
9988 [label="foreach (NamespaceSymbol ns in namespacesToMerge)\n            {\n                Debug.Assert(ns.ConstituentNamespaces.Length == 1);\n            } 986694"];
9989 [label="ns.ConstituentNamespaces 986695"];
9990 [label="get\n            {\n                return ImmutableArray.Create(this);\n            } 986696"];
9991 [label="return ImmutableArray.Create(this); 986697"];
9992 [label="Debug.Assert(ns.ConstituentNamespaces.Length == 1); 986698"];
9993 [label="Debug.Assert(ns.ConstituentNamespaces.Length == 1); 986699"];
9994 [label="Interlocked.CompareExchange(ref _globalNamespace, result, null); 986700"];
9995 [label="Interlocked.CompareExchange(ref _globalNamespace, result, null); 986701"];
9996 [label="Interlocked.CompareExchange(ref _globalNamespace, result, null); 986702"];
9997 [label="Interlocked.CompareExchange(ref _globalNamespace, result, null); 986703"];
9998 [label="return _globalNamespace; 986704"];
9999 [label="return this.GlobalNamespace; 986705"];
10000 [label="foreach (var name in result.Keys)\n            {\n                Array.Clear(memberOfArity, 0, memberOfArity.Length);\n                foreach (var symbol in result[name])\n                {\n                    var nts = symbol as NamedTypeSymbol;\n                    var arity = ((object)nts != null) ? nts.Arity : 0;\n                    if (arity >= memberOfArity.Length)\n                    {\n                        Array.Resize(ref memberOfArity, arity + 1);\n                    }\n\n                    var other = memberOfArity[arity];\n\n                    if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    }\n\n                    memberOfArity[arity] = symbol;\n\n                    if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    }\n                }\n            } 986706"];
10001 [label="CheckMembers(this, result, diagnostics); 986707"];
10002 [label="return result; 986708"];
10003 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 986709"];
10004 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 986710"];
10005 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 986711"];
10006 [label="this.DeclaringCompilation 986712"];
10007 [label="get\n            {\n                switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                }\n\n                var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol;\n                return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation;\n            } 986713"];
10008 [label="this.Kind 986714"];
10009 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 986715"];
10010 [label="return SymbolKind.Namespace; 986716"];
10011 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 986717"];
10012 [label="this.ContainingModule 986718"];
10013 [label="get\n            {\n                return _module;\n            } 986719"];
10014 [label="return _module; 986720"];
10015 [label="var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol; 986721"];
10016 [label="return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation; 986722"];
10017 [label="return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation; 986723"];
10018 [label="(object)sourceModuleSymbol == null 986724"];
10019 [label="sourceModuleSymbol.DeclaringCompilation 986725"];
10020 [label="this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics); 986726"];
10021 [label="this.DeclaringCompilation.DeclarationDiagnostics 986727"];
10022 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 986728"];
10023 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 986729"];
10024 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 986730"];
10025 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 986731"];
10026 [label="var diagnostics = new DiagnosticBag(); 986732"];
10027 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 986733"];
10028 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 986734"];
10029 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 986735"];
10030 [label="return _lazyDeclarationDiagnostics; 986736"];
10031 [label="this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics); 986737"];
10032 [label="this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics); 986738"];
10033 [label="RegisterDeclaredCorTypes() 986739"];
10034 [label="param RegisterDeclaredCorTypes(this) 986740"];
10035 [label="ContainingAssembly 986741"];
10036 [label="=> _module.ContainingAssembly 986742"];
10037 [label="get\n            {\n                return _assemblySymbol;\n            } 986743"];
10038 [label="AssemblySymbol containingAssembly = ContainingAssembly; 986744"];
10039 [label="containingAssembly.KeepLookingForDeclaredSpecialTypes 986745"];
10040 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 986746"];
10041 [label="this.CorLibrary 986747"];
10042 [label="get\n            {\n                return _corLibrary;\n            } 986748"];
10043 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 986749"];
10044 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 986750"];
10045 [label="if (containingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                // Register newly declared COR types\n                foreach (var array in _nameToMembersMap.Values)\n                {\n                    foreach (var member in array)\n                    {\n                        var type = member as NamedTypeSymbol;\n\n                        if ((object)type != null && type.SpecialType != SpecialType.None)\n                        {\n                            containingAssembly.RegisterDeclaredSpecialType(type);\n\n                            if (!containingAssembly.KeepLookingForDeclaredSpecialTypes)\n                            {\n                                return;\n                            }\n                        }\n                    }\n                }\n            } 986751"];
10046 [label="RegisterDeclaredCorTypes(); 986752"];
10047 [label="DeclaringCompilation 986753"];
10048 [label="get\n            {\n                switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                }\n\n                var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol;\n                return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation;\n            } 986754"];
10049 [label="this.Kind 986755"];
10050 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 986756"];
10051 [label="return SymbolKind.Namespace; 986757"];
10052 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 986758"];
10053 [label="this.ContainingModule 986759"];
10054 [label="get\n            {\n                return _module;\n            } 986760"];
10055 [label="return _module; 986761"];
10056 [label="return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation; 986762"];
10057 [label="DeclaringCompilation.SymbolDeclaredEvent(this); 986763"];
10058 [label="DeclaringCompilation.SymbolDeclaredEvent(this); 986764"];
10059 [label="DeclaringCompilation.SymbolDeclaredEvent(this) 986765"];
10060 [label="param SymbolDeclaredEvent(Symbol symbol) 986766"];
10061 [label="param SymbolDeclaredEvent(this) 986767"];
10062 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 986768"];
10063 [label="DeclaringCompilation.SymbolDeclaredEvent(this); 986769"];
10064 [label="var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap); 986770"];
10065 [label="_state.NotePartComplete(CompletionPart.NameToMembersMap) 986771"];
10066 [label="param NotePartComplete(CompletionPart part) 986772"];
10067 [label="param NotePartComplete(this) 986773"];
10068 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 986774"];
10069 [label="Debug.Assert(wasSetThisThread); 986775"];
10070 [label="diagnostics.Free(); 986776"];
10071 [label="return _nameToMembersMap; 986777"];
10072 [label="return this.GetNameToMembersMap().TryGetValue(name, out members)\n                ? members.Cast<NamespaceOrTypeSymbol, Symbol>()\n                : ImmutableArray<Symbol>.Empty; 986778"];
10073 [label="return this.GetNameToMembersMap().TryGetValue(name, out members)\n                ? members.Cast<NamespaceOrTypeSymbol, Symbol>()\n                : ImmutableArray<Symbol>.Empty; 986779"];
10074 [label="return this.GetNameToMembersMap().TryGetValue(name, out members)\n                ? members.Cast<NamespaceOrTypeSymbol, Symbol>()\n                : ImmutableArray<Symbol>.Empty; 986780"];
10075 [label="return this.GetNameToMembersMap().TryGetValue(name, out members)\n                ? members.Cast<NamespaceOrTypeSymbol, Symbol>()\n                : ImmutableArray<Symbol>.Empty; 986781"];
10076 [label="this.GetNameToMembersMap().TryGetValue(name, out members) 986782"];
10077 [label="scope = nextScope; 986783"];
10078 [label="if ((object)scope == null)\n                {\n                    break;\n                } 986784"];
10079 [label="if ((object)scope == null)\n                {\n                    break;\n                } 986785"];
10080 [label="return scope; 986786"];
10081 [label="if ((object)scope == null)\n            {\n                // We failed to locate the namespace\n                result = new MissingMetadataTypeSymbol.TopLevel(this, ref emittedName);\n            }\n            else\n            {\n                result = scope.LookupMetadataType(ref emittedName);\n            } 986787"];
10082 [label="if ((object)scope == null)\n            {\n                // We failed to locate the namespace\n                result = new MissingMetadataTypeSymbol.TopLevel(this, ref emittedName);\n            }\n            else\n            {\n                result = scope.LookupMetadataType(ref emittedName);\n            } 986788"];
10083 [label="result = new MissingMetadataTypeSymbol.TopLevel(this, ref emittedName); 986789"];
10084 [label="result = new MissingMetadataTypeSymbol.TopLevel(this, ref emittedName); 986790"];
10085 [label="result = new MissingMetadataTypeSymbol.TopLevel(this, ref emittedName); 986791"];
10086 [label="new MissingMetadataTypeSymbol.TopLevel(this, ref emittedName) 986792"];
10087 [label="param TopLevel(ModuleSymbol module) 986793"];
10088 [label="param TopLevel(ref MetadataTypeName fullName) 986794"];
10089 [label="param TopLevel(DiagnosticInfo? errorInfo = null) 986795"];
10090 [label="param TopLevel(this) 986796"];
10091 [label="module 986797"];
10092 [label="fullName 986798"];
10093 [label="1 986799"];
10094 [label="errorInfo 986800"];
10095 [label="param TopLevel(this) 986801"];
10096 [label="param TopLevel(ModuleSymbol module) 986802"];
10097 [label="param TopLevel(ref MetadataTypeName fullName) 986803"];
10098 [label="param TopLevel(int typeId) 986804"];
10099 [label="param TopLevel(DiagnosticInfo? errorInfo) 986805"];
10100 [label="param TopLevel(this) 986806"];
10101 [label="module 986807"];
10102 [label="fullName 986808"];
10103 [label="1 986809"];
10104 [label="fullName.ForcedArity == -1 986810"];
10105 [label="fullName.ForcedArity == -1 || fullName.ForcedArity == fullName.InferredArity 986811"];
10106 [label="errorInfo 986812"];
10107 [label="typeId 986813"];
10108 [label="param TopLevel(this) 986814"];
10109 [label="param TopLevel(ModuleSymbol module) 986815"];
10110 [label="param TopLevel(ref MetadataTypeName fullName) 986816"];
10111 [label="param TopLevel(bool mangleName) 986817"];
10112 [label="param TopLevel(DiagnosticInfo? errorInfo) 986818"];
10113 [label="param TopLevel(int typeId) 986819"];
10114 [label="param TopLevel(this) 986820"];
10115 [label="module 986821"];
10116 [label="fullName.NamespaceName 986822"];
10117 [label="mangleName 986823"];
10118 [label="fullName.UnmangledTypeName 986824"];
10119 [label="mangleName 986825"];
10120 [label="fullName.InferredArity 986826"];
10121 [label="mangleName 986827"];
10122 [label="false 986828"];
10123 [label="errorInfo 986829"];
10124 [label="null 986830"];
10125 [label="typeId 986831"];
10126 [label="null 986832"];
10127 [label="param TopLevel(this) 986833"];
10128 [label="param TopLevel(ModuleSymbol module) 986834"];
10129 [label="param TopLevel(string @namespace) 986835"];
10130 [label="param TopLevel(string name) 986836"];
10131 [label="param TopLevel(int arity) 986837"];
10132 [label="param TopLevel(bool mangleName) 986838"];
10133 [label="param TopLevel(bool isNativeInt) 986839"];
10134 [label="param TopLevel(DiagnosticInfo? errorInfo) 986840"];
10135 [label="param TopLevel(NamespaceSymbol? containingNamespace) 986841"];
10136 [label="param TopLevel(int typeId) 986842"];
10137 [label="param TopLevel(TupleExtraData? tupleData) 986843"];
10138 [label="param TopLevel(this) 986844"];
10139 [label="name 986845"];
10140 [label="arity 986846"];
10141 [label="mangleName 986847"];
10142 [label="tupleData 986848"];
10143 [label="param TopLevel(this) 986849"];
10144 [label="param MissingMetadataTypeSymbol(string name) 986850"];
10145 [label="param MissingMetadataTypeSymbol(int arity) 986851"];
10146 [label="param MissingMetadataTypeSymbol(bool mangleName) 986852"];
10147 [label="param MissingMetadataTypeSymbol(TupleExtraData? tupleData = null) 986853"];
10148 [label="param MissingMetadataTypeSymbol(this) 986854"];
10149 [label="new UnsupportedMetadataTypeSymbol() 986855"];
10150 [label="param UnsupportedMetadataTypeSymbol(BadImageFormatException? mrEx = null) 986856"];
10151 [label="param UnsupportedMetadataTypeSymbol(this) 986857"];
10152 [label="param ErrorTypeSymbol(this) 986858"];
10153 [label="param ErrorTypeSymbol(TupleExtraData? tupleData = null) 986859"];
10154 [label="symbol =>\n        {\n            if (!symbol.IsStatic)\n            {\n                switch (symbol.Kind)\n                {\n                    case SymbolKind.Field:\n                    case SymbolKind.Event:\n                        return true;\n                }\n            }\n            return false;\n        } 986860"];
10155 [label="IsInstanceFieldOrEvent = symbol =>\n        {\n            if (!symbol.IsStatic)\n            {\n                switch (symbol.Kind)\n                {\n                    case SymbolKind.Field:\n                    case SymbolKind.Event:\n                        return true;\n                }\n            }\n            return false;\n        } 986861"];
10156 [label="type => !type.HasType 986862"];
10157 [label="TypeWithAnnotationsIsNullFunction = type => !type.HasType 986863"];
10158 [label="type => type.HasType && type.Type.IsErrorType() 986864"];
10159 [label="TypeWithAnnotationsIsErrorType = type => type.HasType && type.Type.IsErrorType() 986865"];
10160 [label="8 986866"];
10161 [label="ValueTupleRestPosition = 8 986867"];
10162 [label="1 986868"];
10163 [label="ValueTupleRestPosition - 1 986869"];
10164 [label="ValueTupleRestIndex = ValueTupleRestPosition - 1 986870"];
10165 [label="'ValueTuple' 986871"];
10166 [label="ValueTupleTypeName = 'ValueTuple' 986872"];
10167 [label="'Rest' 986873"];
10168 [label="ValueTupleRestFieldName = 'Rest' 986874"];
10169 [label="{\n                                                            WellKnownType.System_ValueTuple_T1,\n                                                            WellKnownType.System_ValueTuple_T2,\n                                                            WellKnownType.System_ValueTuple_T3,\n                                                            WellKnownType.System_ValueTuple_T4,\n                                                            WellKnownType.System_ValueTuple_T5,\n                                                            WellKnownType.System_ValueTuple_T6,\n                                                            WellKnownType.System_ValueTuple_T7,\n                                                            WellKnownType.System_ValueTuple_TRest } 986875"];
10170 [label="tupleTypes = {\n                                                            WellKnownType.System_ValueTuple_T1,\n                                                            WellKnownType.System_ValueTuple_T2,\n                                                            WellKnownType.System_ValueTuple_T3,\n                                                            WellKnownType.System_ValueTuple_T4,\n                                                            WellKnownType.System_ValueTuple_T5,\n                                                            WellKnownType.System_ValueTuple_T6,\n                                                            WellKnownType.System_ValueTuple_T7,\n                                                            WellKnownType.System_ValueTuple_TRest } 986876"];
10171 [label="{\n                                                            WellKnownMember.System_ValueTuple_T1__ctor,\n                                                            WellKnownMember.System_ValueTuple_T2__ctor,\n                                                            WellKnownMember.System_ValueTuple_T3__ctor,\n                                                            WellKnownMember.System_ValueTuple_T4__ctor,\n                                                            WellKnownMember.System_ValueTuple_T5__ctor,\n                                                            WellKnownMember.System_ValueTuple_T6__ctor,\n                                                            WellKnownMember.System_ValueTuple_T7__ctor,\n                                                            WellKnownMember.System_ValueTuple_TRest__ctor } 986877"];
10172 [label="tupleCtors = {\n                                                            WellKnownMember.System_ValueTuple_T1__ctor,\n                                                            WellKnownMember.System_ValueTuple_T2__ctor,\n                                                            WellKnownMember.System_ValueTuple_T3__ctor,\n                                                            WellKnownMember.System_ValueTuple_T4__ctor,\n                                                            WellKnownMember.System_ValueTuple_T5__ctor,\n                                                            WellKnownMember.System_ValueTuple_T6__ctor,\n                                                            WellKnownMember.System_ValueTuple_T7__ctor,\n                                                            WellKnownMember.System_ValueTuple_TRest__ctor } 986878"];
10173 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 986879"];
10174 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 } 986880"];
10175 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 } 986881"];
10176 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 } 986882"];
10177 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 } 986883"];
10178 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 } 986884"];
10179 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 } 986885"];
10180 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 } 986886"];
10181 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest } 986887"];
10182 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 986888"];
10183 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 986889"];
10184 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 986890"];
10185 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 986891"];
10186 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 986892"];
10187 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 986893"];
10188 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 986894"];
10189 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 986895"];
10190 [label="tupleMembers = new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 986896"];
10191 [label="tupleData 986897"];
10192 [label="param NamedTypeSymbol(TupleExtraData tupleData = null) 986898"];
10193 [label="param NamedTypeSymbol(this) 986899"];
10194 [label="'<invalid-global-code>' 986900"];
10195 [label="ImplicitTypeName = '<invalid-global-code>' 986901"];
10196 [label="0 986902"];
10197 [label="SymbolEqualityComparer.CLRSignature 986903"];
10198 [label="new MultiDictionary<NamedTypeSymbol, NamedTypeSymbol>(0, SymbolEqualityComparer.CLRSignature) 986904"];
10199 [label="new MultiDictionary<NamedTypeSymbol, NamedTypeSymbol>(0, SymbolEqualityComparer.CLRSignature) 986905"];
10200 [label="EmptyInterfacesAndTheirBaseInterfaces =\n                                                new MultiDictionary<NamedTypeSymbol, NamedTypeSymbol>(0, SymbolEqualityComparer.CLRSignature) 986906"];
10201 [label="new InterfaceInfo() 986907"];
10202 [label="param InterfaceInfo(this) 986908"];
10203 [label="interfacesAndTheirBaseInterfaces 986909"];
10204 [label="_implementationForInterfaceMemberMap 986910"];
10205 [label="explicitInterfaceImplementationMap 986911"];
10206 [label="s_noInterfaces = new InterfaceInfo() 986912"];
10207 [label="(type) => type.SetUnknownNullabilityForReferenceTypes() 986913"];
10208 [label="s_setUnknownNullability =\n            (type) => type.SetUnknownNullabilityForReferenceTypes() 986914"];
10209 [label="param TypeSymbol(this) 986915"];
10210 [label="param NamespaceOrTypeSymbol(this) 986916"];
10211 [label="param Symbol(this) 986917"];
10212 [label="_lazyISymbol 986918"];
10213 [label="_lazyAbstractMembers 986919"];
10214 [label="_lazyInterfaceInfo 986920"];
10215 [label="_lazyAdapter 986921"];
10216 [label="_hasNoBaseCycles 986922"];
10217 [label="_lazyTupleData 986923"];
10218 [label="_lazyTupleData 986924"];
10219 [label="_mrEx 986925"];
10220 [label="_mrEx 986926"];
10221 [label="UnknownResultType = new UnsupportedMetadataTypeSymbol() 986927"];
10222 [label="tupleData 986928"];
10223 [label="param MissingMetadataTypeSymbol(this) 986929"];
10224 [label="param ErrorTypeSymbol(TupleExtraData? tupleData = null) 986930"];
10225 [label="param ErrorTypeSymbol(this) 986931"];
10226 [label="tupleData 986932"];
10227 [label="param ErrorTypeSymbol(this) 986933"];
10228 [label="param NamedTypeSymbol(TupleExtraData tupleData = null) 986934"];
10229 [label="param NamedTypeSymbol(this) 986935"];
10230 [label="param NamedTypeSymbol(this) 986936"];
10231 [label="param TypeSymbol(this) 986937"];
10232 [label="param TypeSymbol(this) 986938"];
10233 [label="_lazyAbstractMembers 986939"];
10234 [label="_lazyInterfaceInfo 986940"];
10235 [label="_lazyAdapter 986941"];
10236 [label="_hasNoBaseCycles 986942"];
10237 [label="_lazyTupleData 986943"];
10238 [label="_lazyTupleData 986944"];
10239 [label="name 986945"];
10240 [label="arity 986946"];
10241 [label="mangleName 986947"];
10242 [label="RoslynDebug.Assert(name != null); 986948"];
10243 [label="RoslynDebug.Assert(name != null); 986949"];
10244 [label="this.name 986950"];
10245 [label="this.arity 986951"];
10246 [label="this.mangleName = (mangleName && arity > 0); 986952"];
10247 [label="this.mangleName = (mangleName && arity > 0); 986953"];
10248 [label="this.mangleName = (mangleName && arity > 0); 986954"];
10249 [label="this.mangleName 986955"];
10250 [label="_namespaceName 986956"];
10251 [label="_containingModule 986957"];
10252 [label="_isNativeInt 986958"];
10253 [label="_lazyErrorInfo 986959"];
10254 [label="_lazyContainingNamespace 986960"];
10255 [label="_lazyTypeId 986961"];
10256 [label="RoslynDebug.Assert((object)module != null); 986962"];
10257 [label="RoslynDebug.Assert((object)module != null); 986963"];
10258 [label="RoslynDebug.Assert(@namespace != null); 986964"];
10259 [label="RoslynDebug.Assert(@namespace != null); 986965"];
10260 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 986966"];
10261 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 986967"];
10262 [label="_namespaceName 986968"];
10263 [label="_containingModule 986969"];
10264 [label="_isNativeInt 986970"];
10265 [label="_lazyErrorInfo 986971"];
10266 [label="_lazyContainingNamespace 986972"];
10267 [label="_lazyTypeId 986973"];
10268 [label="Debug.Assert((object)result != null); 986974"];
10269 [label="Debug.Assert((object)result != null); 986975"];
10270 [label="return result; 986976"];
10271 [label="if (result is MissingMetadataTypeSymbol)\n                {\n                    for (i = 1; i < count; i++)\n                    {\n                        var newResult = modules[i].LookupTopLevelMetadataType(ref emittedName);\n\n                        // Hold on to the first missing type result, unless we found the type.\n                        if (!(newResult is MissingMetadataTypeSymbol))\n                        {\n                            result = newResult;\n                            break;\n                        }\n                    }\n                } 986977"];
10272 [label="for (i = 1; i < count; i++)\n                    {\n                        var newResult = modules[i].LookupTopLevelMetadataType(ref emittedName);\n\n                        // Hold on to the first missing type result, unless we found the type.\n                        if (!(newResult is MissingMetadataTypeSymbol))\n                        {\n                            result = newResult;\n                            break;\n                        }\n                    } 986978"];
10273 [label="for (i = 1; i < count; i++)\n                    {\n                        var newResult = modules[i].LookupTopLevelMetadataType(ref emittedName);\n\n                        // Hold on to the first missing type result, unless we found the type.\n                        if (!(newResult is MissingMetadataTypeSymbol))\n                        {\n                            result = newResult;\n                            break;\n                        }\n                    } 986979"];
10274 [label="var newResult = modules[i].LookupTopLevelMetadataType(ref emittedName); 986980"];
10275 [label="var newResult = modules[i].LookupTopLevelMetadataType(ref emittedName); 986981"];
10276 [label="modules[i].LookupTopLevelMetadataType(ref emittedName) 986982"];
10277 [label="param LookupTopLevelMetadataType(ref MetadataTypeName emittedName) 986983"];
10278 [label="param LookupTopLevelMetadataType(this) 986984"];
10279 [label="NamedTypeSymbol result; 986985"];
10280 [label="foreach (string name in names)\n            {\n                NamespaceSymbol nextScope = null;\n\n                foreach (NamespaceOrTypeSymbol symbol in scope.GetMembers(name))\n                {\n                    var ns = symbol as NamespaceSymbol;\n\n                    if ((object)ns != null)\n                    {\n                        if ((object)nextScope != null)\n                        {\n                            Debug.Assert((object)nextScope == null, 'Why did we run into an unmerged namespace?');\n                            nextScope = null;\n                            break;\n                        }\n\n                        nextScope = ns;\n                    }\n                }\n\n                scope = nextScope;\n\n                if ((object)scope == null)\n                {\n                    break;\n                }\n            } 986986"];
10281 [label="param GetMembers(string name) 986987"];
10282 [label="param GetMembers(this) 986988"];
10283 [label="EnsureAllMembersLoaded() 986989"];
10284 [label="param EnsureAllMembersLoaded(this) 986990"];
10285 [label="if (lazyTypes == null || lazyNamespaces == null)\n            {\n                IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups;\n\n                try\n                {\n                    groups = _moduleSymbol.Module.GroupTypesByNamespaceOrThrow(System.StringComparer.Ordinal);\n                }\n                catch (BadImageFormatException)\n                {\n                    groups = SpecializedCollections.EmptyEnumerable<IGrouping<string, TypeDefinitionHandle>>();\n                }\n\n                LoadAllMembers(groups);\n            } 986991"];
10286 [label="if (lazyTypes == null || lazyNamespaces == null)\n            {\n                IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups;\n\n                try\n                {\n                    groups = _moduleSymbol.Module.GroupTypesByNamespaceOrThrow(System.StringComparer.Ordinal);\n                }\n                catch (BadImageFormatException)\n                {\n                    groups = SpecializedCollections.EmptyEnumerable<IGrouping<string, TypeDefinitionHandle>>();\n                }\n\n                LoadAllMembers(groups);\n            } 986992"];
10287 [label="IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups; 986993"];
10288 [label="_moduleSymbol.Module 986994"];
10289 [label="groups = _moduleSymbol.Module.GroupTypesByNamespaceOrThrow(System.StringComparer.Ordinal); 986995"];
10290 [label="groups = _moduleSymbol.Module.GroupTypesByNamespaceOrThrow(System.StringComparer.Ordinal); 986996"];
10291 [label="LoadAllMembers(groups); 986997"];
10292 [label="LoadAllMembers(groups) 986998"];
10293 [label="param LoadAllMembers(IEnumerable<IGrouping<string, TypeDefinitionHandle>> typesByNS) 986999"];
10294 [label="param LoadAllMembers(this) 987000"];
10295 [label="Debug.Assert(typesByNS != null); 987001"];
10296 [label="Debug.Assert(typesByNS != null); 987002"];
10297 [label="IEnumerable<IGrouping<string, TypeDefinitionHandle>> nestedTypes = null; 987003"];
10298 [label="IEnumerable<KeyValuePair<string, IEnumerable<IGrouping<string, TypeDefinitionHandle>>>> nestedNamespaces = null; 987004"];
10299 [label="this.IsGlobalNamespace 987005"];
10300 [label="get\n            {\n                return true;\n            } 987006"];
10301 [label="return true; 987007"];
10302 [label="bool isGlobalNamespace = this.IsGlobalNamespace; 987008"];
10303 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 987009"];
10304 [label="isGlobalNamespace 987010"];
10305 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 987011"];
10306 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 987012"];
10307 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 987013"];
10308 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 987014"];
10309 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 987015"];
10310 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 987016"];
10311 [label="LazyInitializeNamespaces(nestedNamespaces); 987017"];
10312 [label="LazyInitializeNamespaces(nestedNamespaces) 987018"];
10313 [label="param LazyInitializeNamespaces(IEnumerable<KeyValuePair<string, IEnumerable<IGrouping<string, TypeDefinitionHandle>>>> childNamespaces) 987019"];
10314 [label="param LazyInitializeNamespaces(this) 987020"];
10315 [label="if (this.lazyNamespaces == null)\n            {\n                var namespaces = new Dictionary<string, PENestedNamespaceSymbol>(StringOrdinalComparer.Instance);\n\n                foreach (var child in childNamespaces)\n                {\n                    var c = new PENestedNamespaceSymbol(child.Key, this, child.Value);\n                    namespaces.Add(c.Name, c);\n                }\n\n                Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null);\n            } 987021"];
10316 [label="if (this.lazyNamespaces == null)\n            {\n                var namespaces = new Dictionary<string, PENestedNamespaceSymbol>(StringOrdinalComparer.Instance);\n\n                foreach (var child in childNamespaces)\n                {\n                    var c = new PENestedNamespaceSymbol(child.Key, this, child.Value);\n                    namespaces.Add(c.Name, c);\n                }\n\n                Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null);\n            } 987022"];
10317 [label="var namespaces = new Dictionary<string, PENestedNamespaceSymbol>(StringOrdinalComparer.Instance); 987023"];
10318 [label="foreach (var child in childNamespaces)\n                {\n                    var c = new PENestedNamespaceSymbol(child.Key, this, child.Value);\n                    namespaces.Add(c.Name, c);\n                } 987024"];
10319 [label="var c = new PENestedNamespaceSymbol(child.Key, this, child.Value); 987025"];
10320 [label="var c = new PENestedNamespaceSymbol(child.Key, this, child.Value); 987026"];
10321 [label="var c = new PENestedNamespaceSymbol(child.Key, this, child.Value); 987027"];
10322 [label="new PENestedNamespaceSymbol(child.Key, this, child.Value) 987028"];
10323 [label="param PENestedNamespaceSymbol(string name) 987029"];
10324 [label="param PENestedNamespaceSymbol(PENamespaceSymbol containingNamespace) 987030"];
10325 [label="param PENestedNamespaceSymbol(IEnumerable<IGrouping<string, TypeDefinitionHandle>> typesByNS) 987031"];
10326 [label="param PENestedNamespaceSymbol(this) 987032"];
10327 [label="param PENestedNamespaceSymbol(this) 987033"];
10328 [label="_containingNamespaceSymbol 987034"];
10329 [label="_name 987035"];
10330 [label="_typesByNS 987036"];
10331 [label="Debug.Assert(name != null); 987037"];
10332 [label="Debug.Assert(name != null); 987038"];
10333 [label="Debug.Assert((object)containingNamespace != null); 987039"];
10334 [label="Debug.Assert((object)containingNamespace != null); 987040"];
10335 [label="Debug.Assert(typesByNS != null); 987041"];
10336 [label="Debug.Assert(typesByNS != null); 987042"];
10337 [label="_containingNamespaceSymbol 987043"];
10338 [label="_name 987044"];
10339 [label="_typesByNS 987045"];
10340 [label="c.Name 987046"];
10341 [label="get\n            {\n                return _name;\n            } 987047"];
10342 [label="return _name; 987048"];
10343 [label="namespaces.Add(c.Name, c); 987049"];
10344 [label="namespaces.Add(c.Name, c); 987050"];
10345 [label="namespaces.Add(c.Name, c); 987051"];
10346 [label="Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null); 987052"];
10347 [label="Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null); 987053"];
10348 [label="Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null); 987054"];
10349 [label="Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null); 987055"];
10350 [label="LazyInitializeNamespaces(nestedNamespaces); 987056"];
10351 [label="LazyInitializeTypes(nestedTypes); 987057"];
10352 [label="LazyInitializeTypes(nestedTypes) 987058"];
10353 [label="param LazyInitializeTypes(IEnumerable<IGrouping<string, TypeDefinitionHandle>> typeGroups) 987059"];
10354 [label="param LazyInitializeTypes(this) 987060"];
10355 [label="if (this.lazyTypes == null)\n            {\n                var moduleSymbol = ContainingPEModule;\n\n                var children = ArrayBuilder<PENamedTypeSymbol>.GetInstance();\n                var skipCheckForPiaType = !moduleSymbol.Module.ContainsNoPiaLocalTypes();\n                Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null;\n\n                foreach (var g in typeGroups)\n                {\n                    foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                }\n\n                var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance);\n                children.Free();\n\n                if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                }\n\n                var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null);\n\n                // Build cache of TypeDef Tokens\n                // Potentially this can be done in the background.\n                if (original == null)\n                {\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                }\n            } 987061"];
10356 [label="if (this.lazyTypes == null)\n            {\n                var moduleSymbol = ContainingPEModule;\n\n                var children = ArrayBuilder<PENamedTypeSymbol>.GetInstance();\n                var skipCheckForPiaType = !moduleSymbol.Module.ContainsNoPiaLocalTypes();\n                Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null;\n\n                foreach (var g in typeGroups)\n                {\n                    foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                }\n\n                var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance);\n                children.Free();\n\n                if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                }\n\n                var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null);\n\n                // Build cache of TypeDef Tokens\n                // Potentially this can be done in the background.\n                if (original == null)\n                {\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                }\n            } 987062"];
10357 [label="ContainingPEModule 987063"];
10358 [label="get\n            {\n                return _moduleSymbol;\n            } 987064"];
10359 [label="return _moduleSymbol; 987065"];
10360 [label="var moduleSymbol = ContainingPEModule; 987066"];
10361 [label="var children = ArrayBuilder<PENamedTypeSymbol>.GetInstance(); 987067"];
10362 [label="moduleSymbol.Module 987068"];
10363 [label="get\n            {\n                return _module;\n            } 987069"];
10364 [label="var skipCheckForPiaType = !moduleSymbol.Module.ContainsNoPiaLocalTypes(); 987070"];
10365 [label="Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null; 987071"];
10366 [label="foreach (var g in typeGroups)\n                {\n                    foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                } 987072"];
10367 [label="foreach (var g in typeGroups)\n                {\n                    foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                } 987073"];
10368 [label="foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    } 987074"];
10369 [label="if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        } 987075"];
10370 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 987076"];
10371 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 987077"];
10372 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 987078"];
10373 [label="EmptyComparer.Instance 987079"];
10374 [label="new Dictionary<string, ImmutableArray<PENamedTypeSymbol>>(EmptyComparer.Instance) 987080"];
10375 [label="s_emptyNestedTypes = new Dictionary<string, ImmutableArray<PENamedTypeSymbol>>(EmptyComparer.Instance) 987081"];
10376 [label="new UncommonProperties() 987082"];
10377 [label="param UncommonProperties(this) 987083"];
10378 [label="lazyEnumUnderlyingType 987084"];
10379 [label="lazyObsoleteAttributeData = ObsoleteAttributeData.Uninitialized 987085"];
10380 [label="lazyAttributeUsageInfo = AttributeUsageInfo.Null 987086"];
10381 [label="lazyContainsExtensionMethods 987087"];
10382 [label="lazyIsByRefLike 987088"];
10383 [label="lazyIsReadOnly 987089"];
10384 [label="lazyDefaultMemberName 987090"];
10385 [label="lazyComImportCoClassType = ErrorTypeSymbol.UnknownResultType 987091"];
10386 [label="lazyHasEmbeddedAttribute = ThreeState.Unknown 987092"];
10387 [label="s_noUncommonProperties = new UncommonProperties() 987093"];
10388 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 987094"];
10389 [label="PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key) 987095"];
10390 [label="param Create(PEModuleSymbol moduleSymbol) 987096"];
10391 [label="param Create(PENamespaceSymbol containingNamespace) 987097"];
10392 [label="param Create(TypeDefinitionHandle handle) 987098"];
10393 [label="param Create(string emittedNamespaceName) 987099"];
10394 [label="GenericParameterHandleCollection genericParameterHandles; 987100"];
10395 [label="genericParameterHandles 987101"];
10396 [label="ushort arity; 987102"];
10397 [label="BadImageFormatException mrEx = null; 987103"];
10398 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 987104"];
10399 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 987105"];
10400 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 987106"];
10401 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 987107"];
10402 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 987108"];
10403 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx) 987109"];
10404 [label="param GetGenericInfo(PEModuleSymbol moduleSymbol) 987110"];
10405 [label="param GetGenericInfo(TypeDefinitionHandle handle) 987111"];
10406 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 987112"];
10407 [label="param GetGenericInfo(out ushort arity) 987113"];
10408 [label="param GetGenericInfo(out BadImageFormatException mrEx) 987114"];
10409 [label="moduleSymbol.Module 987115"];
10410 [label="get\n            {\n                return _module;\n            } 987116"];
10411 [label="genericParameterHandles = moduleSymbol.Module.GetTypeDefGenericParamsOrThrow(handle); 987117"];
10412 [label="genericParameterHandles = moduleSymbol.Module.GetTypeDefGenericParamsOrThrow(handle); 987118"];
10413 [label="genericParameterHandles = moduleSymbol.Module.GetTypeDefGenericParamsOrThrow(handle); 987119"];
10414 [label="arity = (ushort)genericParameterHandles.Count; 987120"];
10415 [label="mrEx = null; 987121"];
10416 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 987122"];
10417 [label="bool mangleName; 987123"];
10418 [label="PENamedTypeSymbol result; 987124"];
10419 [label="if (arity == 0)\n            {\n                result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName);\n            }\n            else\n            {\n                result = new PENamedTypeSymbolGeneric(\n                    moduleSymbol,\n                    containingNamespace,\n                    handle,\n                    emittedNamespaceName,\n                    genericParameterHandles,\n                    arity,\n                    out mangleName);\n            } 987125"];
10420 [label="if (arity == 0)\n            {\n                result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName);\n            }\n            else\n            {\n                result = new PENamedTypeSymbolGeneric(\n                    moduleSymbol,\n                    containingNamespace,\n                    handle,\n                    emittedNamespaceName,\n                    genericParameterHandles,\n                    arity,\n                    out mangleName);\n            } 987126"];
10421 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 987127"];
10422 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 987128"];
10423 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 987129"];
10424 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 987130"];
10425 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 987131"];
10426 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 987132"];
10427 [label="new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName) 987133"];
10428 [label="param PENamedTypeSymbolNonGeneric(PEModuleSymbol moduleSymbol) 987134"];
10429 [label="param PENamedTypeSymbolNonGeneric(NamespaceOrTypeSymbol container) 987135"];
10430 [label="param PENamedTypeSymbolNonGeneric(TypeDefinitionHandle handle) 987136"];
10431 [label="param PENamedTypeSymbolNonGeneric(string emittedNamespaceName) 987137"];
10432 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 987138"];
10433 [label="param PENamedTypeSymbolNonGeneric(this) 987139"];
10434 [label="moduleSymbol 987140"];
10435 [label="container 987141"];
10436 [label="handle 987142"];
10437 [label="emittedNamespaceName 987143"];
10438 [label="0 987144"];
10439 [label="mangleName 987145"];
10440 [label="param PENamedTypeSymbolNonGeneric(this) 987146"];
10441 [label="param PENamedTypeSymbol(PEModuleSymbol moduleSymbol) 987147"];
10442 [label="param PENamedTypeSymbol(NamespaceOrTypeSymbol container) 987148"];
10443 [label="param PENamedTypeSymbol(TypeDefinitionHandle handle) 987149"];
10444 [label="param PENamedTypeSymbol(string emittedNamespaceName) 987150"];
10445 [label="param PENamedTypeSymbol(ushort arity) 987151"];
10446 [label="param PENamedTypeSymbol(out bool mangleName) 987152"];
10447 [label="param PENamedTypeSymbol(this) 987153"];
10448 [label="param PENamedTypeSymbol(this) 987154"];
10449 [label="param NamedTypeSymbol(this) 987155"];
10450 [label="param NamedTypeSymbol(TupleExtraData tupleData = null) 987156"];
10451 [label="param NamedTypeSymbol(this) 987157"];
10452 [label="param TypeSymbol(this) 987158"];
10453 [label="param TypeSymbol(this) 987159"];
10454 [label="_lazyAbstractMembers 987160"];
10455 [label="_lazyInterfaceInfo 987161"];
10456 [label="_lazyAdapter 987162"];
10457 [label="_hasNoBaseCycles 987163"];
10458 [label="_lazyTupleData 987164"];
10459 [label="_lazyTupleData 987165"];
10460 [label="_container 987166"];
10461 [label="_name 987167"];
10462 [label="_flags 987168"];
10463 [label="_corTypeId 987169"];
10464 [label="_lazyMemberNames 987170"];
10465 [label="_lazyMembersByName 987171"];
10466 [label="_lazyNestedTypes 987172"];
10467 [label="_lazyKind 987173"];
10468 [label="_lazyNullableContextValue 987174"];
10469 [label="_lazyBaseType = ErrorTypeSymbol.UnknownResultType 987175"];
10470 [label="default(ImmutableArray<NamedTypeSymbol>) 987176"];
10471 [label="_lazyInterfaces = default(ImmutableArray<NamedTypeSymbol>) 987177"];
10472 [label="_lazyDeclaredBaseType = ErrorTypeSymbol.UnknownResultType 987178"];
10473 [label="default(ImmutableArray<NamedTypeSymbol>) 987179"];
10474 [label="_lazyDeclaredInterfaces = default(ImmutableArray<NamedTypeSymbol>) 987180"];
10475 [label="_lazyDocComment 987181"];
10476 [label="_lazyUseSiteDiagnostic = CSDiagnosticInfo.EmptyErrorInfo 987182"];
10477 [label="_lazyUncommonProperties 987183"];
10478 [label="public IEnumerable<object> fieldDefs { get; set; } 987184"];
10479 [label="Debug.Assert(!handle.IsNil); 987185"];
10480 [label="Debug.Assert((object)container != null); 987186"];
10481 [label="Debug.Assert((object)container != null); 987187"];
10482 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 987188"];
10483 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 987189"];
10484 [label="string metadataName; 987190"];
10485 [label="bool makeBad = false; 987191"];
10486 [label="moduleSymbol.Module 987192"];
10487 [label="get\n            {\n                return _module;\n            } 987193"];
10488 [label="metadataName = moduleSymbol.Module.GetTypeDefNameOrThrow(handle); 987194"];
10489 [label="metadataName = moduleSymbol.Module.GetTypeDefNameOrThrow(handle); 987195"];
10490 [label="metadataName = moduleSymbol.Module.GetTypeDefNameOrThrow(handle); 987196"];
10491 [label="_handle 987197"];
10492 [label="_container 987198"];
10493 [label="moduleSymbol.Module 987199"];
10494 [label="get\n            {\n                return _module;\n            } 987200"];
10495 [label="return _module; 987201"];
10496 [label="_flags = moduleSymbol.Module.GetTypeDefFlagsOrThrow(handle); 987202"];
10497 [label="_flags = moduleSymbol.Module.GetTypeDefFlagsOrThrow(handle); 987203"];
10498 [label="_flags 987204"];
10499 [label="if (arity == 0)\n            {\n                _name = metadataName;\n                mangleName = false;\n            }\n            else\n            {\n                // Unmangle name for a generic type.\n                _name = MetadataHelpers.UnmangleMetadataNameForArity(metadataName, arity);\n                Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName));\n                mangleName = !ReferenceEquals(_name, metadataName);\n            } 987205"];
10500 [label="if (arity == 0)\n            {\n                _name = metadataName;\n                mangleName = false;\n            }\n            else\n            {\n                // Unmangle name for a generic type.\n                _name = MetadataHelpers.UnmangleMetadataNameForArity(metadataName, arity);\n                Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName));\n                mangleName = !ReferenceEquals(_name, metadataName);\n            } 987206"];
10501 [label="_name 987207"];
10502 [label="mangleName = false; 987208"];
10503 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 987209"];
10504 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 987210"];
10505 [label="moduleSymbol.ContainingAssembly 987211"];
10506 [label="get\n            {\n                return _assemblySymbol;\n            } 987212"];
10507 [label="return _assemblySymbol; 987213"];
10508 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 987214"];
10509 [label="moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes 987215"];
10510 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 987216"];
10511 [label="this.CorLibrary 987217"];
10512 [label="get\n            {\n                return _corLibrary;\n            } 987218"];
10513 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 987219"];
10514 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 987220"];
10515 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 987221"];
10516 [label="_corTypeId 987222"];
10517 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 987223"];
10518 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 987224"];
10519 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 987225"];
10520 [label="return result; 987226"];
10521 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 987227"];
10522 [label="var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance); 987228"];
10523 [label="var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance); 987229"];
10524 [label="var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance); 987230"];
10525 [label="get\n            {\n                return _name;\n            } 987231"];
10526 [label="return _name; 987232"];
10527 [label="children.Free(); 987233"];
10528 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 987234"];
10529 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 987235"];
10530 [label="var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null); 987236"];
10531 [label="var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null); 987237"];
10532 [label="var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null); 987238"];
10533 [label="if (original == null)\n                {\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                } 987239"];
10534 [label="if (original == null)\n                {\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                } 987240"];
10535 [label="moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict); 987241"];
10536 [label="moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict) 987242"];
10537 [label="param OnNewTypeDeclarationsLoaded(Dictionary<string, ImmutableArray<PENamedTypeSymbol>> typesDict) 987243"];
10538 [label="param OnNewTypeDeclarationsLoaded(this) 987244"];
10539 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 987245"];
10540 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 987246"];
10541 [label="foreach (var types in typesDict.Values)\n            {\n                foreach (var type in types)\n                {\n                    bool added;\n                    added = TypeHandleToTypeMap.TryAdd(type.Handle, type);\n                    Debug.Assert(added);\n\n                    // Register newly loaded COR types\n                    if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    }\n                }\n            } 987247"];
10542 [label="foreach (var type in types)\n                {\n                    bool added;\n                    added = TypeHandleToTypeMap.TryAdd(type.Handle, type);\n                    Debug.Assert(added);\n\n                    // Register newly loaded COR types\n                    if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    }\n                } 987248"];
10543 [label="bool added; 987249"];
10544 [label="type.Handle 987250"];
10545 [label="get\n            {\n                return _handle;\n            } 987251"];
10546 [label="return _handle; 987252"];
10547 [label="added = TypeHandleToTypeMap.TryAdd(type.Handle, type); 987253"];
10548 [label="added = TypeHandleToTypeMap.TryAdd(type.Handle, type); 987254"];
10549 [label="added = TypeHandleToTypeMap.TryAdd(type.Handle, type); 987255"];
10550 [label="Debug.Assert(added); 987256"];
10551 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 987257"];
10552 [label="moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict); 987258"];
10553 [label="LazyInitializeTypes(nestedTypes); 987259"];
10554 [label="LoadAllMembers(groups); 987260"];
10555 [label="EnsureAllMembersLoaded(); 987261"];
10556 [label="PENestedNamespaceSymbol ns = null; 987262"];
10557 [label="ImmutableArray<PENamedTypeSymbol> t; 987263"];
10558 [label="t 987264"];
10559 [label="if (lazyNamespaces.TryGetValue(name, out ns))\n            {\n                if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                }\n            }\n            else if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 987265"];
10560 [label="if (lazyNamespaces.TryGetValue(name, out ns))\n            {\n                if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                }\n            }\n            else if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 987266"];
10561 [label="if (lazyNamespaces.TryGetValue(name, out ns))\n            {\n                if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                }\n            }\n            else if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 987267"];
10562 [label="if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 987268"];
10563 [label="if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 987269"];
10564 [label="if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 987270"];
10565 [label="return ImmutableArray<Symbol>.Empty; 987271"];
10566 [label="if ((object)scope == null)\n                {\n                    break;\n                } 987272"];
10567 [label="param TopLevel(ModuleSymbol module) 987273"];
10568 [label="param TopLevel(DiagnosticInfo? errorInfo = null) 987274"];
10569 [label="module 987275"];
10570 [label="1 987276"];
10571 [label="errorInfo 987277"];
10572 [label="param TopLevel(ModuleSymbol module) 987278"];
10573 [label="param TopLevel(int typeId) 987279"];
10574 [label="param TopLevel(DiagnosticInfo? errorInfo) 987280"];
10575 [label="module 987281"];
10576 [label="1 987282"];
10577 [label="fullName.ForcedArity == -1 987283"];
10578 [label="fullName.ForcedArity == -1 || fullName.ForcedArity == fullName.InferredArity 987284"];
10579 [label="errorInfo 987285"];
10580 [label="typeId 987286"];
10581 [label="param TopLevel(ModuleSymbol module) 987287"];
10582 [label="param TopLevel(bool mangleName) 987288"];
10583 [label="param TopLevel(DiagnosticInfo? errorInfo) 987289"];
10584 [label="param TopLevel(int typeId) 987290"];
10585 [label="param TopLevel(this) 987291"];
10586 [label="module 987292"];
10587 [label="fullName.NamespaceName 987293"];
10588 [label="mangleName 987294"];
10589 [label="fullName.UnmangledTypeName 987295"];
10590 [label="mangleName 987296"];
10591 [label="fullName.InferredArity 987297"];
10592 [label="mangleName 987298"];
10593 [label="false 987299"];
10594 [label="errorInfo 987300"];
10595 [label="null 987301"];
10596 [label="typeId 987302"];
10597 [label="null 987303"];
10598 [label="param TopLevel(ModuleSymbol module) 987304"];
10599 [label="param TopLevel(string @namespace) 987305"];
10600 [label="param TopLevel(string name) 987306"];
10601 [label="param TopLevel(int arity) 987307"];
10602 [label="param TopLevel(bool mangleName) 987308"];
10603 [label="param TopLevel(bool isNativeInt) 987309"];
10604 [label="param TopLevel(DiagnosticInfo? errorInfo) 987310"];
10605 [label="param TopLevel(NamespaceSymbol? containingNamespace) 987311"];
10606 [label="param TopLevel(int typeId) 987312"];
10607 [label="param TopLevel(TupleExtraData? tupleData) 987313"];
10608 [label="param TopLevel(this) 987314"];
10609 [label="name 987315"];
10610 [label="arity 987316"];
10611 [label="mangleName 987317"];
10612 [label="tupleData 987318"];
10613 [label="param MissingMetadataTypeSymbol(string name) 987319"];
10614 [label="param MissingMetadataTypeSymbol(int arity) 987320"];
10615 [label="param MissingMetadataTypeSymbol(bool mangleName) 987321"];
10616 [label="param MissingMetadataTypeSymbol(TupleExtraData? tupleData = null) 987322"];
10617 [label="param MissingMetadataTypeSymbol(this) 987323"];
10618 [label="tupleData 987324"];
10619 [label="param ErrorTypeSymbol(TupleExtraData? tupleData = null) 987325"];
10620 [label="param ErrorTypeSymbol(this) 987326"];
10621 [label="tupleData 987327"];
10622 [label="param NamedTypeSymbol(TupleExtraData tupleData = null) 987328"];
10623 [label="param NamedTypeSymbol(this) 987329"];
10624 [label="param TypeSymbol(this) 987330"];
10625 [label="_lazyAbstractMembers 987331"];
10626 [label="_lazyInterfaceInfo 987332"];
10627 [label="_lazyAdapter 987333"];
10628 [label="_hasNoBaseCycles 987334"];
10629 [label="_lazyTupleData 987335"];
10630 [label="_lazyTupleData 987336"];
10631 [label="name 987337"];
10632 [label="arity 987338"];
10633 [label="mangleName 987339"];
10634 [label="RoslynDebug.Assert(name != null); 987340"];
10635 [label="RoslynDebug.Assert(name != null); 987341"];
10636 [label="this.name 987342"];
10637 [label="this.arity 987343"];
10638 [label="this.mangleName = (mangleName && arity > 0); 987344"];
10639 [label="this.mangleName = (mangleName && arity > 0); 987345"];
10640 [label="this.mangleName = (mangleName && arity > 0); 987346"];
10641 [label="this.mangleName 987347"];
10642 [label="_namespaceName 987348"];
10643 [label="_containingModule 987349"];
10644 [label="_isNativeInt 987350"];
10645 [label="_lazyErrorInfo 987351"];
10646 [label="_lazyContainingNamespace 987352"];
10647 [label="_lazyTypeId 987353"];
10648 [label="RoslynDebug.Assert((object)module != null); 987354"];
10649 [label="RoslynDebug.Assert((object)module != null); 987355"];
10650 [label="RoslynDebug.Assert(@namespace != null); 987356"];
10651 [label="RoslynDebug.Assert(@namespace != null); 987357"];
10652 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 987358"];
10653 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 987359"];
10654 [label="_namespaceName 987360"];
10655 [label="_containingModule 987361"];
10656 [label="_isNativeInt 987362"];
10657 [label="_lazyErrorInfo 987363"];
10658 [label="_lazyContainingNamespace 987364"];
10659 [label="_lazyTypeId 987365"];
10660 [label="Debug.Assert((object)result != null); 987366"];
10661 [label="Debug.Assert((object)result != null); 987367"];
10662 [label="if (!(newResult is MissingMetadataTypeSymbol))\n                        {\n                            result = newResult;\n                            break;\n                        } 987368"];
10663 [label="bool foundMatchInThisAssembly = (i < count); 987369"];
10664 [label="Debug.Assert(!foundMatchInThisAssembly || (object)result.ContainingAssembly == (object)this); 987370"];
10665 [label="if (!foundMatchInThisAssembly && digThroughForwardedTypes)\n                {\n                    // We didn't find the type\n                    System.Diagnostics.Debug.Assert(result is MissingMetadataTypeSymbol);\n\n                    NamedTypeSymbol forwarded = TryLookupForwardedMetadataTypeWithCycleDetection(ref emittedName, visitedAssemblies);\n                    if ((object)forwarded != null)\n                    {\n                        result = forwarded;\n                    }\n                } 987371"];
10666 [label="System.Diagnostics.Debug.Assert((object)result != null); 987372"];
10667 [label="System.Diagnostics.Debug.Assert((object)result != null); 987373"];
10668 [label="if (digThroughForwardedTypes || foundMatchInThisAssembly)\n                {\n                    CacheTopLevelMetadataType(ref emittedName, result);\n                } 987374"];
10669 [label="return result; 987375"];
10670 [label="if (!IsAcceptableMatchForGetTypeByMetadataName(result))\n            {\n                return null;\n            } 987376"];
10671 [label="IsAcceptableMatchForGetTypeByMetadataName(result) 987377"];
10672 [label="param IsAcceptableMatchForGetTypeByMetadataName(NamedTypeSymbol candidate) 987378"];
10673 [label="candidate.Kind 987379"];
10674 [label="get\n            {\n                return SymbolKind.ErrorType;\n            } 987380"];
10675 [label="return SymbolKind.ErrorType; 987381"];
10676 [label="return candidate.Kind != SymbolKind.ErrorType || !(candidate is MissingMetadataTypeSymbol); 987382"];
10677 [label="return candidate.Kind != SymbolKind.ErrorType || !(candidate is MissingMetadataTypeSymbol); 987383"];
10678 [label="return null; 987384"];
10679 [label="if (isWellKnownType && !IsValidWellKnownType(result))\n            {\n                result = null;\n            } 987385"];
10680 [label="IsValidWellKnownType(result) 987386"];
10681 [label="param IsValidWellKnownType(NamedTypeSymbol result) 987387"];
10682 [label="param IsValidWellKnownType(this) 987388"];
10683 [label="if ((object)result == null || result.TypeKind == TypeKind.Error)\n            {\n                return false;\n            } 987389"];
10684 [label="if ((object)result == null || result.TypeKind == TypeKind.Error)\n            {\n                return false;\n            } 987390"];
10685 [label="return false; 987391"];
10686 [label="if (isWellKnownType && !IsValidWellKnownType(result))\n            {\n                result = null;\n            } 987392"];
10687 [label="result = null; 987393"];
10688 [label="if ((object)result != null || !includeReferences)\n            {\n                return result;\n            } 987394"];
10689 [label="if ((object)result != null || !includeReferences)\n            {\n                return result;\n            } 987395"];
10690 [label="if ((object)result != null || !includeReferences)\n            {\n                return result;\n            } 987396"];
10691 [label="Debug.Assert(this is SourceAssemblySymbol,\n                'Never include references for a non-source assembly, because they don't know about aliases.'); 987397"];
10692 [label="Debug.Assert(this is SourceAssemblySymbol,\n                'Never include references for a non-source assembly, because they don't know about aliases.'); 987398"];
10693 [label="var assemblies = ArrayBuilder<AssemblySymbol>.GetInstance(); 987399"];
10694 [label="if (assemblyOpt != null)\n            {\n                assemblies.AddRange(DeclaringCompilation.GetBoundReferenceManager().ReferencedAssemblies);\n            }\n            else\n            {\n                DeclaringCompilation.GetUnaliasedReferencedAssemblies(assemblies);\n            } 987400"];
10695 [label="if (assemblyOpt != null)\n            {\n                assemblies.AddRange(DeclaringCompilation.GetBoundReferenceManager().ReferencedAssemblies);\n            }\n            else\n            {\n                DeclaringCompilation.GetUnaliasedReferencedAssemblies(assemblies);\n            } 987401"];
10696 [label="DeclaringCompilation 987402"];
10697 [label="get\n            {\n                return _compilation;\n            } 987403"];
10698 [label="return _compilation; 987404"];
10699 [label="DeclaringCompilation.GetUnaliasedReferencedAssemblies(assemblies); 987405"];
10700 [label="DeclaringCompilation.GetUnaliasedReferencedAssemblies(assemblies); 987406"];
10701 [label="DeclaringCompilation.GetUnaliasedReferencedAssemblies(assemblies) 987407"];
10702 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 987408"];
10703 [label="param GetUnaliasedReferencedAssemblies(this) 987409"];
10704 [label="GetBoundReferenceManager() 987410"];
10705 [label="param GetBoundReferenceManager(this) 987411"];
10706 [label="var referenceManager = GetBoundReferenceManager(); 987412"];
10707 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 987413"];
10708 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 987414"];
10709 [label="DeclaringCompilation.GetUnaliasedReferencedAssemblies(assemblies); 987415"];
10710 [label="foreach (var assembly in assemblies)\n            {\n                Debug.Assert(!(this is SourceAssemblySymbol && assembly.IsMissing)); // Non-source assemblies can have missing references\n\n                NamedTypeSymbol candidate = GetTopLevelTypeByMetadataName(assembly, ref metadataName, assemblyOpt);\n\n                if (isWellKnownType && !IsValidWellKnownType(candidate))\n                {\n                    candidate = null;\n                }\n\n                if ((object)candidate == null)\n                {\n                    continue;\n                }\n\n                if (candidate.IsHiddenByCodeAnalysisEmbeddedAttribute())\n                {\n                    continue;\n                }\n\n                Debug.Assert(!TypeSymbol.Equals(candidate, result, TypeCompareKind.ConsiderEverything2));\n\n                if ((object)result != null)\n                {\n                    // duplicate\n                    if (ignoreCorLibraryDuplicatedTypes)\n                    {\n                        if (IsInCorLib(candidate))\n                        {\n                            // ignore candidate\n                            continue;\n                        }\n                        if (IsInCorLib(result))\n                        {\n                            // drop previous result\n                            result = candidate;\n                            continue;\n                        }\n                    }\n\n                    if (warnings == null)\n                    {\n                        conflicts = (result.ContainingAssembly, candidate.ContainingAssembly);\n                        result = null;\n                    }\n                    else\n                    {\n                        // The predefined type '{0}' is defined in multiple assemblies in the global alias; using definition from '{1}'\n                        warnings.Add(ErrorCode.WRN_MultiplePredefTypes, NoLocation.Singleton, result, result.ContainingAssembly);\n                    }\n\n                    break;\n                }\n\n                result = candidate;\n            } 987416"];
10711 [label="assemblies.Free(); 987417"];
10712 [label="return result; 987418"];
10713 [label="return ((object)type == null || type.IsErrorType()) ? null : type; 987419"];
10714 [label="return ((object)type == null || type.IsErrorType()) ? null : type; 987420"];
10715 [label="((object)type == null || type.IsErrorType()) 987421"];
10716 [label="if (result is null)\n                {\n                    // TODO: should GetTypeByMetadataName rather return a missing symbol?\n                    MetadataTypeName emittedName = MetadataTypeName.FromFullName(mdName, useCLSCompliantNameArityEncoding: true);\n                    if (type.IsValueTupleType())\n                    {\n                        CSDiagnosticInfo errorInfo;\n                        if (conflicts.Item1 is null)\n                        {\n                            Debug.Assert(conflicts.Item2 is null);\n                            errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_PredefinedValueTupleTypeNotFound, emittedName.FullName);\n                        }\n                        else\n                        {\n                            errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_PredefinedValueTupleTypeAmbiguous3, emittedName.FullName, conflicts.Item1, conflicts.Item2);\n                        }\n\n                        result = new MissingMetadataTypeSymbol.TopLevel(this.Assembly.Modules[0], ref emittedName, type, errorInfo);\n                    }\n                    else\n                    {\n                        result = new MissingMetadataTypeSymbol.TopLevel(this.Assembly.Modules[0], ref emittedName, type);\n                    }\n                } 987422"];
10717 [label="MetadataTypeName emittedName = MetadataTypeName.FromFullName(mdName, useCLSCompliantNameArityEncoding: true); 987423"];
10718 [label="MetadataTypeName emittedName = MetadataTypeName.FromFullName(mdName, useCLSCompliantNameArityEncoding: true); 987424"];
10719 [label="if (type.IsValueTupleType())\n                    {\n                        CSDiagnosticInfo errorInfo;\n                        if (conflicts.Item1 is null)\n                        {\n                            Debug.Assert(conflicts.Item2 is null);\n                            errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_PredefinedValueTupleTypeNotFound, emittedName.FullName);\n                        }\n                        else\n                        {\n                            errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_PredefinedValueTupleTypeAmbiguous3, emittedName.FullName, conflicts.Item1, conflicts.Item2);\n                        }\n\n                        result = new MissingMetadataTypeSymbol.TopLevel(this.Assembly.Modules[0], ref emittedName, type, errorInfo);\n                    }\n                    else\n                    {\n                        result = new MissingMetadataTypeSymbol.TopLevel(this.Assembly.Modules[0], ref emittedName, type);\n                    } 987425"];
10720 [label="this.Assembly 987426"];
10721 [label="GetBoundReferenceManager() 987427"];
10722 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 987428"];
10723 [label="return _referenceManager; 987429"];
10724 [label="GetBoundReferenceManager(); 987430"];
10725 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 987431"];
10726 [label="result = new MissingMetadataTypeSymbol.TopLevel(this.Assembly.Modules[0], ref emittedName, type); 987432"];
10727 [label="this.Assembly.Modules 987433"];
10728 [label="get\n            {\n                return _modules;\n            } 987434"];
10729 [label="result = new MissingMetadataTypeSymbol.TopLevel(this.Assembly.Modules[0], ref emittedName, type); 987435"];
10730 [label="result = new MissingMetadataTypeSymbol.TopLevel(this.Assembly.Modules[0], ref emittedName, type); 987436"];
10731 [label="result = new MissingMetadataTypeSymbol.TopLevel(this.Assembly.Modules[0], ref emittedName, type); 987437"];
10732 [label="new MissingMetadataTypeSymbol.TopLevel(this.Assembly.Modules[0], ref emittedName, type) 987438"];
10733 [label="param TopLevel(ModuleSymbol module) 987439"];
10734 [label="param TopLevel(ref MetadataTypeName fullName) 987440"];
10735 [label="param TopLevel(WellKnownType wellKnownType) 987441"];
10736 [label="param TopLevel(DiagnosticInfo? errorInfo = null) 987442"];
10737 [label="param TopLevel(this) 987443"];
10738 [label="module 987444"];
10739 [label="fullName 987445"];
10740 [label="wellKnownType 987446"];
10741 [label="errorInfo 987447"];
10742 [label="param TopLevel(this) 987448"];
10743 [label="param TopLevel(ModuleSymbol module) 987449"];
10744 [label="param TopLevel(ref MetadataTypeName fullName) 987450"];
10745 [label="param TopLevel(int typeId) 987451"];
10746 [label="param TopLevel(DiagnosticInfo? errorInfo) 987452"];
10747 [label="param TopLevel(this) 987453"];
10748 [label="module 987454"];
10749 [label="fullName 987455"];
10750 [label="1 987456"];
10751 [label="fullName.ForcedArity == -1 987457"];
10752 [label="fullName.ForcedArity == -1 || fullName.ForcedArity == fullName.InferredArity 987458"];
10753 [label="errorInfo 987459"];
10754 [label="typeId 987460"];
10755 [label="param TopLevel(this) 987461"];
10756 [label="param TopLevel(ModuleSymbol module) 987462"];
10757 [label="param TopLevel(ref MetadataTypeName fullName) 987463"];
10758 [label="param TopLevel(bool mangleName) 987464"];
10759 [label="param TopLevel(DiagnosticInfo? errorInfo) 987465"];
10760 [label="param TopLevel(int typeId) 987466"];
10761 [label="param TopLevel(this) 987467"];
10762 [label="module 987468"];
10763 [label="fullName.NamespaceName 987469"];
10764 [label="mangleName 987470"];
10765 [label="fullName.UnmangledTypeName 987471"];
10766 [label="mangleName 987472"];
10767 [label="fullName.InferredArity 987473"];
10768 [label="mangleName 987474"];
10769 [label="false 987475"];
10770 [label="errorInfo 987476"];
10771 [label="null 987477"];
10772 [label="typeId 987478"];
10773 [label="null 987479"];
10774 [label="param TopLevel(this) 987480"];
10775 [label="param TopLevel(ModuleSymbol module) 987481"];
10776 [label="param TopLevel(string @namespace) 987482"];
10777 [label="param TopLevel(string name) 987483"];
10778 [label="param TopLevel(int arity) 987484"];
10779 [label="param TopLevel(bool mangleName) 987485"];
10780 [label="param TopLevel(bool isNativeInt) 987486"];
10781 [label="param TopLevel(DiagnosticInfo? errorInfo) 987487"];
10782 [label="param TopLevel(NamespaceSymbol? containingNamespace) 987488"];
10783 [label="param TopLevel(int typeId) 987489"];
10784 [label="param TopLevel(TupleExtraData? tupleData) 987490"];
10785 [label="param TopLevel(this) 987491"];
10786 [label="name 987492"];
10787 [label="arity 987493"];
10788 [label="mangleName 987494"];
10789 [label="tupleData 987495"];
10790 [label="param TopLevel(this) 987496"];
10791 [label="param MissingMetadataTypeSymbol(string name) 987497"];
10792 [label="param MissingMetadataTypeSymbol(int arity) 987498"];
10793 [label="param MissingMetadataTypeSymbol(bool mangleName) 987499"];
10794 [label="param MissingMetadataTypeSymbol(TupleExtraData? tupleData = null) 987500"];
10795 [label="param MissingMetadataTypeSymbol(this) 987501"];
10796 [label="tupleData 987502"];
10797 [label="param MissingMetadataTypeSymbol(this) 987503"];
10798 [label="param ErrorTypeSymbol(TupleExtraData? tupleData = null) 987504"];
10799 [label="param ErrorTypeSymbol(this) 987505"];
10800 [label="tupleData 987506"];
10801 [label="param ErrorTypeSymbol(this) 987507"];
10802 [label="param NamedTypeSymbol(TupleExtraData tupleData = null) 987508"];
10803 [label="param NamedTypeSymbol(this) 987509"];
10804 [label="param NamedTypeSymbol(this) 987510"];
10805 [label="param TypeSymbol(this) 987511"];
10806 [label="param TypeSymbol(this) 987512"];
10807 [label="_lazyAbstractMembers 987513"];
10808 [label="_lazyInterfaceInfo 987514"];
10809 [label="_lazyAdapter 987515"];
10810 [label="_hasNoBaseCycles 987516"];
10811 [label="_lazyTupleData 987517"];
10812 [label="_lazyTupleData 987518"];
10813 [label="name 987519"];
10814 [label="arity 987520"];
10815 [label="mangleName 987521"];
10816 [label="RoslynDebug.Assert(name != null); 987522"];
10817 [label="RoslynDebug.Assert(name != null); 987523"];
10818 [label="this.name 987524"];
10819 [label="this.arity 987525"];
10820 [label="this.mangleName = (mangleName && arity > 0); 987526"];
10821 [label="this.mangleName = (mangleName && arity > 0); 987527"];
10822 [label="this.mangleName = (mangleName && arity > 0); 987528"];
10823 [label="this.mangleName 987529"];
10824 [label="_namespaceName 987530"];
10825 [label="_containingModule 987531"];
10826 [label="_isNativeInt 987532"];
10827 [label="_lazyErrorInfo 987533"];
10828 [label="_lazyContainingNamespace 987534"];
10829 [label="_lazyTypeId 987535"];
10830 [label="RoslynDebug.Assert((object)module != null); 987536"];
10831 [label="RoslynDebug.Assert((object)module != null); 987537"];
10832 [label="RoslynDebug.Assert(@namespace != null); 987538"];
10833 [label="RoslynDebug.Assert(@namespace != null); 987539"];
10834 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 987540"];
10835 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 987541"];
10836 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 987542"];
10837 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 987543"];
10838 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 987544"];
10839 [label="_namespaceName 987545"];
10840 [label="_containingModule 987546"];
10841 [label="_isNativeInt 987547"];
10842 [label="_lazyErrorInfo 987548"];
10843 [label="_lazyContainingNamespace 987549"];
10844 [label="_lazyTypeId 987550"];
10845 [label="if (Interlocked.CompareExchange(ref _lazyWellKnownTypes[index], result, null) is object)\n                {\n                    Debug.Assert(\n                        TypeSymbol.Equals(result, _lazyWellKnownTypes[index], TypeCompareKind.ConsiderEverything2) || (_lazyWellKnownTypes[index]!.IsErrorType() && result.IsErrorType())\n                    );\n                }\n                else\n                {\n                    AdditionalCodegenWarnings.AddRange(warnings);\n                } 987551"];
10846 [label="if (Interlocked.CompareExchange(ref _lazyWellKnownTypes[index], result, null) is object)\n                {\n                    Debug.Assert(\n                        TypeSymbol.Equals(result, _lazyWellKnownTypes[index], TypeCompareKind.ConsiderEverything2) || (_lazyWellKnownTypes[index]!.IsErrorType() && result.IsErrorType())\n                    );\n                }\n                else\n                {\n                    AdditionalCodegenWarnings.AddRange(warnings);\n                } 987552"];
10847 [label="if (Interlocked.CompareExchange(ref _lazyWellKnownTypes[index], result, null) is object)\n                {\n                    Debug.Assert(\n                        TypeSymbol.Equals(result, _lazyWellKnownTypes[index], TypeCompareKind.ConsiderEverything2) || (_lazyWellKnownTypes[index]!.IsErrorType() && result.IsErrorType())\n                    );\n                }\n                else\n                {\n                    AdditionalCodegenWarnings.AddRange(warnings);\n                } 987553"];
10848 [label="if (Interlocked.CompareExchange(ref _lazyWellKnownTypes[index], result, null) is object)\n                {\n                    Debug.Assert(\n                        TypeSymbol.Equals(result, _lazyWellKnownTypes[index], TypeCompareKind.ConsiderEverything2) || (_lazyWellKnownTypes[index]!.IsErrorType() && result.IsErrorType())\n                    );\n                }\n                else\n                {\n                    AdditionalCodegenWarnings.AddRange(warnings);\n                } 987554"];
10849 [label="AdditionalCodegenWarnings 987555"];
10850 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 987556"];
10851 [label="return _additionalCodegenWarnings; 987557"];
10852 [label="AdditionalCodegenWarnings.AddRange(warnings); 987558"];
10853 [label="AdditionalCodegenWarnings.AddRange(warnings); 987559"];
10854 [label="AdditionalCodegenWarnings.AddRange(warnings); 987560"];
10855 [label="warnings.Free(); 987561"];
10856 [label="return _lazyWellKnownTypes[index]!; 987562"];
10857 [label="Debug.Assert((object)compilationRelaxationsAttribute != null, 'GetWellKnownType unexpectedly returned null'); 987563"];
10858 [label="Debug.Assert((object)compilationRelaxationsAttribute != null, 'GetWellKnownType unexpectedly returned null'); 987564"];
10859 [label="if (!(compilationRelaxationsAttribute is MissingMetadataTypeSymbol))\n                {\n                    // As in Dev10 (see GlobalAttrBind::EmitCompilerGeneratedAttrs), we only synthesize this attribute if CompilationRelaxationsAttribute is found.\n                    Binder.ReportUseSiteDiagnosticForSynthesizedAttribute(compilation,\n                        WellKnownMember.System_Runtime_CompilerServices_CompilationRelaxationsAttribute__ctorInt32, diagnostics, NoLocation.Singleton);\n                } 987565"];
10860 [label="TypeSymbol runtimeCompatibilityAttribute = compilation.GetWellKnownType(WellKnownType.System_Runtime_CompilerServices_RuntimeCompatibilityAttribute); 987566"];
10861 [label="compilation.GetWellKnownType(WellKnownType.System_Runtime_CompilerServices_RuntimeCompatibilityAttribute) 987567"];
10862 [label="param GetWellKnownType(WellKnownType type) 987568"];
10863 [label="param GetWellKnownType(this) 987569"];
10864 [label="Debug.Assert(type.IsValid()); 987570"];
10865 [label="this.Options 987571"];
10866 [label="get\n            {\n                return _options;\n            } 987572"];
10867 [label="return _options; 987573"];
10868 [label="bool ignoreCorLibraryDuplicatedTypes = this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes); 987574"];
10869 [label="bool ignoreCorLibraryDuplicatedTypes = this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes); 987575"];
10870 [label="this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) 987576"];
10871 [label="param Includes(this BinderFlags self) 987577"];
10872 [label="param Includes(BinderFlags other) 987578"];
10873 [label="return (self & other) == other; 987579"];
10874 [label="int index = (int)type - (int)WellKnownType.First; 987580"];
10875 [label="if (_lazyWellKnownTypes == null || _lazyWellKnownTypes[index] is null)\n            {\n                if (_lazyWellKnownTypes == null)\n                {\n                    Interlocked.CompareExchange(ref _lazyWellKnownTypes, new NamedTypeSymbol[(int)WellKnownTypes.Count], null);\n                }\n\n                string mdName = type.GetMetadataName();\n                var warnings = DiagnosticBag.GetInstance();\n                NamedTypeSymbol? result;\n                (AssemblySymbol, AssemblySymbol) conflicts = default;\n\n                if (IsTypeMissing(type))\n                {\n                    result = null;\n                }\n                else\n                {\n                    // well-known types introduced before CSharp7 allow lookup ambiguity and report a warning\n                    DiagnosticBag? legacyWarnings = (type <= WellKnownType.CSharp7Sentinel) ? warnings : null;\n                    result = this.Assembly.GetTypeByMetadataName(\n                        mdName, includeReferences: true, useCLSCompliantNameArityEncoding: true, isWellKnownType: true, conflicts: out conflicts,\n                        warnings: legacyWarnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes);\n                }\n\n                if (result is null)\n                {\n                    // TODO: should GetTypeByMetadataName rather return a missing symbol?\n                    MetadataTypeName emittedName = MetadataTypeName.FromFullName(mdName, useCLSCompliantNameArityEncoding: true);\n                    if (type.IsValueTupleType())\n                    {\n                        CSDiagnosticInfo errorInfo;\n                        if (conflicts.Item1 is null)\n                        {\n                            Debug.Assert(conflicts.Item2 is null);\n                            errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_PredefinedValueTupleTypeNotFound, emittedName.FullName);\n                        }\n                        else\n                        {\n                            errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_PredefinedValueTupleTypeAmbiguous3, emittedName.FullName, conflicts.Item1, conflicts.Item2);\n                        }\n\n                        result = new MissingMetadataTypeSymbol.TopLevel(this.Assembly.Modules[0], ref emittedName, type, errorInfo);\n                    }\n                    else\n                    {\n                        result = new MissingMetadataTypeSymbol.TopLevel(this.Assembly.Modules[0], ref emittedName, type);\n                    }\n                }\n\n                if (Interlocked.CompareExchange(ref _lazyWellKnownTypes[index], result, null) is object)\n                {\n                    Debug.Assert(\n                        TypeSymbol.Equals(result, _lazyWellKnownTypes[index], TypeCompareKind.ConsiderEverything2) || (_lazyWellKnownTypes[index]!.IsErrorType() && result.IsErrorType())\n                    );\n                }\n                else\n                {\n                    AdditionalCodegenWarnings.AddRange(warnings);\n                }\n\n                warnings.Free();\n            } 987581"];
10876 [label="if (_lazyWellKnownTypes == null || _lazyWellKnownTypes[index] is null)\n            {\n                if (_lazyWellKnownTypes == null)\n                {\n                    Interlocked.CompareExchange(ref _lazyWellKnownTypes, new NamedTypeSymbol[(int)WellKnownTypes.Count], null);\n                }\n\n                string mdName = type.GetMetadataName();\n                var warnings = DiagnosticBag.GetInstance();\n                NamedTypeSymbol? result;\n                (AssemblySymbol, AssemblySymbol) conflicts = default;\n\n                if (IsTypeMissing(type))\n                {\n                    result = null;\n                }\n                else\n                {\n                    // well-known types introduced before CSharp7 allow lookup ambiguity and report a warning\n                    DiagnosticBag? legacyWarnings = (type <= WellKnownType.CSharp7Sentinel) ? warnings : null;\n                    result = this.Assembly.GetTypeByMetadataName(\n                        mdName, includeReferences: true, useCLSCompliantNameArityEncoding: true, isWellKnownType: true, conflicts: out conflicts,\n                        warnings: legacyWarnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes);\n                }\n\n                if (result is null)\n                {\n                    // TODO: should GetTypeByMetadataName rather return a missing symbol?\n                    MetadataTypeName emittedName = MetadataTypeName.FromFullName(mdName, useCLSCompliantNameArityEncoding: true);\n                    if (type.IsValueTupleType())\n                    {\n                        CSDiagnosticInfo errorInfo;\n                        if (conflicts.Item1 is null)\n                        {\n                            Debug.Assert(conflicts.Item2 is null);\n                            errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_PredefinedValueTupleTypeNotFound, emittedName.FullName);\n                        }\n                        else\n                        {\n                            errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_PredefinedValueTupleTypeAmbiguous3, emittedName.FullName, conflicts.Item1, conflicts.Item2);\n                        }\n\n                        result = new MissingMetadataTypeSymbol.TopLevel(this.Assembly.Modules[0], ref emittedName, type, errorInfo);\n                    }\n                    else\n                    {\n                        result = new MissingMetadataTypeSymbol.TopLevel(this.Assembly.Modules[0], ref emittedName, type);\n                    }\n                }\n\n                if (Interlocked.CompareExchange(ref _lazyWellKnownTypes[index], result, null) is object)\n                {\n                    Debug.Assert(\n                        TypeSymbol.Equals(result, _lazyWellKnownTypes[index], TypeCompareKind.ConsiderEverything2) || (_lazyWellKnownTypes[index]!.IsErrorType() && result.IsErrorType())\n                    );\n                }\n                else\n                {\n                    AdditionalCodegenWarnings.AddRange(warnings);\n                }\n\n                warnings.Free();\n            } 987582"];
10877 [label="if (_lazyWellKnownTypes == null || _lazyWellKnownTypes[index] is null)\n            {\n                if (_lazyWellKnownTypes == null)\n                {\n                    Interlocked.CompareExchange(ref _lazyWellKnownTypes, new NamedTypeSymbol[(int)WellKnownTypes.Count], null);\n                }\n\n                string mdName = type.GetMetadataName();\n                var warnings = DiagnosticBag.GetInstance();\n                NamedTypeSymbol? result;\n                (AssemblySymbol, AssemblySymbol) conflicts = default;\n\n                if (IsTypeMissing(type))\n                {\n                    result = null;\n                }\n                else\n                {\n                    // well-known types introduced before CSharp7 allow lookup ambiguity and report a warning\n                    DiagnosticBag? legacyWarnings = (type <= WellKnownType.CSharp7Sentinel) ? warnings : null;\n                    result = this.Assembly.GetTypeByMetadataName(\n                        mdName, includeReferences: true, useCLSCompliantNameArityEncoding: true, isWellKnownType: true, conflicts: out conflicts,\n                        warnings: legacyWarnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes);\n                }\n\n                if (result is null)\n                {\n                    // TODO: should GetTypeByMetadataName rather return a missing symbol?\n                    MetadataTypeName emittedName = MetadataTypeName.FromFullName(mdName, useCLSCompliantNameArityEncoding: true);\n                    if (type.IsValueTupleType())\n                    {\n                        CSDiagnosticInfo errorInfo;\n                        if (conflicts.Item1 is null)\n                        {\n                            Debug.Assert(conflicts.Item2 is null);\n                            errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_PredefinedValueTupleTypeNotFound, emittedName.FullName);\n                        }\n                        else\n                        {\n                            errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_PredefinedValueTupleTypeAmbiguous3, emittedName.FullName, conflicts.Item1, conflicts.Item2);\n                        }\n\n                        result = new MissingMetadataTypeSymbol.TopLevel(this.Assembly.Modules[0], ref emittedName, type, errorInfo);\n                    }\n                    else\n                    {\n                        result = new MissingMetadataTypeSymbol.TopLevel(this.Assembly.Modules[0], ref emittedName, type);\n                    }\n                }\n\n                if (Interlocked.CompareExchange(ref _lazyWellKnownTypes[index], result, null) is object)\n                {\n                    Debug.Assert(\n                        TypeSymbol.Equals(result, _lazyWellKnownTypes[index], TypeCompareKind.ConsiderEverything2) || (_lazyWellKnownTypes[index]!.IsErrorType() && result.IsErrorType())\n                    );\n                }\n                else\n                {\n                    AdditionalCodegenWarnings.AddRange(warnings);\n                }\n\n                warnings.Free();\n            } 987583"];
10878 [label="NamedTypeSymbol? result; 987584"];
10879 [label="(AssemblySymbol, AssemblySymbol) conflicts = default; 987585"];
10880 [label="GetBoundReferenceManager() 987586"];
10881 [label="GetBoundReferenceManager(); 987587"];
10882 [label="result = this.Assembly.GetTypeByMetadataName(\n                        mdName, includeReferences: true, useCLSCompliantNameArityEncoding: true, isWellKnownType: true, conflicts: out conflicts,\n                        warnings: legacyWarnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes); 987588"];
10883 [label="param GetTypeByMetadataName(bool includeReferences) 987589"];
10884 [label="param GetTypeByMetadataName(out (AssemblySymbol, AssemblySymbol) conflicts) 987590"];
10885 [label="param GetTypeByMetadataName(DiagnosticBag warnings = null) 987591"];
10886 [label="param GetTypeByMetadataName(bool ignoreCorLibraryDuplicatedTypes = false) 987592"];
10887 [label="NamedTypeSymbol type; 987593"];
10888 [label="MetadataTypeName mdName; 987594"];
10889 [label="mdName 987595"];
10890 [label="param GetTopLevelTypeByMetadataName(AssemblyIdentity assemblyOpt) 987596"];
10891 [label="param GetTopLevelTypeByMetadataName(bool includeReferences) 987597"];
10892 [label="param GetTopLevelTypeByMetadataName(out (AssemblySymbol, AssemblySymbol) conflicts) 987598"];
10893 [label="param GetTopLevelTypeByMetadataName(DiagnosticBag warnings = null) 987599"];
10894 [label="param GetTopLevelTypeByMetadataName(bool ignoreCorLibraryDuplicatedTypes = false) 987600"];
10895 [label="conflicts = default; 987601"];
10896 [label="NamedTypeSymbol result; 987602"];
10897 [label="param GetTopLevelTypeByMetadataName(AssemblyIdentity assemblyOpt) 987603"];
10898 [label="param LookupTopLevelMetadataType(bool digThroughForwardedTypes) 987604"];
10899 [label="param LookupTopLevelMetadataTypeWithCycleDetection(ConsList<AssemblySymbol> visitedAssemblies) 987605"];
10900 [label="param LookupTopLevelMetadataTypeWithCycleDetection(bool digThroughForwardedTypes) 987606"];
10901 [label="NamedTypeSymbol result = null; 987607"];
10902 [label="NamedTypeSymbol result; 987608"];
10903 [label="this.GetNameToMembersMap().TryGetValue(name, out members) 987609"];
10904 [label="if ((object)scope == null)\n                {\n                    break;\n                } 987610"];
10905 [label="param TopLevel(ModuleSymbol module) 987611"];
10906 [label="param TopLevel(DiagnosticInfo? errorInfo = null) 987612"];
10907 [label="module 987613"];
10908 [label="1 987614"];
10909 [label="errorInfo 987615"];
10910 [label="_lazyTupleData 987616"];
10911 [label="name 987617"];
10912 [label="arity 987618"];
10913 [label="mangleName 987619"];
10914 [label="RoslynDebug.Assert(name != null); 987620"];
10915 [label="_namespaceName 987621"];
10916 [label="_containingModule 987622"];
10917 [label="_isNativeInt 987623"];
10918 [label="_lazyErrorInfo 987624"];
10919 [label="_lazyContainingNamespace 987625"];
10920 [label="_lazyTypeId 987626"];
10921 [label="RoslynDebug.Assert((object)module != null); 987627"];
10922 [label="RoslynDebug.Assert((object)module != null); 987628"];
10923 [label="RoslynDebug.Assert(@namespace != null); 987629"];
10924 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 987630"];
10925 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 987631"];
10926 [label="Debug.Assert((object)result != null); 987632"];
10927 [label="EnsureAllMembersLoaded(); 987633"];
10928 [label="return ImmutableArray<Symbol>.Empty; 987634"];
10929 [label="if (!(newResult is MissingMetadataTypeSymbol))\n                        {\n                            result = newResult;\n                            break;\n                        } 987635"];
10930 [label="bool foundMatchInThisAssembly = (i < count); 987636"];
10931 [label="Debug.Assert(!foundMatchInThisAssembly || (object)result.ContainingAssembly == (object)this); 987637"];
10932 [label="if (!foundMatchInThisAssembly && digThroughForwardedTypes)\n                {\n                    // We didn't find the type\n                    System.Diagnostics.Debug.Assert(result is MissingMetadataTypeSymbol);\n\n                    NamedTypeSymbol forwarded = TryLookupForwardedMetadataTypeWithCycleDetection(ref emittedName, visitedAssemblies);\n                    if ((object)forwarded != null)\n                    {\n                        result = forwarded;\n                    }\n                } 987638"];
10933 [label="System.Diagnostics.Debug.Assert((object)result != null); 987639"];
10934 [label="if (digThroughForwardedTypes || foundMatchInThisAssembly)\n                {\n                    CacheTopLevelMetadataType(ref emittedName, result);\n                } 987640"];
10935 [label="get\n            {\n                return SymbolKind.ErrorType;\n            } 987641"];
10936 [label="param IsValidWellKnownType(this) 987642"];
10937 [label="if (isWellKnownType && !IsValidWellKnownType(result))\n            {\n                result = null;\n            } 987643"];
10938 [label="if ((object)result != null || !includeReferences)\n            {\n                return result;\n            } 987644"];
10939 [label="if ((object)result != null || !includeReferences)\n            {\n                return result;\n            } 987645"];
10940 [label="if ((object)result != null || !includeReferences)\n            {\n                return result;\n            } 987646"];
10941 [label="Debug.Assert(this is SourceAssemblySymbol,\n                'Never include references for a non-source assembly, because they don't know about aliases.'); 987647"];
10942 [label="var assemblies = ArrayBuilder<AssemblySymbol>.GetInstance(); 987648"];
10943 [label="if (assemblyOpt != null)\n            {\n                assemblies.AddRange(DeclaringCompilation.GetBoundReferenceManager().ReferencedAssemblies);\n            }\n            else\n            {\n                DeclaringCompilation.GetUnaliasedReferencedAssemblies(assemblies);\n            } 987649"];
10944 [label="if (assemblyOpt != null)\n            {\n                assemblies.AddRange(DeclaringCompilation.GetBoundReferenceManager().ReferencedAssemblies);\n            }\n            else\n            {\n                DeclaringCompilation.GetUnaliasedReferencedAssemblies(assemblies);\n            } 987650"];
10945 [label="DeclaringCompilation 987651"];
10946 [label="return _compilation; 987652"];
10947 [label="DeclaringCompilation.GetUnaliasedReferencedAssemblies(assemblies); 987653"];
10948 [label="DeclaringCompilation.GetUnaliasedReferencedAssemblies(assemblies); 987654"];
10949 [label="DeclaringCompilation.GetUnaliasedReferencedAssemblies(assemblies) 987655"];
10950 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 987656"];
10951 [label="param GetUnaliasedReferencedAssemblies(this) 987657"];
10952 [label="GetBoundReferenceManager() 987658"];
10953 [label="param GetBoundReferenceManager(this) 987659"];
10954 [label="var referenceManager = GetBoundReferenceManager(); 987660"];
10955 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 987661"];
10956 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 987662"];
10957 [label="DeclaringCompilation.GetUnaliasedReferencedAssemblies(assemblies); 987663"];
10958 [label="foreach (var assembly in assemblies)\n            {\n                Debug.Assert(!(this is SourceAssemblySymbol && assembly.IsMissing)); // Non-source assemblies can have missing references\n\n                NamedTypeSymbol candidate = GetTopLevelTypeByMetadataName(assembly, ref metadataName, assemblyOpt);\n\n                if (isWellKnownType && !IsValidWellKnownType(candidate))\n                {\n                    candidate = null;\n                }\n\n                if ((object)candidate == null)\n                {\n                    continue;\n                }\n\n                if (candidate.IsHiddenByCodeAnalysisEmbeddedAttribute())\n                {\n                    continue;\n                }\n\n                Debug.Assert(!TypeSymbol.Equals(candidate, result, TypeCompareKind.ConsiderEverything2));\n\n                if ((object)result != null)\n                {\n                    // duplicate\n                    if (ignoreCorLibraryDuplicatedTypes)\n                    {\n                        if (IsInCorLib(candidate))\n                        {\n                            // ignore candidate\n                            continue;\n                        }\n                        if (IsInCorLib(result))\n                        {\n                            // drop previous result\n                            result = candidate;\n                            continue;\n                        }\n                    }\n\n                    if (warnings == null)\n                    {\n                        conflicts = (result.ContainingAssembly, candidate.ContainingAssembly);\n                        result = null;\n                    }\n                    else\n                    {\n                        // The predefined type '{0}' is defined in multiple assemblies in the global alias; using definition from '{1}'\n                        warnings.Add(ErrorCode.WRN_MultiplePredefTypes, NoLocation.Singleton, result, result.ContainingAssembly);\n                    }\n\n                    break;\n                }\n\n                result = candidate;\n            } 987664"];
10959 [label="assemblies.Free(); 987665"];
10960 [label="GetBoundReferenceManager() 987666"];
10961 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 987667"];
10962 [label="return _referenceManager; 987668"];
10963 [label="GetBoundReferenceManager(); 987669"];
10964 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 987670"];
10965 [label="_lazyTupleData 987671"];
10966 [label="name 987672"];
10967 [label="arity 987673"];
10968 [label="mangleName 987674"];
10969 [label="RoslynDebug.Assert(name != null); 987675"];
10970 [label="_namespaceName 987676"];
10971 [label="_containingModule 987677"];
10972 [label="_isNativeInt 987678"];
10973 [label="_lazyErrorInfo 987679"];
10974 [label="_lazyContainingNamespace 987680"];
10975 [label="_lazyTypeId 987681"];
10976 [label="RoslynDebug.Assert((object)module != null); 987682"];
10977 [label="RoslynDebug.Assert((object)module != null); 987683"];
10978 [label="RoslynDebug.Assert(@namespace != null); 987684"];
10979 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 987685"];
10980 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 987686"];
10981 [label="return _lazyWellKnownTypes[index]!; 987687"];
10982 [label="Debug.Assert((object)runtimeCompatibilityAttribute != null, 'GetWellKnownType unexpectedly returned null'); 987688"];
10983 [label="Debug.Assert((object)runtimeCompatibilityAttribute != null, 'GetWellKnownType unexpectedly returned null'); 987689"];
10984 [label="if (!(runtimeCompatibilityAttribute is MissingMetadataTypeSymbol))\n                {\n                    // As in Dev10 (see GlobalAttrBind::EmitCompilerGeneratedAttrs), we only synthesize this attribute if RuntimeCompatibilityAttribute is found.\n                    Binder.ReportUseSiteDiagnosticForSynthesizedAttribute(compilation,\n                        WellKnownMember.System_Runtime_CompilerServices_RuntimeCompatibilityAttribute__ctor, diagnostics, NoLocation.Singleton);\n\n                    Binder.ReportUseSiteDiagnosticForSynthesizedAttribute(compilation,\n                        WellKnownMember.System_Runtime_CompilerServices_RuntimeCompatibilityAttribute__WrapNonExceptionThrows, diagnostics, NoLocation.Singleton);\n                } 987690"];
10985 [label="ReportDiagnosticsForSynthesizedAttributes(_compilation, diagnostics); 987691"];
10986 [label="param AddDeclarationDiagnostics(DiagnosticBag diagnostics) 987692"];
10987 [label="param AddDeclarationDiagnostics(this) 987693"];
10988 [label="ContainingSymbol 987694"];
10989 [label="get\n            {\n                return null;\n            } 987695"];
10990 [label="return null; 987696"];
10991 [label="if (ContainingSymbol is SourceMemberContainerTypeSymbol container)\n            {\n                container.AssertMemberExposure(this, forDiagnostics: true);\n            } 987697"];
10992 [label="if (!diagnostics.IsEmptyWithoutResolution)\n            {\n                CSharpCompilation compilation = this.DeclaringCompilation;\n                Debug.Assert(compilation != null);\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n            } 987698"];
10993 [label="return (_completeParts & (int)part) == (int)part; 987699"];
10994 [label="return; 987700"];
10995 [label="Debug.Assert(HasAtMostOneBitSet(next), 'ForceComplete won't handle the result correctly if more than one bit is set.'); 987701"];
10996 [label="param HasAtMostOneBitSet(int bits) 987702"];
10997 [label="return (bits & (bits - 1)) == 0; 987703"];
10998 [label="this.Modules 987704"];
10999 [label="return (SourceModuleSymbol)this.Modules[0]; 987705"];
11000 [label="param GetAttributes(this) 987706"];
11001 [label="this.GetAttributesBag() 987707"];
11002 [label="param GetAttributesBag(this) 987708"];
11003 [label="if (_lazyCustomAttributesBag == null || !_lazyCustomAttributesBag.IsSealed)\n            {\n                var mergedAttributes = ((SourceAssemblySymbol)this.ContainingAssembly).GetAttributeDeclarations();\n                if (LoadAndValidateAttributes(OneOrMany.Create(mergedAttributes), ref _lazyCustomAttributesBag))\n                {\n                    var completed = _state.NotePartComplete(CompletionPart.Attributes);\n                    Debug.Assert(completed);\n                }\n            } 987709"];
11004 [label="if (_lazyCustomAttributesBag == null || !_lazyCustomAttributesBag.IsSealed)\n            {\n                var mergedAttributes = ((SourceAssemblySymbol)this.ContainingAssembly).GetAttributeDeclarations();\n                if (LoadAndValidateAttributes(OneOrMany.Create(mergedAttributes), ref _lazyCustomAttributesBag))\n                {\n                    var completed = _state.NotePartComplete(CompletionPart.Attributes);\n                    Debug.Assert(completed);\n                }\n            } 987710"];
11005 [label="this.ContainingAssembly 987711"];
11006 [label="var mergedAttributes = ((SourceAssemblySymbol)this.ContainingAssembly).GetAttributeDeclarations(); 987712"];
11007 [label="((SourceAssemblySymbol)this.ContainingAssembly).GetAttributeDeclarations() 987713"];
11008 [label="param GetAttributeDeclarations(this) 987714"];
11009 [label="var builder = ArrayBuilder<SyntaxList<AttributeListSyntax>>.GetInstance(); 987715"];
11010 [label="compilation.Declarations 987716"];
11011 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 987717"];
11012 [label="Debug.Assert(compilation.Declarations == this); 987718"];
11013 [label="DeclaringCompilation.MergedRootDeclaration.Declarations 987719"];
11014 [label="get { return _declarations; } 987720"];
11015 [label="foreach (RootSingleNamespaceDeclaration rootNs in declarations)\n            {\n                if (rootNs.HasAssemblyAttributes)\n                {\n                    var tree = rootNs.Location.SourceTree;\n                    var root = (CompilationUnitSyntax)tree.GetRoot();\n                    builder.Add(root.AttributeLists);\n                }\n            } 987721"];
11016 [label="rootNs.HasAssemblyAttributes 987722"];
11017 [label="get\n            {\n                return _hasAssemblyAttributes;\n            } 987723"];
11018 [label="return _hasAssemblyAttributes; 987724"];
11019 [label="if (rootNs.HasAssemblyAttributes)\n                {\n                    var tree = rootNs.Location.SourceTree;\n                    var root = (CompilationUnitSyntax)tree.GetRoot();\n                    builder.Add(root.AttributeLists);\n                } 987725"];
11020 [label="return builder.ToImmutableAndFree(); 987726"];
11021 [label="var mergedAttributes = ((SourceAssemblySymbol)this.ContainingAssembly).GetAttributeDeclarations(); 987727"];
11022 [label="if (LoadAndValidateAttributes(OneOrMany.Create(mergedAttributes), ref _lazyCustomAttributesBag))\n                {\n                    var completed = _state.NotePartComplete(CompletionPart.Attributes);\n                    Debug.Assert(completed);\n                } 987728"];
11023 [label="if (LoadAndValidateAttributes(OneOrMany.Create(mergedAttributes), ref _lazyCustomAttributesBag))\n                {\n                    var completed = _state.NotePartComplete(CompletionPart.Attributes);\n                    Debug.Assert(completed);\n                } 987729"];
11024 [label="if (LoadAndValidateAttributes(OneOrMany.Create(mergedAttributes), ref _lazyCustomAttributesBag))\n                {\n                    var completed = _state.NotePartComplete(CompletionPart.Attributes);\n                    Debug.Assert(completed);\n                } 987730"];
11025 [label="LoadAndValidateAttributes(OneOrMany.Create(mergedAttributes), ref _lazyCustomAttributesBag) 987731"];
11026 [label="param LoadAndValidateAttributes(OneOrMany<SyntaxList<AttributeListSyntax>> attributesSyntaxLists) 987732"];
11027 [label="param LoadAndValidateAttributes(ref CustomAttributesBag<CSharpAttributeData> lazyCustomAttributesBag) 987733"];
11028 [label="param LoadAndValidateAttributes(AttributeLocation symbolPart = AttributeLocation.None) 987734"];
11029 [label="param LoadAndValidateAttributes(bool earlyDecodingOnly = false) 987735"];
11030 [label="param LoadAndValidateAttributes(Binder binderOpt = null) 987736"];
11031 [label="param LoadAndValidateAttributes(Func<AttributeSyntax, bool> attributeMatchesOpt = null) 987737"];
11032 [label="param LoadAndValidateAttributes(this) 987738"];
11033 [label="var diagnostics = DiagnosticBag.GetInstance(); 987739"];
11034 [label="this.DeclaringCompilation 987740"];
11035 [label="get\n            {\n                return _assemblySymbol.DeclaringCompilation;\n            } 987741"];
11036 [label="var compilation = this.DeclaringCompilation; 987742"];
11037 [label="ImmutableArray<Binder> binders; 987743"];
11038 [label="binders 987744"];
11039 [label="param GetAttributesToBind(OneOrMany<SyntaxList<AttributeListSyntax>> attributeDeclarationSyntaxLists) 987745"];
11040 [label="param GetAttributesToBind(AttributeLocation symbolPart) 987746"];
11041 [label="param GetAttributesToBind(DiagnosticBag diagnostics) 987747"];
11042 [label="param GetAttributesToBind(CSharpCompilation compilation) 987748"];
11043 [label="param GetAttributesToBind(Func<AttributeSyntax, bool> attributeMatchesOpt) 987749"];
11044 [label="param GetAttributesToBind(Binder rootBinderOpt) 987750"];
11045 [label="param GetAttributesToBind(out ImmutableArray<Binder> binders) 987751"];
11046 [label="param GetAttributesToBind(this) 987752"];
11047 [label="var attributeTarget = (IAttributeTargetSymbol)this; 987753"];
11048 [label="ArrayBuilder<Binder> bindersBuilder = null; 987754"];
11049 [label="int attributesToBindCount = 0; 987755"];
11050 [label="for (int listIndex = 0; listIndex < attributeDeclarationSyntaxLists.Count; listIndex++)\n            {\n                var attributeDeclarationSyntaxList = attributeDeclarationSyntaxLists[listIndex];\n                if (attributeDeclarationSyntaxList.Any())\n                {\n                    int prevCount = attributesToBindCount;\n                    foreach (var attributeDeclarationSyntax in attributeDeclarationSyntaxList)\n                    {\n                        // We bind the attribute only if it has a matching target for the given ownerSymbol and attributeLocation.\n                        if (MatchAttributeTarget(attributeTarget, symbolPart, attributeDeclarationSyntax.Target, diagnostics))\n                        {\n                            if (syntaxBuilder == null)\n                            {\n                                syntaxBuilder = new ArrayBuilder<AttributeSyntax>();\n                                bindersBuilder = new ArrayBuilder<Binder>();\n                            }\n\n                            var attributesToBind = attributeDeclarationSyntax.Attributes;\n                            if (attributeMatchesOpt is null)\n                            {\n                                syntaxBuilder.AddRange(attributesToBind);\n                                attributesToBindCount += attributesToBind.Count;\n                            }\n                            else\n                            {\n                                foreach (var attribute in attributesToBind)\n                                {\n                                    if (attributeMatchesOpt(attribute))\n                                    {\n                                        syntaxBuilder.Add(attribute);\n                                        attributesToBindCount++;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    if (attributesToBindCount != prevCount)\n                    {\n                        Debug.Assert(attributeDeclarationSyntaxList.Node != null);\n                        Debug.Assert(bindersBuilder != null);\n\n                        var syntaxTree = attributeDeclarationSyntaxList.Node.SyntaxTree;\n                        var binder = rootBinderOpt ?? compilation.GetBinderFactory(syntaxTree).GetBinder(attributeDeclarationSyntaxList.Node);\n\n                        binder = new ContextualAttributeBinder(binder, this);\n                        Debug.Assert(!binder.InAttributeArgument, 'Possible cycle in attribute binding');\n\n                        for (int i = 0; i < attributesToBindCount - prevCount; i++)\n                        {\n                            bindersBuilder.Add(binder);\n                        }\n                    }\n                }\n            } 987756"];
11051 [label="for (int listIndex = 0; listIndex < attributeDeclarationSyntaxLists.Count; listIndex++)\n            {\n                var attributeDeclarationSyntaxList = attributeDeclarationSyntaxLists[listIndex];\n                if (attributeDeclarationSyntaxList.Any())\n                {\n                    int prevCount = attributesToBindCount;\n                    foreach (var attributeDeclarationSyntax in attributeDeclarationSyntaxList)\n                    {\n                        // We bind the attribute only if it has a matching target for the given ownerSymbol and attributeLocation.\n                        if (MatchAttributeTarget(attributeTarget, symbolPart, attributeDeclarationSyntax.Target, diagnostics))\n                        {\n                            if (syntaxBuilder == null)\n                            {\n                                syntaxBuilder = new ArrayBuilder<AttributeSyntax>();\n                                bindersBuilder = new ArrayBuilder<Binder>();\n                            }\n\n                            var attributesToBind = attributeDeclarationSyntax.Attributes;\n                            if (attributeMatchesOpt is null)\n                            {\n                                syntaxBuilder.AddRange(attributesToBind);\n                                attributesToBindCount += attributesToBind.Count;\n                            }\n                            else\n                            {\n                                foreach (var attribute in attributesToBind)\n                                {\n                                    if (attributeMatchesOpt(attribute))\n                                    {\n                                        syntaxBuilder.Add(attribute);\n                                        attributesToBindCount++;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    if (attributesToBindCount != prevCount)\n                    {\n                        Debug.Assert(attributeDeclarationSyntaxList.Node != null);\n                        Debug.Assert(bindersBuilder != null);\n\n                        var syntaxTree = attributeDeclarationSyntaxList.Node.SyntaxTree;\n                        var binder = rootBinderOpt ?? compilation.GetBinderFactory(syntaxTree).GetBinder(attributeDeclarationSyntaxList.Node);\n\n                        binder = new ContextualAttributeBinder(binder, this);\n                        Debug.Assert(!binder.InAttributeArgument, 'Possible cycle in attribute binding');\n\n                        for (int i = 0; i < attributesToBindCount - prevCount; i++)\n                        {\n                            bindersBuilder.Add(binder);\n                        }\n                    }\n                }\n            } 987757"];
11052 [label="binders = ImmutableArray<Binder>.Empty; 987758"];
11053 [label="Debug.Assert(!attributesToBind.IsDefault); 987759"];
11054 [label="ImmutableArray<CSharpAttributeData> boundAttributes; 987760"];
11055 [label="boundAttributes 987761"];
11056 [label="WellKnownAttributeData wellKnownAttributeData; 987762"];
11057 [label="if (earlyDecodingOnly)\n            {\n                diagnostics.Free(); //NOTE: dropped.\n                return false;\n            }\n            else\n            {\n                boundAttributes = ImmutableArray<CSharpAttributeData>.Empty;\n                wellKnownAttributeData = null;\n                Interlocked.CompareExchange(ref lazyCustomAttributesBag, CustomAttributesBag<CSharpAttributeData>.WithEmptyData(), null);\n                this.PostEarlyDecodeWellKnownAttributeTypes();\n            } 987763"];
11058 [label="wellKnownAttributeData = null; 987764"];
11059 [label="this.PostEarlyDecodeWellKnownAttributeTypes() 987765"];
11060 [label="param PostEarlyDecodeWellKnownAttributeTypes(this) 987766"];
11061 [label="this.PostEarlyDecodeWellKnownAttributeTypes(); 987767"];
11062 [label="this.PostDecodeWellKnownAttributes(boundAttributes, attributesToBind, diagnostics, symbolPart, wellKnownAttributeData); 987768"];
11063 [label="this.PostDecodeWellKnownAttributes(boundAttributes, attributesToBind, diagnostics, symbolPart, wellKnownAttributeData); 987769"];
11064 [label="this.PostDecodeWellKnownAttributes(boundAttributes, attributesToBind, diagnostics, symbolPart, wellKnownAttributeData); 987770"];
11065 [label="this.PostDecodeWellKnownAttributes(boundAttributes, attributesToBind, diagnostics, symbolPart, wellKnownAttributeData); 987771"];
11066 [label="this.PostDecodeWellKnownAttributes(boundAttributes, attributesToBind, diagnostics, symbolPart, wellKnownAttributeData) 987772"];
11067 [label="param PostDecodeWellKnownAttributes(ImmutableArray<CSharpAttributeData> boundAttributes) 987773"];
11068 [label="param PostDecodeWellKnownAttributes(ImmutableArray<AttributeSyntax> allAttributeSyntaxNodes) 987774"];
11069 [label="param PostDecodeWellKnownAttributes(DiagnosticBag diagnostics) 987775"];
11070 [label="param PostDecodeWellKnownAttributes(AttributeLocation symbolPart) 987776"];
11071 [label="param PostDecodeWellKnownAttributes(WellKnownAttributeData decodedData) 987777"];
11072 [label="param PostDecodeWellKnownAttributes(this) 987778"];
11073 [label="this.PostDecodeWellKnownAttributes(boundAttributes, attributesToBind, diagnostics, symbolPart, wellKnownAttributeData); 987779"];
11074 [label="bool lazyAttributesStoredOnThisThread = false; 987780"];
11075 [label="if (attributeMatchesOpt is null)\n                {\n                    this.RecordPresenceOfBadAttributes(boundAttributes);\n                    AddDeclarationDiagnostics(diagnostics);\n                } 987781"];
11076 [label="this.RecordPresenceOfBadAttributes(boundAttributes); 987782"];
11077 [label="this.RecordPresenceOfBadAttributes(boundAttributes) 987783"];
11078 [label="param RecordPresenceOfBadAttributes(ImmutableArray<CSharpAttributeData> boundAttributes) 987784"];
11079 [label="param RecordPresenceOfBadAttributes(this) 987785"];
11080 [label="foreach (var attribute in boundAttributes)\n            {\n                if (attribute.HasErrors)\n                {\n                    CSharpCompilation compilation = this.DeclaringCompilation;\n                    Debug.Assert(compilation != null);\n                    ((SourceModuleSymbol)compilation.SourceModule).RecordPresenceOfBadAttributes();\n                    break;\n                }\n            } 987786"];
11081 [label="this.RecordPresenceOfBadAttributes(boundAttributes); 987787"];
11082 [label="AddDeclarationDiagnostics(diagnostics); 987788"];
11083 [label="AddDeclarationDiagnostics(diagnostics) 987789"];
11084 [label="param AddDeclarationDiagnostics(DiagnosticBag diagnostics) 987790"];
11085 [label="param AddDeclarationDiagnostics(this) 987791"];
11086 [label="ContainingSymbol 987792"];
11087 [label="get\n            {\n                return _assemblySymbol;\n            } 987793"];
11088 [label="return _assemblySymbol; 987794"];
11089 [label="if (ContainingSymbol is SourceMemberContainerTypeSymbol container)\n            {\n                container.AssertMemberExposure(this, forDiagnostics: true);\n            } 987795"];
11090 [label="if (!diagnostics.IsEmptyWithoutResolution)\n            {\n                CSharpCompilation compilation = this.DeclaringCompilation;\n                Debug.Assert(compilation != null);\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n            } 987796"];
11091 [label="AddDeclarationDiagnostics(diagnostics); 987797"];
11092 [label="Debug.Assert(lazyCustomAttributesBag.IsSealed); 987798"];
11093 [label="diagnostics.Free(); 987799"];
11094 [label="var completed = _state.NotePartComplete(CompletionPart.Attributes); 987800"];
11095 [label="_state.NotePartComplete(CompletionPart.Attributes) 987801"];
11096 [label="param NotePartComplete(CompletionPart part) 987802"];
11097 [label="Debug.Assert(completed); 987803"];
11098 [label="return _lazyCustomAttributesBag; 987804"];
11099 [label="return this.GetAttributesBag().Attributes; 987805"];
11100 [label="Assembly.ForceComplete(location, cancellationToken); 987806"];
11101 [label="return (_completeParts & (int)part) == (int)part; 987807"];
11102 [label="return; 987808"];
11103 [label="Debug.Assert(HasAtMostOneBitSet(next), 'ForceComplete won't handle the result correctly if more than one bit is set.'); 987809"];
11104 [label="param HasAtMostOneBitSet(int bits) 987810"];
11105 [label="return (bits & (bits - 1)) == 0; 987811"];
11106 [label="GetAssembliesToEmbedTypesFrom() 987812"];
11107 [label="Debug.Assert(!_lazyAssembliesToEmbedTypesFrom.IsDefault); 987813"];
11108 [label="return _lazyAssembliesToEmbedTypesFrom; 987814"];
11109 [label="return GetAssembliesToEmbedTypesFrom().Length > 0; 987815"];
11110 [label="return GetAssembliesToEmbedTypesFrom().Length > 0; 987816"];
11111 [label="return (_completeParts & (int)part) == (int)part; 987817"];
11112 [label="return; 987818"];
11113 [label="Debug.Assert(HasAtMostOneBitSet(next), 'ForceComplete won't handle the result correctly if more than one bit is set.'); 987819"];
11114 [label="param HasAtMostOneBitSet(int bits) 987820"];
11115 [label="return (bits & (bits - 1)) == 0; 987821"];
11116 [label="get\n            {\n                if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                }\n\n                return _globalNamespace;\n            } 987822"];
11117 [label="if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                } 987823"];
11118 [label="get\n            {\n                return _hasUsings;\n            } 987824"];
11119 [label="return _hasUsings; 987825"];
11120 [label="get\n            {\n                return _hasExternAliases;\n            } 987826"];
11121 [label="return _hasExternAliases; 987827"];
11122 [label="param GetMembers(this) 987828"];
11123 [label="if ((_flags & LazyAllMembersIsSorted) != 0)\n            {\n                return _lazyAllMembers;\n            }\n            else\n            {\n                var allMembers = this.GetMembersUnordered();\n\n                if (allMembers.Length >= 2)\n                {\n                    // The array isn't sorted. Sort it and remember that we sorted it.\n                    allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance);\n                    ImmutableInterlocked.InterlockedExchange(ref _lazyAllMembers, allMembers);\n                }\n\n                ThreadSafeFlagOperations.Set(ref _flags, LazyAllMembersIsSorted);\n                return allMembers;\n            } 987829"];
11124 [label="if ((_flags & LazyAllMembersIsSorted) != 0)\n            {\n                return _lazyAllMembers;\n            }\n            else\n            {\n                var allMembers = this.GetMembersUnordered();\n\n                if (allMembers.Length >= 2)\n                {\n                    // The array isn't sorted. Sort it and remember that we sorted it.\n                    allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance);\n                    ImmutableInterlocked.InterlockedExchange(ref _lazyAllMembers, allMembers);\n                }\n\n                ThreadSafeFlagOperations.Set(ref _flags, LazyAllMembersIsSorted);\n                return allMembers;\n            } 987830"];
11125 [label="this.GetMembersUnordered() 987831"];
11126 [label="param GetMembersUnordered(this) 987832"];
11127 [label="var result = _lazyAllMembers; 987833"];
11128 [label="if (result.IsDefault)\n            {\n                var members = StaticCast<Symbol>.From(this.GetNameToMembersMap().Flatten(null));  // don't sort.\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyAllMembers, members);\n                result = _lazyAllMembers;\n            } 987834"];
11129 [label="this.GetNameToMembersMap() 987835"];
11130 [label="var members = StaticCast<Symbol>.From(this.GetNameToMembersMap().Flatten(null)); 987836"];
11131 [label="var members = StaticCast<Symbol>.From(this.GetNameToMembersMap().Flatten(null)); 987837"];
11132 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyAllMembers, members); 987838"];
11133 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyAllMembers, members); 987839"];
11134 [label="result = _lazyAllMembers; 987840"];
11135 [label="return result.ConditionallyDeOrder(); 987841"];
11136 [label="var allMembers = this.GetMembersUnordered(); 987842"];
11137 [label="if (allMembers.Length >= 2)\n                {\n                    // The array isn't sorted. Sort it and remember that we sorted it.\n                    allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance);\n                    ImmutableInterlocked.InterlockedExchange(ref _lazyAllMembers, allMembers);\n                } 987843"];
11138 [label="if (allMembers.Length >= 2)\n                {\n                    // The array isn't sorted. Sort it and remember that we sorted it.\n                    allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance);\n                    ImmutableInterlocked.InterlockedExchange(ref _lazyAllMembers, allMembers);\n                } 987844"];
11139 [label="ThreadSafeFlagOperations.Set(ref _flags, LazyAllMembersIsSorted); 987845"];
11140 [label="ThreadSafeFlagOperations.Set(ref _flags, LazyAllMembersIsSorted); 987846"];
11141 [label="return allMembers; 987847"];
11142 [label="Assembly.ForceComplete(location, cancellationToken); 987848"];
11143 [label="get\n            {\n                switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                }\n\n                var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol;\n                return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation;\n            } 987849"];
11144 [label="this.Kind 987850"];
11145 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 987851"];
11146 [label="return SymbolKind.Namespace; 987852"];
11147 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 987853"];
11148 [label="this.ContainingModule 987854"];
11149 [label="get\n            {\n                return _module;\n            } 987855"];
11150 [label="return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation; 987856"];
11151 [label="return (_completeParts & (int)part) == (int)part; 987857"];
11152 [label="return; 987858"];
11153 [label="Debug.Assert(HasAtMostOneBitSet(next), 'ForceComplete won't handle the result correctly if more than one bit is set.'); 987859"];
11154 [label="param HasAtMostOneBitSet(int bits) 987860"];
11155 [label="return (bits & (bits - 1)) == 0; 987861"];
11156 [label="param HasComplete(CompletionPart part) 987862"];
11157 [label="param HasComplete(this) 987863"];
11158 [label="return _state.HasComplete(part); 987864"];
11159 [label="_state.HasComplete(part) 987865"];
11160 [label="param HasComplete(CompletionPart part) 987866"];
11161 [label="param HasComplete(this) 987867"];
11162 [label="return (_completeParts & (int)part) == (int)part; 987868"];
11163 [label="return (_completeParts & (int)part) == (int)part; 987869"];
11164 [label="return; 987870"];
11165 [label="Debug.Assert(HasAtMostOneBitSet(next), 'ForceComplete won't handle the result correctly if more than one bit is set.'); 987871"];
11166 [label="param HasAtMostOneBitSet(int bits) 987872"];
11167 [label="return (bits & (bits - 1)) == 0; 987873"];
11168 [label="param HasComplete(CompletionPart part) 987874"];
11169 [label="param HasComplete(this) 987875"];
11170 [label="return _state.HasComplete(part); 987876"];
11171 [label="_state.HasComplete(part) 987877"];
11172 [label="param HasComplete(CompletionPart part) 987878"];
11173 [label="param HasComplete(this) 987879"];
11174 [label="return (_completeParts & (int)part) == (int)part; 987880"];
11175 [label="return (_completeParts & (int)part) == (int)part; 987881"];
11176 [label="return; 987882"];
11177 [label="Debug.Assert(HasAtMostOneBitSet(next), 'ForceComplete won't handle the result correctly if more than one bit is set.'); 987883"];
11178 [label="param HasAtMostOneBitSet(int bits) 987884"];
11179 [label="return (bits & (bits - 1)) == 0; 987885"];
11180 [label="param ReportDiagnosticsForAddedModules(this) 987886"];
11181 [label="var diagnostics = DiagnosticBag.GetInstance(); 987887"];
11182 [label="_compilation.GetBoundReferenceManager() 987888"];
11183 [label="param GetBoundReferenceManager(this) 987889"];
11184 [label="foreach (var pair in _compilation.GetBoundReferenceManager().ReferencedModuleIndexMap)\n            {\n                var fileRef = pair.Key as PortableExecutableReference;\n\n                if ((object)fileRef != null && (object)fileRef.FilePath != null)\n                {\n                    string fileName = FileNameUtilities.GetFileName(fileRef.FilePath);\n                    string moduleName = _modules[pair.Value].Name;\n\n                    if (!string.Equals(fileName, moduleName, StringComparison.OrdinalIgnoreCase))\n                    {\n                        // Used to be ERR_ALinkFailed\n                        diagnostics.Add(ErrorCode.ERR_NetModuleNameMismatch, NoLocation.Singleton, moduleName, fileName);\n                    }\n                }\n            } 987890"];
11185 [label="var fileRef = pair.Key as PortableExecutableReference; 987891"];
11186 [label="if ((object)fileRef != null && (object)fileRef.FilePath != null)\n                {\n                    string fileName = FileNameUtilities.GetFileName(fileRef.FilePath);\n                    string moduleName = _modules[pair.Value].Name;\n\n                    if (!string.Equals(fileName, moduleName, StringComparison.OrdinalIgnoreCase))\n                    {\n                        // Used to be ERR_ALinkFailed\n                        diagnostics.Add(ErrorCode.ERR_NetModuleNameMismatch, NoLocation.Singleton, moduleName, fileName);\n                    }\n                } 987892"];
11187 [label="if ((object)fileRef != null && (object)fileRef.FilePath != null)\n                {\n                    string fileName = FileNameUtilities.GetFileName(fileRef.FilePath);\n                    string moduleName = _modules[pair.Value].Name;\n\n                    if (!string.Equals(fileName, moduleName, StringComparison.OrdinalIgnoreCase))\n                    {\n                        // Used to be ERR_ALinkFailed\n                        diagnostics.Add(ErrorCode.ERR_NetModuleNameMismatch, NoLocation.Singleton, moduleName, fileName);\n                    }\n                } 987893"];
11188 [label="if ((object)fileRef != null && (object)fileRef.FilePath != null)\n                {\n                    string fileName = FileNameUtilities.GetFileName(fileRef.FilePath);\n                    string moduleName = _modules[pair.Value].Name;\n\n                    if (!string.Equals(fileName, moduleName, StringComparison.OrdinalIgnoreCase))\n                    {\n                        // Used to be ERR_ALinkFailed\n                        diagnostics.Add(ErrorCode.ERR_NetModuleNameMismatch, NoLocation.Singleton, moduleName, fileName);\n                    }\n                } 987894"];
11189 [label="if (_modules.Length > 1 && !_compilation.Options.OutputKind.IsNetModule())\n            {\n                var assemblyMachine = this.Machine;\n                bool isPlatformAgnostic = (assemblyMachine == System.Reflection.PortableExecutable.Machine.I386 && !this.Bit32Required);\n                var knownModuleNames = new HashSet<String>(StringComparer.OrdinalIgnoreCase);\n\n                for (int i = 1; i < _modules.Length; i++)\n                {\n                    ModuleSymbol m = _modules[i];\n                    if (!knownModuleNames.Add(m.Name))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NetModuleNameMustBeUnique, NoLocation.Singleton, m.Name);\n                    }\n\n                    if (!((PEModuleSymbol)m).Module.IsCOFFOnly)\n                    {\n                        var moduleMachine = m.Machine;\n\n                        if (moduleMachine == System.Reflection.PortableExecutable.Machine.I386 && !m.Bit32Required)\n                        {\n                            // Other module is agnostic, this is always safe\n                            ;\n                        }\n                        else if (isPlatformAgnostic)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_AgnosticToMachineModule, NoLocation.Singleton, m);\n                        }\n                        else if (assemblyMachine != moduleMachine)\n                        {\n                            // Different machine types, and neither is agnostic\n                            // So it is a conflict\n                            diagnostics.Add(ErrorCode.ERR_ConflictingMachineModule, NoLocation.Singleton, m);\n                        }\n                    }\n                }\n\n                // Assembly main module must explicitly reference all the modules referenced by other assembly \n                // modules, i.e. all modules from transitive closure must be referenced explicitly here\n                for (int i = 1; i < _modules.Length; i++)\n                {\n                    var m = (PEModuleSymbol)_modules[i];\n\n                    try\n                    {\n                        foreach (var referencedModuleName in m.Module.GetReferencedManagedModulesOrThrow())\n                        {\n                            // Do not report error for this module twice\n                            if (knownModuleNames.Add(referencedModuleName))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_MissingNetModuleReference, NoLocation.Singleton, referencedModuleName);\n                            }\n                        }\n                    }\n                    catch (BadImageFormatException)\n                    {\n                        diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    }\n                }\n            } 987895"];
11190 [label="if (_modules.Length > 1 && !_compilation.Options.OutputKind.IsNetModule())\n            {\n                var assemblyMachine = this.Machine;\n                bool isPlatformAgnostic = (assemblyMachine == System.Reflection.PortableExecutable.Machine.I386 && !this.Bit32Required);\n                var knownModuleNames = new HashSet<String>(StringComparer.OrdinalIgnoreCase);\n\n                for (int i = 1; i < _modules.Length; i++)\n                {\n                    ModuleSymbol m = _modules[i];\n                    if (!knownModuleNames.Add(m.Name))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NetModuleNameMustBeUnique, NoLocation.Singleton, m.Name);\n                    }\n\n                    if (!((PEModuleSymbol)m).Module.IsCOFFOnly)\n                    {\n                        var moduleMachine = m.Machine;\n\n                        if (moduleMachine == System.Reflection.PortableExecutable.Machine.I386 && !m.Bit32Required)\n                        {\n                            // Other module is agnostic, this is always safe\n                            ;\n                        }\n                        else if (isPlatformAgnostic)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_AgnosticToMachineModule, NoLocation.Singleton, m);\n                        }\n                        else if (assemblyMachine != moduleMachine)\n                        {\n                            // Different machine types, and neither is agnostic\n                            // So it is a conflict\n                            diagnostics.Add(ErrorCode.ERR_ConflictingMachineModule, NoLocation.Singleton, m);\n                        }\n                    }\n                }\n\n                // Assembly main module must explicitly reference all the modules referenced by other assembly \n                // modules, i.e. all modules from transitive closure must be referenced explicitly here\n                for (int i = 1; i < _modules.Length; i++)\n                {\n                    var m = (PEModuleSymbol)_modules[i];\n\n                    try\n                    {\n                        foreach (var referencedModuleName in m.Module.GetReferencedManagedModulesOrThrow())\n                        {\n                            // Do not report error for this module twice\n                            if (knownModuleNames.Add(referencedModuleName))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_MissingNetModuleReference, NoLocation.Singleton, referencedModuleName);\n                            }\n                        }\n                    }\n                    catch (BadImageFormatException)\n                    {\n                        diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    }\n                }\n            } 987896"];
11191 [label="_compilation.Options 987897"];
11192 [label="get\n            {\n                return _options;\n            } 987898"];
11193 [label="if (_modules.Length > 1 && !_compilation.Options.OutputKind.IsNetModule())\n            {\n                var assemblyMachine = this.Machine;\n                bool isPlatformAgnostic = (assemblyMachine == System.Reflection.PortableExecutable.Machine.I386 && !this.Bit32Required);\n                var knownModuleNames = new HashSet<String>(StringComparer.OrdinalIgnoreCase);\n\n                for (int i = 1; i < _modules.Length; i++)\n                {\n                    ModuleSymbol m = _modules[i];\n                    if (!knownModuleNames.Add(m.Name))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NetModuleNameMustBeUnique, NoLocation.Singleton, m.Name);\n                    }\n\n                    if (!((PEModuleSymbol)m).Module.IsCOFFOnly)\n                    {\n                        var moduleMachine = m.Machine;\n\n                        if (moduleMachine == System.Reflection.PortableExecutable.Machine.I386 && !m.Bit32Required)\n                        {\n                            // Other module is agnostic, this is always safe\n                            ;\n                        }\n                        else if (isPlatformAgnostic)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_AgnosticToMachineModule, NoLocation.Singleton, m);\n                        }\n                        else if (assemblyMachine != moduleMachine)\n                        {\n                            // Different machine types, and neither is agnostic\n                            // So it is a conflict\n                            diagnostics.Add(ErrorCode.ERR_ConflictingMachineModule, NoLocation.Singleton, m);\n                        }\n                    }\n                }\n\n                // Assembly main module must explicitly reference all the modules referenced by other assembly \n                // modules, i.e. all modules from transitive closure must be referenced explicitly here\n                for (int i = 1; i < _modules.Length; i++)\n                {\n                    var m = (PEModuleSymbol)_modules[i];\n\n                    try\n                    {\n                        foreach (var referencedModuleName in m.Module.GetReferencedManagedModulesOrThrow())\n                        {\n                            // Do not report error for this module twice\n                            if (knownModuleNames.Add(referencedModuleName))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_MissingNetModuleReference, NoLocation.Singleton, referencedModuleName);\n                            }\n                        }\n                    }\n                    catch (BadImageFormatException)\n                    {\n                        diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    }\n                }\n            } 987899"];
11194 [label="this.Machine 987900"];
11195 [label="get\n            {\n                return Modules[0].Machine;\n            } 987901"];
11196 [label="Modules 987902"];
11197 [label="get\n            {\n                return _modules;\n            } 987903"];
11198 [label="return Modules[0].Machine; 987904"];
11199 [label="return Modules[0].Machine; 987905"];
11200 [label="Modules[0].Machine 987906"];
11201 [label="get\n            {\n                switch (DeclaringCompilation.Options.Platform)\n                {\n                    case Platform.Arm:\n                        return Machine.ArmThumb2;\n                    case Platform.X64:\n                        return Machine.Amd64;\n                    case Platform.Arm64:\n                        return Machine.Arm64;\n                    case Platform.Itanium:\n                        return Machine.IA64;\n                    default:\n                        return Machine.I386;\n                }\n            } 987907"];
11202 [label="DeclaringCompilation 987908"];
11203 [label="get\n            {\n                return _assemblySymbol.DeclaringCompilation;\n            } 987909"];
11204 [label="switch (DeclaringCompilation.Options.Platform)\n                {\n                    case Platform.Arm:\n                        return Machine.ArmThumb2;\n                    case Platform.X64:\n                        return Machine.Amd64;\n                    case Platform.Arm64:\n                        return Machine.Arm64;\n                    case Platform.Itanium:\n                        return Machine.IA64;\n                    default:\n                        return Machine.I386;\n                } 987910"];
11205 [label="DeclaringCompilation.Options 987911"];
11206 [label="get\n            {\n                return _options;\n            } 987912"];
11207 [label="return Machine.I386; 987913"];
11208 [label="var assemblyMachine = this.Machine; 987914"];
11209 [label="bool isPlatformAgnostic = (assemblyMachine == System.Reflection.PortableExecutable.Machine.I386 && !this.Bit32Required); 987915"];
11210 [label="this.Bit32Required 987916"];
11211 [label="get\n            {\n                return Modules[0].Bit32Required;\n            } 987917"];
11212 [label="Modules 987918"];
11213 [label="get\n            {\n                return _modules;\n            } 987919"];
11214 [label="return _modules; 987920"];
11215 [label="return Modules[0].Bit32Required; 987921"];
11216 [label="return Modules[0].Bit32Required; 987922"];
11217 [label="Modules[0].Bit32Required 987923"];
11218 [label="get\n            {\n                return DeclaringCompilation.Options.Platform == Platform.X86;\n            } 987924"];
11219 [label="DeclaringCompilation 987925"];
11220 [label="get\n            {\n                return _assemblySymbol.DeclaringCompilation;\n            } 987926"];
11221 [label="return DeclaringCompilation.Options.Platform == Platform.X86; 987927"];
11222 [label="DeclaringCompilation.Options 987928"];
11223 [label="get\n            {\n                return _options;\n            } 987929"];
11224 [label="bool isPlatformAgnostic = (assemblyMachine == System.Reflection.PortableExecutable.Machine.I386 && !this.Bit32Required); 987930"];
11225 [label="bool isPlatformAgnostic = (assemblyMachine == System.Reflection.PortableExecutable.Machine.I386 && !this.Bit32Required); 987931"];
11226 [label="var knownModuleNames = new HashSet<String>(StringComparer.OrdinalIgnoreCase); 987932"];
11227 [label="for (int i = 1; i < _modules.Length; i++)\n                {\n                    ModuleSymbol m = _modules[i];\n                    if (!knownModuleNames.Add(m.Name))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NetModuleNameMustBeUnique, NoLocation.Singleton, m.Name);\n                    }\n\n                    if (!((PEModuleSymbol)m).Module.IsCOFFOnly)\n                    {\n                        var moduleMachine = m.Machine;\n\n                        if (moduleMachine == System.Reflection.PortableExecutable.Machine.I386 && !m.Bit32Required)\n                        {\n                            // Other module is agnostic, this is always safe\n                            ;\n                        }\n                        else if (isPlatformAgnostic)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_AgnosticToMachineModule, NoLocation.Singleton, m);\n                        }\n                        else if (assemblyMachine != moduleMachine)\n                        {\n                            // Different machine types, and neither is agnostic\n                            // So it is a conflict\n                            diagnostics.Add(ErrorCode.ERR_ConflictingMachineModule, NoLocation.Singleton, m);\n                        }\n                    }\n                } 987933"];
11228 [label="for (int i = 1; i < _modules.Length; i++)\n                {\n                    ModuleSymbol m = _modules[i];\n                    if (!knownModuleNames.Add(m.Name))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NetModuleNameMustBeUnique, NoLocation.Singleton, m.Name);\n                    }\n\n                    if (!((PEModuleSymbol)m).Module.IsCOFFOnly)\n                    {\n                        var moduleMachine = m.Machine;\n\n                        if (moduleMachine == System.Reflection.PortableExecutable.Machine.I386 && !m.Bit32Required)\n                        {\n                            // Other module is agnostic, this is always safe\n                            ;\n                        }\n                        else if (isPlatformAgnostic)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_AgnosticToMachineModule, NoLocation.Singleton, m);\n                        }\n                        else if (assemblyMachine != moduleMachine)\n                        {\n                            // Different machine types, and neither is agnostic\n                            // So it is a conflict\n                            diagnostics.Add(ErrorCode.ERR_ConflictingMachineModule, NoLocation.Singleton, m);\n                        }\n                    }\n                } 987934"];
11229 [label="ModuleSymbol m = _modules[i]; 987935"];
11230 [label="m.Name 987936"];
11231 [label="get\n            {\n                return _module.Name;\n            } 987937"];
11232 [label="return _module.Name; 987938"];
11233 [label="if (!knownModuleNames.Add(m.Name))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NetModuleNameMustBeUnique, NoLocation.Singleton, m.Name);\n                    } 987939"];
11234 [label="if (!knownModuleNames.Add(m.Name))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NetModuleNameMustBeUnique, NoLocation.Singleton, m.Name);\n                    } 987940"];
11235 [label="((PEModuleSymbol)m).Module 987941"];
11236 [label="get\n            {\n                return _module;\n            } 987942"];
11237 [label="if (!((PEModuleSymbol)m).Module.IsCOFFOnly)\n                    {\n                        var moduleMachine = m.Machine;\n\n                        if (moduleMachine == System.Reflection.PortableExecutable.Machine.I386 && !m.Bit32Required)\n                        {\n                            // Other module is agnostic, this is always safe\n                            ;\n                        }\n                        else if (isPlatformAgnostic)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_AgnosticToMachineModule, NoLocation.Singleton, m);\n                        }\n                        else if (assemblyMachine != moduleMachine)\n                        {\n                            // Different machine types, and neither is agnostic\n                            // So it is a conflict\n                            diagnostics.Add(ErrorCode.ERR_ConflictingMachineModule, NoLocation.Singleton, m);\n                        }\n                    } 987943"];
11238 [label="for (int i = 1; i < _modules.Length; i++)\n                {\n                    var m = (PEModuleSymbol)_modules[i];\n\n                    try\n                    {\n                        foreach (var referencedModuleName in m.Module.GetReferencedManagedModulesOrThrow())\n                        {\n                            // Do not report error for this module twice\n                            if (knownModuleNames.Add(referencedModuleName))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_MissingNetModuleReference, NoLocation.Singleton, referencedModuleName);\n                            }\n                        }\n                    }\n                    catch (BadImageFormatException)\n                    {\n                        diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    }\n                } 987944"];
11239 [label="for (int i = 1; i < _modules.Length; i++)\n                {\n                    var m = (PEModuleSymbol)_modules[i];\n\n                    try\n                    {\n                        foreach (var referencedModuleName in m.Module.GetReferencedManagedModulesOrThrow())\n                        {\n                            // Do not report error for this module twice\n                            if (knownModuleNames.Add(referencedModuleName))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_MissingNetModuleReference, NoLocation.Singleton, referencedModuleName);\n                            }\n                        }\n                    }\n                    catch (BadImageFormatException)\n                    {\n                        diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    }\n                } 987945"];
11240 [label="var m = (PEModuleSymbol)_modules[i]; 987946"];
11241 [label="m.Module 987947"];
11242 [label="get\n            {\n                return _module;\n            } 987948"];
11243 [label="foreach (var referencedModuleName in m.Module.GetReferencedManagedModulesOrThrow())\n                        {\n                            // Do not report error for this module twice\n                            if (knownModuleNames.Add(referencedModuleName))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_MissingNetModuleReference, NoLocation.Singleton, referencedModuleName);\n                            }\n                        } 987949"];
11244 [label="this.GlobalNamespace 987950"];
11245 [label="get\n            {\n                if ((object)_globalNamespace == null)\n                {\n                    // Get the root namespace from each module, and merge them all together. If there is only one, \n                    // then MergedNamespaceSymbol.Create will just return that one.\n\n                    IEnumerable<NamespaceSymbol> allGlobalNamespaces = from m in Modules select m.GlobalNamespace;\n                    var result = MergedNamespaceSymbol.Create(new NamespaceExtent(this),\n                                                        null,\n                                                        allGlobalNamespaces.AsImmutable());\n                    Interlocked.CompareExchange(ref _globalNamespace, result, null);\n                }\n\n                return _globalNamespace;\n            } 987951"];
11246 [label="if ((object)_globalNamespace == null)\n                {\n                    // Get the root namespace from each module, and merge them all together. If there is only one, \n                    // then MergedNamespaceSymbol.Create will just return that one.\n\n                    IEnumerable<NamespaceSymbol> allGlobalNamespaces = from m in Modules select m.GlobalNamespace;\n                    var result = MergedNamespaceSymbol.Create(new NamespaceExtent(this),\n                                                        null,\n                                                        allGlobalNamespaces.AsImmutable());\n                    Interlocked.CompareExchange(ref _globalNamespace, result, null);\n                } 987952"];
11247 [label="if ((object)_globalNamespace == null)\n                {\n                    // Get the root namespace from each module, and merge them all together. If there is only one, \n                    // then MergedNamespaceSymbol.Create will just return that one.\n\n                    IEnumerable<NamespaceSymbol> allGlobalNamespaces = from m in Modules select m.GlobalNamespace;\n                    var result = MergedNamespaceSymbol.Create(new NamespaceExtent(this),\n                                                        null,\n                                                        allGlobalNamespaces.AsImmutable());\n                    Interlocked.CompareExchange(ref _globalNamespace, result, null);\n                } 987953"];
11248 [label="return _globalNamespace; 987954"];
11249 [label="ReportNameCollisionDiagnosticsForAddedModules(this.GlobalNamespace, diagnostics); 987955"];
11250 [label="ReportNameCollisionDiagnosticsForAddedModules(this.GlobalNamespace, diagnostics); 987956"];
11251 [label="ReportNameCollisionDiagnosticsForAddedModules(this.GlobalNamespace, diagnostics) 987957"];
11252 [label="param ReportNameCollisionDiagnosticsForAddedModules(NamespaceSymbol ns) 987958"];
11253 [label="param ReportNameCollisionDiagnosticsForAddedModules(DiagnosticBag diagnostics) 987959"];
11254 [label="param ReportNameCollisionDiagnosticsForAddedModules(this) 987960"];
11255 [label="var mergedNs = ns as MergedNamespaceSymbol; 987961"];
11256 [label="if ((object)mergedNs == null)\n            {\n                return;\n            } 987962"];
11257 [label="if ((object)mergedNs == null)\n            {\n                return;\n            } 987963"];
11258 [label="mergedNs.ConstituentNamespaces 987964"];
11259 [label="get\n            {\n                return _namespacesToMerge;\n            } 987965"];
11260 [label="return _namespacesToMerge; 987966"];
11261 [label="ImmutableArray<NamespaceSymbol> constituent = mergedNs.ConstituentNamespaces; 987967"];
11262 [label="if (constituent.Length > 2 || (constituent.Length == 2 && constituent[0].ContainingModule.Ordinal != 0 && constituent[1].ContainingModule.Ordinal != 0))\n            {\n                var topLevelTypesFromModules = ArrayBuilder<NamedTypeSymbol>.GetInstance();\n\n                foreach (var moduleNs in constituent)\n                {\n                    Debug.Assert(moduleNs.Extent.Kind == NamespaceKind.Module);\n\n                    if (moduleNs.ContainingModule.Ordinal != 0)\n                    {\n                        topLevelTypesFromModules.AddRange(moduleNs.GetTypeMembers());\n                    }\n                }\n\n                topLevelTypesFromModules.Sort(NameCollisionForAddedModulesTypeComparer.Singleton);\n\n                bool reportedAnError = false;\n\n                for (int i = 0; i < topLevelTypesFromModules.Count - 1; i++)\n                {\n                    NamedTypeSymbol x = topLevelTypesFromModules[i];\n                    NamedTypeSymbol y = topLevelTypesFromModules[i + 1];\n\n                    if (x.Arity == y.Arity && x.Name == y.Name)\n                    {\n                        if (!reportedAnError)\n                        {\n                            // Skip synthetic <Module> type which every .NET module has.\n                            if (x.Arity != 0 || !x.ContainingNamespace.IsGlobalNamespace || x.Name != '<Module>')\n                            {\n                                diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, y.Locations.FirstOrNone(),\n                                                y.ToDisplayString(SymbolDisplayFormat.ShortFormat),\n                                                y.ContainingNamespace);\n                            }\n\n                            reportedAnError = true;\n                        }\n                    }\n                    else\n                    {\n                        reportedAnError = false;\n                    }\n                }\n\n                topLevelTypesFromModules.Free();\n\n                // Descent into child namespaces.\n                foreach (Symbol member in mergedNs.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        ReportNameCollisionDiagnosticsForAddedModules((NamespaceSymbol)member, diagnostics);\n                    }\n                }\n            } 987968"];
11263 [label="if (constituent.Length > 2 || (constituent.Length == 2 && constituent[0].ContainingModule.Ordinal != 0 && constituent[1].ContainingModule.Ordinal != 0))\n            {\n                var topLevelTypesFromModules = ArrayBuilder<NamedTypeSymbol>.GetInstance();\n\n                foreach (var moduleNs in constituent)\n                {\n                    Debug.Assert(moduleNs.Extent.Kind == NamespaceKind.Module);\n\n                    if (moduleNs.ContainingModule.Ordinal != 0)\n                    {\n                        topLevelTypesFromModules.AddRange(moduleNs.GetTypeMembers());\n                    }\n                }\n\n                topLevelTypesFromModules.Sort(NameCollisionForAddedModulesTypeComparer.Singleton);\n\n                bool reportedAnError = false;\n\n                for (int i = 0; i < topLevelTypesFromModules.Count - 1; i++)\n                {\n                    NamedTypeSymbol x = topLevelTypesFromModules[i];\n                    NamedTypeSymbol y = topLevelTypesFromModules[i + 1];\n\n                    if (x.Arity == y.Arity && x.Name == y.Name)\n                    {\n                        if (!reportedAnError)\n                        {\n                            // Skip synthetic <Module> type which every .NET module has.\n                            if (x.Arity != 0 || !x.ContainingNamespace.IsGlobalNamespace || x.Name != '<Module>')\n                            {\n                                diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, y.Locations.FirstOrNone(),\n                                                y.ToDisplayString(SymbolDisplayFormat.ShortFormat),\n                                                y.ContainingNamespace);\n                            }\n\n                            reportedAnError = true;\n                        }\n                    }\n                    else\n                    {\n                        reportedAnError = false;\n                    }\n                }\n\n                topLevelTypesFromModules.Free();\n\n                // Descent into child namespaces.\n                foreach (Symbol member in mergedNs.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        ReportNameCollisionDiagnosticsForAddedModules((NamespaceSymbol)member, diagnostics);\n                    }\n                }\n            } 987969"];
11264 [label="constituent[0].ContainingModule 987970"];
11265 [label="get\n            {\n                return _module;\n            } 987971"];
11266 [label="constituent[0].ContainingModule.Ordinal 987972"];
11267 [label="get\n            {\n                return 0;\n            } 987973"];
11268 [label="return 0; 987974"];
11269 [label="if (constituent.Length > 2 || (constituent.Length == 2 && constituent[0].ContainingModule.Ordinal != 0 && constituent[1].ContainingModule.Ordinal != 0))\n            {\n                var topLevelTypesFromModules = ArrayBuilder<NamedTypeSymbol>.GetInstance();\n\n                foreach (var moduleNs in constituent)\n                {\n                    Debug.Assert(moduleNs.Extent.Kind == NamespaceKind.Module);\n\n                    if (moduleNs.ContainingModule.Ordinal != 0)\n                    {\n                        topLevelTypesFromModules.AddRange(moduleNs.GetTypeMembers());\n                    }\n                }\n\n                topLevelTypesFromModules.Sort(NameCollisionForAddedModulesTypeComparer.Singleton);\n\n                bool reportedAnError = false;\n\n                for (int i = 0; i < topLevelTypesFromModules.Count - 1; i++)\n                {\n                    NamedTypeSymbol x = topLevelTypesFromModules[i];\n                    NamedTypeSymbol y = topLevelTypesFromModules[i + 1];\n\n                    if (x.Arity == y.Arity && x.Name == y.Name)\n                    {\n                        if (!reportedAnError)\n                        {\n                            // Skip synthetic <Module> type which every .NET module has.\n                            if (x.Arity != 0 || !x.ContainingNamespace.IsGlobalNamespace || x.Name != '<Module>')\n                            {\n                                diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, y.Locations.FirstOrNone(),\n                                                y.ToDisplayString(SymbolDisplayFormat.ShortFormat),\n                                                y.ContainingNamespace);\n                            }\n\n                            reportedAnError = true;\n                        }\n                    }\n                    else\n                    {\n                        reportedAnError = false;\n                    }\n                }\n\n                topLevelTypesFromModules.Free();\n\n                // Descent into child namespaces.\n                foreach (Symbol member in mergedNs.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        ReportNameCollisionDiagnosticsForAddedModules((NamespaceSymbol)member, diagnostics);\n                    }\n                }\n            } 987975"];
11270 [label="if (constituent.Length > 2 || (constituent.Length == 2 && constituent[0].ContainingModule.Ordinal != 0 && constituent[1].ContainingModule.Ordinal != 0))\n            {\n                var topLevelTypesFromModules = ArrayBuilder<NamedTypeSymbol>.GetInstance();\n\n                foreach (var moduleNs in constituent)\n                {\n                    Debug.Assert(moduleNs.Extent.Kind == NamespaceKind.Module);\n\n                    if (moduleNs.ContainingModule.Ordinal != 0)\n                    {\n                        topLevelTypesFromModules.AddRange(moduleNs.GetTypeMembers());\n                    }\n                }\n\n                topLevelTypesFromModules.Sort(NameCollisionForAddedModulesTypeComparer.Singleton);\n\n                bool reportedAnError = false;\n\n                for (int i = 0; i < topLevelTypesFromModules.Count - 1; i++)\n                {\n                    NamedTypeSymbol x = topLevelTypesFromModules[i];\n                    NamedTypeSymbol y = topLevelTypesFromModules[i + 1];\n\n                    if (x.Arity == y.Arity && x.Name == y.Name)\n                    {\n                        if (!reportedAnError)\n                        {\n                            // Skip synthetic <Module> type which every .NET module has.\n                            if (x.Arity != 0 || !x.ContainingNamespace.IsGlobalNamespace || x.Name != '<Module>')\n                            {\n                                diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, y.Locations.FirstOrNone(),\n                                                y.ToDisplayString(SymbolDisplayFormat.ShortFormat),\n                                                y.ContainingNamespace);\n                            }\n\n                            reportedAnError = true;\n                        }\n                    }\n                    else\n                    {\n                        reportedAnError = false;\n                    }\n                }\n\n                topLevelTypesFromModules.Free();\n\n                // Descent into child namespaces.\n                foreach (Symbol member in mergedNs.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        ReportNameCollisionDiagnosticsForAddedModules((NamespaceSymbol)member, diagnostics);\n                    }\n                }\n            } 987976"];
11271 [label="ReportNameCollisionDiagnosticsForAddedModules(this.GlobalNamespace, diagnostics); 987977"];
11272 [label="_compilation.DeclarationDiagnostics 987978"];
11273 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 987979"];
11274 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 987980"];
11275 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 987981"];
11276 [label="_compilation.DeclarationDiagnostics.AddRange(diagnostics); 987982"];
11277 [label="_compilation.DeclarationDiagnostics.AddRange(diagnostics); 987983"];
11278 [label="_compilation.DeclarationDiagnostics.AddRange(diagnostics); 987984"];
11279 [label="diagnostics.Free(); 987985"];
11280 [label="return (_completeParts & (int)part) == (int)part; 987986"];
11281 [label="return; 987987"];
11282 [label="Debug.Assert(HasAtMostOneBitSet(next), 'ForceComplete won't handle the result correctly if more than one bit is set.'); 987988"];
11283 [label="param HasAtMostOneBitSet(int bits) 987989"];
11284 [label="return (bits & (bits - 1)) == 0; 987990"];
11285 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 987991"];
11286 [label="_declarationDiagnosticsFrozen = true; 987992"];
11287 [label="_declarationDiagnosticsFrozen 987993"];
11288 [label="_needsGeneratedAttributes_IsFrozen = true; 987994"];
11289 [label="_needsGeneratedAttributes_IsFrozen 987995"];
11290 [label="var result = _lazyDeclarationDiagnostics?.AsEnumerable() ?? Enumerable.Empty<Diagnostic>(); 987996"];
11291 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 987997"];
11292 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 987998"];
11293 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 987999"];
11294 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 988000"];
11295 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 988001"];
11296 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 988002"];
11297 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 988003"];
11298 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 988004"];
11299 [label="param GetClsComplianceDiagnostics(CancellationToken cancellationToken) 988005"];
11300 [label="param GetClsComplianceDiagnostics(this) 988006"];
11301 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 988007"];
11302 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 988008"];
11303 [label="if (_lazyClsComplianceDiagnostics.IsDefault)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken);\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree());\n            } 988009"];
11304 [label="var builder = DiagnosticBag.GetInstance(); 988010"];
11305 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 988011"];
11306 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 988012"];
11307 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 988013"];
11308 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 988014"];
11309 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken) 988015"];
11310 [label="param CheckCompliance(CSharpCompilation compilation) 988016"];
11311 [label="param CheckCompliance(DiagnosticBag diagnostics) 988017"];
11312 [label="param CheckCompliance(CancellationToken cancellationToken) 988018"];
11313 [label="param CheckCompliance(SyntaxTree filterTree = null) 988019"];
11314 [label="param CheckCompliance(TextSpan? filterSpanWithinTree = null) 988020"];
11315 [label="var queue = new ConcurrentQueue<Diagnostic>(); 988021"];
11316 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 988022"];
11317 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 988023"];
11318 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 988024"];
11319 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 988025"];
11320 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 988026"];
11321 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 988027"];
11322 [label="new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken) 988028"];
11323 [label="param ClsComplianceChecker(CSharpCompilation compilation) 988029"];
11324 [label="param ClsComplianceChecker(SyntaxTree filterTree) 988030"];
11325 [label="param ClsComplianceChecker(TextSpan? filterSpanWithinTree) 988031"];
11326 [label="param ClsComplianceChecker(ConcurrentQueue<Diagnostic> diagnostics) 988032"];
11327 [label="param ClsComplianceChecker(CancellationToken cancellationToken) 988033"];
11328 [label="param ClsComplianceChecker(this) 988034"];
11329 [label="param ClsComplianceChecker(this) 988035"];
11330 [label="param CSharpSymbolVisitor(this) 988036"];
11331 [label="_compilation 988037"];
11332 [label="_filterTree 988038"];
11333 [label="_filterSpanWithinTree 988039"];
11334 [label="_diagnostics 988040"];
11335 [label="_declaredOrInheritedCompliance 988041"];
11336 [label="_compilerTasks 988042"];
11337 [label="_compilation 988043"];
11338 [label="_filterTree 988044"];
11339 [label="_filterSpanWithinTree 988045"];
11340 [label="_diagnostics 988046"];
11341 [label="_cancellationToken 988047"];
11342 [label="_declaredOrInheritedCompliance = new ConcurrentDictionary<Symbol, Compliance>(Symbols.SymbolEqualityComparer.ConsiderEverything); 988048"];
11343 [label="_declaredOrInheritedCompliance 988049"];
11344 [label="ConcurrentAnalysis 988050"];
11345 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 988051"];
11346 [label="null 988052"];
11347 [label="_filterTree == null 988053"];
11348 [label="_compilation.Options 988054"];
11349 [label="get\n            {\n                return _options;\n            } 988055"];
11350 [label="return _options; 988056"];
11351 [label="_filterTree == null && _compilation.Options.ConcurrentBuild 988057"];
11352 [label="if (ConcurrentAnalysis)\n            {\n                _compilerTasks = new ConcurrentStack<Task>();\n            } 988058"];
11353 [label="_compilerTasks = new ConcurrentStack<Task>(); 988059"];
11354 [label="_compilerTasks 988060"];
11355 [label="compilation.Assembly 988061"];
11356 [label="get\n            {\n                return SourceAssembly;\n            } 988062"];
11357 [label="GetBoundReferenceManager() 988063"];
11358 [label="param GetBoundReferenceManager(this) 988064"];
11359 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 988065"];
11360 [label="return _referenceManager; 988066"];
11361 [label="GetBoundReferenceManager(); 988067"];
11362 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 988068"];
11363 [label="checker.Visit(compilation.Assembly); 988069"];
11364 [label="checker.Visit(compilation.Assembly) 988070"];
11365 [label="param Visit(Symbol symbol) 988071"];
11366 [label="param Visit(this) 988072"];
11367 [label="if ((object)symbol != null)\n            {\n                symbol.Accept(this);\n            } 988073"];
11368 [label="if ((object)symbol != null)\n            {\n                symbol.Accept(this);\n            } 988074"];
11369 [label="symbol.Accept(this); 988075"];
11370 [label="symbol.Accept(this) 988076"];
11371 [label="param Accept(CSharpSymbolVisitor visitor) 988077"];
11372 [label="param Accept(this) 988078"];
11373 [label="visitor.VisitAssembly(this); 988079"];
11374 [label="visitor.VisitAssembly(this) 988080"];
11375 [label="param VisitAssembly(AssemblySymbol symbol) 988081"];
11376 [label="param VisitAssembly(this) 988082"];
11377 [label="_cancellationToken.ThrowIfCancellationRequested(); 988083"];
11378 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 988084"];
11379 [label="Compliance assemblyCompliance = GetDeclaredOrInheritedCompliance(symbol); 988085"];
11380 [label="GetDeclaredOrInheritedCompliance(symbol) 988086"];
11381 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 988087"];
11382 [label="param GetDeclaredOrInheritedCompliance(this) 988088"];
11383 [label="symbol.Kind 988089"];
11384 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988090"];
11385 [label="return SymbolKind.Assembly; 988091"];
11386 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 988092"];
11387 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 988093"];
11388 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 988094"];
11389 [label="symbol.Kind 988095"];
11390 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988096"];
11391 [label="return SymbolKind.Assembly; 988097"];
11392 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 988098"];
11393 [label="symbol.Kind 988099"];
11394 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988100"];
11395 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 988101"];
11396 [label="symbol.Kind 988102"];
11397 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988103"];
11398 [label="return SymbolKind.Assembly; 988104"];
11399 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 988105"];
11400 [label="symbol.Kind 988106"];
11401 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988107"];
11402 [label="return SymbolKind.Assembly; 988108"];
11403 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 988109"];
11404 [label="symbol.Kind 988110"];
11405 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988111"];
11406 [label="return SymbolKind.Assembly; 988112"];
11407 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 988113"];
11408 [label="symbol.Kind 988114"];
11409 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988115"];
11410 [label="return SymbolKind.Assembly; 988116"];
11411 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 988117"];
11412 [label="symbol.Kind 988118"];
11413 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988119"];
11414 [label="return SymbolKind.Assembly; 988120"];
11415 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 988121"];
11416 [label="Compliance compliance; 988122"];
11417 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 988123"];
11418 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 988124"];
11419 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 988125"];
11420 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 988126"];
11421 [label="param GetHashCode(Symbol obj) 988127"];
11422 [label="param GetHashCode(this) 988128"];
11423 [label="return obj is null ? 0 : obj.GetHashCode(); 988129"];
11424 [label="obj is null 988130"];
11425 [label="obj.GetHashCode() 988131"];
11426 [label="Location ignoredLocation; 988132"];
11427 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 988133"];
11428 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 988134"];
11429 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 988135"];
11430 [label="param GetDeclaredCompliance(Symbol symbol) 988136"];
11431 [label="param GetDeclaredCompliance(out Location attributeLocation) 988137"];
11432 [label="param GetDeclaredCompliance(this) 988138"];
11433 [label="attributeLocation = null; 988139"];
11434 [label="symbol.GetAttributes() 988140"];
11435 [label="param GetAttributes(this) 988141"];
11436 [label="this.GetSourceAttributesBag() 988142"];
11437 [label="param GetSourceAttributesBag(this) 988143"];
11438 [label="if ((_lazySourceAttributesBag == null || !_lazySourceAttributesBag.IsSealed) &&\n                LoadAndValidateAttributes(OneOrMany.Create(GetAttributeDeclarations()), ref _lazySourceAttributesBag))\n            {\n                _state.NotePartComplete(CompletionPart.Attributes);\n            } 988144"];
11439 [label="EnsureAttributesAreBound(); 988145"];
11440 [label="return _lazySourceAttributesBag; 988146"];
11441 [label="var attributes = this.GetSourceAttributesBag().Attributes; 988147"];
11442 [label="this.GetNetModuleAttributesBag() 988148"];
11443 [label="param GetNetModuleAttributesBag(this) 988149"];
11444 [label="if (_lazyNetModuleAttributesBag == null)\n            {\n                LoadAndValidateNetModuleAttributes(ref _lazyNetModuleAttributesBag);\n            } 988150"];
11445 [label="EnsureNetModuleAttributesAreBound(); 988151"];
11446 [label="return _lazyNetModuleAttributesBag; 988152"];
11447 [label="var netmoduleAttributes = this.GetNetModuleAttributesBag().Attributes; 988153"];
11448 [label="Debug.Assert(!attributes.IsDefault); 988154"];
11449 [label="Debug.Assert(!netmoduleAttributes.IsDefault); 988155"];
11450 [label="if (attributes.Length > 0)\n            {\n                if (netmoduleAttributes.Length > 0)\n                {\n                    attributes = attributes.Concat(netmoduleAttributes);\n                }\n            }\n            else\n            {\n                attributes = netmoduleAttributes;\n            } 988156"];
11451 [label="if (attributes.Length > 0)\n            {\n                if (netmoduleAttributes.Length > 0)\n                {\n                    attributes = attributes.Concat(netmoduleAttributes);\n                }\n            }\n            else\n            {\n                attributes = netmoduleAttributes;\n            } 988157"];
11452 [label="attributes = netmoduleAttributes; 988158"];
11453 [label="Debug.Assert(!attributes.IsDefault); 988159"];
11454 [label="return attributes; 988160"];
11455 [label="foreach (CSharpAttributeData data in symbol.GetAttributes())\n            {\n                // Check signature before HasErrors to avoid realizing symbols for other attributes.\n                if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                }\n            } 988161"];
11456 [label="return null; 988162"];
11457 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 988163"];
11458 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 988164"];
11459 [label="symbol.Kind 988165"];
11460 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988166"];
11461 [label="return SymbolKind.Assembly; 988167"];
11462 [label="if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 988168"];
11463 [label="compliance = Compliance.ImpliedFalse; 988169"];
11464 [label="symbol.Kind 988170"];
11465 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988171"];
11466 [label="return SymbolKind.Assembly; 988172"];
11467 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 988173"];
11468 [label="(symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType) 988174"];
11469 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 988175"];
11470 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 988176"];
11471 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 988177"];
11472 [label="param GetHashCode(this) 988178"];
11473 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 988179"];
11474 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 988180"];
11475 [label="IsTrue(assemblyCompliance) 988181"];
11476 [label="param IsTrue(Compliance compliance) 988182"];
11477 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 988183"];
11478 [label="return false; 988184"];
11479 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 988185"];
11480 [label="symbol.Modules 988186"];
11481 [label="get\n            {\n                return _modules;\n            } 988187"];
11482 [label="return _modules; 988188"];
11483 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 988189"];
11484 [label="symbol.Modules 988190"];
11485 [label="ModuleSymbol module = symbol.Modules[i]; 988191"];
11486 [label="Location attributeLocation; 988192"];
11487 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 988193"];
11488 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 988194"];
11489 [label="GetDeclaredCompliance(module, out attributeLocation) 988195"];
11490 [label="param GetDeclaredCompliance(Symbol symbol) 988196"];
11491 [label="param GetDeclaredCompliance(out Location attributeLocation) 988197"];
11492 [label="param GetDeclaredCompliance(this) 988198"];
11493 [label="attributeLocation = null; 988199"];
11494 [label="symbol.GetAttributes() 988200"];
11495 [label="param GetAttributes(this) 988201"];
11496 [label="foreach (CSharpAttributeData data in symbol.GetAttributes())\n            {\n                // Check signature before HasErrors to avoid realizing symbols for other attributes.\n                if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                }\n            } 988202"];
11497 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 988203"];
11498 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 988204"];
11499 [label="i == 0 988205"];
11500 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 988206"];
11501 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 988207"];
11502 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 988208"];
11503 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 988209"];
11504 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 988210"];
11505 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 988211"];
11506 [label="Location attributeLocation; 988212"];
11507 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 988213"];
11508 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 988214"];
11509 [label="GetDeclaredCompliance(module, out attributeLocation) 988215"];
11510 [label="param GetDeclaredCompliance(Symbol symbol) 988216"];
11511 [label="param GetDeclaredCompliance(out Location attributeLocation) 988217"];
11512 [label="param GetDeclaredCompliance(this) 988218"];
11513 [label="attributeLocation = null; 988219"];
11514 [label="symbol.GetAttributes() 988220"];
11515 [label="param GetAttributes(this) 988221"];
11516 [label="if (_lazyCustomAttributes.IsDefault)\n            {\n                this.LoadCustomAttributes(Token, ref _lazyCustomAttributes);\n            } 988222"];
11517 [label="Token 988223"];
11518 [label="return EntityHandle.ModuleDefinition; 988224"];
11519 [label="this.LoadCustomAttributes(Token, ref _lazyCustomAttributes); 988225"];
11520 [label="this.LoadCustomAttributes(Token, ref _lazyCustomAttributes); 988226"];
11521 [label="this.LoadCustomAttributes(Token, ref _lazyCustomAttributes) 988227"];
11522 [label="param LoadCustomAttributes(EntityHandle token) 988228"];
11523 [label="param LoadCustomAttributes(ref ImmutableArray<CSharpAttributeData> customAttributes) 988229"];
11524 [label="param LoadCustomAttributes(this) 988230"];
11525 [label="var loaded = GetCustomAttributesForToken(token); 988231"];
11526 [label="GetCustomAttributesForToken(token) 988232"];
11527 [label="param GetCustomAttributesForToken(EntityHandle token) 988233"];
11528 [label="param GetCustomAttributesForToken(this) 988234"];
11529 [label="return GetCustomAttributesForToken(token, out _, default); 988235"];
11530 [label="return GetCustomAttributesForToken(token, out _, default); 988236"];
11531 [label="GetCustomAttributesForToken(token, out _, default) 988237"];
11532 [label="param GetCustomAttributesForToken(EntityHandle token) 988238"];
11533 [label="param GetCustomAttributesForToken(out CustomAttributeHandle filteredOutAttribute1) 988239"];
11534 [label="param GetCustomAttributesForToken(AttributeDescription filterOut1) 988240"];
11535 [label="param GetCustomAttributesForToken(this) 988241"];
11536 [label="return GetCustomAttributesForToken(token, out filteredOutAttribute1, filterOut1, out _, default, out _, default, out _, default); 988242"];
11537 [label="return GetCustomAttributesForToken(token, out filteredOutAttribute1, filterOut1, out _, default, out _, default, out _, default); 988243"];
11538 [label="return GetCustomAttributesForToken(token, out filteredOutAttribute1, filterOut1, out _, default, out _, default, out _, default); 988244"];
11539 [label="return GetCustomAttributesForToken(token, out filteredOutAttribute1, filterOut1, out _, default, out _, default, out _, default); 988245"];
11540 [label="GetCustomAttributesForToken(token, out filteredOutAttribute1, filterOut1, out _, default, out _, default, out _, default) 988246"];
11541 [label="param GetCustomAttributesForToken(EntityHandle token) 988247"];
11542 [label="param GetCustomAttributesForToken(out CustomAttributeHandle filteredOutAttribute1) 988248"];
11543 [label="param GetCustomAttributesForToken(AttributeDescription filterOut1) 988249"];
11544 [label="param GetCustomAttributesForToken(out CustomAttributeHandle filteredOutAttribute2) 988250"];
11545 [label="param GetCustomAttributesForToken(AttributeDescription filterOut2) 988251"];
11546 [label="param GetCustomAttributesForToken(out CustomAttributeHandle filteredOutAttribute3) 988252"];
11547 [label="param GetCustomAttributesForToken(AttributeDescription filterOut3) 988253"];
11548 [label="param GetCustomAttributesForToken(out CustomAttributeHandle filteredOutAttribute4) 988254"];
11549 [label="param GetCustomAttributesForToken(AttributeDescription filterOut4) 988255"];
11550 [label="param GetCustomAttributesForToken(this) 988256"];
11551 [label="filteredOutAttribute1 = default; 988257"];
11552 [label="filteredOutAttribute2 = default; 988258"];
11553 [label="filteredOutAttribute3 = default; 988259"];
11554 [label="filteredOutAttribute4 = default; 988260"];
11555 [label="ArrayBuilder<CSharpAttributeData> customAttributesBuilder = null; 988261"];
11556 [label="foreach (var customAttributeHandle in _module.GetCustomAttributesOrThrow(token))\n                {\n                    // It is important to capture the last application of the attribute that we run into,\n                    // it makes a difference for default and constant values.\n\n                    if (matchesFilter(customAttributeHandle, filterOut1))\n                    {\n                        filteredOutAttribute1 = customAttributeHandle;\n                        continue;\n                    }\n\n                    if (matchesFilter(customAttributeHandle, filterOut2))\n                    {\n                        filteredOutAttribute2 = customAttributeHandle;\n                        continue;\n                    }\n\n                    if (matchesFilter(customAttributeHandle, filterOut3))\n                    {\n                        filteredOutAttribute3 = customAttributeHandle;\n                        continue;\n                    }\n\n                    if (matchesFilter(customAttributeHandle, filterOut4))\n                    {\n                        filteredOutAttribute4 = customAttributeHandle;\n                        continue;\n                    }\n\n                    if (customAttributesBuilder == null)\n                    {\n                        customAttributesBuilder = ArrayBuilder<CSharpAttributeData>.GetInstance();\n                    }\n\n                    customAttributesBuilder.Add(new PEAttributeData(this, customAttributeHandle));\n                } 988262"];
11557 [label="foreach (var customAttributeHandle in _module.GetCustomAttributesOrThrow(token))\n                {\n                    // It is important to capture the last application of the attribute that we run into,\n                    // it makes a difference for default and constant values.\n\n                    if (matchesFilter(customAttributeHandle, filterOut1))\n                    {\n                        filteredOutAttribute1 = customAttributeHandle;\n                        continue;\n                    }\n\n                    if (matchesFilter(customAttributeHandle, filterOut2))\n                    {\n                        filteredOutAttribute2 = customAttributeHandle;\n                        continue;\n                    }\n\n                    if (matchesFilter(customAttributeHandle, filterOut3))\n                    {\n                        filteredOutAttribute3 = customAttributeHandle;\n                        continue;\n                    }\n\n                    if (matchesFilter(customAttributeHandle, filterOut4))\n                    {\n                        filteredOutAttribute4 = customAttributeHandle;\n                        continue;\n                    }\n\n                    if (customAttributesBuilder == null)\n                    {\n                        customAttributesBuilder = ArrayBuilder<CSharpAttributeData>.GetInstance();\n                    }\n\n                    customAttributesBuilder.Add(new PEAttributeData(this, customAttributeHandle));\n                } 988263"];
11558 [label="if (customAttributesBuilder != null)\n            {\n                return customAttributesBuilder.ToImmutableAndFree();\n            } 988264"];
11559 [label="if (customAttributesBuilder != null)\n            {\n                return customAttributesBuilder.ToImmutableAndFree();\n            } 988265"];
11560 [label="return ImmutableArray<CSharpAttributeData>.Empty; 988266"];
11561 [label="return GetCustomAttributesForToken(token, out filteredOutAttribute1, filterOut1, out _, default, out _, default, out _, default); 988267"];
11562 [label="return GetCustomAttributesForToken(token, out _, default); 988268"];
11563 [label="var loaded = GetCustomAttributesForToken(token); 988269"];
11564 [label="ImmutableInterlocked.InterlockedInitialize(ref customAttributes, loaded); 988270"];
11565 [label="ImmutableInterlocked.InterlockedInitialize(ref customAttributes, loaded); 988271"];
11566 [label="ImmutableInterlocked.InterlockedInitialize(ref customAttributes, loaded); 988272"];
11567 [label="this.LoadCustomAttributes(Token, ref _lazyCustomAttributes); 988273"];
11568 [label="return _lazyCustomAttributes; 988274"];
11569 [label="foreach (CSharpAttributeData data in symbol.GetAttributes())\n            {\n                // Check signature before HasErrors to avoid realizing symbols for other attributes.\n                if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                }\n            } 988275"];
11570 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 988276"];
11571 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 988277"];
11572 [label="i == 0 988278"];
11573 [label="module.Locations 988279"];
11574 [label="get\n            {\n                return this.MetadataLocation.Cast<MetadataLocation, Location>();\n            } 988280"];
11575 [label="return this.MetadataLocation.Cast<MetadataLocation, Location>(); 988281"];
11576 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 988282"];
11577 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 988283"];
11578 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 988284"];
11579 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 988285"];
11580 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 988286"];
11581 [label="symbol.Modules 988287"];
11582 [label="get\n            {\n                return _modules;\n            } 988288"];
11583 [label="return _modules; 988289"];
11584 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 988290"];
11585 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 988291"];
11586 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)))\n            {\n                CheckForAttributeWithArrayArgument(sourceModule);\n            } 988292"];
11587 [label="GetDeclaredOrInheritedCompliance(sourceModule) 988293"];
11588 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 988294"];
11589 [label="param GetDeclaredOrInheritedCompliance(this) 988295"];
11590 [label="symbol.Kind 988296"];
11591 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 988297"];
11592 [label="return SymbolKind.NetModule; 988298"];
11593 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 988299"];
11594 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 988300"];
11595 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 988301"];
11596 [label="symbol.Kind 988302"];
11597 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 988303"];
11598 [label="return SymbolKind.NetModule; 988304"];
11599 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 988305"];
11600 [label="symbol.Kind 988306"];
11601 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 988307"];
11602 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 988308"];
11603 [label="symbol.Kind 988309"];
11604 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 988310"];
11605 [label="return SymbolKind.NetModule; 988311"];
11606 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 988312"];
11607 [label="symbol.Kind 988313"];
11608 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 988314"];
11609 [label="return SymbolKind.NetModule; 988315"];
11610 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 988316"];
11611 [label="symbol.Kind 988317"];
11612 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 988318"];
11613 [label="return SymbolKind.NetModule; 988319"];
11614 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 988320"];
11615 [label="symbol.Kind 988321"];
11616 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 988322"];
11617 [label="return SymbolKind.NetModule; 988323"];
11618 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 988324"];
11619 [label="symbol.Kind 988325"];
11620 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 988326"];
11621 [label="return SymbolKind.NetModule; 988327"];
11622 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 988328"];
11623 [label="Compliance compliance; 988329"];
11624 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 988330"];
11625 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 988331"];
11626 [label="param GetHashCode(this) 988332"];
11627 [label="Location ignoredLocation; 988333"];
11628 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 988334"];
11629 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 988335"];
11630 [label="param GetDeclaredCompliance(out Location attributeLocation) 988336"];
11631 [label="param GetDeclaredCompliance(this) 988337"];
11632 [label="attributeLocation = null; 988338"];
11633 [label="symbol.GetAttributes() 988339"];
11634 [label="foreach (CSharpAttributeData data in symbol.GetAttributes())\n            {\n                // Check signature before HasErrors to avoid realizing symbols for other attributes.\n                if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                }\n            } 988340"];
11635 [label="return null; 988341"];
11636 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 988342"];
11637 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 988343"];
11638 [label="symbol.Kind 988344"];
11639 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 988345"];
11640 [label="return SymbolKind.NetModule; 988346"];
11641 [label="if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 988347"];
11642 [label="compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse; 988348"];
11643 [label="GetInheritedCompliance(symbol) 988349"];
11644 [label="param GetInheritedCompliance(Symbol symbol) 988350"];
11645 [label="param GetInheritedCompliance(this) 988351"];
11646 [label="symbol.Kind 988352"];
11647 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 988353"];
11648 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 988354"];
11649 [label="symbol.ContainingType 988355"];
11650 [label="get\n            {\n                Symbol container = this.ContainingSymbol;\n\n                NamedTypeSymbol containerAsType = container as NamedTypeSymbol;\n\n                // NOTE: container could be null, so we do not check \n                //       whether containerAsType is not null, but \n                //       instead check if it did not change after \n                //       the cast.\n                if ((object)containerAsType == (object)container)\n                {\n                    // this should be relatively uncommon\n                    // most symbols that may be contained in a type\n                    // know their containing type and can override ContainingType\n                    // with a more precise implementation\n                    return containerAsType;\n                }\n\n                // this is recursive, but recursion should be very short \n                // before we reach symbol that definitely knows its containing type.\n                return container.ContainingType;\n            } 988356"];
11651 [label="this.ContainingSymbol 988357"];
11652 [label="get\n            {\n                return _assemblySymbol;\n            } 988358"];
11653 [label="return _assemblySymbol; 988359"];
11654 [label="Symbol container = this.ContainingSymbol; 988360"];
11655 [label="NamedTypeSymbol containerAsType = container as NamedTypeSymbol; 988361"];
11656 [label="if ((object)containerAsType == (object)container)\n                {\n                    // this should be relatively uncommon\n                    // most symbols that may be contained in a type\n                    // know their containing type and can override ContainingType\n                    // with a more precise implementation\n                    return containerAsType;\n                } 988362"];
11657 [label="container.ContainingType 988363"];
11658 [label="get\n            {\n                Symbol container = this.ContainingSymbol;\n\n                NamedTypeSymbol containerAsType = container as NamedTypeSymbol;\n\n                // NOTE: container could be null, so we do not check \n                //       whether containerAsType is not null, but \n                //       instead check if it did not change after \n                //       the cast.\n                if ((object)containerAsType == (object)container)\n                {\n                    // this should be relatively uncommon\n                    // most symbols that may be contained in a type\n                    // know their containing type and can override ContainingType\n                    // with a more precise implementation\n                    return containerAsType;\n                }\n\n                // this is recursive, but recursion should be very short \n                // before we reach symbol that definitely knows its containing type.\n                return container.ContainingType;\n            } 988364"];
11659 [label="this.ContainingSymbol 988365"];
11660 [label="get\n            {\n                return null;\n            } 988366"];
11661 [label="return null; 988367"];
11662 [label="Symbol container = this.ContainingSymbol; 988368"];
11663 [label="NamedTypeSymbol containerAsType = container as NamedTypeSymbol; 988369"];
11664 [label="if ((object)containerAsType == (object)container)\n                {\n                    // this should be relatively uncommon\n                    // most symbols that may be contained in a type\n                    // know their containing type and can override ContainingType\n                    // with a more precise implementation\n                    return containerAsType;\n                } 988370"];
11665 [label="return containerAsType; 988371"];
11666 [label="return container.ContainingType; 988372"];
11667 [label="Symbol containing = (Symbol)symbol.ContainingType ?? symbol.ContainingAssembly; 988373"];
11668 [label="symbol.ContainingAssembly 988374"];
11669 [label="get\n            {\n                return _assemblySymbol;\n            } 988375"];
11670 [label="Symbol containing = (Symbol)symbol.ContainingType ?? symbol.ContainingAssembly; 988376"];
11671 [label="Symbol containing = (Symbol)symbol.ContainingType ?? symbol.ContainingAssembly; 988377"];
11672 [label="System.Diagnostics.Debug.Assert((object)containing != null); 988378"];
11673 [label="System.Diagnostics.Debug.Assert((object)containing != null); 988379"];
11674 [label="return GetDeclaredOrInheritedCompliance(containing); 988380"];
11675 [label="GetDeclaredOrInheritedCompliance(containing) 988381"];
11676 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 988382"];
11677 [label="param GetDeclaredOrInheritedCompliance(this) 988383"];
11678 [label="symbol.Kind 988384"];
11679 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988385"];
11680 [label="return SymbolKind.Assembly; 988386"];
11681 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 988387"];
11682 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 988388"];
11683 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 988389"];
11684 [label="symbol.Kind 988390"];
11685 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988391"];
11686 [label="return SymbolKind.Assembly; 988392"];
11687 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 988393"];
11688 [label="symbol.Kind 988394"];
11689 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988395"];
11690 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 988396"];
11691 [label="symbol.Kind 988397"];
11692 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988398"];
11693 [label="return SymbolKind.Assembly; 988399"];
11694 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 988400"];
11695 [label="symbol.Kind 988401"];
11696 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988402"];
11697 [label="return SymbolKind.Assembly; 988403"];
11698 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 988404"];
11699 [label="symbol.Kind 988405"];
11700 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988406"];
11701 [label="return SymbolKind.Assembly; 988407"];
11702 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 988408"];
11703 [label="symbol.Kind 988409"];
11704 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988410"];
11705 [label="return SymbolKind.Assembly; 988411"];
11706 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 988412"];
11707 [label="symbol.Kind 988413"];
11708 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988414"];
11709 [label="return SymbolKind.Assembly; 988415"];
11710 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 988416"];
11711 [label="Compliance compliance; 988417"];
11712 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 988418"];
11713 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 988419"];
11714 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 988420"];
11715 [label="param GetHashCode(this) 988421"];
11716 [label="param Equals(Symbol x) 988422"];
11717 [label="param Equals(Symbol y) 988423"];
11718 [label="param Equals(this) 988424"];
11719 [label="return x is null ? y is null : x.Equals(y, _comparison); 988425"];
11720 [label="x is null 988426"];
11721 [label="return x is null ? y is null : x.Equals(y, _comparison); 988427"];
11722 [label="return x is null ? y is null : x.Equals(y, _comparison); 988428"];
11723 [label="x.Equals(y, _comparison) 988429"];
11724 [label="param Equals(Symbol other) 988430"];
11725 [label="param Equals(TypeCompareKind compareKind) 988431"];
11726 [label="param Equals(this) 988432"];
11727 [label="return (object)this == other; 988433"];
11728 [label="return compliance; 988434"];
11729 [label="IsTrue(GetInheritedCompliance(symbol)) 988435"];
11730 [label="param IsTrue(Compliance compliance) 988436"];
11731 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 988437"];
11732 [label="return false; 988438"];
11733 [label="symbol.Kind 988439"];
11734 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 988440"];
11735 [label="return SymbolKind.NetModule; 988441"];
11736 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 988442"];
11737 [label="symbol.Kind 988443"];
11738 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 988444"];
11739 [label="return SymbolKind.NetModule; 988445"];
11740 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 988446"];
11741 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 988447"];
11742 [label="(symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType) 988448"];
11743 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 988449"];
11744 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 988450"];
11745 [label="param IsTrue(Compliance compliance) 988451"];
11746 [label="symbol.GlobalNamespace 988452"];
11747 [label="get\n            {\n                if ((object)_globalNamespace == null)\n                {\n                    // Get the root namespace from each module, and merge them all together. If there is only one, \n                    // then MergedNamespaceSymbol.Create will just return that one.\n\n                    IEnumerable<NamespaceSymbol> allGlobalNamespaces = from m in Modules select m.GlobalNamespace;\n                    var result = MergedNamespaceSymbol.Create(new NamespaceExtent(this),\n                                                        null,\n                                                        allGlobalNamespaces.AsImmutable());\n                    Interlocked.CompareExchange(ref _globalNamespace, result, null);\n                }\n\n                return _globalNamespace;\n            } 988453"];
11748 [label="if ((object)_globalNamespace == null)\n                {\n                    // Get the root namespace from each module, and merge them all together. If there is only one, \n                    // then MergedNamespaceSymbol.Create will just return that one.\n\n                    IEnumerable<NamespaceSymbol> allGlobalNamespaces = from m in Modules select m.GlobalNamespace;\n                    var result = MergedNamespaceSymbol.Create(new NamespaceExtent(this),\n                                                        null,\n                                                        allGlobalNamespaces.AsImmutable());\n                    Interlocked.CompareExchange(ref _globalNamespace, result, null);\n                } 988454"];
11749 [label="return _globalNamespace; 988455"];
11750 [label="Visit(symbol.GlobalNamespace); 988456"];
11751 [label="Visit(symbol.GlobalNamespace) 988457"];
11752 [label="param Visit(Symbol symbol) 988458"];
11753 [label="param Visit(this) 988459"];
11754 [label="param Accept(CSharpSymbolVisitor visitor) 988460"];
11755 [label="param Accept(this) 988461"];
11756 [label="visitor.VisitNamespace(this); 988462"];
11757 [label="visitor.VisitNamespace(this) 988463"];
11758 [label="param VisitNamespace(NamespaceSymbol symbol) 988464"];
11759 [label="param VisitNamespace(this) 988465"];
11760 [label="_cancellationToken.ThrowIfCancellationRequested(); 988466"];
11761 [label="if (DoNotVisit(symbol)) return; 988467"];
11762 [label="DoNotVisit(symbol) 988468"];
11763 [label="param DoNotVisit(Symbol symbol) 988469"];
11764 [label="param DoNotVisit(this) 988470"];
11765 [label="symbol.Kind 988471"];
11766 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 988472"];
11767 [label="return SymbolKind.Namespace; 988473"];
11768 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 988474"];
11769 [label="return false; 988475"];
11770 [label="if (DoNotVisit(symbol)) return; 988476"];
11771 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(symbol)))\n            {\n                CheckName(symbol);\n                CheckMemberDistinctness(symbol);\n            } 988477"];
11772 [label="GetDeclaredOrInheritedCompliance(symbol) 988478"];
11773 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 988479"];
11774 [label="param GetDeclaredOrInheritedCompliance(this) 988480"];
11775 [label="symbol.Kind 988481"];
11776 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 988482"];
11777 [label="return SymbolKind.Namespace; 988483"];
11778 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 988484"];
11779 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 988485"];
11780 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 988486"];
11781 [label="symbol.Kind 988487"];
11782 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 988488"];
11783 [label="return SymbolKind.Namespace; 988489"];
11784 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 988490"];
11785 [label="symbol.ContainingAssembly 988491"];
11786 [label="get\n            {\n                if (_extent.Kind == NamespaceKind.Module)\n                {\n                    return _extent.Module.ContainingAssembly;\n                }\n                else if (_extent.Kind == NamespaceKind.Assembly)\n                {\n                    return _extent.Assembly;\n                }\n                else\n                {\n                    return null;\n                }\n            } 988492"];
11787 [label="_extent.Kind 988493"];
11788 [label="get\n            {\n                return _kind;\n            } 988494"];
11789 [label="return _kind; 988495"];
11790 [label="if (_extent.Kind == NamespaceKind.Module)\n                {\n                    return _extent.Module.ContainingAssembly;\n                }\n                else if (_extent.Kind == NamespaceKind.Assembly)\n                {\n                    return _extent.Assembly;\n                }\n                else\n                {\n                    return null;\n                } 988496"];
11791 [label="_extent.Kind 988497"];
11792 [label="if (_extent.Kind == NamespaceKind.Assembly)\n                {\n                    return _extent.Assembly;\n                }\n                else\n                {\n                    return null;\n                } 988498"];
11793 [label="_extent.Assembly 988499"];
11794 [label="get\n            {\n                if (_kind == NamespaceKind.Assembly)\n                {\n                    return (AssemblySymbol)_symbolOrCompilation;\n                }\n\n                throw new InvalidOperationException();\n            } 988500"];
11795 [label="if (_kind == NamespaceKind.Assembly)\n                {\n                    return (AssemblySymbol)_symbolOrCompilation;\n                } 988501"];
11796 [label="return (AssemblySymbol)_symbolOrCompilation; 988502"];
11797 [label="return _extent.Assembly; 988503"];
11798 [label="return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly); 988504"];
11799 [label="GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly) 988505"];
11800 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 988506"];
11801 [label="param GetDeclaredOrInheritedCompliance(this) 988507"];
11802 [label="symbol.Kind 988508"];
11803 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988509"];
11804 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 988510"];
11805 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 988511"];
11806 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 988512"];
11807 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988513"];
11808 [label="symbol.Kind 988514"];
11809 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988515"];
11810 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 988516"];
11811 [label="symbol.Kind 988517"];
11812 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988518"];
11813 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 988519"];
11814 [label="symbol.Kind 988520"];
11815 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988521"];
11816 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 988522"];
11817 [label="symbol.Kind 988523"];
11818 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988524"];
11819 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 988525"];
11820 [label="symbol.Kind 988526"];
11821 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988527"];
11822 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 988528"];
11823 [label="symbol.Kind 988529"];
11824 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 988530"];
11825 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 988531"];
11826 [label="param GetHashCode(this) 988532"];
11827 [label="param Equals(this) 988533"];
11828 [label="param Equals(TypeCompareKind compareKind) 988534"];
11829 [label="return compliance; 988535"];
11830 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 988536"];
11831 [label="param IsTrue(Compliance compliance) 988537"];
11832 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 988538"];
11833 [label="return false; 988539"];
11834 [label="ConcurrentAnalysis 988540"];
11835 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 988541"];
11836 [label="null 988542"];
11837 [label="_filterTree == null 988543"];
11838 [label="_compilation.Options 988544"];
11839 [label="get\n            {\n                return _options;\n            } 988545"];
11840 [label="return _options; 988546"];
11841 [label="_filterTree == null && _compilation.Options.ConcurrentBuild 988547"];
11842 [label="if (ConcurrentAnalysis)\n            {\n                VisitNamespaceMembersAsTasks(symbol);\n            }\n            else\n            {\n                VisitNamespaceMembers(symbol);\n            } 988548"];
11843 [label="VisitNamespaceMembersAsTasks(symbol); 988549"];
11844 [label="VisitNamespaceMembersAsTasks(symbol) 988550"];
11845 [label="param VisitNamespaceMembersAsTasks(NamespaceSymbol symbol) 988551"];
11846 [label="param VisitNamespaceMembersAsTasks(this) 988552"];
11847 [label="symbol.GetMembersUnordered() 988553"];
11848 [label="param GetMembersUnordered(this) 988554"];
11849 [label="GetMembers() 988555"];
11850 [label="param GetMembers(this) 988556"];
11851 [label="if (_allMembers.IsDefault)\n            {\n                var builder = ArrayBuilder<Symbol>.GetInstance();\n                _cachedLookup.AddValues(builder);\n                _allMembers = builder.ToImmutableAndFree();\n            } 988557"];
11852 [label="var builder = ArrayBuilder<Symbol>.GetInstance(); 988558"];
11853 [label="_cachedLookup.AddValues(builder); 988559"];
11854 [label="_cachedLookup.AddValues(builder); 988560"];
11855 [label="param SlowGetChildNames(IEqualityComparer<string> comparer) 988561"];
11856 [label="param SlowGetChildNames(this) 988562"];
11857 [label="var childNames = new HashSet<string>(comparer); 988563"];
11858 [label="foreach (var ns in _namespacesToMerge)\n            {\n                foreach (var child in ns.GetMembersUnordered())\n                {\n                    childNames.Add(child.Name);\n                }\n            } 988564"];
11859 [label="ns.GetMembersUnordered() 988565"];
11860 [label="foreach (var child in ns.GetMembersUnordered())\n                {\n                    childNames.Add(child.Name);\n                } 988566"];
11861 [label="param GetMembers(this) 988567"];
11862 [label="EnsureAllMembersLoaded() 988568"];
11863 [label="param EnsureAllMembersLoaded(this) 988569"];
11864 [label="EnsureAllMembersLoaded(); 988570"];
11865 [label="GetMemberTypesPrivate() 988571"];
11866 [label="param GetMemberTypesPrivate(this) 988572"];
11867 [label="if (_lazyFlattenedTypes.IsDefault)\n            {\n                var flattened = lazyTypes.Flatten();\n                ImmutableInterlocked.InterlockedExchange(ref _lazyFlattenedTypes, flattened);\n            } 988573"];
11868 [label="var flattened = lazyTypes.Flatten(); 988574"];
11869 [label="var flattened = lazyTypes.Flatten(); 988575"];
11870 [label="ImmutableInterlocked.InterlockedExchange(ref _lazyFlattenedTypes, flattened); 988576"];
11871 [label="ImmutableInterlocked.InterlockedExchange(ref _lazyFlattenedTypes, flattened); 988577"];
11872 [label="return StaticCast<NamedTypeSymbol>.From(_lazyFlattenedTypes); 988578"];
11873 [label="var memberTypes = GetMemberTypesPrivate(); 988579"];
11874 [label="var builder = ArrayBuilder<Symbol>.GetInstance(memberTypes.Length + lazyNamespaces.Count); 988580"];
11875 [label="builder.AddRange(memberTypes); 988581"];
11876 [label="builder.AddRange(memberTypes); 988582"];
11877 [label="foreach (var pair in lazyNamespaces)\n            {\n                builder.Add(pair.Value);\n            } 988583"];
11878 [label="builder.Add(pair.Value); 988584"];
11879 [label="return builder.ToImmutableAndFree(); 988585"];
11880 [label="return GetMembers().ConditionallyDeOrder(); 988586"];
11881 [label="foreach (var child in ns.GetMembersUnordered())\n                {\n                    childNames.Add(child.Name);\n                } 988587"];
11882 [label="child.Name 988588"];
11883 [label="childNames.Add(child.Name); 988589"];
11884 [label="childNames.Add(child.Name); 988590"];
11885 [label="return childNames; 988591"];
11886 [label="_cachedLookup.AddValues(builder); 988592"];
11887 [label="param SlowGetChildrenOfName(string name) 988593"];
11888 [label="param SlowGetChildrenOfName(this) 988594"];
11889 [label="ArrayBuilder<NamespaceSymbol> namespaceSymbols = null; 988595"];
11890 [label="var otherSymbols = ArrayBuilder<Symbol>.GetInstance(); 988596"];
11891 [label="foreach (NamespaceSymbol namespaceSymbol in _namespacesToMerge)\n            {\n                foreach (Symbol childSymbol in namespaceSymbol.GetMembers(name))\n                {\n                    if (childSymbol.Kind == SymbolKind.Namespace)\n                    {\n                        namespaceSymbols = namespaceSymbols ?? ArrayBuilder<NamespaceSymbol>.GetInstance();\n                        namespaceSymbols.Add((NamespaceSymbol)childSymbol);\n                    }\n                    else\n                    {\n                        otherSymbols.Add(childSymbol);\n                    }\n                }\n            } 988597"];
11892 [label="foreach (Symbol childSymbol in namespaceSymbol.GetMembers(name))\n                {\n                    if (childSymbol.Kind == SymbolKind.Namespace)\n                    {\n                        namespaceSymbols = namespaceSymbols ?? ArrayBuilder<NamespaceSymbol>.GetInstance();\n                        namespaceSymbols.Add((NamespaceSymbol)childSymbol);\n                    }\n                    else\n                    {\n                        otherSymbols.Add(childSymbol);\n                    }\n                } 988598"];
11893 [label="namespaceSymbol.GetMembers(name) 988599"];
11894 [label="param GetMembers(string name) 988600"];
11895 [label="EnsureAllMembersLoaded(); 988601"];
11896 [label="if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                } 988602"];
11897 [label="return ImmutableArray.Create<Symbol>(ns); 988603"];
11898 [label="childSymbol.Kind 988604"];
11899 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 988605"];
11900 [label="if (childSymbol.Kind == SymbolKind.Namespace)\n                    {\n                        namespaceSymbols = namespaceSymbols ?? ArrayBuilder<NamespaceSymbol>.GetInstance();\n                        namespaceSymbols.Add((NamespaceSymbol)childSymbol);\n                    }\n                    else\n                    {\n                        otherSymbols.Add(childSymbol);\n                    } 988606"];
11901 [label="namespaceSymbols = namespaceSymbols ?? ArrayBuilder<NamespaceSymbol>.GetInstance(); 988607"];
11902 [label="namespaceSymbols = namespaceSymbols ?? ArrayBuilder<NamespaceSymbol>.GetInstance(); 988608"];
11903 [label="namespaceSymbols.Add((NamespaceSymbol)childSymbol); 988609"];
11904 [label="namespaceSymbols.Add((NamespaceSymbol)childSymbol); 988610"];
11905 [label="if (namespaceSymbols != null)\n            {\n                otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree()));\n            } 988611"];
11906 [label="if (namespaceSymbols != null)\n            {\n                otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree()));\n            } 988612"];
11907 [label="otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree())); 988613"];
11908 [label="otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree())); 988614"];
11909 [label="otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree())); 988615"];
11910 [label="otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree())); 988616"];
11911 [label="MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree()) 988617"];
11912 [label="param Create(NamespaceExtent extent) 988618"];
11913 [label="param Create(NamespaceSymbol containingNamespace) 988619"];
11914 [label="param Create(ImmutableArray<NamespaceSymbol> namespacesToMerge) 988620"];
11915 [label="param Create(string nameOpt = null) 988621"];
11916 [label="Debug.Assert(namespacesToMerge.Length != 0); 988622"];
11917 [label="Debug.Assert(namespacesToMerge.Length != 0); 988623"];
11918 [label="otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree())); 988624"];
11919 [label="return otherSymbols.ToImmutableAndFree(); 988625"];
11920 [label="EnsureAllMembersLoaded(); 988626"];
11921 [label="return StaticCast<Symbol>.From(t); 988627"];
11922 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 988628"];
11923 [label="return SymbolKind.NamedType; 988629"];
11924 [label="otherSymbols.Add(childSymbol); 988630"];
11925 [label="if (namespaceSymbols != null)\n            {\n                otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree()));\n            } 988631"];
11926 [label="_allMembers = builder.ToImmutableAndFree(); 988632"];
11927 [label="_allMembers 988633"];
11928 [label="return _allMembers; 988634"];
11929 [label="foreach (var m in symbol.GetMembersUnordered())\n            {\n                _compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken));\n            } 988635"];
11930 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 988636"];
11931 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 988637"];
11932 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 988638"];
11933 [label="VisitNamespaceMembersAsTasks(symbol); 988639"];
11934 [label="visitor.VisitNamespace(this); 988640"];
11935 [label="Visit(symbol.GlobalNamespace); 988641"];
11936 [label="visitor.VisitAssembly(this); 988642"];
11937 [label="symbol.Accept(this); 988643"];
11938 [label="checker.Visit(compilation.Assembly); 988644"];
11939 [label="checker.WaitForWorkers() 988645"];
11940 [label="param WaitForWorkers(this) 988646"];
11941 [label="var tasks = _compilerTasks; 988647"];
11942 [label="if (tasks == null)\n            {\n                return;\n            } 988648"];
11943 [label="if (tasks == null)\n            {\n                return;\n            } 988649"];
11944 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 988650"];
11945 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 988651"];
11946 [label="curTask.GetAwaiter().GetResult(); 988652"];
11947 [label="checker.WaitForWorkers(); 988653"];
11948 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 988654"];
11949 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 988655"];
11950 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 988656"];
11951 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 988657"];
11952 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 988658"];
11953 [label="return _lazyClsComplianceDiagnostics; 988659"];
11954 [label="return result.AsImmutable().Concat(clsDiagnostics); 988660"];
11955 [label="return result.AsImmutable().Concat(clsDiagnostics); 988661"];
11956 [label="return result.AsImmutable().Concat(clsDiagnostics); 988662"];
11957 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 988663"];
11958 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 988664"];
11959 [label="cancellationToken.ThrowIfCancellationRequested(); 988665"];
11960 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 988666"];
11961 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 988667"];
11962 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 988668"];
11963 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 988669"];
11964 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 988670"];
11965 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 988671"];
11966 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 988672"];
11967 [label="return diagnostics.ToReadOnlyAndFree(); 988673"];
11968 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 988674"];
11969 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 988675"];
11970 [label="excludeDiagnostics?.Free(); 988676"];
11971 [label="var moduleBeingBuilt = (PEModuleBuilder)moduleBuilder; 988677"];
11972 [label="if (emitMetadataOnly)\n            {\n                if (hasDeclarationErrors)\n                {\n                    return false;\n                }\n\n                if (moduleBeingBuilt.SourceModule.HasBadAttributes)\n                {\n                    // If there were errors but no declaration diagnostics, explicitly add a 'Failed to emit module' error.\n                    diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuilt).Name,\n                        new LocalizableResourceString(nameof(CodeAnalysisResources.ModuleHasInvalidAttributes), CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n\n                    return false;\n                }\n\n                SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken);\n            }\n            else\n            {\n                if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                }\n\n                // Perform initial bind of method bodies in spite of earlier errors. This is the same\n                // behavior as when calling GetDiagnostics()\n\n                // Use a temporary bag so we don't have to refilter pre-existing diagnostics.\n                DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance();\n\n                MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken);\n\n                if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                }\n\n                bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken);\n\n                if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                }\n            } 988678"];
11973 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 988679"];
11974 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 988680"];
11975 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 988681"];
11976 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 988682"];
11977 [label="param AddDebugSourceDocumentsForChecksumDirectives(DebugDocumentsBuilder documentsBuilder) 988683"];
11978 [label="param AddDebugSourceDocumentsForChecksumDirectives(SyntaxTree tree) 988684"];
11979 [label="param AddDebugSourceDocumentsForChecksumDirectives(DiagnosticBag diagnostics) 988685"];
11980 [label="param AddDebugSourceDocumentsForChecksumDirectives(this) 988686"];
11981 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 988687"];
11982 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 988688"];
11983 [label="param GetRoot(CancellationToken cancellationToken) 988689"];
11984 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 988690"];
11985 [label="tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics) 988691"];
11986 [label="param GetDirectives(this SyntaxNode node) 988692"];
11987 [label="param GetDirectives(Func<DirectiveTriviaSyntax, bool>? filter = null) 988693"];
11988 [label="return ((CSharpSyntaxNode)node).GetDirectives(filter); 988694"];
11989 [label="((CSharpSyntaxNode)node).GetDirectives(filter) 988695"];
11990 [label="param GetDirectives(Func<DirectiveTriviaSyntax, bool>? filter = null) 988696"];
11991 [label="param GetDirectives(this) 988697"];
11992 [label="return ((SyntaxNodeOrToken)this).GetDirectives<DirectiveTriviaSyntax>(filter); 988698"];
11993 [label="return ((SyntaxNodeOrToken)this).GetDirectives<DirectiveTriviaSyntax>(filter); 988699"];
11994 [label="foreach (var directive in checksumDirectives)\n            {\n                var checksumDirective = (PragmaChecksumDirectiveTriviaSyntax)directive;\n                var path = checksumDirective.File.ValueText;\n\n                var checksumText = checksumDirective.Bytes.ValueText;\n                var normalizedPath = documentsBuilder.NormalizeDebugDocumentPath(path, basePath: tree.FilePath);\n                var existingDoc = documentsBuilder.TryGetDebugDocumentForNormalizedPath(normalizedPath);\n\n                // duplicate checksum pragmas are valid as long as values match\n                // if we have seen this document already, check for matching values.\n                if (existingDoc != null)\n                {\n                    // pragma matches a file path on an actual tree.\n                    // Dev12 compiler just ignores the pragma in this case which means that\n                    // checksum of the actual tree always wins and no warning is given.\n                    // We will continue doing the same.\n                    if (existingDoc.IsComputedChecksum)\n                    {\n                        continue;\n                    }\n\n                    var sourceInfo = existingDoc.GetSourceInfo();\n                    if (ChecksumMatches(checksumText, sourceInfo.Checksum))\n                    {\n                        var guid = Guid.Parse(checksumDirective.Guid.ValueText);\n                        if (guid == sourceInfo.ChecksumAlgorithmId)\n                        {\n                            // all parts match, nothing to do\n                            continue;\n                        }\n                    }\n\n                    // did not match to an existing document\n                    // produce a warning and ignore the pragma\n                    diagnostics.Add(ErrorCode.WRN_ConflictingChecksum, new SourceLocation(checksumDirective), path);\n                }\n                else\n                {\n                    var newDocument = new Cci.DebugSourceDocument(\n                        normalizedPath,\n                        Cci.DebugSourceDocument.CorSymLanguageTypeCSharp,\n                        MakeChecksumBytes(checksumText),\n                        Guid.Parse(checksumDirective.Guid.ValueText));\n\n                    documentsBuilder.AddDebugDocument(newDocument);\n                }\n            } 988700"];
11995 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 988701"];
11996 [label="DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance(); 988702"];
11997 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 988703"];
11998 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 988704"];
11999 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 988705"];
12000 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 988706"];
12001 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 988707"];
12002 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 988708"];
12003 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 988709"];
12004 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 988710"];
12005 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken) 988711"];
12006 [label="param CompileMethodBodies(CSharpCompilation compilation) 988712"];
12007 [label="param CompileMethodBodies(PEModuleBuilder moduleBeingBuiltOpt) 988713"];
12008 [label="param CompileMethodBodies(bool emittingPdb) 988714"];
12009 [label="param CompileMethodBodies(bool emitTestCoverageData) 988715"];
12010 [label="param CompileMethodBodies(bool hasDeclarationErrors) 988716"];
12011 [label="param CompileMethodBodies(DiagnosticBag diagnostics) 988717"];
12012 [label="param CompileMethodBodies(Predicate<Symbol> filterOpt) 988718"];
12013 [label="param CompileMethodBodies(CancellationToken cancellationToken) 988719"];
12014 [label="Debug.Assert(compilation != null); 988720"];
12015 [label="Debug.Assert(compilation != null); 988721"];
12016 [label="Debug.Assert(diagnostics != null); 988722"];
12017 [label="Debug.Assert(diagnostics != null); 988723"];
12018 [label="compilation.PreviousSubmission 988724"];
12019 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 988725"];
12020 [label="ScriptCompilationInfo 988726"];
12021 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 988727"];
12022 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 988728"];
12023 [label="MethodSymbol entryPoint = null; 988729"];
12024 [label="if (filterOpt is null)\n            {\n                entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken);\n            } 988730"];
12025 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 988731"];
12026 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 988732"];
12027 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 988733"];
12028 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 988734"];
12029 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 988735"];
12030 [label="GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken) 988736"];
12031 [label="param GetEntryPoint(CSharpCompilation compilation) 988737"];
12032 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 988738"];
12033 [label="param GetEntryPoint(bool hasDeclarationErrors) 988739"];
12034 [label="param GetEntryPoint(DiagnosticBag diagnostics) 988740"];
12035 [label="param GetEntryPoint(CancellationToken cancellationToken) 988741"];
12036 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 988742"];
12037 [label="compilation.GetEntryPointAndDiagnostics(cancellationToken) 988743"];
12038 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 988744"];
12039 [label="param GetEntryPointAndDiagnostics(this) 988745"];
12040 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 988746"];
12041 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 988747"];
12042 [label="EntryPoint? entryPoint; 988748"];
12043 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 988749"];
12044 [label="SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) 988750"];
12045 [label="param GetSimpleProgramEntryPoint(CSharpCompilation compilation) 988751"];
12046 [label="var temp2 = GetSimpleProgramNamedTypeSymbol(compilation); 988752"];
12047 [label="GetSimpleProgramNamedTypeSymbol(compilation) 988753"];
12048 [label="param GetSimpleProgramNamedTypeSymbol(CSharpCompilation compilation) 988754"];
12049 [label="compilation.SourceModule 988755"];
12050 [label="get\n            {\n                return Assembly.Modules[0];\n            } 988756"];
12051 [label="Assembly 988757"];
12052 [label="get\n            {\n                return SourceAssembly;\n            } 988758"];
12053 [label="GetBoundReferenceManager() 988759"];
12054 [label="param GetBoundReferenceManager(this) 988760"];
12055 [label="GetBoundReferenceManager(); 988761"];
12056 [label="return Assembly.Modules[0]; 988762"];
12057 [label="Assembly.Modules 988763"];
12058 [label="get\n            {\n                return _modules;\n            } 988764"];
12059 [label="return Assembly.Modules[0]; 988765"];
12060 [label="return compilation.SourceModule.GlobalNamespace.GetTypeMembers(WellKnownMemberNames.TopLevelStatementsEntryPointTypeName).OfType<SimpleProgramNamedTypeSymbol>().SingleOrDefault(); 988766"];
12061 [label="compilation.SourceModule.GlobalNamespace 988767"];
12062 [label="get\n            {\n                if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                }\n\n                return _globalNamespace;\n            } 988768"];
12063 [label="return compilation.SourceModule.GlobalNamespace.GetTypeMembers(WellKnownMemberNames.TopLevelStatementsEntryPointTypeName).OfType<SimpleProgramNamedTypeSymbol>().SingleOrDefault(); 988769"];
12064 [label="compilation.SourceModule.GlobalNamespace.GetTypeMembers(WellKnownMemberNames.TopLevelStatementsEntryPointTypeName) 988770"];
12065 [label="param GetTypeMembers(string name) 988771"];
12066 [label="param GetTypeMembers(this) 988772"];
12067 [label="ImmutableArray<NamedTypeSymbol> members; 988773"];
12068 [label="members 988774"];
12069 [label="this.GetNameToTypeMembersMap() 988775"];
12070 [label="param GetNameToTypeMembersMap(this) 988776"];
12071 [label="if (_nameToTypeMembersMap == null)\n            {\n                // NOTE: This method depends on MakeNameToMembersMap() on creating a proper \n                // NOTE: type of the array, see comments in MakeNameToMembersMap() for details\n                Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null);\n            } 988777"];
12072 [label="if (_nameToTypeMembersMap == null)\n            {\n                // NOTE: This method depends on MakeNameToMembersMap() on creating a proper \n                // NOTE: type of the array, see comments in MakeNameToMembersMap() for details\n                Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null);\n            } 988778"];
12073 [label="Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null); 988779"];
12074 [label="GetNameToMembersMap() 988780"];
12075 [label="Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null); 988781"];
12076 [label="GetTypesFromMemberMap(GetNameToMembersMap()) 988782"];
12077 [label="param GetTypesFromMemberMap(Dictionary<string, ImmutableArray<NamespaceOrTypeSymbol>> map) 988783"];
12078 [label="var dictionary = new Dictionary<string, ImmutableArray<NamedTypeSymbol>>(StringOrdinalComparer.Instance); 988784"];
12079 [label="foreach (var kvp in map)\n            {\n                ImmutableArray<NamespaceOrTypeSymbol> members = kvp.Value;\n\n                bool hasType = false;\n                bool hasNamespace = false;\n\n                foreach (var symbol in members)\n                {\n                    if (symbol.Kind == SymbolKind.NamedType)\n                    {\n                        hasType = true;\n                        if (hasNamespace)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(symbol.Kind == SymbolKind.Namespace);\n                        hasNamespace = true;\n                        if (hasType)\n                        {\n                            break;\n                        }\n                    }\n                }\n\n                if (hasType)\n                {\n                    if (hasNamespace)\n                    {\n                        dictionary.Add(kvp.Key, members.OfType<NamedTypeSymbol>().AsImmutable());\n                    }\n                    else\n                    {\n                        dictionary.Add(kvp.Key, members.As<NamedTypeSymbol>());\n                    }\n                }\n            } 988785"];
12080 [label="return dictionary; 988786"];
12081 [label="Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null); 988787"];
12082 [label="Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null); 988788"];
12083 [label="return _nameToTypeMembersMap; 988789"];
12084 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 988790"];
12085 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 988791"];
12086 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 988792"];
12087 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 988793"];
12088 [label="this.GetNameToTypeMembersMap().TryGetValue(name, out members) 988794"];
12089 [label="var temp3 = temp2?.GetMembersAndInitializers(); 988795"];
12090 [label="var temp = temp3 != null ? temp3.NonTypeMembers[0] : null; 988796"];
12091 [label="var temp = temp3 != null ? temp3.NonTypeMembers[0] : null; 988797"];
12092 [label="temp3 != null 988798"];
12093 [label="return (SynthesizedSimpleProgramEntryPointSymbol?)temp; 988799"];
12094 [label="this.Options 988800"];
12095 [label="return _options; 988801"];
12096 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 988802"];
12097 [label="this.ScriptClass 988803"];
12098 [label="get { return _scriptClass.Value; } 988804"];
12099 [label="return _scriptClass.Value; 988805"];
12100 [label="_scriptClass.Value 988806"];
12101 [label="param BindScriptClass(this) 988807"];
12102 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 988808"];
12103 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 988809"];
12104 [label="get { return this.SourceModule.GetPublicSymbol(); } 988810"];
12105 [label="this.SourceModule 988811"];
12106 [label="get\n            {\n                return Assembly.Modules[0];\n            } 988812"];
12107 [label="Assembly 988813"];
12108 [label="GetBoundReferenceManager() 988814"];
12109 [label="param GetBoundReferenceManager(this) 988815"];
12110 [label="GetBoundReferenceManager(); 988816"];
12111 [label="Assembly.Modules 988817"];
12112 [label="return Assembly.Modules[0]; 988818"];
12113 [label="return this.SourceModule.GetPublicSymbol(); 988819"];
12114 [label="(type, containingSymbol, unused) => HasInvalidTypeParameter(type, containingSymbol) 988820"];
12115 [label="s_hasInvalidTypeParameterFunc =\n            (type, containingSymbol, unused) => HasInvalidTypeParameter(type, containingSymbol) 988821"];
12116 [label="this.SourceModule.GetPublicSymbol() 988822"];
12117 [label="param GetPublicSymbol(this ModuleSymbol? symbol) 988823"];
12118 [label="return symbol.GetPublicSymbol<IModuleSymbol>(); 988824"];
12119 [label="symbol.GetPublicSymbol<IModuleSymbol>() 988825"];
12120 [label="param GetPublicSymbol(this Symbol? symbol) 988826"];
12121 [label=".ISymbol 988827"];
12122 [label="get\n            {\n                if (_lazyISymbol is null)\n                {\n                    Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null);\n                }\n\n                return _lazyISymbol;\n            } 988828"];
12123 [label="if (_lazyISymbol is null)\n                {\n                    Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null);\n                } 988829"];
12124 [label="Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null); 988830"];
12125 [label="CreateISymbol() 988831"];
12126 [label="param CreateISymbol(this) 988832"];
12127 [label="return new PublicModel.ModuleSymbol(this); 988833"];
12128 [label="return new PublicModel.ModuleSymbol(this); 988834"];
12129 [label="new PublicModel.ModuleSymbol(this) 988835"];
12130 [label="param ModuleSymbol(Symbols.ModuleSymbol underlying) 988836"];
12131 [label="param ModuleSymbol(this) 988837"];
12132 [label="param ModuleSymbol(this) 988838"];
12133 [label="param Symbol(this) 988839"];
12134 [label="_underlying 988840"];
12135 [label="Debug.Assert(underlying is object); 988841"];
12136 [label="_underlying 988842"];
12137 [label="Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null); 988843"];
12138 [label="Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null); 988844"];
12139 [label="Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null); 988845"];
12140 [label="return _lazyISymbol; 988846"];
12141 [label="return (TISymbol?)symbol?.ISymbol; 988847"];
12142 [label="get\n            {\n                return _underlying.GlobalNamespace.GetPublicSymbol();\n            } 988848"];
12143 [label="_underlying.GlobalNamespace 988849"];
12144 [label="get\n            {\n                if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                }\n\n                return _globalNamespace;\n            } 988850"];
12145 [label="return _underlying.GlobalNamespace.GetPublicSymbol(); 988851"];
12146 [label="_underlying.GlobalNamespace.GetPublicSymbol() 988852"];
12147 [label="param GetPublicSymbol(this NamespaceSymbol? symbol) 988853"];
12148 [label="return symbol.GetPublicSymbol<INamespaceSymbol>(); 988854"];
12149 [label="symbol.GetPublicSymbol<INamespaceSymbol>() 988855"];
12150 [label="param GetPublicSymbol(this Symbol? symbol) 988856"];
12151 [label=".ISymbol 988857"];
12152 [label="param CreateISymbol(this) 988858"];
12153 [label="return new PublicModel.NamespaceSymbol(this); 988859"];
12154 [label="return new PublicModel.NamespaceSymbol(this); 988860"];
12155 [label="new PublicModel.NamespaceSymbol(this) 988861"];
12156 [label="param NamespaceSymbol(Symbols.NamespaceSymbol underlying) 988862"];
12157 [label="param NamespaceSymbol(this) 988863"];
12158 [label="param NamespaceSymbol(this) 988864"];
12159 [label="param NamespaceOrTypeSymbol(this) 988865"];
12160 [label="param NamespaceOrTypeSymbol(this) 988866"];
12161 [label="param Symbol(this) 988867"];
12162 [label="_underlying 988868"];
12163 [label="Debug.Assert(underlying is object); 988869"];
12164 [label="_underlying 988870"];
12165 [label="param GetTypeMembers(string name) 988871"];
12166 [label="param GetTypeMembers(this) 988872"];
12167 [label="UnderlyingNamespaceOrTypeSymbol 988873"];
12168 [label="=> _underlying 988874"];
12169 [label="_underlying 988875"];
12170 [label="return UnderlyingNamespaceOrTypeSymbol.GetTypeMembers(name).GetPublicSymbols(); 988876"];
12171 [label="return UnderlyingNamespaceOrTypeSymbol.GetTypeMembers(name).GetPublicSymbols(); 988877"];
12172 [label="UnderlyingNamespaceOrTypeSymbol.GetTypeMembers(name) 988878"];
12173 [label="param GetTypeMembers(string name) 988879"];
12174 [label="param GetTypeMembers(this) 988880"];
12175 [label="ImmutableArray<NamedTypeSymbol> members; 988881"];
12176 [label="members 988882"];
12177 [label="this.GetNameToTypeMembersMap() 988883"];
12178 [label="if (_nameToTypeMembersMap == null)\n            {\n                // NOTE: This method depends on MakeNameToMembersMap() on creating a proper \n                // NOTE: type of the array, see comments in MakeNameToMembersMap() for details\n                Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null);\n            } 988884"];
12179 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 988885"];
12180 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 988886"];
12181 [label="this.GetNameToTypeMembersMap().TryGetValue(name, out members) 988887"];
12182 [label="UnderlyingNamespaceOrTypeSymbol.GetTypeMembers(name).GetPublicSymbols() 988888"];
12183 [label="param GetPublicSymbols(this ImmutableArray<NamedTypeSymbol> symbols) 988889"];
12184 [label="return GetPublicSymbols<INamedTypeSymbol>(StaticCast<Symbol>.From(symbols)); 988890"];
12185 [label="GetPublicSymbols<INamedTypeSymbol>(StaticCast<Symbol>.From(symbols)) 988891"];
12186 [label="param GetPublicSymbols(this ImmutableArray<Symbol> symbols) 988892"];
12187 [label="if (symbols.IsDefault)\n            {\n                return default;\n            } 988893"];
12188 [label="return symbols.SelectAsArray(p => p.GetPublicSymbol<TISymbol>()); 988894"];
12189 [label="return symbols.SelectAsArray(p => p.GetPublicSymbol<TISymbol>()); 988895"];
12190 [label="CommonBindScriptClass().GetSymbol() 988896"];
12191 [label="param GetSymbol(this INamedTypeSymbol? symbol) 988897"];
12192 [label="return symbol.GetSymbol<NamedTypeSymbol>(); 988898"];
12193 [label="symbol.GetSymbol<NamedTypeSymbol>() 988899"];
12194 [label="param GetSymbol(this ISymbol? symbol) 988900"];
12195 [label="return (TSymbol?)((PublicModel.Symbol?)symbol)?.UnderlyingSymbol; 988901"];
12196 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 988902"];
12197 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 988903"];
12198 [label="if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    } 988904"];
12199 [label="null 988905"];
12200 [label="ImmutableArray<Diagnostic>.Empty 988906"];
12201 [label="new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 988907"];
12202 [label="param EntryPoint(MethodSymbol? methodSymbol) 988908"];
12203 [label="param EntryPoint(ImmutableArray<Diagnostic> diagnostics) 988909"];
12204 [label="param EntryPoint(this) 988910"];
12205 [label="MethodSymbol 988911"];
12206 [label="this.MethodSymbol 988912"];
12207 [label="this.Diagnostics 988913"];
12208 [label="None = new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 988914"];
12209 [label="entryPoint = EntryPoint.None; 988915"];
12210 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 988916"];
12211 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 988917"];
12212 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 988918"];
12213 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 988919"];
12214 [label="return _lazyEntryPoint; 988920"];
12215 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 988921"];
12216 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 988922"];
12217 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 988923"];
12218 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 988924"];
12219 [label="var entryPoint = entryPointAndDiagnostics.MethodSymbol; 988925"];
12220 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 988926"];
12221 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 988927"];
12222 [label="return null; 988928"];
12223 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 988929"];
12224 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 988930"];
12225 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 988931"];
12226 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 988932"];
12227 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 988933"];
12228 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 988934"];
12229 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 988935"];
12230 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 988936"];
12231 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 988937"];
12232 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 988938"];
12233 [label="new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken) 988939"];
12234 [label="param MethodCompiler(CSharpCompilation compilation) 988940"];
12235 [label="param MethodCompiler(PEModuleBuilder moduleBeingBuiltOpt) 988941"];
12236 [label="param MethodCompiler(bool emittingPdb) 988942"];
12237 [label="param MethodCompiler(bool emitTestCoverageData) 988943"];
12238 [label="param MethodCompiler(bool hasDeclarationErrors) 988944"];
12239 [label="param MethodCompiler(DiagnosticBag diagnostics) 988945"];
12240 [label="param MethodCompiler(Predicate<Symbol> filterOpt) 988946"];
12241 [label="param MethodCompiler(SynthesizedEntryPointSymbol.AsyncForwardEntryPoint entryPointOpt) 988947"];
12242 [label="param MethodCompiler(CancellationToken cancellationToken) 988948"];
12243 [label="param MethodCompiler(this) 988949"];
12244 [label="param MethodCompiler(this) 988950"];
12245 [label="param CSharpSymbolVisitor(this) 988951"];
12246 [label="_compilation 988952"];
12247 [label="_emittingPdb 988953"];
12248 [label="_emitTestCoverageData 988954"];
12249 [label="_diagnostics 988955"];
12250 [label="_hasDeclarationErrors 988956"];
12251 [label="_moduleBeingBuiltOpt 988957"];
12252 [label="_filterOpt 988958"];
12253 [label="_debugDocumentProvider 988959"];
12254 [label="_entryPointOpt 988960"];
12255 [label="_compilerTasks 988961"];
12256 [label="_globalHasErrors 988962"];
12257 [label="Debug.Assert(compilation != null); 988963"];
12258 [label="Debug.Assert(compilation != null); 988964"];
12259 [label="Debug.Assert(diagnostics != null); 988965"];
12260 [label="Debug.Assert(diagnostics != null); 988966"];
12261 [label="_compilation 988967"];
12262 [label="_moduleBeingBuiltOpt 988968"];
12263 [label="_emittingPdb 988969"];
12264 [label="_cancellationToken 988970"];
12265 [label="_diagnostics 988971"];
12266 [label="_filterOpt 988972"];
12267 [label="_entryPointOpt 988973"];
12268 [label="_hasDeclarationErrors 988974"];
12269 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 988975"];
12270 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 988976"];
12271 [label="param SetGlobalErrorIfTrue(bool arg) 988977"];
12272 [label="param SetGlobalErrorIfTrue(this) 988978"];
12273 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 988979"];
12274 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 988980"];
12275 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 988981"];
12276 [label="_debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile); 988982"];
12277 [label="_debugDocumentProvider 988983"];
12278 [label="_emitTestCoverageData 988984"];
12279 [label="compilation.Options 988985"];
12280 [label="get\n            {\n                return _options;\n            } 988986"];
12281 [label="return _options; 988987"];
12282 [label="if (compilation.Options.ConcurrentBuild)\n            {\n                methodCompiler._compilerTasks = new ConcurrentStack<Task>();\n            } 988988"];
12283 [label="methodCompiler._compilerTasks = new ConcurrentStack<Task>(); 988989"];
12284 [label="methodCompiler._compilerTasks 988990"];
12285 [label="compilation.SourceModule 988991"];
12286 [label="get\n            {\n                return Assembly.Modules[0];\n            } 988992"];
12287 [label="Assembly 988993"];
12288 [label="get\n            {\n                return SourceAssembly;\n            } 988994"];
12289 [label="SourceAssembly 988995"];
12290 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 988996"];
12291 [label="GetBoundReferenceManager() 988997"];
12292 [label="param GetBoundReferenceManager(this) 988998"];
12293 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 988999"];
12294 [label="return _referenceManager; 989000"];
12295 [label="GetBoundReferenceManager(); 989001"];
12296 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 989002"];
12297 [label="Assembly.Modules 989003"];
12298 [label="return Assembly.Modules[0]; 989004"];
12299 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 989005"];
12300 [label="compilation.SourceModule.GlobalNamespace 989006"];
12301 [label="get\n            {\n                if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                }\n\n                return _globalNamespace;\n            } 989007"];
12302 [label="if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                } 989008"];
12303 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace) 989009"];
12304 [label="param CompileNamespace(NamespaceSymbol symbol) 989010"];
12305 [label="param CompileNamespace(this) 989011"];
12306 [label="symbol.GetMembersUnordered() 989012"];
12307 [label="param GetMembersUnordered(this) 989013"];
12308 [label="foreach (var s in symbol.GetMembersUnordered())\n            {\n                s.Accept(this, null);\n            } 989014"];
12309 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 989015"];
12310 [label="methodCompiler.WaitForWorkers() 989016"];
12311 [label="param WaitForWorkers(this) 989017"];
12312 [label="var tasks = _compilerTasks; 989018"];
12313 [label="if (tasks == null)\n            {\n                return;\n            } 989019"];
12314 [label="if (tasks == null)\n            {\n                return;\n            } 989020"];
12315 [label="Task curTask; 989021"];
12316 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 989022"];
12317 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 989023"];
12318 [label="methodCompiler.WaitForWorkers(); 989024"];
12319 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 989025"];
12320 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 989026"];
12321 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 989027"];
12322 [label="moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics) 989028"];
12323 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 989029"];
12324 [label="=> _additionalTypes 989030"];
12325 [label="_additionalTypes 989031"];
12326 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 989032"];
12327 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 989033"];
12328 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 989034"];
12329 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics) 989035"];
12330 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 989036"];
12331 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 989037"];
12332 [label="param CompileSynthesizedMethods(this) 989038"];
12333 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 989039"];
12334 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 989040"];
12335 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 989041"];
12336 [label="moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics) 989042"];
12337 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 989043"];
12338 [label="param GetEmbeddedTypes(this) 989044"];
12339 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 989045"];
12340 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 989046"];
12341 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 989047"];
12342 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 989048"];
12343 [label="param CreateEmbeddedAttributesIfNeeded(this) 989049"];
12344 [label="GetNeedsGeneratedAttributes() 989050"];
12345 [label="param GetNeedsGeneratedAttributes(this) 989051"];
12346 [label="_needsGeneratedAttributes_IsFrozen = true; 989052"];
12347 [label="_needsGeneratedAttributes_IsFrozen 989053"];
12348 [label="GetNeedsGeneratedAttributesInternal() 989054"];
12349 [label="param GetNeedsGeneratedAttributesInternal(this) 989055"];
12350 [label="Compilation.GetNeedsGeneratedAttributes() 989056"];
12351 [label="param GetNeedsGeneratedAttributes(this) 989057"];
12352 [label="_needsGeneratedAttributes_IsFrozen = true; 989058"];
12353 [label="_needsGeneratedAttributes_IsFrozen 989059"];
12354 [label="return (EmbeddableAttributes)_needsGeneratedAttributes; 989060"];
12355 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 989061"];
12356 [label="return GetNeedsGeneratedAttributesInternal(); 989062"];
12357 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 989063"];
12358 [label="ShouldEmitNullablePublicOnlyAttribute() 989064"];
12359 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 989065"];
12360 [label="Compilation.GetUsesNullableAttributes() 989066"];
12361 [label="param GetUsesNullableAttributes(this) 989067"];
12362 [label="_needsGeneratedAttributes_IsFrozen = true; 989068"];
12363 [label="_needsGeneratedAttributes_IsFrozen 989069"];
12364 [label="return _usesNullableAttributes; 989070"];
12365 [label="return Compilation.GetUsesNullableAttributes() && Compilation.EmitNullablePublicOnly; 989071"];
12366 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 989072"];
12367 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 989073"];
12368 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 989074"];
12369 [label="return; 989075"];
12370 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 989076"];
12371 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 989077"];
12372 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 989078"];
12373 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 989079"];
12374 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 989080"];
12375 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 989081"];
12376 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 989082"];
12377 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 989083"];
12378 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 989084"];
12379 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 989085"];
12380 [label="builder.AddIfNotNull(_lazyNullableAttribute); 989086"];
12381 [label="builder.AddIfNotNull(_lazyNullableAttribute); 989087"];
12382 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 989088"];
12383 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 989089"];
12384 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 989090"];
12385 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 989091"];
12386 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 989092"];
12387 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 989093"];
12388 [label="return builder.ToImmutableAndFree(); 989094"];
12389 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 989095"];
12390 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 989096"];
12391 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 989097"];
12392 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics) 989098"];
12393 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 989099"];
12394 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 989100"];
12395 [label="param CompileSynthesizedMethods(this) 989101"];
12396 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 989102"];
12397 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 989103"];
12398 [label="compilation.AnonymousTypeManager 989104"];
12399 [label="get\n            {\n                return _anonymousTypeManager;\n            } 989105"];
12400 [label="return _anonymousTypeManager; 989106"];
12401 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 989107"];
12402 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 989108"];
12403 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 989109"];
12404 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 989110"];
12405 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics) 989111"];
12406 [label="param AssignTemplatesNamesAndCompile(MethodCompiler compiler) 989112"];
12407 [label="param AssignTemplatesNamesAndCompile(PEModuleBuilder moduleBeingBuilt) 989113"];
12408 [label="param AssignTemplatesNamesAndCompile(DiagnosticBag diagnostics) 989114"];
12409 [label="param AssignTemplatesNamesAndCompile(this) 989115"];
12410 [label="moduleBeingBuilt.GetPreviousAnonymousTypes() 989116"];
12411 [label="param GetPreviousAnonymousTypes(this) 989117"];
12412 [label="return ImmutableArray<AnonymousTypeKey>.Empty; 989118"];
12413 [label="foreach (var key in moduleBeingBuilt.GetPreviousAnonymousTypes())\n            {\n                var templateKey = AnonymousTypeDescriptor.ComputeKey(key.Fields, f => f.Name);\n                this.AnonymousTypeTemplates.GetOrAdd(templateKey, k => this.CreatePlaceholderTemplate(key));\n            } 989119"];
12414 [label="var builder = ArrayBuilder<AnonymousTypeTemplateSymbol>.GetInstance(); 989120"];
12415 [label="GetCreatedAnonymousTypeTemplates(builder); 989121"];
12416 [label="GetCreatedAnonymousTypeTemplates(builder) 989122"];
12417 [label="param GetCreatedAnonymousTypeTemplates(ArrayBuilder<AnonymousTypeTemplateSymbol> builder) 989123"];
12418 [label="param GetCreatedAnonymousTypeTemplates(this) 989124"];
12419 [label="Debug.Assert(!builder.Any()); 989125"];
12420 [label="var anonymousTypes = _lazyAnonymousTypeTemplates; 989126"];
12421 [label="if (anonymousTypes != null)\n            {\n                foreach (var template in anonymousTypes.Values)\n                {\n                    if (ReferenceEquals(template.Manager, this))\n                    {\n                        builder.Add(template);\n                    }\n                }\n                // Sort type templates using smallest location\n                builder.Sort(new AnonymousTypeComparer(this.Compilation));\n            } 989127"];
12422 [label="if (anonymousTypes != null)\n            {\n                foreach (var template in anonymousTypes.Values)\n                {\n                    if (ReferenceEquals(template.Manager, this))\n                    {\n                        builder.Add(template);\n                    }\n                }\n                // Sort type templates using smallest location\n                builder.Sort(new AnonymousTypeComparer(this.Compilation));\n            } 989128"];
12423 [label="GetCreatedAnonymousTypeTemplates(builder); 989129"];
12424 [label="if (!this.AreTemplatesSealed)\n            {\n                // If we are emitting .NET module, include module's name into type's name to ensure\n                // uniqueness across added modules.\n                string moduleId;\n\n                if (moduleBeingBuilt.OutputKind == OutputKind.NetModule)\n                {\n                    moduleId = moduleBeingBuilt.Name;\n\n                    string extension = OutputKind.NetModule.GetDefaultExtension();\n\n                    if (moduleId.EndsWith(extension, StringComparison.OrdinalIgnoreCase))\n                    {\n                        moduleId = moduleId.Substring(0, moduleId.Length - extension.Length);\n                    }\n\n                    moduleId = MetadataHelpers.MangleForTypeNameIfNeeded(moduleId);\n                }\n                else\n                {\n                    moduleId = string.Empty;\n                }\n\n                int nextIndex = moduleBeingBuilt.GetNextAnonymousTypeIndex();\n                foreach (var template in builder)\n                {\n                    string name;\n                    int index;\n                    if (!moduleBeingBuilt.TryGetAnonymousTypeName(template, out name, out index))\n                    {\n                        index = nextIndex++;\n                        name = GeneratedNames.MakeAnonymousTypeTemplateName(index, this.Compilation.GetSubmissionSlotIndex(), moduleId);\n                    }\n                    // normally it should only happen once, but in case there is a race\n                    // NameAndIndex.set has an assert which guarantees that the\n                    // template name provided is the same as the one already assigned\n                    template.NameAndIndex = new NameAndIndex(name, index);\n                }\n\n                this.SealTemplates();\n            } 989130"];
12425 [label="string moduleId; 989131"];
12426 [label="if (moduleBeingBuilt.OutputKind == OutputKind.NetModule)\n                {\n                    moduleId = moduleBeingBuilt.Name;\n\n                    string extension = OutputKind.NetModule.GetDefaultExtension();\n\n                    if (moduleId.EndsWith(extension, StringComparison.OrdinalIgnoreCase))\n                    {\n                        moduleId = moduleId.Substring(0, moduleId.Length - extension.Length);\n                    }\n\n                    moduleId = MetadataHelpers.MangleForTypeNameIfNeeded(moduleId);\n                }\n                else\n                {\n                    moduleId = string.Empty;\n                } 989132"];
12427 [label="moduleId = string.Empty; 989133"];
12428 [label="moduleBeingBuilt.GetNextAnonymousTypeIndex() 989134"];
12429 [label="param GetNextAnonymousTypeIndex(this) 989135"];
12430 [label="return 0; 989136"];
12431 [label="int nextIndex = moduleBeingBuilt.GetNextAnonymousTypeIndex(); 989137"];
12432 [label="foreach (var template in builder)\n                {\n                    string name;\n                    int index;\n                    if (!moduleBeingBuilt.TryGetAnonymousTypeName(template, out name, out index))\n                    {\n                        index = nextIndex++;\n                        name = GeneratedNames.MakeAnonymousTypeTemplateName(index, this.Compilation.GetSubmissionSlotIndex(), moduleId);\n                    }\n                    // normally it should only happen once, but in case there is a race\n                    // NameAndIndex.set has an assert which guarantees that the\n                    // template name provided is the same as the one already assigned\n                    template.NameAndIndex = new NameAndIndex(name, index);\n                } 989138"];
12433 [label="foreach (var template in builder)\n                {\n                    string name;\n                    int index;\n                    if (!moduleBeingBuilt.TryGetAnonymousTypeName(template, out name, out index))\n                    {\n                        index = nextIndex++;\n                        name = GeneratedNames.MakeAnonymousTypeTemplateName(index, this.Compilation.GetSubmissionSlotIndex(), moduleId);\n                    }\n                    // normally it should only happen once, but in case there is a race\n                    // NameAndIndex.set has an assert which guarantees that the\n                    // template name provided is the same as the one already assigned\n                    template.NameAndIndex = new NameAndIndex(name, index);\n                } 989139"];
12434 [label="this.SealTemplates(); 989140"];
12435 [label="if (builder.Count > 0 && !ReportMissingOrErroneousSymbols(diagnostics))\n            {\n                // Process all the templates\n                foreach (var template in builder)\n                {\n                    foreach (var method in template.SpecialMembers)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(template, method.GetCciAdapter());\n                    }\n\n                    compiler.Visit(template, null);\n                }\n            } 989141"];
12436 [label="if (builder.Count > 0 && !ReportMissingOrErroneousSymbols(diagnostics))\n            {\n                // Process all the templates\n                foreach (var template in builder)\n                {\n                    foreach (var method in template.SpecialMembers)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(template, method.GetCciAdapter());\n                    }\n\n                    compiler.Visit(template, null);\n                }\n            } 989142"];
12437 [label="builder.Free(); 989143"];
12438 [label="var synthesizedDelegates = ArrayBuilder<SynthesizedDelegateSymbol>.GetInstance(); 989144"];
12439 [label="GetCreatedSynthesizedDelegates(synthesizedDelegates); 989145"];
12440 [label="GetCreatedSynthesizedDelegates(synthesizedDelegates) 989146"];
12441 [label="param GetCreatedSynthesizedDelegates(ArrayBuilder<SynthesizedDelegateSymbol> builder) 989147"];
12442 [label="param GetCreatedSynthesizedDelegates(this) 989148"];
12443 [label="Debug.Assert(!builder.Any()); 989149"];
12444 [label="var delegates = _lazySynthesizedDelegates; 989150"];
12445 [label="if (delegates != null)\n            {\n                foreach (var template in delegates.Values)\n                {\n                    if (ReferenceEquals(template.Manager, this))\n                    {\n                        builder.Add(template.Delegate);\n                    }\n                }\n                builder.Sort(SynthesizedDelegateSymbolComparer.Instance);\n            } 989151"];
12446 [label="if (delegates != null)\n            {\n                foreach (var template in delegates.Values)\n                {\n                    if (ReferenceEquals(template.Manager, this))\n                    {\n                        builder.Add(template.Delegate);\n                    }\n                }\n                builder.Sort(SynthesizedDelegateSymbolComparer.Instance);\n            } 989152"];
12447 [label="GetCreatedSynthesizedDelegates(synthesizedDelegates); 989153"];
12448 [label="foreach (var synthesizedDelegate in synthesizedDelegates)\n            {\n                compiler.Visit(synthesizedDelegate, null);\n            } 989154"];
12449 [label="foreach (var synthesizedDelegate in synthesizedDelegates)\n            {\n                compiler.Visit(synthesizedDelegate, null);\n            } 989155"];
12450 [label="synthesizedDelegates.Free(); 989156"];
12451 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 989157"];
12452 [label="methodCompiler.WaitForWorkers() 989158"];
12453 [label="param WaitForWorkers(this) 989159"];
12454 [label="var tasks = _compilerTasks; 989160"];
12455 [label="if (tasks == null)\n            {\n                return;\n            } 989161"];
12456 [label="if (tasks == null)\n            {\n                return;\n            } 989162"];
12457 [label="Task curTask; 989163"];
12458 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 989164"];
12459 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 989165"];
12460 [label="methodCompiler.WaitForWorkers(); 989166"];
12461 [label="var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass; 989167"];
12462 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 989168"];
12463 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 989169"];
12464 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 989170"];
12465 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 989171"];
12466 [label="moduleBeingBuiltOpt.SourceModule.HasBadAttributes 989172"];
12467 [label="get\n            {\n                return _hasBadAttributes;\n            } 989173"];
12468 [label="return _hasBadAttributes; 989174"];
12469 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 989175"];
12470 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 989176"];
12471 [label="compilation.AdditionalCodegenWarnings 989177"];
12472 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 989178"];
12473 [label="return _additionalCodegenWarnings; 989179"];
12474 [label="diagnostics.AddRange(compilation.AdditionalCodegenWarnings); 989180"];
12475 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 989181"];
12476 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 989182"];
12477 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 989183"];
12478 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 989184"];
12479 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 989185"];
12480 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken) 989186"];
12481 [label="param WarnUnusedFields(CSharpCompilation compilation) 989187"];
12482 [label="param WarnUnusedFields(DiagnosticBag diagnostics) 989188"];
12483 [label="param WarnUnusedFields(CancellationToken cancellationToken) 989189"];
12484 [label="compilation.Assembly 989190"];
12485 [label="get\n            {\n                return SourceAssembly;\n            } 989191"];
12486 [label="SourceAssembly 989192"];
12487 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 989193"];
12488 [label="GetBoundReferenceManager() 989194"];
12489 [label="param GetBoundReferenceManager(this) 989195"];
12490 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 989196"];
12491 [label="return _referenceManager; 989197"];
12492 [label="GetBoundReferenceManager(); 989198"];
12493 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 989199"];
12494 [label="SourceAssemblySymbol assembly = (SourceAssemblySymbol)compilation.Assembly; 989200"];
12495 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 989201"];
12496 [label="assembly.GetUnusedFieldWarnings(cancellationToken) 989202"];
12497 [label="param GetUnusedFieldWarnings(CancellationToken cancellationToken) 989203"];
12498 [label="param GetUnusedFieldWarnings(this) 989204"];
12499 [label="if (_unusedFieldWarnings.IsDefault)\n            {\n                //Our maps of unread and unassigned fields won't be done until the assembly is complete.\n                this.ForceComplete(locationOpt: null, cancellationToken: cancellationToken);\n\n                Debug.Assert(this.HasComplete(CompletionPart.Module),\n                    'Don't consume unused field information if there are still types to be processed.');\n\n                // Build this up in a local before we assign it to this.unusedFieldWarnings (so other threads\n                // can see that it's not done).\n                DiagnosticBag diagnostics = DiagnosticBag.GetInstance();\n\n                // NOTE: two threads can come in here at the same time.  If they do, then they will\n                // share the diagnostic bag.  That's alright, as long as each one processes only\n                // the fields that it successfully removes from the shared map/set.  Furthermore,\n                // there should be no problem with re-calling this method on the same assembly,\n                // since there will be nothing left in the map/set the second time.\n                bool internalsAreVisible =\n                    this.InternalsAreVisible ||\n                    this.IsNetModule();\n\n                HashSet<FieldSymbol> handledUnreadFields = null;\n\n                foreach (FieldSymbol field in _unassignedFieldsMap.Keys) // Not mutating, so no snapshot required.\n                {\n                    bool isInternalAccessibility;\n                    bool success = _unassignedFieldsMap.TryGetValue(field, out isInternalAccessibility);\n                    Debug.Assert(success, 'Once CompletionPart.Module is set, no-one should be modifying the map.');\n\n                    if (isInternalAccessibility && internalsAreVisible)\n                    {\n                        continue;\n                    }\n\n                    if (!field.CanBeReferencedByName)\n                    {\n                        continue;\n                    }\n\n                    var containingType = field.ContainingType as SourceNamedTypeSymbol;\n                    if ((object)containingType == null)\n                    {\n                        continue;\n                    }\n\n                    if (field is TupleErrorFieldSymbol)\n                    {\n                        continue;\n                    }\n\n                    bool unread = _unreadFields.Contains(field);\n                    if (unread)\n                    {\n                        if (handledUnreadFields == null)\n                        {\n                            handledUnreadFields = new HashSet<FieldSymbol>();\n                        }\n                        handledUnreadFields.Add(field);\n                    }\n\n                    if (containingType.HasStructLayoutAttribute)\n                    {\n                        continue;\n                    }\n\n                    Symbol associatedPropertyOrEvent = field.AssociatedSymbol;\n                    if ((object)associatedPropertyOrEvent != null && associatedPropertyOrEvent.Kind == SymbolKind.Event)\n                    {\n                        if (unread)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_UnreferencedEvent, associatedPropertyOrEvent.Locations.FirstOrNone(), associatedPropertyOrEvent);\n                        }\n                    }\n                    else if (unread)\n                    {\n                        diagnostics.Add(ErrorCode.WRN_UnreferencedField, field.Locations.FirstOrNone(), field);\n                    }\n                    else\n                    {\n                        diagnostics.Add(ErrorCode.WRN_UnassignedInternalField, field.Locations.FirstOrNone(), field, DefaultValue(field.Type));\n                    }\n                }\n\n                foreach (FieldSymbol field in _unreadFields) // Not mutating, so no snapshot required.\n                {\n                    if (handledUnreadFields != null && handledUnreadFields.Contains(field))\n                    {\n                        // Handled in the first foreach loop.\n                        continue;\n                    }\n\n                    if (!field.CanBeReferencedByName)\n                    {\n                        continue;\n                    }\n\n                    var containingType = field.ContainingType as SourceNamedTypeSymbol;\n                    if ((object)containingType != null && !containingType.HasStructLayoutAttribute)\n                    {\n                        diagnostics.Add(ErrorCode.WRN_UnreferencedFieldAssg, field.Locations.FirstOrNone(), field);\n                    }\n                }\n\n                ImmutableInterlocked.InterlockedInitialize(ref _unusedFieldWarnings, diagnostics.ToReadOnlyAndFree());\n            } 989205"];
12500 [label="this.ForceComplete(locationOpt: null, cancellationToken: cancellationToken); 989206"];
12501 [label="this.ForceComplete(locationOpt: null, cancellationToken: cancellationToken); 989207"];
12502 [label="Debug.Assert(HasAtMostOneBitSet(next), 'ForceComplete won't handle the result correctly if more than one bit is set.'); 989208"];
12503 [label="HasAtMostOneBitSet(next) 989209"];
12504 [label="param HasAtMostOneBitSet(int bits) 989210"];
12505 [label="return (bits & (bits - 1)) == 0; 989211"];
12506 [label="return (bits & (bits - 1)) == 0; 989212"];
12507 [label="Debug.Assert(HasAtMostOneBitSet(next), 'ForceComplete won't handle the result correctly if more than one bit is set.'); 989213"];
12508 [label="Debug.Assert(this.HasComplete(CompletionPart.Module),\n                    'Don't consume unused field information if there are still types to be processed.'); 989214"];
12509 [label="this.HasComplete(CompletionPart.Module) 989215"];
12510 [label="param HasComplete(CompletionPart part) 989216"];
12511 [label="param HasComplete(this) 989217"];
12512 [label="return _state.HasComplete(part); 989218"];
12513 [label="_state.HasComplete(part) 989219"];
12514 [label="param HasComplete(CompletionPart part) 989220"];
12515 [label="param HasComplete(this) 989221"];
12516 [label="return (_completeParts & (int)part) == (int)part; 989222"];
12517 [label="Debug.Assert(this.HasComplete(CompletionPart.Module),\n                    'Don't consume unused field information if there are still types to be processed.'); 989223"];
12518 [label="DiagnosticBag diagnostics = DiagnosticBag.GetInstance(); 989224"];
12519 [label="this.InternalsAreVisible 989225"];
12520 [label="get\n            {\n                EnsureAttributesAreBound();\n                return _lazyInternalsVisibleToMap != null;\n            } 989226"];
12521 [label="EnsureAttributesAreBound() 989227"];
12522 [label="param EnsureAttributesAreBound(this) 989228"];
12523 [label="if ((_lazySourceAttributesBag == null || !_lazySourceAttributesBag.IsSealed) &&\n                LoadAndValidateAttributes(OneOrMany.Create(GetAttributeDeclarations()), ref _lazySourceAttributesBag))\n            {\n                _state.NotePartComplete(CompletionPart.Attributes);\n            } 989229"];
12524 [label="EnsureAttributesAreBound(); 989230"];
12525 [label="return _lazyInternalsVisibleToMap != null; 989231"];
12526 [label="return _lazyInternalsVisibleToMap != null; 989232"];
12527 [label="bool internalsAreVisible =\n                    this.InternalsAreVisible ||\n                    this.IsNetModule(); 989233"];
12528 [label="this.IsNetModule() 989234"];
12529 [label="=> this._compilation.Options.OutputKind.IsNetModule() 989235"];
12530 [label="this._compilation.Options 989236"];
12531 [label="get\n            {\n                return _options;\n            } 989237"];
12532 [label="this._compilation.Options.OutputKind 989238"];
12533 [label="this._compilation.Options.OutputKind.IsNetModule() 989239"];
12534 [label="bool internalsAreVisible =\n                    this.InternalsAreVisible ||\n                    this.IsNetModule(); 989240"];
12535 [label="bool internalsAreVisible =\n                    this.InternalsAreVisible ||\n                    this.IsNetModule(); 989241"];
12536 [label="HashSet<FieldSymbol> handledUnreadFields = null; 989242"];
12537 [label="foreach (FieldSymbol field in _unassignedFieldsMap.Keys) // Not mutating, so no snapshot required.\n                {\n                    bool isInternalAccessibility;\n                    bool success = _unassignedFieldsMap.TryGetValue(field, out isInternalAccessibility);\n                    Debug.Assert(success, 'Once CompletionPart.Module is set, no-one should be modifying the map.');\n\n                    if (isInternalAccessibility && internalsAreVisible)\n                    {\n                        continue;\n                    }\n\n                    if (!field.CanBeReferencedByName)\n                    {\n                        continue;\n                    }\n\n                    var containingType = field.ContainingType as SourceNamedTypeSymbol;\n                    if ((object)containingType == null)\n                    {\n                        continue;\n                    }\n\n                    if (field is TupleErrorFieldSymbol)\n                    {\n                        continue;\n                    }\n\n                    bool unread = _unreadFields.Contains(field);\n                    if (unread)\n                    {\n                        if (handledUnreadFields == null)\n                        {\n                            handledUnreadFields = new HashSet<FieldSymbol>();\n                        }\n                        handledUnreadFields.Add(field);\n                    }\n\n                    if (containingType.HasStructLayoutAttribute)\n                    {\n                        continue;\n                    }\n\n                    Symbol associatedPropertyOrEvent = field.AssociatedSymbol;\n                    if ((object)associatedPropertyOrEvent != null && associatedPropertyOrEvent.Kind == SymbolKind.Event)\n                    {\n                        if (unread)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_UnreferencedEvent, associatedPropertyOrEvent.Locations.FirstOrNone(), associatedPropertyOrEvent);\n                        }\n                    }\n                    else if (unread)\n                    {\n                        diagnostics.Add(ErrorCode.WRN_UnreferencedField, field.Locations.FirstOrNone(), field);\n                    }\n                    else\n                    {\n                        diagnostics.Add(ErrorCode.WRN_UnassignedInternalField, field.Locations.FirstOrNone(), field, DefaultValue(field.Type));\n                    }\n                } 989243"];
12538 [label="foreach (FieldSymbol field in _unreadFields) // Not mutating, so no snapshot required.\n                {\n                    if (handledUnreadFields != null && handledUnreadFields.Contains(field))\n                    {\n                        // Handled in the first foreach loop.\n                        continue;\n                    }\n\n                    if (!field.CanBeReferencedByName)\n                    {\n                        continue;\n                    }\n\n                    var containingType = field.ContainingType as SourceNamedTypeSymbol;\n                    if ((object)containingType != null && !containingType.HasStructLayoutAttribute)\n                    {\n                        diagnostics.Add(ErrorCode.WRN_UnreferencedFieldAssg, field.Locations.FirstOrNone(), field);\n                    }\n                } 989244"];
12539 [label="ImmutableInterlocked.InterlockedInitialize(ref _unusedFieldWarnings, diagnostics.ToReadOnlyAndFree()); 989245"];
12540 [label="ImmutableInterlocked.InterlockedInitialize(ref _unusedFieldWarnings, diagnostics.ToReadOnlyAndFree()); 989246"];
12541 [label="ImmutableInterlocked.InterlockedInitialize(ref _unusedFieldWarnings, diagnostics.ToReadOnlyAndFree()); 989247"];
12542 [label="Debug.Assert(!_unusedFieldWarnings.IsDefault); 989248"];
12543 [label="return _unusedFieldWarnings; 989249"];
12544 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 989250"];
12545 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 989251"];
12546 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 989252"];
12547 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 989253"];
12548 [label="entryPoint != null 989254"];
12549 [label="param !=(Symbol left) 989255"];
12550 [label="param !=(Symbol right) 989256"];
12551 [label="if (right is null)\n            {\n                return left is object;\n            } 989257"];
12552 [label="return left is object; 989258"];
12553 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 989259"];
12554 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 989260"];
12555 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 989261"];
12556 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 989262"];
12557 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 989263"];
12558 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 989264"];
12559 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 989265"];
12560 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag) 989266"];
12561 [label="param GenerateModuleInitializer(PEModuleBuilder moduleBeingBuilt) 989267"];
12562 [label="param GenerateModuleInitializer(DiagnosticBag methodBodyDiagnosticBag) 989268"];
12563 [label="param GenerateModuleInitializer(this) 989269"];
12564 [label="Debug.Assert(_declarationDiagnosticsFrozen); 989270"];
12565 [label="if (_moduleInitializerMethods is object)\n            {\n                var ilBuilder = new ILBuilder(moduleBeingBuilt, new LocalSlotManager(slotAllocator: null), OptimizationLevel.Release, areLocalsZeroed: false);\n\n                foreach (MethodSymbol method in _moduleInitializerMethods.OrderBy<MethodSymbol>(LexicalOrderSymbolComparer.Instance))\n                {\n                    ilBuilder.EmitOpCode(ILOpCode.Call, stackAdjustment: 0);\n\n                    ilBuilder.EmitToken(\n                        moduleBeingBuilt.Translate(method, methodBodyDiagnosticBag, needDeclaration: true),\n                        CSharpSyntaxTree.Dummy.GetRoot(),\n                        methodBodyDiagnosticBag);\n                }\n\n                ilBuilder.EmitRet(isVoid: true);\n                ilBuilder.Realize();\n                moduleBeingBuilt.RootModuleType.SetStaticConstructorBody(ilBuilder.RealizedIL);\n            } 989271"];
12566 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 989272"];
12567 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 989273"];
12568 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 989274"];
12569 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 989275"];
12570 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 989276"];
12571 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 989277"];
12572 [label="if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                } 989278"];
12573 [label="return true; 989279"];
12574 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 989280"];
12575 [label="param GenerateResourcesAndDocumentationComments(CommonPEModuleBuilder moduleBuilder) 989281"];
12576 [label="param GenerateResourcesAndDocumentationComments(Stream? xmlDocStream) 989282"];
12577 [label="param GenerateResourcesAndDocumentationComments(Stream? win32Resources) 989283"];
12578 [label="param GenerateResourcesAndDocumentationComments(string? outputNameOverride) 989284"];
12579 [label="param GenerateResourcesAndDocumentationComments(DiagnosticBag diagnostics) 989285"];
12580 [label="param GenerateResourcesAndDocumentationComments(CancellationToken cancellationToken) 989286"];
12581 [label="param GenerateResourcesAndDocumentationComments(this) 989287"];
12582 [label="DiagnosticBag? resourceDiagnostics = DiagnosticBag.GetInstance(); 989288"];
12583 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 989289"];
12584 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 989290"];
12585 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 989291"];
12586 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 989292"];
12587 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 989293"];
12588 [label="SourceAssembly 989294"];
12589 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 989295"];
12590 [label="GetBoundReferenceManager() 989296"];
12591 [label="param GetBoundReferenceManager(this) 989297"];
12592 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 989298"];
12593 [label="return _referenceManager; 989299"];
12594 [label="GetBoundReferenceManager(); 989300"];
12595 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 989301"];
12596 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 989302"];
12597 [label="SourceAssembly.Modules 989303"];
12598 [label="get\n            {\n                return _modules;\n            } 989304"];
12599 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 989305"];
12600 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 989306"];
12601 [label="AddedModulesResourceNames(resourceDiagnostics) 989307"];
12602 [label="param AddedModulesResourceNames(DiagnosticBag diagnostics) 989308"];
12603 [label="param AddedModulesResourceNames(this) 989309"];
12604 [label="SourceAssembly 989310"];
12605 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 989311"];
12606 [label="GetBoundReferenceManager() 989312"];
12607 [label="param GetBoundReferenceManager(this) 989313"];
12608 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 989314"];
12609 [label="return _referenceManager; 989315"];
12610 [label="GetBoundReferenceManager(); 989316"];
12611 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 989317"];
12612 [label="ImmutableArray<ModuleSymbol> modules = SourceAssembly.Modules; 989318"];
12613 [label="SourceAssembly.Modules 989319"];
12614 [label="get\n            {\n                return _modules;\n            } 989320"];
12615 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 989321"];
12616 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 989322"];
12617 [label="var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i]; 989323"];
12618 [label="ImmutableArray<EmbeddedResource> resources; 989324"];
12619 [label="resources 989325"];
12620 [label="m.Module 989326"];
12621 [label="get\n            {\n                return _module;\n            } 989327"];
12622 [label="resources = m.Module.GetEmbeddedResourcesOrThrow(); 989328"];
12623 [label="foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                } 989329"];
12624 [label="param AddedModulesResourceNames(this) 989330"];
12625 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 989331"];
12626 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 989332"];
12627 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 989333"];
12628 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 989334"];
12629 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 989335"];
12630 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 989336"];
12631 [label="cancellationToken.ThrowIfCancellationRequested(); 989337"];
12632 [label="DiagnosticBag? xmlDiagnostics = DiagnosticBag.GetInstance(); 989338"];
12633 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 989339"];
12634 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 989340"];
12635 [label="new[] { '\\r\\n', '\\r', '\\n' } 989341"];
12636 [label="'\\r\\n' 989342"];
12637 [label="'\\r' 989343"];
12638 [label="'\\n' 989344"];
12639 [label="new[] { '\\r\\n', '\\r', '\\n' } 989345"];
12640 [label="new[] { '\\r\\n', '\\r', '\\n' } 989346"];
12641 [label="new[] { '\\r\\n', '\\r', '\\n' } 989347"];
12642 [label="s_newLineSequences = new[] { '\\r\\n', '\\r', '\\n' } 989348"];
12643 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 989349"];
12644 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 989350"];
12645 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 989351"];
12646 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 989352"];
12647 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 989353"];
12648 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 989354"];
12649 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken) 989355"];
12650 [label="param WriteDocumentationCommentXml(CSharpCompilation compilation) 989356"];
12651 [label="param WriteDocumentationCommentXml(string? assemblyName) 989357"];
12652 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 989358"];
12653 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 989359"];
12654 [label="param WriteDocumentationCommentXml(CancellationToken cancellationToken) 989360"];
12655 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 989361"];
12656 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 989362"];
12657 [label="StreamWriter writer = null; 989363"];
12658 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 989364"];
12659 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 989365"];
12660 [label="compilation.SourceAssembly 989366"];
12661 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 989367"];
12662 [label="GetBoundReferenceManager() 989368"];
12663 [label="param GetBoundReferenceManager(this) 989369"];
12664 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 989370"];
12665 [label="return _referenceManager; 989371"];
12666 [label="GetBoundReferenceManager(); 989372"];
12667 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 989373"];
12668 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 989374"];
12669 [label="compilation.SourceAssembly.Name 989375"];
12670 [label="get\n            {\n                return _assemblySimpleName;\n            } 989376"];
12671 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 989377"];
12672 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 989378"];
12673 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 989379"];
12674 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 989380"];
12675 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 989381"];
12676 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 989382"];
12677 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 989383"];
12678 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 989384"];
12679 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 989385"];
12680 [label="param DocumentationCommentCompiler(string assemblyName) 989386"];
12681 [label="param DocumentationCommentCompiler(CSharpCompilation compilation) 989387"];
12682 [label="param DocumentationCommentCompiler(TextWriter writer) 989388"];
12683 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 989389"];
12684 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 989390"];
12685 [label="param DocumentationCommentCompiler(bool processIncludes) 989391"];
12686 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 989392"];
12687 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 989393"];
12688 [label="param DocumentationCommentCompiler(CancellationToken cancellationToken) 989394"];
12689 [label="param DocumentationCommentCompiler(this) 989395"];
12690 [label="param DocumentationCommentCompiler(this) 989396"];
12691 [label="param CSharpSymbolVisitor(this) 989397"];
12692 [label="_assemblyName 989398"];
12693 [label="_compilation 989399"];
12694 [label="_writer 989400"];
12695 [label="_filterTree 989401"];
12696 [label="_filterSpanWithinTree 989402"];
12697 [label="_processIncludes 989403"];
12698 [label="_isForSingleSymbol 989404"];
12699 [label="_diagnostics 989405"];
12700 [label="_lazyComparer 989406"];
12701 [label="_includedFileCache 989407"];
12702 [label="_indentDepth 989408"];
12703 [label="_temporaryStringBuilders 989409"];
12704 [label="_assemblyName 989410"];
12705 [label="_compilation 989411"];
12706 [label="_writer 989412"];
12707 [label="_filterTree 989413"];
12708 [label="_filterSpanWithinTree 989414"];
12709 [label="_processIncludes 989415"];
12710 [label="_isForSingleSymbol 989416"];
12711 [label="_diagnostics 989417"];
12712 [label="_cancellationToken 989418"];
12713 [label="compilation.SourceAssembly 989419"];
12714 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 989420"];
12715 [label="GetBoundReferenceManager() 989421"];
12716 [label="param GetBoundReferenceManager(this) 989422"];
12717 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 989423"];
12718 [label="return _referenceManager; 989424"];
12719 [label="GetBoundReferenceManager(); 989425"];
12720 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 989426"];
12721 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 989427"];
12722 [label="compilation.SourceAssembly.GlobalNamespace 989428"];
12723 [label="get\n            {\n                if ((object)_globalNamespace == null)\n                {\n                    // Get the root namespace from each module, and merge them all together. If there is only one, \n                    // then MergedNamespaceSymbol.Create will just return that one.\n\n                    IEnumerable<NamespaceSymbol> allGlobalNamespaces = from m in Modules select m.GlobalNamespace;\n                    var result = MergedNamespaceSymbol.Create(new NamespaceExtent(this),\n                                                        null,\n                                                        allGlobalNamespaces.AsImmutable());\n                    Interlocked.CompareExchange(ref _globalNamespace, result, null);\n                }\n\n                return _globalNamespace;\n            } 989429"];
12724 [label="if ((object)_globalNamespace == null)\n                {\n                    // Get the root namespace from each module, and merge them all together. If there is only one, \n                    // then MergedNamespaceSymbol.Create will just return that one.\n\n                    IEnumerable<NamespaceSymbol> allGlobalNamespaces = from m in Modules select m.GlobalNamespace;\n                    var result = MergedNamespaceSymbol.Create(new NamespaceExtent(this),\n                                                        null,\n                                                        allGlobalNamespaces.AsImmutable());\n                    Interlocked.CompareExchange(ref _globalNamespace, result, null);\n                } 989430"];
12725 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace) 989431"];
12726 [label="param Visit(Symbol symbol) 989432"];
12727 [label="param Visit(this) 989433"];
12728 [label="if ((object)symbol != null)\n            {\n                symbol.Accept(this);\n            } 989434"];
12729 [label="symbol.Accept(this); 989435"];
12730 [label="param VisitNamespace(NamespaceSymbol symbol) 989436"];
12731 [label="param VisitNamespace(this) 989437"];
12732 [label="_cancellationToken.ThrowIfCancellationRequested(); 989438"];
12733 [label="symbol.IsGlobalNamespace 989439"];
12734 [label="get\n            {\n                return (object)ContainingNamespace == null;\n            } 989440"];
12735 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 989441"];
12736 [label="this.ContainingSymbol 989442"];
12737 [label="get\n            {\n                return _containingNamespace;\n            } 989443"];
12738 [label="return _containingNamespace; 989444"];
12739 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 989445"];
12740 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 989446"];
12741 [label="if (symbol.IsGlobalNamespace)\n            {\n                Debug.Assert(_assemblyName != null);\n\n                WriteLine('<?xml version=\\'1.0\\'?>');\n                WriteLine('<doc>');\n                Indent();\n\n                if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                }\n\n                WriteLine('<members>');\n                Indent();\n            } 989447"];
12742 [label="Debug.Assert(_assemblyName != null); 989448"];
12743 [label="Debug.Assert(_assemblyName != null); 989449"];
12744 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 989450"];
12745 [label="WriteLine('<?xml version=\\'1.0\\'?>') 989451"];
12746 [label="param WriteLine(string message) 989452"];
12747 [label="param WriteLine(this) 989453"];
12748 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989454"];
12749 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989455"];
12750 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989456"];
12751 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989457"];
12752 [label="WriteLine('<doc>'); 989458"];
12753 [label="WriteLine('<doc>') 989459"];
12754 [label="param WriteLine(string message) 989460"];
12755 [label="param WriteLine(this) 989461"];
12756 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989462"];
12757 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989463"];
12758 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989464"];
12759 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989465"];
12760 [label="Indent() 989466"];
12761 [label="param Indent(this) 989467"];
12762 [label="_indentDepth 989468"];
12763 [label="Indent(); 989469"];
12764 [label="_compilation.Options 989470"];
12765 [label="get\n            {\n                return _options;\n            } 989471"];
12766 [label="return _options; 989472"];
12767 [label="if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                } 989473"];
12768 [label="WriteLine('<assembly>'); 989474"];
12769 [label="WriteLine('<assembly>') 989475"];
12770 [label="param WriteLine(string message) 989476"];
12771 [label="param WriteLine(this) 989477"];
12772 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989478"];
12773 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989479"];
12774 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989480"];
12775 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989481"];
12776 [label="Indent() 989482"];
12777 [label="param Indent(this) 989483"];
12778 [label="_indentDepth 989484"];
12779 [label="Indent(); 989485"];
12780 [label="WriteLine('<name>{0}</name>', _assemblyName); 989486"];
12781 [label="WriteLine('<name>{0}</name>', _assemblyName) 989487"];
12782 [label="WriteLine('<name>{0}</name>', _assemblyName) 989488"];
12783 [label="param WriteLine(string format) 989489"];
12784 [label="param WriteLine(params object[] args) 989490"];
12785 [label="param WriteLine(this) 989491"];
12786 [label="WriteLine(string.Format(format, args)); 989492"];
12787 [label="WriteLine(string.Format(format, args)); 989493"];
12788 [label="WriteLine(string.Format(format, args)); 989494"];
12789 [label="WriteLine(string.Format(format, args)) 989495"];
12790 [label="param WriteLine(string message) 989496"];
12791 [label="param WriteLine(this) 989497"];
12792 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989498"];
12793 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989499"];
12794 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989500"];
12795 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989501"];
12796 [label="WriteLine(string.Format(format, args)); 989502"];
12797 [label="Unindent() 989503"];
12798 [label="param Unindent(this) 989504"];
12799 [label="_indentDepth 989505"];
12800 [label="Debug.Assert(_indentDepth >= 0); 989506"];
12801 [label="Debug.Assert(_indentDepth >= 0); 989507"];
12802 [label="Unindent(); 989508"];
12803 [label="WriteLine('</assembly>'); 989509"];
12804 [label="WriteLine('</assembly>') 989510"];
12805 [label="param WriteLine(string message) 989511"];
12806 [label="param WriteLine(this) 989512"];
12807 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989513"];
12808 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989514"];
12809 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989515"];
12810 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989516"];
12811 [label="WriteLine('<members>'); 989517"];
12812 [label="WriteLine('<members>') 989518"];
12813 [label="param WriteLine(string message) 989519"];
12814 [label="param WriteLine(this) 989520"];
12815 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989521"];
12816 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989522"];
12817 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989523"];
12818 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 989524"];
12819 [label="Indent() 989525"];
12820 [label="param Indent(this) 989526"];
12821 [label="_indentDepth 989527"];
12822 [label="Indent(); 989528"];
12823 [label="Debug.Assert(!_isForSingleSymbol); 989529"];
12824 [label="symbol.GetMembers() 989530"];
12825 [label="param GetMembers(this) 989531"];
12826 [label="if (_allMembers.IsDefault)\n            {\n                var builder = ArrayBuilder<Symbol>.GetInstance();\n                _cachedLookup.AddValues(builder);\n                _allMembers = builder.ToImmutableAndFree();\n            } 989532"];
12827 [label="return _allMembers; 989533"];
12828 [label="foreach (var s in symbol.GetMembers())\n            {\n                _cancellationToken.ThrowIfCancellationRequested();\n                s.Accept(this);\n            } 989534"];
12829 [label="_cancellationToken.ThrowIfCancellationRequested(); 989535"];
12830 [label="s.Accept(this); 989536"];
12831 [label="s.Accept(this) 989537"];
12832 [label="param Accept(CSharpSymbolVisitor visitor) 989538"];
12833 [label="_cancellationToken.ThrowIfCancellationRequested(); 989539"];
12834 [label="symbol.IsGlobalNamespace 989540"];
12835 [label="get\n            {\n                return false;\n            } 989541"];
12836 [label="return false; 989542"];
12837 [label="if (symbol.IsGlobalNamespace)\n            {\n                Debug.Assert(_assemblyName != null);\n\n                WriteLine('<?xml version=\\'1.0\\'?>');\n                WriteLine('<doc>');\n                Indent();\n\n                if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                }\n\n                WriteLine('<members>');\n                Indent();\n            } 989543"];
12838 [label="Debug.Assert(!_isForSingleSymbol); 989544"];
12839 [label="EnsureAllMembersLoaded() 989545"];
12840 [label="param EnsureAllMembersLoaded(this) 989546"];
12841 [label="var typesByNS = _typesByNS; 989547"];
12842 [label="if (lazyTypes == null || lazyNamespaces == null)\n            {\n                System.Diagnostics.Debug.Assert(typesByNS != null);\n                LoadAllMembers(typesByNS);\n                Interlocked.Exchange(ref _typesByNS, null);\n            } 989548"];
12843 [label="if (lazyTypes == null || lazyNamespaces == null)\n            {\n                System.Diagnostics.Debug.Assert(typesByNS != null);\n                LoadAllMembers(typesByNS);\n                Interlocked.Exchange(ref _typesByNS, null);\n            } 989549"];
12844 [label="EnsureAllMembersLoaded(); 989550"];
12845 [label="param Accept(CSharpSymbolVisitor visitor) 989551"];
12846 [label="param Accept(this) 989552"];
12847 [label="visitor.VisitNamedType(this); 989553"];
12848 [label="visitor.VisitNamedType(this) 989554"];
12849 [label="param VisitNamedType(NamedTypeSymbol symbol) 989555"];
12850 [label="param VisitNamedType(this) 989556"];
12851 [label="_cancellationToken.ThrowIfCancellationRequested(); 989557"];
12852 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 989558"];
12853 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 989559"];
12854 [label="DefaultVisit(symbol); 989560"];
12855 [label="DefaultVisit(symbol) 989561"];
12856 [label="param DefaultVisit(Symbol symbol) 989562"];
12857 [label="param DefaultVisit(this) 989563"];
12858 [label="_cancellationToken.ThrowIfCancellationRequested(); 989564"];
12859 [label="if (ShouldSkip(symbol))\n            {\n                return;\n            } 989565"];
12860 [label="ShouldSkip(symbol) 989566"];
12861 [label="param ShouldSkip(Symbol symbol) 989567"];
12862 [label="symbol.IsImplicitlyDeclared 989568"];
12863 [label="get { return false; } 989569"];
12864 [label="return false; 989570"];
12865 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 989571"];
12866 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 989572"];
12867 [label="symbol.IsAccessor() 989573"];
12868 [label="param IsAccessor(this Symbol symbol) 989574"];
12869 [label="symbol.Kind 989575"];
12870 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 989576"];
12871 [label="return symbol.Kind == SymbolKind.Method && IsAccessor((MethodSymbol)symbol); 989577"];
12872 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 989578"];
12873 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 989579"];
12874 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 989580"];
12875 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 989581"];
12876 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 989582"];
12877 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 989583"];
12878 [label="symbol.IsPartialDefinition() 989584"];
12879 [label="param IsPartialDefinition(this Symbol member) 989585"];
12880 [label="var sms = member as SourceOrdinaryMethodSymbol; 989586"];
12881 [label="return sms?.IsPartialDefinition == true; 989587"];
12882 [label="return sms?.IsPartialDefinition == true; 989588"];
12883 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 989589"];
12884 [label="DocumentationMode maxDocumentationMode; 989590"];
12885 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 989591"];
12886 [label="docCommentNodes 989592"];
12887 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 989593"];
12888 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 989594"];
12889 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 989595"];
12890 [label="TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes) 989596"];
12891 [label="param TryGetDocumentationCommentNodes(Symbol symbol) 989597"];
12892 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 989598"];
12893 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 989599"];
12894 [label="param TryGetDocumentationCommentNodes(this) 989600"];
12895 [label="maxDocumentationMode = DocumentationMode.None; 989601"];
12896 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 989602"];
12897 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 989603"];
12898 [label="symbol.DeclaringSyntaxReferences 989604"];
12899 [label="get\n            {\n                return ImmutableArray<SyntaxReference>.Empty;\n            } 989605"];
12900 [label="return ImmutableArray<SyntaxReference>.Empty; 989606"];
12901 [label="foreach (SyntaxReference reference in symbol.DeclaringSyntaxReferences)\n            {\n                DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode;\n                maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode;\n\n                ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics);\n                foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                }\n            } 989607"];
12902 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 989608"];
12903 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 989609"];
12904 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 989610"];
12905 [label="return true; 989611"];
12906 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 989612"];
12907 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 989613"];
12908 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 989614"];
12909 [label="return; 989615"];
12910 [label="DefaultVisit(symbol); 989616"];
12911 [label="if (!_isForSingleSymbol)\n            {\n                foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                }\n            } 989617"];
12912 [label="symbol.GetMembers() 989618"];
12913 [label="param GetMembers(this) 989619"];
12914 [label="EnsureAllMembersAreLoaded() 989620"];
12915 [label="param EnsureAllMembersAreLoaded(this) 989621"];
12916 [label="if (_lazyMembersByName == null)\n            {\n                LoadMembers();\n            } 989622"];
12917 [label="if (_lazyMembersByName == null)\n            {\n                LoadMembers();\n            } 989623"];
12918 [label="LoadMembers() 989624"];
12919 [label="param LoadMembers(this) 989625"];
12920 [label="ArrayBuilder<Symbol> members = null; 989626"];
12921 [label="if (_lazyMembersInDeclarationOrder.IsDefault)\n            {\n                EnsureNestedTypesAreLoaded();\n\n                members = ArrayBuilder<Symbol>.GetInstance();\n\n                Debug.Assert(SymbolKind.Field.ToSortOrder() < SymbolKind.Method.ToSortOrder());\n                Debug.Assert(SymbolKind.Method.ToSortOrder() < SymbolKind.Property.ToSortOrder());\n                Debug.Assert(SymbolKind.Property.ToSortOrder() < SymbolKind.Event.ToSortOrder());\n                Debug.Assert(SymbolKind.Event.ToSortOrder() < SymbolKind.NamedType.ToSortOrder());\n\n                if (this.TypeKind == TypeKind.Enum)\n                {\n                    EnsureEnumUnderlyingTypeIsLoaded(this.GetUncommonProperties());\n\n                    var moduleSymbol = this.ContainingPEModule;\n                    var module = moduleSymbol.Module;\n\n                    try\n                    {\n                        foreach (var fieldDef in module.GetFieldsOfTypeOrThrow(_handle))\n                        {\n                            FieldAttributes fieldFlags;\n\n                            try\n                            {\n                                fieldFlags = module.GetFieldDefFlagsOrThrow(fieldDef);\n                                if ((fieldFlags & FieldAttributes.Static) == 0)\n                                {\n                                    continue;\n                                }\n                            }\n                            catch (BadImageFormatException)\n                            {\n                                fieldFlags = 0;\n                            }\n\n                            if (ModuleExtensions.ShouldImportField(fieldFlags, moduleSymbol.ImportOptions))\n                            {\n                                var field = new PEFieldSymbol(moduleSymbol, this, fieldDef);\n                                members.Add(field);\n                            }\n                        }\n                    }\n                    catch (BadImageFormatException)\n                    { }\n\n                    var syntheticCtor = new SynthesizedInstanceConstructor(this);\n                    members.Add(syntheticCtor);\n                }\n                else\n                {\n                    ArrayBuilder<PEFieldSymbol> fieldMembers = ArrayBuilder<PEFieldSymbol>.GetInstance();\n                    ArrayBuilder<Symbol> nonFieldMembers = ArrayBuilder<Symbol>.GetInstance();\n\n                    MultiDictionary<string, PEFieldSymbol> privateFieldNameToSymbols = this.CreateFields(fieldMembers);\n\n                    // A method may be referenced as an accessor by one or more properties. And,\n                    // any of those properties may be 'bogus' if one of the property accessors\n                    // does not match the property signature. If the method is referenced by at\n                    // least one non-bogus property, then the method is created as an accessor,\n                    // and (for purposes of error reporting if the method is referenced directly) the\n                    // associated property is set (arbitrarily) to the first non-bogus property found\n                    // in metadata. If the method is not referenced by any non-bogus properties,\n                    // then the method is created as a normal method rather than an accessor.\n\n                    // Create a dictionary of method symbols indexed by metadata handle\n                    // (to allow efficient lookup when matching property accessors).\n                    PooledDictionary<MethodDefinitionHandle, PEMethodSymbol> methodHandleToSymbol = this.CreateMethods(nonFieldMembers);\n\n                    if (this.TypeKind == TypeKind.Struct)\n                    {\n                        bool haveParameterlessConstructor = false;\n                        foreach (MethodSymbol method in nonFieldMembers)\n                        {\n                            if (method.IsParameterlessConstructor())\n                            {\n                                haveParameterlessConstructor = true;\n                                break;\n                            }\n                        }\n\n                        // Structs have an implicit parameterless constructor, even if it\n                        // does not appear in metadata (11.3.8)\n                        if (!haveParameterlessConstructor)\n                        {\n                            nonFieldMembers.Insert(0, new SynthesizedInstanceConstructor(this));\n                        }\n                    }\n\n                    this.CreateProperties(methodHandleToSymbol, nonFieldMembers);\n                    this.CreateEvents(privateFieldNameToSymbols, methodHandleToSymbol, nonFieldMembers);\n\n                    foreach (PEFieldSymbol field in fieldMembers)\n                    {\n                        if ((object)field.AssociatedSymbol == null)\n                        {\n                            members.Add(field);\n                        }\n                        else\n                        {\n                            // As for source symbols, our public API presents the fiction that all\n                            // operations are performed on the event, rather than on the backing field.  \n                            // The backing field is not accessible through the API.  As an additional \n                            // bonus, lookup is easier when the names don't collide.\n                            Debug.Assert(field.AssociatedSymbol.Kind == SymbolKind.Event);\n                        }\n                    }\n\n                    members.AddRange(nonFieldMembers);\n\n                    nonFieldMembers.Free();\n                    fieldMembers.Free();\n\n                    methodHandleToSymbol.Free();\n                }\n\n                // Now add types to the end.\n                int membersCount = members.Count;\n\n                foreach (var typeArray in _lazyNestedTypes.Values)\n                {\n                    members.AddRange(typeArray);\n                }\n\n                // Sort the types based on row id.\n                members.Sort(membersCount, DeclarationOrderTypeSymbolComparer.Instance);\n\n#if DEBUG\n                Symbol previous = null;\n\n                foreach (var s in members)\n                {\n                    if (previous == null)\n                    {\n                        previous = s;\n                    }\n                    else\n                    {\n                        Symbol current = s;\n                        Debug.Assert(previous.Kind.ToSortOrder() <= current.Kind.ToSortOrder());\n                        previous = current;\n                    }\n                }\n#endif\n\n                if (IsTupleType)\n                {\n                    members = AddOrWrapTupleMembers(members.ToImmutableAndFree());\n                    Debug.Assert(members is object);\n                }\n\n                var membersInDeclarationOrder = members.ToImmutable();\n\n                if (!ImmutableInterlocked.InterlockedInitialize(ref _lazyMembersInDeclarationOrder, membersInDeclarationOrder))\n                {\n                    members.Free();\n                    members = null;\n                }\n                else\n                {\n                    // remove the types\n                    members.Clip(membersCount);\n                }\n            } 989627"];
12922 [label="EnsureNestedTypesAreLoaded() 989628"];
12923 [label="param EnsureNestedTypesAreLoaded(this) 989629"];
12924 [label="if (_lazyNestedTypes == null)\n            {\n                var types = ArrayBuilder<PENamedTypeSymbol>.GetInstance();\n                types.AddRange(this.CreateNestedTypes());\n                var typesDict = GroupByName(types);\n\n                var exchangeResult = Interlocked.CompareExchange(ref _lazyNestedTypes, typesDict, null);\n                if (exchangeResult == null)\n                {\n                    // Build cache of TypeDef Tokens\n                    // Potentially this can be done in the background.\n                    var moduleSymbol = this.ContainingPEModule;\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                }\n                types.Free();\n            } 989630"];
12925 [label="if (_lazyNestedTypes == null)\n            {\n                var types = ArrayBuilder<PENamedTypeSymbol>.GetInstance();\n                types.AddRange(this.CreateNestedTypes());\n                var typesDict = GroupByName(types);\n\n                var exchangeResult = Interlocked.CompareExchange(ref _lazyNestedTypes, typesDict, null);\n                if (exchangeResult == null)\n                {\n                    // Build cache of TypeDef Tokens\n                    // Potentially this can be done in the background.\n                    var moduleSymbol = this.ContainingPEModule;\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                }\n                types.Free();\n            } 989631"];
12926 [label="var types = ArrayBuilder<PENamedTypeSymbol>.GetInstance(); 989632"];
12927 [label="this.CreateNestedTypes() 989633"];
12928 [label="param CreateNestedTypes(this) 989634"];
12929 [label="this.ContainingPEModule 989635"];
12930 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 989636"];
12931 [label="Symbol s = _container; 989637"];
12932 [label="s.Kind 989638"];
12933 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 989639"];
12934 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 989640"];
12935 [label="((PENamespaceSymbol)s).ContainingPEModule 989641"];
12936 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 989642"];
12937 [label="_containingNamespaceSymbol.ContainingPEModule 989643"];
12938 [label="get\n            {\n                return _moduleSymbol;\n            } 989644"];
12939 [label="return _containingNamespaceSymbol.ContainingPEModule; 989645"];
12940 [label="return ((PENamespaceSymbol)s).ContainingPEModule; 989646"];
12941 [label="var moduleSymbol = this.ContainingPEModule; 989647"];
12942 [label="moduleSymbol.Module 989648"];
12943 [label="get\n            {\n                return _module;\n            } 989649"];
12944 [label="var module = moduleSymbol.Module; 989650"];
12945 [label="ImmutableArray<TypeDefinitionHandle> nestedTypeDefs; 989651"];
12946 [label="nestedTypeDefs 989652"];
12947 [label="nestedTypeDefs = module.GetNestedTypeDefsOrThrow(_handle); 989653"];
12948 [label="nestedTypeDefs = module.GetNestedTypeDefsOrThrow(_handle); 989654"];
12949 [label="foreach (var typeRid in nestedTypeDefs)\n            {\n                if (module.ShouldImportNestedType(typeRid))\n                {\n                    yield return PENamedTypeSymbol.Create(moduleSymbol, this, typeRid);\n                }\n            } 989655"];
12950 [label="param CreateNestedTypes(this) 989656"];
12951 [label="types.AddRange(this.CreateNestedTypes()); 989657"];
12952 [label="types.AddRange(this.CreateNestedTypes()); 989658"];
12953 [label="var typesDict = GroupByName(types); 989659"];
12954 [label="GroupByName(types) 989660"];
12955 [label="param GroupByName(ArrayBuilder<PENamedTypeSymbol> symbols) 989661"];
12956 [label="if (symbols.Count == 0)\n            {\n                return s_emptyNestedTypes;\n            } 989662"];
12957 [label="if (symbols.Count == 0)\n            {\n                return s_emptyNestedTypes;\n            } 989663"];
12958 [label="return s_emptyNestedTypes; 989664"];
12959 [label="var exchangeResult = Interlocked.CompareExchange(ref _lazyNestedTypes, typesDict, null); 989665"];
12960 [label="var exchangeResult = Interlocked.CompareExchange(ref _lazyNestedTypes, typesDict, null); 989666"];
12961 [label="var exchangeResult = Interlocked.CompareExchange(ref _lazyNestedTypes, typesDict, null); 989667"];
12962 [label="var exchangeResult = Interlocked.CompareExchange(ref _lazyNestedTypes, typesDict, null); 989668"];
12963 [label="if (exchangeResult == null)\n                {\n                    // Build cache of TypeDef Tokens\n                    // Potentially this can be done in the background.\n                    var moduleSymbol = this.ContainingPEModule;\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                } 989669"];
12964 [label="if (exchangeResult == null)\n                {\n                    // Build cache of TypeDef Tokens\n                    // Potentially this can be done in the background.\n                    var moduleSymbol = this.ContainingPEModule;\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                } 989670"];
12965 [label="this.ContainingPEModule 989671"];
12966 [label="s.Kind 989672"];
12967 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 989673"];
12968 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 989674"];
12969 [label="var moduleSymbol = this.ContainingPEModule; 989675"];
12970 [label="moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict); 989676"];
12971 [label="moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict) 989677"];
12972 [label="param OnNewTypeDeclarationsLoaded(Dictionary<string, ImmutableArray<PENamedTypeSymbol>> typesDict) 989678"];
12973 [label="param OnNewTypeDeclarationsLoaded(this) 989679"];
12974 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 989680"];
12975 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 989681"];
12976 [label="moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict); 989682"];
12977 [label="types.Free(); 989683"];
12978 [label="EnsureNestedTypesAreLoaded(); 989684"];
12979 [label="members = ArrayBuilder<Symbol>.GetInstance(); 989685"];
12980 [label="Debug.Assert(SymbolKind.Field.ToSortOrder() < SymbolKind.Method.ToSortOrder()); 989686"];
12981 [label="Debug.Assert(SymbolKind.Method.ToSortOrder() < SymbolKind.Property.ToSortOrder()); 989687"];
12982 [label="Debug.Assert(SymbolKind.Property.ToSortOrder() < SymbolKind.Event.ToSortOrder()); 989688"];
12983 [label="Debug.Assert(SymbolKind.Event.ToSortOrder() < SymbolKind.NamedType.ToSortOrder()); 989689"];
12984 [label="this.TypeKind 989690"];
12985 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 989691"];
12986 [label="TypeKind result = _lazyKind; 989692"];
12987 [label="if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                } 989693"];
12988 [label="if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    } 989694"];
12989 [label="TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true); 989695"];
12990 [label="GetDeclaredBaseType(skipTransformsIfNecessary: true) 989696"];
12991 [label="param GetDeclaredBaseType(bool skipTransformsIfNecessary) 989697"];
12992 [label="param GetDeclaredBaseType(this) 989698"];
12993 [label="if (ReferenceEquals(_lazyDeclaredBaseType, ErrorTypeSymbol.UnknownResultType))\n            {\n                var baseType = MakeDeclaredBaseType();\n                if (baseType is object)\n                {\n                    if (skipTransformsIfNecessary)\n                    {\n                        // If the transforms are not necessary, return early without updating the\n                        // base type field. This avoids cycles decoding nullability in particular.\n                        return baseType;\n                    }\n\n                    var moduleSymbol = ContainingPEModule;\n                    TypeSymbol decodedType = DynamicTypeDecoder.TransformType(baseType, 0, _handle, moduleSymbol);\n                    decodedType = NativeIntegerTypeDecoder.TransformType(decodedType, _handle, moduleSymbol);\n                    decodedType = TupleTypeDecoder.DecodeTupleTypesIfApplicable(decodedType, _handle, moduleSymbol);\n                    baseType = (NamedTypeSymbol)NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type;\n                }\n\n                Interlocked.CompareExchange(ref _lazyDeclaredBaseType, baseType, ErrorTypeSymbol.UnknownResultType);\n            } 989699"];
12994 [label="if (ReferenceEquals(_lazyDeclaredBaseType, ErrorTypeSymbol.UnknownResultType))\n            {\n                var baseType = MakeDeclaredBaseType();\n                if (baseType is object)\n                {\n                    if (skipTransformsIfNecessary)\n                    {\n                        // If the transforms are not necessary, return early without updating the\n                        // base type field. This avoids cycles decoding nullability in particular.\n                        return baseType;\n                    }\n\n                    var moduleSymbol = ContainingPEModule;\n                    TypeSymbol decodedType = DynamicTypeDecoder.TransformType(baseType, 0, _handle, moduleSymbol);\n                    decodedType = NativeIntegerTypeDecoder.TransformType(decodedType, _handle, moduleSymbol);\n                    decodedType = TupleTypeDecoder.DecodeTupleTypesIfApplicable(decodedType, _handle, moduleSymbol);\n                    baseType = (NamedTypeSymbol)NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type;\n                }\n\n                Interlocked.CompareExchange(ref _lazyDeclaredBaseType, baseType, ErrorTypeSymbol.UnknownResultType);\n            } 989700"];
12995 [label="MakeDeclaredBaseType() 989701"];
12996 [label="param MakeDeclaredBaseType(this) 989702"];
12997 [label="if (!_flags.IsInterface())\n            {\n                try\n                {\n                    var moduleSymbol = ContainingPEModule;\n                    EntityHandle token = moduleSymbol.Module.GetBaseTypeOfTypeOrThrow(_handle);\n                    if (!token.IsNil)\n                    {\n                        return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token);\n                    }\n                }\n                catch (BadImageFormatException mrEx)\n                {\n                    return new UnsupportedMetadataTypeSymbol(mrEx);\n                }\n            } 989703"];
12998 [label="ContainingPEModule 989704"];
12999 [label="s.Kind 989705"];
13000 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 989706"];
13001 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 989707"];
13002 [label="var moduleSymbol = ContainingPEModule; 989708"];
13003 [label="moduleSymbol.Module 989709"];
13004 [label="get\n            {\n                return _module;\n            } 989710"];
13005 [label="EntityHandle token = moduleSymbol.Module.GetBaseTypeOfTypeOrThrow(_handle); 989711"];
13006 [label="EntityHandle token = moduleSymbol.Module.GetBaseTypeOfTypeOrThrow(_handle); 989712"];
13007 [label="if (!token.IsNil)\n                    {\n                        return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token);\n                    } 989713"];
13008 [label="return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token); 989714"];
13009 [label="return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token); 989715"];
13010 [label="return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token); 989716"];
13011 [label="new MetadataDecoder(moduleSymbol, this) 989717"];
13012 [label="param MetadataDecoder(PEModuleSymbol moduleSymbol) 989718"];
13013 [label="param MetadataDecoder(PENamedTypeSymbol context) 989719"];
13014 [label="param MetadataDecoder(this) 989720"];
13015 [label="moduleSymbol 989721"];
13016 [label="context 989722"];
13017 [label="null 989723"];
13018 [label="param MetadataDecoder(this) 989724"];
13019 [label="param MetadataDecoder(PEModuleSymbol moduleSymbol) 989725"];
13020 [label="param MetadataDecoder(PENamedTypeSymbol typeContextOpt) 989726"];
13021 [label="param MetadataDecoder(PEMethodSymbol methodContextOpt) 989727"];
13022 [label="param MetadataDecoder(this) 989728"];
13023 [label="moduleSymbol.Module 989729"];
13024 [label="get\n            {\n                return _module;\n            } 989730"];
13025 [label="moduleSymbol.ContainingAssembly 989731"];
13026 [label="get\n            {\n                return _assemblySymbol;\n            } 989732"];
13027 [label="(moduleSymbol.ContainingAssembly is PEAssemblySymbol) 989733"];
13028 [label="null 989734"];
13029 [label="new SymbolFactory() 989735"];
13030 [label="param SymbolFactory(this) 989736"];
13031 [label="Instance = new SymbolFactory() 989737"];
13032 [label="SymbolFactory.Instance 989738"];
13033 [label="moduleSymbol 989739"];
13034 [label="param MetadataDecoder(this) 989740"];
13035 [label="param MetadataDecoder(this) 989741"];
13036 [label="_typeContextOpt 989742"];
13037 [label="_methodContextOpt 989743"];
13038 [label="Debug.Assert((object)moduleSymbol != null); 989744"];
13039 [label="Debug.Assert((object)moduleSymbol != null); 989745"];
13040 [label="_typeContextOpt 989746"];
13041 [label="_methodContextOpt 989747"];
13042 [label="return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token); 989748"];
13043 [label="return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token); 989749"];
13044 [label="param GetTypeRefHandleToTypeMap(this) 989750"];
13045 [label="return moduleSymbol.TypeRefHandleToTypeMap; 989751"];
13046 [label="param LookupTopLevelTypeDefSymbol(int referencedAssemblyIndex) 989752"];
13047 [label="param LookupTopLevelTypeDefSymbol(ref MetadataTypeName emittedName) 989753"];
13048 [label="param LookupTopLevelTypeDefSymbol(this) 989754"];
13049 [label="var assembly = moduleSymbol.GetReferencedAssemblySymbol(referencedAssemblyIndex); 989755"];
13050 [label="moduleSymbol.GetReferencedAssemblySymbol(referencedAssemblyIndex) 989756"];
13051 [label="param GetReferencedAssemblySymbol(int referencedAssemblyIndex) 989757"];
13052 [label="param GetReferencedAssemblySymbol(this) 989758"];
13053 [label="GetReferencedAssemblySymbols() 989759"];
13054 [label="param GetReferencedAssemblySymbols(this) 989760"];
13055 [label="AssertReferencesInitialized() 989761"];
13056 [label="param AssertReferencesInitialized(this) 989762"];
13057 [label="Debug.Assert(_moduleReferences != null); 989763"];
13058 [label="Debug.Assert(_moduleReferences != null); 989764"];
13059 [label="AssertReferencesInitialized(); 989765"];
13060 [label="var referencedAssemblies = GetReferencedAssemblySymbols(); 989766"];
13061 [label="if (referencedAssemblyIndex < referencedAssemblies.Length)\n            {\n                return referencedAssemblies[referencedAssemblyIndex];\n            } 989767"];
13062 [label="return referencedAssemblies[referencedAssemblyIndex]; 989768"];
13063 [label="if ((object)assembly == null)\n            {\n                return new UnsupportedMetadataTypeSymbol();\n            } 989769"];
13064 [label="if ((object)assembly == null)\n            {\n                return new UnsupportedMetadataTypeSymbol();\n            } 989770"];
13065 [label="return assembly.LookupTopLevelMetadataType(ref emittedName, digThroughForwardedTypes: true); 989771"];
13066 [label="return assembly.LookupTopLevelMetadataType(ref emittedName, digThroughForwardedTypes: true); 989772"];
13067 [label="assembly.LookupTopLevelMetadataType(ref emittedName, digThroughForwardedTypes: true) 989773"];
13068 [label="param LookupTopLevelMetadataType(ref MetadataTypeName emittedName) 989774"];
13069 [label="param LookupTopLevelMetadataType(bool digThroughForwardedTypes) 989775"];
13070 [label="param LookupTopLevelMetadataType(this) 989776"];
13071 [label="param LookupTopLevelMetadataTypeWithCycleDetection(ref MetadataTypeName emittedName) 989777"];
13072 [label="param LookupTopLevelMetadataTypeWithCycleDetection(ConsList<AssemblySymbol> visitedAssemblies) 989778"];
13073 [label="param LookupTopLevelMetadataTypeWithCycleDetection(bool digThroughForwardedTypes) 989779"];
13074 [label="param LookupTopLevelMetadataTypeWithCycleDetection(this) 989780"];
13075 [label="var result = this.moduleSymbol.LookupTopLevelMetadataType(ref emittedName); 989781"];
13076 [label="this.moduleSymbol.LookupTopLevelMetadataType(ref emittedName) 989782"];
13077 [label="param LookupTopLevelMetadataType(ref MetadataTypeName emittedName) 989783"];
13078 [label="param LookupTopLevelMetadataType(this) 989784"];
13079 [label="return new MissingMetadataTypeSymbol.TopLevel(this, ref emittedName); 989785"];
13080 [label="return new MissingMetadataTypeSymbol.TopLevel(this, ref emittedName); 989786"];
13081 [label="return new MissingMetadataTypeSymbol.TopLevel(this, ref emittedName); 989787"];
13082 [label="new MissingMetadataTypeSymbol.TopLevel(this, ref emittedName) 989788"];
13083 [label="param TopLevel(ModuleSymbol module) 989789"];
13084 [label="param TopLevel(ref MetadataTypeName fullName) 989790"];
13085 [label="param TopLevel(DiagnosticInfo? errorInfo = null) 989791"];
13086 [label="param TopLevel(this) 989792"];
13087 [label="module 989793"];
13088 [label="1 989794"];
13089 [label="errorInfo 989795"];
13090 [label="fullName.ForcedArity == -1 989796"];
13091 [label="fullName.NamespaceName 989797"];
13092 [label="_lazyTupleData 989798"];
13093 [label="name 989799"];
13094 [label="arity 989800"];
13095 [label="mangleName 989801"];
13096 [label="RoslynDebug.Assert(name != null); 989802"];
13097 [label="RoslynDebug.Assert(name != null); 989803"];
13098 [label="_namespaceName 989804"];
13099 [label="_containingModule 989805"];
13100 [label="_isNativeInt 989806"];
13101 [label="_lazyErrorInfo 989807"];
13102 [label="_lazyContainingNamespace 989808"];
13103 [label="_lazyTypeId 989809"];
13104 [label="RoslynDebug.Assert((object)module != null); 989810"];
13105 [label="RoslynDebug.Assert((object)module != null); 989811"];
13106 [label="RoslynDebug.Assert(@namespace != null); 989812"];
13107 [label="RoslynDebug.Assert(@namespace != null); 989813"];
13108 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 989814"];
13109 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 989815"];
13110 [label="_lazyTypeId 989816"];
13111 [label="var result = this.moduleSymbol.LookupTopLevelMetadataType(ref emittedName); 989817"];
13112 [label="Debug.Assert(result is MissingMetadataTypeSymbol); 989818"];
13113 [label="return result; 989819"];
13114 [label="return assembly.LookupTopLevelMetadataType(ref emittedName, digThroughForwardedTypes: true); 989820"];
13115 [label="return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token); 989821"];
13116 [label="param Equals(ISymbolInternal other) 989822"];
13117 [label="param Equals(TypeCompareKind compareKind) 989823"];
13118 [label="param Equals(this) 989824"];
13119 [label="return this.Equals(other as Symbol, compareKind); 989825"];
13120 [label="return this.Equals(other as Symbol, compareKind); 989826"];
13121 [label="this.Equals(other as Symbol, compareKind) 989827"];
13122 [label="param Equals(Symbol other) 989828"];
13123 [label="param Equals(TypeCompareKind compareKind) 989829"];
13124 [label="param Equals(this) 989830"];
13125 [label="var t2 = other as TypeSymbol; 989831"];
13126 [label="if (t2 is null)\n            {\n                return false;\n            } 989832"];
13127 [label="return this.Equals(t2, compareKind); 989833"];
13128 [label="return this.Equals(t2, compareKind); 989834"];
13129 [label="this.Equals(t2, compareKind) 989835"];
13130 [label="param Equals(TypeSymbol t2) 989836"];
13131 [label="param Equals(TypeCompareKind comparison) 989837"];
13132 [label="param Equals(this) 989838"];
13133 [label="if (ReferenceEquals(this, t2))\n                {\n                    return true;\n                } 989839"];
13134 [label="if (ReferenceEquals(this, t2))\n                {\n                    return true;\n                } 989840"];
13135 [label="if (ReferenceEquals(this, t2))\n                {\n                    return true;\n                } 989841"];
13136 [label="return true; 989842"];
13137 [label="return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token); 989843"];
13138 [label="var baseType = MakeDeclaredBaseType(); 989844"];
13139 [label="if (baseType is object)\n                {\n                    if (skipTransformsIfNecessary)\n                    {\n                        // If the transforms are not necessary, return early without updating the\n                        // base type field. This avoids cycles decoding nullability in particular.\n                        return baseType;\n                    }\n\n                    var moduleSymbol = ContainingPEModule;\n                    TypeSymbol decodedType = DynamicTypeDecoder.TransformType(baseType, 0, _handle, moduleSymbol);\n                    decodedType = NativeIntegerTypeDecoder.TransformType(decodedType, _handle, moduleSymbol);\n                    decodedType = TupleTypeDecoder.DecodeTupleTypesIfApplicable(decodedType, _handle, moduleSymbol);\n                    baseType = (NamedTypeSymbol)NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type;\n                } 989845"];
13140 [label="if (skipTransformsIfNecessary)\n                    {\n                        // If the transforms are not necessary, return early without updating the\n                        // base type field. This avoids cycles decoding nullability in particular.\n                        return baseType;\n                    } 989846"];
13141 [label="return baseType; 989847"];
13142 [label="result = TypeKind.Class; 989848"];
13143 [label="if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        } 989849"];
13144 [label="if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        } 989850"];
13145 [label="@base.SpecialType 989851"];
13146 [label="get\n                {\n                    int typeId = TypeId;\n                    return (typeId >= (int)WellKnownType.First) ? SpecialType.None : (SpecialType)_lazyTypeId;\n                } 989852"];
13147 [label="TypeId 989853"];
13148 [label="get\n                {\n                    if (_lazyTypeId == -1)\n                    {\n                        SpecialType typeId = SpecialType.None;\n\n                        AssemblySymbol containingAssembly = _containingModule.ContainingAssembly;\n\n                        if ((Arity == 0 || MangleName) && (object)containingAssembly != null && ReferenceEquals(containingAssembly, containingAssembly.CorLibrary) && _containingModule.Ordinal == 0)\n                        {\n                            // Check the name \n                            string emittedName = MetadataHelpers.BuildQualifiedName(_namespaceName, MetadataName);\n                            typeId = SpecialTypes.GetTypeFromMetadataName(emittedName);\n                        }\n\n                        Interlocked.CompareExchange(ref _lazyTypeId, (int)typeId, -1);\n                    }\n\n                    return _lazyTypeId;\n                } 989854"];
13149 [label="if (_lazyTypeId == -1)\n                    {\n                        SpecialType typeId = SpecialType.None;\n\n                        AssemblySymbol containingAssembly = _containingModule.ContainingAssembly;\n\n                        if ((Arity == 0 || MangleName) && (object)containingAssembly != null && ReferenceEquals(containingAssembly, containingAssembly.CorLibrary) && _containingModule.Ordinal == 0)\n                        {\n                            // Check the name \n                            string emittedName = MetadataHelpers.BuildQualifiedName(_namespaceName, MetadataName);\n                            typeId = SpecialTypes.GetTypeFromMetadataName(emittedName);\n                        }\n\n                        Interlocked.CompareExchange(ref _lazyTypeId, (int)typeId, -1);\n                    } 989855"];
13150 [label="if (_lazyTypeId == -1)\n                    {\n                        SpecialType typeId = SpecialType.None;\n\n                        AssemblySymbol containingAssembly = _containingModule.ContainingAssembly;\n\n                        if ((Arity == 0 || MangleName) && (object)containingAssembly != null && ReferenceEquals(containingAssembly, containingAssembly.CorLibrary) && _containingModule.Ordinal == 0)\n                        {\n                            // Check the name \n                            string emittedName = MetadataHelpers.BuildQualifiedName(_namespaceName, MetadataName);\n                            typeId = SpecialTypes.GetTypeFromMetadataName(emittedName);\n                        }\n\n                        Interlocked.CompareExchange(ref _lazyTypeId, (int)typeId, -1);\n                    } 989856"];
13151 [label="SpecialType typeId = SpecialType.None; 989857"];
13152 [label="_containingModule.ContainingAssembly 989858"];
13153 [label="get\n            {\n                return assembly;\n            } 989859"];
13154 [label="return assembly; 989860"];
13155 [label="AssemblySymbol containingAssembly = _containingModule.ContainingAssembly; 989861"];
13156 [label="Arity 989862"];
13157 [label="get { return arity; } 989863"];
13158 [label="return arity; 989864"];
13159 [label="if ((Arity == 0 || MangleName) && (object)containingAssembly != null && ReferenceEquals(containingAssembly, containingAssembly.CorLibrary) && _containingModule.Ordinal == 0)\n                        {\n                            // Check the name \n                            string emittedName = MetadataHelpers.BuildQualifiedName(_namespaceName, MetadataName);\n                            typeId = SpecialTypes.GetTypeFromMetadataName(emittedName);\n                        } 989865"];
13160 [label="if ((Arity == 0 || MangleName) && (object)containingAssembly != null && ReferenceEquals(containingAssembly, containingAssembly.CorLibrary) && _containingModule.Ordinal == 0)\n                        {\n                            // Check the name \n                            string emittedName = MetadataHelpers.BuildQualifiedName(_namespaceName, MetadataName);\n                            typeId = SpecialTypes.GetTypeFromMetadataName(emittedName);\n                        } 989866"];
13161 [label="if ((Arity == 0 || MangleName) && (object)containingAssembly != null && ReferenceEquals(containingAssembly, containingAssembly.CorLibrary) && _containingModule.Ordinal == 0)\n                        {\n                            // Check the name \n                            string emittedName = MetadataHelpers.BuildQualifiedName(_namespaceName, MetadataName);\n                            typeId = SpecialTypes.GetTypeFromMetadataName(emittedName);\n                        } 989867"];
13162 [label="if ((Arity == 0 || MangleName) && (object)containingAssembly != null && ReferenceEquals(containingAssembly, containingAssembly.CorLibrary) && _containingModule.Ordinal == 0)\n                        {\n                            // Check the name \n                            string emittedName = MetadataHelpers.BuildQualifiedName(_namespaceName, MetadataName);\n                            typeId = SpecialTypes.GetTypeFromMetadataName(emittedName);\n                        } 989868"];
13163 [label="if ((Arity == 0 || MangleName) && (object)containingAssembly != null && ReferenceEquals(containingAssembly, containingAssembly.CorLibrary) && _containingModule.Ordinal == 0)\n                        {\n                            // Check the name \n                            string emittedName = MetadataHelpers.BuildQualifiedName(_namespaceName, MetadataName);\n                            typeId = SpecialTypes.GetTypeFromMetadataName(emittedName);\n                        } 989869"];
13164 [label="containingAssembly.CorLibrary 989870"];
13165 [label="get\n            {\n                return _corLibrary;\n            } 989871"];
13166 [label="if ((Arity == 0 || MangleName) && (object)containingAssembly != null && ReferenceEquals(containingAssembly, containingAssembly.CorLibrary) && _containingModule.Ordinal == 0)\n                        {\n                            // Check the name \n                            string emittedName = MetadataHelpers.BuildQualifiedName(_namespaceName, MetadataName);\n                            typeId = SpecialTypes.GetTypeFromMetadataName(emittedName);\n                        } 989872"];
13167 [label="if ((Arity == 0 || MangleName) && (object)containingAssembly != null && ReferenceEquals(containingAssembly, containingAssembly.CorLibrary) && _containingModule.Ordinal == 0)\n                        {\n                            // Check the name \n                            string emittedName = MetadataHelpers.BuildQualifiedName(_namespaceName, MetadataName);\n                            typeId = SpecialTypes.GetTypeFromMetadataName(emittedName);\n                        } 989873"];
13168 [label="Interlocked.CompareExchange(ref _lazyTypeId, (int)typeId, -1); 989874"];
13169 [label="Interlocked.CompareExchange(ref _lazyTypeId, (int)typeId, -1); 989875"];
13170 [label="Interlocked.CompareExchange(ref _lazyTypeId, (int)typeId, -1); 989876"];
13171 [label="return _lazyTypeId; 989877"];
13172 [label="int typeId = TypeId; 989878"];
13173 [label="return (typeId >= (int)WellKnownType.First) ? SpecialType.None : (SpecialType)_lazyTypeId; 989879"];
13174 [label="(typeId >= (int)WellKnownType.First) 989880"];
13175 [label="_lazyTypeId 989881"];
13176 [label="SpecialType baseCorTypeId = @base.SpecialType; 989882"];
13177 [label="switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            } 989883"];
13178 [label="_lazyKind 989884"];
13179 [label="return result; 989885"];
13180 [label="if (this.TypeKind == TypeKind.Enum)\n                {\n                    EnsureEnumUnderlyingTypeIsLoaded(this.GetUncommonProperties());\n\n                    var moduleSymbol = this.ContainingPEModule;\n                    var module = moduleSymbol.Module;\n\n                    try\n                    {\n                        foreach (var fieldDef in module.GetFieldsOfTypeOrThrow(_handle))\n                        {\n                            FieldAttributes fieldFlags;\n\n                            try\n                            {\n                                fieldFlags = module.GetFieldDefFlagsOrThrow(fieldDef);\n                                if ((fieldFlags & FieldAttributes.Static) == 0)\n                                {\n                                    continue;\n                                }\n                            }\n                            catch (BadImageFormatException)\n                            {\n                                fieldFlags = 0;\n                            }\n\n                            if (ModuleExtensions.ShouldImportField(fieldFlags, moduleSymbol.ImportOptions))\n                            {\n                                var field = new PEFieldSymbol(moduleSymbol, this, fieldDef);\n                                members.Add(field);\n                            }\n                        }\n                    }\n                    catch (BadImageFormatException)\n                    { }\n\n                    var syntheticCtor = new SynthesizedInstanceConstructor(this);\n                    members.Add(syntheticCtor);\n                }\n                else\n                {\n                    ArrayBuilder<PEFieldSymbol> fieldMembers = ArrayBuilder<PEFieldSymbol>.GetInstance();\n                    ArrayBuilder<Symbol> nonFieldMembers = ArrayBuilder<Symbol>.GetInstance();\n\n                    MultiDictionary<string, PEFieldSymbol> privateFieldNameToSymbols = this.CreateFields(fieldMembers);\n\n                    // A method may be referenced as an accessor by one or more properties. And,\n                    // any of those properties may be 'bogus' if one of the property accessors\n                    // does not match the property signature. If the method is referenced by at\n                    // least one non-bogus property, then the method is created as an accessor,\n                    // and (for purposes of error reporting if the method is referenced directly) the\n                    // associated property is set (arbitrarily) to the first non-bogus property found\n                    // in metadata. If the method is not referenced by any non-bogus properties,\n                    // then the method is created as a normal method rather than an accessor.\n\n                    // Create a dictionary of method symbols indexed by metadata handle\n                    // (to allow efficient lookup when matching property accessors).\n                    PooledDictionary<MethodDefinitionHandle, PEMethodSymbol> methodHandleToSymbol = this.CreateMethods(nonFieldMembers);\n\n                    if (this.TypeKind == TypeKind.Struct)\n                    {\n                        bool haveParameterlessConstructor = false;\n                        foreach (MethodSymbol method in nonFieldMembers)\n                        {\n                            if (method.IsParameterlessConstructor())\n                            {\n                                haveParameterlessConstructor = true;\n                                break;\n                            }\n                        }\n\n                        // Structs have an implicit parameterless constructor, even if it\n                        // does not appear in metadata (11.3.8)\n                        if (!haveParameterlessConstructor)\n                        {\n                            nonFieldMembers.Insert(0, new SynthesizedInstanceConstructor(this));\n                        }\n                    }\n\n                    this.CreateProperties(methodHandleToSymbol, nonFieldMembers);\n                    this.CreateEvents(privateFieldNameToSymbols, methodHandleToSymbol, nonFieldMembers);\n\n                    foreach (PEFieldSymbol field in fieldMembers)\n                    {\n                        if ((object)field.AssociatedSymbol == null)\n                        {\n                            members.Add(field);\n                        }\n                        else\n                        {\n                            // As for source symbols, our public API presents the fiction that all\n                            // operations are performed on the event, rather than on the backing field.  \n                            // The backing field is not accessible through the API.  As an additional \n                            // bonus, lookup is easier when the names don't collide.\n                            Debug.Assert(field.AssociatedSymbol.Kind == SymbolKind.Event);\n                        }\n                    }\n\n                    members.AddRange(nonFieldMembers);\n\n                    nonFieldMembers.Free();\n                    fieldMembers.Free();\n\n                    methodHandleToSymbol.Free();\n                } 989886"];
13181 [label="ArrayBuilder<PEFieldSymbol> fieldMembers = ArrayBuilder<PEFieldSymbol>.GetInstance(); 989887"];
13182 [label="ArrayBuilder<Symbol> nonFieldMembers = ArrayBuilder<Symbol>.GetInstance(); 989888"];
13183 [label="MultiDictionary<string, PEFieldSymbol> privateFieldNameToSymbols = this.CreateFields(fieldMembers); 989889"];
13184 [label="this.CreateFields(fieldMembers) 989890"];
13185 [label="param CreateFields(ArrayBuilder<PEFieldSymbol> fieldMembers) 989891"];
13186 [label="param CreateFields(this) 989892"];
13187 [label="var privateFieldNameToSymbols = new MultiDictionary<string, PEFieldSymbol>(); 989893"];
13188 [label="this.ContainingPEModule 989894"];
13189 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 989895"];
13190 [label="Symbol s = _container; 989896"];
13191 [label="s.Kind 989897"];
13192 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 989898"];
13193 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 989899"];
13194 [label="var moduleSymbol = this.ContainingPEModule; 989900"];
13195 [label="moduleSymbol.Module 989901"];
13196 [label="get\n            {\n                return _module;\n            } 989902"];
13197 [label="var module = moduleSymbol.Module; 989903"];
13198 [label="var isOrdinaryStruct = false; 989904"];
13199 [label="var isOrdinaryEmbeddableStruct = false; 989905"];
13200 [label="this.TypeKind 989906"];
13201 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 989907"];
13202 [label="TypeKind result = _lazyKind; 989908"];
13203 [label="if (this.TypeKind == TypeKind.Struct)\n            {\n                if (this.SpecialType == Microsoft.CodeAnalysis.SpecialType.None)\n                {\n                    isOrdinaryStruct = true;\n                    isOrdinaryEmbeddableStruct = this.ContainingAssembly.IsLinked;\n                }\n                else\n                {\n                    isOrdinaryStruct = (this.SpecialType == Microsoft.CodeAnalysis.SpecialType.System_Nullable_T);\n                }\n            } 989909"];
13204 [label="foreach (var fieldRid in module.GetFieldsOfTypeOrThrow(_handle))\n                {\n                    try\n                    {\n                        if (!(isOrdinaryEmbeddableStruct ||\n                            (isOrdinaryStruct && (module.GetFieldDefFlagsOrThrow(fieldRid) & FieldAttributes.Static) == 0) ||\n                            module.ShouldImportField(fieldRid, moduleSymbol.ImportOptions)))\n                        {\n                            continue;\n                        }\n                    }\n                    catch (BadImageFormatException)\n                    { }\n\n                    var symbol = new PEFieldSymbol(moduleSymbol, this, fieldRid);\n                    fieldMembers.Add(symbol);\n\n                    // Only private fields are potentially backing fields for field-like events.\n                    if (symbol.DeclaredAccessibility == Accessibility.Private)\n                    {\n                        var name = symbol.Name;\n                        if (name.Length > 0)\n                        {\n                            privateFieldNameToSymbols.Add(name, symbol);\n                        }\n                    }\n                } 989910"];
13205 [label="foreach (var fieldRid in module.GetFieldsOfTypeOrThrow(_handle))\n                {\n                    try\n                    {\n                        if (!(isOrdinaryEmbeddableStruct ||\n                            (isOrdinaryStruct && (module.GetFieldDefFlagsOrThrow(fieldRid) & FieldAttributes.Static) == 0) ||\n                            module.ShouldImportField(fieldRid, moduleSymbol.ImportOptions)))\n                        {\n                            continue;\n                        }\n                    }\n                    catch (BadImageFormatException)\n                    { }\n\n                    var symbol = new PEFieldSymbol(moduleSymbol, this, fieldRid);\n                    fieldMembers.Add(symbol);\n\n                    // Only private fields are potentially backing fields for field-like events.\n                    if (symbol.DeclaredAccessibility == Accessibility.Private)\n                    {\n                        var name = symbol.Name;\n                        if (name.Length > 0)\n                        {\n                            privateFieldNameToSymbols.Add(name, symbol);\n                        }\n                    }\n                } 989911"];
13206 [label="return privateFieldNameToSymbols; 989912"];
13207 [label="MultiDictionary<string, PEFieldSymbol> privateFieldNameToSymbols = this.CreateFields(fieldMembers); 989913"];
13208 [label="PooledDictionary<MethodDefinitionHandle, PEMethodSymbol> methodHandleToSymbol = this.CreateMethods(nonFieldMembers); 989914"];
13209 [label="this.CreateMethods(nonFieldMembers) 989915"];
13210 [label="param CreateMethods(ArrayBuilder<Symbol> members) 989916"];
13211 [label="param CreateMethods(this) 989917"];
13212 [label="this.ContainingPEModule 989918"];
13213 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 989919"];
13214 [label="Symbol s = _container; 989920"];
13215 [label="s.Kind 989921"];
13216 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 989922"];
13217 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 989923"];
13218 [label="var moduleSymbol = this.ContainingPEModule; 989924"];
13219 [label="moduleSymbol.Module 989925"];
13220 [label="get\n            {\n                return _module;\n            } 989926"];
13221 [label="var module = moduleSymbol.Module; 989927"];
13222 [label="var map = PooledDictionary<MethodDefinitionHandle, PEMethodSymbol>.GetInstance(); 989928"];
13223 [label="this.TypeKind 989929"];
13224 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 989930"];
13225 [label="TypeKind result = _lazyKind; 989931"];
13226 [label="var isOrdinaryEmbeddableStruct = (this.TypeKind == TypeKind.Struct) && (this.SpecialType == Microsoft.CodeAnalysis.SpecialType.None) && this.ContainingAssembly.IsLinked; 989932"];
13227 [label="foreach (var methodHandle in module.GetMethodsOfTypeOrThrow(_handle))\n                {\n                    if (isOrdinaryEmbeddableStruct || module.ShouldImportMethod(methodHandle, moduleSymbol.ImportOptions))\n                    {\n                        var method = new PEMethodSymbol(moduleSymbol, this, methodHandle);\n                        members.Add(method);\n                        map.Add(methodHandle, method);\n                    }\n                } 989933"];
13228 [label="foreach (var methodHandle in module.GetMethodsOfTypeOrThrow(_handle))\n                {\n                    if (isOrdinaryEmbeddableStruct || module.ShouldImportMethod(methodHandle, moduleSymbol.ImportOptions))\n                    {\n                        var method = new PEMethodSymbol(moduleSymbol, this, methodHandle);\n                        members.Add(method);\n                        map.Add(methodHandle, method);\n                    }\n                } 989934"];
13229 [label="return map; 989935"];
13230 [label="PooledDictionary<MethodDefinitionHandle, PEMethodSymbol> methodHandleToSymbol = this.CreateMethods(nonFieldMembers); 989936"];
13231 [label="this.TypeKind 989937"];
13232 [label="TypeKind result = _lazyKind; 989938"];
13233 [label="if (this.TypeKind == TypeKind.Struct)\n                    {\n                        bool haveParameterlessConstructor = false;\n                        foreach (MethodSymbol method in nonFieldMembers)\n                        {\n                            if (method.IsParameterlessConstructor())\n                            {\n                                haveParameterlessConstructor = true;\n                                break;\n                            }\n                        }\n\n                        // Structs have an implicit parameterless constructor, even if it\n                        // does not appear in metadata (11.3.8)\n                        if (!haveParameterlessConstructor)\n                        {\n                            nonFieldMembers.Insert(0, new SynthesizedInstanceConstructor(this));\n                        }\n                    } 989939"];
13234 [label="this.CreateProperties(methodHandleToSymbol, nonFieldMembers); 989940"];
13235 [label="this.CreateProperties(methodHandleToSymbol, nonFieldMembers); 989941"];
13236 [label="this.CreateProperties(methodHandleToSymbol, nonFieldMembers) 989942"];
13237 [label="param CreateProperties(Dictionary<MethodDefinitionHandle, PEMethodSymbol> methodHandleToSymbol) 989943"];
13238 [label="param CreateProperties(ArrayBuilder<Symbol> members) 989944"];
13239 [label="param CreateProperties(this) 989945"];
13240 [label="this.ContainingPEModule 989946"];
13241 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 989947"];
13242 [label="Symbol s = _container; 989948"];
13243 [label="s.Kind 989949"];
13244 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 989950"];
13245 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 989951"];
13246 [label="var moduleSymbol = this.ContainingPEModule; 989952"];
13247 [label="moduleSymbol.Module 989953"];
13248 [label="get\n            {\n                return _module;\n            } 989954"];
13249 [label="var module = moduleSymbol.Module; 989955"];
13250 [label="foreach (var propertyDef in module.GetPropertiesOfTypeOrThrow(_handle))\n                {\n                    try\n                    {\n                        var methods = module.GetPropertyMethodsOrThrow(propertyDef);\n\n                        PEMethodSymbol getMethod = GetAccessorMethod(module, methodHandleToSymbol, methods.Getter);\n                        PEMethodSymbol setMethod = GetAccessorMethod(module, methodHandleToSymbol, methods.Setter);\n\n                        if (((object)getMethod != null) || ((object)setMethod != null))\n                        {\n                            members.Add(PEPropertySymbol.Create(moduleSymbol, this, propertyDef, getMethod, setMethod));\n                        }\n                    }\n                    catch (BadImageFormatException)\n                    { }\n                } 989956"];
13251 [label="foreach (var propertyDef in module.GetPropertiesOfTypeOrThrow(_handle))\n                {\n                    try\n                    {\n                        var methods = module.GetPropertyMethodsOrThrow(propertyDef);\n\n                        PEMethodSymbol getMethod = GetAccessorMethod(module, methodHandleToSymbol, methods.Getter);\n                        PEMethodSymbol setMethod = GetAccessorMethod(module, methodHandleToSymbol, methods.Setter);\n\n                        if (((object)getMethod != null) || ((object)setMethod != null))\n                        {\n                            members.Add(PEPropertySymbol.Create(moduleSymbol, this, propertyDef, getMethod, setMethod));\n                        }\n                    }\n                    catch (BadImageFormatException)\n                    { }\n                } 989957"];
13252 [label="this.CreateProperties(methodHandleToSymbol, nonFieldMembers); 989958"];
13253 [label="this.CreateEvents(privateFieldNameToSymbols, methodHandleToSymbol, nonFieldMembers); 989959"];
13254 [label="this.CreateEvents(privateFieldNameToSymbols, methodHandleToSymbol, nonFieldMembers); 989960"];
13255 [label="this.CreateEvents(privateFieldNameToSymbols, methodHandleToSymbol, nonFieldMembers); 989961"];
13256 [label="this.CreateEvents(privateFieldNameToSymbols, methodHandleToSymbol, nonFieldMembers) 989962"];
13257 [label="param CreateEvents(MultiDictionary<string, PEFieldSymbol> privateFieldNameToSymbols) 989963"];
13258 [label="param CreateEvents(Dictionary<MethodDefinitionHandle, PEMethodSymbol> methodHandleToSymbol) 989964"];
13259 [label="param CreateEvents(ArrayBuilder<Symbol> members) 989965"];
13260 [label="param CreateEvents(this) 989966"];
13261 [label="this.ContainingPEModule 989967"];
13262 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 989968"];
13263 [label="Symbol s = _container; 989969"];
13264 [label="s.Kind 989970"];
13265 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 989971"];
13266 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 989972"];
13267 [label="var moduleSymbol = this.ContainingPEModule; 989973"];
13268 [label="moduleSymbol.Module 989974"];
13269 [label="get\n            {\n                return _module;\n            } 989975"];
13270 [label="var module = moduleSymbol.Module; 989976"];
13271 [label="foreach (var eventRid in module.GetEventsOfTypeOrThrow(_handle))\n                {\n                    try\n                    {\n                        var methods = module.GetEventMethodsOrThrow(eventRid);\n\n                        // NOTE: C# ignores all other accessors (most notably, raise/fire).\n                        PEMethodSymbol addMethod = GetAccessorMethod(module, methodHandleToSymbol, methods.Adder);\n                        PEMethodSymbol removeMethod = GetAccessorMethod(module, methodHandleToSymbol, methods.Remover);\n\n                        // NOTE: both accessors are required, but that will be reported separately.\n                        // Create the symbol unless both accessors are missing.\n                        if (((object)addMethod != null) || ((object)removeMethod != null))\n                        {\n                            members.Add(new PEEventSymbol(moduleSymbol, this, eventRid, addMethod, removeMethod, privateFieldNameToSymbols));\n                        }\n                    }\n                    catch (BadImageFormatException)\n                    { }\n                } 989977"];
13272 [label="foreach (var eventRid in module.GetEventsOfTypeOrThrow(_handle))\n                {\n                    try\n                    {\n                        var methods = module.GetEventMethodsOrThrow(eventRid);\n\n                        // NOTE: C# ignores all other accessors (most notably, raise/fire).\n                        PEMethodSymbol addMethod = GetAccessorMethod(module, methodHandleToSymbol, methods.Adder);\n                        PEMethodSymbol removeMethod = GetAccessorMethod(module, methodHandleToSymbol, methods.Remover);\n\n                        // NOTE: both accessors are required, but that will be reported separately.\n                        // Create the symbol unless both accessors are missing.\n                        if (((object)addMethod != null) || ((object)removeMethod != null))\n                        {\n                            members.Add(new PEEventSymbol(moduleSymbol, this, eventRid, addMethod, removeMethod, privateFieldNameToSymbols));\n                        }\n                    }\n                    catch (BadImageFormatException)\n                    { }\n                } 989978"];
13273 [label="this.CreateEvents(privateFieldNameToSymbols, methodHandleToSymbol, nonFieldMembers); 989979"];
13274 [label="foreach (PEFieldSymbol field in fieldMembers)\n                    {\n                        if ((object)field.AssociatedSymbol == null)\n                        {\n                            members.Add(field);\n                        }\n                        else\n                        {\n                            // As for source symbols, our public API presents the fiction that all\n                            // operations are performed on the event, rather than on the backing field.  \n                            // The backing field is not accessible through the API.  As an additional \n                            // bonus, lookup is easier when the names don't collide.\n                            Debug.Assert(field.AssociatedSymbol.Kind == SymbolKind.Event);\n                        }\n                    } 989980"];
13275 [label="members.AddRange(nonFieldMembers); 989981"];
13276 [label="members.AddRange(nonFieldMembers); 989982"];
13277 [label="nonFieldMembers.Free(); 989983"];
13278 [label="fieldMembers.Free(); 989984"];
13279 [label="methodHandleToSymbol.Free(); 989985"];
13280 [label="int membersCount = members.Count; 989986"];
13281 [label="foreach (var typeArray in _lazyNestedTypes.Values)\n                {\n                    members.AddRange(typeArray);\n                } 989987"];
13282 [label="new DeclarationOrderTypeSymbolComparer() 989988"];
13283 [label="param DeclarationOrderTypeSymbolComparer(this) 989989"];
13284 [label="Instance = new DeclarationOrderTypeSymbolComparer() 989990"];
13285 [label="members.Sort(membersCount, DeclarationOrderTypeSymbolComparer.Instance); 989991"];
13286 [label="members.Sort(membersCount, DeclarationOrderTypeSymbolComparer.Instance); 989992"];
13287 [label="members.Sort(membersCount, DeclarationOrderTypeSymbolComparer.Instance); 989993"];
13288 [label="Symbol previous = null; 989994"];
13289 [label="foreach (var s in members)\n                {\n                    if (previous == null)\n                    {\n                        previous = s;\n                    }\n                    else\n                    {\n                        Symbol current = s;\n                        Debug.Assert(previous.Kind.ToSortOrder() <= current.Kind.ToSortOrder());\n                        previous = current;\n                    }\n                } 989995"];
13290 [label="foreach (var s in members)\n                {\n                    if (previous == null)\n                    {\n                        previous = s;\n                    }\n                    else\n                    {\n                        Symbol current = s;\n                        Debug.Assert(previous.Kind.ToSortOrder() <= current.Kind.ToSortOrder());\n                        previous = current;\n                    }\n                } 989996"];
13291 [label="IsTupleType 989997"];
13292 [label="=> IsTupleTypeOfCardinality(tupleCardinality: out _) 989998"];
13293 [label="_ 989999"];
13294 [label="tupleCardinality: out _ 990000"];
13295 [label="IsTupleTypeOfCardinality(tupleCardinality: out _) 990001"];
13296 [label="param IsTupleTypeOfCardinality(out int tupleCardinality) 990002"];
13297 [label="param IsTupleTypeOfCardinality(this) 990003"];
13298 [label="IsUnboundGenericType 990004"];
13299 [label="get\n            {\n                return false;\n            } 990005"];
13300 [label="return false; 990006"];
13301 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 990007"];
13302 [label="ContainingSymbol 990008"];
13303 [label="get\n            {\n                return _container;\n            } 990009"];
13304 [label="return _container; 990010"];
13305 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 990011"];
13306 [label=".Kind 990012"];
13307 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 990013"];
13308 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 990014"];
13309 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 990015"];
13310 [label="ContainingNamespace 990016"];
13311 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 990017"];
13312 [label="this.ContainingSymbol 990018"];
13313 [label="get\n            {\n                return _container;\n            } 990019"];
13314 [label="return _container; 990020"];
13315 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 990021"];
13316 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 990022"];
13317 [label="var ns = container as NamespaceSymbol; 990023"];
13318 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 990024"];
13319 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 990025"];
13320 [label="return ns; 990026"];
13321 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 990027"];
13322 [label="ContainingNamespace.ContainingNamespace 990028"];
13323 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 990029"];
13324 [label="this.ContainingSymbol 990030"];
13325 [label="get { return _containingNamespaceSymbol; } 990031"];
13326 [label="return _containingNamespaceSymbol; 990032"];
13327 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 990033"];
13328 [label=".IsGlobalNamespace 990034"];
13329 [label="get\n            {\n                return true;\n            } 990035"];
13330 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 990036"];
13331 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 990037"];
13332 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 990038"];
13333 [label="Name 990039"];
13334 [label="get\n            {\n                return _name;\n            } 990040"];
13335 [label="return _name; 990041"];
13336 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 990042"];
13337 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 990043"];
13338 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 990044"];
13339 [label="tupleCardinality = 0; 990045"];
13340 [label="return false; 990046"];
13341 [label="if (IsTupleType)\n                {\n                    members = AddOrWrapTupleMembers(members.ToImmutableAndFree());\n                    Debug.Assert(members is object);\n                } 990047"];
13342 [label="var membersInDeclarationOrder = members.ToImmutable(); 990048"];
13343 [label="if (!ImmutableInterlocked.InterlockedInitialize(ref _lazyMembersInDeclarationOrder, membersInDeclarationOrder))\n                {\n                    members.Free();\n                    members = null;\n                }\n                else\n                {\n                    // remove the types\n                    members.Clip(membersCount);\n                } 990049"];
13344 [label="if (!ImmutableInterlocked.InterlockedInitialize(ref _lazyMembersInDeclarationOrder, membersInDeclarationOrder))\n                {\n                    members.Free();\n                    members = null;\n                }\n                else\n                {\n                    // remove the types\n                    members.Clip(membersCount);\n                } 990050"];
13345 [label="if (!ImmutableInterlocked.InterlockedInitialize(ref _lazyMembersInDeclarationOrder, membersInDeclarationOrder))\n                {\n                    members.Free();\n                    members = null;\n                }\n                else\n                {\n                    // remove the types\n                    members.Clip(membersCount);\n                } 990051"];
13346 [label="members.Clip(membersCount); 990052"];
13347 [label="if (_lazyMembersByName == null)\n            {\n                if (members == null)\n                {\n                    members = ArrayBuilder<Symbol>.GetInstance();\n                    foreach (var member in _lazyMembersInDeclarationOrder)\n                    {\n                        if (member.Kind == SymbolKind.NamedType)\n                        {\n                            break;\n                        }\n                        members.Add(member);\n                    }\n                }\n\n                Dictionary<string, ImmutableArray<Symbol>> membersDict = GroupByName(members);\n\n                var exchangeResult = Interlocked.CompareExchange(ref _lazyMembersByName, membersDict, null);\n                if (exchangeResult == null)\n                {\n                    // we successfully swapped in the members dictionary.\n\n                    // Now, use these as the canonical member names.  This saves us memory by not having\n                    // two collections around at the same time with redundant data in them.\n                    //\n                    // NOTE(cyrusn): We must use an interlocked exchange here so that the full\n                    // construction of this object will be seen from 'MemberNames'.  Also, doing a\n                    // straight InterlockedExchange here is the right thing to do.  Consider the case\n                    // where one thread is calling in through 'MemberNames' while we are in the middle\n                    // of this method.  Either that thread will compute the member names and store it\n                    // first (in which case we overwrite it), or we will store first (in which case\n                    // their CompareExchange(..., ..., null) will fail.  Either way, this will be certain\n                    // to become the canonical set of member names.\n                    //\n                    // NOTE(cyrusn): This means that it is possible (and by design) for people to get a\n                    // different object back when they call MemberNames multiple times.  However, outside\n                    // of object identity, both collections should appear identical to the user.\n                    var memberNames = SpecializedCollections.ReadOnlyCollection(membersDict.Keys);\n                    Interlocked.Exchange(ref _lazyMemberNames, memberNames);\n                }\n            } 990053"];
13348 [label="if (_lazyMembersByName == null)\n            {\n                if (members == null)\n                {\n                    members = ArrayBuilder<Symbol>.GetInstance();\n                    foreach (var member in _lazyMembersInDeclarationOrder)\n                    {\n                        if (member.Kind == SymbolKind.NamedType)\n                        {\n                            break;\n                        }\n                        members.Add(member);\n                    }\n                }\n\n                Dictionary<string, ImmutableArray<Symbol>> membersDict = GroupByName(members);\n\n                var exchangeResult = Interlocked.CompareExchange(ref _lazyMembersByName, membersDict, null);\n                if (exchangeResult == null)\n                {\n                    // we successfully swapped in the members dictionary.\n\n                    // Now, use these as the canonical member names.  This saves us memory by not having\n                    // two collections around at the same time with redundant data in them.\n                    //\n                    // NOTE(cyrusn): We must use an interlocked exchange here so that the full\n                    // construction of this object will be seen from 'MemberNames'.  Also, doing a\n                    // straight InterlockedExchange here is the right thing to do.  Consider the case\n                    // where one thread is calling in through 'MemberNames' while we are in the middle\n                    // of this method.  Either that thread will compute the member names and store it\n                    // first (in which case we overwrite it), or we will store first (in which case\n                    // their CompareExchange(..., ..., null) will fail.  Either way, this will be certain\n                    // to become the canonical set of member names.\n                    //\n                    // NOTE(cyrusn): This means that it is possible (and by design) for people to get a\n                    // different object back when they call MemberNames multiple times.  However, outside\n                    // of object identity, both collections should appear identical to the user.\n                    var memberNames = SpecializedCollections.ReadOnlyCollection(membersDict.Keys);\n                    Interlocked.Exchange(ref _lazyMemberNames, memberNames);\n                }\n            } 990054"];
13349 [label="if (members == null)\n                {\n                    members = ArrayBuilder<Symbol>.GetInstance();\n                    foreach (var member in _lazyMembersInDeclarationOrder)\n                    {\n                        if (member.Kind == SymbolKind.NamedType)\n                        {\n                            break;\n                        }\n                        members.Add(member);\n                    }\n                } 990055"];
13350 [label="Dictionary<string, ImmutableArray<Symbol>> membersDict = GroupByName(members); 990056"];
13351 [label="GroupByName(members) 990057"];
13352 [label="param GroupByName(ArrayBuilder<Symbol> symbols) 990058"];
13353 [label="return symbols.ToDictionary(s => s.Name, StringOrdinalComparer.Instance); 990059"];
13354 [label="return symbols.ToDictionary(s => s.Name, StringOrdinalComparer.Instance); 990060"];
13355 [label="return symbols.ToDictionary(s => s.Name, StringOrdinalComparer.Instance); 990061"];
13356 [label="var exchangeResult = Interlocked.CompareExchange(ref _lazyMembersByName, membersDict, null); 990062"];
13357 [label="var exchangeResult = Interlocked.CompareExchange(ref _lazyMembersByName, membersDict, null); 990063"];
13358 [label="var exchangeResult = Interlocked.CompareExchange(ref _lazyMembersByName, membersDict, null); 990064"];
13359 [label="if (exchangeResult == null)\n                {\n                    // we successfully swapped in the members dictionary.\n\n                    // Now, use these as the canonical member names.  This saves us memory by not having\n                    // two collections around at the same time with redundant data in them.\n                    //\n                    // NOTE(cyrusn): We must use an interlocked exchange here so that the full\n                    // construction of this object will be seen from 'MemberNames'.  Also, doing a\n                    // straight InterlockedExchange here is the right thing to do.  Consider the case\n                    // where one thread is calling in through 'MemberNames' while we are in the middle\n                    // of this method.  Either that thread will compute the member names and store it\n                    // first (in which case we overwrite it), or we will store first (in which case\n                    // their CompareExchange(..., ..., null) will fail.  Either way, this will be certain\n                    // to become the canonical set of member names.\n                    //\n                    // NOTE(cyrusn): This means that it is possible (and by design) for people to get a\n                    // different object back when they call MemberNames multiple times.  However, outside\n                    // of object identity, both collections should appear identical to the user.\n                    var memberNames = SpecializedCollections.ReadOnlyCollection(membersDict.Keys);\n                    Interlocked.Exchange(ref _lazyMemberNames, memberNames);\n                } 990065"];
13360 [label="if (exchangeResult == null)\n                {\n                    // we successfully swapped in the members dictionary.\n\n                    // Now, use these as the canonical member names.  This saves us memory by not having\n                    // two collections around at the same time with redundant data in them.\n                    //\n                    // NOTE(cyrusn): We must use an interlocked exchange here so that the full\n                    // construction of this object will be seen from 'MemberNames'.  Also, doing a\n                    // straight InterlockedExchange here is the right thing to do.  Consider the case\n                    // where one thread is calling in through 'MemberNames' while we are in the middle\n                    // of this method.  Either that thread will compute the member names and store it\n                    // first (in which case we overwrite it), or we will store first (in which case\n                    // their CompareExchange(..., ..., null) will fail.  Either way, this will be certain\n                    // to become the canonical set of member names.\n                    //\n                    // NOTE(cyrusn): This means that it is possible (and by design) for people to get a\n                    // different object back when they call MemberNames multiple times.  However, outside\n                    // of object identity, both collections should appear identical to the user.\n                    var memberNames = SpecializedCollections.ReadOnlyCollection(membersDict.Keys);\n                    Interlocked.Exchange(ref _lazyMemberNames, memberNames);\n                } 990066"];
13361 [label="var memberNames = SpecializedCollections.ReadOnlyCollection(membersDict.Keys); 990067"];
13362 [label="Interlocked.Exchange(ref _lazyMemberNames, memberNames); 990068"];
13363 [label="Interlocked.Exchange(ref _lazyMemberNames, memberNames); 990069"];
13364 [label="if (members != null)\n            {\n                members.Free();\n            } 990070"];
13365 [label="if (members != null)\n            {\n                members.Free();\n            } 990071"];
13366 [label="members.Free(); 990072"];
13367 [label="LoadMembers(); 990073"];
13368 [label="EnsureAllMembersAreLoaded(); 990074"];
13369 [label="return _lazyMembersInDeclarationOrder; 990075"];
13370 [label="foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                } 990076"];
13371 [label="visitor.VisitNamedType(this); 990077"];
13372 [label="symbol.IsGlobalNamespace 990078"];
13373 [label="get\n            {\n                return false;\n            } 990079"];
13374 [label="return false; 990080"];
13375 [label="if (symbol.IsGlobalNamespace)\n            {\n                Unindent();\n                WriteLine('</members>');\n                Unindent();\n                WriteLine('</doc>');\n            } 990081"];
13376 [label="s.Accept(this); 990082"];
13377 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 990083"];
13378 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 990084"];
13379 [label="DefaultVisit(symbol); 990085"];
13380 [label="param DefaultVisit(Symbol symbol) 990086"];
13381 [label="if (ShouldSkip(symbol))\n            {\n                return;\n            } 990087"];
13382 [label="ShouldSkip(symbol) 990088"];
13383 [label="param ShouldSkip(Symbol symbol) 990089"];
13384 [label="symbol.IsImplicitlyDeclared 990090"];
13385 [label="get { return false; } 990091"];
13386 [label="return false; 990092"];
13387 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 990093"];
13388 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 990094"];
13389 [label="symbol.IsAccessor() 990095"];
13390 [label="param IsAccessor(this Symbol symbol) 990096"];
13391 [label="symbol.Kind 990097"];
13392 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 990098"];
13393 [label="return symbol.Kind == SymbolKind.Method && IsAccessor((MethodSymbol)symbol); 990099"];
13394 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 990100"];
13395 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 990101"];
13396 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 990102"];
13397 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 990103"];
13398 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 990104"];
13399 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 990105"];
13400 [label="symbol.IsPartialDefinition() 990106"];
13401 [label="param IsPartialDefinition(this Symbol member) 990107"];
13402 [label="var sms = member as SourceOrdinaryMethodSymbol; 990108"];
13403 [label="return sms?.IsPartialDefinition == true; 990109"];
13404 [label="return sms?.IsPartialDefinition == true; 990110"];
13405 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 990111"];
13406 [label="DocumentationMode maxDocumentationMode; 990112"];
13407 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 990113"];
13408 [label="docCommentNodes 990114"];
13409 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 990115"];
13410 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 990116"];
13411 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 990117"];
13412 [label="TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes) 990118"];
13413 [label="param TryGetDocumentationCommentNodes(Symbol symbol) 990119"];
13414 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 990120"];
13415 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 990121"];
13416 [label="param TryGetDocumentationCommentNodes(this) 990122"];
13417 [label="maxDocumentationMode = DocumentationMode.None; 990123"];
13418 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 990124"];
13419 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 990125"];
13420 [label="symbol.DeclaringSyntaxReferences 990126"];
13421 [label="get\n            {\n                return ImmutableArray<SyntaxReference>.Empty;\n            } 990127"];
13422 [label="return ImmutableArray<SyntaxReference>.Empty; 990128"];
13423 [label="foreach (SyntaxReference reference in symbol.DeclaringSyntaxReferences)\n            {\n                DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode;\n                maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode;\n\n                ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics);\n                foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                }\n            } 990129"];
13424 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 990130"];
13425 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 990131"];
13426 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 990132"];
13427 [label="return true; 990133"];
13428 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 990134"];
13429 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 990135"];
13430 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 990136"];
13431 [label="return; 990137"];
13432 [label="ArrayBuilder<Symbol> members = null; 990138"];
13433 [label="s.Kind 990139"];
13434 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 990140"];
13435 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 990141"];
13436 [label="ImmutableArray<TypeDefinitionHandle> nestedTypeDefs; 990142"];
13437 [label="nestedTypeDefs 990143"];
13438 [label="foreach (var typeRid in nestedTypeDefs)\n            {\n                if (module.ShouldImportNestedType(typeRid))\n                {\n                    yield return PENamedTypeSymbol.Create(moduleSymbol, this, typeRid);\n                }\n            } 990144"];
13439 [label="if (exchangeResult == null)\n                {\n                    // Build cache of TypeDef Tokens\n                    // Potentially this can be done in the background.\n                    var moduleSymbol = this.ContainingPEModule;\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                } 990145"];
13440 [label="this.ContainingPEModule 990146"];
13441 [label="s.Kind 990147"];
13442 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 990148"];
13443 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 990149"];
13444 [label="var moduleSymbol = this.ContainingPEModule; 990150"];
13445 [label="moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict); 990151"];
13446 [label="moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict) 990152"];
13447 [label="param OnNewTypeDeclarationsLoaded(Dictionary<string, ImmutableArray<PENamedTypeSymbol>> typesDict) 990153"];
13448 [label="param OnNewTypeDeclarationsLoaded(this) 990154"];
13449 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 990155"];
13450 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 990156"];
13451 [label="moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict); 990157"];
13452 [label="types.Free(); 990158"];
13453 [label="EnsureNestedTypesAreLoaded(); 990159"];
13454 [label="Debug.Assert(SymbolKind.Field.ToSortOrder() < SymbolKind.Method.ToSortOrder()); 990160"];
13455 [label="Debug.Assert(SymbolKind.Method.ToSortOrder() < SymbolKind.Property.ToSortOrder()); 990161"];
13456 [label="Debug.Assert(SymbolKind.Property.ToSortOrder() < SymbolKind.Event.ToSortOrder()); 990162"];
13457 [label="Debug.Assert(SymbolKind.Event.ToSortOrder() < SymbolKind.NamedType.ToSortOrder()); 990163"];
13458 [label="return null; 990164"];
13459 [label="Interlocked.CompareExchange(ref _lazyDeclaredBaseType, baseType, ErrorTypeSymbol.UnknownResultType); 990165"];
13460 [label="Interlocked.CompareExchange(ref _lazyDeclaredBaseType, baseType, ErrorTypeSymbol.UnknownResultType); 990166"];
13461 [label="Interlocked.CompareExchange(ref _lazyDeclaredBaseType, baseType, ErrorTypeSymbol.UnknownResultType); 990167"];
13462 [label="return _lazyDeclaredBaseType; 990168"];
13463 [label="ArrayBuilder<PEFieldSymbol> fieldMembers = ArrayBuilder<PEFieldSymbol>.GetInstance(); 990169"];
13464 [label="MultiDictionary<string, PEFieldSymbol> privateFieldNameToSymbols = this.CreateFields(fieldMembers); 990170"];
13465 [label="param CreateFields(ArrayBuilder<PEFieldSymbol> fieldMembers) 990171"];
13466 [label="var privateFieldNameToSymbols = new MultiDictionary<string, PEFieldSymbol>(); 990172"];
13467 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 990173"];
13468 [label="var isOrdinaryStruct = false; 990174"];
13469 [label="var isOrdinaryEmbeddableStruct = false; 990175"];
13470 [label="this.TypeKind 990176"];
13471 [label="TypeKind result = _lazyKind; 990177"];
13472 [label="if (this.TypeKind == TypeKind.Struct)\n            {\n                if (this.SpecialType == Microsoft.CodeAnalysis.SpecialType.None)\n                {\n                    isOrdinaryStruct = true;\n                    isOrdinaryEmbeddableStruct = this.ContainingAssembly.IsLinked;\n                }\n                else\n                {\n                    isOrdinaryStruct = (this.SpecialType == Microsoft.CodeAnalysis.SpecialType.System_Nullable_T);\n                }\n            } 990178"];
13473 [label="if (!(isOrdinaryEmbeddableStruct ||\n                            (isOrdinaryStruct && (module.GetFieldDefFlagsOrThrow(fieldRid) & FieldAttributes.Static) == 0) ||\n                            module.ShouldImportField(fieldRid, moduleSymbol.ImportOptions)))\n                        {\n                            continue;\n                        } 990179"];
13474 [label="if (!(isOrdinaryEmbeddableStruct ||\n                            (isOrdinaryStruct && (module.GetFieldDefFlagsOrThrow(fieldRid) & FieldAttributes.Static) == 0) ||\n                            module.ShouldImportField(fieldRid, moduleSymbol.ImportOptions)))\n                        {\n                            continue;\n                        } 990180"];
13475 [label="if (!(isOrdinaryEmbeddableStruct ||\n                            (isOrdinaryStruct && (module.GetFieldDefFlagsOrThrow(fieldRid) & FieldAttributes.Static) == 0) ||\n                            module.ShouldImportField(fieldRid, moduleSymbol.ImportOptions)))\n                        {\n                            continue;\n                        } 990181"];
13476 [label="var symbol = new PEFieldSymbol(moduleSymbol, this, fieldRid); 990182"];
13477 [label="var symbol = new PEFieldSymbol(moduleSymbol, this, fieldRid); 990183"];
13478 [label="new PEFieldSymbol(moduleSymbol, this, fieldRid) 990184"];
13479 [label="param PEFieldSymbol(PEModuleSymbol moduleSymbol) 990185"];
13480 [label="param PEFieldSymbol(PENamedTypeSymbol containingType) 990186"];
13481 [label="param PEFieldSymbol(FieldDefinitionHandle fieldDef) 990187"];
13482 [label="param PEFieldSymbol(this) 990188"];
13483 [label="param PEFieldSymbol(this) 990189"];
13484 [label="param FieldSymbol(this) 990190"];
13485 [label="param FieldSymbol(this) 990191"];
13486 [label="_lazyAdapter 990192"];
13487 [label="_name 990193"];
13488 [label="_flags 990194"];
13489 [label="_containingType 990195"];
13490 [label="_lazyIsVolatile 990196"];
13491 [label="_lazyConstantValue = Microsoft.CodeAnalysis.ConstantValue.Unset 990197"];
13492 [label="_lazyDocComment 990198"];
13493 [label="_lazyUseSiteDiagnostic = CSDiagnosticInfo.EmptyErrorInfo 990199"];
13494 [label="_lazyObsoleteAttributeData = ObsoleteAttributeData.Uninitialized 990200"];
13495 [label="_lazyType 990201"];
13496 [label="_lazyFixedSize 990202"];
13497 [label="_lazyFixedImplementationType 990203"];
13498 [label="_associatedEventOpt 990204"];
13499 [label="Debug.Assert((object)moduleSymbol != null); 990205"];
13500 [label="Debug.Assert((object)moduleSymbol != null); 990206"];
13501 [label="Debug.Assert((object)containingType != null); 990207"];
13502 [label="Debug.Assert((object)containingType != null); 990208"];
13503 [label="Debug.Assert(!fieldDef.IsNil); 990209"];
13504 [label="_handle 990210"];
13505 [label="_containingType 990211"];
13506 [label="_packedFlags = new PackedFlags(); 990212"];
13507 [label="new PackedFlags() 990213"];
13508 [label="_packedFlags 990214"];
13509 [label="moduleSymbol.Module 990215"];
13510 [label="get\n            {\n                return _module;\n            } 990216"];
13511 [label="return _module; 990217"];
13512 [label="moduleSymbol.Module.GetFieldDefPropsOrThrow(fieldDef, out _name, out _flags); 990218"];
13513 [label="moduleSymbol.Module.GetFieldDefPropsOrThrow(fieldDef, out _name, out _flags); 990219"];
13514 [label="moduleSymbol.Module.GetFieldDefPropsOrThrow(fieldDef, out _name, out _flags); 990220"];
13515 [label="moduleSymbol.Module.GetFieldDefPropsOrThrow(fieldDef, out _name, out _flags); 990221"];
13516 [label="moduleSymbol.Module.GetFieldDefPropsOrThrow(fieldDef, out _name, out _flags); 990222"];
13517 [label="fieldMembers.Add(symbol); 990223"];
13518 [label="fieldMembers.Add(symbol); 990224"];
13519 [label="symbol.DeclaredAccessibility 990225"];
13520 [label="get\n            {\n                var access = Accessibility.Private;\n\n                switch (_flags & FieldAttributes.FieldAccessMask)\n                {\n                    case FieldAttributes.Assembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case FieldAttributes.FamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case FieldAttributes.FamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case FieldAttributes.Private:\n                    case FieldAttributes.PrivateScope:\n                        access = Accessibility.Private;\n                        break;\n\n                    case FieldAttributes.Public:\n                        access = Accessibility.Public;\n                        break;\n\n                    case FieldAttributes.Family:\n                        access = Accessibility.Protected;\n                        break;\n\n                    default:\n                        access = Accessibility.Private;\n                        break;\n                }\n\n                return access;\n            } 990226"];
13521 [label="var access = Accessibility.Private; 990227"];
13522 [label="switch (_flags & FieldAttributes.FieldAccessMask)\n                {\n                    case FieldAttributes.Assembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case FieldAttributes.FamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case FieldAttributes.FamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case FieldAttributes.Private:\n                    case FieldAttributes.PrivateScope:\n                        access = Accessibility.Private;\n                        break;\n\n                    case FieldAttributes.Public:\n                        access = Accessibility.Public;\n                        break;\n\n                    case FieldAttributes.Family:\n                        access = Accessibility.Protected;\n                        break;\n\n                    default:\n                        access = Accessibility.Private;\n                        break;\n                } 990228"];
13523 [label="access = Accessibility.Internal; 990229"];
13524 [label="return access; 990230"];
13525 [label="if (symbol.DeclaredAccessibility == Accessibility.Private)\n                    {\n                        var name = symbol.Name;\n                        if (name.Length > 0)\n                        {\n                            privateFieldNameToSymbols.Add(name, symbol);\n                        }\n                    } 990231"];
13526 [label="return privateFieldNameToSymbols; 990232"];
13527 [label="MultiDictionary<string, PEFieldSymbol> privateFieldNameToSymbols = this.CreateFields(fieldMembers); 990233"];
13528 [label="PooledDictionary<MethodDefinitionHandle, PEMethodSymbol> methodHandleToSymbol = this.CreateMethods(nonFieldMembers); 990234"];
13529 [label="param CreateMethods(ArrayBuilder<Symbol> members) 990235"];
13530 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 990236"];
13531 [label="var map = PooledDictionary<MethodDefinitionHandle, PEMethodSymbol>.GetInstance(); 990237"];
13532 [label="this.TypeKind 990238"];
13533 [label="TypeKind result = _lazyKind; 990239"];
13534 [label="var isOrdinaryEmbeddableStruct = (this.TypeKind == TypeKind.Struct) && (this.SpecialType == Microsoft.CodeAnalysis.SpecialType.None) && this.ContainingAssembly.IsLinked; 990240"];
13535 [label="return map; 990241"];
13536 [label="PooledDictionary<MethodDefinitionHandle, PEMethodSymbol> methodHandleToSymbol = this.CreateMethods(nonFieldMembers); 990242"];
13537 [label="this.TypeKind 990243"];
13538 [label="TypeKind result = _lazyKind; 990244"];
13539 [label="if (this.TypeKind == TypeKind.Struct)\n                    {\n                        bool haveParameterlessConstructor = false;\n                        foreach (MethodSymbol method in nonFieldMembers)\n                        {\n                            if (method.IsParameterlessConstructor())\n                            {\n                                haveParameterlessConstructor = true;\n                                break;\n                            }\n                        }\n\n                        // Structs have an implicit parameterless constructor, even if it\n                        // does not appear in metadata (11.3.8)\n                        if (!haveParameterlessConstructor)\n                        {\n                            nonFieldMembers.Insert(0, new SynthesizedInstanceConstructor(this));\n                        }\n                    } 990245"];
13540 [label="this.CreateProperties(methodHandleToSymbol, nonFieldMembers); 990246"];
13541 [label="this.CreateProperties(methodHandleToSymbol, nonFieldMembers); 990247"];
13542 [label="param CreateProperties(Dictionary<MethodDefinitionHandle, PEMethodSymbol> methodHandleToSymbol) 990248"];
13543 [label="param CreateProperties(ArrayBuilder<Symbol> members) 990249"];
13544 [label="this.CreateEvents(privateFieldNameToSymbols, methodHandleToSymbol, nonFieldMembers); 990250"];
13545 [label="this.CreateEvents(privateFieldNameToSymbols, methodHandleToSymbol, nonFieldMembers); 990251"];
13546 [label="this.CreateEvents(privateFieldNameToSymbols, methodHandleToSymbol, nonFieldMembers); 990252"];
13547 [label="param CreateEvents(MultiDictionary<string, PEFieldSymbol> privateFieldNameToSymbols) 990253"];
13548 [label="param CreateEvents(Dictionary<MethodDefinitionHandle, PEMethodSymbol> methodHandleToSymbol) 990254"];
13549 [label="param CreateEvents(ArrayBuilder<Symbol> members) 990255"];
13550 [label="foreach (PEFieldSymbol field in fieldMembers)\n                    {\n                        if ((object)field.AssociatedSymbol == null)\n                        {\n                            members.Add(field);\n                        }\n                        else\n                        {\n                            // As for source symbols, our public API presents the fiction that all\n                            // operations are performed on the event, rather than on the backing field.  \n                            // The backing field is not accessible through the API.  As an additional \n                            // bonus, lookup is easier when the names don't collide.\n                            Debug.Assert(field.AssociatedSymbol.Kind == SymbolKind.Event);\n                        }\n                    } 990256"];
13551 [label="foreach (PEFieldSymbol field in fieldMembers)\n                    {\n                        if ((object)field.AssociatedSymbol == null)\n                        {\n                            members.Add(field);\n                        }\n                        else\n                        {\n                            // As for source symbols, our public API presents the fiction that all\n                            // operations are performed on the event, rather than on the backing field.  \n                            // The backing field is not accessible through the API.  As an additional \n                            // bonus, lookup is easier when the names don't collide.\n                            Debug.Assert(field.AssociatedSymbol.Kind == SymbolKind.Event);\n                        }\n                    } 990257"];
13552 [label="field.AssociatedSymbol 990258"];
13553 [label="get\n            {\n                return _associatedEventOpt;\n            } 990259"];
13554 [label="return _associatedEventOpt; 990260"];
13555 [label="if ((object)field.AssociatedSymbol == null)\n                        {\n                            members.Add(field);\n                        }\n                        else\n                        {\n                            // As for source symbols, our public API presents the fiction that all\n                            // operations are performed on the event, rather than on the backing field.  \n                            // The backing field is not accessible through the API.  As an additional \n                            // bonus, lookup is easier when the names don't collide.\n                            Debug.Assert(field.AssociatedSymbol.Kind == SymbolKind.Event);\n                        } 990261"];
13556 [label="if ((object)field.AssociatedSymbol == null)\n                        {\n                            members.Add(field);\n                        }\n                        else\n                        {\n                            // As for source symbols, our public API presents the fiction that all\n                            // operations are performed on the event, rather than on the backing field.  \n                            // The backing field is not accessible through the API.  As an additional \n                            // bonus, lookup is easier when the names don't collide.\n                            Debug.Assert(field.AssociatedSymbol.Kind == SymbolKind.Event);\n                        } 990262"];
13557 [label="members.Add(field); 990263"];
13558 [label="fieldMembers.Free(); 990264"];
13559 [label="methodHandleToSymbol.Free(); 990265"];
13560 [label="foreach (var typeArray in _lazyNestedTypes.Values)\n                {\n                    members.AddRange(typeArray);\n                } 990266"];
13561 [label="Symbol previous = null; 990267"];
13562 [label="foreach (var s in members)\n                {\n                    if (previous == null)\n                    {\n                        previous = s;\n                    }\n                    else\n                    {\n                        Symbol current = s;\n                        Debug.Assert(previous.Kind.ToSortOrder() <= current.Kind.ToSortOrder());\n                        previous = current;\n                    }\n                } 990268"];
13563 [label="foreach (var s in members)\n                {\n                    if (previous == null)\n                    {\n                        previous = s;\n                    }\n                    else\n                    {\n                        Symbol current = s;\n                        Debug.Assert(previous.Kind.ToSortOrder() <= current.Kind.ToSortOrder());\n                        previous = current;\n                    }\n                } 990269"];
13564 [label="if (previous == null)\n                    {\n                        previous = s;\n                    }\n                    else\n                    {\n                        Symbol current = s;\n                        Debug.Assert(previous.Kind.ToSortOrder() <= current.Kind.ToSortOrder());\n                        previous = current;\n                    } 990270"];
13565 [label="previous == null 990271"];
13566 [label="param ==(Symbol left) 990272"];
13567 [label="param ==(Symbol right) 990273"];
13568 [label="if (right is null)\n            {\n                return left is null;\n            } 990274"];
13569 [label="return left is null; 990275"];
13570 [label="if (previous == null)\n                    {\n                        previous = s;\n                    }\n                    else\n                    {\n                        Symbol current = s;\n                        Debug.Assert(previous.Kind.ToSortOrder() <= current.Kind.ToSortOrder());\n                        previous = current;\n                    } 990276"];
13571 [label="previous = s; 990277"];
13572 [label="IsTupleType 990278"];
13573 [label="=> IsTupleTypeOfCardinality(tupleCardinality: out _) 990279"];
13574 [label="_ 990280"];
13575 [label="tupleCardinality: out _ 990281"];
13576 [label="IsTupleTypeOfCardinality(tupleCardinality: out _) 990282"];
13577 [label="param IsTupleTypeOfCardinality(out int tupleCardinality) 990283"];
13578 [label="param IsTupleTypeOfCardinality(this) 990284"];
13579 [label="IsUnboundGenericType 990285"];
13580 [label="get\n            {\n                return false;\n            } 990286"];
13581 [label="return false; 990287"];
13582 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 990288"];
13583 [label="ContainingSymbol 990289"];
13584 [label="get\n            {\n                return _container;\n            } 990290"];
13585 [label="return _container; 990291"];
13586 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 990292"];
13587 [label=".Kind 990293"];
13588 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 990294"];
13589 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 990295"];
13590 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 990296"];
13591 [label="ContainingNamespace 990297"];
13592 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 990298"];
13593 [label="this.ContainingSymbol 990299"];
13594 [label="get\n            {\n                return _container;\n            } 990300"];
13595 [label="return _container; 990301"];
13596 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 990302"];
13597 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 990303"];
13598 [label="var ns = container as NamespaceSymbol; 990304"];
13599 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 990305"];
13600 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 990306"];
13601 [label="return ns; 990307"];
13602 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 990308"];
13603 [label="ContainingNamespace.ContainingNamespace 990309"];
13604 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 990310"];
13605 [label="this.ContainingSymbol 990311"];
13606 [label="get\n            {\n                return _moduleSymbol;\n            } 990312"];
13607 [label="return _moduleSymbol; 990313"];
13608 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 990314"];
13609 [label="container.ContainingSymbol 990315"];
13610 [label="get\n            {\n                return _assemblySymbol;\n            } 990316"];
13611 [label="return _assemblySymbol; 990317"];
13612 [label="get\n            {\n                return null;\n            } 990318"];
13613 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 990319"];
13614 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 990320"];
13615 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 990321"];
13616 [label="tupleCardinality = 0; 990322"];
13617 [label="return false; 990323"];
13618 [label="if (IsTupleType)\n                {\n                    members = AddOrWrapTupleMembers(members.ToImmutableAndFree());\n                    Debug.Assert(members is object);\n                } 990324"];
13619 [label="if (members == null)\n                {\n                    members = ArrayBuilder<Symbol>.GetInstance();\n                    foreach (var member in _lazyMembersInDeclarationOrder)\n                    {\n                        if (member.Kind == SymbolKind.NamedType)\n                        {\n                            break;\n                        }\n                        members.Add(member);\n                    }\n                } 990325"];
13620 [label="get\n            {\n                return _name;\n            } 990326"];
13621 [label="return _name; 990327"];
13622 [label="LoadMembers(); 990328"];
13623 [label="EnsureAllMembersAreLoaded(); 990329"];
13624 [label="return _lazyMembersInDeclarationOrder; 990330"];
13625 [label="foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                } 990331"];
13626 [label="_cancellationToken.ThrowIfCancellationRequested(); 990332"];
13627 [label="member.Accept(this); 990333"];
13628 [label="member.Accept(this) 990334"];
13629 [label="param Accept(CSharpSymbolVisitor visitor) 990335"];
13630 [label="param Accept(this) 990336"];
13631 [label="visitor.VisitField(this); 990337"];
13632 [label="visitor.VisitField(this) 990338"];
13633 [label="param VisitField(FieldSymbol symbol) 990339"];
13634 [label="param VisitField(this) 990340"];
13635 [label="DefaultVisit(symbol); 990341"];
13636 [label="DefaultVisit(symbol) 990342"];
13637 [label="param DefaultVisit(Symbol symbol) 990343"];
13638 [label="param DefaultVisit(this) 990344"];
13639 [label="_cancellationToken.ThrowIfCancellationRequested(); 990345"];
13640 [label="if (ShouldSkip(symbol))\n            {\n                return;\n            } 990346"];
13641 [label="ShouldSkip(symbol) 990347"];
13642 [label="param ShouldSkip(Symbol symbol) 990348"];
13643 [label="symbol.IsImplicitlyDeclared 990349"];
13644 [label="get { return false; } 990350"];
13645 [label="return false; 990351"];
13646 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 990352"];
13647 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 990353"];
13648 [label="symbol.IsAccessor() 990354"];
13649 [label="param IsAccessor(this Symbol symbol) 990355"];
13650 [label="symbol.Kind 990356"];
13651 [label="get\n            {\n                return SymbolKind.Field;\n            } 990357"];
13652 [label="return SymbolKind.Field; 990358"];
13653 [label="return symbol.Kind == SymbolKind.Method && IsAccessor((MethodSymbol)symbol); 990359"];
13654 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 990360"];
13655 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 990361"];
13656 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 990362"];
13657 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 990363"];
13658 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 990364"];
13659 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 990365"];
13660 [label="symbol.IsPartialDefinition() 990366"];
13661 [label="param IsPartialDefinition(this Symbol member) 990367"];
13662 [label="var sms = member as SourceOrdinaryMethodSymbol; 990368"];
13663 [label="return sms?.IsPartialDefinition == true; 990369"];
13664 [label="return sms?.IsPartialDefinition == true; 990370"];
13665 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 990371"];
13666 [label="DocumentationMode maxDocumentationMode; 990372"];
13667 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 990373"];
13668 [label="docCommentNodes 990374"];
13669 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 990375"];
13670 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 990376"];
13671 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 990377"];
13672 [label="TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes) 990378"];
13673 [label="param TryGetDocumentationCommentNodes(Symbol symbol) 990379"];
13674 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 990380"];
13675 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 990381"];
13676 [label="param TryGetDocumentationCommentNodes(this) 990382"];
13677 [label="maxDocumentationMode = DocumentationMode.None; 990383"];
13678 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 990384"];
13679 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 990385"];
13680 [label="symbol.DeclaringSyntaxReferences 990386"];
13681 [label="get\n            {\n                return ImmutableArray<SyntaxReference>.Empty;\n            } 990387"];
13682 [label="return ImmutableArray<SyntaxReference>.Empty; 990388"];
13683 [label="foreach (SyntaxReference reference in symbol.DeclaringSyntaxReferences)\n            {\n                DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode;\n                maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode;\n\n                ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics);\n                foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                }\n            } 990389"];
13684 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 990390"];
13685 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 990391"];
13686 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 990392"];
13687 [label="return true; 990393"];
13688 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 990394"];
13689 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 990395"];
13690 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 990396"];
13691 [label="return; 990397"];
13692 [label="DefaultVisit(symbol); 990398"];
13693 [label="visitor.VisitField(this); 990399"];
13694 [label="member.Accept(this); 990400"];
13695 [label="symbol.IsGlobalNamespace 990401"];
13696 [label="get\n            {\n                return (object)ContainingNamespace == null;\n            } 990402"];
13697 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 990403"];
13698 [label="this.ContainingSymbol 990404"];
13699 [label="get\n            {\n                return _containingNamespace;\n            } 990405"];
13700 [label="return _containingNamespace; 990406"];
13701 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 990407"];
13702 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 990408"];
13703 [label="if (symbol.IsGlobalNamespace)\n            {\n                Unindent();\n                WriteLine('</members>');\n                Unindent();\n                WriteLine('</doc>');\n            } 990409"];
13704 [label="Unindent() 990410"];
13705 [label="param Unindent(this) 990411"];
13706 [label="_indentDepth 990412"];
13707 [label="Debug.Assert(_indentDepth >= 0); 990413"];
13708 [label="Debug.Assert(_indentDepth >= 0); 990414"];
13709 [label="Unindent(); 990415"];
13710 [label="WriteLine('</members>'); 990416"];
13711 [label="WriteLine('</members>') 990417"];
13712 [label="param WriteLine(string message) 990418"];
13713 [label="param WriteLine(this) 990419"];
13714 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 990420"];
13715 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 990421"];
13716 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 990422"];
13717 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 990423"];
13718 [label="Unindent() 990424"];
13719 [label="param Unindent(this) 990425"];
13720 [label="_indentDepth 990426"];
13721 [label="Debug.Assert(_indentDepth >= 0); 990427"];
13722 [label="Debug.Assert(_indentDepth >= 0); 990428"];
13723 [label="Unindent(); 990429"];
13724 [label="WriteLine('</doc>'); 990430"];
13725 [label="WriteLine('</doc>') 990431"];
13726 [label="param WriteLine(string message) 990432"];
13727 [label="param WriteLine(this) 990433"];
13728 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 990434"];
13729 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 990435"];
13730 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 990436"];
13731 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 990437"];
13732 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 990438"];
13733 [label="Debug.Assert(compiler._indentDepth == 0); 990439"];
13734 [label="Debug.Assert(compiler._indentDepth == 0); 990440"];
13735 [label="writer?.Flush(); 990441"];
13736 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 990442"];
13737 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 990443"];
13738 [label="compilation.SyntaxTrees 990444"];
13739 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 990445"];
13740 [label="_syntaxAndDeclarations.GetLazyState() 990446"];
13741 [label="param GetLazyState(this) 990447"];
13742 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 990448"];
13743 [label="foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                } 990449"];
13744 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 990450"];
13745 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 990451"];
13746 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 990452"];
13747 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken) 990453"];
13748 [label="param ReportUnprocessed(SyntaxTree tree) 990454"];
13749 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 990455"];
13750 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 990456"];
13751 [label="param ReportUnprocessed(CancellationToken cancellationToken) 990457"];
13752 [label="if (tree.ReportDocumentationCommentDiagnostics())\n            {\n                UnprocessedDocumentationCommentFinder finder = new UnprocessedDocumentationCommentFinder(diagnostics, filterSpanWithinTree, cancellationToken);\n                finder.Visit(tree.GetRoot(cancellationToken));\n            } 990458"];
13753 [label="tree.ReportDocumentationCommentDiagnostics() 990459"];
13754 [label="param ReportDocumentationCommentDiagnostics(this SyntaxTree tree) 990460"];
13755 [label="return tree.Options.DocumentationMode >= DocumentationMode.Diagnose; 990461"];
13756 [label="tree.Options 990462"];
13757 [label="get\n            {\n                return this.Options;\n            } 990463"];
13758 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 990464"];
13759 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 990465"];
13760 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 990466"];
13761 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 990467"];
13762 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 990468"];
13763 [label="param ReportUnusedImports(SyntaxTree? filterTree) 990469"];
13764 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 990470"];
13765 [label="param ReportUnusedImports(CancellationToken cancellationToken) 990471"];
13766 [label="param ReportUnusedImports(this) 990472"];
13767 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 990473"];
13768 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 990474"];
13769 [label="CompleteTrees(filterTree); 990475"];
13770 [label="CompleteTrees(filterTree) 990476"];
13771 [label="param CompleteTrees(SyntaxTree? filterTree) 990477"];
13772 [label="param CompleteTrees(this) 990478"];
13773 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 990479"];
13774 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 990480"];
13775 [label="CompleteTrees(filterTree); 990481"];
13776 [label="get { return this.SourceModule.GetPublicSymbol(); } 990482"];
13777 [label="this.SourceModule 990483"];
13778 [label="get\n            {\n                return Assembly.Modules[0];\n            } 990484"];
13779 [label="Assembly 990485"];
13780 [label="get\n            {\n                return SourceAssembly;\n            } 990486"];
13781 [label="SourceAssembly 990487"];
13782 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 990488"];
13783 [label="GetBoundReferenceManager() 990489"];
13784 [label="param GetBoundReferenceManager(this) 990490"];
13785 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 990491"];
13786 [label="return _referenceManager; 990492"];
13787 [label="GetBoundReferenceManager(); 990493"];
13788 [label="Assembly.Modules 990494"];
13789 [label="return Assembly.Modules[0]; 990495"];
13790 [label="this.SourceModule.GetPublicSymbol() 990496"];
13791 [label="symbol.GetPublicSymbol<IModuleSymbol>() 990497"];
13792 [label=".ISymbol 990498"];
13793 [label="=> UnderlyingSymbol.Name 990499"];
13794 [label="UnderlyingSymbol 990500"];
13795 [label="=> _underlying 990501"];
13796 [label="_underlying 990502"];
13797 [label="UnderlyingSymbol.Name 990503"];
13798 [label="get\n            {\n                return _name;\n            } 990504"];
13799 [label="get { return SourceAssembly.IsDelaySigned; } 990505"];
13800 [label="SourceAssembly 990506"];
13801 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 990507"];
13802 [label="GetBoundReferenceManager() 990508"];
13803 [label="param GetBoundReferenceManager(this) 990509"];
13804 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 990510"];
13805 [label="return _referenceManager; 990511"];
13806 [label="GetBoundReferenceManager(); 990512"];
13807 [label="SourceAssembly.IsDelaySigned 990513"];
13808 [label="_compilation.Options 990514"];
13809 [label="get\n            {\n                return _options;\n            } 990515"];
13810 [label="if (_compilation.Options.DelaySign.HasValue)\n                {\n                    return _compilation.Options.DelaySign.Value;\n                } 990516"];
13811 [label="_compilation.Options 990517"];
13812 [label="get\n            {\n                return _options;\n            } 990518"];
13813 [label="if (_compilation.Options.PublicSign)\n                {\n                    return false;\n                } 990519"];
13814 [label="this.AssemblyDelaySignAttributeSetting 990520"];
13815 [label="var defaultValue = ThreeState.Unknown; 990521"];
13816 [label="var fieldValue = defaultValue; 990522"];
13817 [label="GetSourceDecodedWellKnownAttributeData() 990523"];
13818 [label="if (attributesBag == null || !attributesBag.IsDecodedWellKnownAttributeDataComputed)\n            {\n                attributesBag = this.GetSourceAttributesBag();\n            } 990524"];
13819 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 990525"];
13820 [label="var data = GetSourceDecodedWellKnownAttributeData(); 990526"];
13821 [label="if (data != null)\n                {\n                    fieldValue = data.AssemblyDelaySignAttributeSetting;\n                } 990527"];
13822 [label="if (data != null)\n                {\n                    fieldValue = data.AssemblyDelaySignAttributeSetting;\n                } 990528"];
13823 [label="if (fieldValue == defaultValue)\n                {\n                    data = GetNetModuleDecodedWellKnownAttributeData();\n                    if (data != null)\n                    {\n                        fieldValue = data.AssemblyDelaySignAttributeSetting;\n                    }\n                } 990529"];
13824 [label="GetNetModuleDecodedWellKnownAttributeData() 990530"];
13825 [label="this.GetNetModuleAttributesBag() 990531"];
13826 [label="EnsureNetModuleAttributesAreBound() 990532"];
13827 [label="if (_lazyNetModuleAttributesBag == null)\n            {\n                LoadAndValidateNetModuleAttributes(ref _lazyNetModuleAttributesBag);\n            } 990533"];
13828 [label="EnsureNetModuleAttributesAreBound(); 990534"];
13829 [label="return _lazyNetModuleAttributesBag; 990535"];
13830 [label="var attributesBag = this.GetNetModuleAttributesBag(); 990536"];
13831 [label="Debug.Assert(attributesBag.IsSealed); 990537"];
13832 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 990538"];
13833 [label="data = GetNetModuleDecodedWellKnownAttributeData(); 990539"];
13834 [label="if (data != null)\n                    {\n                        fieldValue = data.AssemblyDelaySignAttributeSetting;\n                    } 990540"];
13835 [label="if (data != null)\n                    {\n                        fieldValue = data.AssemblyDelaySignAttributeSetting;\n                    } 990541"];
13836 [label="return fieldValue; 990542"];
13837 [label="return (this.AssemblyDelaySignAttributeSetting == ThreeState.True); 990543"];
13838 [label="return SourceAssembly.IsDelaySigned; 990544"];
13839 [label="get { return SourceAssembly.StrongNameKeys; } 990545"];
13840 [label="SourceAssembly 990546"];
13841 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 990547"];
13842 [label="GetBoundReferenceManager() 990548"];
13843 [label="param GetBoundReferenceManager(this) 990549"];
13844 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 990550"];
13845 [label="return _referenceManager; 990551"];
13846 [label="GetBoundReferenceManager(); 990552"];
13847 [label="SourceAssembly.StrongNameKeys 990553"];
13848 [label="if (_lazyStrongNameKeys == null)\n                {\n                    try\n                    {\n                        t_assemblyForWhichCurrentThreadIsComputingKeys = this;\n                        Interlocked.CompareExchange(ref _lazyStrongNameKeys, ComputeStrongNameKeys(), null);\n                    }\n                    finally\n                    {\n                        t_assemblyForWhichCurrentThreadIsComputingKeys = null;\n                    }\n                } 990554"];
13849 [label="param GetCorLibraryReferenceToEmit(CodeAnalysis.Emit.EmitContext context) 990555"];
13850 [label="param GetCorLibraryReferenceToEmit(this) 990556"];
13851 [label="CorLibrary 990557"];
13852 [label="get { return SourceModule.ContainingSourceAssembly.CorLibrary; } 990558"];
13853 [label="SourceModule.ContainingSourceAssembly 990559"];
13854 [label="get\n            {\n                return _assemblySymbol;\n            } 990560"];
13855 [label="return SourceModule.ContainingSourceAssembly.CorLibrary; 990561"];
13856 [label="SourceModule.ContainingSourceAssembly.CorLibrary 990562"];
13857 [label="get\n            {\n                return _corLibrary;\n            } 990563"];
13858 [label="AssemblySymbol corLibrary = CorLibrary; 990564"];
13859 [label="corLibrary.IsMissing 990565"];
13860 [label="get\n            {\n                return true;\n            } 990566"];
13861 [label="return true; 990567"];
13862 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 990568"];
13863 [label="return null; 990569"];
13864 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 990570"];
13865 [label="param GetAssemblyReferencesFromAddedModules(DiagnosticBag diagnostics) 990571"];
13866 [label="param GetAssemblyReferencesFromAddedModules(this) 990572"];
13867 [label="SourceModule.ContainingAssembly 990573"];
13868 [label="get\n            {\n                return _assemblySymbol;\n            } 990574"];
13869 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 990575"];
13870 [label="SourceModule.ContainingAssembly.Modules 990576"];
13871 [label="get\n            {\n                return _modules;\n            } 990577"];
13872 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 990578"];
13873 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 990579"];
13874 [label="foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                } 990580"];
13875 [label="modules[i].GetReferencedAssemblySymbols() 990581"];
13876 [label="param GetReferencedAssemblySymbols(this) 990582"];
13877 [label="AssertReferencesInitialized() 990583"];
13878 [label="param AssertReferencesInitialized(this) 990584"];
13879 [label="Debug.Assert(_moduleReferences != null); 990585"];
13880 [label="Debug.Assert(_moduleReferences != null); 990586"];
13881 [label="AssertReferencesInitialized(); 990587"];
13882 [label="yield return Translate(aRef, diagnostics); 990588"];
13883 [label="yield return Translate(aRef, diagnostics); 990589"];
13884 [label="Translate(aRef, diagnostics) 990590"];
13885 [label="param Translate(AssemblySymbol assembly) 990591"];
13886 [label="param Translate(DiagnosticBag diagnostics) 990592"];
13887 [label="param Translate(this) 990593"];
13888 [label="SourceModule.ContainingAssembly 990594"];
13889 [label="get\n            {\n                return _assemblySymbol;\n            } 990595"];
13890 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 990596"];
13891 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 990597"];
13892 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 990598"];
13893 [label="Cci.IModuleReference reference; 990599"];
13894 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 990600"];
13895 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 990601"];
13896 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 990602"];
13897 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 990603"];
13898 [label="param GetHashCode(this) 990604"];
13899 [label="return identity.GetHashCode(); 990605"];
13900 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 990606"];
13901 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 990607"];
13902 [label="new AssemblyReference(assembly) 990608"];
13903 [label="param AssemblyReference(AssemblySymbol assemblySymbol) 990609"];
13904 [label="param AssemblyReference(this) 990610"];
13905 [label="_targetAssembly 990611"];
13906 [label="Debug.Assert((object)assemblySymbol != null); 990612"];
13907 [label="Debug.Assert((object)assemblySymbol != null); 990613"];
13908 [label="_targetAssembly 990614"];
13909 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 990615"];
13910 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 990616"];
13911 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 990617"];
13912 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 990618"];
13913 [label="if (cachedAsmRef == asmRef)\n            {\n                ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics);\n            } 990619"];
13914 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 990620"];
13915 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 990621"];
13916 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 990622"];
13917 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics) 990623"];
13918 [label="param ValidateReferencedAssembly(AssemblySymbol assembly) 990624"];
13919 [label="param ValidateReferencedAssembly(AssemblyReference asmRef) 990625"];
13920 [label="param ValidateReferencedAssembly(DiagnosticBag diagnostics) 990626"];
13921 [label="param ValidateReferencedAssembly(this) 990627"];
13922 [label="SourceModule.ContainingAssembly 990628"];
13923 [label="get\n            {\n                return _assemblySymbol;\n            } 990629"];
13924 [label="AssemblyIdentity asmIdentity = SourceModule.ContainingAssembly.Identity; 990630"];
13925 [label="SourceModule.ContainingAssembly.Identity 990631"];
13926 [label="get\n            {\n                if (lazyAssemblyIdentity == null)\n                    Interlocked.CompareExchange(ref lazyAssemblyIdentity, ComputeIdentity(), null);\n\n                return lazyAssemblyIdentity;\n            } 990632"];
13927 [label="return lazyAssemblyIdentity; 990633"];
13928 [label="asmRef.Identity 990634"];
13929 [label="=> _targetAssembly.Identity 990635"];
13930 [label="_targetAssembly.Identity 990636"];
13931 [label="get\n            {\n                return identity;\n            } 990637"];
13932 [label="AssemblyIdentity refIdentity = asmRef.Identity; 990638"];
13933 [label="if (asmIdentity.IsStrongName && !refIdentity.IsStrongName &&\n                asmRef.Identity.ContentType != AssemblyContentType.WindowsRuntime)\n            {\n                // Dev12 reported error, we have changed it to a warning to allow referencing libraries \n                // built for platforms that don't support strong names.\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName, assembly), NoLocation.Singleton);\n            } 990639"];
13934 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 990640"];
13935 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 990641"];
13936 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 990642"];
13937 [label="assembly.Machine 990643"];
13938 [label="get\n            {\n                return Modules[0].Machine;\n            } 990644"];
13939 [label="get\n            {\n                if (_lazyModules.IsDefault)\n                {\n                    _lazyModules = ImmutableArray.Create<ModuleSymbol>(moduleSymbol);\n                }\n\n                return _lazyModules;\n            } 990645"];
13940 [label="if (_lazyModules.IsDefault)\n                {\n                    _lazyModules = ImmutableArray.Create<ModuleSymbol>(moduleSymbol);\n                } 990646"];
13941 [label="_lazyModules = ImmutableArray.Create<ModuleSymbol>(moduleSymbol); 990647"];
13942 [label="_lazyModules 990648"];
13943 [label="return _lazyModules; 990649"];
13944 [label="Modules[0].Machine 990650"];
13945 [label="get\n            {\n                return Machine.I386;\n            } 990651"];
13946 [label="return Machine.I386; 990652"];
13947 [label="var refMachine = assembly.Machine; 990653"];
13948 [label="assembly.CorLibrary 990654"];
13949 [label="get\n            {\n                return _corLibrary;\n            } 990655"];
13950 [label="return _corLibrary; 990656"];
13951 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 990657"];
13952 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 990658"];
13953 [label="assembly.Bit32Required 990659"];
13954 [label="get\n            {\n                return Modules[0].Bit32Required;\n            } 990660"];
13955 [label="get\n            {\n                if (_lazyModules.IsDefault)\n                {\n                    _lazyModules = ImmutableArray.Create<ModuleSymbol>(moduleSymbol);\n                }\n\n                return _lazyModules;\n            } 990661"];
13956 [label="if (_lazyModules.IsDefault)\n                {\n                    _lazyModules = ImmutableArray.Create<ModuleSymbol>(moduleSymbol);\n                } 990662"];
13957 [label="return _lazyModules; 990663"];
13958 [label="Modules[0].Bit32Required 990664"];
13959 [label="get\n            {\n                return false;\n            } 990665"];
13960 [label="return false; 990666"];
13961 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 990667"];
13962 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 990668"];
13963 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 990669"];
13964 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 990670"];
13965 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 990671"];
13966 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 990672"];
13967 [label="assembly.Modules 990673"];
13968 [label="get\n            {\n                if (_lazyModules.IsDefault)\n                {\n                    _lazyModules = ImmutableArray.Create<ModuleSymbol>(moduleSymbol);\n                }\n\n                return _lazyModules;\n            } 990674"];
13969 [label="if (_lazyModules.IsDefault)\n                {\n                    _lazyModules = ImmutableArray.Create<ModuleSymbol>(moduleSymbol);\n                } 990675"];
13970 [label="return _lazyModules; 990676"];
13971 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 990677"];
13972 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 990678"];
13973 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 990679"];
13974 [label="param GetHashCode(this) 990680"];
13975 [label="assembly.GetHashCode() 990681"];
13976 [label="param GetHashCode(this) 990682"];
13977 [label="return assembly.GetHashCode(); 990683"];
13978 [label="param Equals(object obj) 990684"];
13979 [label="param Equals(this) 990685"];
13980 [label="return this.Equals(obj as Symbol, SymbolEqualityComparer.Default.CompareKind); 990686"];
13981 [label="return this.Equals(obj as Symbol, SymbolEqualityComparer.Default.CompareKind); 990687"];
13982 [label="this.Equals(obj as Symbol, SymbolEqualityComparer.Default.CompareKind) 990688"];
13983 [label="param Equals(Symbol obj) 990689"];
13984 [label="param Equals(TypeCompareKind compareKind) 990690"];
13985 [label="param Equals(this) 990691"];
13986 [label="return Equals(obj as MissingAssemblySymbol); 990692"];
13987 [label="Equals(obj as MissingAssemblySymbol) 990693"];
13988 [label="param Equals(MissingAssemblySymbol other) 990694"];
13989 [label="param Equals(this) 990695"];
13990 [label="if ((object)other == null)\n            {\n                return false;\n            } 990696"];
13991 [label="if ((object)other == null)\n            {\n                return false;\n            } 990697"];
13992 [label="return false; 990698"];
13993 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 990699"];
13994 [label="return cachedAsmRef; 990700"];
13995 [label="yield return Translate(aRef, diagnostics); 990701"];
13996 [label="param Translate(DiagnosticBag diagnostics) 990702"];
13997 [label="SourceModule.ContainingAssembly 990703"];
13998 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 990704"];
13999 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 990705"];
14000 [label="param Equals(this) 990706"];
14001 [label="param Equals(Symbol obj) 990707"];
14002 [label="param Equals(TypeCompareKind compareKind) 990708"];
14003 [label="param Equals(this) 990709"];
14004 [label="if (ReferenceEquals(this, obj))\n            {\n                return true;\n            } 990710"];
14005 [label="if (ReferenceEquals(this, obj))\n            {\n                return true;\n            } 990711"];
14006 [label="if (ReferenceEquals(this, obj))\n            {\n                return true;\n            } 990712"];
14007 [label="MissingModuleSymbol other = obj as MissingModuleSymbol; 990713"];
14008 [label="return (object)other != null && assembly.Equals(other.assembly, compareKind); 990714"];
14009 [label="return (object)other != null && assembly.Equals(other.assembly, compareKind); 990715"];
14010 [label="param Equals(TypeCompareKind compareKind) 990716"];
14011 [label="param Equals(this) 990717"];
14012 [label="param Equals(this) 990718"];
14013 [label="if (ReferenceEquals(this, other))\n            {\n                return true;\n            } 990719"];
14014 [label="if (ReferenceEquals(this, other))\n            {\n                return true;\n            } 990720"];
14015 [label="return true; 990721"];
14016 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 990722"];
14017 [label="return (Cci.IAssemblyReference)reference; 990723"];
14018 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 990724"];
14019 [label="=> _targetAssembly.Identity 990725"];
14020 [label="_targetAssembly.Identity 990726"];
14021 [label="get\n            {\n                return identity;\n            } 990727"];
14022 [label="param GetFiles(EmitContext context) 990728"];
14023 [label="param GetFiles(this) 990729"];
14024 [label="if (!context.IsRefAssembly)\n            {\n                return getFiles(ref _lazyFiles, context, _sourceAssembly);\n            } 990730"];
14025 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 990731"];
14026 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 990732"];
14027 [label="getFiles(ref _lazyFiles, context, _sourceAssembly) 990733"];
14028 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 990734"];
14029 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 990735"];
14030 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 990736"];
14031 [label="if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                } 990737"];
14032 [label="var builder = ArrayBuilder<Cci.IFileReference>.GetInstance(); 990738"];
14033 [label="sourceAssSymbol.Modules 990739"];
14034 [label="var modules = sourceAssSymbol.Modules; 990740"];
14035 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 990741"];
14036 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 990742"];
14037 [label="builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics)); 990743"];
14038 [label="builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics)); 990744"];
14039 [label="Translate(modules[i], contxt.Diagnostics) 990745"];
14040 [label="param Translate(ModuleSymbol module) 990746"];
14041 [label="param Translate(DiagnosticBag diagnostics) 990747"];
14042 [label="param Translate(this) 990748"];
14043 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 990749"];
14044 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 990750"];
14045 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 990751"];
14046 [label="if ((object)module == null)\n            {\n                return null;\n            } 990752"];
14047 [label="if ((object)module == null)\n            {\n                return null;\n            } 990753"];
14048 [label="Cci.IModuleReference moduleRef; 990754"];
14049 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 990755"];
14050 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 990756"];
14051 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 990757"];
14052 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 990758"];
14053 [label="moduleRef = TranslateModule(module, diagnostics); 990759"];
14054 [label="moduleRef = TranslateModule(module, diagnostics); 990760"];
14055 [label="TranslateModule(module, diagnostics) 990761"];
14056 [label="param TranslateModule(ModuleSymbol module) 990762"];
14057 [label="param TranslateModule(DiagnosticBag diagnostics) 990763"];
14058 [label="param TranslateModule(this) 990764"];
14059 [label="module.ContainingAssembly 990765"];
14060 [label="get\n            {\n                return _assemblySymbol;\n            } 990766"];
14061 [label="return _assemblySymbol; 990767"];
14062 [label="AssemblySymbol container = module.ContainingAssembly; 990768"];
14063 [label="if ((object)container != null && ReferenceEquals(container.Modules[0], module))\n            {\n                Cci.IModuleReference moduleRef = new AssemblyReference(container);\n                Cci.IModuleReference cachedModuleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(container, moduleRef);\n\n                if (cachedModuleRef == moduleRef)\n                {\n                    ValidateReferencedAssembly(container, (AssemblyReference)moduleRef, diagnostics);\n                }\n                else\n                {\n                    moduleRef = cachedModuleRef;\n                }\n\n                return moduleRef;\n            }\n            else\n            {\n                return new ModuleReference(this, module);\n            } 990769"];
14064 [label="if ((object)container != null && ReferenceEquals(container.Modules[0], module))\n            {\n                Cci.IModuleReference moduleRef = new AssemblyReference(container);\n                Cci.IModuleReference cachedModuleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(container, moduleRef);\n\n                if (cachedModuleRef == moduleRef)\n                {\n                    ValidateReferencedAssembly(container, (AssemblyReference)moduleRef, diagnostics);\n                }\n                else\n                {\n                    moduleRef = cachedModuleRef;\n                }\n\n                return moduleRef;\n            }\n            else\n            {\n                return new ModuleReference(this, module);\n            } 990770"];
14065 [label="container.Modules 990771"];
14066 [label="get\n            {\n                return _modules;\n            } 990772"];
14067 [label="if ((object)container != null && ReferenceEquals(container.Modules[0], module))\n            {\n                Cci.IModuleReference moduleRef = new AssemblyReference(container);\n                Cci.IModuleReference cachedModuleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(container, moduleRef);\n\n                if (cachedModuleRef == moduleRef)\n                {\n                    ValidateReferencedAssembly(container, (AssemblyReference)moduleRef, diagnostics);\n                }\n                else\n                {\n                    moduleRef = cachedModuleRef;\n                }\n\n                return moduleRef;\n            }\n            else\n            {\n                return new ModuleReference(this, module);\n            } 990773"];
14068 [label="if ((object)container != null && ReferenceEquals(container.Modules[0], module))\n            {\n                Cci.IModuleReference moduleRef = new AssemblyReference(container);\n                Cci.IModuleReference cachedModuleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(container, moduleRef);\n\n                if (cachedModuleRef == moduleRef)\n                {\n                    ValidateReferencedAssembly(container, (AssemblyReference)moduleRef, diagnostics);\n                }\n                else\n                {\n                    moduleRef = cachedModuleRef;\n                }\n\n                return moduleRef;\n            }\n            else\n            {\n                return new ModuleReference(this, module);\n            } 990774"];
14069 [label="return new ModuleReference(this, module); 990775"];
14070 [label="return new ModuleReference(this, module); 990776"];
14071 [label="return new ModuleReference(this, module); 990777"];
14072 [label="new ModuleReference(this, module) 990778"];
14073 [label="param ModuleReference(PEModuleBuilder moduleBeingBuilt) 990779"];
14074 [label="param ModuleReference(ModuleSymbol underlyingModule) 990780"];
14075 [label="param ModuleReference(this) 990781"];
14076 [label="_moduleBeingBuilt 990782"];
14077 [label="_underlyingModule 990783"];
14078 [label="Debug.Assert(moduleBeingBuilt != null); 990784"];
14079 [label="Debug.Assert(moduleBeingBuilt != null); 990785"];
14080 [label="Debug.Assert((object)underlyingModule != null); 990786"];
14081 [label="Debug.Assert((object)underlyingModule != null); 990787"];
14082 [label="_moduleBeingBuilt 990788"];
14083 [label="_underlyingModule 990789"];
14084 [label="moduleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(module, moduleRef); 990790"];
14085 [label="moduleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(module, moduleRef); 990791"];
14086 [label="moduleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(module, moduleRef); 990792"];
14087 [label="moduleRef = AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(module, moduleRef); 990793"];
14088 [label="return moduleRef; 990794"];
14089 [label="builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics)); 990795"];
14090 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 990796"];
14091 [label="foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            } 990797"];
14092 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 990798"];
14093 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 990799"];
14094 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 990800"];
14095 [label="sourceAssSymbol.HashAlgorithm 990801"];
14096 [label="get\n            {\n                return AssemblyAlgorithmIdAttributeSetting ?? AssemblyHashAlgorithm.Sha1;\n            } 990802"];
14097 [label="AssemblyAlgorithmIdAttributeSetting 990803"];
14098 [label="get\n            {\n                var fieldValue = (AssemblyHashAlgorithm?)null;\n\n                var data = GetSourceDecodedWellKnownAttributeData();\n                if (data != null)\n                {\n                    fieldValue = data.AssemblyAlgorithmIdAttributeSetting;\n                }\n\n                if (!fieldValue.HasValue)\n                {\n                    data = GetNetModuleDecodedWellKnownAttributeData();\n                    if (data != null)\n                    {\n                        fieldValue = data.AssemblyAlgorithmIdAttributeSetting;\n                    }\n                }\n\n                return fieldValue;\n            } 990804"];
14099 [label="var fieldValue = (AssemblyHashAlgorithm?)null; 990805"];
14100 [label="GetSourceDecodedWellKnownAttributeData() 990806"];
14101 [label="param GetSourceDecodedWellKnownAttributeData(this) 990807"];
14102 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 990808"];
14103 [label="var data = GetSourceDecodedWellKnownAttributeData(); 990809"];
14104 [label="if (data != null)\n                {\n                    fieldValue = data.AssemblyAlgorithmIdAttributeSetting;\n                } 990810"];
14105 [label="if (data != null)\n                {\n                    fieldValue = data.AssemblyAlgorithmIdAttributeSetting;\n                } 990811"];
14106 [label="if (!fieldValue.HasValue)\n                {\n                    data = GetNetModuleDecodedWellKnownAttributeData();\n                    if (data != null)\n                    {\n                        fieldValue = data.AssemblyAlgorithmIdAttributeSetting;\n                    }\n                } 990812"];
14107 [label="GetNetModuleDecodedWellKnownAttributeData() 990813"];
14108 [label="param GetNetModuleDecodedWellKnownAttributeData(this) 990814"];
14109 [label="EnsureNetModuleAttributesAreBound(); 990815"];
14110 [label="return _lazyNetModuleAttributesBag; 990816"];
14111 [label="var attributesBag = this.GetNetModuleAttributesBag(); 990817"];
14112 [label="Debug.Assert(attributesBag.IsSealed); 990818"];
14113 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 990819"];
14114 [label="data = GetNetModuleDecodedWellKnownAttributeData(); 990820"];
14115 [label="if (data != null)\n                    {\n                        fieldValue = data.AssemblyAlgorithmIdAttributeSetting;\n                    } 990821"];
14116 [label="if (data != null)\n                    {\n                        fieldValue = data.AssemblyAlgorithmIdAttributeSetting;\n                    } 990822"];
14117 [label="return fieldValue; 990823"];
14118 [label="return AssemblyAlgorithmIdAttributeSetting ?? AssemblyHashAlgorithm.Sha1; 990824"];
14119 [label="return AssemblyAlgorithmIdAttributeSetting ?? AssemblyHashAlgorithm.Sha1; 990825"];
14120 [label="if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            } 990826"];
14121 [label="builder.Free(); 990827"];
14122 [label="return lazyFiles; 990828"];
14123 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 990829"];
14124 [label="get\n            {\n                return _underlyingModule.Name;\n            } 990830"];
14125 [label="_underlyingModule.Name 990831"];
14126 [label="get\n            {\n                return _module.Name;\n            } 990832"];
14127 [label="return _module.Name; 990833"];
14128 [label="return _underlyingModule.Name; 990834"];
14129 [label="=> _embeddedTypesManagerOpt 990835"];
14130 [label="_embeddedTypesManagerOpt 990836"];
14131 [label="param GetAnonymousTypeDefinitions(EmitContext context) 990837"];
14132 [label="param GetAnonymousTypeDefinitions(this) 990838"];
14133 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 990839"];
14134 [label="Compilation.AnonymousTypeManager 990840"];
14135 [label="get\n            {\n                return _anonymousTypeManager;\n            } 990841"];
14136 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 990842"];
14137 [label="Compilation.AnonymousTypeManager.GetAllCreatedTemplates() 990843"];
14138 [label="param GetAllCreatedTemplates(this) 990844"];
14139 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 990845"];
14140 [label="var anonymousTypes = ArrayBuilder<AnonymousTypeTemplateSymbol>.GetInstance(); 990846"];
14141 [label="GetCreatedAnonymousTypeTemplates(anonymousTypes); 990847"];
14142 [label="GetCreatedAnonymousTypeTemplates(anonymousTypes) 990848"];
14143 [label="param GetCreatedAnonymousTypeTemplates(ArrayBuilder<AnonymousTypeTemplateSymbol> builder) 990849"];
14144 [label="param GetCreatedAnonymousTypeTemplates(this) 990850"];
14145 [label="Debug.Assert(!builder.Any()); 990851"];
14146 [label="var anonymousTypes = _lazyAnonymousTypeTemplates; 990852"];
14147 [label="if (anonymousTypes != null)\n            {\n                foreach (var template in anonymousTypes.Values)\n                {\n                    if (ReferenceEquals(template.Manager, this))\n                    {\n                        builder.Add(template);\n                    }\n                }\n                // Sort type templates using smallest location\n                builder.Sort(new AnonymousTypeComparer(this.Compilation));\n            } 990853"];
14148 [label="if (anonymousTypes != null)\n            {\n                foreach (var template in anonymousTypes.Values)\n                {\n                    if (ReferenceEquals(template.Manager, this))\n                    {\n                        builder.Add(template);\n                    }\n                }\n                // Sort type templates using smallest location\n                builder.Sort(new AnonymousTypeComparer(this.Compilation));\n            } 990854"];
14149 [label="GetCreatedAnonymousTypeTemplates(anonymousTypes); 990855"];
14150 [label="builder.AddRange(anonymousTypes); 990856"];
14151 [label="builder.AddRange(anonymousTypes); 990857"];
14152 [label="anonymousTypes.Free(); 990858"];
14153 [label="var synthesizedDelegates = ArrayBuilder<SynthesizedDelegateSymbol>.GetInstance(); 990859"];
14154 [label="GetCreatedSynthesizedDelegates(synthesizedDelegates); 990860"];
14155 [label="GetCreatedSynthesizedDelegates(synthesizedDelegates) 990861"];
14156 [label="param GetCreatedSynthesizedDelegates(ArrayBuilder<SynthesizedDelegateSymbol> builder) 990862"];
14157 [label="param GetCreatedSynthesizedDelegates(this) 990863"];
14158 [label="Debug.Assert(!builder.Any()); 990864"];
14159 [label="var delegates = _lazySynthesizedDelegates; 990865"];
14160 [label="if (delegates != null)\n            {\n                foreach (var template in delegates.Values)\n                {\n                    if (ReferenceEquals(template.Manager, this))\n                    {\n                        builder.Add(template.Delegate);\n                    }\n                }\n                builder.Sort(SynthesizedDelegateSymbolComparer.Instance);\n            } 990866"];
14161 [label="if (delegates != null)\n            {\n                foreach (var template in delegates.Values)\n                {\n                    if (ReferenceEquals(template.Manager, this))\n                    {\n                        builder.Add(template.Delegate);\n                    }\n                }\n                builder.Sort(SynthesizedDelegateSymbolComparer.Instance);\n            } 990867"];
14162 [label="GetCreatedSynthesizedDelegates(synthesizedDelegates); 990868"];
14163 [label="builder.AddRange(synthesizedDelegates); 990869"];
14164 [label="builder.AddRange(synthesizedDelegates); 990870"];
14165 [label="synthesizedDelegates.Free(); 990871"];
14166 [label="return builder.ToImmutableAndFree(); 990872"];
14167 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 990873"];
14168 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 990874"];
14169 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 990875"];
14170 [label="param GetAdditionalTopLevelTypeDefinitions(EmitContext context) 990876"];
14171 [label="param GetAdditionalTopLevelTypeDefinitions(this) 990877"];
14172 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 990878"];
14173 [label="GetAdditionalTopLevelTypes(context.Diagnostics) 990879"];
14174 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 990880"];
14175 [label="=> _additionalTypes 990881"];
14176 [label="_additionalTypes 990882"];
14177 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 990883"];
14178 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 990884"];
14179 [label="param GetEmbeddedTypeDefinitions(EmitContext context) 990885"];
14180 [label="param GetEmbeddedTypeDefinitions(this) 990886"];
14181 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 990887"];
14182 [label="GetEmbeddedTypes(context.Diagnostics) 990888"];
14183 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 990889"];
14184 [label="param GetEmbeddedTypes(this) 990890"];
14185 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 990891"];
14186 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 990892"];
14187 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 990893"];
14188 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 990894"];
14189 [label="param CreateEmbeddedAttributesIfNeeded(this) 990895"];
14190 [label="GetNeedsGeneratedAttributes() 990896"];
14191 [label="param GetNeedsGeneratedAttributes(this) 990897"];
14192 [label="_needsGeneratedAttributes_IsFrozen = true; 990898"];
14193 [label="_needsGeneratedAttributes_IsFrozen 990899"];
14194 [label="GetNeedsGeneratedAttributesInternal() 990900"];
14195 [label="param GetNeedsGeneratedAttributesInternal(this) 990901"];
14196 [label="Compilation.GetNeedsGeneratedAttributes() 990902"];
14197 [label="param GetNeedsGeneratedAttributes(this) 990903"];
14198 [label="_needsGeneratedAttributes_IsFrozen = true; 990904"];
14199 [label="return (EmbeddableAttributes)_needsGeneratedAttributes; 990905"];
14200 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 990906"];
14201 [label="return GetNeedsGeneratedAttributesInternal(); 990907"];
14202 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 990908"];
14203 [label="ShouldEmitNullablePublicOnlyAttribute() 990909"];
14204 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 990910"];
14205 [label="Compilation.GetUsesNullableAttributes() 990911"];
14206 [label="param GetUsesNullableAttributes(this) 990912"];
14207 [label="_needsGeneratedAttributes_IsFrozen = true; 990913"];
14208 [label="return _usesNullableAttributes; 990914"];
14209 [label="return Compilation.GetUsesNullableAttributes() && Compilation.EmitNullablePublicOnly; 990915"];
14210 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 990916"];
14211 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 990917"];
14212 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 990918"];
14213 [label="return; 990919"];
14214 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 990920"];
14215 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 990921"];
14216 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 990922"];
14217 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 990923"];
14218 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 990924"];
14219 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 990925"];
14220 [label="builder.AddIfNotNull(_lazyNullableAttribute); 990926"];
14221 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 990927"];
14222 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 990928"];
14223 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 990929"];
14224 [label="return builder.ToImmutableAndFree(); 990930"];
14225 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 990931"];
14226 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 990932"];
14227 [label="param GetTopLevelSourceTypeDefinitions(EmitContext context) 990933"];
14228 [label="param GetTopLevelSourceTypeDefinitions(this) 990934"];
14229 [label="var namespacesToProcess = new Stack<NamespaceSymbol>(); 990935"];
14230 [label="SourceModule.GlobalNamespace 990936"];
14231 [label="get\n            {\n                if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                }\n\n                return _globalNamespace;\n            } 990937"];
14232 [label="if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                } 990938"];
14233 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 990939"];
14234 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 990940"];
14235 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 990941"];
14236 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 990942"];
14237 [label="var ns = namespacesToProcess.Pop(); 990943"];
14238 [label="ns.GetMembers() 990944"];
14239 [label="param GetMembers(this) 990945"];
14240 [label="return _lazyAllMembers; 990946"];
14241 [label="foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                } 990947"];
14242 [label="param GetTopLevelSourceTypeDefinitions(this) 990948"];
14243 [label="param GetSourceAssemblyAttributes(bool isRefAssembly) 990949"];
14244 [label="param GetSourceAssemblyAttributes(this) 990950"];
14245 [label="SourceModule.ContainingSourceAssembly 990951"];
14246 [label="get\n            {\n                return _assemblySymbol;\n            } 990952"];
14247 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 990953"];
14248 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 990954"];
14249 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 990955"];
14250 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 990956"];
14251 [label="SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()) 990957"];
14252 [label="param GetCustomAttributesToEmit(PEModuleBuilder moduleBuilder) 990958"];
14253 [label="param GetCustomAttributesToEmit(bool emittingRefAssembly) 990959"];
14254 [label="param GetCustomAttributesToEmit(bool emittingAssemblyAttributesInNetModule) 990960"];
14255 [label="param GetCustomAttributesToEmit(this) 990961"];
14256 [label="CheckDefinitionInvariant() 990962"];
14257 [label="param CheckDefinitionInvariant(this) 990963"];
14258 [label="this.IsDefinition 990964"];
14259 [label="get\n            {\n                return (object)this == (object)OriginalDefinition;\n            } 990965"];
14260 [label="OriginalDefinition 990966"];
14261 [label="get\n            {\n                return OriginalSymbolDefinition;\n            } 990967"];
14262 [label="OriginalSymbolDefinition 990968"];
14263 [label="get\n            {\n                return this;\n            } 990969"];
14264 [label="return this; 990970"];
14265 [label="return OriginalSymbolDefinition; 990971"];
14266 [label="return (object)this == (object)OriginalDefinition; 990972"];
14267 [label="Debug.Assert(this.IsDefinition); 990973"];
14268 [label="this.ContainingModule 990974"];
14269 [label="get\n            {\n                // Default implementation gets the containers module.\n\n                var container = this.ContainingSymbol;\n                return (object)container != null ? container.ContainingModule : null;\n            } 990975"];
14270 [label="this.ContainingSymbol 990976"];
14271 [label="get\n            {\n                return null;\n            } 990977"];
14272 [label="return null; 990978"];
14273 [label="var container = this.ContainingSymbol; 990979"];
14274 [label="return (object)container != null ? container.ContainingModule : null; 990980"];
14275 [label="return (object)container != null ? container.ContainingModule : null; 990981"];
14276 [label="(object)container != null 990982"];
14277 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 990983"];
14278 [label="this.Kind 990984"];
14279 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 990985"];
14280 [label="return SymbolKind.Assembly; 990986"];
14281 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 990987"];
14282 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 990988"];
14283 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 990989"];
14284 [label="CheckDefinitionInvariant(); 990990"];
14285 [label="this.GetAttributes() 990991"];
14286 [label="param GetAttributes(this) 990992"];
14287 [label="this.GetSourceAttributesBag() 990993"];
14288 [label="param GetSourceAttributesBag(this) 990994"];
14289 [label="EnsureAttributesAreBound() 990995"];
14290 [label="if ((_lazySourceAttributesBag == null || !_lazySourceAttributesBag.IsSealed) &&\n                LoadAndValidateAttributes(OneOrMany.Create(GetAttributeDeclarations()), ref _lazySourceAttributesBag))\n            {\n                _state.NotePartComplete(CompletionPart.Attributes);\n            } 990996"];
14291 [label="EnsureAttributesAreBound(); 990997"];
14292 [label="return _lazySourceAttributesBag; 990998"];
14293 [label="var attributes = this.GetSourceAttributesBag().Attributes; 990999"];
14294 [label="this.GetNetModuleAttributesBag() 991000"];
14295 [label="param GetNetModuleAttributesBag(this) 991001"];
14296 [label="EnsureNetModuleAttributesAreBound() 991002"];
14297 [label="if (_lazyNetModuleAttributesBag == null)\n            {\n                LoadAndValidateNetModuleAttributes(ref _lazyNetModuleAttributesBag);\n            } 991003"];
14298 [label="EnsureNetModuleAttributesAreBound(); 991004"];
14299 [label="return _lazyNetModuleAttributesBag; 991005"];
14300 [label="var netmoduleAttributes = this.GetNetModuleAttributesBag().Attributes; 991006"];
14301 [label="Debug.Assert(!attributes.IsDefault); 991007"];
14302 [label="Debug.Assert(!netmoduleAttributes.IsDefault); 991008"];
14303 [label="if (attributes.Length > 0)\n            {\n                if (netmoduleAttributes.Length > 0)\n                {\n                    attributes = attributes.Concat(netmoduleAttributes);\n                }\n            }\n            else\n            {\n                attributes = netmoduleAttributes;\n            } 991009"];
14304 [label="if (attributes.Length > 0)\n            {\n                if (netmoduleAttributes.Length > 0)\n                {\n                    attributes = attributes.Concat(netmoduleAttributes);\n                }\n            }\n            else\n            {\n                attributes = netmoduleAttributes;\n            } 991010"];
14305 [label="attributes = netmoduleAttributes; 991011"];
14306 [label="Debug.Assert(!attributes.IsDefault); 991012"];
14307 [label="return attributes; 991013"];
14308 [label="ImmutableArray<CSharpAttributeData> userDefined = this.GetAttributes(); 991014"];
14309 [label="ArrayBuilder<SynthesizedAttributeData> synthesized = null; 991015"];
14310 [label="this.AddSynthesizedAttributes(moduleBuilder, ref synthesized); 991016"];
14311 [label="this.AddSynthesizedAttributes(moduleBuilder, ref synthesized); 991017"];
14312 [label="this.AddSynthesizedAttributes(moduleBuilder, ref synthesized) 991018"];
14313 [label="param AddSynthesizedAttributes(PEModuleBuilder moduleBuilder) 991019"];
14314 [label="param AddSynthesizedAttributes(ref ArrayBuilder<SynthesizedAttributeData> attributes) 991020"];
14315 [label="param AddSynthesizedAttributes(this) 991021"];
14316 [label="base.AddSynthesizedAttributes(moduleBuilder, ref attributes); 991022"];
14317 [label="base.AddSynthesizedAttributes(moduleBuilder, ref attributes); 991023"];
14318 [label="base.AddSynthesizedAttributes(moduleBuilder, ref attributes) 991024"];
14319 [label="param AddSynthesizedAttributes(PEModuleBuilder moduleBuilder) 991025"];
14320 [label="param AddSynthesizedAttributes(ref ArrayBuilder<SynthesizedAttributeData> attributes) 991026"];
14321 [label="param AddSynthesizedAttributes(this) 991027"];
14322 [label="base.AddSynthesizedAttributes(moduleBuilder, ref attributes); 991028"];
14323 [label="_compilation.Options 991029"];
14324 [label="get\n            {\n                return _options;\n            } 991030"];
14325 [label="CSharpCompilationOptions options = _compilation.Options; 991031"];
14326 [label="bool isBuildingNetModule = options.OutputKind.IsNetModule(); 991032"];
14327 [label="this.ContainsExtensionMethods() 991033"];
14328 [label="param ContainsExtensionMethods(this) 991034"];
14329 [label="if (!_lazyContainsExtensionMethods.HasValue())\n            {\n                _lazyContainsExtensionMethods = ContainsExtensionMethods(_modules).ToThreeState();\n            } 991035"];
14330 [label="_lazyContainsExtensionMethods = ContainsExtensionMethods(_modules).ToThreeState(); 991036"];
14331 [label="ContainsExtensionMethods(_modules) 991037"];
14332 [label="param ContainsExtensionMethods(ImmutableArray<ModuleSymbol> modules) 991038"];
14333 [label="foreach (var module in modules)\n            {\n                if (ContainsExtensionMethods(module.GlobalNamespace))\n                {\n                    return true;\n                }\n            } 991039"];
14334 [label="module.GlobalNamespace 991040"];
14335 [label="if (ContainsExtensionMethods(module.GlobalNamespace))\n                {\n                    return true;\n                } 991041"];
14336 [label="ContainsExtensionMethods(module.GlobalNamespace) 991042"];
14337 [label="param ContainsExtensionMethods(NamespaceSymbol ns) 991043"];
14338 [label="ns.GetMembersUnordered() 991044"];
14339 [label="param GetMembersUnordered(this) 991045"];
14340 [label="foreach (var member in ns.GetMembersUnordered())\n            {\n                switch (member.Kind)\n                {\n                    case SymbolKind.Namespace:\n                        if (ContainsExtensionMethods((NamespaceSymbol)member))\n                        {\n                            return true;\n                        }\n                        break;\n                    case SymbolKind.NamedType:\n                        if (((NamedTypeSymbol)member).MightContainExtensionMethods)\n                        {\n                            return true;\n                        }\n                        break;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                }\n            } 991046"];
14341 [label="return false; 991047"];
14342 [label="if (ContainsExtensionMethods(module.GlobalNamespace))\n                {\n                    return true;\n                } 991048"];
14343 [label="EnsureAllMembersLoaded() 991049"];
14344 [label="EnsureAllMembersLoaded(); 991050"];
14345 [label="foreach (var member in ns.GetMembersUnordered())\n            {\n                switch (member.Kind)\n                {\n                    case SymbolKind.Namespace:\n                        if (ContainsExtensionMethods((NamespaceSymbol)member))\n                        {\n                            return true;\n                        }\n                        break;\n                    case SymbolKind.NamedType:\n                        if (((NamedTypeSymbol)member).MightContainExtensionMethods)\n                        {\n                            return true;\n                        }\n                        break;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                }\n            } 991051"];
14346 [label="member.Kind 991052"];
14347 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 991053"];
14348 [label="switch (member.Kind)\n                {\n                    case SymbolKind.Namespace:\n                        if (ContainsExtensionMethods((NamespaceSymbol)member))\n                        {\n                            return true;\n                        }\n                        break;\n                    case SymbolKind.NamedType:\n                        if (((NamedTypeSymbol)member).MightContainExtensionMethods)\n                        {\n                            return true;\n                        }\n                        break;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                } 991054"];
14349 [label="if (ContainsExtensionMethods((NamespaceSymbol)member))\n                        {\n                            return true;\n                        } 991055"];
14350 [label="ContainsExtensionMethods((NamespaceSymbol)member) 991056"];
14351 [label="param ContainsExtensionMethods(NamespaceSymbol ns) 991057"];
14352 [label="EnsureAllMembersLoaded() 991058"];
14353 [label="param EnsureAllMembersLoaded(this) 991059"];
14354 [label="var typesByNS = _typesByNS; 991060"];
14355 [label="if (lazyTypes == null || lazyNamespaces == null)\n            {\n                System.Diagnostics.Debug.Assert(typesByNS != null);\n                LoadAllMembers(typesByNS);\n                Interlocked.Exchange(ref _typesByNS, null);\n            } 991061"];
14356 [label="if (lazyTypes == null || lazyNamespaces == null)\n            {\n                System.Diagnostics.Debug.Assert(typesByNS != null);\n                LoadAllMembers(typesByNS);\n                Interlocked.Exchange(ref _typesByNS, null);\n            } 991062"];
14357 [label="EnsureAllMembersLoaded(); 991063"];
14358 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 991064"];
14359 [label="((NamedTypeSymbol)member).MightContainExtensionMethods 991065"];
14360 [label="get\n            {\n                var uncommon = GetUncommonProperties();\n                if (uncommon == s_noUncommonProperties)\n                {\n                    return false;\n                }\n\n                if (!uncommon.lazyContainsExtensionMethods.HasValue())\n                {\n                    var contains = ThreeState.False;\n                    // Dev11 supports extension methods defined on non-static\n                    // classes, structs, delegates, and generic types.\n                    switch (this.TypeKind)\n                    {\n                        case TypeKind.Class:\n                        case TypeKind.Struct:\n                        case TypeKind.Delegate:\n                            var moduleSymbol = this.ContainingPEModule;\n                            var module = moduleSymbol.Module;\n                            bool moduleHasExtension = module.HasExtensionAttribute(_handle, ignoreCase: false);\n\n                            var containingAssembly = this.ContainingAssembly as PEAssemblySymbol;\n                            if ((object)containingAssembly != null)\n                            {\n                                contains = (moduleHasExtension\n                                    && containingAssembly.MightContainExtensionMethods).ToThreeState();\n                            }\n                            else\n                            {\n                                contains = moduleHasExtension.ToThreeState();\n                            }\n                            break;\n                    }\n\n                    uncommon.lazyContainsExtensionMethods = contains;\n                }\n\n                return uncommon.lazyContainsExtensionMethods.Value();\n            } 991066"];
14361 [label="GetUncommonProperties() 991067"];
14362 [label="param GetUncommonProperties(this) 991068"];
14363 [label="var result = _lazyUncommonProperties; 991069"];
14364 [label="if (result != null)\n            {\n#if DEBUG\n                Debug.Assert(result != s_noUncommonProperties || result.IsDefaultValue(), 'default value was modified');\n#endif\n                return result;\n            } 991070"];
14365 [label="if (result != null)\n            {\n#if DEBUG\n                Debug.Assert(result != s_noUncommonProperties || result.IsDefaultValue(), 'default value was modified');\n#endif\n                return result;\n            } 991071"];
14366 [label="this.IsUncommon() 991072"];
14367 [label="param IsUncommon(this) 991073"];
14368 [label="this.ContainingPEModule 991074"];
14369 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 991075"];
14370 [label="s.Kind 991076"];
14371 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 991077"];
14372 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 991078"];
14373 [label="if (this.ContainingPEModule.HasAnyCustomAttributes(_handle))\n            {\n                return true;\n            } 991079"];
14374 [label="if (this.ContainingPEModule.HasAnyCustomAttributes(_handle))\n            {\n                return true;\n            } 991080"];
14375 [label="this.ContainingPEModule.HasAnyCustomAttributes(_handle) 991081"];
14376 [label="param HasAnyCustomAttributes(EntityHandle token) 991082"];
14377 [label="param HasAnyCustomAttributes(this) 991083"];
14378 [label="foreach (var attr in _module.GetCustomAttributesOrThrow(token))\n                {\n                    return true;\n                } 991084"];
14379 [label="foreach (var attr in _module.GetCustomAttributesOrThrow(token))\n                {\n                    return true;\n                } 991085"];
14380 [label="return true; 991086"];
14381 [label="return true; 991087"];
14382 [label="if (this.IsUncommon())\n            {\n                result = new UncommonProperties();\n                return Interlocked.CompareExchange(ref _lazyUncommonProperties, result, null) ?? result;\n            } 991088"];
14383 [label="result = new UncommonProperties(); 991089"];
14384 [label="new UncommonProperties() 991090"];
14385 [label="param UncommonProperties(this) 991091"];
14386 [label="lazyEnumUnderlyingType 991092"];
14387 [label="lazyObsoleteAttributeData = ObsoleteAttributeData.Uninitialized 991093"];
14388 [label="lazyAttributeUsageInfo = AttributeUsageInfo.Null 991094"];
14389 [label="lazyContainsExtensionMethods 991095"];
14390 [label="lazyIsByRefLike 991096"];
14391 [label="lazyIsReadOnly 991097"];
14392 [label="lazyDefaultMemberName 991098"];
14393 [label="lazyComImportCoClassType = ErrorTypeSymbol.UnknownResultType 991099"];
14394 [label="lazyHasEmbeddedAttribute = ThreeState.Unknown 991100"];
14395 [label="return Interlocked.CompareExchange(ref _lazyUncommonProperties, result, null) ?? result; 991101"];
14396 [label="return Interlocked.CompareExchange(ref _lazyUncommonProperties, result, null) ?? result; 991102"];
14397 [label="return Interlocked.CompareExchange(ref _lazyUncommonProperties, result, null) ?? result; 991103"];
14398 [label="return Interlocked.CompareExchange(ref _lazyUncommonProperties, result, null) ?? result; 991104"];
14399 [label="var uncommon = GetUncommonProperties(); 991105"];
14400 [label="if (uncommon == s_noUncommonProperties)\n                {\n                    return false;\n                } 991106"];
14401 [label="if (!uncommon.lazyContainsExtensionMethods.HasValue())\n                {\n                    var contains = ThreeState.False;\n                    // Dev11 supports extension methods defined on non-static\n                    // classes, structs, delegates, and generic types.\n                    switch (this.TypeKind)\n                    {\n                        case TypeKind.Class:\n                        case TypeKind.Struct:\n                        case TypeKind.Delegate:\n                            var moduleSymbol = this.ContainingPEModule;\n                            var module = moduleSymbol.Module;\n                            bool moduleHasExtension = module.HasExtensionAttribute(_handle, ignoreCase: false);\n\n                            var containingAssembly = this.ContainingAssembly as PEAssemblySymbol;\n                            if ((object)containingAssembly != null)\n                            {\n                                contains = (moduleHasExtension\n                                    && containingAssembly.MightContainExtensionMethods).ToThreeState();\n                            }\n                            else\n                            {\n                                contains = moduleHasExtension.ToThreeState();\n                            }\n                            break;\n                    }\n\n                    uncommon.lazyContainsExtensionMethods = contains;\n                } 991107"];
14402 [label="var contains = ThreeState.False; 991108"];
14403 [label="this.TypeKind 991109"];
14404 [label="switch (this.TypeKind)\n                    {\n                        case TypeKind.Class:\n                        case TypeKind.Struct:\n                        case TypeKind.Delegate:\n                            var moduleSymbol = this.ContainingPEModule;\n                            var module = moduleSymbol.Module;\n                            bool moduleHasExtension = module.HasExtensionAttribute(_handle, ignoreCase: false);\n\n                            var containingAssembly = this.ContainingAssembly as PEAssemblySymbol;\n                            if ((object)containingAssembly != null)\n                            {\n                                contains = (moduleHasExtension\n                                    && containingAssembly.MightContainExtensionMethods).ToThreeState();\n                            }\n                            else\n                            {\n                                contains = moduleHasExtension.ToThreeState();\n                            }\n                            break;\n                    } 991110"];
14405 [label="this.ContainingPEModule 991111"];
14406 [label="s.Kind 991112"];
14407 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 991113"];
14408 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 991114"];
14409 [label="var moduleSymbol = this.ContainingPEModule; 991115"];
14410 [label="moduleSymbol.Module 991116"];
14411 [label="get\n            {\n                return _module;\n            } 991117"];
14412 [label="var module = moduleSymbol.Module; 991118"];
14413 [label="bool moduleHasExtension = module.HasExtensionAttribute(_handle, ignoreCase: false); 991119"];
14414 [label="bool moduleHasExtension = module.HasExtensionAttribute(_handle, ignoreCase: false); 991120"];
14415 [label="bool moduleHasExtension = module.HasExtensionAttribute(_handle, ignoreCase: false); 991121"];
14416 [label="this.ContainingAssembly 991122"];
14417 [label="get\n            {\n                // Default implementation gets the containers assembly.\n\n                var container = this.ContainingSymbol;\n                return (object)container != null ? container.ContainingAssembly : null;\n            } 991123"];
14418 [label="this.ContainingSymbol 991124"];
14419 [label="get\n            {\n                return _container;\n            } 991125"];
14420 [label="return _container; 991126"];
14421 [label="var container = this.ContainingSymbol; 991127"];
14422 [label="return (object)container != null ? container.ContainingAssembly : null; 991128"];
14423 [label="return (object)container != null ? container.ContainingAssembly : null; 991129"];
14424 [label="(object)container != null 991130"];
14425 [label="container.ContainingAssembly 991131"];
14426 [label="get\n            {\n                return ContainingPEModule.ContainingAssembly;\n            } 991132"];
14427 [label="ContainingPEModule 991133"];
14428 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 991134"];
14429 [label="return ContainingPEModule.ContainingAssembly; 991135"];
14430 [label="ContainingPEModule.ContainingAssembly 991136"];
14431 [label="get\n            {\n                return _assemblySymbol;\n            } 991137"];
14432 [label="var containingAssembly = this.ContainingAssembly as PEAssemblySymbol; 991138"];
14433 [label="if ((object)containingAssembly != null)\n                            {\n                                contains = (moduleHasExtension\n                                    && containingAssembly.MightContainExtensionMethods).ToThreeState();\n                            }\n                            else\n                            {\n                                contains = moduleHasExtension.ToThreeState();\n                            } 991139"];
14434 [label="if ((object)containingAssembly != null)\n                            {\n                                contains = (moduleHasExtension\n                                    && containingAssembly.MightContainExtensionMethods).ToThreeState();\n                            }\n                            else\n                            {\n                                contains = moduleHasExtension.ToThreeState();\n                            } 991140"];
14435 [label="contains = moduleHasExtension.ToThreeState(); 991141"];
14436 [label="uncommon.lazyContainsExtensionMethods 991142"];
14437 [label="return uncommon.lazyContainsExtensionMethods.Value(); 991143"];
14438 [label="if (((NamedTypeSymbol)member).MightContainExtensionMethods)\n                        {\n                            return true;\n                        } 991144"];
14439 [label="return false; 991145"];
14440 [label="if (ContainsExtensionMethods((NamespaceSymbol)member))\n                        {\n                            return true;\n                        } 991146"];
14441 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 991147"];
14442 [label="var result = _lazyUncommonProperties; 991148"];
14443 [label="if (result != null)\n            {\n#if DEBUG\n                Debug.Assert(result != s_noUncommonProperties || result.IsDefaultValue(), 'default value was modified');\n#endif\n                return result;\n            } 991149"];
14444 [label="if (result != null)\n            {\n#if DEBUG\n                Debug.Assert(result != s_noUncommonProperties || result.IsDefaultValue(), 'default value was modified');\n#endif\n                return result;\n            } 991150"];
14445 [label="s.Kind 991151"];
14446 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 991152"];
14447 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 991153"];
14448 [label="return false; 991154"];
14449 [label="this.TypeKind 991155"];
14450 [label="if (this.TypeKind == TypeKind.Enum)\n            {\n                return true;\n            } 991156"];
14451 [label="return false; 991157"];
14452 [label="_lazyUncommonProperties = result = s_noUncommonProperties; 991158"];
14453 [label="_lazyUncommonProperties 991159"];
14454 [label="return result; 991160"];
14455 [label="if (uncommon == s_noUncommonProperties)\n                {\n                    return false;\n                } 991161"];
14456 [label="return false; 991162"];
14457 [label="if (((NamedTypeSymbol)member).MightContainExtensionMethods)\n                        {\n                            return true;\n                        } 991163"];
14458 [label="return false; 991164"];
14459 [label="return false; 991165"];
14460 [label="_lazyContainsExtensionMethods = ContainsExtensionMethods(_modules).ToThreeState(); 991166"];
14461 [label="_lazyContainsExtensionMethods 991167"];
14462 [label="return _lazyContainsExtensionMethods.Value(); 991168"];
14463 [label="bool containsExtensionMethods = this.ContainsExtensionMethods(); 991169"];
14464 [label="if (containsExtensionMethods)\n            {\n                // No need to check if [Extension] attribute was explicitly set since\n                // we'll issue CS1112 error in those cases and won't generate IL.\n                AddSynthesizedAttribute(ref attributes, _compilation.TrySynthesizeAttribute(\n                    WellKnownMember.System_Runtime_CompilerServices_ExtensionAttribute__ctor));\n            } 991170"];
14465 [label="this.Modules 991171"];
14466 [label="get\n            {\n                return _modules;\n            } 991172"];
14467 [label="return _modules; 991173"];
14468 [label="bool emitCompilationRelaxationsAttribute = !isBuildingNetModule && !this.Modules.Any(m => m.HasAssemblyCompilationRelaxationsAttribute); 991174"];
14469 [label="bool emitCompilationRelaxationsAttribute = !isBuildingNetModule && !this.Modules.Any(m => m.HasAssemblyCompilationRelaxationsAttribute); 991175"];
14470 [label="bool emitCompilationRelaxationsAttribute = !isBuildingNetModule && !this.Modules.Any(m => m.HasAssemblyCompilationRelaxationsAttribute); 991176"];
14471 [label="get\n            {\n                CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> decodedData = ((SourceAssemblySymbol)this.ContainingAssembly).GetSourceDecodedWellKnownAttributeData();\n                return decodedData != null && decodedData.HasCompilationRelaxationsAttribute;\n            } 991177"];
14472 [label="this.ContainingAssembly 991178"];
14473 [label="get\n            {\n                return _assemblySymbol;\n            } 991179"];
14474 [label="CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> decodedData = ((SourceAssemblySymbol)this.ContainingAssembly).GetSourceDecodedWellKnownAttributeData(); 991180"];
14475 [label="((SourceAssemblySymbol)this.ContainingAssembly).GetSourceDecodedWellKnownAttributeData() 991181"];
14476 [label="param GetSourceDecodedWellKnownAttributeData(this) 991182"];
14477 [label="if (attributesBag == null || !attributesBag.IsDecodedWellKnownAttributeDataComputed)\n            {\n                attributesBag = this.GetSourceAttributesBag();\n            } 991183"];
14478 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 991184"];
14479 [label="return decodedData != null && decodedData.HasCompilationRelaxationsAttribute; 991185"];
14480 [label="return decodedData != null && decodedData.HasCompilationRelaxationsAttribute; 991186"];
14481 [label="get\n            {\n                var assemblyAttributes = GetAssemblyAttributes();\n                return assemblyAttributes.IndexOfAttribute(this, AttributeDescription.CompilationRelaxationsAttribute) >= 0;\n            } 991187"];
14482 [label="GetAssemblyAttributes() 991188"];
14483 [label="param GetAssemblyAttributes(this) 991189"];
14484 [label="if (_lazyAssemblyAttributes.IsDefault)\n            {\n                ArrayBuilder<CSharpAttributeData> moduleAssemblyAttributesBuilder = null;\n\n                string corlibName = ContainingAssembly.CorLibrary.Name;\n                EntityHandle assemblyMSCorLib = Module.GetAssemblyRef(corlibName);\n                if (!assemblyMSCorLib.IsNil)\n                {\n                    foreach (var qualifier in Cci.MetadataWriter.dummyAssemblyAttributeParentQualifier)\n                    {\n                        EntityHandle typerefAssemblyAttributesGoHere =\n                                    Module.GetTypeRef(\n                                        assemblyMSCorLib,\n                                        Cci.MetadataWriter.dummyAssemblyAttributeParentNamespace,\n                                        Cci.MetadataWriter.dummyAssemblyAttributeParentName + qualifier);\n\n                        if (!typerefAssemblyAttributesGoHere.IsNil)\n                        {\n                            try\n                            {\n                                foreach (var customAttributeHandle in Module.GetCustomAttributesOrThrow(typerefAssemblyAttributesGoHere))\n                                {\n                                    if (moduleAssemblyAttributesBuilder == null)\n                                    {\n                                        moduleAssemblyAttributesBuilder = new ArrayBuilder<CSharpAttributeData>();\n                                    }\n                                    moduleAssemblyAttributesBuilder.Add(new PEAttributeData(this, customAttributeHandle));\n                                }\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                }\n\n                ImmutableInterlocked.InterlockedCompareExchange(\n                    ref _lazyAssemblyAttributes,\n                    (moduleAssemblyAttributesBuilder != null) ? moduleAssemblyAttributesBuilder.ToImmutableAndFree() : ImmutableArray<CSharpAttributeData>.Empty,\n                    default(ImmutableArray<CSharpAttributeData>));\n            } 991190"];
14485 [label="return _lazyAssemblyAttributes; 991191"];
14486 [label="var assemblyAttributes = GetAssemblyAttributes(); 991192"];
14487 [label="return assemblyAttributes.IndexOfAttribute(this, AttributeDescription.CompilationRelaxationsAttribute) >= 0; 991193"];
14488 [label="return assemblyAttributes.IndexOfAttribute(this, AttributeDescription.CompilationRelaxationsAttribute) >= 0; 991194"];
14489 [label="return assemblyAttributes.IndexOfAttribute(this, AttributeDescription.CompilationRelaxationsAttribute) >= 0; 991195"];
14490 [label="assemblyAttributes.IndexOfAttribute(this, AttributeDescription.CompilationRelaxationsAttribute) 991196"];
14491 [label="param IndexOfAttribute(this ImmutableArray<CSharpAttributeData> attributes) 991197"];
14492 [label="param IndexOfAttribute(Symbol targetSymbol) 991198"];
14493 [label="param IndexOfAttribute(AttributeDescription description) 991199"];
14494 [label="for (int i = 0; i < attributes.Length; i++)\n            {\n                if (attributes[i].IsTargetAttribute(targetSymbol, description))\n                {\n                    return i;\n                }\n            } 991200"];
14495 [label="for (int i = 0; i < attributes.Length; i++)\n            {\n                if (attributes[i].IsTargetAttribute(targetSymbol, description))\n                {\n                    return i;\n                }\n            } 991201"];
14496 [label="return -1; 991202"];
14497 [label="return assemblyAttributes.IndexOfAttribute(this, AttributeDescription.CompilationRelaxationsAttribute) >= 0; 991203"];
14498 [label="return assemblyAttributes.IndexOfAttribute(this, AttributeDescription.CompilationRelaxationsAttribute) >= 0; 991204"];
14499 [label="bool emitCompilationRelaxationsAttribute = !isBuildingNetModule && !this.Modules.Any(m => m.HasAssemblyCompilationRelaxationsAttribute); 991205"];
14500 [label="bool emitCompilationRelaxationsAttribute = !isBuildingNetModule && !this.Modules.Any(m => m.HasAssemblyCompilationRelaxationsAttribute); 991206"];
14501 [label="if (emitCompilationRelaxationsAttribute)\n            {\n                // Synthesize attribute: [CompilationRelaxationsAttribute(CompilationRelaxations.NoStringInterning)]\n\n                // NOTE: GlobalAttrBind::EmitCompilerGeneratedAttrs skips attribute if the well-known types aren't available.\n                if (!(_compilation.GetWellKnownType(WellKnownType.System_Runtime_CompilerServices_CompilationRelaxationsAttribute) is MissingMetadataTypeSymbol))\n                {\n                    var int32Type = _compilation.GetSpecialType(SpecialType.System_Int32);\n                    Debug.Assert(!int32Type.HasUseSiteError,\n                        'Use site errors should have been checked ahead of time (type int).');\n\n                    var typedConstantNoStringInterning = new TypedConstant(int32Type, TypedConstantKind.Primitive, Cci.Constants.CompilationRelaxations_NoStringInterning);\n\n                    AddSynthesizedAttribute(ref attributes, _compilation.TrySynthesizeAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_CompilationRelaxationsAttribute__ctorInt32,\n                        ImmutableArray.Create(typedConstantNoStringInterning)));\n                }\n            } 991207"];
14502 [label="if (!(_compilation.GetWellKnownType(WellKnownType.System_Runtime_CompilerServices_CompilationRelaxationsAttribute) is MissingMetadataTypeSymbol))\n                {\n                    var int32Type = _compilation.GetSpecialType(SpecialType.System_Int32);\n                    Debug.Assert(!int32Type.HasUseSiteError,\n                        'Use site errors should have been checked ahead of time (type int).');\n\n                    var typedConstantNoStringInterning = new TypedConstant(int32Type, TypedConstantKind.Primitive, Cci.Constants.CompilationRelaxations_NoStringInterning);\n\n                    AddSynthesizedAttribute(ref attributes, _compilation.TrySynthesizeAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_CompilationRelaxationsAttribute__ctorInt32,\n                        ImmutableArray.Create(typedConstantNoStringInterning)));\n                } 991208"];
14503 [label="_compilation.GetWellKnownType(WellKnownType.System_Runtime_CompilerServices_CompilationRelaxationsAttribute) 991209"];
14504 [label="param GetWellKnownType(WellKnownType type) 991210"];
14505 [label="Debug.Assert(type.IsValid()); 991211"];
14506 [label="this.Options 991212"];
14507 [label="bool ignoreCorLibraryDuplicatedTypes = this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes); 991213"];
14508 [label="bool ignoreCorLibraryDuplicatedTypes = this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes); 991214"];
14509 [label="this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) 991215"];
14510 [label="param Includes(this BinderFlags self) 991216"];
14511 [label="param Includes(BinderFlags other) 991217"];
14512 [label="return (self & other) == other; 991218"];
14513 [label="return _lazyWellKnownTypes[index]!; 991219"];
14514 [label="this.Modules 991220"];
14515 [label="get\n            {\n                return _modules;\n            } 991221"];
14516 [label="return _modules; 991222"];
14517 [label="bool emitRuntimeCompatibilityAttribute = !isBuildingNetModule && !this.Modules.Any(m => m.HasAssemblyRuntimeCompatibilityAttribute); 991223"];
14518 [label="bool emitRuntimeCompatibilityAttribute = !isBuildingNetModule && !this.Modules.Any(m => m.HasAssemblyRuntimeCompatibilityAttribute); 991224"];
14519 [label="get\n            {\n                CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> decodedData = ((SourceAssemblySymbol)this.ContainingAssembly).GetSourceDecodedWellKnownAttributeData();\n                return decodedData != null && decodedData.HasRuntimeCompatibilityAttribute;\n            } 991225"];
14520 [label="this.ContainingAssembly 991226"];
14521 [label="get\n            {\n                return _assemblySymbol;\n            } 991227"];
14522 [label="CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> decodedData = ((SourceAssemblySymbol)this.ContainingAssembly).GetSourceDecodedWellKnownAttributeData(); 991228"];
14523 [label="((SourceAssemblySymbol)this.ContainingAssembly).GetSourceDecodedWellKnownAttributeData() 991229"];
14524 [label="param GetSourceDecodedWellKnownAttributeData(this) 991230"];
14525 [label="if (attributesBag == null || !attributesBag.IsDecodedWellKnownAttributeDataComputed)\n            {\n                attributesBag = this.GetSourceAttributesBag();\n            } 991231"];
14526 [label="return decodedData != null && decodedData.HasRuntimeCompatibilityAttribute; 991232"];
14527 [label="return decodedData != null && decodedData.HasRuntimeCompatibilityAttribute; 991233"];
14528 [label="get\n            {\n                var assemblyAttributes = GetAssemblyAttributes();\n                return assemblyAttributes.IndexOfAttribute(this, AttributeDescription.RuntimeCompatibilityAttribute) >= 0;\n            } 991234"];
14529 [label="GetAssemblyAttributes() 991235"];
14530 [label="param GetAssemblyAttributes(this) 991236"];
14531 [label="if (_lazyAssemblyAttributes.IsDefault)\n            {\n                ArrayBuilder<CSharpAttributeData> moduleAssemblyAttributesBuilder = null;\n\n                string corlibName = ContainingAssembly.CorLibrary.Name;\n                EntityHandle assemblyMSCorLib = Module.GetAssemblyRef(corlibName);\n                if (!assemblyMSCorLib.IsNil)\n                {\n                    foreach (var qualifier in Cci.MetadataWriter.dummyAssemblyAttributeParentQualifier)\n                    {\n                        EntityHandle typerefAssemblyAttributesGoHere =\n                                    Module.GetTypeRef(\n                                        assemblyMSCorLib,\n                                        Cci.MetadataWriter.dummyAssemblyAttributeParentNamespace,\n                                        Cci.MetadataWriter.dummyAssemblyAttributeParentName + qualifier);\n\n                        if (!typerefAssemblyAttributesGoHere.IsNil)\n                        {\n                            try\n                            {\n                                foreach (var customAttributeHandle in Module.GetCustomAttributesOrThrow(typerefAssemblyAttributesGoHere))\n                                {\n                                    if (moduleAssemblyAttributesBuilder == null)\n                                    {\n                                        moduleAssemblyAttributesBuilder = new ArrayBuilder<CSharpAttributeData>();\n                                    }\n                                    moduleAssemblyAttributesBuilder.Add(new PEAttributeData(this, customAttributeHandle));\n                                }\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                }\n\n                ImmutableInterlocked.InterlockedCompareExchange(\n                    ref _lazyAssemblyAttributes,\n                    (moduleAssemblyAttributesBuilder != null) ? moduleAssemblyAttributesBuilder.ToImmutableAndFree() : ImmutableArray<CSharpAttributeData>.Empty,\n                    default(ImmutableArray<CSharpAttributeData>));\n            } 991237"];
14532 [label="return _lazyAssemblyAttributes; 991238"];
14533 [label="var assemblyAttributes = GetAssemblyAttributes(); 991239"];
14534 [label="return assemblyAttributes.IndexOfAttribute(this, AttributeDescription.RuntimeCompatibilityAttribute) >= 0; 991240"];
14535 [label="return assemblyAttributes.IndexOfAttribute(this, AttributeDescription.RuntimeCompatibilityAttribute) >= 0; 991241"];
14536 [label="return assemblyAttributes.IndexOfAttribute(this, AttributeDescription.RuntimeCompatibilityAttribute) >= 0; 991242"];
14537 [label="assemblyAttributes.IndexOfAttribute(this, AttributeDescription.RuntimeCompatibilityAttribute) 991243"];
14538 [label="param IndexOfAttribute(this ImmutableArray<CSharpAttributeData> attributes) 991244"];
14539 [label="param IndexOfAttribute(Symbol targetSymbol) 991245"];
14540 [label="param IndexOfAttribute(AttributeDescription description) 991246"];
14541 [label="for (int i = 0; i < attributes.Length; i++)\n            {\n                if (attributes[i].IsTargetAttribute(targetSymbol, description))\n                {\n                    return i;\n                }\n            } 991247"];
14542 [label="for (int i = 0; i < attributes.Length; i++)\n            {\n                if (attributes[i].IsTargetAttribute(targetSymbol, description))\n                {\n                    return i;\n                }\n            } 991248"];
14543 [label="return -1; 991249"];
14544 [label="return assemblyAttributes.IndexOfAttribute(this, AttributeDescription.RuntimeCompatibilityAttribute) >= 0; 991250"];
14545 [label="return assemblyAttributes.IndexOfAttribute(this, AttributeDescription.RuntimeCompatibilityAttribute) >= 0; 991251"];
14546 [label="bool emitRuntimeCompatibilityAttribute = !isBuildingNetModule && !this.Modules.Any(m => m.HasAssemblyRuntimeCompatibilityAttribute); 991252"];
14547 [label="bool emitRuntimeCompatibilityAttribute = !isBuildingNetModule && !this.Modules.Any(m => m.HasAssemblyRuntimeCompatibilityAttribute); 991253"];
14548 [label="if (emitRuntimeCompatibilityAttribute)\n            {\n                // Synthesize attribute: [RuntimeCompatibilityAttribute(WrapNonExceptionThrows = true)]\n\n                // NOTE: GlobalAttrBind::EmitCompilerGeneratedAttrs skips attribute if the well-known types aren't available.\n                if (!(_compilation.GetWellKnownType(WellKnownType.System_Runtime_CompilerServices_RuntimeCompatibilityAttribute) is MissingMetadataTypeSymbol))\n                {\n                    var boolType = _compilation.GetSpecialType(SpecialType.System_Boolean);\n                    Debug.Assert(!boolType.HasUseSiteError, 'Use site errors should have been checked ahead of time (type bool).');\n\n                    var typedConstantTrue = new TypedConstant(boolType, TypedConstantKind.Primitive, value: true);\n\n                    AddSynthesizedAttribute(ref attributes, _compilation.TrySynthesizeAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_RuntimeCompatibilityAttribute__ctor,\n                        ImmutableArray<TypedConstant>.Empty,\n                        ImmutableArray.Create(new KeyValuePair<WellKnownMember, TypedConstant>(\n                            WellKnownMember.System_Runtime_CompilerServices_RuntimeCompatibilityAttribute__WrapNonExceptionThrows,\n                            typedConstantTrue))));\n                }\n            } 991254"];
14549 [label="if (!(_compilation.GetWellKnownType(WellKnownType.System_Runtime_CompilerServices_RuntimeCompatibilityAttribute) is MissingMetadataTypeSymbol))\n                {\n                    var boolType = _compilation.GetSpecialType(SpecialType.System_Boolean);\n                    Debug.Assert(!boolType.HasUseSiteError, 'Use site errors should have been checked ahead of time (type bool).');\n\n                    var typedConstantTrue = new TypedConstant(boolType, TypedConstantKind.Primitive, value: true);\n\n                    AddSynthesizedAttribute(ref attributes, _compilation.TrySynthesizeAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_RuntimeCompatibilityAttribute__ctor,\n                        ImmutableArray<TypedConstant>.Empty,\n                        ImmutableArray.Create(new KeyValuePair<WellKnownMember, TypedConstant>(\n                            WellKnownMember.System_Runtime_CompilerServices_RuntimeCompatibilityAttribute__WrapNonExceptionThrows,\n                            typedConstantTrue))));\n                } 991255"];
14550 [label="_compilation.GetWellKnownType(WellKnownType.System_Runtime_CompilerServices_RuntimeCompatibilityAttribute) 991256"];
14551 [label="param GetWellKnownType(WellKnownType type) 991257"];
14552 [label="Debug.Assert(type.IsValid()); 991258"];
14553 [label="this.Options 991259"];
14554 [label="bool ignoreCorLibraryDuplicatedTypes = this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes); 991260"];
14555 [label="bool ignoreCorLibraryDuplicatedTypes = this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes); 991261"];
14556 [label="this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) 991262"];
14557 [label="param Includes(this BinderFlags self) 991263"];
14558 [label="param Includes(BinderFlags other) 991264"];
14559 [label="return (self & other) == other; 991265"];
14560 [label="return _lazyWellKnownTypes[index]!; 991266"];
14561 [label="this.HasDebuggableAttribute 991267"];
14562 [label="get\n            {\n                CommonAssemblyWellKnownAttributeData assemblyData = this.GetSourceDecodedWellKnownAttributeData();\n                return assemblyData != null && assemblyData.HasDebuggableAttribute;\n            } 991268"];
14563 [label="this.GetSourceDecodedWellKnownAttributeData() 991269"];
14564 [label="param GetSourceDecodedWellKnownAttributeData(this) 991270"];
14565 [label="var attributesBag = _lazySourceAttributesBag; 991271"];
14566 [label="if (attributesBag == null || !attributesBag.IsDecodedWellKnownAttributeDataComputed)\n            {\n                attributesBag = this.GetSourceAttributesBag();\n            } 991272"];
14567 [label="CommonAssemblyWellKnownAttributeData assemblyData = this.GetSourceDecodedWellKnownAttributeData(); 991273"];
14568 [label="return assemblyData != null && assemblyData.HasDebuggableAttribute; 991274"];
14569 [label="return assemblyData != null && assemblyData.HasDebuggableAttribute; 991275"];
14570 [label="if (!isBuildingNetModule && !this.HasDebuggableAttribute)\n            {\n                AddSynthesizedAttribute(ref attributes, _compilation.SynthesizeDebuggableAttribute());\n            } 991276"];
14571 [label="if (!isBuildingNetModule && !this.HasDebuggableAttribute)\n            {\n                AddSynthesizedAttribute(ref attributes, _compilation.SynthesizeDebuggableAttribute());\n            } 991277"];
14572 [label="AddSynthesizedAttribute(ref attributes, _compilation.SynthesizeDebuggableAttribute()); 991278"];
14573 [label="_compilation.SynthesizeDebuggableAttribute() 991279"];
14574 [label="param SynthesizeDebuggableAttribute(this) 991280"];
14575 [label="TypeSymbol debuggableAttribute = GetWellKnownType(WellKnownType.System_Diagnostics_DebuggableAttribute); 991281"];
14576 [label="GetWellKnownType(WellKnownType.System_Diagnostics_DebuggableAttribute) 991282"];
14577 [label="param GetWellKnownType(WellKnownType type) 991283"];
14578 [label="param GetWellKnownType(this) 991284"];
14579 [label="Debug.Assert(type.IsValid()); 991285"];
14580 [label="this.Options 991286"];
14581 [label="get\n            {\n                return _options;\n            } 991287"];
14582 [label="bool ignoreCorLibraryDuplicatedTypes = this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes); 991288"];
14583 [label="bool ignoreCorLibraryDuplicatedTypes = this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes); 991289"];
14584 [label="this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) 991290"];
14585 [label="param Includes(this BinderFlags self) 991291"];
14586 [label="param Includes(BinderFlags other) 991292"];
14587 [label="return (self & other) == other; 991293"];
14588 [label="if (_lazyWellKnownTypes == null || _lazyWellKnownTypes[index] is null)\n            {\n                if (_lazyWellKnownTypes == null)\n                {\n                    Interlocked.CompareExchange(ref _lazyWellKnownTypes, new NamedTypeSymbol[(int)WellKnownTypes.Count], null);\n                }\n\n                string mdName = type.GetMetadataName();\n                var warnings = DiagnosticBag.GetInstance();\n                NamedTypeSymbol? result;\n                (AssemblySymbol, AssemblySymbol) conflicts = default;\n\n                if (IsTypeMissing(type))\n                {\n                    result = null;\n                }\n                else\n                {\n                    // well-known types introduced before CSharp7 allow lookup ambiguity and report a warning\n                    DiagnosticBag? legacyWarnings = (type <= WellKnownType.CSharp7Sentinel) ? warnings : null;\n                    result = this.Assembly.GetTypeByMetadataName(\n                        mdName, includeReferences: true, useCLSCompliantNameArityEncoding: true, isWellKnownType: true, conflicts: out conflicts,\n                        warnings: legacyWarnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes);\n                }\n\n                if (result is null)\n                {\n                    // TODO: should GetTypeByMetadataName rather return a missing symbol?\n                    MetadataTypeName emittedName = MetadataTypeName.FromFullName(mdName, useCLSCompliantNameArityEncoding: true);\n                    if (type.IsValueTupleType())\n                    {\n                        CSDiagnosticInfo errorInfo;\n                        if (conflicts.Item1 is null)\n                        {\n                            Debug.Assert(conflicts.Item2 is null);\n                            errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_PredefinedValueTupleTypeNotFound, emittedName.FullName);\n                        }\n                        else\n                        {\n                            errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_PredefinedValueTupleTypeAmbiguous3, emittedName.FullName, conflicts.Item1, conflicts.Item2);\n                        }\n\n                        result = new MissingMetadataTypeSymbol.TopLevel(this.Assembly.Modules[0], ref emittedName, type, errorInfo);\n                    }\n                    else\n                    {\n                        result = new MissingMetadataTypeSymbol.TopLevel(this.Assembly.Modules[0], ref emittedName, type);\n                    }\n                }\n\n                if (Interlocked.CompareExchange(ref _lazyWellKnownTypes[index], result, null) is object)\n                {\n                    Debug.Assert(\n                        TypeSymbol.Equals(result, _lazyWellKnownTypes[index], TypeCompareKind.ConsiderEverything2) || (_lazyWellKnownTypes[index]!.IsErrorType() && result.IsErrorType())\n                    );\n                }\n                else\n                {\n                    AdditionalCodegenWarnings.AddRange(warnings);\n                }\n\n                warnings.Free();\n            } 991294"];
14589 [label="NamedTypeSymbol? result; 991295"];
14590 [label="(AssemblySymbol, AssemblySymbol) conflicts = default; 991296"];
14591 [label="GetBoundReferenceManager() 991297"];
14592 [label="GetBoundReferenceManager(); 991298"];
14593 [label="result = this.Assembly.GetTypeByMetadataName(\n                        mdName, includeReferences: true, useCLSCompliantNameArityEncoding: true, isWellKnownType: true, conflicts: out conflicts,\n                        warnings: legacyWarnings, ignoreCorLibraryDuplicatedTypes: ignoreCorLibraryDuplicatedTypes); 991299"];
14594 [label="param GetTypeByMetadataName(out (AssemblySymbol, AssemblySymbol) conflicts) 991300"];
14595 [label="param GetTypeByMetadataName(DiagnosticBag warnings = null) 991301"];
14596 [label="param GetTypeByMetadataName(bool ignoreCorLibraryDuplicatedTypes = false) 991302"];
14597 [label="NamedTypeSymbol type; 991303"];
14598 [label="MetadataTypeName mdName; 991304"];
14599 [label="mdName 991305"];
14600 [label="param GetTopLevelTypeByMetadataName(AssemblyIdentity assemblyOpt) 991306"];
14601 [label="param GetTopLevelTypeByMetadataName(bool includeReferences) 991307"];
14602 [label="param GetTopLevelTypeByMetadataName(out (AssemblySymbol, AssemblySymbol) conflicts) 991308"];
14603 [label="param GetTopLevelTypeByMetadataName(DiagnosticBag warnings = null) 991309"];
14604 [label="param GetTopLevelTypeByMetadataName(bool ignoreCorLibraryDuplicatedTypes = false) 991310"];
14605 [label="conflicts = default; 991311"];
14606 [label="NamedTypeSymbol result; 991312"];
14607 [label="param GetTopLevelTypeByMetadataName(AssemblyIdentity assemblyOpt) 991313"];
14608 [label="param LookupTopLevelMetadataTypeWithCycleDetection(ConsList<AssemblySymbol> visitedAssemblies) 991314"];
14609 [label="param LookupTopLevelMetadataTypeWithCycleDetection(bool digThroughForwardedTypes) 991315"];
14610 [label="NamedTypeSymbol result = null; 991316"];
14611 [label="NamedTypeSymbol result; 991317"];
14612 [label="if ((object)scope == null)\n                {\n                    break;\n                } 991318"];
14613 [label="_lazyTupleData 991319"];
14614 [label="name 991320"];
14615 [label="arity 991321"];
14616 [label="mangleName 991322"];
14617 [label="RoslynDebug.Assert(name != null); 991323"];
14618 [label="_namespaceName 991324"];
14619 [label="_containingModule 991325"];
14620 [label="_isNativeInt 991326"];
14621 [label="_lazyErrorInfo 991327"];
14622 [label="_lazyContainingNamespace 991328"];
14623 [label="_lazyTypeId 991329"];
14624 [label="RoslynDebug.Assert((object)module != null); 991330"];
14625 [label="RoslynDebug.Assert(@namespace != null); 991331"];
14626 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 991332"];
14627 [label="Debug.Assert((object)result != null); 991333"];
14628 [label="EnsureAllMembersLoaded(); 991334"];
14629 [label="return ImmutableArray<Symbol>.Empty; 991335"];
14630 [label="if (!(newResult is MissingMetadataTypeSymbol))\n                        {\n                            result = newResult;\n                            break;\n                        } 991336"];
14631 [label="bool foundMatchInThisAssembly = (i < count); 991337"];
14632 [label="Debug.Assert(!foundMatchInThisAssembly || (object)result.ContainingAssembly == (object)this); 991338"];
14633 [label="if (!foundMatchInThisAssembly && digThroughForwardedTypes)\n                {\n                    // We didn't find the type\n                    System.Diagnostics.Debug.Assert(result is MissingMetadataTypeSymbol);\n\n                    NamedTypeSymbol forwarded = TryLookupForwardedMetadataTypeWithCycleDetection(ref emittedName, visitedAssemblies);\n                    if ((object)forwarded != null)\n                    {\n                        result = forwarded;\n                    }\n                } 991339"];
14634 [label="System.Diagnostics.Debug.Assert((object)result != null); 991340"];
14635 [label="if (digThroughForwardedTypes || foundMatchInThisAssembly)\n                {\n                    CacheTopLevelMetadataType(ref emittedName, result);\n                } 991341"];
14636 [label="get\n            {\n                return SymbolKind.ErrorType;\n            } 991342"];
14637 [label="param IsValidWellKnownType(this) 991343"];
14638 [label="if ((object)result != null || !includeReferences)\n            {\n                return result;\n            } 991344"];
14639 [label="if ((object)result != null || !includeReferences)\n            {\n                return result;\n            } 991345"];
14640 [label="if ((object)result != null || !includeReferences)\n            {\n                return result;\n            } 991346"];
14641 [label="Debug.Assert(this is SourceAssemblySymbol,\n                'Never include references for a non-source assembly, because they don't know about aliases.'); 991347"];
14642 [label="var assemblies = ArrayBuilder<AssemblySymbol>.GetInstance(); 991348"];
14643 [label="if (assemblyOpt != null)\n            {\n                assemblies.AddRange(DeclaringCompilation.GetBoundReferenceManager().ReferencedAssemblies);\n            }\n            else\n            {\n                DeclaringCompilation.GetUnaliasedReferencedAssemblies(assemblies);\n            } 991349"];
14644 [label="if (assemblyOpt != null)\n            {\n                assemblies.AddRange(DeclaringCompilation.GetBoundReferenceManager().ReferencedAssemblies);\n            }\n            else\n            {\n                DeclaringCompilation.GetUnaliasedReferencedAssemblies(assemblies);\n            } 991350"];
14645 [label="DeclaringCompilation 991351"];
14646 [label="DeclaringCompilation.GetUnaliasedReferencedAssemblies(assemblies); 991352"];
14647 [label="DeclaringCompilation.GetUnaliasedReferencedAssemblies(assemblies); 991353"];
14648 [label="DeclaringCompilation.GetUnaliasedReferencedAssemblies(assemblies) 991354"];
14649 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 991355"];
14650 [label="param GetUnaliasedReferencedAssemblies(this) 991356"];
14651 [label="GetBoundReferenceManager() 991357"];
14652 [label="param GetBoundReferenceManager(this) 991358"];
14653 [label="var referenceManager = GetBoundReferenceManager(); 991359"];
14654 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 991360"];
14655 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 991361"];
14656 [label="DeclaringCompilation.GetUnaliasedReferencedAssemblies(assemblies); 991362"];
14657 [label="foreach (var assembly in assemblies)\n            {\n                Debug.Assert(!(this is SourceAssemblySymbol && assembly.IsMissing)); // Non-source assemblies can have missing references\n\n                NamedTypeSymbol candidate = GetTopLevelTypeByMetadataName(assembly, ref metadataName, assemblyOpt);\n\n                if (isWellKnownType && !IsValidWellKnownType(candidate))\n                {\n                    candidate = null;\n                }\n\n                if ((object)candidate == null)\n                {\n                    continue;\n                }\n\n                if (candidate.IsHiddenByCodeAnalysisEmbeddedAttribute())\n                {\n                    continue;\n                }\n\n                Debug.Assert(!TypeSymbol.Equals(candidate, result, TypeCompareKind.ConsiderEverything2));\n\n                if ((object)result != null)\n                {\n                    // duplicate\n                    if (ignoreCorLibraryDuplicatedTypes)\n                    {\n                        if (IsInCorLib(candidate))\n                        {\n                            // ignore candidate\n                            continue;\n                        }\n                        if (IsInCorLib(result))\n                        {\n                            // drop previous result\n                            result = candidate;\n                            continue;\n                        }\n                    }\n\n                    if (warnings == null)\n                    {\n                        conflicts = (result.ContainingAssembly, candidate.ContainingAssembly);\n                        result = null;\n                    }\n                    else\n                    {\n                        // The predefined type '{0}' is defined in multiple assemblies in the global alias; using definition from '{1}'\n                        warnings.Add(ErrorCode.WRN_MultiplePredefTypes, NoLocation.Singleton, result, result.ContainingAssembly);\n                    }\n\n                    break;\n                }\n\n                result = candidate;\n            } 991363"];
14658 [label="assemblies.Free(); 991364"];
14659 [label="GetBoundReferenceManager() 991365"];
14660 [label="GetBoundReferenceManager(); 991366"];
14661 [label="_lazyTupleData 991367"];
14662 [label="name 991368"];
14663 [label="arity 991369"];
14664 [label="mangleName 991370"];
14665 [label="RoslynDebug.Assert(name != null); 991371"];
14666 [label="_namespaceName 991372"];
14667 [label="_containingModule 991373"];
14668 [label="_isNativeInt 991374"];
14669 [label="_lazyErrorInfo 991375"];
14670 [label="_lazyContainingNamespace 991376"];
14671 [label="_lazyTypeId 991377"];
14672 [label="RoslynDebug.Assert((object)module != null); 991378"];
14673 [label="RoslynDebug.Assert(@namespace != null); 991379"];
14674 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 991380"];
14675 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 991381"];
14676 [label="return _lazyWellKnownTypes[index]!; 991382"];
14677 [label="Debug.Assert((object)debuggableAttribute != null, 'GetWellKnownType unexpectedly returned null'); 991383"];
14678 [label="Debug.Assert((object)debuggableAttribute != null, 'GetWellKnownType unexpectedly returned null'); 991384"];
14679 [label="if (debuggableAttribute is MissingMetadataTypeSymbol)\n            {\n                return null;\n            } 991385"];
14680 [label="return null; 991386"];
14681 [label="AddSynthesizedAttribute(ref attributes, _compilation.SynthesizeDebuggableAttribute()); 991387"];
14682 [label="AddSynthesizedAttribute(ref attributes, _compilation.SynthesizeDebuggableAttribute()) 991388"];
14683 [label="param AddSynthesizedAttribute(ref ArrayBuilder<SynthesizedAttributeData> attributes) 991389"];
14684 [label="param AddSynthesizedAttribute(SynthesizedAttributeData attribute) 991390"];
14685 [label="if (attribute != null)\n            {\n                if (attributes == null)\n                {\n                    attributes = new ArrayBuilder<SynthesizedAttributeData>(1);\n                }\n\n                attributes.Add(attribute);\n            } 991391"];
14686 [label="if (attribute != null)\n            {\n                if (attributes == null)\n                {\n                    attributes = new ArrayBuilder<SynthesizedAttributeData>(1);\n                }\n\n                attributes.Add(attribute);\n            } 991392"];
14687 [label="AddSynthesizedAttribute(ref attributes, _compilation.SynthesizeDebuggableAttribute()); 991393"];
14688 [label="_compilation.Options 991394"];
14689 [label="get\n            {\n                return _options;\n            } 991395"];
14690 [label="if (_compilation.Options.OutputKind == OutputKind.NetModule)\n            {\n                // If the attribute is applied in source, do not add synthetic one.\n                // If its value is different from the supplied through options, an error should have been reported by now.\n\n                if (!string.IsNullOrEmpty(_compilation.Options.CryptoKeyContainer) &&\n                    (object)AssemblyKeyContainerAttributeSetting == (object)CommonAssemblyWellKnownAttributeData.StringMissingValue)\n                {\n                    var stringType = _compilation.GetSpecialType(SpecialType.System_String);\n                    Debug.Assert(!stringType.HasUseSiteError, 'Use site errors should have been checked ahead of time (type string).');\n\n                    var typedConstant = new TypedConstant(stringType, TypedConstantKind.Primitive, _compilation.Options.CryptoKeyContainer);\n                    AddSynthesizedAttribute(ref attributes, _compilation.TrySynthesizeAttribute(WellKnownMember.System_Reflection_AssemblyKeyNameAttribute__ctor, ImmutableArray.Create(typedConstant)));\n                }\n\n                if (!String.IsNullOrEmpty(_compilation.Options.CryptoKeyFile) &&\n                    (object)AssemblyKeyFileAttributeSetting == (object)CommonAssemblyWellKnownAttributeData.StringMissingValue)\n                {\n                    var stringType = _compilation.GetSpecialType(SpecialType.System_String);\n                    Debug.Assert(!stringType.HasUseSiteError, 'Use site errors should have been checked ahead of time (type string).');\n\n                    var typedConstant = new TypedConstant(stringType, TypedConstantKind.Primitive, _compilation.Options.CryptoKeyFile);\n                    AddSynthesizedAttribute(ref attributes, _compilation.TrySynthesizeAttribute(WellKnownMember.System_Reflection_AssemblyKeyFileAttribute__ctor, ImmutableArray.Create(typedConstant)));\n                }\n            } 991396"];
14691 [label="this.AddSynthesizedAttributes(moduleBuilder, ref synthesized); 991397"];
14692 [label="if (emittingRefAssembly && !HasReferenceAssemblyAttribute)\n            {\n                var referenceAssemblyAttribute = this.DeclaringCompilation\n                    .TrySynthesizeAttribute(WellKnownMember.System_Runtime_CompilerServices_ReferenceAssemblyAttribute__ctor, isOptionalUse: true);\n                Symbol.AddSynthesizedAttribute(ref synthesized, referenceAssemblyAttribute);\n            } 991398"];
14693 [label="return GetCustomAttributesToEmit(userDefined, synthesized, isReturnType: false, emittingAssemblyAttributesInNetModule: emittingAssemblyAttributesInNetModule); 991399"];
14694 [label="return GetCustomAttributesToEmit(userDefined, synthesized, isReturnType: false, emittingAssemblyAttributesInNetModule: emittingAssemblyAttributesInNetModule); 991400"];
14695 [label="return GetCustomAttributesToEmit(userDefined, synthesized, isReturnType: false, emittingAssemblyAttributesInNetModule: emittingAssemblyAttributesInNetModule); 991401"];
14696 [label="return GetCustomAttributesToEmit(userDefined, synthesized, isReturnType: false, emittingAssemblyAttributesInNetModule: emittingAssemblyAttributesInNetModule); 991402"];
14697 [label="GetCustomAttributesToEmit(userDefined, synthesized, isReturnType: false, emittingAssemblyAttributesInNetModule: emittingAssemblyAttributesInNetModule) 991403"];
14698 [label="param GetCustomAttributesToEmit(ImmutableArray<CSharpAttributeData> userDefined) 991404"];
14699 [label="param GetCustomAttributesToEmit(ArrayBuilder<SynthesizedAttributeData> synthesized) 991405"];
14700 [label="param GetCustomAttributesToEmit(bool isReturnType) 991406"];
14701 [label="param GetCustomAttributesToEmit(bool emittingAssemblyAttributesInNetModule) 991407"];
14702 [label="param GetCustomAttributesToEmit(this) 991408"];
14703 [label="CheckDefinitionInvariant() 991409"];
14704 [label="param CheckDefinitionInvariant(this) 991410"];
14705 [label="this.IsDefinition 991411"];
14706 [label="get\n            {\n                return (object)this == (object)OriginalDefinition;\n            } 991412"];
14707 [label="OriginalDefinition 991413"];
14708 [label="get\n            {\n                return OriginalSymbolDefinition;\n            } 991414"];
14709 [label="OriginalSymbolDefinition 991415"];
14710 [label="get\n            {\n                return this;\n            } 991416"];
14711 [label="return this; 991417"];
14712 [label="return OriginalSymbolDefinition; 991418"];
14713 [label="return (object)this == (object)OriginalDefinition; 991419"];
14714 [label="Debug.Assert(this.IsDefinition); 991420"];
14715 [label="this.ContainingModule 991421"];
14716 [label="get\n            {\n                // Default implementation gets the containers module.\n\n                var container = this.ContainingSymbol;\n                return (object)container != null ? container.ContainingModule : null;\n            } 991422"];
14717 [label="this.ContainingSymbol 991423"];
14718 [label="get\n            {\n                return null;\n            } 991424"];
14719 [label="return null; 991425"];
14720 [label="var container = this.ContainingSymbol; 991426"];
14721 [label="return (object)container != null ? container.ContainingModule : null; 991427"];
14722 [label="return (object)container != null ? container.ContainingModule : null; 991428"];
14723 [label="(object)container != null 991429"];
14724 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991430"];
14725 [label="this.Kind 991431"];
14726 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 991432"];
14727 [label="return SymbolKind.Assembly; 991433"];
14728 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991434"];
14729 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991435"];
14730 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991436"];
14731 [label="CheckDefinitionInvariant(); 991437"];
14732 [label="if (userDefined.IsEmpty && synthesized == null)\n            {\n                return SpecializedCollections.EmptyEnumerable<CSharpAttributeData>();\n            } 991438"];
14733 [label="if (userDefined.IsEmpty && synthesized == null)\n            {\n                return SpecializedCollections.EmptyEnumerable<CSharpAttributeData>();\n            } 991439"];
14734 [label="if (userDefined.IsEmpty && synthesized == null)\n            {\n                return SpecializedCollections.EmptyEnumerable<CSharpAttributeData>();\n            } 991440"];
14735 [label="return SpecializedCollections.EmptyEnumerable<CSharpAttributeData>(); 991441"];
14736 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 991442"];
14737 [label="param GetSourceAssemblySecurityAttributes(this) 991443"];
14738 [label="SourceModule.ContainingSourceAssembly 991444"];
14739 [label="get\n            {\n                return _assemblySymbol;\n            } 991445"];
14740 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 991446"];
14741 [label="SourceModule.ContainingSourceAssembly.GetSecurityAttributes() 991447"];
14742 [label="param GetSecurityAttributes(this) 991448"];
14743 [label="this.GetSourceAttributesBag() 991449"];
14744 [label="param GetSourceAttributesBag(this) 991450"];
14745 [label="EnsureAttributesAreBound() 991451"];
14746 [label="if ((_lazySourceAttributesBag == null || !_lazySourceAttributesBag.IsSealed) &&\n                LoadAndValidateAttributes(OneOrMany.Create(GetAttributeDeclarations()), ref _lazySourceAttributesBag))\n            {\n                _state.NotePartComplete(CompletionPart.Attributes);\n            } 991452"];
14747 [label="EnsureAttributesAreBound(); 991453"];
14748 [label="foreach (var securityAttribute in GetSecurityAttributes(this.GetSourceAttributesBag()))\n            {\n                yield return securityAttribute;\n            } 991454"];
14749 [label="GetSecurityAttributes(this.GetSourceAttributesBag()) 991455"];
14750 [label="param GetSecurityAttributes(CustomAttributesBag<CSharpAttributeData> attributesBag) 991456"];
14751 [label="Debug.Assert(attributesBag.IsSealed); 991457"];
14752 [label="var wellKnownAttributeData = (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 991458"];
14753 [label="if (wellKnownAttributeData != null)\n            {\n                SecurityWellKnownAttributeData securityData = wellKnownAttributeData.SecurityInformation;\n                if (securityData != null)\n                {\n                    foreach (var securityAttribute in securityData.GetSecurityAttributes<CSharpAttributeData>(attributesBag.Attributes))\n                    {\n                        yield return securityAttribute;\n                    }\n                }\n            } 991459"];
14754 [label="if (wellKnownAttributeData != null)\n            {\n                SecurityWellKnownAttributeData securityData = wellKnownAttributeData.SecurityInformation;\n                if (securityData != null)\n                {\n                    foreach (var securityAttribute in securityData.GetSecurityAttributes<CSharpAttributeData>(attributesBag.Attributes))\n                    {\n                        yield return securityAttribute;\n                    }\n                }\n            } 991460"];
14755 [label="param GetSecurityAttributes(this) 991461"];
14756 [label="foreach (var securityAttribute in GetSecurityAttributes(this.GetSourceAttributesBag()))\n            {\n                yield return securityAttribute;\n            } 991462"];
14757 [label="this.GetNetModuleAttributesBag() 991463"];
14758 [label="param GetNetModuleAttributesBag(this) 991464"];
14759 [label="EnsureNetModuleAttributesAreBound() 991465"];
14760 [label="if (_lazyNetModuleAttributesBag == null)\n            {\n                LoadAndValidateNetModuleAttributes(ref _lazyNetModuleAttributesBag);\n            } 991466"];
14761 [label="EnsureNetModuleAttributesAreBound(); 991467"];
14762 [label="foreach (var securityAttribute in GetSecurityAttributes(this.GetNetModuleAttributesBag()))\n            {\n                yield return securityAttribute;\n            } 991468"];
14763 [label="GetSecurityAttributes(this.GetNetModuleAttributesBag()) 991469"];
14764 [label="param GetSecurityAttributes(CustomAttributesBag<CSharpAttributeData> attributesBag) 991470"];
14765 [label="Debug.Assert(attributesBag.IsSealed); 991471"];
14766 [label="var wellKnownAttributeData = (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 991472"];
14767 [label="if (wellKnownAttributeData != null)\n            {\n                SecurityWellKnownAttributeData securityData = wellKnownAttributeData.SecurityInformation;\n                if (securityData != null)\n                {\n                    foreach (var securityAttribute in securityData.GetSecurityAttributes<CSharpAttributeData>(attributesBag.Attributes))\n                    {\n                        yield return securityAttribute;\n                    }\n                }\n            } 991473"];
14768 [label="if (wellKnownAttributeData != null)\n            {\n                SecurityWellKnownAttributeData securityData = wellKnownAttributeData.SecurityInformation;\n                if (securityData != null)\n                {\n                    foreach (var securityAttribute in securityData.GetSecurityAttributes<CSharpAttributeData>(attributesBag.Attributes))\n                    {\n                        yield return securityAttribute;\n                    }\n                }\n            } 991474"];
14769 [label="param GetSecurityAttributes(this) 991475"];
14770 [label="foreach (var securityAttribute in GetSecurityAttributes(this.GetNetModuleAttributesBag()))\n            {\n                yield return securityAttribute;\n            } 991476"];
14771 [label="_compilation.Options 991477"];
14772 [label="get\n            {\n                return _options;\n            } 991478"];
14773 [label="if (_compilation.Options.AllowUnsafe)\n            {\n                // NOTE: GlobalAttrBind::EmitCompilerGeneratedAttrs skips attribute if the well-known types aren't available.\n                if (!(_compilation.GetWellKnownType(WellKnownType.System_Security_UnverifiableCodeAttribute) is MissingMetadataTypeSymbol) &&\n                    !(_compilation.GetWellKnownType(WellKnownType.System_Security_Permissions_SecurityPermissionAttribute) is MissingMetadataTypeSymbol))\n                {\n                    var securityActionType = _compilation.GetWellKnownType(WellKnownType.System_Security_Permissions_SecurityAction);\n                    if (!(securityActionType is MissingMetadataTypeSymbol))\n                    {\n                        var fieldRequestMinimum = (FieldSymbol)_compilation.GetWellKnownTypeMember(WellKnownMember.System_Security_Permissions_SecurityAction__RequestMinimum);\n\n                        // NOTE: Dev10 handles missing enum value.\n                        object constantValue = (object)fieldRequestMinimum == null || fieldRequestMinimum.HasUseSiteError ? 0 : fieldRequestMinimum.ConstantValue;\n                        var typedConstantRequestMinimum = new TypedConstant(securityActionType, TypedConstantKind.Enum, constantValue);\n\n                        var boolType = _compilation.GetSpecialType(SpecialType.System_Boolean);\n                        Debug.Assert(!boolType.HasUseSiteError,\n                            'Use site errors should have been checked ahead of time (type bool).');\n\n                        var typedConstantTrue = new TypedConstant(boolType, TypedConstantKind.Primitive, value: true);\n\n                        var attribute = _compilation.TrySynthesizeAttribute(\n                            WellKnownMember.System_Security_Permissions_SecurityPermissionAttribute__ctor,\n                            ImmutableArray.Create(typedConstantRequestMinimum),\n                            ImmutableArray.Create(new KeyValuePair<WellKnownMember, TypedConstant>(\n                                WellKnownMember.System_Security_Permissions_SecurityPermissionAttribute__SkipVerification,\n                                typedConstantTrue)));\n\n                        if (attribute != null)\n                        {\n                            yield return new Cci.SecurityAttribute((DeclarativeSecurityAction)(int)constantValue, attribute);\n                        }\n                    }\n                }\n            } 991479"];
14774 [label="param GetSecurityAttributes(this) 991480"];
14775 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 991481"];
14776 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 991482"];
14777 [label="get\n            {\n                return _assemblySymbol;\n            } 991483"];
14778 [label="return SourceModule.ContainingSourceAssembly.CorLibrary; 991484"];
14779 [label="get\n            {\n                return _corLibrary;\n            } 991485"];
14780 [label="AssemblySymbol corLibrary = CorLibrary; 991486"];
14781 [label="get\n            {\n                return true;\n            } 991487"];
14782 [label="AssertReferencesInitialized() 991488"];
14783 [label="param AssertReferencesInitialized(this) 991489"];
14784 [label="Debug.Assert(_moduleReferences != null); 991490"];
14785 [label="Debug.Assert(_moduleReferences != null); 991491"];
14786 [label="AssertReferencesInitialized(); 991492"];
14787 [label="yield return Translate(aRef, diagnostics); 991493"];
14788 [label="param Translate(DiagnosticBag diagnostics) 991494"];
14789 [label="SourceModule.ContainingAssembly 991495"];
14790 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 991496"];
14791 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 991497"];
14792 [label="param Equals(TypeCompareKind compareKind) 991498"];
14793 [label="param Equals(this) 991499"];
14794 [label="if (ReferenceEquals(this, obj))\n            {\n                return true;\n            } 991500"];
14795 [label="if (ReferenceEquals(this, obj))\n            {\n                return true;\n            } 991501"];
14796 [label="param Equals(TypeCompareKind compareKind) 991502"];
14797 [label="param GetSourceModuleAttributes(this) 991503"];
14798 [label="return SourceModule.GetCustomAttributesToEmit(this); 991504"];
14799 [label="SourceModule.GetCustomAttributesToEmit(this) 991505"];
14800 [label="param GetCustomAttributesToEmit(PEModuleBuilder moduleBuilder) 991506"];
14801 [label="param GetCustomAttributesToEmit(this) 991507"];
14802 [label="CheckDefinitionInvariant() 991508"];
14803 [label="param CheckDefinitionInvariant(this) 991509"];
14804 [label="this.IsDefinition 991510"];
14805 [label="get\n            {\n                return (object)this == (object)OriginalDefinition;\n            } 991511"];
14806 [label="OriginalDefinition 991512"];
14807 [label="get\n            {\n                return OriginalSymbolDefinition;\n            } 991513"];
14808 [label="OriginalSymbolDefinition 991514"];
14809 [label="get\n            {\n                return this;\n            } 991515"];
14810 [label="return this; 991516"];
14811 [label="return OriginalSymbolDefinition; 991517"];
14812 [label="return (object)this == (object)OriginalDefinition; 991518"];
14813 [label="Debug.Assert(this.IsDefinition); 991519"];
14814 [label="this.ContainingModule 991520"];
14815 [label="get\n            {\n                return null;\n            } 991521"];
14816 [label="return null; 991522"];
14817 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991523"];
14818 [label="this.Kind 991524"];
14819 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 991525"];
14820 [label="return SymbolKind.NetModule; 991526"];
14821 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991527"];
14822 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991528"];
14823 [label="this.Kind 991529"];
14824 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 991530"];
14825 [label="return SymbolKind.NetModule; 991531"];
14826 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991532"];
14827 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991533"];
14828 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991534"];
14829 [label="CheckDefinitionInvariant(); 991535"];
14830 [label="this.Kind 991536"];
14831 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 991537"];
14832 [label="return SymbolKind.NetModule; 991538"];
14833 [label="Debug.Assert(this.Kind != SymbolKind.Assembly); 991539"];
14834 [label="return GetCustomAttributesToEmit(moduleBuilder, emittingAssemblyAttributesInNetModule: false); 991540"];
14835 [label="return GetCustomAttributesToEmit(moduleBuilder, emittingAssemblyAttributesInNetModule: false); 991541"];
14836 [label="GetCustomAttributesToEmit(moduleBuilder, emittingAssemblyAttributesInNetModule: false) 991542"];
14837 [label="param GetCustomAttributesToEmit(PEModuleBuilder moduleBuilder) 991543"];
14838 [label="param GetCustomAttributesToEmit(bool emittingAssemblyAttributesInNetModule) 991544"];
14839 [label="param GetCustomAttributesToEmit(this) 991545"];
14840 [label="CheckDefinitionInvariant() 991546"];
14841 [label="param CheckDefinitionInvariant(this) 991547"];
14842 [label="this.IsDefinition 991548"];
14843 [label="get\n            {\n                return (object)this == (object)OriginalDefinition;\n            } 991549"];
14844 [label="OriginalDefinition 991550"];
14845 [label="get\n            {\n                return OriginalSymbolDefinition;\n            } 991551"];
14846 [label="OriginalSymbolDefinition 991552"];
14847 [label="get\n            {\n                return this;\n            } 991553"];
14848 [label="return this; 991554"];
14849 [label="return OriginalSymbolDefinition; 991555"];
14850 [label="return (object)this == (object)OriginalDefinition; 991556"];
14851 [label="Debug.Assert(this.IsDefinition); 991557"];
14852 [label="this.ContainingModule 991558"];
14853 [label="get\n            {\n                return null;\n            } 991559"];
14854 [label="return null; 991560"];
14855 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991561"];
14856 [label="this.Kind 991562"];
14857 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 991563"];
14858 [label="return SymbolKind.NetModule; 991564"];
14859 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991565"];
14860 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991566"];
14861 [label="this.Kind 991567"];
14862 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 991568"];
14863 [label="return SymbolKind.NetModule; 991569"];
14864 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991570"];
14865 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991571"];
14866 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991572"];
14867 [label="CheckDefinitionInvariant(); 991573"];
14868 [label="this.Kind 991574"];
14869 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 991575"];
14870 [label="return SymbolKind.NetModule; 991576"];
14871 [label="Debug.Assert(this.Kind != SymbolKind.Assembly); 991577"];
14872 [label="ImmutableArray<CSharpAttributeData> userDefined; 991578"];
14873 [label="userDefined 991579"];
14874 [label="ArrayBuilder<SynthesizedAttributeData> synthesized = null; 991580"];
14875 [label="this.GetAttributes() 991581"];
14876 [label="param GetAttributes(this) 991582"];
14877 [label="this.GetAttributesBag() 991583"];
14878 [label="if (_lazyCustomAttributesBag == null || !_lazyCustomAttributesBag.IsSealed)\n            {\n                var mergedAttributes = ((SourceAssemblySymbol)this.ContainingAssembly).GetAttributeDeclarations();\n                if (LoadAndValidateAttributes(OneOrMany.Create(mergedAttributes), ref _lazyCustomAttributesBag))\n                {\n                    var completed = _state.NotePartComplete(CompletionPart.Attributes);\n                    Debug.Assert(completed);\n                }\n            } 991584"];
14879 [label="userDefined = this.GetAttributes(); 991585"];
14880 [label="this.AddSynthesizedAttributes(moduleBuilder, ref synthesized); 991586"];
14881 [label="this.AddSynthesizedAttributes(moduleBuilder, ref synthesized); 991587"];
14882 [label="this.AddSynthesizedAttributes(moduleBuilder, ref synthesized) 991588"];
14883 [label="param AddSynthesizedAttributes(PEModuleBuilder moduleBuilder) 991589"];
14884 [label="param AddSynthesizedAttributes(ref ArrayBuilder<SynthesizedAttributeData> attributes) 991590"];
14885 [label="param AddSynthesizedAttributes(this) 991591"];
14886 [label="base.AddSynthesizedAttributes(moduleBuilder, ref attributes); 991592"];
14887 [label="base.AddSynthesizedAttributes(moduleBuilder, ref attributes); 991593"];
14888 [label="base.AddSynthesizedAttributes(moduleBuilder, ref attributes) 991594"];
14889 [label="param AddSynthesizedAttributes(PEModuleBuilder moduleBuilder) 991595"];
14890 [label="param AddSynthesizedAttributes(ref ArrayBuilder<SynthesizedAttributeData> attributes) 991596"];
14891 [label="param AddSynthesizedAttributes(this) 991597"];
14892 [label="base.AddSynthesizedAttributes(moduleBuilder, ref attributes); 991598"];
14893 [label="_assemblySymbol.DeclaringCompilation 991599"];
14894 [label="get\n            {\n                return _compilation;\n            } 991600"];
14895 [label="var compilation = _assemblySymbol.DeclaringCompilation; 991601"];
14896 [label="compilation.Options 991602"];
14897 [label="get\n            {\n                return _options;\n            } 991603"];
14898 [label="if (compilation.Options.AllowUnsafe)\n            {\n                // NOTE: GlobalAttrBind::EmitCompilerGeneratedAttrs skips attribute if the well-known type isn't available.\n                if (!(compilation.GetWellKnownType(WellKnownType.System_Security_UnverifiableCodeAttribute) is MissingMetadataTypeSymbol))\n                {\n                    AddSynthesizedAttribute(ref attributes, compilation.TrySynthesizeAttribute(\n                        WellKnownMember.System_Security_UnverifiableCodeAttribute__ctor));\n                }\n            } 991604"];
14899 [label="moduleBuilder.ShouldEmitNullablePublicOnlyAttribute() 991605"];
14900 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 991606"];
14901 [label="Compilation.GetUsesNullableAttributes() 991607"];
14902 [label="param GetUsesNullableAttributes(this) 991608"];
14903 [label="_needsGeneratedAttributes_IsFrozen = true; 991609"];
14904 [label="return _usesNullableAttributes; 991610"];
14905 [label="return Compilation.GetUsesNullableAttributes() && Compilation.EmitNullablePublicOnly; 991611"];
14906 [label="if (moduleBuilder.ShouldEmitNullablePublicOnlyAttribute())\n            {\n                var includesInternals = ImmutableArray.Create(\n                    new TypedConstant(compilation.GetSpecialType(SpecialType.System_Boolean), TypedConstantKind.Primitive, _assemblySymbol.InternalsAreVisible));\n                AddSynthesizedAttribute(ref attributes, moduleBuilder.SynthesizeNullablePublicOnlyAttribute(includesInternals));\n            } 991612"];
14907 [label="this.AddSynthesizedAttributes(moduleBuilder, ref synthesized); 991613"];
14908 [label="return GetCustomAttributesToEmit(userDefined, synthesized, isReturnType: false, emittingAssemblyAttributesInNetModule: emittingAssemblyAttributesInNetModule); 991614"];
14909 [label="return GetCustomAttributesToEmit(userDefined, synthesized, isReturnType: false, emittingAssemblyAttributesInNetModule: emittingAssemblyAttributesInNetModule); 991615"];
14910 [label="return GetCustomAttributesToEmit(userDefined, synthesized, isReturnType: false, emittingAssemblyAttributesInNetModule: emittingAssemblyAttributesInNetModule); 991616"];
14911 [label="return GetCustomAttributesToEmit(userDefined, synthesized, isReturnType: false, emittingAssemblyAttributesInNetModule: emittingAssemblyAttributesInNetModule); 991617"];
14912 [label="GetCustomAttributesToEmit(userDefined, synthesized, isReturnType: false, emittingAssemblyAttributesInNetModule: emittingAssemblyAttributesInNetModule) 991618"];
14913 [label="param GetCustomAttributesToEmit(ImmutableArray<CSharpAttributeData> userDefined) 991619"];
14914 [label="param GetCustomAttributesToEmit(ArrayBuilder<SynthesizedAttributeData> synthesized) 991620"];
14915 [label="param GetCustomAttributesToEmit(bool isReturnType) 991621"];
14916 [label="param GetCustomAttributesToEmit(bool emittingAssemblyAttributesInNetModule) 991622"];
14917 [label="param GetCustomAttributesToEmit(this) 991623"];
14918 [label="CheckDefinitionInvariant() 991624"];
14919 [label="param CheckDefinitionInvariant(this) 991625"];
14920 [label="this.IsDefinition 991626"];
14921 [label="get\n            {\n                return (object)this == (object)OriginalDefinition;\n            } 991627"];
14922 [label="OriginalDefinition 991628"];
14923 [label="get\n            {\n                return OriginalSymbolDefinition;\n            } 991629"];
14924 [label="OriginalSymbolDefinition 991630"];
14925 [label="get\n            {\n                return this;\n            } 991631"];
14926 [label="return this; 991632"];
14927 [label="return OriginalSymbolDefinition; 991633"];
14928 [label="return (object)this == (object)OriginalDefinition; 991634"];
14929 [label="Debug.Assert(this.IsDefinition); 991635"];
14930 [label="this.ContainingModule 991636"];
14931 [label="get\n            {\n                return null;\n            } 991637"];
14932 [label="return null; 991638"];
14933 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991639"];
14934 [label="this.Kind 991640"];
14935 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 991641"];
14936 [label="return SymbolKind.NetModule; 991642"];
14937 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991643"];
14938 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991644"];
14939 [label="this.Kind 991645"];
14940 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 991646"];
14941 [label="return SymbolKind.NetModule; 991647"];
14942 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991648"];
14943 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991649"];
14944 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 991650"];
14945 [label="CheckDefinitionInvariant(); 991651"];
14946 [label="if (userDefined.IsEmpty && synthesized == null)\n            {\n                return SpecializedCollections.EmptyEnumerable<CSharpAttributeData>();\n            } 991652"];
14947 [label="if (userDefined.IsEmpty && synthesized == null)\n            {\n                return SpecializedCollections.EmptyEnumerable<CSharpAttributeData>();\n            } 991653"];
14948 [label="if (userDefined.IsEmpty && synthesized == null)\n            {\n                return SpecializedCollections.EmptyEnumerable<CSharpAttributeData>();\n            } 991654"];
14949 [label="return GetCustomAttributesToEmit(moduleBuilder, emittingAssemblyAttributesInNetModule: false); 991655"];
14950 [label="return SourceModule.GetCustomAttributesToEmit(this); 991656"];
14951 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 991657"];
14952 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 991658"];
14953 [label="get\n            {\n                return _anonymousTypeManager;\n            } 991659"];
14954 [label="param GetAllCreatedTemplates(this) 991660"];
14955 [label="param GetCreatedAnonymousTypeTemplates(this) 991661"];
14956 [label="var anonymousTypes = _lazyAnonymousTypeTemplates; 991662"];
14957 [label="if (anonymousTypes != null)\n            {\n                foreach (var template in anonymousTypes.Values)\n                {\n                    if (ReferenceEquals(template.Manager, this))\n                    {\n                        builder.Add(template);\n                    }\n                }\n                // Sort type templates using smallest location\n                builder.Sort(new AnonymousTypeComparer(this.Compilation));\n            } 991663"];
14958 [label="param GetCreatedSynthesizedDelegates(this) 991664"];
14959 [label="var delegates = _lazySynthesizedDelegates; 991665"];
14960 [label="if (delegates != null)\n            {\n                foreach (var template in delegates.Values)\n                {\n                    if (ReferenceEquals(template.Manager, this))\n                    {\n                        builder.Add(template.Delegate);\n                    }\n                }\n                builder.Sort(SynthesizedDelegateSymbolComparer.Instance);\n            } 991666"];
14961 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 991667"];
14962 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 991668"];
14963 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 991669"];
14964 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 991670"];
14965 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 991671"];
14966 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 991672"];
14967 [label="return (EmbeddableAttributes)_needsGeneratedAttributes; 991673"];
14968 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 991674"];
14969 [label="return GetNeedsGeneratedAttributesInternal(); 991675"];
14970 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 991676"];
14971 [label="return _usesNullableAttributes; 991677"];
14972 [label="return Compilation.GetUsesNullableAttributes() && Compilation.EmitNullablePublicOnly; 991678"];
14973 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 991679"];
14974 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 991680"];
14975 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 991681"];
14976 [label="return; 991682"];
14977 [label="ns.GetMembers() 991683"];
14978 [label="return _lazyAllMembers; 991684"];
14979 [label="foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                } 991685"];
14980 [label="param GetExportedTypes(DiagnosticBag diagnostics) 991686"];
14981 [label="param GetExportedTypes(this) 991687"];
14982 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 991688"];
14983 [label="if (_lazyExportedTypes.IsDefault)\n            {\n                _lazyExportedTypes = CalculateExportedTypes();\n\n                if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                }\n            } 991689"];
14984 [label="CalculateExportedTypes() 991690"];
14985 [label="param CalculateExportedTypes(this) 991691"];
14986 [label="SourceModule.ContainingSourceAssembly 991692"];
14987 [label="get\n            {\n                return _assemblySymbol;\n            } 991693"];
14988 [label="SourceAssemblySymbol sourceAssembly = SourceModule.ContainingSourceAssembly; 991694"];
14989 [label="var builder = ArrayBuilder<Cci.ExportedType>.GetInstance(); 991695"];
14990 [label="if (!OutputKind.IsNetModule())\n            {\n                var modules = sourceAssembly.Modules;\n                for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                }\n            } 991696"];
14991 [label="sourceAssembly.Modules 991697"];
14992 [label="get\n            {\n                return _modules;\n            } 991698"];
14993 [label="var modules = sourceAssembly.Modules; 991699"];
14994 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 991700"];
14995 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 991701"];
14996 [label="GetExportedTypes(modules[i].GlobalNamespace, -1, builder); 991702"];
14997 [label="modules[i].GlobalNamespace 991703"];
14998 [label="get { return _globalNamespace; } 991704"];
14999 [label="GetExportedTypes(modules[i].GlobalNamespace, -1, builder); 991705"];
15000 [label="GetExportedTypes(modules[i].GlobalNamespace, -1, builder); 991706"];
15001 [label="GetExportedTypes(modules[i].GlobalNamespace, -1, builder) 991707"];
15002 [label="param GetExportedTypes(NamespaceOrTypeSymbol symbol) 991708"];
15003 [label="param GetExportedTypes(int parentIndex) 991709"];
15004 [label="param GetExportedTypes(ArrayBuilder<Cci.ExportedType> builder) 991710"];
15005 [label="int index; 991711"];
15006 [label="symbol.Kind 991712"];
15007 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 991713"];
15008 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                if (symbol.DeclaredAccessibility != Accessibility.Public)\n                {\n                    return;\n                }\n\n                Debug.Assert(symbol.IsDefinition);\n                index = builder.Count;\n                builder.Add(new Cci.ExportedType((Cci.ITypeReference)symbol.GetCciAdapter(), parentIndex, isForwarder: false));\n            }\n            else\n            {\n                index = -1;\n            } 991714"];
15009 [label="index = -1; 991715"];
15010 [label="symbol.GetMembers() 991716"];
15011 [label="param GetMembers(this) 991717"];
15012 [label="EnsureAllMembersLoaded() 991718"];
15013 [label="param EnsureAllMembersLoaded(this) 991719"];
15014 [label="EnsureAllMembersLoaded(); 991720"];
15015 [label="foreach (var member in symbol.GetMembers())\n            {\n                var namespaceOrType = member as NamespaceOrTypeSymbol;\n                if ((object)namespaceOrType != null)\n                {\n                    GetExportedTypes(namespaceOrType, index, builder);\n                }\n            } 991721"];
15016 [label="var namespaceOrType = member as NamespaceOrTypeSymbol; 991722"];
15017 [label="if ((object)namespaceOrType != null)\n                {\n                    GetExportedTypes(namespaceOrType, index, builder);\n                } 991723"];
15018 [label="if ((object)namespaceOrType != null)\n                {\n                    GetExportedTypes(namespaceOrType, index, builder);\n                } 991724"];
15019 [label="GetExportedTypes(namespaceOrType, index, builder); 991725"];
15020 [label="GetExportedTypes(namespaceOrType, index, builder); 991726"];
15021 [label="GetExportedTypes(namespaceOrType, index, builder); 991727"];
15022 [label="GetExportedTypes(namespaceOrType, index, builder) 991728"];
15023 [label="param GetExportedTypes(NamespaceOrTypeSymbol symbol) 991729"];
15024 [label="param GetExportedTypes(int parentIndex) 991730"];
15025 [label="param GetExportedTypes(ArrayBuilder<Cci.ExportedType> builder) 991731"];
15026 [label="int index; 991732"];
15027 [label="symbol.Kind 991733"];
15028 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 991734"];
15029 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                if (symbol.DeclaredAccessibility != Accessibility.Public)\n                {\n                    return;\n                }\n\n                Debug.Assert(symbol.IsDefinition);\n                index = builder.Count;\n                builder.Add(new Cci.ExportedType((Cci.ITypeReference)symbol.GetCciAdapter(), parentIndex, isForwarder: false));\n            }\n            else\n            {\n                index = -1;\n            } 991735"];
15030 [label="symbol.DeclaredAccessibility 991736"];
15031 [label="get\n            {\n                Accessibility access = Accessibility.Private;\n\n                switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                }\n\n                return access;\n            } 991737"];
15032 [label="Accessibility access = Accessibility.Private; 991738"];
15033 [label="switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                } 991739"];
15034 [label="access = Accessibility.Internal; 991740"];
15035 [label="return access; 991741"];
15036 [label="if (symbol.DeclaredAccessibility != Accessibility.Public)\n                {\n                    return;\n                } 991742"];
15037 [label="return; 991743"];
15038 [label="GetExportedTypes(namespaceOrType, index, builder); 991744"];
15039 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 991745"];
15040 [label="index = -1; 991746"];
15041 [label="EnsureAllMembersLoaded() 991747"];
15042 [label="param EnsureAllMembersLoaded(this) 991748"];
15043 [label="var typesByNS = _typesByNS; 991749"];
15044 [label="if (lazyTypes == null || lazyNamespaces == null)\n            {\n                System.Diagnostics.Debug.Assert(typesByNS != null);\n                LoadAllMembers(typesByNS);\n                Interlocked.Exchange(ref _typesByNS, null);\n            } 991750"];
15045 [label="if (lazyTypes == null || lazyNamespaces == null)\n            {\n                System.Diagnostics.Debug.Assert(typesByNS != null);\n                LoadAllMembers(typesByNS);\n                Interlocked.Exchange(ref _typesByNS, null);\n            } 991751"];
15046 [label="EnsureAllMembersLoaded(); 991752"];
15047 [label="GetExportedTypes(namespaceOrType, index, builder); 991753"];
15048 [label="param GetExportedTypes(int parentIndex) 991754"];
15049 [label="int index; 991755"];
15050 [label="symbol.Kind 991756"];
15051 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 991757"];
15052 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                if (symbol.DeclaredAccessibility != Accessibility.Public)\n                {\n                    return;\n                }\n\n                Debug.Assert(symbol.IsDefinition);\n                index = builder.Count;\n                builder.Add(new Cci.ExportedType((Cci.ITypeReference)symbol.GetCciAdapter(), parentIndex, isForwarder: false));\n            }\n            else\n            {\n                index = -1;\n            } 991758"];
15053 [label="symbol.DeclaredAccessibility 991759"];
15054 [label="get\n            {\n                Accessibility access = Accessibility.Private;\n\n                switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                }\n\n                return access;\n            } 991760"];
15055 [label="Accessibility access = Accessibility.Private; 991761"];
15056 [label="switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                } 991762"];
15057 [label="access = Accessibility.Internal; 991763"];
15058 [label="return access; 991764"];
15059 [label="if (symbol.DeclaredAccessibility != Accessibility.Public)\n                {\n                    return;\n                } 991765"];
15060 [label="return; 991766"];
15061 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 991767"];
15062 [label="sourceAssembly.DeclaringCompilation 991768"];
15063 [label="get\n            {\n                return _compilation;\n            } 991769"];
15064 [label="return _compilation; 991770"];
15065 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 991771"];
15066 [label="sourceAssembly.DeclaringCompilation.Options 991772"];
15067 [label="get\n            {\n                return _options;\n            } 991773"];
15068 [label="GetForwardedTypes(sourceAssembly, builder); 991774"];
15069 [label="GetForwardedTypes(sourceAssembly, builder); 991775"];
15070 [label="GetForwardedTypes(sourceAssembly, builder) 991776"];
15071 [label="param GetForwardedTypes(SourceAssemblySymbol sourceAssembly) 991777"];
15072 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 991778"];
15073 [label="var seenTopLevelForwardedTypes = new HashSet<NamedTypeSymbol>(); 991779"];
15074 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 991780"];
15075 [label="sourceAssembly.GetSourceDecodedWellKnownAttributeData() 991781"];
15076 [label="param GetSourceDecodedWellKnownAttributeData(this) 991782"];
15077 [label="var attributesBag = _lazySourceAttributesBag; 991783"];
15078 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 991784"];
15079 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 991785"];
15080 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder) 991786"];
15081 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 991787"];
15082 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 991788"];
15083 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 991789"];
15084 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 991790"];
15085 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 991791"];
15086 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 991792"];
15087 [label="sourceAssembly.DeclaringCompilation 991793"];
15088 [label="get\n            {\n                return _compilation;\n            } 991794"];
15089 [label="return _compilation; 991795"];
15090 [label="if (!sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule())\n            {\n                GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder);\n            } 991796"];
15091 [label="sourceAssembly.DeclaringCompilation.Options 991797"];
15092 [label="get\n            {\n                return _options;\n            } 991798"];
15093 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 991799"];
15094 [label="sourceAssembly.GetNetModuleDecodedWellKnownAttributeData() 991800"];
15095 [label="EnsureNetModuleAttributesAreBound(); 991801"];
15096 [label="var attributesBag = this.GetNetModuleAttributesBag(); 991802"];
15097 [label="Debug.Assert(attributesBag.IsSealed); 991803"];
15098 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 991804"];
15099 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 991805"];
15100 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 991806"];
15101 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder) 991807"];
15102 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 991808"];
15103 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 991809"];
15104 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 991810"];
15105 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 991811"];
15106 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 991812"];
15107 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 991813"];
15108 [label="return seenTopLevelForwardedTypes; 991814"];
15109 [label="GetForwardedTypes(sourceAssembly, builder); 991815"];
15110 [label="return builder.ToImmutableAndFree(); 991816"];
15111 [label="_lazyExportedTypes = CalculateExportedTypes(); 991817"];
15112 [label="_lazyExportedTypes 991818"];
15113 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 991819"];
15114 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 991820"];
15115 [label="return _lazyExportedTypes; 991821"];
15116 [label="param AddEmbeddedResourcesFromAddedModules(ArrayBuilder<Cci.ManagedResource> builder) 991822"];
15117 [label="param AddEmbeddedResourcesFromAddedModules(DiagnosticBag diagnostics) 991823"];
15118 [label="param AddEmbeddedResourcesFromAddedModules(this) 991824"];
15119 [label="_sourceAssembly.Modules 991825"];
15120 [label="get\n            {\n                return _modules;\n            } 991826"];
15121 [label="var modules = _sourceAssembly.Modules; 991827"];
15122 [label="int count = modules.Length; 991828"];
15123 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 991829"];
15124 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 991830"];
15125 [label="var file = (Cci.IFileReference)Translate(modules[i], diagnostics); 991831"];
15126 [label="var file = (Cci.IFileReference)Translate(modules[i], diagnostics); 991832"];
15127 [label="Translate(modules[i], diagnostics) 991833"];
15128 [label="param Translate(ModuleSymbol module) 991834"];
15129 [label="param Translate(DiagnosticBag diagnostics) 991835"];
15130 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 991836"];
15131 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 991837"];
15132 [label="if ((object)module == null)\n            {\n                return null;\n            } 991838"];
15133 [label="if ((object)module == null)\n            {\n                return null;\n            } 991839"];
15134 [label="param Equals(TypeCompareKind compareKind) 991840"];
15135 [label="return moduleRef; 991841"];
15136 [label="foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    } 991842"];
15137 [label="((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module 991843"];
15138 [label="get\n            {\n                return _module;\n            } 991844"];
15139 [label="=> ImmutableArray<Cci.UsedNamespaceOrType>.Empty 991845"];
15140 [label="ImmutableArray<Cci.UsedNamespaceOrType>.Empty 991846"];
15141 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 991847"];
15142 [label="this.SyntaxTrees 991848"];
15143 [label="_syntaxAndDeclarations.GetLazyState() 991849"];
15144 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 991850"];
15145 [label="=> null 991851"];
15146 [label="null 991852"];
15147 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 991853"];
15148 [label="param CommonGetBoundReferenceManager(this) 991854"];
15149 [label="GetBoundReferenceManager() 991855"];
15150 [label="param GetBoundReferenceManager(this) 991856"];
15151 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 991857"];
15152 [label="return _referenceManager; 991858"];
15153 [label="return GetBoundReferenceManager(); 991859"];
15154 [label="=> LanguageNames.CSharp 991860"];
15155 [label="LanguageNames.CSharp 991861"];
15156 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 991862"];
15157 [label="param SerializePdbEmbeddedCompilationOptions(BlobBuilder builder) 991863"];
15158 [label="param SerializePdbEmbeddedCompilationOptions(this) 991864"];
15159 [label="Debug.Assert(LanguageVersion == LanguageVersion.MapSpecifiedToEffectiveVersion()); 991865"];
15160 [label="LanguageVersion.MapSpecifiedToEffectiveVersion() 991866"];
15161 [label="param MapSpecifiedToEffectiveVersion(this LanguageVersion version) 991867"];
15162 [label="return version; 991868"];
15163 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 991869"];
15164 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 991870"];
15165 [label="LanguageVersion.ToDisplayString() 991871"];
15166 [label="param ToDisplayString(this LanguageVersion version) 991872"];
15167 [label="switch (version)\n            {\n                case LanguageVersion.CSharp1:\n                    return '1';\n                case LanguageVersion.CSharp2:\n                    return '2';\n                case LanguageVersion.CSharp3:\n                    return '3';\n                case LanguageVersion.CSharp4:\n                    return '4';\n                case LanguageVersion.CSharp5:\n                    return '5';\n                case LanguageVersion.CSharp6:\n                    return '6';\n                case LanguageVersion.CSharp7:\n                    return '7.0';\n                case LanguageVersion.CSharp7_1:\n                    return '7.1';\n                case LanguageVersion.CSharp7_2:\n                    return '7.2';\n                case LanguageVersion.CSharp7_3:\n                    return '7.3';\n                case LanguageVersion.CSharp8:\n                    return '8.0';\n                case LanguageVersion.CSharp9:\n                    return '9.0';\n                case LanguageVersion.Default:\n                    return 'default';\n                case LanguageVersion.Latest:\n                    return 'latest';\n                case LanguageVersion.LatestMajor:\n                    return 'latestmajor';\n                case LanguageVersion.Preview:\n                    return 'preview';\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(version);\n            } 991873"];
15168 [label="return '9.0'; 991874"];
15169 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()) 991875"];
15170 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 991876"];
15171 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 991877"];
15172 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 991878"];
15173 [label="builder.WriteUTF8(key); 991879"];
15174 [label="builder.WriteUTF8(key); 991880"];
15175 [label="builder.WriteUTF8(key); 991881"];
15176 [label="builder.WriteByte(0); 991882"];
15177 [label="builder.WriteByte(0); 991883"];
15178 [label="builder.WriteUTF8(value); 991884"];
15179 [label="builder.WriteUTF8(value); 991885"];
15180 [label="builder.WriteUTF8(value); 991886"];
15181 [label="builder.WriteByte(0); 991887"];
15182 [label="builder.WriteByte(0); 991888"];
15183 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 991889"];
15184 [label="Options 991890"];
15185 [label="get\n            {\n                return _options;\n            } 991891"];
15186 [label="return _options; 991892"];
15187 [label="if (Options.CheckOverflow)\n            {\n                WriteValue(CompilationOptionNames.Checked, Options.CheckOverflow.ToString());\n            } 991893"];
15188 [label="Options 991894"];
15189 [label="get\n            {\n                return _options;\n            } 991895"];
15190 [label="return _options; 991896"];
15191 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable)\n            {\n                WriteValue(CompilationOptionNames.Nullable, Options.NullableContextOptions.ToString());\n            } 991897"];
15192 [label="Options 991898"];
15193 [label="get\n            {\n                return _options;\n            } 991899"];
15194 [label="return _options; 991900"];
15195 [label="if (Options.AllowUnsafe)\n            {\n                WriteValue(CompilationOptionNames.Unsafe, Options.AllowUnsafe.ToString());\n            } 991901"];
15196 [label="GetPreprocessorSymbols() 991902"];
15197 [label="param GetPreprocessorSymbols(this) 991903"];
15198 [label="SyntaxTrees 991904"];
15199 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 991905"];
15200 [label="_syntaxAndDeclarations.GetLazyState() 991906"];
15201 [label="param GetLazyState(this) 991907"];
15202 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 991908"];
15203 [label="CSharpSyntaxTree? firstTree = (CSharpSyntaxTree?)SyntaxTrees.FirstOrDefault(); 991909"];
15204 [label="if (firstTree is null)\n            {\n                return ImmutableArray<string>.Empty;\n            } 991910"];
15205 [label="firstTree.Options 991911"];
15206 [label="get\n                {\n                    return _options;\n                } 991912"];
15207 [label="return firstTree.Options.PreprocessorSymbolNames.ToImmutableArray(); 991913"];
15208 [label="firstTree.Options.PreprocessorSymbolNames 991914"];
15209 [label="get { return PreprocessorSymbols; } 991915"];
15210 [label="return PreprocessorSymbols; 991916"];
15211 [label="var preprocessorSymbols = GetPreprocessorSymbols(); 991917"];
15212 [label="if (preprocessorSymbols.Any())\n            {\n                WriteValue(CompilationOptionNames.Define, string.Join(',', preprocessorSymbols));\n            } 991918"];
15213 [label="=> _sourceAssembly 991919"];
15214 [label="_sourceAssembly 991920"];
15215 [label="get\n            {\n                var defaultValue = default(AssemblyFlags);\n                var fieldValue = defaultValue;\n\n                var data = GetSourceDecodedWellKnownAttributeData();\n                if (data != null)\n                {\n                    fieldValue = data.AssemblyFlagsAttributeSetting;\n                }\n\n                data = GetNetModuleDecodedWellKnownAttributeData();\n                if (data != null)\n                {\n                    fieldValue |= data.AssemblyFlagsAttributeSetting;\n                }\n\n                return fieldValue;\n            } 991921"];
15216 [label="var defaultValue = default(AssemblyFlags); 991922"];
15217 [label="var fieldValue = defaultValue; 991923"];
15218 [label="GetSourceDecodedWellKnownAttributeData() 991924"];
15219 [label="param GetSourceDecodedWellKnownAttributeData(this) 991925"];
15220 [label="var attributesBag = _lazySourceAttributesBag; 991926"];
15221 [label="if (attributesBag == null || !attributesBag.IsDecodedWellKnownAttributeDataComputed)\n            {\n                attributesBag = this.GetSourceAttributesBag();\n            } 991927"];
15222 [label="var data = GetSourceDecodedWellKnownAttributeData(); 991928"];
15223 [label="if (data != null)\n                {\n                    fieldValue = data.AssemblyFlagsAttributeSetting;\n                } 991929"];
15224 [label="if (data != null)\n                {\n                    fieldValue = data.AssemblyFlagsAttributeSetting;\n                } 991930"];
15225 [label="GetNetModuleDecodedWellKnownAttributeData() 991931"];
15226 [label="param GetNetModuleDecodedWellKnownAttributeData(this) 991932"];
15227 [label="this.GetNetModuleAttributesBag() 991933"];
15228 [label="param GetNetModuleAttributesBag(this) 991934"];
15229 [label="EnsureNetModuleAttributesAreBound() 991935"];
15230 [label="param EnsureNetModuleAttributesAreBound(this) 991936"];
15231 [label="if (_lazyNetModuleAttributesBag == null)\n            {\n                LoadAndValidateNetModuleAttributes(ref _lazyNetModuleAttributesBag);\n            } 991937"];
15232 [label="if (_lazyNetModuleAttributesBag == null)\n            {\n                LoadAndValidateNetModuleAttributes(ref _lazyNetModuleAttributesBag);\n            } 991938"];
15233 [label="EnsureNetModuleAttributesAreBound(); 991939"];
15234 [label="return _lazyNetModuleAttributesBag; 991940"];
15235 [label="var attributesBag = this.GetNetModuleAttributesBag(); 991941"];
15236 [label="Debug.Assert(attributesBag.IsSealed); 991942"];
15237 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 991943"];
15238 [label="data = GetNetModuleDecodedWellKnownAttributeData(); 991944"];
15239 [label="if (data != null)\n                {\n                    fieldValue |= data.AssemblyFlagsAttributeSetting;\n                } 991945"];
15240 [label="if (data != null)\n                {\n                    fieldValue |= data.AssemblyFlagsAttributeSetting;\n                } 991946"];
15241 [label="return fieldValue; 991947"];
15242 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 991948"];
15243 [label="get\n            {\n                if (lazyAssemblyIdentity == null)\n                    Interlocked.CompareExchange(ref lazyAssemblyIdentity, ComputeIdentity(), null);\n\n                return lazyAssemblyIdentity;\n            } 991949"];
15244 [label="if (lazyAssemblyIdentity == null)\n                    Interlocked.CompareExchange(ref lazyAssemblyIdentity, ComputeIdentity(), null); 991950"];
15245 [label="return lazyAssemblyIdentity; 991951"];
15246 [label="get\n            {\n                return AssemblyAlgorithmIdAttributeSetting ?? AssemblyHashAlgorithm.Sha1;\n            } 991952"];
15247 [label="AssemblyAlgorithmIdAttributeSetting 991953"];
15248 [label="get\n            {\n                var fieldValue = (AssemblyHashAlgorithm?)null;\n\n                var data = GetSourceDecodedWellKnownAttributeData();\n                if (data != null)\n                {\n                    fieldValue = data.AssemblyAlgorithmIdAttributeSetting;\n                }\n\n                if (!fieldValue.HasValue)\n                {\n                    data = GetNetModuleDecodedWellKnownAttributeData();\n                    if (data != null)\n                    {\n                        fieldValue = data.AssemblyAlgorithmIdAttributeSetting;\n                    }\n                }\n\n                return fieldValue;\n            } 991954"];
15249 [label="var fieldValue = (AssemblyHashAlgorithm?)null; 991955"];
15250 [label="GetSourceDecodedWellKnownAttributeData() 991956"];
15251 [label="param GetSourceDecodedWellKnownAttributeData(this) 991957"];
15252 [label="var attributesBag = _lazySourceAttributesBag; 991958"];
15253 [label="if (attributesBag == null || !attributesBag.IsDecodedWellKnownAttributeDataComputed)\n            {\n                attributesBag = this.GetSourceAttributesBag();\n            } 991959"];
15254 [label="var data = GetSourceDecodedWellKnownAttributeData(); 991960"];
15255 [label="if (data != null)\n                {\n                    fieldValue = data.AssemblyAlgorithmIdAttributeSetting;\n                } 991961"];
15256 [label="if (data != null)\n                {\n                    fieldValue = data.AssemblyAlgorithmIdAttributeSetting;\n                } 991962"];
15257 [label="if (!fieldValue.HasValue)\n                {\n                    data = GetNetModuleDecodedWellKnownAttributeData();\n                    if (data != null)\n                    {\n                        fieldValue = data.AssemblyAlgorithmIdAttributeSetting;\n                    }\n                } 991963"];
15258 [label="GetNetModuleDecodedWellKnownAttributeData() 991964"];
15259 [label="param GetNetModuleDecodedWellKnownAttributeData(this) 991965"];
15260 [label="this.GetNetModuleAttributesBag() 991966"];
15261 [label="param GetNetModuleAttributesBag(this) 991967"];
15262 [label="EnsureNetModuleAttributesAreBound() 991968"];
15263 [label="param EnsureNetModuleAttributesAreBound(this) 991969"];
15264 [label="if (_lazyNetModuleAttributesBag == null)\n            {\n                LoadAndValidateNetModuleAttributes(ref _lazyNetModuleAttributesBag);\n            } 991970"];
15265 [label="if (_lazyNetModuleAttributesBag == null)\n            {\n                LoadAndValidateNetModuleAttributes(ref _lazyNetModuleAttributesBag);\n            } 991971"];
15266 [label="EnsureNetModuleAttributesAreBound(); 991972"];
15267 [label="return _lazyNetModuleAttributesBag; 991973"];
15268 [label="var attributesBag = this.GetNetModuleAttributesBag(); 991974"];
15269 [label="Debug.Assert(attributesBag.IsSealed); 991975"];
15270 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 991976"];
15271 [label="data = GetNetModuleDecodedWellKnownAttributeData(); 991977"];
15272 [label="if (data != null)\n                    {\n                        fieldValue = data.AssemblyAlgorithmIdAttributeSetting;\n                    } 991978"];
15273 [label="if (data != null)\n                    {\n                        fieldValue = data.AssemblyAlgorithmIdAttributeSetting;\n                    } 991979"];
15274 [label="return fieldValue; 991980"];
15275 [label="return AssemblyAlgorithmIdAttributeSetting ?? AssemblyHashAlgorithm.Sha1; 991981"];
15276 [label="return AssemblyAlgorithmIdAttributeSetting ?? AssemblyHashAlgorithm.Sha1; 991982"];
15277 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 991983"];
15278 [label="=> _metadataName 991984"];
15279 [label="_metadataName 991985"];
15280 [label="get\n            {\n                return _assemblySymbol;\n            } 991986"];
15281 [label="param GetSourceAttributesBag(this) 991987"];
15282 [label="foreach (var securityAttribute in GetSecurityAttributes(this.GetSourceAttributesBag()))\n            {\n                yield return securityAttribute;\n            } 991988"];
15283 [label="param GetSecurityAttributes(CustomAttributesBag<CSharpAttributeData> attributesBag) 991989"];
15284 [label="Debug.Assert(attributesBag.IsSealed); 991990"];
15285 [label="var wellKnownAttributeData = (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 991991"];
15286 [label="if (wellKnownAttributeData != null)\n            {\n                SecurityWellKnownAttributeData securityData = wellKnownAttributeData.SecurityInformation;\n                if (securityData != null)\n                {\n                    foreach (var securityAttribute in securityData.GetSecurityAttributes<CSharpAttributeData>(attributesBag.Attributes))\n                    {\n                        yield return securityAttribute;\n                    }\n                }\n            } 991992"];
15287 [label="param GetNetModuleAttributesBag(this) 991993"];
15288 [label="foreach (var securityAttribute in GetSecurityAttributes(this.GetNetModuleAttributesBag()))\n            {\n                yield return securityAttribute;\n            } 991994"];
15289 [label="param GetSecurityAttributes(CustomAttributesBag<CSharpAttributeData> attributesBag) 991995"];
15290 [label="Debug.Assert(attributesBag.IsSealed); 991996"];
15291 [label="var wellKnownAttributeData = (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 991997"];
15292 [label="if (wellKnownAttributeData != null)\n            {\n                SecurityWellKnownAttributeData securityData = wellKnownAttributeData.SecurityInformation;\n                if (securityData != null)\n                {\n                    foreach (var securityAttribute in securityData.GetSecurityAttributes<CSharpAttributeData>(attributesBag.Attributes))\n                    {\n                        yield return securityAttribute;\n                    }\n                }\n            } 991998"];
15293 [label="get\n            {\n                return _options;\n            } 991999"];
15294 [label="if (_compilation.Options.AllowUnsafe)\n            {\n                // NOTE: GlobalAttrBind::EmitCompilerGeneratedAttrs skips attribute if the well-known types aren't available.\n                if (!(_compilation.GetWellKnownType(WellKnownType.System_Security_UnverifiableCodeAttribute) is MissingMetadataTypeSymbol) &&\n                    !(_compilation.GetWellKnownType(WellKnownType.System_Security_Permissions_SecurityPermissionAttribute) is MissingMetadataTypeSymbol))\n                {\n                    var securityActionType = _compilation.GetWellKnownType(WellKnownType.System_Security_Permissions_SecurityAction);\n                    if (!(securityActionType is MissingMetadataTypeSymbol))\n                    {\n                        var fieldRequestMinimum = (FieldSymbol)_compilation.GetWellKnownTypeMember(WellKnownMember.System_Security_Permissions_SecurityAction__RequestMinimum);\n\n                        // NOTE: Dev10 handles missing enum value.\n                        object constantValue = (object)fieldRequestMinimum == null || fieldRequestMinimum.HasUseSiteError ? 0 : fieldRequestMinimum.ConstantValue;\n                        var typedConstantRequestMinimum = new TypedConstant(securityActionType, TypedConstantKind.Enum, constantValue);\n\n                        var boolType = _compilation.GetSpecialType(SpecialType.System_Boolean);\n                        Debug.Assert(!boolType.HasUseSiteError,\n                            'Use site errors should have been checked ahead of time (type bool).');\n\n                        var typedConstantTrue = new TypedConstant(boolType, TypedConstantKind.Primitive, value: true);\n\n                        var attribute = _compilation.TrySynthesizeAttribute(\n                            WellKnownMember.System_Security_Permissions_SecurityPermissionAttribute__ctor,\n                            ImmutableArray.Create(typedConstantRequestMinimum),\n                            ImmutableArray.Create(new KeyValuePair<WellKnownMember, TypedConstant>(\n                                WellKnownMember.System_Security_Permissions_SecurityPermissionAttribute__SkipVerification,\n                                typedConstantTrue)));\n\n                        if (attribute != null)\n                        {\n                            yield return new Cci.SecurityAttribute((DeclarativeSecurityAction)(int)constantValue, attribute);\n                        }\n                    }\n                }\n            } 992000"];
15295 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 992001"];
15296 [label="var attributesBag = _lazySourceAttributesBag; 992002"];
15297 [label="var data = GetSourceDecodedWellKnownAttributeData(); 992003"];
15298 [label="if (data != null)\n                {\n                    fieldValue = data.AssemblyAlgorithmIdAttributeSetting;\n                } 992004"];
15299 [label="if (_lazyNetModuleAttributesBag == null)\n            {\n                LoadAndValidateNetModuleAttributes(ref _lazyNetModuleAttributesBag);\n            } 992005"];
15300 [label="return _lazyNetModuleAttributesBag; 992006"];
15301 [label="var attributesBag = this.GetNetModuleAttributesBag(); 992007"];
15302 [label="Debug.Assert(attributesBag.IsSealed); 992008"];
15303 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 992009"];
15304 [label="data = GetNetModuleDecodedWellKnownAttributeData(); 992010"];
15305 [label="if (data != null)\n                    {\n                        fieldValue = data.AssemblyAlgorithmIdAttributeSetting;\n                    } 992011"];
15306 [label="param GetHashValue(AssemblyHashAlgorithm algorithmId) 992012"];
15307 [label="param GetHashValue(this) 992013"];
15308 [label="return _underlyingModule.GetHash(algorithmId); 992014"];
15309 [label="_underlyingModule.GetHash(algorithmId) 992015"];
15310 [label="param GetHash(AssemblyHashAlgorithm algorithmId) 992016"];
15311 [label="param GetHash(this) 992017"];
15312 [label="return _module.GetHash(algorithmId); 992018"];
15313 [label="return _module.GetHash(algorithmId); 992019"];
15314 [label="get\n            {\n                return true;\n            } 992020"];
15315 [label="return true; 992021"];
15316 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 992022"];
15317 [label="get { return _metadataName; } 992023"];
15318 [label="return _metadataName; 992024"];
15319 [label="param GetCustomAttributesToEmit(bool emittingAssemblyAttributesInNetModule) 992025"];
15320 [label="param CheckDefinitionInvariant(this) 992026"];
15321 [label="get\n            {\n                return (object)this == (object)OriginalDefinition;\n            } 992027"];
15322 [label="get\n            {\n                return OriginalSymbolDefinition;\n            } 992028"];
15323 [label="get\n            {\n                return this;\n            } 992029"];
15324 [label="return this; 992030"];
15325 [label="return OriginalSymbolDefinition; 992031"];
15326 [label="return (object)this == (object)OriginalDefinition; 992032"];
15327 [label="Debug.Assert(this.IsDefinition); 992033"];
15328 [label="get\n            {\n                // Default implementation gets the containers module.\n\n                var container = this.ContainingSymbol;\n                return (object)container != null ? container.ContainingModule : null;\n            } 992034"];
15329 [label="get\n            {\n                return null;\n            } 992035"];
15330 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 992036"];
15331 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 992037"];
15332 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 992038"];
15333 [label="Debug.Assert(!attributes.IsDefault); 992039"];
15334 [label="Debug.Assert(!netmoduleAttributes.IsDefault); 992040"];
15335 [label="Debug.Assert(!attributes.IsDefault); 992041"];
15336 [label="param AddSynthesizedAttributes(this) 992042"];
15337 [label="return _lazyContainsExtensionMethods.Value(); 992043"];
15338 [label="bool containsExtensionMethods = this.ContainsExtensionMethods(); 992044"];
15339 [label="if (containsExtensionMethods)\n            {\n                // No need to check if [Extension] attribute was explicitly set since\n                // we'll issue CS1112 error in those cases and won't generate IL.\n                AddSynthesizedAttribute(ref attributes, _compilation.TrySynthesizeAttribute(\n                    WellKnownMember.System_Runtime_CompilerServices_ExtensionAttribute__ctor));\n            } 992045"];
15340 [label="get\n            {\n                var assemblyAttributes = GetAssemblyAttributes();\n                return assemblyAttributes.IndexOfAttribute(this, AttributeDescription.CompilationRelaxationsAttribute) >= 0;\n            } 992046"];
15341 [label="param GetAssemblyAttributes(this) 992047"];
15342 [label="return _lazyAssemblyAttributes; 992048"];
15343 [label="var assemblyAttributes = GetAssemblyAttributes(); 992049"];
15344 [label="param IndexOfAttribute(this ImmutableArray<CSharpAttributeData> attributes) 992050"];
15345 [label="param IndexOfAttribute(Symbol targetSymbol) 992051"];
15346 [label="for (int i = 0; i < attributes.Length; i++)\n            {\n                if (attributes[i].IsTargetAttribute(targetSymbol, description))\n                {\n                    return i;\n                }\n            } 992052"];
15347 [label="if (emitCompilationRelaxationsAttribute)\n            {\n                // Synthesize attribute: [CompilationRelaxationsAttribute(CompilationRelaxations.NoStringInterning)]\n\n                // NOTE: GlobalAttrBind::EmitCompilerGeneratedAttrs skips attribute if the well-known types aren't available.\n                if (!(_compilation.GetWellKnownType(WellKnownType.System_Runtime_CompilerServices_CompilationRelaxationsAttribute) is MissingMetadataTypeSymbol))\n                {\n                    var int32Type = _compilation.GetSpecialType(SpecialType.System_Int32);\n                    Debug.Assert(!int32Type.HasUseSiteError,\n                        'Use site errors should have been checked ahead of time (type int).');\n\n                    var typedConstantNoStringInterning = new TypedConstant(int32Type, TypedConstantKind.Primitive, Cci.Constants.CompilationRelaxations_NoStringInterning);\n\n                    AddSynthesizedAttribute(ref attributes, _compilation.TrySynthesizeAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_CompilationRelaxationsAttribute__ctorInt32,\n                        ImmutableArray.Create(typedConstantNoStringInterning)));\n                }\n            } 992053"];
15348 [label="if (!(_compilation.GetWellKnownType(WellKnownType.System_Runtime_CompilerServices_CompilationRelaxationsAttribute) is MissingMetadataTypeSymbol))\n                {\n                    var int32Type = _compilation.GetSpecialType(SpecialType.System_Int32);\n                    Debug.Assert(!int32Type.HasUseSiteError,\n                        'Use site errors should have been checked ahead of time (type int).');\n\n                    var typedConstantNoStringInterning = new TypedConstant(int32Type, TypedConstantKind.Primitive, Cci.Constants.CompilationRelaxations_NoStringInterning);\n\n                    AddSynthesizedAttribute(ref attributes, _compilation.TrySynthesizeAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_CompilationRelaxationsAttribute__ctorInt32,\n                        ImmutableArray.Create(typedConstantNoStringInterning)));\n                } 992054"];
15349 [label="_compilation.GetWellKnownType(WellKnownType.System_Runtime_CompilerServices_CompilationRelaxationsAttribute) 992055"];
15350 [label="param GetWellKnownType(WellKnownType type) 992056"];
15351 [label="Debug.Assert(type.IsValid()); 992057"];
15352 [label="this.Options 992058"];
15353 [label="bool ignoreCorLibraryDuplicatedTypes = this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes); 992059"];
15354 [label="bool ignoreCorLibraryDuplicatedTypes = this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes); 992060"];
15355 [label="this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) 992061"];
15356 [label="param Includes(this BinderFlags self) 992062"];
15357 [label="param Includes(BinderFlags other) 992063"];
15358 [label="return (self & other) == other; 992064"];
15359 [label="return _lazyWellKnownTypes[index]!; 992065"];
15360 [label="get\n            {\n                var assemblyAttributes = GetAssemblyAttributes();\n                return assemblyAttributes.IndexOfAttribute(this, AttributeDescription.RuntimeCompatibilityAttribute) >= 0;\n            } 992066"];
15361 [label="param GetAssemblyAttributes(this) 992067"];
15362 [label="return _lazyAssemblyAttributes; 992068"];
15363 [label="var assemblyAttributes = GetAssemblyAttributes(); 992069"];
15364 [label="param IndexOfAttribute(this ImmutableArray<CSharpAttributeData> attributes) 992070"];
15365 [label="param IndexOfAttribute(Symbol targetSymbol) 992071"];
15366 [label="for (int i = 0; i < attributes.Length; i++)\n            {\n                if (attributes[i].IsTargetAttribute(targetSymbol, description))\n                {\n                    return i;\n                }\n            } 992072"];
15367 [label="if (emitRuntimeCompatibilityAttribute)\n            {\n                // Synthesize attribute: [RuntimeCompatibilityAttribute(WrapNonExceptionThrows = true)]\n\n                // NOTE: GlobalAttrBind::EmitCompilerGeneratedAttrs skips attribute if the well-known types aren't available.\n                if (!(_compilation.GetWellKnownType(WellKnownType.System_Runtime_CompilerServices_RuntimeCompatibilityAttribute) is MissingMetadataTypeSymbol))\n                {\n                    var boolType = _compilation.GetSpecialType(SpecialType.System_Boolean);\n                    Debug.Assert(!boolType.HasUseSiteError, 'Use site errors should have been checked ahead of time (type bool).');\n\n                    var typedConstantTrue = new TypedConstant(boolType, TypedConstantKind.Primitive, value: true);\n\n                    AddSynthesizedAttribute(ref attributes, _compilation.TrySynthesizeAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_RuntimeCompatibilityAttribute__ctor,\n                        ImmutableArray<TypedConstant>.Empty,\n                        ImmutableArray.Create(new KeyValuePair<WellKnownMember, TypedConstant>(\n                            WellKnownMember.System_Runtime_CompilerServices_RuntimeCompatibilityAttribute__WrapNonExceptionThrows,\n                            typedConstantTrue))));\n                }\n            } 992073"];
15368 [label="if (!(_compilation.GetWellKnownType(WellKnownType.System_Runtime_CompilerServices_RuntimeCompatibilityAttribute) is MissingMetadataTypeSymbol))\n                {\n                    var boolType = _compilation.GetSpecialType(SpecialType.System_Boolean);\n                    Debug.Assert(!boolType.HasUseSiteError, 'Use site errors should have been checked ahead of time (type bool).');\n\n                    var typedConstantTrue = new TypedConstant(boolType, TypedConstantKind.Primitive, value: true);\n\n                    AddSynthesizedAttribute(ref attributes, _compilation.TrySynthesizeAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_RuntimeCompatibilityAttribute__ctor,\n                        ImmutableArray<TypedConstant>.Empty,\n                        ImmutableArray.Create(new KeyValuePair<WellKnownMember, TypedConstant>(\n                            WellKnownMember.System_Runtime_CompilerServices_RuntimeCompatibilityAttribute__WrapNonExceptionThrows,\n                            typedConstantTrue))));\n                } 992074"];
15369 [label="_compilation.GetWellKnownType(WellKnownType.System_Runtime_CompilerServices_RuntimeCompatibilityAttribute) 992075"];
15370 [label="param GetWellKnownType(WellKnownType type) 992076"];
15371 [label="Debug.Assert(type.IsValid()); 992077"];
15372 [label="this.Options 992078"];
15373 [label="bool ignoreCorLibraryDuplicatedTypes = this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes); 992079"];
15374 [label="bool ignoreCorLibraryDuplicatedTypes = this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes); 992080"];
15375 [label="this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) 992081"];
15376 [label="param Includes(this BinderFlags self) 992082"];
15377 [label="param Includes(BinderFlags other) 992083"];
15378 [label="return (self & other) == other; 992084"];
15379 [label="return _lazyWellKnownTypes[index]!; 992085"];
15380 [label="Debug.Assert(type.IsValid()); 992086"];
15381 [label="this.Options 992087"];
15382 [label="bool ignoreCorLibraryDuplicatedTypes = this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes); 992088"];
15383 [label="bool ignoreCorLibraryDuplicatedTypes = this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes); 992089"];
15384 [label="this.Options.TopLevelBinderFlags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) 992090"];
15385 [label="param Includes(this BinderFlags self) 992091"];
15386 [label="param Includes(BinderFlags other) 992092"];
15387 [label="return (self & other) == other; 992093"];
15388 [label="return _lazyWellKnownTypes[index]!; 992094"];
15389 [label="Debug.Assert((object)debuggableAttribute != null, 'GetWellKnownType unexpectedly returned null'); 992095"];
15390 [label="Debug.Assert((object)debuggableAttribute != null, 'GetWellKnownType unexpectedly returned null'); 992096"];
15391 [label="if (debuggableAttribute is MissingMetadataTypeSymbol)\n            {\n                return null;\n            } 992097"];
15392 [label="return null; 992098"];
15393 [label="param AddSynthesizedAttribute(SynthesizedAttributeData attribute) 992099"];
15394 [label="if (attribute != null)\n            {\n                if (attributes == null)\n                {\n                    attributes = new ArrayBuilder<SynthesizedAttributeData>(1);\n                }\n\n                attributes.Add(attribute);\n            } 992100"];
15395 [label="if (attribute != null)\n            {\n                if (attributes == null)\n                {\n                    attributes = new ArrayBuilder<SynthesizedAttributeData>(1);\n                }\n\n                attributes.Add(attribute);\n            } 992101"];
15396 [label="get\n            {\n                return _options;\n            } 992102"];
15397 [label="if (_compilation.Options.OutputKind == OutputKind.NetModule)\n            {\n                // If the attribute is applied in source, do not add synthetic one.\n                // If its value is different from the supplied through options, an error should have been reported by now.\n\n                if (!string.IsNullOrEmpty(_compilation.Options.CryptoKeyContainer) &&\n                    (object)AssemblyKeyContainerAttributeSetting == (object)CommonAssemblyWellKnownAttributeData.StringMissingValue)\n                {\n                    var stringType = _compilation.GetSpecialType(SpecialType.System_String);\n                    Debug.Assert(!stringType.HasUseSiteError, 'Use site errors should have been checked ahead of time (type string).');\n\n                    var typedConstant = new TypedConstant(stringType, TypedConstantKind.Primitive, _compilation.Options.CryptoKeyContainer);\n                    AddSynthesizedAttribute(ref attributes, _compilation.TrySynthesizeAttribute(WellKnownMember.System_Reflection_AssemblyKeyNameAttribute__ctor, ImmutableArray.Create(typedConstant)));\n                }\n\n                if (!String.IsNullOrEmpty(_compilation.Options.CryptoKeyFile) &&\n                    (object)AssemblyKeyFileAttributeSetting == (object)CommonAssemblyWellKnownAttributeData.StringMissingValue)\n                {\n                    var stringType = _compilation.GetSpecialType(SpecialType.System_String);\n                    Debug.Assert(!stringType.HasUseSiteError, 'Use site errors should have been checked ahead of time (type string).');\n\n                    var typedConstant = new TypedConstant(stringType, TypedConstantKind.Primitive, _compilation.Options.CryptoKeyFile);\n                    AddSynthesizedAttribute(ref attributes, _compilation.TrySynthesizeAttribute(WellKnownMember.System_Reflection_AssemblyKeyFileAttribute__ctor, ImmutableArray.Create(typedConstant)));\n                }\n            } 992103"];
15398 [label="param GetCustomAttributesToEmit(bool emittingAssemblyAttributesInNetModule) 992104"];
15399 [label="param GetCustomAttributesToEmit(this) 992105"];
15400 [label="param CheckDefinitionInvariant(this) 992106"];
15401 [label="get\n            {\n                return (object)this == (object)OriginalDefinition;\n            } 992107"];
15402 [label="get\n            {\n                return OriginalSymbolDefinition;\n            } 992108"];
15403 [label="get\n            {\n                return this;\n            } 992109"];
15404 [label="return this; 992110"];
15405 [label="return OriginalSymbolDefinition; 992111"];
15406 [label="return (object)this == (object)OriginalDefinition; 992112"];
15407 [label="Debug.Assert(this.IsDefinition); 992113"];
15408 [label="get\n            {\n                // Default implementation gets the containers module.\n\n                var container = this.ContainingSymbol;\n                return (object)container != null ? container.ContainingModule : null;\n            } 992114"];
15409 [label="get\n            {\n                return null;\n            } 992115"];
15410 [label="get\n            {\n                return SymbolKind.Assembly;\n            } 992116"];
15411 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 992117"];
15412 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 992118"];
15413 [label="param CheckDefinitionInvariant(this) 992119"];
15414 [label="get\n            {\n                return (object)this == (object)OriginalDefinition;\n            } 992120"];
15415 [label="get\n            {\n                return OriginalSymbolDefinition;\n            } 992121"];
15416 [label="get\n            {\n                return this;\n            } 992122"];
15417 [label="return this; 992123"];
15418 [label="return OriginalSymbolDefinition; 992124"];
15419 [label="return (object)this == (object)OriginalDefinition; 992125"];
15420 [label="Debug.Assert(this.IsDefinition); 992126"];
15421 [label="get\n            {\n                return null;\n            } 992127"];
15422 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 992128"];
15423 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 992129"];
15424 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 992130"];
15425 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 992131"];
15426 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 992132"];
15427 [label="param CheckDefinitionInvariant(this) 992133"];
15428 [label="get\n            {\n                return (object)this == (object)OriginalDefinition;\n            } 992134"];
15429 [label="get\n            {\n                return OriginalSymbolDefinition;\n            } 992135"];
15430 [label="get\n            {\n                return this;\n            } 992136"];
15431 [label="return this; 992137"];
15432 [label="return OriginalSymbolDefinition; 992138"];
15433 [label="return (object)this == (object)OriginalDefinition; 992139"];
15434 [label="Debug.Assert(this.IsDefinition); 992140"];
15435 [label="get\n            {\n                return null;\n            } 992141"];
15436 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 992142"];
15437 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 992143"];
15438 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 992144"];
15439 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 992145"];
15440 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 992146"];
15441 [label="param AddSynthesizedAttributes(this) 992147"];
15442 [label="param AddSynthesizedAttributes(this) 992148"];
15443 [label="get\n            {\n                return _compilation;\n            } 992149"];
15444 [label="var compilation = _assemblySymbol.DeclaringCompilation; 992150"];
15445 [label="get\n            {\n                return _options;\n            } 992151"];
15446 [label="if (compilation.Options.AllowUnsafe)\n            {\n                // NOTE: GlobalAttrBind::EmitCompilerGeneratedAttrs skips attribute if the well-known type isn't available.\n                if (!(compilation.GetWellKnownType(WellKnownType.System_Security_UnverifiableCodeAttribute) is MissingMetadataTypeSymbol))\n                {\n                    AddSynthesizedAttribute(ref attributes, compilation.TrySynthesizeAttribute(\n                        WellKnownMember.System_Security_UnverifiableCodeAttribute__ctor));\n                }\n            } 992152"];
15447 [label="return _usesNullableAttributes; 992153"];
15448 [label="return Compilation.GetUsesNullableAttributes() && Compilation.EmitNullablePublicOnly; 992154"];
15449 [label="if (moduleBuilder.ShouldEmitNullablePublicOnlyAttribute())\n            {\n                var includesInternals = ImmutableArray.Create(\n                    new TypedConstant(compilation.GetSpecialType(SpecialType.System_Boolean), TypedConstantKind.Primitive, _assemblySymbol.InternalsAreVisible));\n                AddSynthesizedAttribute(ref attributes, moduleBuilder.SynthesizeNullablePublicOnlyAttribute(includesInternals));\n            } 992155"];
15450 [label="param GetCustomAttributesToEmit(this) 992156"];
15451 [label="param CheckDefinitionInvariant(this) 992157"];
15452 [label="get\n            {\n                return (object)this == (object)OriginalDefinition;\n            } 992158"];
15453 [label="get\n            {\n                return OriginalSymbolDefinition;\n            } 992159"];
15454 [label="get\n            {\n                return this;\n            } 992160"];
15455 [label="return this; 992161"];
15456 [label="return OriginalSymbolDefinition; 992162"];
15457 [label="return (object)this == (object)OriginalDefinition; 992163"];
15458 [label="Debug.Assert(this.IsDefinition); 992164"];
15459 [label="get\n            {\n                return null;\n            } 992165"];
15460 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 992166"];
15461 [label="get\n            {\n                return SymbolKind.NetModule;\n            } 992167"];
15462 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 992168"];
15463 [label="Debug.Assert(this.ContainingModule is SourceModuleSymbol ||\n                         (this.Kind == SymbolKind.Assembly && this is SourceAssemblySymbol) ||\n                         (this.Kind == SymbolKind.NetModule && this is SourceModuleSymbol)); 992169"];
15464 [label="get\n            {\n                return GetWellKnownAttributeDataStringField(data => data.AssemblySignatureKeyAttributeSetting);\n            } 992170"];
15465 [label="return GetWellKnownAttributeDataStringField(data => data.AssemblySignatureKeyAttributeSetting); 992171"];
15466 [label="GetWellKnownAttributeDataStringField(data => data.AssemblySignatureKeyAttributeSetting) 992172"];
15467 [label="param GetWellKnownAttributeDataStringField(Func<CommonAssemblyWellKnownAttributeData, string> fieldGetter) 992173"];
15468 [label="param GetWellKnownAttributeDataStringField(string missingValue = null) 992174"];
15469 [label="param GetWellKnownAttributeDataStringField(this) 992175"];
15470 [label="string fieldValue = missingValue; 992176"];
15471 [label="GetSourceDecodedWellKnownAttributeData() 992177"];
15472 [label="param GetSourceDecodedWellKnownAttributeData(this) 992178"];
15473 [label="var attributesBag = _lazySourceAttributesBag; 992179"];
15474 [label="if (attributesBag == null || !attributesBag.IsDecodedWellKnownAttributeDataComputed)\n            {\n                attributesBag = this.GetSourceAttributesBag();\n            } 992180"];
15475 [label="var data = GetSourceDecodedWellKnownAttributeData(); 992181"];
15476 [label="if (data != null)\n            {\n                fieldValue = fieldGetter(data);\n            } 992182"];
15477 [label="if (data != null)\n            {\n                fieldValue = fieldGetter(data);\n            } 992183"];
15478 [label="if ((object)fieldValue == (object)missingValue)\n            {\n                data = GetNetModuleDecodedWellKnownAttributeData();\n                if (data != null)\n                {\n                    fieldValue = fieldGetter(data);\n                }\n            } 992184"];
15479 [label="GetNetModuleDecodedWellKnownAttributeData() 992185"];
15480 [label="param GetNetModuleDecodedWellKnownAttributeData(this) 992186"];
15481 [label="this.GetNetModuleAttributesBag() 992187"];
15482 [label="param GetNetModuleAttributesBag(this) 992188"];
15483 [label="EnsureNetModuleAttributesAreBound() 992189"];
15484 [label="param EnsureNetModuleAttributesAreBound(this) 992190"];
15485 [label="if (_lazyNetModuleAttributesBag == null)\n            {\n                LoadAndValidateNetModuleAttributes(ref _lazyNetModuleAttributesBag);\n            } 992191"];
15486 [label="if (_lazyNetModuleAttributesBag == null)\n            {\n                LoadAndValidateNetModuleAttributes(ref _lazyNetModuleAttributesBag);\n            } 992192"];
15487 [label="EnsureNetModuleAttributesAreBound(); 992193"];
15488 [label="return _lazyNetModuleAttributesBag; 992194"];
15489 [label="var attributesBag = this.GetNetModuleAttributesBag(); 992195"];
15490 [label="Debug.Assert(attributesBag.IsSealed); 992196"];
15491 [label="return (CommonAssemblyWellKnownAttributeData)attributesBag.DecodedWellKnownAttributeData; 992197"];
15492 [label="data = GetNetModuleDecodedWellKnownAttributeData(); 992198"];
15493 [label="if (data != null)\n                {\n                    fieldValue = fieldGetter(data);\n                } 992199"];
15494 [label="if (data != null)\n                {\n                    fieldValue = fieldGetter(data);\n                } 992200"];
15495 [label="return fieldValue; 992201"];
15496 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 992202"];
15497 [label="return _referenceManager; 992203"];
15498 [label="GetBoundReferenceManager(); 992204"];
15499 [label="if (pdbStream != null)\n                {\n                    pdb = pdbStream.ToImmutable();\n                    pdbStream.Dispose();\n                } 992205"];
15500 [label="if (pdbStream != null)\n                {\n                    pdb = pdbStream.ToImmutable();\n                    pdbStream.Dispose();\n                } 992206"];
15501 [label="diagnostics.AddRange(result.Diagnostics); 992207"];
15502 [label="diagnostics.AddRange(result.Diagnostics); 992208"];
15503 [label="assembly = executableStream.ToImmutable(); 992209"];
15504 [label="assembly = executableStream.ToImmutable(); 992210"];
15505 [label="if (result.Success)\n            {\n                return new EmitOutput(assembly, pdb);\n            } 992211"];
15506 [label="return new EmitOutput(assembly, pdb); 992212"];
15507 [label="return new EmitOutput(assembly, pdb); 992213"];
15508 [label="return new EmitOutput(assembly, pdb); 992214"];
15509 [label="new EmitOutput(assembly, pdb) 992215"];
15510 [label="param EmitOutput(ImmutableArray<byte> assembly) 992216"];
15511 [label="param EmitOutput(ImmutableArray<byte> pdb) 992217"];
15512 [label="param EmitOutput(this) 992218"];
15513 [label="Assembly 992219"];
15514 [label="if (pdb.IsDefault)\n            {\n                // We didn't emit a discrete PDB file, so we'll look for an embedded PDB instead.\n                using (var peReader = new PEReader(Assembly))\n                {\n                    DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb);\n                    if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    }\n                }\n            } 992220"];
15515 [label="using (var peReader = new PEReader(Assembly))\n                {\n                    DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb);\n                    if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    }\n                } 992221"];
15516 [label="DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb); 992222"];
15517 [label="DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb); 992223"];
15518 [label="if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    } 992224"];
15519 [label="if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    } 992225"];
15520 [label="using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        } 992226"];
15521 [label="var mdReader = embeddedMetadataProvider.GetMetadataReader(); 992227"];
15522 [label="var mdReader = embeddedMetadataProvider.GetMetadataReader(); 992228"];
15523 [label="pdb = readMetadata(mdReader); 992229"];
15524 [label="readMetadata(mdReader) 992230"];
15525 [label="unsafe ImmutableArray<byte> readMetadata(MetadataReader mdReader)\n            {\n                var length = mdReader.MetadataLength;\n                var bytes = new byte[length];\n                Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length);\n                return ImmutableArray.Create(bytes);\n            } 992231"];
15526 [label="unsafe ImmutableArray<byte> readMetadata(MetadataReader mdReader)\n            {\n                var length = mdReader.MetadataLength;\n                var bytes = new byte[length];\n                Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length);\n                return ImmutableArray.Create(bytes);\n            } 992232"];
15527 [label="var length = mdReader.MetadataLength; 992233"];
15528 [label="var bytes = new byte[length]; 992234"];
15529 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 992235"];
15530 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 992236"];
15531 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 992237"];
15532 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 992238"];
15533 [label="return ImmutableArray.Create(bytes); 992239"];
15534 [label="return ImmutableArray.Create(bytes); 992240"];
15535 [label="Pdb 992241"];
15536 [label="get { return this.Assembly.GetPublicSymbol(); } 992242"];
15537 [label="this.Assembly 992243"];
15538 [label="get\n            {\n                return SourceAssembly;\n            } 992244"];
15539 [label="SourceAssembly 992245"];
15540 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 992246"];
15541 [label="GetBoundReferenceManager() 992247"];
15542 [label="param GetBoundReferenceManager(this) 992248"];
15543 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 992249"];
15544 [label="return _referenceManager; 992250"];
15545 [label="GetBoundReferenceManager(); 992251"];
15546 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 992252"];
15547 [label="return this.Assembly.GetPublicSymbol(); 992253"];
15548 [label="this.Assembly.GetPublicSymbol() 992254"];
15549 [label="param GetPublicSymbol(this AssemblySymbol? symbol) 992255"];
15550 [label="return symbol.GetPublicSymbol<IAssemblySymbol>(); 992256"];
15551 [label="symbol.GetPublicSymbol<IAssemblySymbol>() 992257"];
15552 [label="param GetPublicSymbol(this Symbol? symbol) 992258"];
15553 [label=".ISymbol 992259"];
15554 [label="param CreateISymbol(this) 992260"];
15555 [label="return new PublicModel.SourceAssemblySymbol(this); 992261"];
15556 [label="return new PublicModel.SourceAssemblySymbol(this); 992262"];
15557 [label="new PublicModel.SourceAssemblySymbol(this) 992263"];
15558 [label="param SourceAssemblySymbol(Symbols.SourceAssemblySymbol underlying) 992264"];
15559 [label="param SourceAssemblySymbol(this) 992265"];
15560 [label="param SourceAssemblySymbol(this) 992266"];
15561 [label="param AssemblySymbol(this) 992267"];
15562 [label="param AssemblySymbol(this) 992268"];
15563 [label="param Symbol(this) 992269"];
15564 [label="_underlying 992270"];
15565 [label="Debug.Assert(underlying is object); 992271"];
15566 [label="_underlying 992272"];
15567 [label="=> UnderlyingAssemblySymbol.Identity 992273"];
15568 [label="UnderlyingAssemblySymbol 992274"];
15569 [label="=> _underlying 992275"];
15570 [label="_underlying 992276"];
15571 [label="UnderlyingAssemblySymbol.Identity 992277"];
15572 [label="get\n            {\n                if (lazyAssemblyIdentity == null)\n                    Interlocked.CompareExchange(ref lazyAssemblyIdentity, ComputeIdentity(), null);\n\n                return lazyAssemblyIdentity;\n            } 992278"];
15573 [label="if (lazyAssemblyIdentity == null)\n                    Interlocked.CompareExchange(ref lazyAssemblyIdentity, ComputeIdentity(), null); 992279"];
15574 [label="get { return _options; } 992280"];
15575 [label="_diagnostics = testEnvironment.GetDiagnostics(); 992281"];
15576 [label="_diagnostics 992282"];
15577 [label="EmittedAssemblyData = testEnvironment.GetMainImage(); 992283"];
15578 [label="EmittedAssemblyData 992284"];
15579 [label="EmittedAssemblyPdb = testEnvironment.GetMainPdb(); 992285"];
15580 [label="EmittedAssemblyPdb 992286"];
15581 [label="_testData = ((IInternalRuntimeEnvironment)testEnvironment).GetCompilationTestData(); 992287"];
15582 [label="_testData 992288"];
15583 [label="return _compilation.Assembly.Identity.GetDisplayName(); 992289"];
15584 [label="_compilation.Assembly 992290"];
15585 [label="get { return this.Assembly.GetPublicSymbol(); } 992291"];
15586 [label="this.Assembly 992292"];
15587 [label="SourceAssembly 992293"];
15588 [label="GetBoundReferenceManager() 992294"];
15589 [label="param GetBoundReferenceManager(this) 992295"];
15590 [label="GetBoundReferenceManager(); 992296"];
15591 [label="this.Assembly.GetPublicSymbol() 992297"];
15592 [label="symbol.GetPublicSymbol<IAssemblySymbol>() 992298"];
15593 [label=".ISymbol 992299"];
15594 [label="_compilation.Assembly.Identity 992300"];
15595 [label="=> UnderlyingAssemblySymbol.Identity 992301"];
15596 [label="UnderlyingAssemblySymbol 992302"];
15597 [label="UnderlyingAssemblySymbol.Identity 992303"];
15598 [label="if (lazyAssemblyIdentity == null)\n                    Interlocked.CompareExchange(ref lazyAssemblyIdentity, ComputeIdentity(), null); 992304"];
15599 [label="return _compilation.Assembly.Identity.GetDisplayName(); 992305"];
15600 [label="_allModuleData = testEnvironment.GetAllModuleData(); 992306"];
15601 [label="_allModuleData 992307"];
15602 [label="testEnvironment.Verify(peVerify); 992308"];
15603 [label="testEnvironment.Verify(peVerify); 992309"];
15604 [label="if (expectedSignatures != null)\n            {\n                MetadataSignatureUnitTestHelper.VerifyMemberSignatures(testEnvironment, expectedSignatures);\n            } 992310"];
15605 [label="if (expectedSignatures != null)\n            {\n                MetadataSignatureUnitTestHelper.VerifyMemberSignatures(testEnvironment, expectedSignatures);\n            } 992311"];
15606 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 992312"];
15607 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 992313"];
15608 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 992314"];
15609 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 992315"];
15610 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 992316"];
15611 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 992317"];
15612 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 992318"];
15613 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 992319"];
15614 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 992320"];
15615 [label="return verifier; 992321"];
15616 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 992322"];
15617 [label="if (result == null)\n            {\n                result = verifier;\n            }\n            else\n            {\n                // only one emitter should return a verifier\n                CustomAssert.Null(verifier);\n            } 992323"];
15618 [label="if (result == null)\n            {\n                result = verifier;\n            }\n            else\n            {\n                // only one emitter should return a verifier\n                CustomAssert.Null(verifier);\n            } 992324"];
15619 [label="result = verifier; 992325"];
15620 [label="CustomAssert.NotNull(result); 992326"];
15621 [label="return result; 992327"];
15622 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 992328"];
15623 [label="CompileAndVerify(comp, verify: Verification.Fails); 992329"];
15624 [label="comp.Assembly 992330"];
15625 [label="get\n            {\n                return SourceAssembly;\n            } 992331"];
15626 [label="SourceAssembly 992332"];
15627 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 992333"];
15628 [label="GetBoundReferenceManager() 992334"];
15629 [label="param GetBoundReferenceManager(this) 992335"];
15630 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 992336"];
15631 [label="return _referenceManager; 992337"];
15632 [label="GetBoundReferenceManager(); 992338"];
15633 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 992339"];
15634 [label="CustomAssert.NotSame(comp.Assembly.CorLibrary, comp.Assembly); 992340"];
15635 [label="comp.Assembly.CorLibrary 992341"];
15636 [label="get\n            {\n                return _corLibrary;\n            } 992342"];
15637 [label="comp.Assembly 992343"];
15638 [label="get\n            {\n                return SourceAssembly;\n            } 992344"];
15639 [label="SourceAssembly 992345"];
15640 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 992346"];
15641 [label="GetBoundReferenceManager() 992347"];
15642 [label="param GetBoundReferenceManager(this) 992348"];
15643 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 992349"];
15644 [label="return _referenceManager; 992350"];
15645 [label="GetBoundReferenceManager(); 992351"];
15646 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 992352"];
15647 [label="CustomAssert.NotSame(comp.Assembly.CorLibrary, comp.Assembly); 992353"];
15648 [label="CustomAssert.NotSame(comp.Assembly.CorLibrary, comp.Assembly); 992354"];
15649 [label="comp.GetSpecialType(SpecialType.System_Int32); 992355"];
15650 [label="comp.GetSpecialType(SpecialType.System_Int32) 992356"];
15651 [label="param GetSpecialType(SpecialType specialType) 992357"];
15652 [label="param GetSpecialType(this) 992358"];
15653 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 992359"];
15654 [label="NamedTypeSymbol result; 992360"];
15655 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 992361"];
15656 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 992362"];
15657 [label="Assembly 992363"];
15658 [label="GetBoundReferenceManager() 992364"];
15659 [label="GetBoundReferenceManager(); 992365"];
15660 [label="result = Assembly.GetSpecialType(specialType); 992366"];
15661 [label="result = Assembly.GetSpecialType(specialType); 992367"];
15662 [label="Assembly.GetSpecialType(specialType) 992368"];
15663 [label="param GetSpecialType(SpecialType type) 992369"];
15664 [label="param GetSpecialType(this) 992370"];
15665 [label="CorLibrary 992371"];
15666 [label="get\n            {\n                return _corLibrary;\n            } 992372"];
15667 [label="return CorLibrary.GetDeclaredSpecialType(type); 992373"];
15668 [label="return CorLibrary.GetDeclaredSpecialType(type); 992374"];
15669 [label="CorLibrary.GetDeclaredSpecialType(type) 992375"];
15670 [label="param GetDeclaredSpecialType(SpecialType type) 992376"];
15671 [label="param GetDeclaredSpecialType(this) 992377"];
15672 [label="this.Modules 992378"];
15673 [label="get\n            {\n                if (_lazyModules.IsDefault)\n                {\n                    _lazyModules = ImmutableArray.Create<ModuleSymbol>(moduleSymbol);\n                }\n\n                return _lazyModules;\n            } 992379"];
15674 [label="foreach (var module in this.Modules)\n            {\n                Debug.Assert(module.GetReferencedAssemblies().Length == 0);\n            } 992380"];
15675 [label="module.GetReferencedAssemblies() 992381"];
15676 [label="param GetReferencedAssemblies(this) 992382"];
15677 [label="return ImmutableArray<AssemblyIdentity>.Empty; 992383"];
15678 [label="Debug.Assert(module.GetReferencedAssemblies().Length == 0); 992384"];
15679 [label="Debug.Assert(module.GetReferencedAssemblies().Length == 0); 992385"];
15680 [label="if (_lazySpecialTypes == null)\n            {\n                Interlocked.CompareExchange(ref _lazySpecialTypes,\n                    new NamedTypeSymbol[(int)SpecialType.Count + 1], null);\n            } 992386"];
15681 [label="if (_lazySpecialTypes == null)\n            {\n                Interlocked.CompareExchange(ref _lazySpecialTypes,\n                    new NamedTypeSymbol[(int)SpecialType.Count + 1], null);\n            } 992387"];
15682 [label="Interlocked.CompareExchange(ref _lazySpecialTypes,\n                    new NamedTypeSymbol[(int)SpecialType.Count + 1], null); 992388"];
15683 [label="Interlocked.CompareExchange(ref _lazySpecialTypes,\n                    new NamedTypeSymbol[(int)SpecialType.Count + 1], null); 992389"];
15684 [label="Interlocked.CompareExchange(ref _lazySpecialTypes,\n                    new NamedTypeSymbol[(int)SpecialType.Count + 1], null); 992390"];
15685 [label="if ((object)_lazySpecialTypes[(int)type] == null)\n            {\n                MetadataTypeName emittedFullName = MetadataTypeName.FromFullName(SpecialTypes.GetMetadataName(type), useCLSCompliantNameArityEncoding: true);\n                NamedTypeSymbol corType = new MissingMetadataTypeSymbol.TopLevel(this.moduleSymbol, ref emittedFullName, type);\n                Interlocked.CompareExchange(ref _lazySpecialTypes[(int)type], corType, null);\n            } 992391"];
15686 [label="if ((object)_lazySpecialTypes[(int)type] == null)\n            {\n                MetadataTypeName emittedFullName = MetadataTypeName.FromFullName(SpecialTypes.GetMetadataName(type), useCLSCompliantNameArityEncoding: true);\n                NamedTypeSymbol corType = new MissingMetadataTypeSymbol.TopLevel(this.moduleSymbol, ref emittedFullName, type);\n                Interlocked.CompareExchange(ref _lazySpecialTypes[(int)type], corType, null);\n            } 992392"];
15687 [label="MetadataTypeName emittedFullName = MetadataTypeName.FromFullName(SpecialTypes.GetMetadataName(type), useCLSCompliantNameArityEncoding: true); 992393"];
15688 [label="MetadataTypeName emittedFullName = MetadataTypeName.FromFullName(SpecialTypes.GetMetadataName(type), useCLSCompliantNameArityEncoding: true); 992394"];
15689 [label="NamedTypeSymbol corType = new MissingMetadataTypeSymbol.TopLevel(this.moduleSymbol, ref emittedFullName, type); 992395"];
15690 [label="NamedTypeSymbol corType = new MissingMetadataTypeSymbol.TopLevel(this.moduleSymbol, ref emittedFullName, type); 992396"];
15691 [label="NamedTypeSymbol corType = new MissingMetadataTypeSymbol.TopLevel(this.moduleSymbol, ref emittedFullName, type); 992397"];
15692 [label="NamedTypeSymbol corType = new MissingMetadataTypeSymbol.TopLevel(this.moduleSymbol, ref emittedFullName, type); 992398"];
15693 [label="new MissingMetadataTypeSymbol.TopLevel(this.moduleSymbol, ref emittedFullName, type) 992399"];
15694 [label="param TopLevel(ModuleSymbol module) 992400"];
15695 [label="param TopLevel(ref MetadataTypeName fullName) 992401"];
15696 [label="param TopLevel(SpecialType specialType) 992402"];
15697 [label="param TopLevel(DiagnosticInfo? errorInfo = null) 992403"];
15698 [label="param TopLevel(this) 992404"];
15699 [label="module 992405"];
15700 [label="fullName 992406"];
15701 [label="specialType 992407"];
15702 [label="errorInfo 992408"];
15703 [label="param TopLevel(this) 992409"];
15704 [label="param TopLevel(ModuleSymbol module) 992410"];
15705 [label="param TopLevel(ref MetadataTypeName fullName) 992411"];
15706 [label="param TopLevel(int typeId) 992412"];
15707 [label="param TopLevel(DiagnosticInfo? errorInfo) 992413"];
15708 [label="_lazyTupleData 992414"];
15709 [label="name 992415"];
15710 [label="arity 992416"];
15711 [label="mangleName 992417"];
15712 [label="RoslynDebug.Assert(name != null); 992418"];
15713 [label="RoslynDebug.Assert(name != null); 992419"];
15714 [label="_namespaceName 992420"];
15715 [label="_containingModule 992421"];
15716 [label="_isNativeInt 992422"];
15717 [label="_lazyErrorInfo 992423"];
15718 [label="_lazyContainingNamespace 992424"];
15719 [label="_lazyTypeId 992425"];
15720 [label="RoslynDebug.Assert((object)module != null); 992426"];
15721 [label="RoslynDebug.Assert((object)module != null); 992427"];
15722 [label="RoslynDebug.Assert(@namespace != null); 992428"];
15723 [label="RoslynDebug.Assert(@namespace != null); 992429"];
15724 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 992430"];
15725 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 992431"];
15726 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 992432"];
15727 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 992433"];
15728 [label="RoslynDebug.Assert(typeId == -1 || typeId == (int)SpecialType.None || arity == 0 || mangleName); 992434"];
15729 [label="Interlocked.CompareExchange(ref _lazySpecialTypes[(int)type], corType, null); 992435"];
15730 [label="Interlocked.CompareExchange(ref _lazySpecialTypes[(int)type], corType, null); 992436"];
15731 [label="Interlocked.CompareExchange(ref _lazySpecialTypes[(int)type], corType, null); 992437"];
15732 [label="Interlocked.CompareExchange(ref _lazySpecialTypes[(int)type], corType, null); 992438"];
15733 [label="return _lazySpecialTypes[(int)type]; 992439"];
15734 [label="result.SpecialType 992440"];
15735 [label="get\n                {\n                    int typeId = TypeId;\n                    return (typeId >= (int)WellKnownType.First) ? SpecialType.None : (SpecialType)_lazyTypeId;\n                } 992441"];
15736 [label="TypeId 992442"];
15737 [label="if (_lazyTypeId == -1)\n                    {\n                        SpecialType typeId = SpecialType.None;\n\n                        AssemblySymbol containingAssembly = _containingModule.ContainingAssembly;\n\n                        if ((Arity == 0 || MangleName) && (object)containingAssembly != null && ReferenceEquals(containingAssembly, containingAssembly.CorLibrary) && _containingModule.Ordinal == 0)\n                        {\n                            // Check the name \n                            string emittedName = MetadataHelpers.BuildQualifiedName(_namespaceName, MetadataName);\n                            typeId = SpecialTypes.GetTypeFromMetadataName(emittedName);\n                        }\n\n                        Interlocked.CompareExchange(ref _lazyTypeId, (int)typeId, -1);\n                    } 992443"];
15738 [label="Debug.Assert(result.SpecialType == specialType); 992444"];
15739 [label="return result; 992445"];
2 -> 0;
2 -> 1;
3 -> 1;
4 -> 3;
5 -> 4;
6 -> 5;
7 -> 6;
8 -> 7;
8 -> 6;
9 -> 1;
9 -> 2;
9 -> 8;
10 -> 1;
11 -> 1;
12 -> 0;
12 -> 11;
12 -> 1;
13 -> 1;
14 -> 11;
14 -> 13;
15 -> 14;
15 -> 13;
16 -> 13;
17 -> 15;
17 -> 16;
18 -> 16;
19 -> 17;
19 -> 18;
19 -> 16;
20 -> 16;
20 -> 1;
21 -> 0;
21 -> 1;
22 -> 1;
23 -> 11;
23 -> 22;
24 -> 20;
24 -> 22;
25 -> 21;
25 -> 22;
26 -> 11;
26 -> 22;
27 -> 11;
27 -> 22;
28 -> 11;
28 -> 22;
29 -> 11;
29 -> 22;
30 -> 23;
30 -> 22;
31 -> 24;
31 -> 22;
32 -> 25;
32 -> 22;
33 -> 26;
33 -> 22;
34 -> 27;
34 -> 22;
35 -> 28;
35 -> 22;
36 -> 29;
36 -> 22;
37 -> 22;
38 -> 37;
38 -> 22;
39 -> 22;
40 -> 30;
40 -> 39;
41 -> 31;
41 -> 39;
42 -> 32;
42 -> 39;
43 -> 33;
43 -> 39;
44 -> 34;
44 -> 39;
45 -> 35;
45 -> 39;
46 -> 36;
46 -> 39;
47 -> 38;
47 -> 39;
48 -> 43;
48 -> 39;
49 -> 45;
49 -> 39;
50 -> 39;
51 -> 48;
51 -> 50;
52 -> 49;
52 -> 50;
53 -> 40;
53 -> 50;
54 -> 53;
54 -> 11;
54 -> 50;
55 -> 54;
56 -> 52;
56 -> 54;
57 -> 51;
57 -> 54;
58 -> 54;
59 -> 55;
59 -> 58;
60 -> 56;
60 -> 58;
61 -> 57;
61 -> 58;
62 -> 55;
62 -> 58;
63 -> 58;
64 -> 61;
64 -> 63;
64 -> 58;
65 -> 0;
65 -> 64;
66 -> 59;
66 -> 58;
67 -> 0;
67 -> 58;
68 -> 67;
68 -> 62;
68 -> 58;
69 -> 58;
70 -> 66;
70 -> 68;
70 -> 69;
70 -> 0;
70 -> 58;
72 -> 71;
73 -> 72;
75 -> 73;
75 -> 74;
76 -> 74;
77 -> 74;
78 -> 75;
78 -> 74;
79 -> 76;
79 -> 78;
80 -> 0;
80 -> 79;
81 -> 74;
82 -> 80;
82 -> 81;
82 -> 74;
84 -> 0;
84 -> 74;
85 -> 75;
85 -> 74;
86 -> 74;
87 -> 84;
87 -> 86;
88 -> 85;
88 -> 86;
89 -> 87;
89 -> 86;
90 -> 88;
90 -> 86;
91 -> 86;
92 -> 86;
93 -> 89;
93 -> 92;
94 -> 90;
94 -> 92;
95 -> 91;
95 -> 92;
96 -> 91;
96 -> 92;
97 -> 91;
97 -> 92;
98 -> 93;
98 -> 92;
99 -> 95;
99 -> 92;
100 -> 96;
100 -> 92;
102 -> 101;
103 -> 94;
103 -> 92;
104 -> 92;
105 -> 98;
105 -> 104;
106 -> 99;
106 -> 104;
107 -> 100;
107 -> 104;
108 -> 103;
108 -> 104;
109 -> 97;
109 -> 104;
110 -> 105;
110 -> 104;
111 -> 106;
111 -> 104;
112 -> 107;
112 -> 104;
113 -> 108;
113 -> 104;
114 -> 104;
115 -> 114;
115 -> 110;
115 -> 111;
115 -> 112;
115 -> 113;
115 -> 104;
116 -> 114;
116 -> 104;
117 -> 116;
117 -> 115;
117 -> 104;
118 -> 97;
118 -> 92;
119 -> 94;
119 -> 97;
119 -> 92;
120 -> 93;
120 -> 0;
120 -> 92;
121 -> 91;
121 -> 74;
122 -> 76;
122 -> 74;
123 -> 121;
123 -> 122;
124 -> 123;
127 -> 125;
127 -> 126;
128 -> 126;
129 -> 126;
130 -> 127;
130 -> 126;
131 -> 128;
131 -> 130;
132 -> 0;
132 -> 131;
133 -> 126;
134 -> 132;
134 -> 133;
134 -> 126;
135 -> 0;
135 -> 126;
136 -> 127;
136 -> 126;
137 -> 126;
138 -> 135;
138 -> 137;
139 -> 136;
139 -> 137;
140 -> 138;
140 -> 137;
141 -> 139;
141 -> 137;
142 -> 137;
143 -> 137;
144 -> 140;
144 -> 143;
145 -> 141;
145 -> 143;
146 -> 142;
146 -> 143;
147 -> 142;
147 -> 143;
148 -> 142;
148 -> 143;
149 -> 144;
149 -> 143;
150 -> 146;
150 -> 143;
151 -> 147;
151 -> 143;
152 -> 145;
152 -> 143;
153 -> 143;
154 -> 149;
154 -> 153;
155 -> 150;
155 -> 153;
156 -> 151;
156 -> 153;
157 -> 152;
157 -> 153;
158 -> 148;
158 -> 153;
159 -> 154;
159 -> 153;
160 -> 155;
160 -> 153;
161 -> 156;
161 -> 153;
162 -> 157;
162 -> 153;
163 -> 153;
164 -> 163;
164 -> 159;
164 -> 160;
164 -> 161;
164 -> 162;
164 -> 153;
165 -> 163;
165 -> 153;
166 -> 165;
166 -> 164;
166 -> 153;
167 -> 148;
167 -> 143;
168 -> 145;
168 -> 148;
168 -> 143;
169 -> 144;
169 -> 0;
169 -> 143;
170 -> 142;
170 -> 126;
171 -> 128;
171 -> 126;
172 -> 170;
172 -> 171;
173 -> 172;
176 -> 174;
176 -> 175;
177 -> 175;
178 -> 175;
179 -> 176;
179 -> 175;
180 -> 177;
180 -> 179;
181 -> 0;
181 -> 180;
182 -> 175;
183 -> 181;
183 -> 182;
183 -> 175;
184 -> 0;
184 -> 175;
185 -> 176;
185 -> 175;
186 -> 175;
187 -> 184;
187 -> 186;
188 -> 185;
188 -> 186;
189 -> 187;
189 -> 186;
190 -> 188;
190 -> 186;
191 -> 186;
192 -> 186;
193 -> 189;
193 -> 192;
194 -> 190;
194 -> 192;
195 -> 191;
195 -> 192;
196 -> 191;
196 -> 192;
197 -> 191;
197 -> 192;
198 -> 193;
198 -> 192;
199 -> 195;
199 -> 192;
200 -> 196;
200 -> 192;
201 -> 194;
201 -> 192;
202 -> 192;
203 -> 198;
203 -> 202;
204 -> 199;
204 -> 202;
205 -> 200;
205 -> 202;
206 -> 201;
206 -> 202;
207 -> 197;
207 -> 202;
208 -> 203;
208 -> 202;
209 -> 204;
209 -> 202;
210 -> 205;
210 -> 202;
211 -> 206;
211 -> 202;
212 -> 202;
213 -> 212;
213 -> 208;
213 -> 209;
213 -> 210;
213 -> 211;
213 -> 202;
214 -> 212;
214 -> 202;
215 -> 214;
215 -> 213;
215 -> 202;
216 -> 197;
216 -> 192;
217 -> 194;
217 -> 197;
217 -> 192;
218 -> 193;
218 -> 0;
218 -> 192;
219 -> 191;
219 -> 175;
220 -> 177;
220 -> 175;
221 -> 219;
221 -> 220;
222 -> 221;
225 -> 223;
225 -> 224;
226 -> 224;
227 -> 0;
227 -> 224;
228 -> 225;
228 -> 224;
229 -> 224;
230 -> 227;
230 -> 229;
231 -> 228;
231 -> 229;
232 -> 230;
232 -> 229;
233 -> 231;
233 -> 229;
234 -> 229;
235 -> 229;
236 -> 232;
236 -> 235;
237 -> 233;
237 -> 235;
238 -> 234;
238 -> 235;
239 -> 234;
239 -> 235;
240 -> 234;
240 -> 235;
241 -> 236;
241 -> 235;
242 -> 238;
242 -> 235;
243 -> 239;
243 -> 235;
244 -> 237;
244 -> 235;
245 -> 235;
246 -> 241;
246 -> 245;
247 -> 242;
247 -> 245;
248 -> 243;
248 -> 245;
249 -> 244;
249 -> 245;
250 -> 240;
250 -> 245;
251 -> 246;
251 -> 245;
252 -> 247;
252 -> 245;
253 -> 248;
253 -> 245;
254 -> 249;
254 -> 245;
255 -> 245;
256 -> 255;
256 -> 251;
256 -> 252;
256 -> 253;
256 -> 254;
256 -> 245;
257 -> 255;
257 -> 245;
258 -> 257;
258 -> 256;
258 -> 245;
259 -> 240;
259 -> 235;
260 -> 237;
260 -> 240;
260 -> 235;
261 -> 236;
261 -> 0;
261 -> 235;
262 -> 234;
262 -> 224;
263 -> 226;
263 -> 224;
264 -> 262;
264 -> 263;
265 -> 264;
268 -> 266;
268 -> 267;
269 -> 267;
270 -> 0;
270 -> 267;
271 -> 268;
271 -> 267;
272 -> 267;
273 -> 270;
273 -> 272;
274 -> 271;
274 -> 272;
275 -> 273;
275 -> 272;
276 -> 274;
276 -> 272;
277 -> 272;
278 -> 272;
279 -> 275;
279 -> 278;
280 -> 276;
280 -> 278;
281 -> 277;
281 -> 278;
282 -> 277;
282 -> 278;
283 -> 277;
283 -> 278;
284 -> 279;
284 -> 278;
285 -> 281;
285 -> 278;
286 -> 282;
286 -> 278;
287 -> 280;
287 -> 278;
288 -> 278;
289 -> 284;
289 -> 288;
290 -> 285;
290 -> 288;
291 -> 286;
291 -> 288;
292 -> 287;
292 -> 288;
293 -> 283;
293 -> 288;
294 -> 289;
294 -> 288;
295 -> 290;
295 -> 288;
296 -> 291;
296 -> 288;
297 -> 292;
297 -> 288;
298 -> 288;
299 -> 298;
299 -> 294;
299 -> 295;
299 -> 296;
299 -> 297;
299 -> 288;
300 -> 298;
300 -> 288;
301 -> 300;
301 -> 299;
301 -> 288;
302 -> 283;
302 -> 278;
303 -> 280;
303 -> 283;
303 -> 278;
304 -> 279;
304 -> 0;
304 -> 278;
305 -> 277;
305 -> 267;
306 -> 269;
306 -> 267;
307 -> 305;
307 -> 306;
308 -> 307;
309 -> 72;
311 -> 310;
313 -> 309;
313 -> 312;
314 -> 311;
314 -> 312;
315 -> 312;
316 -> 313;
316 -> 312;
317 -> 314;
317 -> 316;
318 -> 0;
318 -> 317;
319 -> 312;
320 -> 318;
320 -> 319;
320 -> 312;
321 -> 0;
321 -> 312;
322 -> 313;
322 -> 312;
323 -> 312;
324 -> 321;
324 -> 323;
325 -> 322;
325 -> 323;
326 -> 324;
326 -> 323;
327 -> 325;
327 -> 323;
328 -> 323;
329 -> 323;
330 -> 326;
330 -> 329;
331 -> 327;
331 -> 329;
332 -> 328;
332 -> 329;
333 -> 328;
333 -> 329;
334 -> 328;
334 -> 329;
335 -> 330;
335 -> 329;
336 -> 332;
336 -> 329;
337 -> 333;
337 -> 329;
338 -> 331;
338 -> 329;
339 -> 329;
340 -> 335;
340 -> 339;
341 -> 336;
341 -> 339;
342 -> 337;
342 -> 339;
343 -> 338;
343 -> 339;
344 -> 334;
344 -> 339;
345 -> 340;
345 -> 339;
346 -> 341;
346 -> 339;
347 -> 342;
347 -> 339;
348 -> 343;
348 -> 339;
349 -> 339;
350 -> 349;
350 -> 345;
350 -> 346;
350 -> 347;
350 -> 348;
350 -> 339;
351 -> 349;
351 -> 339;
352 -> 351;
352 -> 350;
352 -> 339;
353 -> 334;
353 -> 329;
354 -> 331;
354 -> 334;
354 -> 329;
355 -> 330;
355 -> 0;
355 -> 329;
356 -> 328;
356 -> 312;
357 -> 314;
357 -> 312;
358 -> 356;
358 -> 312;
359 -> 312;
360 -> 0;
360 -> 359;
360 -> 312;
361 -> 358;
361 -> 359;
361 -> 352;
361 -> 353;
361 -> 354;
361 -> 360;
361 -> 0;
361 -> 312;
362 -> 361;
362 -> 359;
363 -> 361;
363 -> 359;
364 -> 359;
365 -> 363;
365 -> 364;
366 -> 365;
366 -> 361;
366 -> 364;
367 -> 366;
367 -> 359;
368 -> 363;
368 -> 361;
368 -> 359;
369 -> 362;
369 -> 359;
370 -> 359;
371 -> 359;
372 -> 367;
372 -> 371;
373 -> 368;
373 -> 371;
374 -> 368;
374 -> 371;
375 -> 369;
375 -> 371;
376 -> 370;
376 -> 371;
377 -> 371;
378 -> 376;
378 -> 377;
379 -> 377;
380 -> 379;
380 -> 372;
380 -> 374;
380 -> 375;
380 -> 373;
380 -> 368;
380 -> 377;
381 -> 379;
381 -> 377;
382 -> 376;
382 -> 371;
383 -> 372;
383 -> 0;
383 -> 371;
384 -> 380;
387 -> 386;
389 -> 385;
389 -> 388;
390 -> 387;
390 -> 388;
391 -> 388;
392 -> 389;
392 -> 388;
393 -> 390;
393 -> 392;
394 -> 0;
394 -> 393;
395 -> 388;
396 -> 394;
396 -> 395;
396 -> 388;
397 -> 0;
397 -> 388;
398 -> 389;
398 -> 388;
399 -> 388;
400 -> 397;
400 -> 399;
401 -> 398;
401 -> 399;
402 -> 400;
402 -> 399;
403 -> 401;
403 -> 399;
404 -> 399;
405 -> 399;
406 -> 402;
406 -> 405;
407 -> 403;
407 -> 405;
408 -> 404;
408 -> 405;
409 -> 404;
409 -> 405;
410 -> 404;
410 -> 405;
411 -> 406;
411 -> 405;
412 -> 408;
412 -> 405;
413 -> 409;
413 -> 405;
414 -> 407;
414 -> 405;
415 -> 405;
416 -> 411;
416 -> 415;
417 -> 412;
417 -> 415;
418 -> 413;
418 -> 415;
419 -> 414;
419 -> 415;
420 -> 410;
420 -> 415;
421 -> 416;
421 -> 415;
422 -> 417;
422 -> 415;
423 -> 418;
423 -> 415;
424 -> 419;
424 -> 415;
425 -> 415;
426 -> 425;
426 -> 421;
426 -> 422;
426 -> 423;
426 -> 424;
426 -> 415;
427 -> 425;
427 -> 415;
428 -> 427;
428 -> 426;
428 -> 415;
429 -> 410;
429 -> 405;
430 -> 407;
430 -> 410;
430 -> 405;
431 -> 406;
431 -> 0;
431 -> 405;
432 -> 404;
432 -> 388;
433 -> 390;
433 -> 388;
434 -> 432;
434 -> 388;
435 -> 388;
436 -> 0;
436 -> 435;
436 -> 388;
437 -> 434;
437 -> 435;
437 -> 428;
437 -> 429;
437 -> 430;
437 -> 436;
437 -> 380;
437 -> 388;
438 -> 435;
439 -> 435;
440 -> 435;
441 -> 439;
441 -> 440;
442 -> 440;
443 -> 441;
443 -> 442;
444 -> 442;
445 -> 444;
445 -> 442;
446 -> 441;
446 -> 440;
447 -> 437;
447 -> 0;
447 -> 440;
448 -> 437;
451 -> 450;
453 -> 449;
453 -> 452;
454 -> 451;
454 -> 452;
455 -> 452;
456 -> 453;
456 -> 452;
457 -> 454;
457 -> 456;
458 -> 0;
458 -> 457;
459 -> 452;
460 -> 458;
460 -> 459;
460 -> 452;
461 -> 0;
461 -> 452;
462 -> 453;
462 -> 452;
463 -> 452;
464 -> 461;
464 -> 463;
465 -> 462;
465 -> 463;
466 -> 464;
466 -> 463;
467 -> 465;
467 -> 463;
468 -> 463;
469 -> 463;
470 -> 466;
470 -> 469;
471 -> 467;
471 -> 469;
472 -> 468;
472 -> 469;
473 -> 468;
473 -> 469;
474 -> 468;
474 -> 469;
475 -> 470;
475 -> 469;
476 -> 472;
476 -> 469;
477 -> 473;
477 -> 469;
478 -> 471;
478 -> 469;
479 -> 469;
480 -> 475;
480 -> 479;
481 -> 476;
481 -> 479;
482 -> 477;
482 -> 479;
483 -> 478;
483 -> 479;
484 -> 474;
484 -> 479;
485 -> 480;
485 -> 479;
486 -> 481;
486 -> 479;
487 -> 482;
487 -> 479;
488 -> 483;
488 -> 479;
489 -> 479;
490 -> 489;
490 -> 485;
490 -> 486;
490 -> 487;
490 -> 488;
490 -> 479;
491 -> 489;
491 -> 479;
492 -> 491;
492 -> 490;
492 -> 479;
493 -> 474;
493 -> 469;
494 -> 471;
494 -> 474;
494 -> 469;
495 -> 470;
495 -> 0;
495 -> 469;
496 -> 468;
496 -> 452;
497 -> 454;
497 -> 452;
498 -> 496;
498 -> 452;
499 -> 452;
500 -> 0;
500 -> 499;
500 -> 452;
501 -> 498;
501 -> 499;
501 -> 492;
501 -> 493;
501 -> 494;
501 -> 500;
501 -> 437;
501 -> 452;
502 -> 499;
503 -> 499;
504 -> 499;
505 -> 503;
505 -> 504;
506 -> 504;
507 -> 505;
507 -> 506;
508 -> 506;
509 -> 508;
509 -> 506;
510 -> 505;
510 -> 504;
511 -> 501;
511 -> 0;
511 -> 504;
512 -> 501;
515 -> 514;
517 -> 513;
517 -> 516;
518 -> 515;
518 -> 516;
519 -> 0;
519 -> 516;
520 -> 517;
520 -> 516;
521 -> 516;
522 -> 519;
522 -> 521;
523 -> 520;
523 -> 521;
524 -> 522;
524 -> 521;
525 -> 523;
525 -> 521;
526 -> 521;
527 -> 521;
528 -> 524;
528 -> 527;
529 -> 525;
529 -> 527;
530 -> 526;
530 -> 527;
531 -> 526;
531 -> 527;
532 -> 526;
532 -> 527;
533 -> 528;
533 -> 527;
534 -> 530;
534 -> 527;
535 -> 531;
535 -> 527;
536 -> 529;
536 -> 527;
537 -> 527;
538 -> 533;
538 -> 537;
539 -> 534;
539 -> 537;
540 -> 535;
540 -> 537;
541 -> 536;
541 -> 537;
542 -> 532;
542 -> 537;
543 -> 538;
543 -> 537;
544 -> 539;
544 -> 537;
545 -> 540;
545 -> 537;
546 -> 541;
546 -> 537;
547 -> 537;
548 -> 547;
548 -> 543;
548 -> 544;
548 -> 545;
548 -> 546;
548 -> 537;
549 -> 547;
549 -> 537;
550 -> 549;
550 -> 548;
550 -> 537;
551 -> 532;
551 -> 527;
552 -> 529;
552 -> 532;
552 -> 527;
553 -> 528;
553 -> 0;
553 -> 527;
554 -> 526;
554 -> 516;
555 -> 518;
555 -> 516;
556 -> 554;
556 -> 516;
557 -> 516;
558 -> 0;
558 -> 557;
558 -> 516;
559 -> 556;
559 -> 557;
559 -> 550;
559 -> 551;
559 -> 552;
559 -> 558;
559 -> 501;
559 -> 516;
560 -> 557;
561 -> 557;
562 -> 557;
563 -> 561;
563 -> 562;
564 -> 562;
565 -> 563;
565 -> 564;
566 -> 564;
567 -> 566;
567 -> 564;
568 -> 563;
568 -> 562;
569 -> 559;
569 -> 0;
569 -> 562;
570 -> 559;
573 -> 572;
575 -> 571;
575 -> 574;
576 -> 573;
576 -> 574;
577 -> 0;
577 -> 574;
578 -> 575;
578 -> 574;
579 -> 574;
580 -> 577;
580 -> 579;
581 -> 578;
581 -> 579;
582 -> 580;
582 -> 579;
583 -> 581;
583 -> 579;
584 -> 579;
585 -> 579;
586 -> 582;
586 -> 585;
587 -> 583;
587 -> 585;
588 -> 584;
588 -> 585;
589 -> 584;
589 -> 585;
590 -> 584;
590 -> 585;
591 -> 586;
591 -> 585;
592 -> 588;
592 -> 585;
593 -> 589;
593 -> 585;
594 -> 587;
594 -> 585;
595 -> 585;
596 -> 591;
596 -> 595;
597 -> 592;
597 -> 595;
598 -> 593;
598 -> 595;
599 -> 594;
599 -> 595;
600 -> 590;
600 -> 595;
601 -> 596;
601 -> 595;
602 -> 597;
602 -> 595;
603 -> 598;
603 -> 595;
604 -> 599;
604 -> 595;
605 -> 595;
606 -> 605;
606 -> 601;
606 -> 602;
606 -> 603;
606 -> 604;
606 -> 595;
607 -> 605;
607 -> 595;
608 -> 607;
608 -> 606;
608 -> 595;
609 -> 590;
609 -> 585;
610 -> 587;
610 -> 590;
610 -> 585;
611 -> 586;
611 -> 0;
611 -> 585;
612 -> 584;
612 -> 574;
613 -> 576;
613 -> 574;
614 -> 612;
614 -> 574;
615 -> 574;
616 -> 0;
616 -> 615;
616 -> 574;
617 -> 614;
617 -> 615;
617 -> 608;
617 -> 609;
617 -> 610;
617 -> 616;
617 -> 559;
617 -> 574;
618 -> 615;
619 -> 615;
620 -> 615;
621 -> 619;
621 -> 620;
622 -> 620;
623 -> 621;
623 -> 622;
624 -> 622;
625 -> 624;
625 -> 622;
626 -> 621;
626 -> 620;
627 -> 617;
627 -> 0;
627 -> 620;
628 -> 617;
629 -> 0;
631 -> 630;
633 -> 629;
633 -> 632;
634 -> 631;
634 -> 632;
635 -> 0;
635 -> 632;
636 -> 633;
636 -> 632;
637 -> 632;
638 -> 635;
638 -> 637;
639 -> 636;
639 -> 637;
640 -> 638;
640 -> 637;
641 -> 639;
641 -> 637;
642 -> 637;
643 -> 637;
644 -> 640;
644 -> 643;
645 -> 641;
645 -> 643;
646 -> 642;
646 -> 643;
647 -> 642;
647 -> 643;
648 -> 642;
648 -> 643;
649 -> 644;
649 -> 643;
650 -> 646;
650 -> 643;
651 -> 647;
651 -> 643;
652 -> 645;
652 -> 643;
653 -> 643;
654 -> 649;
654 -> 653;
655 -> 650;
655 -> 653;
656 -> 651;
656 -> 653;
657 -> 652;
657 -> 653;
658 -> 648;
658 -> 653;
659 -> 654;
659 -> 653;
660 -> 655;
660 -> 653;
661 -> 656;
661 -> 653;
662 -> 657;
662 -> 653;
663 -> 653;
664 -> 663;
664 -> 659;
664 -> 660;
664 -> 661;
664 -> 662;
664 -> 653;
665 -> 663;
665 -> 653;
666 -> 665;
666 -> 664;
666 -> 653;
667 -> 648;
667 -> 643;
668 -> 645;
668 -> 648;
668 -> 643;
669 -> 644;
669 -> 0;
669 -> 643;
670 -> 642;
670 -> 632;
671 -> 634;
671 -> 632;
672 -> 670;
672 -> 632;
673 -> 632;
674 -> 0;
674 -> 673;
674 -> 632;
675 -> 672;
675 -> 673;
675 -> 666;
675 -> 667;
675 -> 668;
675 -> 674;
675 -> 617;
675 -> 632;
676 -> 673;
677 -> 673;
678 -> 673;
679 -> 677;
679 -> 678;
680 -> 678;
681 -> 679;
681 -> 680;
682 -> 680;
683 -> 682;
683 -> 680;
684 -> 679;
684 -> 678;
685 -> 675;
685 -> 0;
685 -> 678;
686 -> 675;
689 -> 124;
689 -> 688;
690 -> 688;
691 -> 689;
691 -> 688;
692 -> 690;
692 -> 691;
692 -> 117;
692 -> 118;
692 -> 119;
692 -> 688;
694 -> 173;
694 -> 693;
695 -> 693;
696 -> 694;
696 -> 693;
697 -> 695;
697 -> 696;
697 -> 166;
697 -> 167;
697 -> 168;
697 -> 693;
699 -> 222;
699 -> 698;
700 -> 698;
701 -> 699;
701 -> 698;
702 -> 700;
702 -> 701;
702 -> 215;
702 -> 216;
702 -> 217;
702 -> 698;
704 -> 265;
704 -> 703;
705 -> 703;
706 -> 704;
706 -> 703;
707 -> 705;
707 -> 706;
707 -> 258;
707 -> 259;
707 -> 260;
707 -> 703;
709 -> 308;
709 -> 708;
710 -> 708;
711 -> 709;
711 -> 708;
712 -> 710;
712 -> 711;
712 -> 301;
712 -> 302;
712 -> 303;
712 -> 708;
714 -> 384;
714 -> 713;
715 -> 713;
716 -> 714;
716 -> 713;
717 -> 715;
717 -> 716;
717 -> 675;
717 -> 713;
719 -> 448;
719 -> 718;
720 -> 718;
721 -> 719;
721 -> 718;
722 -> 720;
722 -> 721;
722 -> 717;
722 -> 718;
724 -> 512;
724 -> 723;
725 -> 723;
726 -> 724;
726 -> 723;
727 -> 725;
727 -> 726;
727 -> 722;
727 -> 723;
729 -> 570;
729 -> 728;
730 -> 728;
731 -> 729;
731 -> 728;
732 -> 730;
732 -> 731;
732 -> 727;
732 -> 728;
734 -> 628;
734 -> 733;
735 -> 733;
736 -> 734;
736 -> 733;
737 -> 735;
737 -> 736;
737 -> 732;
737 -> 733;
739 -> 686;
739 -> 738;
740 -> 738;
741 -> 739;
741 -> 738;
742 -> 740;
742 -> 741;
742 -> 737;
742 -> 738;
743 -> 70;
743 -> 58;
744 -> 65;
744 -> 58;
745 -> 60;
745 -> 58;
746 -> 58;
747 -> 58;
748 -> 743;
748 -> 747;
749 -> 744;
749 -> 747;
750 -> 745;
750 -> 747;
751 -> 746;
751 -> 747;
753 -> 752;
754 -> 753;
755 -> 754;
755 -> 753;
756 -> 754;
756 -> 753;
757 -> 754;
757 -> 753;
758 -> 754;
758 -> 753;
759 -> 0;
759 -> 754;
759 -> 753;
760 -> 753;
760 -> 752;
761 -> 0;
761 -> 752;
762 -> 752;
763 -> 752;
764 -> 761;
764 -> 763;
765 -> 762;
765 -> 763;
766 -> 762;
766 -> 763;
767 -> 764;
767 -> 763;
768 -> 765;
768 -> 763;
769 -> 766;
769 -> 763;
770 -> 763;
771 -> 767;
771 -> 770;
772 -> 768;
772 -> 770;
773 -> 769;
773 -> 770;
774 -> 771;
774 -> 770;
775 -> 772;
775 -> 770;
776 -> 770;
777 -> 774;
777 -> 776;
778 -> 775;
778 -> 776;
779 -> 777;
779 -> 776;
780 -> 0;
780 -> 776;
781 -> 776;
782 -> 779;
782 -> 780;
782 -> 781;
782 -> 70;
782 -> 776;
783 -> 778;
783 -> 776;
784 -> 782;
784 -> 783;
784 -> 776;
786 -> 785;
789 -> 788;
791 -> 790;
802 -> 793;
802 -> 792;
803 -> 794;
803 -> 792;
804 -> 795;
804 -> 792;
805 -> 796;
805 -> 792;
806 -> 797;
806 -> 792;
807 -> 798;
807 -> 792;
808 -> 799;
808 -> 792;
809 -> 800;
809 -> 792;
810 -> 801;
810 -> 792;
811 -> 792;
813 -> 812;
814 -> 0;
814 -> 770;
815 -> 814;
815 -> 773;
815 -> 770;
816 -> 770;
817 -> 770;
818 -> 784;
818 -> 817;
819 -> 815;
819 -> 817;
820 -> 816;
820 -> 817;
821 -> 816;
821 -> 817;
822 -> 816;
822 -> 817;
823 -> 818;
823 -> 817;
824 -> 817;
825 -> 823;
825 -> 824;
826 -> 822;
826 -> 824;
827 -> 826;
827 -> 824;
828 -> 826;
828 -> 824;
829 -> 0;
831 -> 830;
833 -> 832;
834 -> 833;
835 -> 825;
835 -> 824;
836 -> 824;
837 -> 824;
838 -> 835;
838 -> 837;
839 -> 836;
839 -> 837;
840 -> 839;
840 -> 837;
841 -> 839;
841 -> 837;
842 -> 839;
842 -> 837;
843 -> 839;
843 -> 837;
844 -> 839;
844 -> 837;
845 -> 839;
845 -> 837;
846 -> 839;
846 -> 837;
847 -> 839;
847 -> 837;
848 -> 838;
848 -> 839;
848 -> 837;
849 -> 837;
850 -> 849;
850 -> 839;
850 -> 837;
851 -> 837;
852 -> 851;
852 -> 839;
852 -> 837;
853 -> 838;
853 -> 784;
853 -> 839;
853 -> 837;
854 -> 837;
855 -> 854;
855 -> 839;
855 -> 837;
856 -> 834;
856 -> 833;
856 -> 837;
857 -> 856;
857 -> 839;
857 -> 837;
858 -> 837;
859 -> 858;
859 -> 839;
859 -> 837;
860 -> 836;
860 -> 826;
860 -> 824;
861 -> 822;
861 -> 817;
862 -> 822;
862 -> 817;
863 -> 822;
863 -> 817;
864 -> 822;
864 -> 817;
865 -> 822;
865 -> 817;
866 -> 822;
866 -> 817;
867 -> 822;
867 -> 817;
868 -> 822;
868 -> 817;
869 -> 822;
869 -> 817;
870 -> 822;
870 -> 817;
871 -> 817;
872 -> 871;
872 -> 817;
873 -> 872;
873 -> 822;
873 -> 817;
874 -> 817;
875 -> 874;
875 -> 817;
876 -> 875;
876 -> 822;
876 -> 817;
877 -> 822;
877 -> 817;
878 -> 822;
878 -> 817;
879 -> 817;
880 -> 819;
880 -> 879;
880 -> 817;
881 -> 819;
881 -> 822;
881 -> 817;
882 -> 817;
883 -> 882;
883 -> 822;
883 -> 817;
884 -> 817;
885 -> 884;
885 -> 822;
885 -> 817;
888 -> 886;
888 -> 887;
889 -> 888;
891 -> 890;
892 -> 817;
893 -> 817;
894 -> 892;
894 -> 893;
895 -> 894;
895 -> 893;
896 -> 894;
896 -> 893;
897 -> 894;
897 -> 893;
898 -> 893;
899 -> 898;
899 -> 894;
899 -> 893;
900 -> 893;
901 -> 900;
901 -> 894;
901 -> 893;
902 -> 889;
902 -> 888;
902 -> 893;
903 -> 902;
903 -> 894;
903 -> 893;
904 -> 892;
904 -> 822;
904 -> 817;
905 -> 822;
905 -> 817;
906 -> 820;
906 -> 822;
906 -> 817;
907 -> 821;
907 -> 822;
907 -> 817;
908 -> 816;
908 -> 763;
909 -> 908;
909 -> 763;
910 -> 763;
911 -> 909;
911 -> 910;
912 -> 0;
913 -> 911;
913 -> 910;
914 -> 910;
915 -> 910;
916 -> 913;
916 -> 915;
917 -> 914;
917 -> 915;
918 -> 914;
918 -> 915;
919 -> 914;
919 -> 915;
920 -> 914;
920 -> 915;
921 -> 914;
921 -> 915;
924 -> 922;
924 -> 923;
925 -> 924;
926 -> 916;
926 -> 915;
927 -> 919;
927 -> 915;
928 -> 917;
928 -> 915;
929 -> 918;
929 -> 915;
930 -> 915;
931 -> 915;
932 -> 920;
932 -> 915;
933 -> 915;
934 -> 926;
934 -> 933;
935 -> 927;
935 -> 933;
936 -> 928;
936 -> 933;
937 -> 929;
937 -> 933;
938 -> 930;
938 -> 933;
939 -> 931;
939 -> 933;
940 -> 932;
940 -> 933;
941 -> 921;
941 -> 933;
942 -> 941;
942 -> 933;
943 -> 941;
943 -> 933;
944 -> 941;
944 -> 933;
945 -> 941;
945 -> 933;
946 -> 941;
946 -> 933;
947 -> 941;
947 -> 933;
948 -> 941;
948 -> 933;
949 -> 941;
949 -> 933;
950 -> 941;
950 -> 933;
951 -> 941;
951 -> 933;
952 -> 941;
952 -> 933;
953 -> 941;
953 -> 933;
954 -> 941;
954 -> 933;
955 -> 934;
955 -> 941;
955 -> 933;
956 -> 935;
956 -> 941;
956 -> 933;
957 -> 938;
957 -> 941;
957 -> 933;
958 -> 940;
958 -> 941;
958 -> 933;
959 -> 933;
960 -> 959;
960 -> 941;
960 -> 933;
961 -> 933;
962 -> 936;
962 -> 961;
962 -> 933;
963 -> 962;
963 -> 941;
963 -> 933;
964 -> 933;
965 -> 941;
965 -> 964;
966 -> 965;
966 -> 963;
966 -> 964;
967 -> 966;
967 -> 933;
968 -> 967;
968 -> 938;
968 -> 933;
969 -> 968;
970 -> 969;
970 -> 941;
970 -> 968;
971 -> 968;
972 -> 971;
972 -> 941;
972 -> 968;
973 -> 933;
974 -> 941;
974 -> 973;
975 -> 974;
975 -> 963;
975 -> 973;
976 -> 975;
976 -> 933;
977 -> 939;
977 -> 976;
977 -> 933;
978 -> 977;
978 -> 940;
978 -> 914;
978 -> 933;
979 -> 978;
980 -> 941;
980 -> 979;
981 -> 979;
982 -> 979;
983 -> 980;
983 -> 955;
983 -> 860;
983 -> 982;
984 -> 983;
984 -> 848;
984 -> 982;
985 -> 984;
985 -> 979;
986 -> 985;
986 -> 979;
987 -> 986;
987 -> 980;
987 -> 979;
988 -> 980;
988 -> 955;
988 -> 979;
989 -> 980;
989 -> 956;
989 -> 979;
990 -> 979;
991 -> 990;
991 -> 985;
991 -> 979;
992 -> 989;
992 -> 991;
993 -> 991;
994 -> 992;
994 -> 993;
995 -> 988;
995 -> 993;
996 -> 787;
996 -> 993;
997 -> 994;
997 -> 995;
997 -> 993;
998 -> 995;
998 -> 997;
998 -> 993;
999 -> 995;
999 -> 860;
999 -> 828;
999 -> 881;
999 -> 997;
999 -> 883;
999 -> 885;
999 -> 865;
999 -> 904;
999 -> 906;
999 -> 907;
999 -> 869;
999 -> 870;
999 -> 873;
999 -> 876;
999 -> 877;
999 -> 905;
999 -> 848;
999 -> 850;
999 -> 852;
999 -> 853;
999 -> 857;
999 -> 845;
999 -> 859;
999 -> 855;
999 -> 784;
999 -> 872;
999 -> 875;
999 -> 0;
999 -> 882;
999 -> 884;
999 -> 899;
999 -> 901;
999 -> 903;
999 -> 902;
999 -> 900;
999 -> 898;
999 -> 854;
999 -> 856;
999 -> 998;
1000 -> 998;
1001 -> 999;
1001 -> 1000;
1002 -> 1000;
1003 -> 1001;
1003 -> 999;
1003 -> 1002;
1004 -> 1003;
1004 -> 999;
1004 -> 1002;
1005 -> 1000;
1006 -> 1000;
1007 -> 1006;
1007 -> 1001;
1007 -> 1000;
1008 -> 999;
1008 -> 1000;
1009 -> 1008;
1009 -> 999;
1009 -> 1000;
1010 -> 999;
1010 -> 1009;
1010 -> 1004;
1010 -> 1007;
1010 -> 998;
1011 -> 999;
1011 -> 1000;
1012 -> 1011;
1012 -> 1010;
1012 -> 1000;
1013 -> 999;
1013 -> 1000;
1014 -> 1013;
1014 -> 1012;
1014 -> 1000;
1015 -> 999;
1015 -> 1000;
1016 -> 999;
1016 -> 1000;
1017 -> 1016;
1017 -> 1014;
1017 -> 1015;
1017 -> 1000;
1018 -> 1017;
1018 -> 1016;
1018 -> 1000;
1019 -> 999;
1019 -> 1000;
1020 -> 1019;
1020 -> 1014;
1020 -> 1000;
1021 -> 999;
1021 -> 1020;
1021 -> 1014;
1021 -> 1018;
1021 -> 998;
1022 -> 999;
1022 -> 1000;
1023 -> 999;
1023 -> 1000;
1024 -> 1022;
1024 -> 1023;
1024 -> 1021;
1024 -> 1000;
1025 -> 1000;
1026 -> 1024;
1026 -> 1025;
1026 -> 1000;
1027 -> 1024;
1027 -> 1023;
1027 -> 1021;
1027 -> 1000;
1028 -> 1024;
1028 -> 1023;
1028 -> 1026;
1029 -> 998;
1030 -> 995;
1030 -> 1029;
1031 -> 1030;
1031 -> 1028;
1031 -> 1029;
1032 -> 1029;
1033 -> 1030;
1033 -> 1031;
1033 -> 1032;
1034 -> 1033;
1034 -> 1031;
1034 -> 1032;
1035 -> 1034;
1035 -> 1029;
1036 -> 1029;
1037 -> 1030;
1037 -> 1031;
1037 -> 1029;
1038 -> 1029;
1039 -> 1035;
1039 -> 1038;
1040 -> 1036;
1040 -> 1038;
1041 -> 1037;
1041 -> 1038;
1042 -> 1030;
1042 -> 1038;
1043 -> 1040;
1043 -> 1038;
1044 -> 1038;
1045 -> 1044;
1046 -> 1042;
1046 -> 1045;
1047 -> 1045;
1048 -> 1046;
1048 -> 1031;
1048 -> 1047;
1049 -> 1045;
1050 -> 1045;
1051 -> 1050;
1051 -> 1046;
1051 -> 1045;
1052 -> 1044;
1053 -> 1044;
1054 -> 1042;
1054 -> 1031;
1054 -> 1053;
1055 -> 1054;
1055 -> 1031;
1055 -> 1053;
1056 -> 1053;
1057 -> 1054;
1057 -> 1056;
1058 -> 1057;
1058 -> 1031;
1058 -> 1056;
1059 -> 1058;
1060 -> 1057;
1060 -> 1059;
1061 -> 1060;
1061 -> 1031;
1061 -> 1059;
1062 -> 1061;
1062 -> 1058;
1063 -> 1062;
1064 -> 1063;
1064 -> 1053;
1065 -> 829;
1065 -> 1064;
1066 -> 1065;
1066 -> 1044;
1067 -> 1044;
1068 -> 1066;
1068 -> 1067;
1068 -> 1044;
1069 -> 1068;
1071 -> 1070;
1072 -> 1070;
1073 -> 1066;
1073 -> 1069;
1074 -> 1069;
1075 -> 1073;
1075 -> 1074;
1076 -> 1074;
1077 -> 1075;
1077 -> 1076;
1077 -> 1074;
1078 -> 1075;
1078 -> 1074;
1079 -> 1066;
1079 -> 1077;
1080 -> 1077;
1081 -> 1079;
1081 -> 1080;
1082 -> 1080;
1083 -> 1081;
1083 -> 1082;
1083 -> 1080;
1084 -> 1066;
1084 -> 1044;
1085 -> 1084;
1086 -> 1030;
1086 -> 1031;
1086 -> 1041;
1086 -> 1029;
1087 -> 1029;
1088 -> 1029;
1089 -> 1030;
1089 -> 1088;
1090 -> 1088;
1091 -> 1089;
1091 -> 1031;
1091 -> 1090;
1092 -> 1088;
1093 -> 1088;
1094 -> 1093;
1094 -> 1089;
1094 -> 1088;
1095 -> 1029;
1096 -> 1087;
1096 -> 1029;
1097 -> 1096;
1097 -> 1030;
1097 -> 1031;
1097 -> 1048;
1097 -> 1091;
1097 -> 1051;
1097 -> 1094;
1097 -> 1041;
1097 -> 1087;
1097 -> 1029;
1098 -> 1029;
1099 -> 1097;
1099 -> 1098;
1100 -> 1099;
1100 -> 1097;
1100 -> 1098;
1101 -> 1097;
1101 -> 1098;
1102 -> 1101;
1102 -> 1100;
1102 -> 1098;
1103 -> 1098;
1104 -> 1101;
1104 -> 1103;
1105 -> 1104;
1105 -> 1100;
1105 -> 1103;
1106 -> 1105;
1107 -> 1106;
1107 -> 1105;
1108 -> 1107;
1109 -> 1108;
1109 -> 1098;
1110 -> 829;
1110 -> 1109;
1111 -> 1097;
1111 -> 1098;
1112 -> 1111;
1112 -> 1110;
1112 -> 1098;
1113 -> 1098;
1114 -> 1111;
1114 -> 1113;
1115 -> 1114;
1115 -> 1110;
1115 -> 1113;
1116 -> 1115;
1116 -> 1098;
1117 -> 0;
1119 -> 1117;
1119 -> 1118;
1120 -> 1118;
1121 -> 1119;
1121 -> 1120;
1121 -> 1118;
1122 -> 1118;
1125 -> 1123;
1125 -> 1124;
1126 -> 1124;
1127 -> 1125;
1127 -> 1126;
1127 -> 1124;
1128 -> 1124;
1129 -> 1097;
1129 -> 1098;
1130 -> 1129;
1130 -> 1116;
1130 -> 1098;
1131 -> 1098;
1132 -> 1130;
1132 -> 1131;
1133 -> 1132;
1133 -> 1131;
1134 -> 1131;
1135 -> 1133;
1135 -> 1134;
1135 -> 1131;
1136 -> 1133;
1136 -> 1131;
1137 -> 1098;
1138 -> 1136;
1138 -> 1137;
1138 -> 1098;
1139 -> 1097;
1139 -> 1098;
1140 -> 1139;
1140 -> 1138;
1140 -> 1098;
1141 -> 1098;
1142 -> 1140;
1142 -> 1141;
1143 -> 1141;
1144 -> 1142;
1144 -> 1143;
1144 -> 1141;
1145 -> 1098;
1146 -> 1142;
1146 -> 1145;
1146 -> 1098;
1147 -> 1086;
1147 -> 1029;
1148 -> 1029;
1149 -> 1147;
1149 -> 1148;
1150 -> 1148;
1151 -> 1148;
1152 -> 1149;
1152 -> 1151;
1152 -> 1148;
1153 -> 1152;
1154 -> 1153;
1154 -> 1149;
1154 -> 1146;
1154 -> 1152;
1155 -> 1150;
1155 -> 1148;
1156 -> 1155;
1156 -> 1029;
1157 -> 1029;
1158 -> 1156;
1158 -> 1157;
1159 -> 1030;
1159 -> 1157;
1160 -> 1157;
1161 -> 1159;
1161 -> 1146;
1161 -> 1160;
1161 -> 1157;
1162 -> 1161;
1163 -> 1162;
1163 -> 1029;
1164 -> 1030;
1164 -> 1146;
1164 -> 1029;
1165 -> 1029;
1166 -> 1030;
1166 -> 1164;
1166 -> 1029;
1167 -> 1029;
1168 -> 1165;
1168 -> 1167;
1169 -> 1165;
1169 -> 1167;
1170 -> 1166;
1170 -> 1167;
1171 -> 1030;
1171 -> 1167;
1172 -> 1169;
1172 -> 1167;
1173 -> 1167;
1174 -> 1173;
1175 -> 1171;
1175 -> 1174;
1176 -> 1174;
1177 -> 1175;
1177 -> 1164;
1177 -> 1176;
1178 -> 1174;
1179 -> 1174;
1180 -> 1179;
1180 -> 1175;
1180 -> 1174;
1181 -> 1173;
1182 -> 1173;
1183 -> 1171;
1183 -> 1164;
1183 -> 1182;
1184 -> 1182;
1185 -> 1183;
1185 -> 1173;
1186 -> 1173;
1187 -> 1185;
1187 -> 1186;
1187 -> 1173;
1188 -> 1187;
1189 -> 1185;
1189 -> 1188;
1190 -> 1188;
1191 -> 1189;
1191 -> 1190;
1192 -> 1190;
1193 -> 1191;
1193 -> 1192;
1193 -> 1190;
1194 -> 1191;
1194 -> 1190;
1195 -> 1185;
1195 -> 1193;
1196 -> 1193;
1197 -> 1195;
1197 -> 1196;
1198 -> 1196;
1199 -> 1197;
1199 -> 1198;
1199 -> 1196;
1200 -> 1185;
1200 -> 1173;
1201 -> 1200;
1202 -> 1030;
1202 -> 1164;
1202 -> 1170;
1202 -> 1029;
1203 -> 1146;
1203 -> 1029;
1204 -> 1086;
1204 -> 1029;
1205 -> 1202;
1205 -> 1029;
1206 -> 1163;
1206 -> 1029;
1207 -> 1029;
1208 -> 1203;
1208 -> 1207;
1209 -> 1204;
1209 -> 1207;
1210 -> 1205;
1210 -> 1207;
1211 -> 1206;
1211 -> 1207;
1212 -> 1030;
1212 -> 1207;
1213 -> 1208;
1213 -> 1146;
1213 -> 0;
1213 -> 1207;
1214 -> 1209;
1214 -> 1164;
1214 -> 1177;
1214 -> 1180;
1214 -> 1170;
1214 -> 1207;
1215 -> 1210;
1215 -> 1214;
1215 -> 1207;
1216 -> 1207;
1217 -> 1208;
1217 -> 1146;
1217 -> 1207;
1218 -> 1208;
1218 -> 1146;
1218 -> 1217;
1219 -> 1214;
1219 -> 1218;
1220 -> 1208;
1220 -> 1146;
1220 -> 1218;
1221 -> 1215;
1221 -> 1218;
1222 -> 1218;
1223 -> 1219;
1223 -> 1222;
1224 -> 1220;
1224 -> 1222;
1225 -> 1221;
1225 -> 1222;
1226 -> 0;
1227 -> 0;
1229 -> 1227;
1229 -> 1228;
1230 -> 1229;
1231 -> 1230;
1233 -> 1227;
1233 -> 1232;
1234 -> 1233;
1235 -> 1234;
1237 -> 1227;
1237 -> 1236;
1238 -> 1237;
1239 -> 1238;
1241 -> 1227;
1241 -> 1240;
1242 -> 1241;
1243 -> 1242;
1245 -> 1226;
1246 -> 1245;
1246 -> 1227;
1247 -> 1231;
1247 -> 1230;
1247 -> 1245;
1247 -> 1246;
1248 -> 1245;
1248 -> 1246;
1249 -> 1246;
1250 -> 1246;
1251 -> 1248;
1251 -> 1250;
1252 -> 1249;
1252 -> 1250;
1253 -> 1251;
1253 -> 1250;
1254 -> 1250;
1255 -> 1253;
1255 -> 1254;
1256 -> 1252;
1256 -> 1254;
1257 -> 1255;
1257 -> 1254;
1258 -> 1254;
1259 -> 1258;
1259 -> 1257;
1259 -> 1254;
1260 -> 1258;
1260 -> 1254;
1261 -> 1260;
1261 -> 1259;
1261 -> 1254;
1262 -> 1250;
1263 -> 1252;
1263 -> 1262;
1264 -> 1262;
1265 -> 1263;
1265 -> 1264;
1266 -> 1265;
1266 -> 1261;
1266 -> 1264;
1267 -> 1266;
1267 -> 1262;
1268 -> 1262;
1269 -> 1267;
1269 -> 1268;
1270 -> 1269;
1270 -> 1268;
1271 -> 1270;
1272 -> 1271;
1272 -> 1250;
1273 -> 1272;
1273 -> 1252;
1273 -> 1250;
1274 -> 1252;
1274 -> 1261;
1274 -> 0;
1274 -> 1250;
1275 -> 1274;
1275 -> 1252;
1275 -> 1250;
1276 -> 1249;
1276 -> 1247;
1276 -> 1246;
1278 -> 1235;
1278 -> 1234;
1278 -> 1245;
1278 -> 1246;
1279 -> 1245;
1279 -> 1246;
1280 -> 686;
1280 -> 1246;
1281 -> 1246;
1282 -> 1246;
1283 -> 1279;
1283 -> 1282;
1284 -> 1280;
1284 -> 1282;
1285 -> 1280;
1285 -> 1282;
1286 -> 1281;
1286 -> 1282;
1287 -> 1283;
1287 -> 1282;
1288 -> 1282;
1289 -> 1287;
1289 -> 1288;
1290 -> 1286;
1290 -> 1288;
1291 -> 1289;
1291 -> 1288;
1292 -> 1288;
1293 -> 1291;
1293 -> 1292;
1294 -> 1290;
1294 -> 1292;
1295 -> 1293;
1295 -> 1292;
1296 -> 1292;
1297 -> 1296;
1297 -> 1295;
1297 -> 1292;
1298 -> 1296;
1298 -> 1292;
1299 -> 1298;
1299 -> 1297;
1299 -> 1292;
1300 -> 1288;
1301 -> 1290;
1301 -> 1300;
1302 -> 1300;
1303 -> 1301;
1303 -> 1302;
1304 -> 1303;
1304 -> 1299;
1304 -> 1302;
1305 -> 1304;
1305 -> 1300;
1306 -> 1300;
1307 -> 1305;
1307 -> 1306;
1308 -> 1307;
1308 -> 1306;
1309 -> 1308;
1310 -> 1309;
1310 -> 1288;
1311 -> 1310;
1311 -> 1290;
1311 -> 1288;
1312 -> 1290;
1312 -> 1299;
1312 -> 0;
1312 -> 1288;
1313 -> 1312;
1313 -> 1290;
1313 -> 1288;
1314 -> 1286;
1314 -> 1282;
1315 -> 1286;
1315 -> 1282;
1316 -> 1282;
1317 -> 1284;
1317 -> 1316;
1317 -> 1282;
1318 -> 1284;
1318 -> 1317;
1319 -> 1286;
1319 -> 1318;
1319 -> 1299;
1319 -> 1311;
1319 -> 1313;
1319 -> 1314;
1319 -> 1315;
1319 -> 742;
1319 -> 1317;
1320 -> 1284;
1320 -> 1286;
1320 -> 1317;
1321 -> 1282;
1322 -> 1285;
1322 -> 1321;
1322 -> 1282;
1323 -> 1285;
1323 -> 1322;
1324 -> 1286;
1324 -> 1323;
1324 -> 1319;
1324 -> 1320;
1324 -> 1322;
1325 -> 1285;
1325 -> 1286;
1325 -> 1322;
1326 -> 1281;
1326 -> 1278;
1326 -> 1246;
1327 -> 1239;
1327 -> 1238;
1327 -> 1245;
1327 -> 1246;
1328 -> 1245;
1328 -> 1246;
1329 -> 1246;
1330 -> 265;
1330 -> 1246;
1331 -> 1246;
1332 -> 1328;
1332 -> 1331;
1333 -> 1329;
1333 -> 1331;
1334 -> 1330;
1334 -> 1331;
1335 -> 1329;
1335 -> 1331;
1336 -> 1332;
1336 -> 1331;
1337 -> 1331;
1338 -> 1336;
1338 -> 1337;
1339 -> 1335;
1339 -> 1337;
1340 -> 1338;
1340 -> 1337;
1341 -> 1337;
1342 -> 1340;
1342 -> 1341;
1343 -> 1339;
1343 -> 1341;
1344 -> 1342;
1344 -> 1341;
1345 -> 1341;
1346 -> 1345;
1346 -> 1344;
1346 -> 1341;
1347 -> 1345;
1347 -> 1341;
1348 -> 1347;
1348 -> 1346;
1348 -> 1341;
1349 -> 1337;
1350 -> 1339;
1350 -> 1349;
1351 -> 1349;
1352 -> 1350;
1352 -> 1351;
1353 -> 1352;
1353 -> 1348;
1353 -> 1351;
1354 -> 1353;
1354 -> 1349;
1355 -> 1349;
1356 -> 1354;
1356 -> 1355;
1357 -> 1356;
1357 -> 1355;
1358 -> 1357;
1359 -> 1358;
1359 -> 1337;
1360 -> 1359;
1360 -> 1339;
1360 -> 1337;
1361 -> 1339;
1361 -> 1348;
1361 -> 0;
1361 -> 1337;
1362 -> 1361;
1362 -> 1339;
1362 -> 1337;
1363 -> 1335;
1363 -> 1331;
1364 -> 1335;
1364 -> 1331;
1365 -> 1331;
1366 -> 1333;
1366 -> 1365;
1366 -> 1331;
1367 -> 1331;
1368 -> 1334;
1368 -> 1367;
1368 -> 1331;
1369 -> 1334;
1369 -> 1368;
1370 -> 1335;
1370 -> 1369;
1370 -> 1348;
1370 -> 1360;
1370 -> 1362;
1370 -> 1363;
1370 -> 1364;
1370 -> 707;
1370 -> 1368;
1371 -> 1334;
1371 -> 1335;
1371 -> 1368;
1372 -> 1329;
1372 -> 1327;
1372 -> 1246;
1373 -> 1243;
1373 -> 1242;
1373 -> 1245;
1373 -> 1246;
1374 -> 1245;
1374 -> 1246;
1375 -> 1246;
1376 -> 124;
1376 -> 1246;
1377 -> 1246;
1378 -> 1374;
1378 -> 1377;
1379 -> 1375;
1379 -> 1377;
1380 -> 1376;
1380 -> 1377;
1381 -> 1375;
1381 -> 1377;
1382 -> 1378;
1382 -> 1377;
1383 -> 1377;
1384 -> 1382;
1384 -> 1383;
1385 -> 1381;
1385 -> 1383;
1386 -> 1384;
1386 -> 1383;
1387 -> 1383;
1388 -> 1386;
1388 -> 1387;
1389 -> 1385;
1389 -> 1387;
1390 -> 1388;
1390 -> 1387;
1391 -> 1387;
1392 -> 1391;
1392 -> 1390;
1392 -> 1387;
1393 -> 1391;
1393 -> 1387;
1394 -> 1393;
1394 -> 1392;
1394 -> 1387;
1395 -> 1383;
1396 -> 1385;
1396 -> 1395;
1397 -> 1395;
1398 -> 1396;
1398 -> 1397;
1399 -> 1398;
1399 -> 1394;
1399 -> 1397;
1400 -> 1399;
1400 -> 1395;
1401 -> 1395;
1402 -> 1400;
1402 -> 1401;
1403 -> 1402;
1403 -> 1401;
1404 -> 1403;
1405 -> 1404;
1405 -> 1383;
1406 -> 1405;
1406 -> 1385;
1406 -> 1383;
1407 -> 1385;
1407 -> 1394;
1407 -> 0;
1407 -> 1383;
1408 -> 1407;
1408 -> 1385;
1408 -> 1383;
1409 -> 1381;
1409 -> 1377;
1410 -> 1381;
1410 -> 1377;
1411 -> 1377;
1412 -> 1379;
1412 -> 1411;
1412 -> 1377;
1413 -> 1377;
1414 -> 1380;
1414 -> 1413;
1414 -> 1377;
1415 -> 1380;
1415 -> 1414;
1416 -> 1381;
1416 -> 1415;
1416 -> 1394;
1416 -> 1406;
1416 -> 1408;
1416 -> 1409;
1416 -> 1410;
1416 -> 692;
1416 -> 1414;
1417 -> 1380;
1417 -> 1381;
1417 -> 1414;
1418 -> 1375;
1418 -> 1373;
1418 -> 1246;
1419 -> 1231;
1419 -> 1230;
1419 -> 1246;
1420 -> 1249;
1420 -> 1250;
1421 -> 1420;
1421 -> 1250;
1422 -> 1421;
1422 -> 1254;
1423 -> 1422;
1423 -> 1254;
1424 -> 1258;
1424 -> 1423;
1424 -> 1254;
1425 -> 1260;
1425 -> 1424;
1425 -> 1254;
1426 -> 1265;
1426 -> 1425;
1426 -> 1264;
1427 -> 1426;
1427 -> 1262;
1428 -> 1427;
1428 -> 1268;
1429 -> 1428;
1429 -> 1268;
1430 -> 1429;
1431 -> 1430;
1431 -> 1250;
1432 -> 1431;
1432 -> 1252;
1432 -> 1250;
1433 -> 1252;
1433 -> 1425;
1433 -> 0;
1433 -> 1250;
1434 -> 1433;
1434 -> 1252;
1434 -> 1250;
1435 -> 1249;
1435 -> 1419;
1435 -> 1246;
1436 -> 1235;
1436 -> 1234;
1436 -> 1246;
1437 -> 1281;
1437 -> 1282;
1438 -> 1437;
1438 -> 1282;
1439 -> 1438;
1439 -> 1288;
1440 -> 1439;
1440 -> 1288;
1441 -> 1440;
1441 -> 1292;
1442 -> 1441;
1442 -> 1292;
1443 -> 1296;
1443 -> 1442;
1443 -> 1292;
1444 -> 1298;
1444 -> 1443;
1444 -> 1292;
1445 -> 1303;
1445 -> 1444;
1445 -> 1302;
1446 -> 1445;
1446 -> 1300;
1447 -> 1446;
1447 -> 1306;
1448 -> 1447;
1448 -> 1306;
1449 -> 1448;
1450 -> 1449;
1450 -> 1288;
1451 -> 1450;
1451 -> 1290;
1451 -> 1288;
1452 -> 1290;
1452 -> 1444;
1452 -> 0;
1452 -> 1288;
1453 -> 1452;
1453 -> 1290;
1453 -> 1288;
1454 -> 1286;
1454 -> 1318;
1454 -> 1444;
1454 -> 1451;
1454 -> 1453;
1454 -> 1314;
1454 -> 1315;
1454 -> 1324;
1454 -> 1325;
1454 -> 1317;
1455 -> 1281;
1455 -> 1436;
1455 -> 1246;
1456 -> 1239;
1456 -> 1238;
1456 -> 1246;
1457 -> 1329;
1457 -> 1331;
1458 -> 1457;
1458 -> 1331;
1459 -> 1458;
1459 -> 1337;
1460 -> 1459;
1460 -> 1337;
1461 -> 1460;
1461 -> 1341;
1462 -> 1461;
1462 -> 1341;
1463 -> 1345;
1463 -> 1462;
1463 -> 1341;
1464 -> 1347;
1464 -> 1463;
1464 -> 1341;
1465 -> 1352;
1465 -> 1464;
1465 -> 1351;
1466 -> 1465;
1466 -> 1349;
1467 -> 1466;
1467 -> 1355;
1468 -> 1467;
1468 -> 1355;
1469 -> 1468;
1470 -> 1469;
1470 -> 1337;
1471 -> 1470;
1471 -> 1339;
1471 -> 1337;
1472 -> 1339;
1472 -> 1464;
1472 -> 0;
1472 -> 1337;
1473 -> 1472;
1473 -> 1339;
1473 -> 1337;
1474 -> 1335;
1474 -> 1369;
1474 -> 1464;
1474 -> 1471;
1474 -> 1473;
1474 -> 1363;
1474 -> 1364;
1474 -> 1370;
1474 -> 1371;
1474 -> 1368;
1475 -> 1329;
1475 -> 1456;
1475 -> 1246;
1476 -> 1243;
1476 -> 1242;
1476 -> 1246;
1477 -> 1375;
1477 -> 1377;
1478 -> 1477;
1478 -> 1377;
1479 -> 1478;
1479 -> 1383;
1480 -> 1479;
1480 -> 1383;
1481 -> 1480;
1481 -> 1387;
1482 -> 1481;
1482 -> 1387;
1483 -> 1391;
1483 -> 1482;
1483 -> 1387;
1484 -> 1393;
1484 -> 1483;
1484 -> 1387;
1485 -> 1398;
1485 -> 1484;
1485 -> 1397;
1486 -> 1485;
1486 -> 1395;
1487 -> 1486;
1487 -> 1401;
1488 -> 1487;
1488 -> 1401;
1489 -> 1488;
1490 -> 1489;
1490 -> 1383;
1491 -> 1490;
1491 -> 1385;
1491 -> 1383;
1492 -> 1385;
1492 -> 1484;
1492 -> 0;
1492 -> 1383;
1493 -> 1492;
1493 -> 1385;
1493 -> 1383;
1494 -> 1381;
1494 -> 1415;
1494 -> 1484;
1494 -> 1491;
1494 -> 1493;
1494 -> 1409;
1494 -> 1410;
1494 -> 1416;
1494 -> 1417;
1494 -> 1414;
1495 -> 1375;
1495 -> 1476;
1495 -> 1246;
1496 -> 1429;
1497 -> 1496;
1497 -> 1250;
1498 -> 1497;
1498 -> 1252;
1498 -> 1250;
1499 -> 1448;
1500 -> 1499;
1500 -> 1288;
1501 -> 1500;
1501 -> 1290;
1501 -> 1288;
1502 -> 1286;
1502 -> 1318;
1502 -> 1444;
1502 -> 1501;
1502 -> 1453;
1502 -> 1314;
1502 -> 1315;
1502 -> 1454;
1502 -> 1325;
1502 -> 1317;
1503 -> 1468;
1504 -> 1503;
1504 -> 1337;
1505 -> 1504;
1505 -> 1339;
1505 -> 1337;
1506 -> 1335;
1506 -> 1369;
1506 -> 1464;
1506 -> 1505;
1506 -> 1473;
1506 -> 1363;
1506 -> 1364;
1506 -> 1474;
1506 -> 1371;
1506 -> 1368;
1507 -> 1488;
1508 -> 1507;
1508 -> 1383;
1509 -> 1508;
1509 -> 1385;
1509 -> 1383;
1510 -> 1381;
1510 -> 1415;
1510 -> 1484;
1510 -> 1509;
1510 -> 1493;
1510 -> 1409;
1510 -> 1410;
1510 -> 1494;
1510 -> 1417;
1510 -> 1414;
1511 -> 1429;
1512 -> 1511;
1512 -> 1250;
1513 -> 1512;
1513 -> 1252;
1513 -> 1250;
1514 -> 1448;
1515 -> 1514;
1515 -> 1288;
1516 -> 1515;
1516 -> 1290;
1516 -> 1288;
1517 -> 1286;
1517 -> 1318;
1517 -> 1444;
1517 -> 1516;
1517 -> 1453;
1517 -> 1314;
1517 -> 1315;
1517 -> 1502;
1517 -> 1325;
1517 -> 1317;
1518 -> 1468;
1519 -> 1518;
1519 -> 1337;
1520 -> 1519;
1520 -> 1339;
1520 -> 1337;
1521 -> 1335;
1521 -> 1369;
1521 -> 1464;
1521 -> 1520;
1521 -> 1473;
1521 -> 1363;
1521 -> 1364;
1521 -> 1506;
1521 -> 1371;
1521 -> 1368;
1522 -> 1488;
1523 -> 1522;
1523 -> 1383;
1524 -> 1523;
1524 -> 1385;
1524 -> 1383;
1525 -> 1381;
1525 -> 1415;
1525 -> 1484;
1525 -> 1524;
1525 -> 1493;
1525 -> 1409;
1525 -> 1410;
1525 -> 1510;
1525 -> 1417;
1525 -> 1414;
1526 -> 1429;
1527 -> 1526;
1527 -> 1250;
1528 -> 1527;
1528 -> 1252;
1528 -> 1250;
1529 -> 1448;
1530 -> 1529;
1530 -> 1288;
1531 -> 1530;
1531 -> 1290;
1531 -> 1288;
1532 -> 1286;
1532 -> 1318;
1532 -> 1444;
1532 -> 1531;
1532 -> 1453;
1532 -> 1314;
1532 -> 1315;
1532 -> 1517;
1532 -> 1325;
1532 -> 1317;
1533 -> 1468;
1534 -> 1533;
1534 -> 1337;
1535 -> 1534;
1535 -> 1339;
1535 -> 1337;
1536 -> 1335;
1536 -> 1369;
1536 -> 1464;
1536 -> 1535;
1536 -> 1473;
1536 -> 1363;
1536 -> 1364;
1536 -> 1521;
1536 -> 1371;
1536 -> 1368;
1537 -> 1488;
1538 -> 1537;
1538 -> 1383;
1539 -> 1538;
1539 -> 1385;
1539 -> 1383;
1540 -> 1381;
1540 -> 1415;
1540 -> 1484;
1540 -> 1539;
1540 -> 1493;
1540 -> 1409;
1540 -> 1410;
1540 -> 1525;
1540 -> 1417;
1540 -> 1414;
1541 -> 1429;
1542 -> 1541;
1542 -> 1250;
1543 -> 1542;
1543 -> 1252;
1543 -> 1250;
1544 -> 1448;
1545 -> 1544;
1545 -> 1288;
1546 -> 1545;
1546 -> 1290;
1546 -> 1288;
1547 -> 1286;
1547 -> 1318;
1547 -> 1444;
1547 -> 1546;
1547 -> 1453;
1547 -> 1314;
1547 -> 1315;
1547 -> 1532;
1547 -> 1325;
1547 -> 1317;
1548 -> 1468;
1549 -> 1548;
1549 -> 1337;
1550 -> 1549;
1550 -> 1339;
1550 -> 1337;
1551 -> 1335;
1551 -> 1369;
1551 -> 1464;
1551 -> 1550;
1551 -> 1473;
1551 -> 1363;
1551 -> 1364;
1551 -> 1536;
1551 -> 1371;
1551 -> 1368;
1552 -> 1488;
1553 -> 1552;
1553 -> 1383;
1554 -> 1553;
1554 -> 1385;
1554 -> 1383;
1555 -> 1381;
1555 -> 1415;
1555 -> 1484;
1555 -> 1554;
1555 -> 1493;
1555 -> 1409;
1555 -> 1410;
1555 -> 1540;
1555 -> 1417;
1555 -> 1414;
1556 -> 1429;
1557 -> 1556;
1557 -> 1250;
1558 -> 1557;
1558 -> 1252;
1558 -> 1250;
1559 -> 1448;
1560 -> 1559;
1560 -> 1288;
1561 -> 1560;
1561 -> 1290;
1561 -> 1288;
1562 -> 1286;
1562 -> 1318;
1562 -> 1444;
1562 -> 1561;
1562 -> 1453;
1562 -> 1314;
1562 -> 1315;
1562 -> 1547;
1562 -> 1325;
1562 -> 1317;
1563 -> 1468;
1564 -> 1563;
1564 -> 1337;
1565 -> 1564;
1565 -> 1339;
1565 -> 1337;
1566 -> 1335;
1566 -> 1369;
1566 -> 1464;
1566 -> 1565;
1566 -> 1473;
1566 -> 1363;
1566 -> 1364;
1566 -> 1551;
1566 -> 1371;
1566 -> 1368;
1567 -> 1488;
1568 -> 1567;
1568 -> 1383;
1569 -> 1568;
1569 -> 1385;
1569 -> 1383;
1570 -> 1381;
1570 -> 1415;
1570 -> 1484;
1570 -> 1569;
1570 -> 1493;
1570 -> 1409;
1570 -> 1410;
1570 -> 1555;
1570 -> 1417;
1570 -> 1414;
1571 -> 1429;
1572 -> 1571;
1572 -> 1250;
1573 -> 1572;
1573 -> 1252;
1573 -> 1250;
1574 -> 1448;
1575 -> 1574;
1575 -> 1288;
1576 -> 1575;
1576 -> 1290;
1576 -> 1288;
1577 -> 1286;
1577 -> 1318;
1577 -> 1444;
1577 -> 1576;
1577 -> 1453;
1577 -> 1314;
1577 -> 1315;
1577 -> 1562;
1577 -> 1325;
1577 -> 1317;
1578 -> 1468;
1579 -> 1578;
1579 -> 1337;
1580 -> 1579;
1580 -> 1339;
1580 -> 1337;
1581 -> 1335;
1581 -> 1369;
1581 -> 1464;
1581 -> 1580;
1581 -> 1473;
1581 -> 1363;
1581 -> 1364;
1581 -> 1566;
1581 -> 1371;
1581 -> 1368;
1582 -> 1488;
1583 -> 1582;
1583 -> 1383;
1584 -> 1583;
1584 -> 1385;
1584 -> 1383;
1585 -> 1381;
1585 -> 1415;
1585 -> 1484;
1585 -> 1584;
1585 -> 1493;
1585 -> 1409;
1585 -> 1410;
1585 -> 1570;
1585 -> 1417;
1585 -> 1414;
1586 -> 1429;
1587 -> 1586;
1587 -> 1250;
1588 -> 1587;
1588 -> 1252;
1588 -> 1250;
1589 -> 1448;
1590 -> 1589;
1590 -> 1288;
1591 -> 1590;
1591 -> 1290;
1591 -> 1288;
1592 -> 1286;
1592 -> 1318;
1592 -> 1444;
1592 -> 1591;
1592 -> 1453;
1592 -> 1314;
1592 -> 1315;
1592 -> 1577;
1592 -> 1325;
1592 -> 1317;
1593 -> 1468;
1594 -> 1593;
1594 -> 1337;
1595 -> 1594;
1595 -> 1339;
1595 -> 1337;
1596 -> 1335;
1596 -> 1369;
1596 -> 1464;
1596 -> 1595;
1596 -> 1473;
1596 -> 1363;
1596 -> 1364;
1596 -> 1581;
1596 -> 1371;
1596 -> 1368;
1597 -> 1488;
1598 -> 1597;
1598 -> 1383;
1599 -> 1598;
1599 -> 1385;
1599 -> 1383;
1600 -> 1381;
1600 -> 1415;
1600 -> 1484;
1600 -> 1599;
1600 -> 1493;
1600 -> 1409;
1600 -> 1410;
1600 -> 1585;
1600 -> 1417;
1600 -> 1414;
1601 -> 1429;
1602 -> 1601;
1602 -> 1250;
1603 -> 1602;
1603 -> 1252;
1603 -> 1250;
1604 -> 1448;
1605 -> 1604;
1605 -> 1288;
1606 -> 1605;
1606 -> 1290;
1606 -> 1288;
1607 -> 1286;
1607 -> 1318;
1607 -> 1444;
1607 -> 1606;
1607 -> 1453;
1607 -> 1314;
1607 -> 1315;
1607 -> 1592;
1607 -> 1325;
1607 -> 1317;
1608 -> 1468;
1609 -> 1608;
1609 -> 1337;
1610 -> 1609;
1610 -> 1339;
1610 -> 1337;
1611 -> 1335;
1611 -> 1369;
1611 -> 1464;
1611 -> 1610;
1611 -> 1473;
1611 -> 1363;
1611 -> 1364;
1611 -> 1596;
1611 -> 1371;
1611 -> 1368;
1612 -> 1488;
1613 -> 1612;
1613 -> 1383;
1614 -> 1613;
1614 -> 1385;
1614 -> 1383;
1615 -> 1381;
1615 -> 1415;
1615 -> 1484;
1615 -> 1614;
1615 -> 1493;
1615 -> 1409;
1615 -> 1410;
1615 -> 1600;
1615 -> 1417;
1615 -> 1414;
1616 -> 1429;
1617 -> 1616;
1617 -> 1250;
1618 -> 1617;
1618 -> 1252;
1618 -> 1250;
1619 -> 1448;
1620 -> 1619;
1620 -> 1288;
1621 -> 1620;
1621 -> 1290;
1621 -> 1288;
1622 -> 1286;
1622 -> 1318;
1622 -> 1444;
1622 -> 1621;
1622 -> 1453;
1622 -> 1314;
1622 -> 1315;
1622 -> 1607;
1622 -> 1325;
1622 -> 1317;
1623 -> 1468;
1624 -> 1623;
1624 -> 1337;
1625 -> 1624;
1625 -> 1339;
1625 -> 1337;
1626 -> 1335;
1626 -> 1369;
1626 -> 1464;
1626 -> 1625;
1626 -> 1473;
1626 -> 1363;
1626 -> 1364;
1626 -> 1611;
1626 -> 1371;
1626 -> 1368;
1627 -> 1488;
1628 -> 1627;
1628 -> 1383;
1629 -> 1628;
1629 -> 1385;
1629 -> 1383;
1630 -> 1381;
1630 -> 1415;
1630 -> 1484;
1630 -> 1629;
1630 -> 1493;
1630 -> 1409;
1630 -> 1410;
1630 -> 1615;
1630 -> 1417;
1630 -> 1414;
1631 -> 1429;
1632 -> 1631;
1632 -> 1250;
1633 -> 1632;
1633 -> 1252;
1633 -> 1250;
1634 -> 1448;
1635 -> 1634;
1635 -> 1288;
1636 -> 1635;
1636 -> 1290;
1636 -> 1288;
1637 -> 1286;
1637 -> 1318;
1637 -> 1444;
1637 -> 1636;
1637 -> 1453;
1637 -> 1314;
1637 -> 1315;
1637 -> 1622;
1637 -> 1325;
1637 -> 1317;
1638 -> 1468;
1639 -> 1638;
1639 -> 1337;
1640 -> 1639;
1640 -> 1339;
1640 -> 1337;
1641 -> 1335;
1641 -> 1369;
1641 -> 1464;
1641 -> 1640;
1641 -> 1473;
1641 -> 1363;
1641 -> 1364;
1641 -> 1626;
1641 -> 1371;
1641 -> 1368;
1642 -> 1488;
1643 -> 1642;
1643 -> 1383;
1644 -> 1643;
1644 -> 1385;
1644 -> 1383;
1645 -> 1381;
1645 -> 1415;
1645 -> 1484;
1645 -> 1644;
1645 -> 1493;
1645 -> 1409;
1645 -> 1410;
1645 -> 1630;
1645 -> 1417;
1645 -> 1414;
1646 -> 1429;
1647 -> 1646;
1647 -> 1250;
1648 -> 1647;
1648 -> 1252;
1648 -> 1250;
1649 -> 1448;
1650 -> 1649;
1650 -> 1288;
1651 -> 1650;
1651 -> 1290;
1651 -> 1288;
1652 -> 1286;
1652 -> 1318;
1652 -> 1444;
1652 -> 1651;
1652 -> 1453;
1652 -> 1314;
1652 -> 1315;
1652 -> 1637;
1652 -> 1325;
1652 -> 1317;
1653 -> 1468;
1654 -> 1653;
1654 -> 1337;
1655 -> 1654;
1655 -> 1339;
1655 -> 1337;
1656 -> 1335;
1656 -> 1369;
1656 -> 1464;
1656 -> 1655;
1656 -> 1473;
1656 -> 1363;
1656 -> 1364;
1656 -> 1641;
1656 -> 1371;
1656 -> 1368;
1657 -> 1488;
1658 -> 1657;
1658 -> 1383;
1659 -> 1658;
1659 -> 1385;
1659 -> 1383;
1660 -> 1381;
1660 -> 1415;
1660 -> 1484;
1660 -> 1659;
1660 -> 1493;
1660 -> 1409;
1660 -> 1410;
1660 -> 1645;
1660 -> 1417;
1660 -> 1414;
1661 -> 1429;
1662 -> 1661;
1662 -> 1250;
1663 -> 1662;
1663 -> 1252;
1663 -> 1250;
1664 -> 1448;
1665 -> 1664;
1665 -> 1288;
1666 -> 1665;
1666 -> 1290;
1666 -> 1288;
1667 -> 1286;
1667 -> 1318;
1667 -> 1444;
1667 -> 1666;
1667 -> 1453;
1667 -> 1314;
1667 -> 1315;
1667 -> 1652;
1667 -> 1325;
1667 -> 1317;
1668 -> 1468;
1669 -> 1668;
1669 -> 1337;
1670 -> 1669;
1670 -> 1339;
1670 -> 1337;
1671 -> 1335;
1671 -> 1369;
1671 -> 1464;
1671 -> 1670;
1671 -> 1473;
1671 -> 1363;
1671 -> 1364;
1671 -> 1656;
1671 -> 1371;
1671 -> 1368;
1672 -> 1488;
1673 -> 1672;
1673 -> 1383;
1674 -> 1673;
1674 -> 1385;
1674 -> 1383;
1675 -> 1381;
1675 -> 1415;
1675 -> 1484;
1675 -> 1674;
1675 -> 1493;
1675 -> 1409;
1675 -> 1410;
1675 -> 1660;
1675 -> 1417;
1675 -> 1414;
1676 -> 1429;
1677 -> 1676;
1677 -> 1250;
1678 -> 1677;
1678 -> 1252;
1678 -> 1250;
1679 -> 1448;
1680 -> 1679;
1680 -> 1288;
1681 -> 1680;
1681 -> 1290;
1681 -> 1288;
1682 -> 1286;
1682 -> 1318;
1682 -> 1444;
1682 -> 1681;
1682 -> 1453;
1682 -> 1314;
1682 -> 1315;
1682 -> 1667;
1682 -> 1325;
1682 -> 1317;
1683 -> 1468;
1684 -> 1683;
1684 -> 1337;
1685 -> 1684;
1685 -> 1339;
1685 -> 1337;
1686 -> 1335;
1686 -> 1369;
1686 -> 1464;
1686 -> 1685;
1686 -> 1473;
1686 -> 1363;
1686 -> 1364;
1686 -> 1671;
1686 -> 1371;
1686 -> 1368;
1687 -> 1488;
1688 -> 1687;
1688 -> 1383;
1689 -> 1688;
1689 -> 1385;
1689 -> 1383;
1690 -> 1381;
1690 -> 1415;
1690 -> 1484;
1690 -> 1689;
1690 -> 1493;
1690 -> 1409;
1690 -> 1410;
1690 -> 1675;
1690 -> 1417;
1690 -> 1414;
1691 -> 1429;
1692 -> 1691;
1692 -> 1250;
1693 -> 1692;
1693 -> 1252;
1693 -> 1250;
1694 -> 1448;
1695 -> 1694;
1695 -> 1288;
1696 -> 1695;
1696 -> 1290;
1696 -> 1288;
1697 -> 1286;
1697 -> 1318;
1697 -> 1444;
1697 -> 1696;
1697 -> 1453;
1697 -> 1314;
1697 -> 1315;
1697 -> 1682;
1697 -> 1325;
1697 -> 1317;
1698 -> 1468;
1699 -> 1698;
1699 -> 1337;
1700 -> 1699;
1700 -> 1339;
1700 -> 1337;
1701 -> 1335;
1701 -> 1369;
1701 -> 1464;
1701 -> 1700;
1701 -> 1473;
1701 -> 1363;
1701 -> 1364;
1701 -> 1686;
1701 -> 1371;
1701 -> 1368;
1702 -> 1488;
1703 -> 1702;
1703 -> 1383;
1704 -> 1703;
1704 -> 1385;
1704 -> 1383;
1705 -> 1381;
1705 -> 1415;
1705 -> 1484;
1705 -> 1704;
1705 -> 1493;
1705 -> 1409;
1705 -> 1410;
1705 -> 1690;
1705 -> 1417;
1705 -> 1414;
1706 -> 1429;
1707 -> 1706;
1707 -> 1250;
1708 -> 1707;
1708 -> 1252;
1708 -> 1250;
1709 -> 1448;
1710 -> 1709;
1710 -> 1288;
1711 -> 1710;
1711 -> 1290;
1711 -> 1288;
1712 -> 1286;
1712 -> 1318;
1712 -> 1444;
1712 -> 1711;
1712 -> 1453;
1712 -> 1314;
1712 -> 1315;
1712 -> 1697;
1712 -> 1325;
1712 -> 1317;
1713 -> 1468;
1714 -> 1713;
1714 -> 1337;
1715 -> 1714;
1715 -> 1339;
1715 -> 1337;
1716 -> 1335;
1716 -> 1369;
1716 -> 1464;
1716 -> 1715;
1716 -> 1473;
1716 -> 1363;
1716 -> 1364;
1716 -> 1701;
1716 -> 1371;
1716 -> 1368;
1717 -> 1488;
1718 -> 1717;
1718 -> 1383;
1719 -> 1718;
1719 -> 1385;
1719 -> 1383;
1720 -> 1381;
1720 -> 1415;
1720 -> 1484;
1720 -> 1719;
1720 -> 1493;
1720 -> 1409;
1720 -> 1410;
1720 -> 1705;
1720 -> 1417;
1720 -> 1414;
1721 -> 1429;
1722 -> 1721;
1722 -> 1250;
1723 -> 1722;
1723 -> 1252;
1723 -> 1250;
1724 -> 1448;
1725 -> 1724;
1725 -> 1288;
1726 -> 1725;
1726 -> 1290;
1726 -> 1288;
1727 -> 1286;
1727 -> 1318;
1727 -> 1444;
1727 -> 1726;
1727 -> 1453;
1727 -> 1314;
1727 -> 1315;
1727 -> 1712;
1727 -> 1325;
1727 -> 1317;
1728 -> 1468;
1729 -> 1728;
1729 -> 1337;
1730 -> 1729;
1730 -> 1339;
1730 -> 1337;
1731 -> 1335;
1731 -> 1369;
1731 -> 1464;
1731 -> 1730;
1731 -> 1473;
1731 -> 1363;
1731 -> 1364;
1731 -> 1716;
1731 -> 1371;
1731 -> 1368;
1732 -> 1488;
1733 -> 1732;
1733 -> 1383;
1734 -> 1733;
1734 -> 1385;
1734 -> 1383;
1735 -> 1381;
1735 -> 1415;
1735 -> 1484;
1735 -> 1734;
1735 -> 1493;
1735 -> 1409;
1735 -> 1410;
1735 -> 1720;
1735 -> 1417;
1735 -> 1414;
1736 -> 1429;
1737 -> 1736;
1737 -> 1250;
1738 -> 1737;
1738 -> 1252;
1738 -> 1250;
1739 -> 1448;
1740 -> 1739;
1740 -> 1288;
1741 -> 1740;
1741 -> 1290;
1741 -> 1288;
1742 -> 1286;
1742 -> 1318;
1742 -> 1444;
1742 -> 1741;
1742 -> 1453;
1742 -> 1314;
1742 -> 1315;
1742 -> 1727;
1742 -> 1325;
1742 -> 1317;
1743 -> 1468;
1744 -> 1743;
1744 -> 1337;
1745 -> 1744;
1745 -> 1339;
1745 -> 1337;
1746 -> 1335;
1746 -> 1369;
1746 -> 1464;
1746 -> 1745;
1746 -> 1473;
1746 -> 1363;
1746 -> 1364;
1746 -> 1731;
1746 -> 1371;
1746 -> 1368;
1747 -> 1488;
1748 -> 1747;
1748 -> 1383;
1749 -> 1748;
1749 -> 1385;
1749 -> 1383;
1750 -> 1381;
1750 -> 1415;
1750 -> 1484;
1750 -> 1749;
1750 -> 1493;
1750 -> 1409;
1750 -> 1410;
1750 -> 1735;
1750 -> 1417;
1750 -> 1414;
1751 -> 1429;
1752 -> 1751;
1752 -> 1250;
1753 -> 1752;
1753 -> 1252;
1753 -> 1250;
1754 -> 1448;
1755 -> 1754;
1755 -> 1288;
1756 -> 1755;
1756 -> 1290;
1756 -> 1288;
1757 -> 1286;
1757 -> 1318;
1757 -> 1444;
1757 -> 1756;
1757 -> 1453;
1757 -> 1314;
1757 -> 1315;
1757 -> 1742;
1757 -> 1325;
1757 -> 1317;
1758 -> 1468;
1759 -> 1758;
1759 -> 1337;
1760 -> 1759;
1760 -> 1339;
1760 -> 1337;
1761 -> 1335;
1761 -> 1369;
1761 -> 1464;
1761 -> 1760;
1761 -> 1473;
1761 -> 1363;
1761 -> 1364;
1761 -> 1746;
1761 -> 1371;
1761 -> 1368;
1762 -> 1488;
1763 -> 1762;
1763 -> 1383;
1764 -> 1763;
1764 -> 1385;
1764 -> 1383;
1765 -> 1381;
1765 -> 1415;
1765 -> 1484;
1765 -> 1764;
1765 -> 1493;
1765 -> 1409;
1765 -> 1410;
1765 -> 1750;
1765 -> 1417;
1765 -> 1414;
1766 -> 1429;
1767 -> 1766;
1767 -> 1250;
1768 -> 1767;
1768 -> 1252;
1768 -> 1250;
1769 -> 1448;
1770 -> 1769;
1770 -> 1288;
1771 -> 1770;
1771 -> 1290;
1771 -> 1288;
1772 -> 1286;
1772 -> 1318;
1772 -> 1444;
1772 -> 1771;
1772 -> 1453;
1772 -> 1314;
1772 -> 1315;
1772 -> 1757;
1772 -> 1325;
1772 -> 1317;
1773 -> 1468;
1774 -> 1773;
1774 -> 1337;
1775 -> 1774;
1775 -> 1339;
1775 -> 1337;
1776 -> 1335;
1776 -> 1369;
1776 -> 1464;
1776 -> 1775;
1776 -> 1473;
1776 -> 1363;
1776 -> 1364;
1776 -> 1761;
1776 -> 1371;
1776 -> 1368;
1777 -> 1488;
1778 -> 1777;
1778 -> 1383;
1779 -> 1778;
1779 -> 1385;
1779 -> 1383;
1780 -> 1381;
1780 -> 1415;
1780 -> 1484;
1780 -> 1779;
1780 -> 1493;
1780 -> 1409;
1780 -> 1410;
1780 -> 1765;
1780 -> 1417;
1780 -> 1414;
1781 -> 1429;
1782 -> 1781;
1782 -> 1250;
1783 -> 1782;
1783 -> 1252;
1783 -> 1250;
1784 -> 1448;
1785 -> 1784;
1785 -> 1288;
1786 -> 1785;
1786 -> 1290;
1786 -> 1288;
1787 -> 1286;
1787 -> 1318;
1787 -> 1444;
1787 -> 1786;
1787 -> 1453;
1787 -> 1314;
1787 -> 1315;
1787 -> 1772;
1787 -> 1325;
1787 -> 1317;
1788 -> 1468;
1789 -> 1788;
1789 -> 1337;
1790 -> 1789;
1790 -> 1339;
1790 -> 1337;
1791 -> 1335;
1791 -> 1369;
1791 -> 1464;
1791 -> 1790;
1791 -> 1473;
1791 -> 1363;
1791 -> 1364;
1791 -> 1776;
1791 -> 1371;
1791 -> 1368;
1792 -> 1488;
1793 -> 1792;
1793 -> 1383;
1794 -> 1793;
1794 -> 1385;
1794 -> 1383;
1795 -> 1381;
1795 -> 1415;
1795 -> 1484;
1795 -> 1794;
1795 -> 1493;
1795 -> 1409;
1795 -> 1410;
1795 -> 1780;
1795 -> 1417;
1795 -> 1414;
1796 -> 1429;
1797 -> 1796;
1797 -> 1250;
1798 -> 1797;
1798 -> 1252;
1798 -> 1250;
1799 -> 1448;
1800 -> 1799;
1800 -> 1288;
1801 -> 1800;
1801 -> 1290;
1801 -> 1288;
1802 -> 1286;
1802 -> 1318;
1802 -> 1444;
1802 -> 1801;
1802 -> 1453;
1802 -> 1314;
1802 -> 1315;
1802 -> 1787;
1802 -> 1325;
1802 -> 1317;
1803 -> 1468;
1804 -> 1803;
1804 -> 1337;
1805 -> 1804;
1805 -> 1339;
1805 -> 1337;
1806 -> 1335;
1806 -> 1369;
1806 -> 1464;
1806 -> 1805;
1806 -> 1473;
1806 -> 1363;
1806 -> 1364;
1806 -> 1791;
1806 -> 1371;
1806 -> 1368;
1807 -> 1488;
1808 -> 1807;
1808 -> 1383;
1809 -> 1808;
1809 -> 1385;
1809 -> 1383;
1810 -> 1381;
1810 -> 1415;
1810 -> 1484;
1810 -> 1809;
1810 -> 1493;
1810 -> 1409;
1810 -> 1410;
1810 -> 1795;
1810 -> 1417;
1810 -> 1414;
1811 -> 1429;
1812 -> 1811;
1812 -> 1250;
1813 -> 1812;
1813 -> 1252;
1813 -> 1250;
1814 -> 1448;
1815 -> 1814;
1815 -> 1288;
1816 -> 1815;
1816 -> 1290;
1816 -> 1288;
1817 -> 1286;
1817 -> 1318;
1817 -> 1444;
1817 -> 1816;
1817 -> 1453;
1817 -> 1314;
1817 -> 1315;
1817 -> 1802;
1817 -> 1325;
1817 -> 1317;
1818 -> 1468;
1819 -> 1818;
1819 -> 1337;
1820 -> 1819;
1820 -> 1339;
1820 -> 1337;
1821 -> 1335;
1821 -> 1369;
1821 -> 1464;
1821 -> 1820;
1821 -> 1473;
1821 -> 1363;
1821 -> 1364;
1821 -> 1806;
1821 -> 1371;
1821 -> 1368;
1822 -> 1488;
1823 -> 1822;
1823 -> 1383;
1824 -> 1823;
1824 -> 1385;
1824 -> 1383;
1825 -> 1381;
1825 -> 1415;
1825 -> 1484;
1825 -> 1824;
1825 -> 1493;
1825 -> 1409;
1825 -> 1410;
1825 -> 1810;
1825 -> 1417;
1825 -> 1414;
1826 -> 1429;
1827 -> 1826;
1827 -> 1250;
1828 -> 1827;
1828 -> 1252;
1828 -> 1250;
1829 -> 1448;
1830 -> 1829;
1830 -> 1288;
1831 -> 1830;
1831 -> 1290;
1831 -> 1288;
1832 -> 1286;
1832 -> 1318;
1832 -> 1444;
1832 -> 1831;
1832 -> 1453;
1832 -> 1314;
1832 -> 1315;
1832 -> 1817;
1832 -> 1325;
1832 -> 1317;
1833 -> 1468;
1834 -> 1833;
1834 -> 1337;
1835 -> 1834;
1835 -> 1339;
1835 -> 1337;
1836 -> 1335;
1836 -> 1369;
1836 -> 1464;
1836 -> 1835;
1836 -> 1473;
1836 -> 1363;
1836 -> 1364;
1836 -> 1821;
1836 -> 1371;
1836 -> 1368;
1837 -> 1488;
1838 -> 1837;
1838 -> 1383;
1839 -> 1838;
1839 -> 1385;
1839 -> 1383;
1840 -> 1381;
1840 -> 1415;
1840 -> 1484;
1840 -> 1839;
1840 -> 1493;
1840 -> 1409;
1840 -> 1410;
1840 -> 1825;
1840 -> 1417;
1840 -> 1414;
1841 -> 1429;
1842 -> 1841;
1842 -> 1250;
1843 -> 1842;
1843 -> 1252;
1843 -> 1250;
1844 -> 1448;
1845 -> 1844;
1845 -> 1288;
1846 -> 1845;
1846 -> 1290;
1846 -> 1288;
1847 -> 1286;
1847 -> 1318;
1847 -> 1444;
1847 -> 1846;
1847 -> 1453;
1847 -> 1314;
1847 -> 1315;
1847 -> 1832;
1847 -> 1325;
1847 -> 1317;
1848 -> 1468;
1849 -> 1848;
1849 -> 1337;
1850 -> 1849;
1850 -> 1339;
1850 -> 1337;
1851 -> 1335;
1851 -> 1369;
1851 -> 1464;
1851 -> 1850;
1851 -> 1473;
1851 -> 1363;
1851 -> 1364;
1851 -> 1836;
1851 -> 1371;
1851 -> 1368;
1852 -> 1488;
1853 -> 1852;
1853 -> 1383;
1854 -> 1853;
1854 -> 1385;
1854 -> 1383;
1855 -> 1381;
1855 -> 1415;
1855 -> 1484;
1855 -> 1854;
1855 -> 1493;
1855 -> 1409;
1855 -> 1410;
1855 -> 1840;
1855 -> 1417;
1855 -> 1414;
1856 -> 1429;
1857 -> 1856;
1857 -> 1250;
1858 -> 1857;
1858 -> 1252;
1858 -> 1250;
1859 -> 1448;
1860 -> 1859;
1860 -> 1288;
1861 -> 1860;
1861 -> 1290;
1861 -> 1288;
1862 -> 1286;
1862 -> 1318;
1862 -> 1444;
1862 -> 1861;
1862 -> 1453;
1862 -> 1314;
1862 -> 1315;
1862 -> 1847;
1862 -> 1325;
1862 -> 1317;
1863 -> 1468;
1864 -> 1863;
1864 -> 1337;
1865 -> 1864;
1865 -> 1339;
1865 -> 1337;
1866 -> 1335;
1866 -> 1369;
1866 -> 1464;
1866 -> 1865;
1866 -> 1473;
1866 -> 1363;
1866 -> 1364;
1866 -> 1851;
1866 -> 1371;
1866 -> 1368;
1867 -> 1488;
1868 -> 1867;
1868 -> 1383;
1869 -> 1868;
1869 -> 1385;
1869 -> 1383;
1870 -> 1381;
1870 -> 1415;
1870 -> 1484;
1870 -> 1869;
1870 -> 1493;
1870 -> 1409;
1870 -> 1410;
1870 -> 1855;
1870 -> 1417;
1870 -> 1414;
1871 -> 1429;
1872 -> 1871;
1872 -> 1250;
1873 -> 1872;
1873 -> 1252;
1873 -> 1250;
1874 -> 1448;
1875 -> 1874;
1875 -> 1288;
1876 -> 1875;
1876 -> 1290;
1876 -> 1288;
1877 -> 1286;
1877 -> 1318;
1877 -> 1444;
1877 -> 1876;
1877 -> 1453;
1877 -> 1314;
1877 -> 1315;
1877 -> 1862;
1877 -> 1325;
1877 -> 1317;
1878 -> 1468;
1879 -> 1878;
1879 -> 1337;
1880 -> 1879;
1880 -> 1339;
1880 -> 1337;
1881 -> 1335;
1881 -> 1369;
1881 -> 1464;
1881 -> 1880;
1881 -> 1473;
1881 -> 1363;
1881 -> 1364;
1881 -> 1866;
1881 -> 1371;
1881 -> 1368;
1882 -> 1488;
1883 -> 1882;
1883 -> 1383;
1884 -> 1883;
1884 -> 1385;
1884 -> 1383;
1885 -> 1381;
1885 -> 1415;
1885 -> 1484;
1885 -> 1884;
1885 -> 1493;
1885 -> 1409;
1885 -> 1410;
1885 -> 1870;
1885 -> 1417;
1885 -> 1414;
1886 -> 1429;
1887 -> 1886;
1887 -> 1250;
1888 -> 1887;
1888 -> 1252;
1888 -> 1250;
1889 -> 1448;
1890 -> 1889;
1890 -> 1288;
1891 -> 1890;
1891 -> 1290;
1891 -> 1288;
1892 -> 1286;
1892 -> 1318;
1892 -> 1444;
1892 -> 1891;
1892 -> 1453;
1892 -> 1314;
1892 -> 1315;
1892 -> 1877;
1892 -> 1325;
1892 -> 1317;
1893 -> 1468;
1894 -> 1893;
1894 -> 1337;
1895 -> 1894;
1895 -> 1339;
1895 -> 1337;
1896 -> 1335;
1896 -> 1369;
1896 -> 1464;
1896 -> 1895;
1896 -> 1473;
1896 -> 1363;
1896 -> 1364;
1896 -> 1881;
1896 -> 1371;
1896 -> 1368;
1897 -> 1488;
1898 -> 1897;
1898 -> 1383;
1899 -> 1898;
1899 -> 1385;
1899 -> 1383;
1900 -> 1381;
1900 -> 1415;
1900 -> 1484;
1900 -> 1899;
1900 -> 1493;
1900 -> 1409;
1900 -> 1410;
1900 -> 1885;
1900 -> 1417;
1900 -> 1414;
1901 -> 1429;
1902 -> 1901;
1902 -> 1250;
1903 -> 1902;
1903 -> 1252;
1903 -> 1250;
1904 -> 1448;
1905 -> 1904;
1905 -> 1288;
1906 -> 1905;
1906 -> 1290;
1906 -> 1288;
1907 -> 1286;
1907 -> 1318;
1907 -> 1444;
1907 -> 1906;
1907 -> 1453;
1907 -> 1314;
1907 -> 1315;
1907 -> 1892;
1907 -> 1325;
1907 -> 1317;
1908 -> 1468;
1909 -> 1908;
1909 -> 1337;
1910 -> 1909;
1910 -> 1339;
1910 -> 1337;
1911 -> 1335;
1911 -> 1369;
1911 -> 1464;
1911 -> 1910;
1911 -> 1473;
1911 -> 1363;
1911 -> 1364;
1911 -> 1896;
1911 -> 1371;
1911 -> 1368;
1912 -> 1488;
1913 -> 1912;
1913 -> 1383;
1914 -> 1913;
1914 -> 1385;
1914 -> 1383;
1915 -> 1381;
1915 -> 1415;
1915 -> 1484;
1915 -> 1914;
1915 -> 1493;
1915 -> 1409;
1915 -> 1410;
1915 -> 1900;
1915 -> 1417;
1915 -> 1414;
1916 -> 0;
1916 -> 1429;
1917 -> 1916;
1917 -> 1250;
1918 -> 1917;
1918 -> 1252;
1918 -> 1250;
1919 -> 0;
1919 -> 1448;
1920 -> 1919;
1920 -> 1288;
1921 -> 1920;
1921 -> 1290;
1921 -> 1288;
1922 -> 1286;
1922 -> 1318;
1922 -> 1444;
1922 -> 1921;
1922 -> 1453;
1922 -> 1314;
1922 -> 1315;
1922 -> 1907;
1922 -> 1325;
1922 -> 1317;
1923 -> 0;
1923 -> 1468;
1924 -> 1923;
1924 -> 1337;
1925 -> 1924;
1925 -> 1339;
1925 -> 1337;
1926 -> 1335;
1926 -> 1369;
1926 -> 1464;
1926 -> 1925;
1926 -> 1473;
1926 -> 1363;
1926 -> 1364;
1926 -> 1911;
1926 -> 1371;
1926 -> 1368;
1927 -> 0;
1927 -> 1488;
1928 -> 1927;
1928 -> 1383;
1929 -> 1928;
1929 -> 1385;
1929 -> 1383;
1930 -> 1381;
1930 -> 1415;
1930 -> 1484;
1930 -> 1929;
1930 -> 1493;
1930 -> 1409;
1930 -> 1410;
1930 -> 1915;
1930 -> 1417;
1930 -> 1414;
1931 -> 1429;
1932 -> 1931;
1932 -> 1250;
1933 -> 1932;
1933 -> 1252;
1933 -> 1250;
1934 -> 1448;
1935 -> 1934;
1935 -> 1288;
1936 -> 1935;
1936 -> 1290;
1936 -> 1288;
1937 -> 1286;
1937 -> 1318;
1937 -> 1444;
1937 -> 1936;
1937 -> 1453;
1937 -> 1314;
1937 -> 1315;
1937 -> 1922;
1937 -> 1325;
1937 -> 1317;
1938 -> 1468;
1939 -> 1938;
1939 -> 1337;
1940 -> 1939;
1940 -> 1339;
1940 -> 1337;
1941 -> 1335;
1941 -> 1369;
1941 -> 1464;
1941 -> 1940;
1941 -> 1473;
1941 -> 1363;
1941 -> 1364;
1941 -> 1926;
1941 -> 1371;
1941 -> 1368;
1942 -> 1488;
1943 -> 1942;
1943 -> 1383;
1944 -> 1943;
1944 -> 1385;
1944 -> 1383;
1945 -> 1381;
1945 -> 1415;
1945 -> 1484;
1945 -> 1944;
1945 -> 1493;
1945 -> 1409;
1945 -> 1410;
1945 -> 1930;
1945 -> 1417;
1945 -> 1414;
1946 -> 1429;
1947 -> 1946;
1947 -> 1250;
1948 -> 1947;
1948 -> 1252;
1948 -> 1250;
1949 -> 1448;
1950 -> 1949;
1950 -> 1288;
1951 -> 1950;
1951 -> 1290;
1951 -> 1288;
1952 -> 1286;
1952 -> 1318;
1952 -> 1444;
1952 -> 1951;
1952 -> 1453;
1952 -> 1314;
1952 -> 1315;
1952 -> 1937;
1952 -> 1325;
1952 -> 1317;
1953 -> 1468;
1954 -> 1953;
1954 -> 1337;
1955 -> 1954;
1955 -> 1339;
1955 -> 1337;
1956 -> 1335;
1956 -> 1369;
1956 -> 1464;
1956 -> 1955;
1956 -> 1473;
1956 -> 1363;
1956 -> 1364;
1956 -> 1941;
1956 -> 1371;
1956 -> 1368;
1957 -> 1488;
1958 -> 1957;
1958 -> 1383;
1959 -> 1958;
1959 -> 1385;
1959 -> 1383;
1960 -> 1381;
1960 -> 1415;
1960 -> 1484;
1960 -> 1959;
1960 -> 1493;
1960 -> 1409;
1960 -> 1410;
1960 -> 1945;
1960 -> 1417;
1960 -> 1414;
1961 -> 1429;
1962 -> 1961;
1962 -> 1250;
1963 -> 1962;
1963 -> 1252;
1963 -> 1250;
1964 -> 1448;
1965 -> 1964;
1965 -> 1288;
1966 -> 1965;
1966 -> 1290;
1966 -> 1288;
1967 -> 1286;
1967 -> 1318;
1967 -> 1444;
1967 -> 1966;
1967 -> 1453;
1967 -> 1314;
1967 -> 1315;
1967 -> 1952;
1967 -> 1325;
1967 -> 1317;
1968 -> 1468;
1969 -> 1968;
1969 -> 1337;
1970 -> 1969;
1970 -> 1339;
1970 -> 1337;
1971 -> 1335;
1971 -> 1369;
1971 -> 1464;
1971 -> 1970;
1971 -> 1473;
1971 -> 1363;
1971 -> 1364;
1971 -> 1956;
1971 -> 1371;
1971 -> 1368;
1972 -> 1488;
1973 -> 1972;
1973 -> 1383;
1974 -> 1973;
1974 -> 1385;
1974 -> 1383;
1975 -> 1381;
1975 -> 1415;
1975 -> 1484;
1975 -> 1974;
1975 -> 1493;
1975 -> 1409;
1975 -> 1410;
1975 -> 1960;
1975 -> 1417;
1975 -> 1414;
1976 -> 1429;
1977 -> 1976;
1977 -> 1250;
1978 -> 1977;
1978 -> 1252;
1978 -> 1250;
1979 -> 1448;
1980 -> 1979;
1980 -> 1288;
1981 -> 1980;
1981 -> 1290;
1981 -> 1288;
1982 -> 1286;
1982 -> 1318;
1982 -> 1444;
1982 -> 1981;
1982 -> 1453;
1982 -> 1314;
1982 -> 1315;
1982 -> 1967;
1982 -> 1325;
1982 -> 1317;
1983 -> 1468;
1984 -> 1983;
1984 -> 1337;
1985 -> 1984;
1985 -> 1339;
1985 -> 1337;
1986 -> 1335;
1986 -> 1369;
1986 -> 1464;
1986 -> 1985;
1986 -> 1473;
1986 -> 1363;
1986 -> 1364;
1986 -> 1971;
1986 -> 1371;
1986 -> 1368;
1987 -> 1488;
1988 -> 1987;
1988 -> 1383;
1989 -> 1988;
1989 -> 1385;
1989 -> 1383;
1990 -> 1381;
1990 -> 1415;
1990 -> 1484;
1990 -> 1989;
1990 -> 1493;
1990 -> 1409;
1990 -> 1410;
1990 -> 1975;
1990 -> 1417;
1990 -> 1414;
1991 -> 1429;
1992 -> 1991;
1992 -> 1250;
1993 -> 1992;
1993 -> 1252;
1993 -> 1250;
1994 -> 1448;
1995 -> 1994;
1995 -> 1288;
1996 -> 1995;
1996 -> 1290;
1996 -> 1288;
1997 -> 1286;
1997 -> 1318;
1997 -> 1444;
1997 -> 1996;
1997 -> 1453;
1997 -> 1314;
1997 -> 1315;
1997 -> 1982;
1997 -> 1325;
1997 -> 1317;
1998 -> 1468;
1999 -> 1998;
1999 -> 1337;
2000 -> 1999;
2000 -> 1339;
2000 -> 1337;
2001 -> 1335;
2001 -> 1369;
2001 -> 1464;
2001 -> 2000;
2001 -> 1473;
2001 -> 1363;
2001 -> 1364;
2001 -> 1986;
2001 -> 1371;
2001 -> 1368;
2002 -> 1488;
2003 -> 2002;
2003 -> 1383;
2004 -> 2003;
2004 -> 1385;
2004 -> 1383;
2005 -> 1381;
2005 -> 1415;
2005 -> 1484;
2005 -> 2004;
2005 -> 1493;
2005 -> 1409;
2005 -> 1410;
2005 -> 1990;
2005 -> 1417;
2005 -> 1414;
2006 -> 1429;
2007 -> 2006;
2007 -> 1250;
2008 -> 2007;
2008 -> 1252;
2008 -> 1250;
2009 -> 1448;
2010 -> 2009;
2010 -> 1288;
2011 -> 2010;
2011 -> 1290;
2011 -> 1288;
2012 -> 1286;
2012 -> 1318;
2012 -> 1444;
2012 -> 2011;
2012 -> 1453;
2012 -> 1314;
2012 -> 1315;
2012 -> 1997;
2012 -> 1325;
2012 -> 1317;
2013 -> 1468;
2014 -> 2013;
2014 -> 1337;
2015 -> 2014;
2015 -> 1339;
2015 -> 1337;
2016 -> 1335;
2016 -> 1369;
2016 -> 1464;
2016 -> 2015;
2016 -> 1473;
2016 -> 1363;
2016 -> 1364;
2016 -> 2001;
2016 -> 1371;
2016 -> 1368;
2017 -> 1488;
2018 -> 2017;
2018 -> 1383;
2019 -> 2018;
2019 -> 1385;
2019 -> 1383;
2020 -> 1381;
2020 -> 1415;
2020 -> 1484;
2020 -> 2019;
2020 -> 1493;
2020 -> 1409;
2020 -> 1410;
2020 -> 2005;
2020 -> 1417;
2020 -> 1414;
2021 -> 1429;
2022 -> 2021;
2022 -> 1250;
2023 -> 2022;
2023 -> 1252;
2023 -> 1250;
2024 -> 1448;
2025 -> 2024;
2025 -> 1288;
2026 -> 2025;
2026 -> 1290;
2026 -> 1288;
2027 -> 1286;
2027 -> 1318;
2027 -> 1444;
2027 -> 2026;
2027 -> 1453;
2027 -> 1314;
2027 -> 1315;
2027 -> 2012;
2027 -> 1325;
2027 -> 1317;
2028 -> 1468;
2029 -> 2028;
2029 -> 1337;
2030 -> 2029;
2030 -> 1339;
2030 -> 1337;
2031 -> 1335;
2031 -> 1369;
2031 -> 1464;
2031 -> 2030;
2031 -> 1473;
2031 -> 1363;
2031 -> 1364;
2031 -> 2016;
2031 -> 1371;
2031 -> 1368;
2032 -> 1488;
2033 -> 2032;
2033 -> 1383;
2034 -> 2033;
2034 -> 1385;
2034 -> 1383;
2035 -> 1381;
2035 -> 1415;
2035 -> 1484;
2035 -> 2034;
2035 -> 1493;
2035 -> 1409;
2035 -> 1410;
2035 -> 2020;
2035 -> 1417;
2035 -> 1414;
2036 -> 1429;
2037 -> 2036;
2037 -> 1250;
2038 -> 2037;
2038 -> 1252;
2038 -> 1250;
2039 -> 1448;
2040 -> 2039;
2040 -> 1288;
2041 -> 2040;
2041 -> 1290;
2041 -> 1288;
2042 -> 1286;
2042 -> 1318;
2042 -> 1444;
2042 -> 2041;
2042 -> 1453;
2042 -> 1314;
2042 -> 1315;
2042 -> 2027;
2042 -> 1325;
2042 -> 1317;
2043 -> 1468;
2044 -> 2043;
2044 -> 1337;
2045 -> 2044;
2045 -> 1339;
2045 -> 1337;
2046 -> 1335;
2046 -> 1369;
2046 -> 1464;
2046 -> 2045;
2046 -> 1473;
2046 -> 1363;
2046 -> 1364;
2046 -> 2031;
2046 -> 1371;
2046 -> 1368;
2047 -> 1488;
2048 -> 2047;
2048 -> 1383;
2049 -> 2048;
2049 -> 1385;
2049 -> 1383;
2050 -> 1381;
2050 -> 1415;
2050 -> 1484;
2050 -> 2049;
2050 -> 1493;
2050 -> 1409;
2050 -> 1410;
2050 -> 2035;
2050 -> 1417;
2050 -> 1414;
2051 -> 1429;
2052 -> 2051;
2052 -> 1250;
2053 -> 2052;
2053 -> 1252;
2053 -> 1250;
2054 -> 1448;
2055 -> 2054;
2055 -> 1288;
2056 -> 2055;
2056 -> 1290;
2056 -> 1288;
2057 -> 1286;
2057 -> 1318;
2057 -> 1444;
2057 -> 2056;
2057 -> 1453;
2057 -> 1314;
2057 -> 1315;
2057 -> 2042;
2057 -> 1325;
2057 -> 1317;
2058 -> 1468;
2059 -> 2058;
2059 -> 1337;
2060 -> 2059;
2060 -> 1339;
2060 -> 1337;
2061 -> 1335;
2061 -> 1369;
2061 -> 1464;
2061 -> 2060;
2061 -> 1473;
2061 -> 1363;
2061 -> 1364;
2061 -> 2046;
2061 -> 1371;
2061 -> 1368;
2062 -> 1488;
2063 -> 2062;
2063 -> 1383;
2064 -> 2063;
2064 -> 1385;
2064 -> 1383;
2065 -> 1381;
2065 -> 1415;
2065 -> 1484;
2065 -> 2064;
2065 -> 1493;
2065 -> 1409;
2065 -> 1410;
2065 -> 2050;
2065 -> 1417;
2065 -> 1414;
2066 -> 1429;
2067 -> 2066;
2067 -> 1250;
2068 -> 2067;
2068 -> 1252;
2068 -> 1250;
2069 -> 1448;
2070 -> 2069;
2070 -> 1288;
2071 -> 2070;
2071 -> 1290;
2071 -> 1288;
2072 -> 1286;
2072 -> 1318;
2072 -> 1444;
2072 -> 2071;
2072 -> 1453;
2072 -> 1314;
2072 -> 1315;
2072 -> 2057;
2072 -> 1325;
2072 -> 1317;
2073 -> 1468;
2074 -> 2073;
2074 -> 1337;
2075 -> 2074;
2075 -> 1339;
2075 -> 1337;
2076 -> 1335;
2076 -> 1369;
2076 -> 1464;
2076 -> 2075;
2076 -> 1473;
2076 -> 1363;
2076 -> 1364;
2076 -> 2061;
2076 -> 1371;
2076 -> 1368;
2077 -> 1488;
2078 -> 2077;
2078 -> 1383;
2079 -> 2078;
2079 -> 1385;
2079 -> 1383;
2080 -> 1381;
2080 -> 1415;
2080 -> 1484;
2080 -> 2079;
2080 -> 1493;
2080 -> 1409;
2080 -> 1410;
2080 -> 2065;
2080 -> 1417;
2080 -> 1414;
2081 -> 1429;
2082 -> 2081;
2082 -> 1250;
2083 -> 2082;
2083 -> 1252;
2083 -> 1250;
2084 -> 1448;
2085 -> 2084;
2085 -> 1288;
2086 -> 2085;
2086 -> 1290;
2086 -> 1288;
2087 -> 1286;
2087 -> 1318;
2087 -> 1444;
2087 -> 2086;
2087 -> 1453;
2087 -> 1314;
2087 -> 1315;
2087 -> 2072;
2087 -> 1325;
2087 -> 1317;
2088 -> 1468;
2089 -> 2088;
2089 -> 1337;
2090 -> 2089;
2090 -> 1339;
2090 -> 1337;
2091 -> 1335;
2091 -> 1369;
2091 -> 1464;
2091 -> 2090;
2091 -> 1473;
2091 -> 1363;
2091 -> 1364;
2091 -> 2076;
2091 -> 1371;
2091 -> 1368;
2092 -> 1488;
2093 -> 2092;
2093 -> 1383;
2094 -> 2093;
2094 -> 1385;
2094 -> 1383;
2095 -> 1381;
2095 -> 1415;
2095 -> 1484;
2095 -> 2094;
2095 -> 1493;
2095 -> 1409;
2095 -> 1410;
2095 -> 2080;
2095 -> 1417;
2095 -> 1414;
2096 -> 1429;
2097 -> 2096;
2097 -> 1250;
2098 -> 2097;
2098 -> 1252;
2098 -> 1250;
2099 -> 1448;
2100 -> 2099;
2100 -> 1288;
2101 -> 2100;
2101 -> 1290;
2101 -> 1288;
2102 -> 1286;
2102 -> 1318;
2102 -> 1444;
2102 -> 2101;
2102 -> 1453;
2102 -> 1314;
2102 -> 1315;
2102 -> 2087;
2102 -> 1325;
2102 -> 1317;
2103 -> 1468;
2104 -> 2103;
2104 -> 1337;
2105 -> 2104;
2105 -> 1339;
2105 -> 1337;
2106 -> 1335;
2106 -> 1369;
2106 -> 1464;
2106 -> 2105;
2106 -> 1473;
2106 -> 1363;
2106 -> 1364;
2106 -> 2091;
2106 -> 1371;
2106 -> 1368;
2107 -> 1488;
2108 -> 2107;
2108 -> 1383;
2109 -> 2108;
2109 -> 1385;
2109 -> 1383;
2110 -> 1381;
2110 -> 1415;
2110 -> 1484;
2110 -> 2109;
2110 -> 1493;
2110 -> 1409;
2110 -> 1410;
2110 -> 2095;
2110 -> 1417;
2110 -> 1414;
2111 -> 1429;
2112 -> 2111;
2112 -> 1250;
2113 -> 2112;
2113 -> 1252;
2113 -> 1250;
2114 -> 1448;
2115 -> 2114;
2115 -> 1288;
2116 -> 2115;
2116 -> 1290;
2116 -> 1288;
2117 -> 1286;
2117 -> 1318;
2117 -> 1444;
2117 -> 2116;
2117 -> 1453;
2117 -> 1314;
2117 -> 1315;
2117 -> 2102;
2117 -> 1325;
2117 -> 1317;
2118 -> 1468;
2119 -> 2118;
2119 -> 1337;
2120 -> 2119;
2120 -> 1339;
2120 -> 1337;
2121 -> 1335;
2121 -> 1369;
2121 -> 1464;
2121 -> 2120;
2121 -> 1473;
2121 -> 1363;
2121 -> 1364;
2121 -> 2106;
2121 -> 1371;
2121 -> 1368;
2122 -> 1488;
2123 -> 2122;
2123 -> 1383;
2124 -> 2123;
2124 -> 1385;
2124 -> 1383;
2125 -> 1381;
2125 -> 1415;
2125 -> 1484;
2125 -> 2124;
2125 -> 1493;
2125 -> 1409;
2125 -> 1410;
2125 -> 2110;
2125 -> 1417;
2125 -> 1414;
2126 -> 1429;
2127 -> 2126;
2127 -> 1250;
2128 -> 2127;
2128 -> 1252;
2128 -> 1250;
2129 -> 1448;
2130 -> 2129;
2130 -> 1288;
2131 -> 2130;
2131 -> 1290;
2131 -> 1288;
2132 -> 1286;
2132 -> 1318;
2132 -> 1444;
2132 -> 2131;
2132 -> 1453;
2132 -> 1314;
2132 -> 1315;
2132 -> 2117;
2132 -> 1325;
2132 -> 1317;
2133 -> 1468;
2134 -> 2133;
2134 -> 1337;
2135 -> 2134;
2135 -> 1339;
2135 -> 1337;
2136 -> 1335;
2136 -> 1369;
2136 -> 1464;
2136 -> 2135;
2136 -> 1473;
2136 -> 1363;
2136 -> 1364;
2136 -> 2121;
2136 -> 1371;
2136 -> 1368;
2137 -> 1488;
2138 -> 2137;
2138 -> 1383;
2139 -> 2138;
2139 -> 1385;
2139 -> 1383;
2140 -> 1381;
2140 -> 1415;
2140 -> 1484;
2140 -> 2139;
2140 -> 1493;
2140 -> 1409;
2140 -> 1410;
2140 -> 2125;
2140 -> 1417;
2140 -> 1414;
2141 -> 1429;
2142 -> 2141;
2142 -> 1250;
2143 -> 2142;
2143 -> 1252;
2143 -> 1250;
2144 -> 1448;
2145 -> 2144;
2145 -> 1288;
2146 -> 2145;
2146 -> 1290;
2146 -> 1288;
2147 -> 1286;
2147 -> 1318;
2147 -> 1444;
2147 -> 2146;
2147 -> 1453;
2147 -> 1314;
2147 -> 1315;
2147 -> 2132;
2147 -> 1325;
2147 -> 1317;
2148 -> 1468;
2149 -> 2148;
2149 -> 1337;
2150 -> 2149;
2150 -> 1339;
2150 -> 1337;
2151 -> 1335;
2151 -> 1369;
2151 -> 1464;
2151 -> 2150;
2151 -> 1473;
2151 -> 1363;
2151 -> 1364;
2151 -> 2136;
2151 -> 1371;
2151 -> 1368;
2152 -> 1488;
2153 -> 2152;
2153 -> 1383;
2154 -> 2153;
2154 -> 1385;
2154 -> 1383;
2155 -> 1381;
2155 -> 1415;
2155 -> 1484;
2155 -> 2154;
2155 -> 1493;
2155 -> 1409;
2155 -> 1410;
2155 -> 2140;
2155 -> 1417;
2155 -> 1414;
2156 -> 1429;
2157 -> 2156;
2157 -> 1250;
2158 -> 2157;
2158 -> 1252;
2158 -> 1250;
2159 -> 1448;
2160 -> 2159;
2160 -> 1288;
2161 -> 2160;
2161 -> 1290;
2161 -> 1288;
2162 -> 1286;
2162 -> 1318;
2162 -> 1444;
2162 -> 2161;
2162 -> 1453;
2162 -> 1314;
2162 -> 1315;
2162 -> 2147;
2162 -> 1325;
2162 -> 1317;
2163 -> 1468;
2164 -> 2163;
2164 -> 1337;
2165 -> 2164;
2165 -> 1339;
2165 -> 1337;
2166 -> 1335;
2166 -> 1369;
2166 -> 1464;
2166 -> 2165;
2166 -> 1473;
2166 -> 1363;
2166 -> 1364;
2166 -> 2151;
2166 -> 1371;
2166 -> 1368;
2167 -> 1488;
2168 -> 2167;
2168 -> 1383;
2169 -> 2168;
2169 -> 1385;
2169 -> 1383;
2170 -> 1381;
2170 -> 1415;
2170 -> 1484;
2170 -> 2169;
2170 -> 1493;
2170 -> 1409;
2170 -> 1410;
2170 -> 2155;
2170 -> 1417;
2170 -> 1414;
2171 -> 1429;
2172 -> 2171;
2172 -> 1250;
2173 -> 2172;
2173 -> 1252;
2173 -> 1250;
2174 -> 1448;
2175 -> 2174;
2175 -> 1288;
2176 -> 2175;
2176 -> 1290;
2176 -> 1288;
2177 -> 1286;
2177 -> 1318;
2177 -> 1444;
2177 -> 2176;
2177 -> 1453;
2177 -> 1314;
2177 -> 1315;
2177 -> 2162;
2177 -> 1325;
2177 -> 1317;
2178 -> 1468;
2179 -> 2178;
2179 -> 1337;
2180 -> 2179;
2180 -> 1339;
2180 -> 1337;
2181 -> 1335;
2181 -> 1369;
2181 -> 1464;
2181 -> 2180;
2181 -> 1473;
2181 -> 1363;
2181 -> 1364;
2181 -> 2166;
2181 -> 1371;
2181 -> 1368;
2182 -> 1488;
2183 -> 2182;
2183 -> 1383;
2184 -> 2183;
2184 -> 1385;
2184 -> 1383;
2185 -> 1381;
2185 -> 1415;
2185 -> 1484;
2185 -> 2184;
2185 -> 1493;
2185 -> 1409;
2185 -> 1410;
2185 -> 2170;
2185 -> 1417;
2185 -> 1414;
2186 -> 1429;
2187 -> 2186;
2187 -> 1250;
2188 -> 2187;
2188 -> 1252;
2188 -> 1250;
2189 -> 1448;
2190 -> 2189;
2190 -> 1288;
2191 -> 2190;
2191 -> 1290;
2191 -> 1288;
2192 -> 1286;
2192 -> 1318;
2192 -> 1444;
2192 -> 2191;
2192 -> 1453;
2192 -> 1314;
2192 -> 1315;
2192 -> 2177;
2192 -> 1325;
2192 -> 1317;
2193 -> 1468;
2194 -> 2193;
2194 -> 1337;
2195 -> 2194;
2195 -> 1339;
2195 -> 1337;
2196 -> 1335;
2196 -> 1369;
2196 -> 1464;
2196 -> 2195;
2196 -> 1473;
2196 -> 1363;
2196 -> 1364;
2196 -> 2181;
2196 -> 1371;
2196 -> 1368;
2197 -> 1488;
2198 -> 2197;
2198 -> 1383;
2199 -> 2198;
2199 -> 1385;
2199 -> 1383;
2200 -> 1381;
2200 -> 1415;
2200 -> 1484;
2200 -> 2199;
2200 -> 1493;
2200 -> 1409;
2200 -> 1410;
2200 -> 2185;
2200 -> 1417;
2200 -> 1414;
2201 -> 1429;
2202 -> 2201;
2202 -> 1250;
2203 -> 2202;
2203 -> 1252;
2203 -> 1250;
2204 -> 1448;
2205 -> 2204;
2205 -> 1288;
2206 -> 2205;
2206 -> 1290;
2206 -> 1288;
2207 -> 1286;
2207 -> 1318;
2207 -> 1444;
2207 -> 2206;
2207 -> 1453;
2207 -> 1314;
2207 -> 1315;
2207 -> 2192;
2207 -> 1325;
2207 -> 1317;
2208 -> 1468;
2209 -> 2208;
2209 -> 1337;
2210 -> 2209;
2210 -> 1339;
2210 -> 1337;
2211 -> 1335;
2211 -> 1369;
2211 -> 1464;
2211 -> 2210;
2211 -> 1473;
2211 -> 1363;
2211 -> 1364;
2211 -> 2196;
2211 -> 1371;
2211 -> 1368;
2212 -> 1488;
2213 -> 2212;
2213 -> 1383;
2214 -> 2213;
2214 -> 1385;
2214 -> 1383;
2215 -> 1381;
2215 -> 1415;
2215 -> 1484;
2215 -> 2214;
2215 -> 1493;
2215 -> 1409;
2215 -> 1410;
2215 -> 2200;
2215 -> 1417;
2215 -> 1414;
2216 -> 1429;
2217 -> 2216;
2217 -> 1250;
2218 -> 2217;
2218 -> 1252;
2218 -> 1250;
2219 -> 1448;
2220 -> 2219;
2220 -> 1288;
2221 -> 2220;
2221 -> 1290;
2221 -> 1288;
2222 -> 1286;
2222 -> 1318;
2222 -> 1444;
2222 -> 2221;
2222 -> 1453;
2222 -> 1314;
2222 -> 1315;
2222 -> 2207;
2222 -> 1325;
2222 -> 1317;
2223 -> 1468;
2224 -> 2223;
2224 -> 1337;
2225 -> 2224;
2225 -> 1339;
2225 -> 1337;
2226 -> 1335;
2226 -> 1369;
2226 -> 1464;
2226 -> 2225;
2226 -> 1473;
2226 -> 1363;
2226 -> 1364;
2226 -> 2211;
2226 -> 1371;
2226 -> 1368;
2227 -> 1488;
2228 -> 2227;
2228 -> 1383;
2229 -> 2228;
2229 -> 1385;
2229 -> 1383;
2230 -> 1381;
2230 -> 1415;
2230 -> 1484;
2230 -> 2229;
2230 -> 1493;
2230 -> 1409;
2230 -> 1410;
2230 -> 2215;
2230 -> 1417;
2230 -> 1414;
2231 -> 1429;
2232 -> 2231;
2232 -> 1250;
2233 -> 2232;
2233 -> 1252;
2233 -> 1250;
2234 -> 1448;
2235 -> 2234;
2235 -> 1288;
2236 -> 2235;
2236 -> 1290;
2236 -> 1288;
2237 -> 1286;
2237 -> 1318;
2237 -> 1444;
2237 -> 2236;
2237 -> 1453;
2237 -> 1314;
2237 -> 1315;
2237 -> 2222;
2237 -> 1325;
2237 -> 1317;
2238 -> 1468;
2239 -> 2238;
2239 -> 1337;
2240 -> 2239;
2240 -> 1339;
2240 -> 1337;
2241 -> 1335;
2241 -> 1369;
2241 -> 1464;
2241 -> 2240;
2241 -> 1473;
2241 -> 1363;
2241 -> 1364;
2241 -> 2226;
2241 -> 1371;
2241 -> 1368;
2242 -> 1488;
2243 -> 2242;
2243 -> 1383;
2244 -> 2243;
2244 -> 1385;
2244 -> 1383;
2245 -> 1381;
2245 -> 1415;
2245 -> 1484;
2245 -> 2244;
2245 -> 1493;
2245 -> 1409;
2245 -> 1410;
2245 -> 2230;
2245 -> 1417;
2245 -> 1414;
2246 -> 1429;
2247 -> 2246;
2247 -> 1250;
2248 -> 2247;
2248 -> 1252;
2248 -> 1250;
2249 -> 1448;
2250 -> 2249;
2250 -> 1288;
2251 -> 2250;
2251 -> 1290;
2251 -> 1288;
2252 -> 1286;
2252 -> 1318;
2252 -> 1444;
2252 -> 2251;
2252 -> 1453;
2252 -> 1314;
2252 -> 1315;
2252 -> 2237;
2252 -> 1325;
2252 -> 1317;
2253 -> 1468;
2254 -> 2253;
2254 -> 1337;
2255 -> 2254;
2255 -> 1339;
2255 -> 1337;
2256 -> 1335;
2256 -> 1369;
2256 -> 1464;
2256 -> 2255;
2256 -> 1473;
2256 -> 1363;
2256 -> 1364;
2256 -> 2241;
2256 -> 1371;
2256 -> 1368;
2257 -> 1488;
2258 -> 2257;
2258 -> 1383;
2259 -> 2258;
2259 -> 1385;
2259 -> 1383;
2260 -> 1381;
2260 -> 1415;
2260 -> 1484;
2260 -> 2259;
2260 -> 1493;
2260 -> 1409;
2260 -> 1410;
2260 -> 2245;
2260 -> 1417;
2260 -> 1414;
2261 -> 1429;
2262 -> 2261;
2262 -> 1250;
2263 -> 2262;
2263 -> 1252;
2263 -> 1250;
2264 -> 1448;
2265 -> 2264;
2265 -> 1288;
2266 -> 2265;
2266 -> 1290;
2266 -> 1288;
2267 -> 1286;
2267 -> 1318;
2267 -> 1444;
2267 -> 2266;
2267 -> 1453;
2267 -> 1314;
2267 -> 1315;
2267 -> 2252;
2267 -> 1325;
2267 -> 1317;
2268 -> 1468;
2269 -> 2268;
2269 -> 1337;
2270 -> 2269;
2270 -> 1339;
2270 -> 1337;
2271 -> 1335;
2271 -> 1369;
2271 -> 1464;
2271 -> 2270;
2271 -> 1473;
2271 -> 1363;
2271 -> 1364;
2271 -> 2256;
2271 -> 1371;
2271 -> 1368;
2272 -> 1488;
2273 -> 2272;
2273 -> 1383;
2274 -> 2273;
2274 -> 1385;
2274 -> 1383;
2275 -> 1381;
2275 -> 1415;
2275 -> 1484;
2275 -> 2274;
2275 -> 1493;
2275 -> 1409;
2275 -> 1410;
2275 -> 2260;
2275 -> 1417;
2275 -> 1414;
2276 -> 1429;
2277 -> 2276;
2277 -> 1250;
2278 -> 2277;
2278 -> 1252;
2278 -> 1250;
2279 -> 1448;
2280 -> 2279;
2280 -> 1288;
2281 -> 2280;
2281 -> 1290;
2281 -> 1288;
2282 -> 1286;
2282 -> 1318;
2282 -> 1444;
2282 -> 2281;
2282 -> 1453;
2282 -> 1314;
2282 -> 1315;
2282 -> 2267;
2282 -> 1325;
2282 -> 1317;
2283 -> 1468;
2284 -> 2283;
2284 -> 1337;
2285 -> 2284;
2285 -> 1339;
2285 -> 1337;
2286 -> 1335;
2286 -> 1369;
2286 -> 1464;
2286 -> 2285;
2286 -> 1473;
2286 -> 1363;
2286 -> 1364;
2286 -> 2271;
2286 -> 1371;
2286 -> 1368;
2287 -> 1488;
2288 -> 2287;
2288 -> 1383;
2289 -> 2288;
2289 -> 1385;
2289 -> 1383;
2290 -> 1381;
2290 -> 1415;
2290 -> 1484;
2290 -> 2289;
2290 -> 1493;
2290 -> 1409;
2290 -> 1410;
2290 -> 2275;
2290 -> 1417;
2290 -> 1414;
2291 -> 1429;
2292 -> 2291;
2292 -> 1250;
2293 -> 2292;
2293 -> 1252;
2293 -> 1250;
2294 -> 1448;
2295 -> 2294;
2295 -> 1288;
2296 -> 2295;
2296 -> 1290;
2296 -> 1288;
2297 -> 1286;
2297 -> 1318;
2297 -> 1444;
2297 -> 2296;
2297 -> 1453;
2297 -> 1314;
2297 -> 1315;
2297 -> 2282;
2297 -> 1325;
2297 -> 1317;
2298 -> 1468;
2299 -> 2298;
2299 -> 1337;
2300 -> 2299;
2300 -> 1339;
2300 -> 1337;
2301 -> 1335;
2301 -> 1369;
2301 -> 1464;
2301 -> 2300;
2301 -> 1473;
2301 -> 1363;
2301 -> 1364;
2301 -> 2286;
2301 -> 1371;
2301 -> 1368;
2302 -> 1488;
2303 -> 2302;
2303 -> 1383;
2304 -> 2303;
2304 -> 1385;
2304 -> 1383;
2305 -> 1381;
2305 -> 1415;
2305 -> 1484;
2305 -> 2304;
2305 -> 1493;
2305 -> 1409;
2305 -> 1410;
2305 -> 2290;
2305 -> 1417;
2305 -> 1414;
2306 -> 1429;
2307 -> 2306;
2307 -> 1250;
2308 -> 2307;
2308 -> 1252;
2308 -> 1250;
2309 -> 1448;
2310 -> 2309;
2310 -> 1288;
2311 -> 2310;
2311 -> 1290;
2311 -> 1288;
2312 -> 1286;
2312 -> 1318;
2312 -> 1444;
2312 -> 2311;
2312 -> 1453;
2312 -> 1314;
2312 -> 1315;
2312 -> 2297;
2312 -> 1325;
2312 -> 1317;
2313 -> 1468;
2314 -> 2313;
2314 -> 1337;
2315 -> 2314;
2315 -> 1339;
2315 -> 1337;
2316 -> 1335;
2316 -> 1369;
2316 -> 1464;
2316 -> 2315;
2316 -> 1473;
2316 -> 1363;
2316 -> 1364;
2316 -> 2301;
2316 -> 1371;
2316 -> 1368;
2317 -> 1488;
2318 -> 2317;
2318 -> 1383;
2319 -> 2318;
2319 -> 1385;
2319 -> 1383;
2320 -> 1381;
2320 -> 1415;
2320 -> 1484;
2320 -> 2319;
2320 -> 1493;
2320 -> 1409;
2320 -> 1410;
2320 -> 2305;
2320 -> 1417;
2320 -> 1414;
2321 -> 1429;
2322 -> 2321;
2322 -> 1250;
2323 -> 2322;
2323 -> 1252;
2323 -> 1250;
2324 -> 1448;
2325 -> 2324;
2325 -> 1288;
2326 -> 2325;
2326 -> 1290;
2326 -> 1288;
2327 -> 1286;
2327 -> 1318;
2327 -> 1444;
2327 -> 2326;
2327 -> 1453;
2327 -> 1314;
2327 -> 1315;
2327 -> 2312;
2327 -> 1325;
2327 -> 1317;
2328 -> 1468;
2329 -> 2328;
2329 -> 1337;
2330 -> 2329;
2330 -> 1339;
2330 -> 1337;
2331 -> 1335;
2331 -> 1369;
2331 -> 1464;
2331 -> 2330;
2331 -> 1473;
2331 -> 1363;
2331 -> 1364;
2331 -> 2316;
2331 -> 1371;
2331 -> 1368;
2332 -> 1488;
2333 -> 2332;
2333 -> 1383;
2334 -> 2333;
2334 -> 1385;
2334 -> 1383;
2335 -> 1381;
2335 -> 1415;
2335 -> 1484;
2335 -> 2334;
2335 -> 1493;
2335 -> 1409;
2335 -> 1410;
2335 -> 2320;
2335 -> 1417;
2335 -> 1414;
2336 -> 1429;
2337 -> 2336;
2337 -> 1250;
2338 -> 2337;
2338 -> 1252;
2338 -> 1250;
2339 -> 1448;
2340 -> 2339;
2340 -> 1288;
2341 -> 2340;
2341 -> 1290;
2341 -> 1288;
2342 -> 1286;
2342 -> 1318;
2342 -> 1444;
2342 -> 2341;
2342 -> 1453;
2342 -> 1314;
2342 -> 1315;
2342 -> 2327;
2342 -> 1325;
2342 -> 1317;
2343 -> 1468;
2344 -> 2343;
2344 -> 1337;
2345 -> 2344;
2345 -> 1339;
2345 -> 1337;
2346 -> 1335;
2346 -> 1369;
2346 -> 1464;
2346 -> 2345;
2346 -> 1473;
2346 -> 1363;
2346 -> 1364;
2346 -> 2331;
2346 -> 1371;
2346 -> 1368;
2347 -> 1488;
2348 -> 2347;
2348 -> 1383;
2349 -> 2348;
2349 -> 1385;
2349 -> 1383;
2350 -> 1381;
2350 -> 1415;
2350 -> 1484;
2350 -> 2349;
2350 -> 1493;
2350 -> 1409;
2350 -> 1410;
2350 -> 2335;
2350 -> 1417;
2350 -> 1414;
2351 -> 1429;
2352 -> 2351;
2352 -> 1250;
2353 -> 2352;
2353 -> 1252;
2353 -> 1250;
2354 -> 1448;
2355 -> 2354;
2355 -> 1288;
2356 -> 2355;
2356 -> 1290;
2356 -> 1288;
2357 -> 1286;
2357 -> 1318;
2357 -> 1444;
2357 -> 2356;
2357 -> 1453;
2357 -> 1314;
2357 -> 1315;
2357 -> 2342;
2357 -> 1325;
2357 -> 1317;
2358 -> 1468;
2359 -> 2358;
2359 -> 1337;
2360 -> 2359;
2360 -> 1339;
2360 -> 1337;
2361 -> 1335;
2361 -> 1369;
2361 -> 1464;
2361 -> 2360;
2361 -> 1473;
2361 -> 1363;
2361 -> 1364;
2361 -> 2346;
2361 -> 1371;
2361 -> 1368;
2362 -> 1488;
2363 -> 2362;
2363 -> 1383;
2364 -> 2363;
2364 -> 1385;
2364 -> 1383;
2365 -> 1381;
2365 -> 1415;
2365 -> 1484;
2365 -> 2364;
2365 -> 1493;
2365 -> 1409;
2365 -> 1410;
2365 -> 2350;
2365 -> 1417;
2365 -> 1414;
2366 -> 1429;
2367 -> 2366;
2367 -> 1250;
2368 -> 2367;
2368 -> 1252;
2368 -> 1250;
2369 -> 1448;
2370 -> 2369;
2370 -> 1288;
2371 -> 2370;
2371 -> 1290;
2371 -> 1288;
2372 -> 1286;
2372 -> 1318;
2372 -> 1444;
2372 -> 2371;
2372 -> 1453;
2372 -> 1314;
2372 -> 1315;
2372 -> 2357;
2372 -> 1325;
2372 -> 1317;
2373 -> 1468;
2374 -> 2373;
2374 -> 1337;
2375 -> 2374;
2375 -> 1339;
2375 -> 1337;
2376 -> 1335;
2376 -> 1369;
2376 -> 1464;
2376 -> 2375;
2376 -> 1473;
2376 -> 1363;
2376 -> 1364;
2376 -> 2361;
2376 -> 1371;
2376 -> 1368;
2377 -> 1488;
2378 -> 2377;
2378 -> 1383;
2379 -> 2378;
2379 -> 1385;
2379 -> 1383;
2380 -> 1381;
2380 -> 1415;
2380 -> 1484;
2380 -> 2379;
2380 -> 1493;
2380 -> 1409;
2380 -> 1410;
2380 -> 2365;
2380 -> 1417;
2380 -> 1414;
2381 -> 1429;
2382 -> 2381;
2382 -> 1250;
2383 -> 2382;
2383 -> 1252;
2383 -> 1250;
2384 -> 1448;
2385 -> 2384;
2385 -> 1288;
2386 -> 2385;
2386 -> 1290;
2386 -> 1288;
2387 -> 1286;
2387 -> 1318;
2387 -> 1444;
2387 -> 2386;
2387 -> 1453;
2387 -> 1314;
2387 -> 1315;
2387 -> 2372;
2387 -> 1325;
2387 -> 1317;
2388 -> 1468;
2389 -> 2388;
2389 -> 1337;
2390 -> 2389;
2390 -> 1339;
2390 -> 1337;
2391 -> 1335;
2391 -> 1369;
2391 -> 1464;
2391 -> 2390;
2391 -> 1473;
2391 -> 1363;
2391 -> 1364;
2391 -> 2376;
2391 -> 1371;
2391 -> 1368;
2392 -> 1488;
2393 -> 2392;
2393 -> 1383;
2394 -> 2393;
2394 -> 1385;
2394 -> 1383;
2395 -> 1381;
2395 -> 1415;
2395 -> 1484;
2395 -> 2394;
2395 -> 1493;
2395 -> 1409;
2395 -> 1410;
2395 -> 2380;
2395 -> 1417;
2395 -> 1414;
2396 -> 1429;
2397 -> 2396;
2397 -> 1250;
2398 -> 2397;
2398 -> 1252;
2398 -> 1250;
2399 -> 1448;
2400 -> 2399;
2400 -> 1288;
2401 -> 2400;
2401 -> 1290;
2401 -> 1288;
2402 -> 1286;
2402 -> 1318;
2402 -> 1444;
2402 -> 2401;
2402 -> 1453;
2402 -> 1314;
2402 -> 1315;
2402 -> 2387;
2402 -> 1325;
2402 -> 1317;
2403 -> 1468;
2404 -> 2403;
2404 -> 1337;
2405 -> 2404;
2405 -> 1339;
2405 -> 1337;
2406 -> 1335;
2406 -> 1369;
2406 -> 1464;
2406 -> 2405;
2406 -> 1473;
2406 -> 1363;
2406 -> 1364;
2406 -> 2391;
2406 -> 1371;
2406 -> 1368;
2407 -> 1488;
2408 -> 2407;
2408 -> 1383;
2409 -> 2408;
2409 -> 1385;
2409 -> 1383;
2410 -> 1381;
2410 -> 1415;
2410 -> 1484;
2410 -> 2409;
2410 -> 1493;
2410 -> 1409;
2410 -> 1410;
2410 -> 2395;
2410 -> 1417;
2410 -> 1414;
2411 -> 1429;
2412 -> 2411;
2412 -> 1250;
2413 -> 2412;
2413 -> 1252;
2413 -> 1250;
2414 -> 1448;
2415 -> 2414;
2415 -> 1288;
2416 -> 2415;
2416 -> 1290;
2416 -> 1288;
2417 -> 1286;
2417 -> 1318;
2417 -> 1444;
2417 -> 2416;
2417 -> 1453;
2417 -> 1314;
2417 -> 1315;
2417 -> 2402;
2417 -> 1325;
2417 -> 1317;
2418 -> 1468;
2419 -> 2418;
2419 -> 1337;
2420 -> 2419;
2420 -> 1339;
2420 -> 1337;
2421 -> 1335;
2421 -> 1369;
2421 -> 1464;
2421 -> 2420;
2421 -> 1473;
2421 -> 1363;
2421 -> 1364;
2421 -> 2406;
2421 -> 1371;
2421 -> 1368;
2422 -> 1488;
2423 -> 2422;
2423 -> 1383;
2424 -> 2423;
2424 -> 1385;
2424 -> 1383;
2425 -> 1381;
2425 -> 1415;
2425 -> 1484;
2425 -> 2424;
2425 -> 1493;
2425 -> 1409;
2425 -> 1410;
2425 -> 2410;
2425 -> 1417;
2425 -> 1414;
2426 -> 1429;
2427 -> 2426;
2427 -> 1250;
2428 -> 2427;
2428 -> 1252;
2428 -> 1250;
2429 -> 1448;
2430 -> 2429;
2430 -> 1288;
2431 -> 2430;
2431 -> 1290;
2431 -> 1288;
2432 -> 1286;
2432 -> 1318;
2432 -> 1444;
2432 -> 2431;
2432 -> 1453;
2432 -> 1314;
2432 -> 1315;
2432 -> 2417;
2432 -> 1325;
2432 -> 1317;
2433 -> 1468;
2434 -> 2433;
2434 -> 1337;
2435 -> 2434;
2435 -> 1339;
2435 -> 1337;
2436 -> 1335;
2436 -> 1369;
2436 -> 1464;
2436 -> 2435;
2436 -> 1473;
2436 -> 1363;
2436 -> 1364;
2436 -> 2421;
2436 -> 1371;
2436 -> 1368;
2437 -> 1488;
2438 -> 2437;
2438 -> 1383;
2439 -> 2438;
2439 -> 1385;
2439 -> 1383;
2440 -> 1381;
2440 -> 1415;
2440 -> 1484;
2440 -> 2439;
2440 -> 1493;
2440 -> 1409;
2440 -> 1410;
2440 -> 2425;
2440 -> 1417;
2440 -> 1414;
2441 -> 1429;
2442 -> 2441;
2442 -> 1250;
2443 -> 2442;
2443 -> 1252;
2443 -> 1250;
2444 -> 1448;
2445 -> 2444;
2445 -> 1288;
2446 -> 2445;
2446 -> 1290;
2446 -> 1288;
2447 -> 1286;
2447 -> 1318;
2447 -> 1444;
2447 -> 2446;
2447 -> 1453;
2447 -> 1314;
2447 -> 1315;
2447 -> 2432;
2447 -> 1325;
2447 -> 1317;
2448 -> 1468;
2449 -> 2448;
2449 -> 1337;
2450 -> 2449;
2450 -> 1339;
2450 -> 1337;
2451 -> 1335;
2451 -> 1369;
2451 -> 1464;
2451 -> 2450;
2451 -> 1473;
2451 -> 1363;
2451 -> 1364;
2451 -> 2436;
2451 -> 1371;
2451 -> 1368;
2452 -> 1488;
2453 -> 2452;
2453 -> 1383;
2454 -> 2453;
2454 -> 1385;
2454 -> 1383;
2455 -> 1381;
2455 -> 1415;
2455 -> 1484;
2455 -> 2454;
2455 -> 1493;
2455 -> 1409;
2455 -> 1410;
2455 -> 2440;
2455 -> 1417;
2455 -> 1414;
2456 -> 1429;
2457 -> 2456;
2457 -> 1250;
2458 -> 2457;
2458 -> 1252;
2458 -> 1250;
2459 -> 1448;
2460 -> 2459;
2460 -> 1288;
2461 -> 2460;
2461 -> 1290;
2461 -> 1288;
2462 -> 1286;
2462 -> 1318;
2462 -> 1444;
2462 -> 2461;
2462 -> 1453;
2462 -> 1314;
2462 -> 1315;
2462 -> 2447;
2462 -> 1325;
2462 -> 1317;
2463 -> 1468;
2464 -> 2463;
2464 -> 1337;
2465 -> 2464;
2465 -> 1339;
2465 -> 1337;
2466 -> 1335;
2466 -> 1369;
2466 -> 1464;
2466 -> 2465;
2466 -> 1473;
2466 -> 1363;
2466 -> 1364;
2466 -> 2451;
2466 -> 1371;
2466 -> 1368;
2467 -> 1488;
2468 -> 2467;
2468 -> 1383;
2469 -> 2468;
2469 -> 1385;
2469 -> 1383;
2470 -> 1381;
2470 -> 1415;
2470 -> 1484;
2470 -> 2469;
2470 -> 1493;
2470 -> 1409;
2470 -> 1410;
2470 -> 2455;
2470 -> 1417;
2470 -> 1414;
2471 -> 1429;
2472 -> 2471;
2472 -> 1250;
2473 -> 2472;
2473 -> 1252;
2473 -> 1250;
2474 -> 1448;
2475 -> 2474;
2475 -> 1288;
2476 -> 2475;
2476 -> 1290;
2476 -> 1288;
2477 -> 1286;
2477 -> 1318;
2477 -> 1444;
2477 -> 2476;
2477 -> 1453;
2477 -> 1314;
2477 -> 1315;
2477 -> 2462;
2477 -> 1325;
2477 -> 1317;
2478 -> 1468;
2479 -> 2478;
2479 -> 1337;
2480 -> 2479;
2480 -> 1339;
2480 -> 1337;
2481 -> 1335;
2481 -> 1369;
2481 -> 1464;
2481 -> 2480;
2481 -> 1473;
2481 -> 1363;
2481 -> 1364;
2481 -> 2466;
2481 -> 1371;
2481 -> 1368;
2482 -> 1488;
2483 -> 2482;
2483 -> 1383;
2484 -> 2483;
2484 -> 1385;
2484 -> 1383;
2485 -> 1381;
2485 -> 1415;
2485 -> 1484;
2485 -> 2484;
2485 -> 1493;
2485 -> 1409;
2485 -> 1410;
2485 -> 2470;
2485 -> 1417;
2485 -> 1414;
2486 -> 1429;
2487 -> 2486;
2487 -> 1250;
2488 -> 2487;
2488 -> 1252;
2488 -> 1250;
2489 -> 1448;
2490 -> 2489;
2490 -> 1288;
2491 -> 2490;
2491 -> 1290;
2491 -> 1288;
2492 -> 1286;
2492 -> 1318;
2492 -> 1444;
2492 -> 2491;
2492 -> 1453;
2492 -> 1314;
2492 -> 1315;
2492 -> 2477;
2492 -> 1325;
2492 -> 1317;
2493 -> 1468;
2494 -> 2493;
2494 -> 1337;
2495 -> 2494;
2495 -> 1339;
2495 -> 1337;
2496 -> 1335;
2496 -> 1369;
2496 -> 1464;
2496 -> 2495;
2496 -> 1473;
2496 -> 1363;
2496 -> 1364;
2496 -> 2481;
2496 -> 1371;
2496 -> 1368;
2497 -> 1488;
2498 -> 2497;
2498 -> 1383;
2499 -> 2498;
2499 -> 1385;
2499 -> 1383;
2500 -> 1381;
2500 -> 1415;
2500 -> 1484;
2500 -> 2499;
2500 -> 1493;
2500 -> 1409;
2500 -> 1410;
2500 -> 2485;
2500 -> 1417;
2500 -> 1414;
2501 -> 1429;
2502 -> 2501;
2502 -> 1250;
2503 -> 2502;
2503 -> 1252;
2503 -> 1250;
2504 -> 1448;
2505 -> 2504;
2505 -> 1288;
2506 -> 2505;
2506 -> 1290;
2506 -> 1288;
2507 -> 1286;
2507 -> 1318;
2507 -> 1444;
2507 -> 2506;
2507 -> 1453;
2507 -> 1314;
2507 -> 1315;
2507 -> 2492;
2507 -> 1325;
2507 -> 1317;
2508 -> 1468;
2509 -> 2508;
2509 -> 1337;
2510 -> 2509;
2510 -> 1339;
2510 -> 1337;
2511 -> 1335;
2511 -> 1369;
2511 -> 1464;
2511 -> 2510;
2511 -> 1473;
2511 -> 1363;
2511 -> 1364;
2511 -> 2496;
2511 -> 1371;
2511 -> 1368;
2512 -> 1488;
2513 -> 2512;
2513 -> 1383;
2514 -> 2513;
2514 -> 1385;
2514 -> 1383;
2515 -> 1381;
2515 -> 1415;
2515 -> 1484;
2515 -> 2514;
2515 -> 1493;
2515 -> 1409;
2515 -> 1410;
2515 -> 2500;
2515 -> 1417;
2515 -> 1414;
2516 -> 1429;
2517 -> 2516;
2517 -> 1250;
2518 -> 2517;
2518 -> 1252;
2518 -> 1250;
2519 -> 1448;
2520 -> 2519;
2520 -> 1288;
2521 -> 2520;
2521 -> 1290;
2521 -> 1288;
2522 -> 1286;
2522 -> 1318;
2522 -> 1444;
2522 -> 2521;
2522 -> 1453;
2522 -> 1314;
2522 -> 1315;
2522 -> 2507;
2522 -> 1325;
2522 -> 1317;
2523 -> 1468;
2524 -> 2523;
2524 -> 1337;
2525 -> 2524;
2525 -> 1339;
2525 -> 1337;
2526 -> 1335;
2526 -> 1369;
2526 -> 1464;
2526 -> 2525;
2526 -> 1473;
2526 -> 1363;
2526 -> 1364;
2526 -> 2511;
2526 -> 1371;
2526 -> 1368;
2527 -> 1488;
2528 -> 2527;
2528 -> 1383;
2529 -> 2528;
2529 -> 1385;
2529 -> 1383;
2530 -> 1381;
2530 -> 1415;
2530 -> 1484;
2530 -> 2529;
2530 -> 1493;
2530 -> 1409;
2530 -> 1410;
2530 -> 2515;
2530 -> 1417;
2530 -> 1414;
2531 -> 1429;
2532 -> 2531;
2532 -> 1250;
2533 -> 2532;
2533 -> 1252;
2533 -> 1250;
2534 -> 1448;
2535 -> 2534;
2535 -> 1288;
2536 -> 2535;
2536 -> 1290;
2536 -> 1288;
2537 -> 1286;
2537 -> 1318;
2537 -> 1444;
2537 -> 2536;
2537 -> 1453;
2537 -> 1314;
2537 -> 1315;
2537 -> 2522;
2537 -> 1325;
2537 -> 1317;
2538 -> 1468;
2539 -> 2538;
2539 -> 1337;
2540 -> 2539;
2540 -> 1339;
2540 -> 1337;
2541 -> 1335;
2541 -> 1369;
2541 -> 1464;
2541 -> 2540;
2541 -> 1473;
2541 -> 1363;
2541 -> 1364;
2541 -> 2526;
2541 -> 1371;
2541 -> 1368;
2542 -> 1488;
2543 -> 2542;
2543 -> 1383;
2544 -> 2543;
2544 -> 1385;
2544 -> 1383;
2545 -> 1381;
2545 -> 1415;
2545 -> 1484;
2545 -> 2544;
2545 -> 1493;
2545 -> 1409;
2545 -> 1410;
2545 -> 2530;
2545 -> 1417;
2545 -> 1414;
2546 -> 1429;
2547 -> 2546;
2547 -> 1250;
2548 -> 2547;
2548 -> 1252;
2548 -> 1250;
2549 -> 1448;
2550 -> 2549;
2550 -> 1288;
2551 -> 2550;
2551 -> 1290;
2551 -> 1288;
2552 -> 1286;
2552 -> 1318;
2552 -> 1444;
2552 -> 2551;
2552 -> 1453;
2552 -> 1314;
2552 -> 1315;
2552 -> 2537;
2552 -> 1325;
2552 -> 1317;
2553 -> 1468;
2554 -> 2553;
2554 -> 1337;
2555 -> 2554;
2555 -> 1339;
2555 -> 1337;
2556 -> 1335;
2556 -> 1369;
2556 -> 1464;
2556 -> 2555;
2556 -> 1473;
2556 -> 1363;
2556 -> 1364;
2556 -> 2541;
2556 -> 1371;
2556 -> 1368;
2557 -> 1488;
2558 -> 2557;
2558 -> 1383;
2559 -> 2558;
2559 -> 1385;
2559 -> 1383;
2560 -> 1381;
2560 -> 1415;
2560 -> 1484;
2560 -> 2559;
2560 -> 1493;
2560 -> 1409;
2560 -> 1410;
2560 -> 2545;
2560 -> 1417;
2560 -> 1414;
2561 -> 1429;
2562 -> 2561;
2562 -> 1250;
2563 -> 2562;
2563 -> 1252;
2563 -> 1250;
2564 -> 1448;
2565 -> 2564;
2565 -> 1288;
2566 -> 2565;
2566 -> 1290;
2566 -> 1288;
2567 -> 1286;
2567 -> 1318;
2567 -> 1444;
2567 -> 2566;
2567 -> 1453;
2567 -> 1314;
2567 -> 1315;
2567 -> 2552;
2567 -> 1325;
2567 -> 1317;
2568 -> 1468;
2569 -> 2568;
2569 -> 1337;
2570 -> 2569;
2570 -> 1339;
2570 -> 1337;
2571 -> 1335;
2571 -> 1369;
2571 -> 1464;
2571 -> 2570;
2571 -> 1473;
2571 -> 1363;
2571 -> 1364;
2571 -> 2556;
2571 -> 1371;
2571 -> 1368;
2572 -> 1488;
2573 -> 2572;
2573 -> 1383;
2574 -> 2573;
2574 -> 1385;
2574 -> 1383;
2575 -> 1381;
2575 -> 1415;
2575 -> 1484;
2575 -> 2574;
2575 -> 1493;
2575 -> 1409;
2575 -> 1410;
2575 -> 2560;
2575 -> 1417;
2575 -> 1414;
2576 -> 1429;
2577 -> 2576;
2577 -> 1250;
2578 -> 2577;
2578 -> 1252;
2578 -> 1250;
2579 -> 1448;
2580 -> 2579;
2580 -> 1288;
2581 -> 2580;
2581 -> 1290;
2581 -> 1288;
2582 -> 1286;
2582 -> 1318;
2582 -> 1444;
2582 -> 2581;
2582 -> 1453;
2582 -> 1314;
2582 -> 1315;
2582 -> 2567;
2582 -> 1325;
2582 -> 1317;
2583 -> 1468;
2584 -> 2583;
2584 -> 1337;
2585 -> 2584;
2585 -> 1339;
2585 -> 1337;
2586 -> 1335;
2586 -> 1369;
2586 -> 1464;
2586 -> 2585;
2586 -> 1473;
2586 -> 1363;
2586 -> 1364;
2586 -> 2571;
2586 -> 1371;
2586 -> 1368;
2587 -> 1488;
2588 -> 2587;
2588 -> 1383;
2589 -> 2588;
2589 -> 1385;
2589 -> 1383;
2590 -> 1381;
2590 -> 1415;
2590 -> 1484;
2590 -> 2589;
2590 -> 1493;
2590 -> 1409;
2590 -> 1410;
2590 -> 2575;
2590 -> 1417;
2590 -> 1414;
2591 -> 1429;
2592 -> 2591;
2592 -> 1250;
2593 -> 2592;
2593 -> 1252;
2593 -> 1250;
2594 -> 1448;
2595 -> 2594;
2595 -> 1288;
2596 -> 2595;
2596 -> 1290;
2596 -> 1288;
2597 -> 1286;
2597 -> 1318;
2597 -> 1444;
2597 -> 2596;
2597 -> 1453;
2597 -> 1314;
2597 -> 1315;
2597 -> 2582;
2597 -> 1325;
2597 -> 1317;
2598 -> 1468;
2599 -> 2598;
2599 -> 1337;
2600 -> 2599;
2600 -> 1339;
2600 -> 1337;
2601 -> 1335;
2601 -> 1369;
2601 -> 1464;
2601 -> 2600;
2601 -> 1473;
2601 -> 1363;
2601 -> 1364;
2601 -> 2586;
2601 -> 1371;
2601 -> 1368;
2602 -> 1488;
2603 -> 2602;
2603 -> 1383;
2604 -> 2603;
2604 -> 1385;
2604 -> 1383;
2605 -> 1381;
2605 -> 1415;
2605 -> 1484;
2605 -> 2604;
2605 -> 1493;
2605 -> 1409;
2605 -> 1410;
2605 -> 2590;
2605 -> 1417;
2605 -> 1414;
2606 -> 1429;
2607 -> 2606;
2607 -> 1250;
2608 -> 2607;
2608 -> 1252;
2608 -> 1250;
2609 -> 1448;
2610 -> 2609;
2610 -> 1288;
2611 -> 2610;
2611 -> 1290;
2611 -> 1288;
2612 -> 1286;
2612 -> 1318;
2612 -> 1444;
2612 -> 2611;
2612 -> 1453;
2612 -> 1314;
2612 -> 1315;
2612 -> 2597;
2612 -> 1325;
2612 -> 1317;
2613 -> 1468;
2614 -> 2613;
2614 -> 1337;
2615 -> 2614;
2615 -> 1339;
2615 -> 1337;
2616 -> 1335;
2616 -> 1369;
2616 -> 1464;
2616 -> 2615;
2616 -> 1473;
2616 -> 1363;
2616 -> 1364;
2616 -> 2601;
2616 -> 1371;
2616 -> 1368;
2617 -> 1488;
2618 -> 2617;
2618 -> 1383;
2619 -> 2618;
2619 -> 1385;
2619 -> 1383;
2620 -> 1381;
2620 -> 1415;
2620 -> 1484;
2620 -> 2619;
2620 -> 1493;
2620 -> 1409;
2620 -> 1410;
2620 -> 2605;
2620 -> 1417;
2620 -> 1414;
2621 -> 1429;
2622 -> 2621;
2622 -> 1250;
2623 -> 2622;
2623 -> 1252;
2623 -> 1250;
2624 -> 1448;
2625 -> 2624;
2625 -> 1288;
2626 -> 2625;
2626 -> 1290;
2626 -> 1288;
2627 -> 1286;
2627 -> 1318;
2627 -> 1444;
2627 -> 2626;
2627 -> 1453;
2627 -> 1314;
2627 -> 1315;
2627 -> 2612;
2627 -> 1325;
2627 -> 1317;
2628 -> 1468;
2629 -> 2628;
2629 -> 1337;
2630 -> 2629;
2630 -> 1339;
2630 -> 1337;
2631 -> 1335;
2631 -> 1369;
2631 -> 1464;
2631 -> 2630;
2631 -> 1473;
2631 -> 1363;
2631 -> 1364;
2631 -> 2616;
2631 -> 1371;
2631 -> 1368;
2632 -> 1488;
2633 -> 2632;
2633 -> 1383;
2634 -> 2633;
2634 -> 1385;
2634 -> 1383;
2635 -> 1381;
2635 -> 1415;
2635 -> 1484;
2635 -> 2634;
2635 -> 1493;
2635 -> 1409;
2635 -> 1410;
2635 -> 2620;
2635 -> 1417;
2635 -> 1414;
2636 -> 1429;
2637 -> 2636;
2637 -> 1250;
2638 -> 2637;
2638 -> 1252;
2638 -> 1250;
2639 -> 1448;
2640 -> 2639;
2640 -> 1288;
2641 -> 2640;
2641 -> 1290;
2641 -> 1288;
2642 -> 1286;
2642 -> 1318;
2642 -> 1444;
2642 -> 2641;
2642 -> 1453;
2642 -> 1314;
2642 -> 1315;
2642 -> 2627;
2642 -> 1325;
2642 -> 1317;
2643 -> 1468;
2644 -> 2643;
2644 -> 1337;
2645 -> 2644;
2645 -> 1339;
2645 -> 1337;
2646 -> 1335;
2646 -> 1369;
2646 -> 1464;
2646 -> 2645;
2646 -> 1473;
2646 -> 1363;
2646 -> 1364;
2646 -> 2631;
2646 -> 1371;
2646 -> 1368;
2647 -> 1488;
2648 -> 2647;
2648 -> 1383;
2649 -> 2648;
2649 -> 1385;
2649 -> 1383;
2650 -> 1381;
2650 -> 1415;
2650 -> 1484;
2650 -> 2649;
2650 -> 1493;
2650 -> 1409;
2650 -> 1410;
2650 -> 2635;
2650 -> 1417;
2650 -> 1414;
2651 -> 1429;
2652 -> 2651;
2652 -> 1250;
2653 -> 2652;
2653 -> 1252;
2653 -> 1250;
2654 -> 1448;
2655 -> 2654;
2655 -> 1288;
2656 -> 2655;
2656 -> 1290;
2656 -> 1288;
2657 -> 1286;
2657 -> 1318;
2657 -> 1444;
2657 -> 2656;
2657 -> 1453;
2657 -> 1314;
2657 -> 1315;
2657 -> 2642;
2657 -> 1325;
2657 -> 1317;
2658 -> 1468;
2659 -> 2658;
2659 -> 1337;
2660 -> 2659;
2660 -> 1339;
2660 -> 1337;
2661 -> 1335;
2661 -> 1369;
2661 -> 1464;
2661 -> 2660;
2661 -> 1473;
2661 -> 1363;
2661 -> 1364;
2661 -> 2646;
2661 -> 1371;
2661 -> 1368;
2662 -> 1488;
2663 -> 2662;
2663 -> 1383;
2664 -> 2663;
2664 -> 1385;
2664 -> 1383;
2665 -> 1381;
2665 -> 1415;
2665 -> 1484;
2665 -> 2664;
2665 -> 1493;
2665 -> 1409;
2665 -> 1410;
2665 -> 2650;
2665 -> 1417;
2665 -> 1414;
2666 -> 1429;
2667 -> 2666;
2667 -> 1250;
2668 -> 2667;
2668 -> 1252;
2668 -> 1250;
2669 -> 1448;
2670 -> 2669;
2670 -> 1288;
2671 -> 2670;
2671 -> 1290;
2671 -> 1288;
2672 -> 1286;
2672 -> 1318;
2672 -> 1444;
2672 -> 2671;
2672 -> 1453;
2672 -> 1314;
2672 -> 1315;
2672 -> 2657;
2672 -> 1325;
2672 -> 1317;
2673 -> 1468;
2674 -> 2673;
2674 -> 1337;
2675 -> 2674;
2675 -> 1339;
2675 -> 1337;
2676 -> 1335;
2676 -> 1369;
2676 -> 1464;
2676 -> 2675;
2676 -> 1473;
2676 -> 1363;
2676 -> 1364;
2676 -> 2661;
2676 -> 1371;
2676 -> 1368;
2677 -> 1488;
2678 -> 2677;
2678 -> 1383;
2679 -> 2678;
2679 -> 1385;
2679 -> 1383;
2680 -> 1381;
2680 -> 1415;
2680 -> 1484;
2680 -> 2679;
2680 -> 1493;
2680 -> 1409;
2680 -> 1410;
2680 -> 2665;
2680 -> 1417;
2680 -> 1414;
2681 -> 1429;
2682 -> 2681;
2682 -> 1250;
2683 -> 2682;
2683 -> 1252;
2683 -> 1250;
2684 -> 1448;
2685 -> 2684;
2685 -> 1288;
2686 -> 2685;
2686 -> 1290;
2686 -> 1288;
2687 -> 1286;
2687 -> 1318;
2687 -> 1444;
2687 -> 2686;
2687 -> 1453;
2687 -> 1314;
2687 -> 1315;
2687 -> 2672;
2687 -> 1325;
2687 -> 1317;
2688 -> 1468;
2689 -> 2688;
2689 -> 1337;
2690 -> 2689;
2690 -> 1339;
2690 -> 1337;
2691 -> 1335;
2691 -> 1369;
2691 -> 1464;
2691 -> 2690;
2691 -> 1473;
2691 -> 1363;
2691 -> 1364;
2691 -> 2676;
2691 -> 1371;
2691 -> 1368;
2692 -> 1488;
2693 -> 2692;
2693 -> 1383;
2694 -> 2693;
2694 -> 1385;
2694 -> 1383;
2695 -> 1381;
2695 -> 1415;
2695 -> 1484;
2695 -> 2694;
2695 -> 1493;
2695 -> 1409;
2695 -> 1410;
2695 -> 2680;
2695 -> 1417;
2695 -> 1414;
2696 -> 1429;
2697 -> 2696;
2697 -> 1250;
2698 -> 2697;
2698 -> 1252;
2698 -> 1250;
2699 -> 1448;
2700 -> 2699;
2700 -> 1288;
2701 -> 2700;
2701 -> 1290;
2701 -> 1288;
2702 -> 1286;
2702 -> 1318;
2702 -> 1444;
2702 -> 2701;
2702 -> 1453;
2702 -> 1314;
2702 -> 1315;
2702 -> 2687;
2702 -> 1325;
2702 -> 1317;
2703 -> 1468;
2704 -> 2703;
2704 -> 1337;
2705 -> 2704;
2705 -> 1339;
2705 -> 1337;
2706 -> 1335;
2706 -> 1369;
2706 -> 1464;
2706 -> 2705;
2706 -> 1473;
2706 -> 1363;
2706 -> 1364;
2706 -> 2691;
2706 -> 1371;
2706 -> 1368;
2707 -> 1488;
2708 -> 2707;
2708 -> 1383;
2709 -> 2708;
2709 -> 1385;
2709 -> 1383;
2710 -> 1381;
2710 -> 1415;
2710 -> 1484;
2710 -> 2709;
2710 -> 1493;
2710 -> 1409;
2710 -> 1410;
2710 -> 2695;
2710 -> 1417;
2710 -> 1414;
2711 -> 1429;
2712 -> 2711;
2712 -> 1250;
2713 -> 2712;
2713 -> 1252;
2713 -> 1250;
2714 -> 1448;
2715 -> 2714;
2715 -> 1288;
2716 -> 2715;
2716 -> 1290;
2716 -> 1288;
2717 -> 1286;
2717 -> 1318;
2717 -> 1444;
2717 -> 2716;
2717 -> 1453;
2717 -> 1314;
2717 -> 1315;
2717 -> 2702;
2717 -> 1325;
2717 -> 1317;
2718 -> 1468;
2719 -> 2718;
2719 -> 1337;
2720 -> 2719;
2720 -> 1339;
2720 -> 1337;
2721 -> 1335;
2721 -> 1369;
2721 -> 1464;
2721 -> 2720;
2721 -> 1473;
2721 -> 1363;
2721 -> 1364;
2721 -> 2706;
2721 -> 1371;
2721 -> 1368;
2722 -> 1488;
2723 -> 2722;
2723 -> 1383;
2724 -> 2723;
2724 -> 1385;
2724 -> 1383;
2725 -> 1381;
2725 -> 1415;
2725 -> 1484;
2725 -> 2724;
2725 -> 1493;
2725 -> 1409;
2725 -> 1410;
2725 -> 2710;
2725 -> 1417;
2725 -> 1414;
2726 -> 1429;
2727 -> 2726;
2727 -> 1250;
2728 -> 2727;
2728 -> 1252;
2728 -> 1250;
2729 -> 1448;
2730 -> 2729;
2730 -> 1288;
2731 -> 2730;
2731 -> 1290;
2731 -> 1288;
2732 -> 1286;
2732 -> 1318;
2732 -> 1444;
2732 -> 2731;
2732 -> 1453;
2732 -> 1314;
2732 -> 1315;
2732 -> 2717;
2732 -> 1325;
2732 -> 1317;
2733 -> 1468;
2734 -> 2733;
2734 -> 1337;
2735 -> 2734;
2735 -> 1339;
2735 -> 1337;
2736 -> 1335;
2736 -> 1369;
2736 -> 1464;
2736 -> 2735;
2736 -> 1473;
2736 -> 1363;
2736 -> 1364;
2736 -> 2721;
2736 -> 1371;
2736 -> 1368;
2737 -> 1488;
2738 -> 2737;
2738 -> 1383;
2739 -> 2738;
2739 -> 1385;
2739 -> 1383;
2740 -> 1381;
2740 -> 1415;
2740 -> 1484;
2740 -> 2739;
2740 -> 1493;
2740 -> 1409;
2740 -> 1410;
2740 -> 2725;
2740 -> 1417;
2740 -> 1414;
2741 -> 1429;
2742 -> 2741;
2742 -> 1250;
2743 -> 2742;
2743 -> 1252;
2743 -> 1250;
2744 -> 1448;
2745 -> 2744;
2745 -> 1288;
2746 -> 2745;
2746 -> 1290;
2746 -> 1288;
2747 -> 1286;
2747 -> 1318;
2747 -> 1444;
2747 -> 2746;
2747 -> 1453;
2747 -> 1314;
2747 -> 1315;
2747 -> 2732;
2747 -> 1325;
2747 -> 1317;
2748 -> 1468;
2749 -> 2748;
2749 -> 1337;
2750 -> 2749;
2750 -> 1339;
2750 -> 1337;
2751 -> 1335;
2751 -> 1369;
2751 -> 1464;
2751 -> 2750;
2751 -> 1473;
2751 -> 1363;
2751 -> 1364;
2751 -> 2736;
2751 -> 1371;
2751 -> 1368;
2752 -> 1488;
2753 -> 2752;
2753 -> 1383;
2754 -> 2753;
2754 -> 1385;
2754 -> 1383;
2755 -> 1381;
2755 -> 1415;
2755 -> 1484;
2755 -> 2754;
2755 -> 1493;
2755 -> 1409;
2755 -> 1410;
2755 -> 2740;
2755 -> 1417;
2755 -> 1414;
2756 -> 1429;
2757 -> 2756;
2757 -> 1250;
2758 -> 2757;
2758 -> 1252;
2758 -> 1250;
2759 -> 1448;
2760 -> 2759;
2760 -> 1288;
2761 -> 2760;
2761 -> 1290;
2761 -> 1288;
2762 -> 1286;
2762 -> 1318;
2762 -> 1444;
2762 -> 2761;
2762 -> 1453;
2762 -> 1314;
2762 -> 1315;
2762 -> 2747;
2762 -> 1325;
2762 -> 1317;
2763 -> 1468;
2764 -> 2763;
2764 -> 1337;
2765 -> 2764;
2765 -> 1339;
2765 -> 1337;
2766 -> 1335;
2766 -> 1369;
2766 -> 1464;
2766 -> 2765;
2766 -> 1473;
2766 -> 1363;
2766 -> 1364;
2766 -> 2751;
2766 -> 1371;
2766 -> 1368;
2767 -> 1488;
2768 -> 2767;
2768 -> 1383;
2769 -> 2768;
2769 -> 1385;
2769 -> 1383;
2770 -> 1381;
2770 -> 1415;
2770 -> 1484;
2770 -> 2769;
2770 -> 1493;
2770 -> 1409;
2770 -> 1410;
2770 -> 2755;
2770 -> 1417;
2770 -> 1414;
2771 -> 1429;
2772 -> 2771;
2772 -> 1250;
2773 -> 2772;
2773 -> 1252;
2773 -> 1250;
2774 -> 1448;
2775 -> 2774;
2775 -> 1288;
2776 -> 2775;
2776 -> 1290;
2776 -> 1288;
2777 -> 1286;
2777 -> 1318;
2777 -> 1444;
2777 -> 2776;
2777 -> 1453;
2777 -> 1314;
2777 -> 1315;
2777 -> 2762;
2777 -> 1325;
2777 -> 1317;
2778 -> 1468;
2779 -> 2778;
2779 -> 1337;
2780 -> 2779;
2780 -> 1339;
2780 -> 1337;
2781 -> 1335;
2781 -> 1369;
2781 -> 1464;
2781 -> 2780;
2781 -> 1473;
2781 -> 1363;
2781 -> 1364;
2781 -> 2766;
2781 -> 1371;
2781 -> 1368;
2782 -> 1488;
2783 -> 2782;
2783 -> 1383;
2784 -> 2783;
2784 -> 1385;
2784 -> 1383;
2785 -> 1381;
2785 -> 1415;
2785 -> 1484;
2785 -> 2784;
2785 -> 1493;
2785 -> 1409;
2785 -> 1410;
2785 -> 2770;
2785 -> 1417;
2785 -> 1414;
2786 -> 1429;
2787 -> 2786;
2787 -> 1250;
2788 -> 2787;
2788 -> 1252;
2788 -> 1250;
2789 -> 1448;
2790 -> 2789;
2790 -> 1288;
2791 -> 2790;
2791 -> 1290;
2791 -> 1288;
2792 -> 1286;
2792 -> 1318;
2792 -> 1444;
2792 -> 2791;
2792 -> 1453;
2792 -> 1314;
2792 -> 1315;
2792 -> 2777;
2792 -> 1325;
2792 -> 1317;
2793 -> 1468;
2794 -> 2793;
2794 -> 1337;
2795 -> 2794;
2795 -> 1339;
2795 -> 1337;
2796 -> 1335;
2796 -> 1369;
2796 -> 1464;
2796 -> 2795;
2796 -> 1473;
2796 -> 1363;
2796 -> 1364;
2796 -> 2781;
2796 -> 1371;
2796 -> 1368;
2797 -> 1488;
2798 -> 2797;
2798 -> 1383;
2799 -> 2798;
2799 -> 1385;
2799 -> 1383;
2800 -> 1381;
2800 -> 1415;
2800 -> 1484;
2800 -> 2799;
2800 -> 1493;
2800 -> 1409;
2800 -> 1410;
2800 -> 2785;
2800 -> 1417;
2800 -> 1414;
2801 -> 1429;
2802 -> 2801;
2802 -> 1250;
2803 -> 2802;
2803 -> 1252;
2803 -> 1250;
2804 -> 1448;
2805 -> 2804;
2805 -> 1288;
2806 -> 2805;
2806 -> 1290;
2806 -> 1288;
2807 -> 1286;
2807 -> 1318;
2807 -> 1444;
2807 -> 2806;
2807 -> 1453;
2807 -> 1314;
2807 -> 1315;
2807 -> 2792;
2807 -> 1325;
2807 -> 1317;
2808 -> 1468;
2809 -> 2808;
2809 -> 1337;
2810 -> 2809;
2810 -> 1339;
2810 -> 1337;
2811 -> 1335;
2811 -> 1369;
2811 -> 1464;
2811 -> 2810;
2811 -> 1473;
2811 -> 1363;
2811 -> 1364;
2811 -> 2796;
2811 -> 1371;
2811 -> 1368;
2812 -> 1488;
2813 -> 2812;
2813 -> 1383;
2814 -> 2813;
2814 -> 1385;
2814 -> 1383;
2815 -> 1381;
2815 -> 1415;
2815 -> 1484;
2815 -> 2814;
2815 -> 1493;
2815 -> 1409;
2815 -> 1410;
2815 -> 2800;
2815 -> 1417;
2815 -> 1414;
2816 -> 1429;
2817 -> 2816;
2817 -> 1250;
2818 -> 2817;
2818 -> 1252;
2818 -> 1250;
2819 -> 1448;
2820 -> 2819;
2820 -> 1288;
2821 -> 2820;
2821 -> 1290;
2821 -> 1288;
2822 -> 1286;
2822 -> 1318;
2822 -> 1444;
2822 -> 2821;
2822 -> 1453;
2822 -> 1314;
2822 -> 1315;
2822 -> 2807;
2822 -> 1325;
2822 -> 1317;
2823 -> 1468;
2824 -> 2823;
2824 -> 1337;
2825 -> 2824;
2825 -> 1339;
2825 -> 1337;
2826 -> 1335;
2826 -> 1369;
2826 -> 1464;
2826 -> 2825;
2826 -> 1473;
2826 -> 1363;
2826 -> 1364;
2826 -> 2811;
2826 -> 1371;
2826 -> 1368;
2827 -> 1488;
2828 -> 2827;
2828 -> 1383;
2829 -> 2828;
2829 -> 1385;
2829 -> 1383;
2830 -> 1381;
2830 -> 1415;
2830 -> 1484;
2830 -> 2829;
2830 -> 1493;
2830 -> 1409;
2830 -> 1410;
2830 -> 2815;
2830 -> 1417;
2830 -> 1414;
2831 -> 1429;
2832 -> 2831;
2832 -> 1250;
2833 -> 2832;
2833 -> 1252;
2833 -> 1250;
2834 -> 1448;
2835 -> 2834;
2835 -> 1288;
2836 -> 2835;
2836 -> 1290;
2836 -> 1288;
2837 -> 1286;
2837 -> 1318;
2837 -> 1444;
2837 -> 2836;
2837 -> 1453;
2837 -> 1314;
2837 -> 1315;
2837 -> 2822;
2837 -> 1325;
2837 -> 1317;
2838 -> 1468;
2839 -> 2838;
2839 -> 1337;
2840 -> 2839;
2840 -> 1339;
2840 -> 1337;
2841 -> 1335;
2841 -> 1369;
2841 -> 1464;
2841 -> 2840;
2841 -> 1473;
2841 -> 1363;
2841 -> 1364;
2841 -> 2826;
2841 -> 1371;
2841 -> 1368;
2842 -> 1488;
2843 -> 2842;
2843 -> 1383;
2844 -> 2843;
2844 -> 1385;
2844 -> 1383;
2845 -> 1381;
2845 -> 1415;
2845 -> 1484;
2845 -> 2844;
2845 -> 1493;
2845 -> 1409;
2845 -> 1410;
2845 -> 2830;
2845 -> 1417;
2845 -> 1414;
2846 -> 1429;
2847 -> 2846;
2847 -> 1250;
2848 -> 2847;
2848 -> 1252;
2848 -> 1250;
2849 -> 1448;
2850 -> 2849;
2850 -> 1288;
2851 -> 2850;
2851 -> 1290;
2851 -> 1288;
2852 -> 1286;
2852 -> 1318;
2852 -> 1444;
2852 -> 2851;
2852 -> 1453;
2852 -> 1314;
2852 -> 1315;
2852 -> 2837;
2852 -> 1325;
2852 -> 1317;
2853 -> 1468;
2854 -> 2853;
2854 -> 1337;
2855 -> 2854;
2855 -> 1339;
2855 -> 1337;
2856 -> 1335;
2856 -> 1369;
2856 -> 1464;
2856 -> 2855;
2856 -> 1473;
2856 -> 1363;
2856 -> 1364;
2856 -> 2841;
2856 -> 1371;
2856 -> 1368;
2857 -> 1488;
2858 -> 2857;
2858 -> 1383;
2859 -> 2858;
2859 -> 1385;
2859 -> 1383;
2860 -> 1381;
2860 -> 1415;
2860 -> 1484;
2860 -> 2859;
2860 -> 1493;
2860 -> 1409;
2860 -> 1410;
2860 -> 2845;
2860 -> 1417;
2860 -> 1414;
2861 -> 1429;
2862 -> 2861;
2862 -> 1250;
2863 -> 2862;
2863 -> 1252;
2863 -> 1250;
2864 -> 1448;
2865 -> 2864;
2865 -> 1288;
2866 -> 2865;
2866 -> 1290;
2866 -> 1288;
2867 -> 1286;
2867 -> 1318;
2867 -> 1444;
2867 -> 2866;
2867 -> 1453;
2867 -> 1314;
2867 -> 1315;
2867 -> 2852;
2867 -> 1325;
2867 -> 1317;
2868 -> 1468;
2869 -> 2868;
2869 -> 1337;
2870 -> 2869;
2870 -> 1339;
2870 -> 1337;
2871 -> 1335;
2871 -> 1369;
2871 -> 1464;
2871 -> 2870;
2871 -> 1473;
2871 -> 1363;
2871 -> 1364;
2871 -> 2856;
2871 -> 1371;
2871 -> 1368;
2872 -> 1488;
2873 -> 2872;
2873 -> 1383;
2874 -> 2873;
2874 -> 1385;
2874 -> 1383;
2875 -> 1381;
2875 -> 1415;
2875 -> 1484;
2875 -> 2874;
2875 -> 1493;
2875 -> 1409;
2875 -> 1410;
2875 -> 2860;
2875 -> 1417;
2875 -> 1414;
2876 -> 1429;
2877 -> 2876;
2877 -> 1250;
2878 -> 2877;
2878 -> 1252;
2878 -> 1250;
2879 -> 1448;
2880 -> 2879;
2880 -> 1288;
2881 -> 2880;
2881 -> 1290;
2881 -> 1288;
2882 -> 1286;
2882 -> 1318;
2882 -> 1444;
2882 -> 2881;
2882 -> 1453;
2882 -> 1314;
2882 -> 1315;
2882 -> 2867;
2882 -> 1325;
2882 -> 1317;
2883 -> 1468;
2884 -> 2883;
2884 -> 1337;
2885 -> 2884;
2885 -> 1339;
2885 -> 1337;
2886 -> 1335;
2886 -> 1369;
2886 -> 1464;
2886 -> 2885;
2886 -> 1473;
2886 -> 1363;
2886 -> 1364;
2886 -> 2871;
2886 -> 1371;
2886 -> 1368;
2887 -> 1488;
2888 -> 2887;
2888 -> 1383;
2889 -> 2888;
2889 -> 1385;
2889 -> 1383;
2890 -> 1381;
2890 -> 1415;
2890 -> 1484;
2890 -> 2889;
2890 -> 1493;
2890 -> 1409;
2890 -> 1410;
2890 -> 2875;
2890 -> 1417;
2890 -> 1414;
2891 -> 1429;
2892 -> 2891;
2892 -> 1250;
2893 -> 2892;
2893 -> 1252;
2893 -> 1250;
2894 -> 1448;
2895 -> 2894;
2895 -> 1288;
2896 -> 2895;
2896 -> 1290;
2896 -> 1288;
2897 -> 1286;
2897 -> 1318;
2897 -> 1444;
2897 -> 2896;
2897 -> 1453;
2897 -> 1314;
2897 -> 1315;
2897 -> 2882;
2897 -> 1325;
2897 -> 1317;
2898 -> 1468;
2899 -> 2898;
2899 -> 1337;
2900 -> 2899;
2900 -> 1339;
2900 -> 1337;
2901 -> 1335;
2901 -> 1369;
2901 -> 1464;
2901 -> 2900;
2901 -> 1473;
2901 -> 1363;
2901 -> 1364;
2901 -> 2886;
2901 -> 1371;
2901 -> 1368;
2902 -> 1488;
2903 -> 2902;
2903 -> 1383;
2904 -> 2903;
2904 -> 1385;
2904 -> 1383;
2905 -> 1381;
2905 -> 1415;
2905 -> 1484;
2905 -> 2904;
2905 -> 1493;
2905 -> 1409;
2905 -> 1410;
2905 -> 2890;
2905 -> 1417;
2905 -> 1414;
2906 -> 1429;
2907 -> 2906;
2907 -> 1250;
2908 -> 2907;
2908 -> 1252;
2908 -> 1250;
2909 -> 1448;
2910 -> 2909;
2910 -> 1288;
2911 -> 2910;
2911 -> 1290;
2911 -> 1288;
2912 -> 1286;
2912 -> 1318;
2912 -> 1444;
2912 -> 2911;
2912 -> 1453;
2912 -> 1314;
2912 -> 1315;
2912 -> 2897;
2912 -> 1325;
2912 -> 1317;
2913 -> 1468;
2914 -> 2913;
2914 -> 1337;
2915 -> 2914;
2915 -> 1339;
2915 -> 1337;
2916 -> 1335;
2916 -> 1369;
2916 -> 1464;
2916 -> 2915;
2916 -> 1473;
2916 -> 1363;
2916 -> 1364;
2916 -> 2901;
2916 -> 1371;
2916 -> 1368;
2917 -> 1488;
2918 -> 2917;
2918 -> 1383;
2919 -> 2918;
2919 -> 1385;
2919 -> 1383;
2920 -> 1381;
2920 -> 1415;
2920 -> 1484;
2920 -> 2919;
2920 -> 1493;
2920 -> 1409;
2920 -> 1410;
2920 -> 2905;
2920 -> 1417;
2920 -> 1414;
2921 -> 1429;
2922 -> 2921;
2922 -> 1250;
2923 -> 2922;
2923 -> 1252;
2923 -> 1250;
2924 -> 1448;
2925 -> 2924;
2925 -> 1288;
2926 -> 2925;
2926 -> 1290;
2926 -> 1288;
2927 -> 1286;
2927 -> 1318;
2927 -> 1444;
2927 -> 2926;
2927 -> 1453;
2927 -> 1314;
2927 -> 1315;
2927 -> 2912;
2927 -> 1325;
2927 -> 1317;
2928 -> 1468;
2929 -> 2928;
2929 -> 1337;
2930 -> 2929;
2930 -> 1339;
2930 -> 1337;
2931 -> 1335;
2931 -> 1369;
2931 -> 1464;
2931 -> 2930;
2931 -> 1473;
2931 -> 1363;
2931 -> 1364;
2931 -> 2916;
2931 -> 1371;
2931 -> 1368;
2932 -> 1488;
2933 -> 2932;
2933 -> 1383;
2934 -> 2933;
2934 -> 1385;
2934 -> 1383;
2935 -> 1381;
2935 -> 1415;
2935 -> 1484;
2935 -> 2934;
2935 -> 1493;
2935 -> 1409;
2935 -> 1410;
2935 -> 2920;
2935 -> 1417;
2935 -> 1414;
2936 -> 1429;
2937 -> 2936;
2937 -> 1250;
2938 -> 2937;
2938 -> 1252;
2938 -> 1250;
2939 -> 1448;
2940 -> 2939;
2940 -> 1288;
2941 -> 2940;
2941 -> 1290;
2941 -> 1288;
2942 -> 1286;
2942 -> 1318;
2942 -> 1444;
2942 -> 2941;
2942 -> 1453;
2942 -> 1314;
2942 -> 1315;
2942 -> 2927;
2942 -> 1325;
2942 -> 1317;
2943 -> 1468;
2944 -> 2943;
2944 -> 1337;
2945 -> 2944;
2945 -> 1339;
2945 -> 1337;
2946 -> 1335;
2946 -> 1369;
2946 -> 1464;
2946 -> 2945;
2946 -> 1473;
2946 -> 1363;
2946 -> 1364;
2946 -> 2931;
2946 -> 1371;
2946 -> 1368;
2947 -> 1488;
2948 -> 2947;
2948 -> 1383;
2949 -> 2948;
2949 -> 1385;
2949 -> 1383;
2950 -> 1381;
2950 -> 1415;
2950 -> 1484;
2950 -> 2949;
2950 -> 1493;
2950 -> 1409;
2950 -> 1410;
2950 -> 2935;
2950 -> 1417;
2950 -> 1414;
2951 -> 1429;
2952 -> 2951;
2952 -> 1250;
2953 -> 2952;
2953 -> 1252;
2953 -> 1250;
2954 -> 1448;
2955 -> 2954;
2955 -> 1288;
2956 -> 2955;
2956 -> 1290;
2956 -> 1288;
2957 -> 1286;
2957 -> 1318;
2957 -> 1444;
2957 -> 2956;
2957 -> 1453;
2957 -> 1314;
2957 -> 1315;
2957 -> 2942;
2957 -> 1325;
2957 -> 1317;
2958 -> 1468;
2959 -> 2958;
2959 -> 1337;
2960 -> 2959;
2960 -> 1339;
2960 -> 1337;
2961 -> 1335;
2961 -> 1369;
2961 -> 1464;
2961 -> 2960;
2961 -> 1473;
2961 -> 1363;
2961 -> 1364;
2961 -> 2946;
2961 -> 1371;
2961 -> 1368;
2962 -> 1488;
2963 -> 2962;
2963 -> 1383;
2964 -> 2963;
2964 -> 1385;
2964 -> 1383;
2965 -> 1381;
2965 -> 1415;
2965 -> 1484;
2965 -> 2964;
2965 -> 1493;
2965 -> 1409;
2965 -> 1410;
2965 -> 2950;
2965 -> 1417;
2965 -> 1414;
2966 -> 1429;
2967 -> 2966;
2967 -> 1250;
2968 -> 2967;
2968 -> 1252;
2968 -> 1250;
2969 -> 1448;
2970 -> 2969;
2970 -> 1288;
2971 -> 2970;
2971 -> 1290;
2971 -> 1288;
2972 -> 1286;
2972 -> 1318;
2972 -> 1444;
2972 -> 2971;
2972 -> 1453;
2972 -> 1314;
2972 -> 1315;
2972 -> 2957;
2972 -> 1325;
2972 -> 1317;
2973 -> 1468;
2974 -> 2973;
2974 -> 1337;
2975 -> 2974;
2975 -> 1339;
2975 -> 1337;
2976 -> 1335;
2976 -> 1369;
2976 -> 1464;
2976 -> 2975;
2976 -> 1473;
2976 -> 1363;
2976 -> 1364;
2976 -> 2961;
2976 -> 1371;
2976 -> 1368;
2977 -> 1488;
2978 -> 2977;
2978 -> 1383;
2979 -> 2978;
2979 -> 1385;
2979 -> 1383;
2980 -> 1381;
2980 -> 1415;
2980 -> 1484;
2980 -> 2979;
2980 -> 1493;
2980 -> 1409;
2980 -> 1410;
2980 -> 2965;
2980 -> 1417;
2980 -> 1414;
2981 -> 1429;
2982 -> 2981;
2982 -> 1250;
2983 -> 2982;
2983 -> 1252;
2983 -> 1250;
2984 -> 1448;
2985 -> 2984;
2985 -> 1288;
2986 -> 2985;
2986 -> 1290;
2986 -> 1288;
2987 -> 1286;
2987 -> 1318;
2987 -> 1444;
2987 -> 2986;
2987 -> 1453;
2987 -> 1314;
2987 -> 1315;
2987 -> 2972;
2987 -> 1325;
2987 -> 1317;
2988 -> 1468;
2989 -> 2988;
2989 -> 1337;
2990 -> 2989;
2990 -> 1339;
2990 -> 1337;
2991 -> 1335;
2991 -> 1369;
2991 -> 1464;
2991 -> 2990;
2991 -> 1473;
2991 -> 1363;
2991 -> 1364;
2991 -> 2976;
2991 -> 1371;
2991 -> 1368;
2992 -> 1488;
2993 -> 2992;
2993 -> 1383;
2994 -> 2993;
2994 -> 1385;
2994 -> 1383;
2995 -> 1381;
2995 -> 1415;
2995 -> 1484;
2995 -> 2994;
2995 -> 1493;
2995 -> 1409;
2995 -> 1410;
2995 -> 2980;
2995 -> 1417;
2995 -> 1414;
2996 -> 1429;
2997 -> 2996;
2997 -> 1250;
2998 -> 2997;
2998 -> 1252;
2998 -> 1250;
2999 -> 1448;
3000 -> 2999;
3000 -> 1288;
3001 -> 3000;
3001 -> 1290;
3001 -> 1288;
3002 -> 1286;
3002 -> 1318;
3002 -> 1444;
3002 -> 3001;
3002 -> 1453;
3002 -> 1314;
3002 -> 1315;
3002 -> 2987;
3002 -> 1325;
3002 -> 1317;
3003 -> 1468;
3004 -> 3003;
3004 -> 1337;
3005 -> 3004;
3005 -> 1339;
3005 -> 1337;
3006 -> 1335;
3006 -> 1369;
3006 -> 1464;
3006 -> 3005;
3006 -> 1473;
3006 -> 1363;
3006 -> 1364;
3006 -> 2991;
3006 -> 1371;
3006 -> 1368;
3007 -> 1488;
3008 -> 3007;
3008 -> 1383;
3009 -> 3008;
3009 -> 1385;
3009 -> 1383;
3010 -> 1381;
3010 -> 1415;
3010 -> 1484;
3010 -> 3009;
3010 -> 1493;
3010 -> 1409;
3010 -> 1410;
3010 -> 2995;
3010 -> 1417;
3010 -> 1414;
3011 -> 1429;
3012 -> 3011;
3012 -> 1250;
3013 -> 3012;
3013 -> 1252;
3013 -> 1250;
3014 -> 1448;
3015 -> 3014;
3015 -> 1288;
3016 -> 3015;
3016 -> 1290;
3016 -> 1288;
3017 -> 1286;
3017 -> 1318;
3017 -> 1444;
3017 -> 3016;
3017 -> 1453;
3017 -> 1314;
3017 -> 1315;
3017 -> 3002;
3017 -> 1325;
3017 -> 1317;
3018 -> 1468;
3019 -> 3018;
3019 -> 1337;
3020 -> 3019;
3020 -> 1339;
3020 -> 1337;
3021 -> 1335;
3021 -> 1369;
3021 -> 1464;
3021 -> 3020;
3021 -> 1473;
3021 -> 1363;
3021 -> 1364;
3021 -> 3006;
3021 -> 1371;
3021 -> 1368;
3022 -> 1488;
3023 -> 3022;
3023 -> 1383;
3024 -> 3023;
3024 -> 1385;
3024 -> 1383;
3025 -> 1381;
3025 -> 1415;
3025 -> 1484;
3025 -> 3024;
3025 -> 1493;
3025 -> 1409;
3025 -> 1410;
3025 -> 3010;
3025 -> 1417;
3025 -> 1414;
3026 -> 1429;
3027 -> 3026;
3027 -> 1250;
3028 -> 3027;
3028 -> 1252;
3028 -> 1250;
3029 -> 1448;
3030 -> 3029;
3030 -> 1288;
3031 -> 3030;
3031 -> 1290;
3031 -> 1288;
3032 -> 1286;
3032 -> 1318;
3032 -> 1444;
3032 -> 3031;
3032 -> 1453;
3032 -> 1314;
3032 -> 1315;
3032 -> 3017;
3032 -> 1325;
3032 -> 1317;
3033 -> 1468;
3034 -> 3033;
3034 -> 1337;
3035 -> 3034;
3035 -> 1339;
3035 -> 1337;
3036 -> 1335;
3036 -> 1369;
3036 -> 1464;
3036 -> 3035;
3036 -> 1473;
3036 -> 1363;
3036 -> 1364;
3036 -> 3021;
3036 -> 1371;
3036 -> 1368;
3037 -> 1488;
3038 -> 3037;
3038 -> 1383;
3039 -> 3038;
3039 -> 1385;
3039 -> 1383;
3040 -> 1381;
3040 -> 1415;
3040 -> 1484;
3040 -> 3039;
3040 -> 1493;
3040 -> 1409;
3040 -> 1410;
3040 -> 3025;
3040 -> 1417;
3040 -> 1414;
3041 -> 1429;
3042 -> 3041;
3042 -> 1250;
3043 -> 3042;
3043 -> 1252;
3043 -> 1250;
3044 -> 1448;
3045 -> 3044;
3045 -> 1288;
3046 -> 3045;
3046 -> 1290;
3046 -> 1288;
3047 -> 1286;
3047 -> 1318;
3047 -> 1444;
3047 -> 3046;
3047 -> 1453;
3047 -> 1314;
3047 -> 1315;
3047 -> 3032;
3047 -> 1325;
3047 -> 1317;
3048 -> 1468;
3049 -> 3048;
3049 -> 1337;
3050 -> 3049;
3050 -> 1339;
3050 -> 1337;
3051 -> 1335;
3051 -> 1369;
3051 -> 1464;
3051 -> 3050;
3051 -> 1473;
3051 -> 1363;
3051 -> 1364;
3051 -> 3036;
3051 -> 1371;
3051 -> 1368;
3052 -> 1488;
3053 -> 3052;
3053 -> 1383;
3054 -> 3053;
3054 -> 1385;
3054 -> 1383;
3055 -> 1381;
3055 -> 1415;
3055 -> 1484;
3055 -> 3054;
3055 -> 1493;
3055 -> 1409;
3055 -> 1410;
3055 -> 3040;
3055 -> 1417;
3055 -> 1414;
3056 -> 1429;
3057 -> 3056;
3057 -> 1250;
3058 -> 3057;
3058 -> 1252;
3058 -> 1250;
3059 -> 1448;
3060 -> 3059;
3060 -> 1288;
3061 -> 3060;
3061 -> 1290;
3061 -> 1288;
3062 -> 1286;
3062 -> 1318;
3062 -> 1444;
3062 -> 3061;
3062 -> 1453;
3062 -> 1314;
3062 -> 1315;
3062 -> 3047;
3062 -> 1325;
3062 -> 1317;
3063 -> 1468;
3064 -> 3063;
3064 -> 1337;
3065 -> 3064;
3065 -> 1339;
3065 -> 1337;
3066 -> 1335;
3066 -> 1369;
3066 -> 1464;
3066 -> 3065;
3066 -> 1473;
3066 -> 1363;
3066 -> 1364;
3066 -> 3051;
3066 -> 1371;
3066 -> 1368;
3067 -> 1488;
3068 -> 3067;
3068 -> 1383;
3069 -> 3068;
3069 -> 1385;
3069 -> 1383;
3070 -> 1381;
3070 -> 1415;
3070 -> 1484;
3070 -> 3069;
3070 -> 1493;
3070 -> 1409;
3070 -> 1410;
3070 -> 3055;
3070 -> 1417;
3070 -> 1414;
3071 -> 1429;
3072 -> 3071;
3072 -> 1250;
3073 -> 3072;
3073 -> 1252;
3073 -> 1250;
3074 -> 1448;
3075 -> 3074;
3075 -> 1288;
3076 -> 3075;
3076 -> 1290;
3076 -> 1288;
3077 -> 1286;
3077 -> 1318;
3077 -> 1444;
3077 -> 3076;
3077 -> 1453;
3077 -> 1314;
3077 -> 1315;
3077 -> 3062;
3077 -> 1325;
3077 -> 1317;
3078 -> 1468;
3079 -> 3078;
3079 -> 1337;
3080 -> 3079;
3080 -> 1339;
3080 -> 1337;
3081 -> 1335;
3081 -> 1369;
3081 -> 1464;
3081 -> 3080;
3081 -> 1473;
3081 -> 1363;
3081 -> 1364;
3081 -> 3066;
3081 -> 1371;
3081 -> 1368;
3082 -> 1488;
3083 -> 3082;
3083 -> 1383;
3084 -> 3083;
3084 -> 1385;
3084 -> 1383;
3085 -> 1381;
3085 -> 1415;
3085 -> 1484;
3085 -> 3084;
3085 -> 1493;
3085 -> 1409;
3085 -> 1410;
3085 -> 3070;
3085 -> 1417;
3085 -> 1414;
3086 -> 1429;
3087 -> 3086;
3087 -> 1250;
3088 -> 3087;
3088 -> 1252;
3088 -> 1250;
3089 -> 1448;
3090 -> 3089;
3090 -> 1288;
3091 -> 3090;
3091 -> 1290;
3091 -> 1288;
3092 -> 1286;
3092 -> 1318;
3092 -> 1444;
3092 -> 3091;
3092 -> 1453;
3092 -> 1314;
3092 -> 1315;
3092 -> 3077;
3092 -> 1325;
3092 -> 1317;
3093 -> 1468;
3094 -> 3093;
3094 -> 1337;
3095 -> 3094;
3095 -> 1339;
3095 -> 1337;
3096 -> 1335;
3096 -> 1369;
3096 -> 1464;
3096 -> 3095;
3096 -> 1473;
3096 -> 1363;
3096 -> 1364;
3096 -> 3081;
3096 -> 1371;
3096 -> 1368;
3097 -> 1488;
3098 -> 3097;
3098 -> 1383;
3099 -> 3098;
3099 -> 1385;
3099 -> 1383;
3100 -> 1381;
3100 -> 1415;
3100 -> 1484;
3100 -> 3099;
3100 -> 1493;
3100 -> 1409;
3100 -> 1410;
3100 -> 3085;
3100 -> 1417;
3100 -> 1414;
3101 -> 1429;
3102 -> 3101;
3102 -> 1250;
3103 -> 3102;
3103 -> 1252;
3103 -> 1250;
3104 -> 1448;
3105 -> 3104;
3105 -> 1288;
3106 -> 3105;
3106 -> 1290;
3106 -> 1288;
3107 -> 1286;
3107 -> 1318;
3107 -> 1444;
3107 -> 3106;
3107 -> 1453;
3107 -> 1314;
3107 -> 1315;
3107 -> 3092;
3107 -> 1325;
3107 -> 1317;
3108 -> 1468;
3109 -> 3108;
3109 -> 1337;
3110 -> 3109;
3110 -> 1339;
3110 -> 1337;
3111 -> 1335;
3111 -> 1369;
3111 -> 1464;
3111 -> 3110;
3111 -> 1473;
3111 -> 1363;
3111 -> 1364;
3111 -> 3096;
3111 -> 1371;
3111 -> 1368;
3112 -> 1488;
3113 -> 3112;
3113 -> 1383;
3114 -> 3113;
3114 -> 1385;
3114 -> 1383;
3115 -> 1381;
3115 -> 1415;
3115 -> 1484;
3115 -> 3114;
3115 -> 1493;
3115 -> 1409;
3115 -> 1410;
3115 -> 3100;
3115 -> 1417;
3115 -> 1414;
3116 -> 1429;
3117 -> 3116;
3117 -> 1250;
3118 -> 3117;
3118 -> 1252;
3118 -> 1250;
3119 -> 1448;
3120 -> 3119;
3120 -> 1288;
3121 -> 3120;
3121 -> 1290;
3121 -> 1288;
3122 -> 1286;
3122 -> 1318;
3122 -> 1444;
3122 -> 3121;
3122 -> 1453;
3122 -> 1314;
3122 -> 1315;
3122 -> 3107;
3122 -> 1325;
3122 -> 1317;
3123 -> 1468;
3124 -> 3123;
3124 -> 1337;
3125 -> 3124;
3125 -> 1339;
3125 -> 1337;
3126 -> 1335;
3126 -> 1369;
3126 -> 1464;
3126 -> 3125;
3126 -> 1473;
3126 -> 1363;
3126 -> 1364;
3126 -> 3111;
3126 -> 1371;
3126 -> 1368;
3127 -> 1488;
3128 -> 3127;
3128 -> 1383;
3129 -> 3128;
3129 -> 1385;
3129 -> 1383;
3130 -> 1381;
3130 -> 1415;
3130 -> 1484;
3130 -> 3129;
3130 -> 1493;
3130 -> 1409;
3130 -> 1410;
3130 -> 3115;
3130 -> 1417;
3130 -> 1414;
3131 -> 1429;
3132 -> 3131;
3132 -> 1250;
3133 -> 3132;
3133 -> 1252;
3133 -> 1250;
3134 -> 1448;
3135 -> 3134;
3135 -> 1288;
3136 -> 3135;
3136 -> 1290;
3136 -> 1288;
3137 -> 1286;
3137 -> 1318;
3137 -> 1444;
3137 -> 3136;
3137 -> 1453;
3137 -> 1314;
3137 -> 1315;
3137 -> 3122;
3137 -> 1325;
3137 -> 1317;
3138 -> 1468;
3139 -> 3138;
3139 -> 1337;
3140 -> 3139;
3140 -> 1339;
3140 -> 1337;
3141 -> 1335;
3141 -> 1369;
3141 -> 1464;
3141 -> 3140;
3141 -> 1473;
3141 -> 1363;
3141 -> 1364;
3141 -> 3126;
3141 -> 1371;
3141 -> 1368;
3142 -> 1488;
3143 -> 3142;
3143 -> 1383;
3144 -> 3143;
3144 -> 1385;
3144 -> 1383;
3145 -> 1381;
3145 -> 1415;
3145 -> 1484;
3145 -> 3144;
3145 -> 1493;
3145 -> 1409;
3145 -> 1410;
3145 -> 3130;
3145 -> 1417;
3145 -> 1414;
3146 -> 1429;
3147 -> 3146;
3147 -> 1250;
3148 -> 3147;
3148 -> 1252;
3148 -> 1250;
3149 -> 1448;
3150 -> 3149;
3150 -> 1288;
3151 -> 3150;
3151 -> 1290;
3151 -> 1288;
3152 -> 1286;
3152 -> 1318;
3152 -> 1444;
3152 -> 3151;
3152 -> 1453;
3152 -> 1314;
3152 -> 1315;
3152 -> 3137;
3152 -> 1325;
3152 -> 1317;
3153 -> 1468;
3154 -> 3153;
3154 -> 1337;
3155 -> 3154;
3155 -> 1339;
3155 -> 1337;
3156 -> 1335;
3156 -> 1369;
3156 -> 1464;
3156 -> 3155;
3156 -> 1473;
3156 -> 1363;
3156 -> 1364;
3156 -> 3141;
3156 -> 1371;
3156 -> 1368;
3157 -> 1488;
3158 -> 3157;
3158 -> 1383;
3159 -> 3158;
3159 -> 1385;
3159 -> 1383;
3160 -> 1381;
3160 -> 1415;
3160 -> 1484;
3160 -> 3159;
3160 -> 1493;
3160 -> 1409;
3160 -> 1410;
3160 -> 3145;
3160 -> 1417;
3160 -> 1414;
3161 -> 1429;
3162 -> 3161;
3162 -> 1250;
3163 -> 3162;
3163 -> 1252;
3163 -> 1250;
3164 -> 1448;
3165 -> 3164;
3165 -> 1288;
3166 -> 3165;
3166 -> 1290;
3166 -> 1288;
3167 -> 1286;
3167 -> 1318;
3167 -> 1444;
3167 -> 3166;
3167 -> 1453;
3167 -> 1314;
3167 -> 1315;
3167 -> 3152;
3167 -> 1325;
3167 -> 1317;
3168 -> 1468;
3169 -> 3168;
3169 -> 1337;
3170 -> 3169;
3170 -> 1339;
3170 -> 1337;
3171 -> 1335;
3171 -> 1369;
3171 -> 1464;
3171 -> 3170;
3171 -> 1473;
3171 -> 1363;
3171 -> 1364;
3171 -> 3156;
3171 -> 1371;
3171 -> 1368;
3172 -> 1488;
3173 -> 3172;
3173 -> 1383;
3174 -> 3173;
3174 -> 1385;
3174 -> 1383;
3175 -> 1381;
3175 -> 1415;
3175 -> 1484;
3175 -> 3174;
3175 -> 1493;
3175 -> 1409;
3175 -> 1410;
3175 -> 3160;
3175 -> 1417;
3175 -> 1414;
3176 -> 1429;
3177 -> 3176;
3177 -> 1250;
3178 -> 3177;
3178 -> 1252;
3178 -> 1250;
3179 -> 1448;
3180 -> 3179;
3180 -> 1288;
3181 -> 3180;
3181 -> 1290;
3181 -> 1288;
3182 -> 1286;
3182 -> 1318;
3182 -> 1444;
3182 -> 3181;
3182 -> 1453;
3182 -> 1314;
3182 -> 1315;
3182 -> 3167;
3182 -> 1325;
3182 -> 1317;
3183 -> 1468;
3184 -> 3183;
3184 -> 1337;
3185 -> 3184;
3185 -> 1339;
3185 -> 1337;
3186 -> 1335;
3186 -> 1369;
3186 -> 1464;
3186 -> 3185;
3186 -> 1473;
3186 -> 1363;
3186 -> 1364;
3186 -> 3171;
3186 -> 1371;
3186 -> 1368;
3187 -> 1488;
3188 -> 3187;
3188 -> 1383;
3189 -> 3188;
3189 -> 1385;
3189 -> 1383;
3190 -> 1381;
3190 -> 1415;
3190 -> 1484;
3190 -> 3189;
3190 -> 1493;
3190 -> 1409;
3190 -> 1410;
3190 -> 3175;
3190 -> 1417;
3190 -> 1414;
3191 -> 1429;
3192 -> 3191;
3192 -> 1250;
3193 -> 3192;
3193 -> 1252;
3193 -> 1250;
3194 -> 1448;
3195 -> 3194;
3195 -> 1288;
3196 -> 3195;
3196 -> 1290;
3196 -> 1288;
3197 -> 1286;
3197 -> 1318;
3197 -> 1444;
3197 -> 3196;
3197 -> 1453;
3197 -> 1314;
3197 -> 1315;
3197 -> 3182;
3197 -> 1325;
3197 -> 1317;
3198 -> 1468;
3199 -> 3198;
3199 -> 1337;
3200 -> 3199;
3200 -> 1339;
3200 -> 1337;
3201 -> 1335;
3201 -> 1369;
3201 -> 1464;
3201 -> 3200;
3201 -> 1473;
3201 -> 1363;
3201 -> 1364;
3201 -> 3186;
3201 -> 1371;
3201 -> 1368;
3202 -> 1488;
3203 -> 3202;
3203 -> 1383;
3204 -> 3203;
3204 -> 1385;
3204 -> 1383;
3205 -> 1381;
3205 -> 1415;
3205 -> 1484;
3205 -> 3204;
3205 -> 1493;
3205 -> 1409;
3205 -> 1410;
3205 -> 3190;
3205 -> 1417;
3205 -> 1414;
3206 -> 1429;
3207 -> 3206;
3207 -> 1250;
3208 -> 3207;
3208 -> 1252;
3208 -> 1250;
3209 -> 1448;
3210 -> 3209;
3210 -> 1288;
3211 -> 3210;
3211 -> 1290;
3211 -> 1288;
3212 -> 1286;
3212 -> 1318;
3212 -> 1444;
3212 -> 3211;
3212 -> 1453;
3212 -> 1314;
3212 -> 1315;
3212 -> 3197;
3212 -> 1325;
3212 -> 1317;
3213 -> 1468;
3214 -> 3213;
3214 -> 1337;
3215 -> 3214;
3215 -> 1339;
3215 -> 1337;
3216 -> 1335;
3216 -> 1369;
3216 -> 1464;
3216 -> 3215;
3216 -> 1473;
3216 -> 1363;
3216 -> 1364;
3216 -> 3201;
3216 -> 1371;
3216 -> 1368;
3217 -> 1488;
3218 -> 3217;
3218 -> 1383;
3219 -> 3218;
3219 -> 1385;
3219 -> 1383;
3220 -> 1381;
3220 -> 1415;
3220 -> 1484;
3220 -> 3219;
3220 -> 1493;
3220 -> 1409;
3220 -> 1410;
3220 -> 3205;
3220 -> 1417;
3220 -> 1414;
3221 -> 1429;
3222 -> 3221;
3222 -> 1250;
3223 -> 3222;
3223 -> 1252;
3223 -> 1250;
3224 -> 1448;
3225 -> 3224;
3225 -> 1288;
3226 -> 3225;
3226 -> 1290;
3226 -> 1288;
3227 -> 1286;
3227 -> 1318;
3227 -> 1444;
3227 -> 3226;
3227 -> 1453;
3227 -> 1314;
3227 -> 1315;
3227 -> 3212;
3227 -> 1325;
3227 -> 1317;
3228 -> 1468;
3229 -> 3228;
3229 -> 1337;
3230 -> 3229;
3230 -> 1339;
3230 -> 1337;
3231 -> 1335;
3231 -> 1369;
3231 -> 1464;
3231 -> 3230;
3231 -> 1473;
3231 -> 1363;
3231 -> 1364;
3231 -> 3216;
3231 -> 1371;
3231 -> 1368;
3232 -> 1488;
3233 -> 3232;
3233 -> 1383;
3234 -> 3233;
3234 -> 1385;
3234 -> 1383;
3235 -> 1381;
3235 -> 1415;
3235 -> 1484;
3235 -> 3234;
3235 -> 1493;
3235 -> 1409;
3235 -> 1410;
3235 -> 3220;
3235 -> 1417;
3235 -> 1414;
3236 -> 1429;
3237 -> 3236;
3237 -> 1250;
3238 -> 3237;
3238 -> 1252;
3238 -> 1250;
3239 -> 1448;
3240 -> 3239;
3240 -> 1288;
3241 -> 3240;
3241 -> 1290;
3241 -> 1288;
3242 -> 1286;
3242 -> 1318;
3242 -> 1444;
3242 -> 3241;
3242 -> 1453;
3242 -> 1314;
3242 -> 1315;
3242 -> 3227;
3242 -> 1325;
3242 -> 1317;
3243 -> 1468;
3244 -> 3243;
3244 -> 1337;
3245 -> 3244;
3245 -> 1339;
3245 -> 1337;
3246 -> 1335;
3246 -> 1369;
3246 -> 1464;
3246 -> 3245;
3246 -> 1473;
3246 -> 1363;
3246 -> 1364;
3246 -> 3231;
3246 -> 1371;
3246 -> 1368;
3247 -> 1488;
3248 -> 3247;
3248 -> 1383;
3249 -> 3248;
3249 -> 1385;
3249 -> 1383;
3250 -> 1381;
3250 -> 1415;
3250 -> 1484;
3250 -> 3249;
3250 -> 1493;
3250 -> 1409;
3250 -> 1410;
3250 -> 3235;
3250 -> 1417;
3250 -> 1414;
3251 -> 1429;
3252 -> 3251;
3252 -> 1250;
3253 -> 3252;
3253 -> 1252;
3253 -> 1250;
3254 -> 1448;
3255 -> 3254;
3255 -> 1288;
3256 -> 3255;
3256 -> 1290;
3256 -> 1288;
3257 -> 1286;
3257 -> 1318;
3257 -> 1444;
3257 -> 3256;
3257 -> 1453;
3257 -> 1314;
3257 -> 1315;
3257 -> 3242;
3257 -> 1325;
3257 -> 1317;
3258 -> 1468;
3259 -> 3258;
3259 -> 1337;
3260 -> 3259;
3260 -> 1339;
3260 -> 1337;
3261 -> 1335;
3261 -> 1369;
3261 -> 1464;
3261 -> 3260;
3261 -> 1473;
3261 -> 1363;
3261 -> 1364;
3261 -> 3246;
3261 -> 1371;
3261 -> 1368;
3262 -> 1488;
3263 -> 3262;
3263 -> 1383;
3264 -> 3263;
3264 -> 1385;
3264 -> 1383;
3265 -> 1381;
3265 -> 1415;
3265 -> 1484;
3265 -> 3264;
3265 -> 1493;
3265 -> 1409;
3265 -> 1410;
3265 -> 3250;
3265 -> 1417;
3265 -> 1414;
3266 -> 1429;
3267 -> 3266;
3267 -> 1250;
3268 -> 3267;
3268 -> 1252;
3268 -> 1250;
3269 -> 1448;
3270 -> 3269;
3270 -> 1288;
3271 -> 3270;
3271 -> 1290;
3271 -> 1288;
3272 -> 1286;
3272 -> 1318;
3272 -> 1444;
3272 -> 3271;
3272 -> 1453;
3272 -> 1314;
3272 -> 1315;
3272 -> 3257;
3272 -> 1325;
3272 -> 1317;
3273 -> 1468;
3274 -> 3273;
3274 -> 1337;
3275 -> 3274;
3275 -> 1339;
3275 -> 1337;
3276 -> 1335;
3276 -> 1369;
3276 -> 1464;
3276 -> 3275;
3276 -> 1473;
3276 -> 1363;
3276 -> 1364;
3276 -> 3261;
3276 -> 1371;
3276 -> 1368;
3277 -> 1488;
3278 -> 3277;
3278 -> 1383;
3279 -> 3278;
3279 -> 1385;
3279 -> 1383;
3280 -> 1381;
3280 -> 1415;
3280 -> 1484;
3280 -> 3279;
3280 -> 1493;
3280 -> 1409;
3280 -> 1410;
3280 -> 3265;
3280 -> 1417;
3280 -> 1414;
3281 -> 1429;
3282 -> 3281;
3282 -> 1250;
3283 -> 3282;
3283 -> 1252;
3283 -> 1250;
3284 -> 1448;
3285 -> 3284;
3285 -> 1288;
3286 -> 3285;
3286 -> 1290;
3286 -> 1288;
3287 -> 1286;
3287 -> 1318;
3287 -> 1444;
3287 -> 3286;
3287 -> 1453;
3287 -> 1314;
3287 -> 1315;
3287 -> 3272;
3287 -> 1325;
3287 -> 1317;
3288 -> 1468;
3289 -> 3288;
3289 -> 1337;
3290 -> 3289;
3290 -> 1339;
3290 -> 1337;
3291 -> 1335;
3291 -> 1369;
3291 -> 1464;
3291 -> 3290;
3291 -> 1473;
3291 -> 1363;
3291 -> 1364;
3291 -> 3276;
3291 -> 1371;
3291 -> 1368;
3292 -> 1488;
3293 -> 3292;
3293 -> 1383;
3294 -> 3293;
3294 -> 1385;
3294 -> 1383;
3295 -> 1381;
3295 -> 1415;
3295 -> 1484;
3295 -> 3294;
3295 -> 1493;
3295 -> 1409;
3295 -> 1410;
3295 -> 3280;
3295 -> 1417;
3295 -> 1414;
3296 -> 1429;
3297 -> 3296;
3297 -> 1250;
3298 -> 3297;
3298 -> 1252;
3298 -> 1250;
3299 -> 1448;
3300 -> 3299;
3300 -> 1288;
3301 -> 3300;
3301 -> 1290;
3301 -> 1288;
3302 -> 1286;
3302 -> 1318;
3302 -> 1444;
3302 -> 3301;
3302 -> 1453;
3302 -> 1314;
3302 -> 1315;
3302 -> 3287;
3302 -> 1325;
3302 -> 1317;
3303 -> 1468;
3304 -> 3303;
3304 -> 1337;
3305 -> 3304;
3305 -> 1339;
3305 -> 1337;
3306 -> 1335;
3306 -> 1369;
3306 -> 1464;
3306 -> 3305;
3306 -> 1473;
3306 -> 1363;
3306 -> 1364;
3306 -> 3291;
3306 -> 1371;
3306 -> 1368;
3307 -> 1488;
3308 -> 3307;
3308 -> 1383;
3309 -> 3308;
3309 -> 1385;
3309 -> 1383;
3310 -> 1381;
3310 -> 1415;
3310 -> 1484;
3310 -> 3309;
3310 -> 1493;
3310 -> 1409;
3310 -> 1410;
3310 -> 3295;
3310 -> 1417;
3310 -> 1414;
3311 -> 1429;
3312 -> 3311;
3312 -> 1250;
3313 -> 3312;
3313 -> 1252;
3313 -> 1250;
3314 -> 1448;
3315 -> 3314;
3315 -> 1288;
3316 -> 3315;
3316 -> 1290;
3316 -> 1288;
3317 -> 1286;
3317 -> 1318;
3317 -> 1444;
3317 -> 3316;
3317 -> 1453;
3317 -> 1314;
3317 -> 1315;
3317 -> 3302;
3317 -> 1325;
3317 -> 1317;
3318 -> 1468;
3319 -> 3318;
3319 -> 1337;
3320 -> 3319;
3320 -> 1339;
3320 -> 1337;
3321 -> 1335;
3321 -> 1369;
3321 -> 1464;
3321 -> 3320;
3321 -> 1473;
3321 -> 1363;
3321 -> 1364;
3321 -> 3306;
3321 -> 1371;
3321 -> 1368;
3322 -> 1488;
3323 -> 3322;
3323 -> 1383;
3324 -> 3323;
3324 -> 1385;
3324 -> 1383;
3325 -> 1381;
3325 -> 1415;
3325 -> 1484;
3325 -> 3324;
3325 -> 1493;
3325 -> 1409;
3325 -> 1410;
3325 -> 3310;
3325 -> 1417;
3325 -> 1414;
3326 -> 1429;
3327 -> 3326;
3327 -> 1250;
3328 -> 3327;
3328 -> 1252;
3328 -> 1250;
3329 -> 1448;
3330 -> 3329;
3330 -> 1288;
3331 -> 3330;
3331 -> 1290;
3331 -> 1288;
3332 -> 1286;
3332 -> 1318;
3332 -> 1444;
3332 -> 3331;
3332 -> 1453;
3332 -> 1314;
3332 -> 1315;
3332 -> 3317;
3332 -> 1325;
3332 -> 1317;
3333 -> 1468;
3334 -> 3333;
3334 -> 1337;
3335 -> 3334;
3335 -> 1339;
3335 -> 1337;
3336 -> 1335;
3336 -> 1369;
3336 -> 1464;
3336 -> 3335;
3336 -> 1473;
3336 -> 1363;
3336 -> 1364;
3336 -> 3321;
3336 -> 1371;
3336 -> 1368;
3337 -> 1488;
3338 -> 3337;
3338 -> 1383;
3339 -> 3338;
3339 -> 1385;
3339 -> 1383;
3340 -> 1381;
3340 -> 1415;
3340 -> 1484;
3340 -> 3339;
3340 -> 1493;
3340 -> 1409;
3340 -> 1410;
3340 -> 3325;
3340 -> 1417;
3340 -> 1414;
3341 -> 1429;
3342 -> 3341;
3342 -> 1250;
3343 -> 3342;
3343 -> 1252;
3343 -> 1250;
3344 -> 1448;
3345 -> 3344;
3345 -> 1288;
3346 -> 3345;
3346 -> 1290;
3346 -> 1288;
3347 -> 1286;
3347 -> 1318;
3347 -> 1444;
3347 -> 3346;
3347 -> 1453;
3347 -> 1314;
3347 -> 1315;
3347 -> 3332;
3347 -> 1325;
3347 -> 1317;
3348 -> 1468;
3349 -> 3348;
3349 -> 1337;
3350 -> 3349;
3350 -> 1339;
3350 -> 1337;
3351 -> 1335;
3351 -> 1369;
3351 -> 1464;
3351 -> 3350;
3351 -> 1473;
3351 -> 1363;
3351 -> 1364;
3351 -> 3336;
3351 -> 1371;
3351 -> 1368;
3352 -> 1488;
3353 -> 3352;
3353 -> 1383;
3354 -> 3353;
3354 -> 1385;
3354 -> 1383;
3355 -> 1381;
3355 -> 1415;
3355 -> 1484;
3355 -> 3354;
3355 -> 1493;
3355 -> 1409;
3355 -> 1410;
3355 -> 3340;
3355 -> 1417;
3355 -> 1414;
3356 -> 1429;
3357 -> 3356;
3357 -> 1250;
3358 -> 3357;
3358 -> 1252;
3358 -> 1250;
3359 -> 1448;
3360 -> 3359;
3360 -> 1288;
3361 -> 3360;
3361 -> 1290;
3361 -> 1288;
3362 -> 1286;
3362 -> 1318;
3362 -> 1444;
3362 -> 3361;
3362 -> 1453;
3362 -> 1314;
3362 -> 1315;
3362 -> 3347;
3362 -> 1325;
3362 -> 1317;
3363 -> 1468;
3364 -> 3363;
3364 -> 1337;
3365 -> 3364;
3365 -> 1339;
3365 -> 1337;
3366 -> 1335;
3366 -> 1369;
3366 -> 1464;
3366 -> 3365;
3366 -> 1473;
3366 -> 1363;
3366 -> 1364;
3366 -> 3351;
3366 -> 1371;
3366 -> 1368;
3367 -> 1488;
3368 -> 3367;
3368 -> 1383;
3369 -> 3368;
3369 -> 1385;
3369 -> 1383;
3370 -> 1381;
3370 -> 1415;
3370 -> 1484;
3370 -> 3369;
3370 -> 1493;
3370 -> 1409;
3370 -> 1410;
3370 -> 3355;
3370 -> 1417;
3370 -> 1414;
3371 -> 1429;
3372 -> 3371;
3372 -> 1250;
3373 -> 3372;
3373 -> 1252;
3373 -> 1250;
3374 -> 1448;
3375 -> 3374;
3375 -> 1288;
3376 -> 3375;
3376 -> 1290;
3376 -> 1288;
3377 -> 1286;
3377 -> 1318;
3377 -> 1444;
3377 -> 3376;
3377 -> 1453;
3377 -> 1314;
3377 -> 1315;
3377 -> 3362;
3377 -> 1325;
3377 -> 1317;
3378 -> 1468;
3379 -> 3378;
3379 -> 1337;
3380 -> 3379;
3380 -> 1339;
3380 -> 1337;
3381 -> 1335;
3381 -> 1369;
3381 -> 1464;
3381 -> 3380;
3381 -> 1473;
3381 -> 1363;
3381 -> 1364;
3381 -> 3366;
3381 -> 1371;
3381 -> 1368;
3382 -> 1488;
3383 -> 3382;
3383 -> 1383;
3384 -> 3383;
3384 -> 1385;
3384 -> 1383;
3385 -> 1381;
3385 -> 1415;
3385 -> 1484;
3385 -> 3384;
3385 -> 1493;
3385 -> 1409;
3385 -> 1410;
3385 -> 3370;
3385 -> 1417;
3385 -> 1414;
3386 -> 1429;
3387 -> 3386;
3387 -> 1250;
3388 -> 3387;
3388 -> 1252;
3388 -> 1250;
3389 -> 1448;
3390 -> 3389;
3390 -> 1288;
3391 -> 3390;
3391 -> 1290;
3391 -> 1288;
3392 -> 1286;
3392 -> 1318;
3392 -> 1444;
3392 -> 3391;
3392 -> 1453;
3392 -> 1314;
3392 -> 1315;
3392 -> 3377;
3392 -> 1325;
3392 -> 1317;
3393 -> 1468;
3394 -> 3393;
3394 -> 1337;
3395 -> 3394;
3395 -> 1339;
3395 -> 1337;
3396 -> 1335;
3396 -> 1369;
3396 -> 1464;
3396 -> 3395;
3396 -> 1473;
3396 -> 1363;
3396 -> 1364;
3396 -> 3381;
3396 -> 1371;
3396 -> 1368;
3397 -> 1488;
3398 -> 3397;
3398 -> 1383;
3399 -> 3398;
3399 -> 1385;
3399 -> 1383;
3400 -> 1381;
3400 -> 1415;
3400 -> 1484;
3400 -> 3399;
3400 -> 1493;
3400 -> 1409;
3400 -> 1410;
3400 -> 3385;
3400 -> 1417;
3400 -> 1414;
3401 -> 1429;
3402 -> 3401;
3402 -> 1250;
3403 -> 3402;
3403 -> 1252;
3403 -> 1250;
3404 -> 1448;
3405 -> 3404;
3405 -> 1288;
3406 -> 3405;
3406 -> 1290;
3406 -> 1288;
3407 -> 1286;
3407 -> 1318;
3407 -> 1444;
3407 -> 3406;
3407 -> 1453;
3407 -> 1314;
3407 -> 1315;
3407 -> 3392;
3407 -> 1325;
3407 -> 1317;
3408 -> 1468;
3409 -> 3408;
3409 -> 1337;
3410 -> 3409;
3410 -> 1339;
3410 -> 1337;
3411 -> 1335;
3411 -> 1369;
3411 -> 1464;
3411 -> 3410;
3411 -> 1473;
3411 -> 1363;
3411 -> 1364;
3411 -> 3396;
3411 -> 1371;
3411 -> 1368;
3412 -> 1488;
3413 -> 3412;
3413 -> 1383;
3414 -> 3413;
3414 -> 1385;
3414 -> 1383;
3415 -> 1381;
3415 -> 1415;
3415 -> 1484;
3415 -> 3414;
3415 -> 1493;
3415 -> 1409;
3415 -> 1410;
3415 -> 3400;
3415 -> 1417;
3415 -> 1414;
3416 -> 1429;
3417 -> 3416;
3417 -> 1250;
3418 -> 3417;
3418 -> 1252;
3418 -> 1250;
3419 -> 1448;
3420 -> 3419;
3420 -> 1288;
3421 -> 3420;
3421 -> 1290;
3421 -> 1288;
3422 -> 1286;
3422 -> 1318;
3422 -> 1444;
3422 -> 3421;
3422 -> 1453;
3422 -> 1314;
3422 -> 1315;
3422 -> 3407;
3422 -> 1325;
3422 -> 1317;
3423 -> 1468;
3424 -> 3423;
3424 -> 1337;
3425 -> 3424;
3425 -> 1339;
3425 -> 1337;
3426 -> 1335;
3426 -> 1369;
3426 -> 1464;
3426 -> 3425;
3426 -> 1473;
3426 -> 1363;
3426 -> 1364;
3426 -> 3411;
3426 -> 1371;
3426 -> 1368;
3427 -> 1488;
3428 -> 3427;
3428 -> 1383;
3429 -> 3428;
3429 -> 1385;
3429 -> 1383;
3430 -> 1381;
3430 -> 1415;
3430 -> 1484;
3430 -> 3429;
3430 -> 1493;
3430 -> 1409;
3430 -> 1410;
3430 -> 3415;
3430 -> 1417;
3430 -> 1414;
3431 -> 1429;
3432 -> 3431;
3432 -> 1250;
3433 -> 3432;
3433 -> 1252;
3433 -> 1250;
3434 -> 1448;
3435 -> 3434;
3435 -> 1288;
3436 -> 3435;
3436 -> 1290;
3436 -> 1288;
3437 -> 1286;
3437 -> 1318;
3437 -> 1444;
3437 -> 3436;
3437 -> 1453;
3437 -> 1314;
3437 -> 1315;
3437 -> 3422;
3437 -> 1325;
3437 -> 1317;
3438 -> 1468;
3439 -> 3438;
3439 -> 1337;
3440 -> 3439;
3440 -> 1339;
3440 -> 1337;
3441 -> 1335;
3441 -> 1369;
3441 -> 1464;
3441 -> 3440;
3441 -> 1473;
3441 -> 1363;
3441 -> 1364;
3441 -> 3426;
3441 -> 1371;
3441 -> 1368;
3442 -> 1488;
3443 -> 3442;
3443 -> 1383;
3444 -> 3443;
3444 -> 1385;
3444 -> 1383;
3445 -> 1381;
3445 -> 1415;
3445 -> 1484;
3445 -> 3444;
3445 -> 1493;
3445 -> 1409;
3445 -> 1410;
3445 -> 3430;
3445 -> 1417;
3445 -> 1414;
3446 -> 1429;
3447 -> 3446;
3447 -> 1250;
3448 -> 3447;
3448 -> 1252;
3448 -> 1250;
3449 -> 1448;
3450 -> 3449;
3450 -> 1288;
3451 -> 3450;
3451 -> 1290;
3451 -> 1288;
3452 -> 1286;
3452 -> 1318;
3452 -> 1444;
3452 -> 3451;
3452 -> 1453;
3452 -> 1314;
3452 -> 1315;
3452 -> 3437;
3452 -> 1325;
3452 -> 1317;
3453 -> 1468;
3454 -> 3453;
3454 -> 1337;
3455 -> 3454;
3455 -> 1339;
3455 -> 1337;
3456 -> 1335;
3456 -> 1369;
3456 -> 1464;
3456 -> 3455;
3456 -> 1473;
3456 -> 1363;
3456 -> 1364;
3456 -> 3441;
3456 -> 1371;
3456 -> 1368;
3457 -> 1488;
3458 -> 3457;
3458 -> 1383;
3459 -> 3458;
3459 -> 1385;
3459 -> 1383;
3460 -> 1381;
3460 -> 1415;
3460 -> 1484;
3460 -> 3459;
3460 -> 1493;
3460 -> 1409;
3460 -> 1410;
3460 -> 3445;
3460 -> 1417;
3460 -> 1414;
3461 -> 1429;
3462 -> 3461;
3462 -> 1250;
3463 -> 3462;
3463 -> 1252;
3463 -> 1250;
3464 -> 1448;
3465 -> 3464;
3465 -> 1288;
3466 -> 3465;
3466 -> 1290;
3466 -> 1288;
3467 -> 1286;
3467 -> 1318;
3467 -> 1444;
3467 -> 3466;
3467 -> 1453;
3467 -> 1314;
3467 -> 1315;
3467 -> 3452;
3467 -> 1325;
3467 -> 1317;
3468 -> 1468;
3469 -> 3468;
3469 -> 1337;
3470 -> 3469;
3470 -> 1339;
3470 -> 1337;
3471 -> 1335;
3471 -> 1369;
3471 -> 1464;
3471 -> 3470;
3471 -> 1473;
3471 -> 1363;
3471 -> 1364;
3471 -> 3456;
3471 -> 1371;
3471 -> 1368;
3472 -> 1488;
3473 -> 3472;
3473 -> 1383;
3474 -> 3473;
3474 -> 1385;
3474 -> 1383;
3475 -> 1381;
3475 -> 1415;
3475 -> 1484;
3475 -> 3474;
3475 -> 1493;
3475 -> 1409;
3475 -> 1410;
3475 -> 3460;
3475 -> 1417;
3475 -> 1414;
3476 -> 1429;
3477 -> 3476;
3477 -> 1250;
3478 -> 3477;
3478 -> 1252;
3478 -> 1250;
3479 -> 1448;
3480 -> 3479;
3480 -> 1288;
3481 -> 3480;
3481 -> 1290;
3481 -> 1288;
3482 -> 1286;
3482 -> 1318;
3482 -> 1444;
3482 -> 3481;
3482 -> 1453;
3482 -> 1314;
3482 -> 1315;
3482 -> 3467;
3482 -> 1325;
3482 -> 1317;
3483 -> 1468;
3484 -> 3483;
3484 -> 1337;
3485 -> 3484;
3485 -> 1339;
3485 -> 1337;
3486 -> 1335;
3486 -> 1369;
3486 -> 1464;
3486 -> 3485;
3486 -> 1473;
3486 -> 1363;
3486 -> 1364;
3486 -> 3471;
3486 -> 1371;
3486 -> 1368;
3487 -> 1488;
3488 -> 3487;
3488 -> 1383;
3489 -> 3488;
3489 -> 1385;
3489 -> 1383;
3490 -> 1381;
3490 -> 1415;
3490 -> 1484;
3490 -> 3489;
3490 -> 1493;
3490 -> 1409;
3490 -> 1410;
3490 -> 3475;
3490 -> 1417;
3490 -> 1414;
3491 -> 1429;
3492 -> 3491;
3492 -> 1250;
3493 -> 3492;
3493 -> 1252;
3493 -> 1250;
3494 -> 1448;
3495 -> 3494;
3495 -> 1288;
3496 -> 3495;
3496 -> 1290;
3496 -> 1288;
3497 -> 1286;
3497 -> 1318;
3497 -> 1444;
3497 -> 3496;
3497 -> 1453;
3497 -> 1314;
3497 -> 1315;
3497 -> 3482;
3497 -> 1325;
3497 -> 1317;
3498 -> 1468;
3499 -> 3498;
3499 -> 1337;
3500 -> 3499;
3500 -> 1339;
3500 -> 1337;
3501 -> 1335;
3501 -> 1369;
3501 -> 1464;
3501 -> 3500;
3501 -> 1473;
3501 -> 1363;
3501 -> 1364;
3501 -> 3486;
3501 -> 1371;
3501 -> 1368;
3502 -> 1488;
3503 -> 3502;
3503 -> 1383;
3504 -> 3503;
3504 -> 1385;
3504 -> 1383;
3505 -> 1381;
3505 -> 1415;
3505 -> 1484;
3505 -> 3504;
3505 -> 1493;
3505 -> 1409;
3505 -> 1410;
3505 -> 3490;
3505 -> 1417;
3505 -> 1414;
3506 -> 1429;
3507 -> 3506;
3507 -> 1250;
3508 -> 3507;
3508 -> 1252;
3508 -> 1250;
3509 -> 1448;
3510 -> 3509;
3510 -> 1288;
3511 -> 3510;
3511 -> 1290;
3511 -> 1288;
3512 -> 1286;
3512 -> 1318;
3512 -> 1444;
3512 -> 3511;
3512 -> 1453;
3512 -> 1314;
3512 -> 1315;
3512 -> 3497;
3512 -> 1325;
3512 -> 1317;
3513 -> 1468;
3514 -> 3513;
3514 -> 1337;
3515 -> 3514;
3515 -> 1339;
3515 -> 1337;
3516 -> 1335;
3516 -> 1369;
3516 -> 1464;
3516 -> 3515;
3516 -> 1473;
3516 -> 1363;
3516 -> 1364;
3516 -> 3501;
3516 -> 1371;
3516 -> 1368;
3517 -> 1488;
3518 -> 3517;
3518 -> 1383;
3519 -> 3518;
3519 -> 1385;
3519 -> 1383;
3520 -> 1381;
3520 -> 1415;
3520 -> 1484;
3520 -> 3519;
3520 -> 1493;
3520 -> 1409;
3520 -> 1410;
3520 -> 3505;
3520 -> 1417;
3520 -> 1414;
3521 -> 1429;
3522 -> 3521;
3522 -> 1250;
3523 -> 3522;
3523 -> 1252;
3523 -> 1250;
3524 -> 1448;
3525 -> 3524;
3525 -> 1288;
3526 -> 3525;
3526 -> 1290;
3526 -> 1288;
3527 -> 1286;
3527 -> 1318;
3527 -> 1444;
3527 -> 3526;
3527 -> 1453;
3527 -> 1314;
3527 -> 1315;
3527 -> 3512;
3527 -> 1325;
3527 -> 1317;
3528 -> 1468;
3529 -> 3528;
3529 -> 1337;
3530 -> 3529;
3530 -> 1339;
3530 -> 1337;
3531 -> 1335;
3531 -> 1369;
3531 -> 1464;
3531 -> 3530;
3531 -> 1473;
3531 -> 1363;
3531 -> 1364;
3531 -> 3516;
3531 -> 1371;
3531 -> 1368;
3532 -> 1488;
3533 -> 3532;
3533 -> 1383;
3534 -> 3533;
3534 -> 1385;
3534 -> 1383;
3535 -> 1381;
3535 -> 1415;
3535 -> 1484;
3535 -> 3534;
3535 -> 1493;
3535 -> 1409;
3535 -> 1410;
3535 -> 3520;
3535 -> 1417;
3535 -> 1414;
3536 -> 1429;
3537 -> 3536;
3537 -> 1250;
3538 -> 3537;
3538 -> 1252;
3538 -> 1250;
3539 -> 1448;
3540 -> 3539;
3540 -> 1288;
3541 -> 3540;
3541 -> 1290;
3541 -> 1288;
3542 -> 1286;
3542 -> 1318;
3542 -> 1444;
3542 -> 3541;
3542 -> 1453;
3542 -> 1314;
3542 -> 1315;
3542 -> 3527;
3542 -> 1325;
3542 -> 1317;
3543 -> 1468;
3544 -> 3543;
3544 -> 1337;
3545 -> 3544;
3545 -> 1339;
3545 -> 1337;
3546 -> 1335;
3546 -> 1369;
3546 -> 1464;
3546 -> 3545;
3546 -> 1473;
3546 -> 1363;
3546 -> 1364;
3546 -> 3531;
3546 -> 1371;
3546 -> 1368;
3547 -> 1488;
3548 -> 3547;
3548 -> 1383;
3549 -> 3548;
3549 -> 1385;
3549 -> 1383;
3550 -> 1381;
3550 -> 1415;
3550 -> 1484;
3550 -> 3549;
3550 -> 1493;
3550 -> 1409;
3550 -> 1410;
3550 -> 3535;
3550 -> 1417;
3550 -> 1414;
3551 -> 1429;
3552 -> 3551;
3552 -> 1250;
3553 -> 3552;
3553 -> 1252;
3553 -> 1250;
3554 -> 1448;
3555 -> 3554;
3555 -> 1288;
3556 -> 3555;
3556 -> 1290;
3556 -> 1288;
3557 -> 1286;
3557 -> 1318;
3557 -> 1444;
3557 -> 3556;
3557 -> 1453;
3557 -> 1314;
3557 -> 1315;
3557 -> 3542;
3557 -> 1325;
3557 -> 1317;
3558 -> 1468;
3559 -> 3558;
3559 -> 1337;
3560 -> 3559;
3560 -> 1339;
3560 -> 1337;
3561 -> 1335;
3561 -> 1369;
3561 -> 1464;
3561 -> 3560;
3561 -> 1473;
3561 -> 1363;
3561 -> 1364;
3561 -> 3546;
3561 -> 1371;
3561 -> 1368;
3562 -> 1488;
3563 -> 3562;
3563 -> 1383;
3564 -> 3563;
3564 -> 1385;
3564 -> 1383;
3565 -> 1381;
3565 -> 1415;
3565 -> 1484;
3565 -> 3564;
3565 -> 1493;
3565 -> 1409;
3565 -> 1410;
3565 -> 3550;
3565 -> 1417;
3565 -> 1414;
3566 -> 1429;
3567 -> 3566;
3567 -> 1250;
3568 -> 3567;
3568 -> 1252;
3568 -> 1250;
3569 -> 1448;
3570 -> 3569;
3570 -> 1288;
3571 -> 3570;
3571 -> 1290;
3571 -> 1288;
3572 -> 1286;
3572 -> 1318;
3572 -> 1444;
3572 -> 3571;
3572 -> 1453;
3572 -> 1314;
3572 -> 1315;
3572 -> 3557;
3572 -> 1325;
3572 -> 1317;
3573 -> 1468;
3574 -> 3573;
3574 -> 1337;
3575 -> 3574;
3575 -> 1339;
3575 -> 1337;
3576 -> 1335;
3576 -> 1369;
3576 -> 1464;
3576 -> 3575;
3576 -> 1473;
3576 -> 1363;
3576 -> 1364;
3576 -> 3561;
3576 -> 1371;
3576 -> 1368;
3577 -> 1488;
3578 -> 3577;
3578 -> 1383;
3579 -> 3578;
3579 -> 1385;
3579 -> 1383;
3580 -> 1381;
3580 -> 1415;
3580 -> 1484;
3580 -> 3579;
3580 -> 1493;
3580 -> 1409;
3580 -> 1410;
3580 -> 3565;
3580 -> 1417;
3580 -> 1414;
3581 -> 1429;
3582 -> 3581;
3582 -> 1250;
3583 -> 3582;
3583 -> 1252;
3583 -> 1250;
3584 -> 1448;
3585 -> 3584;
3585 -> 1288;
3586 -> 3585;
3586 -> 1290;
3586 -> 1288;
3587 -> 1286;
3587 -> 1318;
3587 -> 1444;
3587 -> 3586;
3587 -> 1453;
3587 -> 1314;
3587 -> 1315;
3587 -> 3572;
3587 -> 1325;
3587 -> 1317;
3588 -> 1468;
3589 -> 3588;
3589 -> 1337;
3590 -> 3589;
3590 -> 1339;
3590 -> 1337;
3591 -> 1335;
3591 -> 1369;
3591 -> 1464;
3591 -> 3590;
3591 -> 1473;
3591 -> 1363;
3591 -> 1364;
3591 -> 3576;
3591 -> 1371;
3591 -> 1368;
3592 -> 1488;
3593 -> 3592;
3593 -> 1383;
3594 -> 3593;
3594 -> 1385;
3594 -> 1383;
3595 -> 1381;
3595 -> 1415;
3595 -> 1484;
3595 -> 3594;
3595 -> 1493;
3595 -> 1409;
3595 -> 1410;
3595 -> 3580;
3595 -> 1417;
3595 -> 1414;
3596 -> 1429;
3597 -> 3596;
3597 -> 1250;
3598 -> 3597;
3598 -> 1252;
3598 -> 1250;
3599 -> 1448;
3600 -> 3599;
3600 -> 1288;
3601 -> 3600;
3601 -> 1290;
3601 -> 1288;
3602 -> 1286;
3602 -> 1318;
3602 -> 1444;
3602 -> 3601;
3602 -> 1453;
3602 -> 1314;
3602 -> 1315;
3602 -> 3587;
3602 -> 1325;
3602 -> 1317;
3603 -> 1468;
3604 -> 3603;
3604 -> 1337;
3605 -> 3604;
3605 -> 1339;
3605 -> 1337;
3606 -> 1335;
3606 -> 1369;
3606 -> 1464;
3606 -> 3605;
3606 -> 1473;
3606 -> 1363;
3606 -> 1364;
3606 -> 3591;
3606 -> 1371;
3606 -> 1368;
3607 -> 1488;
3608 -> 3607;
3608 -> 1383;
3609 -> 3608;
3609 -> 1385;
3609 -> 1383;
3610 -> 1381;
3610 -> 1415;
3610 -> 1484;
3610 -> 3609;
3610 -> 1493;
3610 -> 1409;
3610 -> 1410;
3610 -> 3595;
3610 -> 1417;
3610 -> 1414;
3611 -> 1429;
3612 -> 3611;
3612 -> 1250;
3613 -> 3612;
3613 -> 1252;
3613 -> 1250;
3614 -> 1448;
3615 -> 3614;
3615 -> 1288;
3616 -> 3615;
3616 -> 1290;
3616 -> 1288;
3617 -> 1286;
3617 -> 1318;
3617 -> 1444;
3617 -> 3616;
3617 -> 1453;
3617 -> 1314;
3617 -> 1315;
3617 -> 3602;
3617 -> 1325;
3617 -> 1317;
3618 -> 1468;
3619 -> 3618;
3619 -> 1337;
3620 -> 3619;
3620 -> 1339;
3620 -> 1337;
3621 -> 1335;
3621 -> 1369;
3621 -> 1464;
3621 -> 3620;
3621 -> 1473;
3621 -> 1363;
3621 -> 1364;
3621 -> 3606;
3621 -> 1371;
3621 -> 1368;
3622 -> 1488;
3623 -> 3622;
3623 -> 1383;
3624 -> 3623;
3624 -> 1385;
3624 -> 1383;
3625 -> 1381;
3625 -> 1415;
3625 -> 1484;
3625 -> 3624;
3625 -> 1493;
3625 -> 1409;
3625 -> 1410;
3625 -> 3610;
3625 -> 1417;
3625 -> 1414;
3626 -> 1429;
3627 -> 3626;
3627 -> 1250;
3628 -> 3627;
3628 -> 1252;
3628 -> 1250;
3629 -> 1448;
3630 -> 3629;
3630 -> 1288;
3631 -> 3630;
3631 -> 1290;
3631 -> 1288;
3632 -> 1286;
3632 -> 1318;
3632 -> 1444;
3632 -> 3631;
3632 -> 1453;
3632 -> 1314;
3632 -> 1315;
3632 -> 3617;
3632 -> 1325;
3632 -> 1317;
3633 -> 1468;
3634 -> 3633;
3634 -> 1337;
3635 -> 3634;
3635 -> 1339;
3635 -> 1337;
3636 -> 1335;
3636 -> 1369;
3636 -> 1464;
3636 -> 3635;
3636 -> 1473;
3636 -> 1363;
3636 -> 1364;
3636 -> 3621;
3636 -> 1371;
3636 -> 1368;
3637 -> 1488;
3638 -> 3637;
3638 -> 1383;
3639 -> 3638;
3639 -> 1385;
3639 -> 1383;
3640 -> 1381;
3640 -> 1415;
3640 -> 1484;
3640 -> 3639;
3640 -> 1493;
3640 -> 1409;
3640 -> 1410;
3640 -> 3625;
3640 -> 1417;
3640 -> 1414;
3641 -> 1429;
3642 -> 3641;
3642 -> 1250;
3643 -> 3642;
3643 -> 1252;
3643 -> 1250;
3644 -> 1448;
3645 -> 3644;
3645 -> 1288;
3646 -> 3645;
3646 -> 1290;
3646 -> 1288;
3647 -> 1286;
3647 -> 1318;
3647 -> 1444;
3647 -> 3646;
3647 -> 1453;
3647 -> 1314;
3647 -> 1315;
3647 -> 3632;
3647 -> 1325;
3647 -> 1317;
3648 -> 1468;
3649 -> 3648;
3649 -> 1337;
3650 -> 3649;
3650 -> 1339;
3650 -> 1337;
3651 -> 1335;
3651 -> 1369;
3651 -> 1464;
3651 -> 3650;
3651 -> 1473;
3651 -> 1363;
3651 -> 1364;
3651 -> 3636;
3651 -> 1371;
3651 -> 1368;
3652 -> 1488;
3653 -> 3652;
3653 -> 1383;
3654 -> 3653;
3654 -> 1385;
3654 -> 1383;
3655 -> 1381;
3655 -> 1415;
3655 -> 1484;
3655 -> 3654;
3655 -> 1493;
3655 -> 1409;
3655 -> 1410;
3655 -> 3640;
3655 -> 1417;
3655 -> 1414;
3656 -> 1429;
3657 -> 3656;
3657 -> 1250;
3658 -> 3657;
3658 -> 1252;
3658 -> 1250;
3659 -> 1448;
3660 -> 3659;
3660 -> 1288;
3661 -> 3660;
3661 -> 1290;
3661 -> 1288;
3662 -> 1286;
3662 -> 1318;
3662 -> 1444;
3662 -> 3661;
3662 -> 1453;
3662 -> 1314;
3662 -> 1315;
3662 -> 3647;
3662 -> 1325;
3662 -> 1317;
3663 -> 1468;
3664 -> 3663;
3664 -> 1337;
3665 -> 3664;
3665 -> 1339;
3665 -> 1337;
3666 -> 1335;
3666 -> 1369;
3666 -> 1464;
3666 -> 3665;
3666 -> 1473;
3666 -> 1363;
3666 -> 1364;
3666 -> 3651;
3666 -> 1371;
3666 -> 1368;
3667 -> 1488;
3668 -> 3667;
3668 -> 1383;
3669 -> 3668;
3669 -> 1385;
3669 -> 1383;
3670 -> 1381;
3670 -> 1415;
3670 -> 1484;
3670 -> 3669;
3670 -> 1493;
3670 -> 1409;
3670 -> 1410;
3670 -> 3655;
3670 -> 1417;
3670 -> 1414;
3671 -> 1429;
3672 -> 3671;
3672 -> 1250;
3673 -> 3672;
3673 -> 1252;
3673 -> 1250;
3674 -> 1448;
3675 -> 3674;
3675 -> 1288;
3676 -> 3675;
3676 -> 1290;
3676 -> 1288;
3677 -> 1286;
3677 -> 1318;
3677 -> 1444;
3677 -> 3676;
3677 -> 1453;
3677 -> 1314;
3677 -> 1315;
3677 -> 3662;
3677 -> 1325;
3677 -> 1317;
3678 -> 1468;
3679 -> 3678;
3679 -> 1337;
3680 -> 3679;
3680 -> 1339;
3680 -> 1337;
3681 -> 1335;
3681 -> 1369;
3681 -> 1464;
3681 -> 3680;
3681 -> 1473;
3681 -> 1363;
3681 -> 1364;
3681 -> 3666;
3681 -> 1371;
3681 -> 1368;
3682 -> 1488;
3683 -> 3682;
3683 -> 1383;
3684 -> 3683;
3684 -> 1385;
3684 -> 1383;
3685 -> 1381;
3685 -> 1415;
3685 -> 1484;
3685 -> 3684;
3685 -> 1493;
3685 -> 1409;
3685 -> 1410;
3685 -> 3670;
3685 -> 1417;
3685 -> 1414;
3686 -> 1429;
3687 -> 3686;
3687 -> 1250;
3688 -> 3687;
3688 -> 1252;
3688 -> 1250;
3689 -> 1448;
3690 -> 3689;
3690 -> 1288;
3691 -> 3690;
3691 -> 1290;
3691 -> 1288;
3692 -> 1286;
3692 -> 1318;
3692 -> 1444;
3692 -> 3691;
3692 -> 1453;
3692 -> 1314;
3692 -> 1315;
3692 -> 3677;
3692 -> 1325;
3692 -> 1317;
3693 -> 1468;
3694 -> 3693;
3694 -> 1337;
3695 -> 3694;
3695 -> 1339;
3695 -> 1337;
3696 -> 1335;
3696 -> 1369;
3696 -> 1464;
3696 -> 3695;
3696 -> 1473;
3696 -> 1363;
3696 -> 1364;
3696 -> 3681;
3696 -> 1371;
3696 -> 1368;
3697 -> 1488;
3698 -> 3697;
3698 -> 1383;
3699 -> 3698;
3699 -> 1385;
3699 -> 1383;
3700 -> 1381;
3700 -> 1415;
3700 -> 1484;
3700 -> 3699;
3700 -> 1493;
3700 -> 1409;
3700 -> 1410;
3700 -> 3685;
3700 -> 1417;
3700 -> 1414;
3701 -> 1429;
3702 -> 3701;
3702 -> 1250;
3703 -> 3702;
3703 -> 1252;
3703 -> 1250;
3704 -> 1448;
3705 -> 3704;
3705 -> 1288;
3706 -> 3705;
3706 -> 1290;
3706 -> 1288;
3707 -> 1286;
3707 -> 1318;
3707 -> 1444;
3707 -> 3706;
3707 -> 1453;
3707 -> 1314;
3707 -> 1315;
3707 -> 3692;
3707 -> 1325;
3707 -> 1317;
3708 -> 1468;
3709 -> 3708;
3709 -> 1337;
3710 -> 3709;
3710 -> 1339;
3710 -> 1337;
3711 -> 1335;
3711 -> 1369;
3711 -> 1464;
3711 -> 3710;
3711 -> 1473;
3711 -> 1363;
3711 -> 1364;
3711 -> 3696;
3711 -> 1371;
3711 -> 1368;
3712 -> 1488;
3713 -> 3712;
3713 -> 1383;
3714 -> 3713;
3714 -> 1385;
3714 -> 1383;
3715 -> 1381;
3715 -> 1415;
3715 -> 1484;
3715 -> 3714;
3715 -> 1493;
3715 -> 1409;
3715 -> 1410;
3715 -> 3700;
3715 -> 1417;
3715 -> 1414;
3716 -> 1429;
3717 -> 3716;
3717 -> 1250;
3718 -> 3717;
3718 -> 1252;
3718 -> 1250;
3719 -> 1448;
3720 -> 3719;
3720 -> 1288;
3721 -> 3720;
3721 -> 1290;
3721 -> 1288;
3722 -> 1286;
3722 -> 1318;
3722 -> 1444;
3722 -> 3721;
3722 -> 1453;
3722 -> 1314;
3722 -> 1315;
3722 -> 3707;
3722 -> 1325;
3722 -> 1317;
3723 -> 1468;
3724 -> 3723;
3724 -> 1337;
3725 -> 3724;
3725 -> 1339;
3725 -> 1337;
3726 -> 1335;
3726 -> 1369;
3726 -> 1464;
3726 -> 3725;
3726 -> 1473;
3726 -> 1363;
3726 -> 1364;
3726 -> 3711;
3726 -> 1371;
3726 -> 1368;
3727 -> 1488;
3728 -> 3727;
3728 -> 1383;
3729 -> 3728;
3729 -> 1385;
3729 -> 1383;
3730 -> 1381;
3730 -> 1415;
3730 -> 1484;
3730 -> 3729;
3730 -> 1493;
3730 -> 1409;
3730 -> 1410;
3730 -> 3715;
3730 -> 1417;
3730 -> 1414;
3731 -> 1429;
3732 -> 3731;
3732 -> 1250;
3733 -> 3732;
3733 -> 1252;
3733 -> 1250;
3734 -> 1448;
3735 -> 3734;
3735 -> 1288;
3736 -> 3735;
3736 -> 1290;
3736 -> 1288;
3737 -> 1286;
3737 -> 1318;
3737 -> 1444;
3737 -> 3736;
3737 -> 1453;
3737 -> 1314;
3737 -> 1315;
3737 -> 3722;
3737 -> 1325;
3737 -> 1317;
3738 -> 1468;
3739 -> 3738;
3739 -> 1337;
3740 -> 3739;
3740 -> 1339;
3740 -> 1337;
3741 -> 1335;
3741 -> 1369;
3741 -> 1464;
3741 -> 3740;
3741 -> 1473;
3741 -> 1363;
3741 -> 1364;
3741 -> 3726;
3741 -> 1371;
3741 -> 1368;
3742 -> 1488;
3743 -> 3742;
3743 -> 1383;
3744 -> 3743;
3744 -> 1385;
3744 -> 1383;
3745 -> 1381;
3745 -> 1415;
3745 -> 1484;
3745 -> 3744;
3745 -> 1493;
3745 -> 1409;
3745 -> 1410;
3745 -> 3730;
3745 -> 1417;
3745 -> 1414;
3746 -> 1429;
3747 -> 3746;
3747 -> 1250;
3748 -> 3747;
3748 -> 1252;
3748 -> 1250;
3749 -> 1448;
3750 -> 3749;
3750 -> 1288;
3751 -> 3750;
3751 -> 1290;
3751 -> 1288;
3752 -> 1286;
3752 -> 1318;
3752 -> 1444;
3752 -> 3751;
3752 -> 1453;
3752 -> 1314;
3752 -> 1315;
3752 -> 3737;
3752 -> 1325;
3752 -> 1317;
3753 -> 1468;
3754 -> 3753;
3754 -> 1337;
3755 -> 3754;
3755 -> 1339;
3755 -> 1337;
3756 -> 1335;
3756 -> 1369;
3756 -> 1464;
3756 -> 3755;
3756 -> 1473;
3756 -> 1363;
3756 -> 1364;
3756 -> 3741;
3756 -> 1371;
3756 -> 1368;
3757 -> 1488;
3758 -> 3757;
3758 -> 1383;
3759 -> 3758;
3759 -> 1385;
3759 -> 1383;
3760 -> 1381;
3760 -> 1415;
3760 -> 1484;
3760 -> 3759;
3760 -> 1493;
3760 -> 1409;
3760 -> 1410;
3760 -> 3745;
3760 -> 1417;
3760 -> 1414;
3761 -> 1429;
3762 -> 3761;
3762 -> 1250;
3763 -> 3762;
3763 -> 1252;
3763 -> 1250;
3764 -> 1448;
3765 -> 3764;
3765 -> 1288;
3766 -> 3765;
3766 -> 1290;
3766 -> 1288;
3767 -> 1286;
3767 -> 1318;
3767 -> 1444;
3767 -> 3766;
3767 -> 1453;
3767 -> 1314;
3767 -> 1315;
3767 -> 3752;
3767 -> 1325;
3767 -> 1317;
3768 -> 1468;
3769 -> 3768;
3769 -> 1337;
3770 -> 3769;
3770 -> 1339;
3770 -> 1337;
3771 -> 1335;
3771 -> 1369;
3771 -> 1464;
3771 -> 3770;
3771 -> 1473;
3771 -> 1363;
3771 -> 1364;
3771 -> 3756;
3771 -> 1371;
3771 -> 1368;
3772 -> 1488;
3773 -> 3772;
3773 -> 1383;
3774 -> 3773;
3774 -> 1385;
3774 -> 1383;
3775 -> 1381;
3775 -> 1415;
3775 -> 1484;
3775 -> 3774;
3775 -> 1493;
3775 -> 1409;
3775 -> 1410;
3775 -> 3760;
3775 -> 1417;
3775 -> 1414;
3776 -> 1429;
3777 -> 3776;
3777 -> 1250;
3778 -> 3777;
3778 -> 1252;
3778 -> 1250;
3779 -> 1448;
3780 -> 3779;
3780 -> 1288;
3781 -> 3780;
3781 -> 1290;
3781 -> 1288;
3782 -> 1286;
3782 -> 1318;
3782 -> 1444;
3782 -> 3781;
3782 -> 1453;
3782 -> 1314;
3782 -> 1315;
3782 -> 3767;
3782 -> 1325;
3782 -> 1317;
3783 -> 1468;
3784 -> 3783;
3784 -> 1337;
3785 -> 3784;
3785 -> 1339;
3785 -> 1337;
3786 -> 1335;
3786 -> 1369;
3786 -> 1464;
3786 -> 3785;
3786 -> 1473;
3786 -> 1363;
3786 -> 1364;
3786 -> 3771;
3786 -> 1371;
3786 -> 1368;
3787 -> 1488;
3788 -> 3787;
3788 -> 1383;
3789 -> 3788;
3789 -> 1385;
3789 -> 1383;
3790 -> 1381;
3790 -> 1415;
3790 -> 1484;
3790 -> 3789;
3790 -> 1493;
3790 -> 1409;
3790 -> 1410;
3790 -> 3775;
3790 -> 1417;
3790 -> 1414;
3791 -> 1429;
3792 -> 3791;
3792 -> 1250;
3793 -> 3792;
3793 -> 1252;
3793 -> 1250;
3794 -> 1448;
3795 -> 3794;
3795 -> 1288;
3796 -> 3795;
3796 -> 1290;
3796 -> 1288;
3797 -> 1286;
3797 -> 1318;
3797 -> 1444;
3797 -> 3796;
3797 -> 1453;
3797 -> 1314;
3797 -> 1315;
3797 -> 3782;
3797 -> 1325;
3797 -> 1317;
3798 -> 1468;
3799 -> 3798;
3799 -> 1337;
3800 -> 3799;
3800 -> 1339;
3800 -> 1337;
3801 -> 1335;
3801 -> 1369;
3801 -> 1464;
3801 -> 3800;
3801 -> 1473;
3801 -> 1363;
3801 -> 1364;
3801 -> 3786;
3801 -> 1371;
3801 -> 1368;
3802 -> 1488;
3803 -> 3802;
3803 -> 1383;
3804 -> 3803;
3804 -> 1385;
3804 -> 1383;
3805 -> 1381;
3805 -> 1415;
3805 -> 1484;
3805 -> 3804;
3805 -> 1493;
3805 -> 1409;
3805 -> 1410;
3805 -> 3790;
3805 -> 1417;
3805 -> 1414;
3806 -> 1429;
3807 -> 3806;
3807 -> 1250;
3808 -> 3807;
3808 -> 1252;
3808 -> 1250;
3809 -> 1448;
3810 -> 3809;
3810 -> 1288;
3811 -> 3810;
3811 -> 1290;
3811 -> 1288;
3812 -> 1286;
3812 -> 1318;
3812 -> 1444;
3812 -> 3811;
3812 -> 1453;
3812 -> 1314;
3812 -> 1315;
3812 -> 3797;
3812 -> 1325;
3812 -> 1317;
3813 -> 1468;
3814 -> 3813;
3814 -> 1337;
3815 -> 3814;
3815 -> 1339;
3815 -> 1337;
3816 -> 1335;
3816 -> 1369;
3816 -> 1464;
3816 -> 3815;
3816 -> 1473;
3816 -> 1363;
3816 -> 1364;
3816 -> 3801;
3816 -> 1371;
3816 -> 1368;
3817 -> 1488;
3818 -> 3817;
3818 -> 1383;
3819 -> 3818;
3819 -> 1385;
3819 -> 1383;
3820 -> 1381;
3820 -> 1415;
3820 -> 1484;
3820 -> 3819;
3820 -> 1493;
3820 -> 1409;
3820 -> 1410;
3820 -> 3805;
3820 -> 1417;
3820 -> 1414;
3821 -> 1429;
3822 -> 3821;
3822 -> 1250;
3823 -> 3822;
3823 -> 1252;
3823 -> 1250;
3824 -> 1448;
3825 -> 3824;
3825 -> 1288;
3826 -> 3825;
3826 -> 1290;
3826 -> 1288;
3827 -> 1286;
3827 -> 1318;
3827 -> 1444;
3827 -> 3826;
3827 -> 1453;
3827 -> 1314;
3827 -> 1315;
3827 -> 3812;
3827 -> 1325;
3827 -> 1317;
3828 -> 1468;
3829 -> 3828;
3829 -> 1337;
3830 -> 3829;
3830 -> 1339;
3830 -> 1337;
3831 -> 1335;
3831 -> 1369;
3831 -> 1464;
3831 -> 3830;
3831 -> 1473;
3831 -> 1363;
3831 -> 1364;
3831 -> 3816;
3831 -> 1371;
3831 -> 1368;
3832 -> 1488;
3833 -> 3832;
3833 -> 1383;
3834 -> 3833;
3834 -> 1385;
3834 -> 1383;
3835 -> 1381;
3835 -> 1415;
3835 -> 1484;
3835 -> 3834;
3835 -> 1493;
3835 -> 1409;
3835 -> 1410;
3835 -> 3820;
3835 -> 1417;
3835 -> 1414;
3836 -> 1429;
3837 -> 3836;
3837 -> 1250;
3838 -> 3837;
3838 -> 1252;
3838 -> 1250;
3839 -> 1448;
3840 -> 3839;
3840 -> 1288;
3841 -> 3840;
3841 -> 1290;
3841 -> 1288;
3842 -> 1286;
3842 -> 1318;
3842 -> 1444;
3842 -> 3841;
3842 -> 1453;
3842 -> 1314;
3842 -> 1315;
3842 -> 3827;
3842 -> 1325;
3842 -> 1317;
3843 -> 1468;
3844 -> 3843;
3844 -> 1337;
3845 -> 3844;
3845 -> 1339;
3845 -> 1337;
3846 -> 1335;
3846 -> 1369;
3846 -> 1464;
3846 -> 3845;
3846 -> 1473;
3846 -> 1363;
3846 -> 1364;
3846 -> 3831;
3846 -> 1371;
3846 -> 1368;
3847 -> 1488;
3848 -> 3847;
3848 -> 1383;
3849 -> 3848;
3849 -> 1385;
3849 -> 1383;
3850 -> 1381;
3850 -> 1415;
3850 -> 1484;
3850 -> 3849;
3850 -> 1493;
3850 -> 1409;
3850 -> 1410;
3850 -> 3835;
3850 -> 1417;
3850 -> 1414;
3851 -> 1429;
3852 -> 3851;
3852 -> 1250;
3853 -> 3852;
3853 -> 1252;
3853 -> 1250;
3854 -> 1448;
3855 -> 3854;
3855 -> 1288;
3856 -> 3855;
3856 -> 1290;
3856 -> 1288;
3857 -> 1286;
3857 -> 1318;
3857 -> 1444;
3857 -> 3856;
3857 -> 1453;
3857 -> 1314;
3857 -> 1315;
3857 -> 3842;
3857 -> 1325;
3857 -> 1317;
3858 -> 1468;
3859 -> 3858;
3859 -> 1337;
3860 -> 3859;
3860 -> 1339;
3860 -> 1337;
3861 -> 1335;
3861 -> 1369;
3861 -> 1464;
3861 -> 3860;
3861 -> 1473;
3861 -> 1363;
3861 -> 1364;
3861 -> 3846;
3861 -> 1371;
3861 -> 1368;
3862 -> 1488;
3863 -> 3862;
3863 -> 1383;
3864 -> 3863;
3864 -> 1385;
3864 -> 1383;
3865 -> 1381;
3865 -> 1415;
3865 -> 1484;
3865 -> 3864;
3865 -> 1493;
3865 -> 1409;
3865 -> 1410;
3865 -> 3850;
3865 -> 1417;
3865 -> 1414;
3866 -> 1429;
3867 -> 3866;
3867 -> 1250;
3868 -> 3867;
3868 -> 1252;
3868 -> 1250;
3869 -> 1448;
3870 -> 3869;
3870 -> 1288;
3871 -> 3870;
3871 -> 1290;
3871 -> 1288;
3872 -> 1286;
3872 -> 1318;
3872 -> 1444;
3872 -> 3871;
3872 -> 1453;
3872 -> 1314;
3872 -> 1315;
3872 -> 3857;
3872 -> 1325;
3872 -> 1317;
3873 -> 1468;
3874 -> 3873;
3874 -> 1337;
3875 -> 3874;
3875 -> 1339;
3875 -> 1337;
3876 -> 1335;
3876 -> 1369;
3876 -> 1464;
3876 -> 3875;
3876 -> 1473;
3876 -> 1363;
3876 -> 1364;
3876 -> 3861;
3876 -> 1371;
3876 -> 1368;
3877 -> 1488;
3878 -> 3877;
3878 -> 1383;
3879 -> 3878;
3879 -> 1385;
3879 -> 1383;
3880 -> 1381;
3880 -> 1415;
3880 -> 1484;
3880 -> 3879;
3880 -> 1493;
3880 -> 1409;
3880 -> 1410;
3880 -> 3865;
3880 -> 1417;
3880 -> 1414;
3881 -> 1429;
3882 -> 3881;
3882 -> 1250;
3883 -> 3882;
3883 -> 1252;
3883 -> 1250;
3884 -> 1448;
3885 -> 3884;
3885 -> 1288;
3886 -> 3885;
3886 -> 1290;
3886 -> 1288;
3887 -> 1286;
3887 -> 1318;
3887 -> 1444;
3887 -> 3886;
3887 -> 1453;
3887 -> 1314;
3887 -> 1315;
3887 -> 3872;
3887 -> 1325;
3887 -> 1317;
3888 -> 1468;
3889 -> 3888;
3889 -> 1337;
3890 -> 3889;
3890 -> 1339;
3890 -> 1337;
3891 -> 1335;
3891 -> 1369;
3891 -> 1464;
3891 -> 3890;
3891 -> 1473;
3891 -> 1363;
3891 -> 1364;
3891 -> 3876;
3891 -> 1371;
3891 -> 1368;
3892 -> 1488;
3893 -> 3892;
3893 -> 1383;
3894 -> 3893;
3894 -> 1385;
3894 -> 1383;
3895 -> 1381;
3895 -> 1415;
3895 -> 1484;
3895 -> 3894;
3895 -> 1493;
3895 -> 1409;
3895 -> 1410;
3895 -> 3880;
3895 -> 1417;
3895 -> 1414;
3896 -> 1429;
3897 -> 3896;
3897 -> 1250;
3898 -> 3897;
3898 -> 1252;
3898 -> 1250;
3899 -> 1448;
3900 -> 3899;
3900 -> 1288;
3901 -> 3900;
3901 -> 1290;
3901 -> 1288;
3902 -> 1286;
3902 -> 1318;
3902 -> 1444;
3902 -> 3901;
3902 -> 1453;
3902 -> 1314;
3902 -> 1315;
3902 -> 3887;
3902 -> 1325;
3902 -> 1317;
3903 -> 1468;
3904 -> 3903;
3904 -> 1337;
3905 -> 3904;
3905 -> 1339;
3905 -> 1337;
3906 -> 1335;
3906 -> 1369;
3906 -> 1464;
3906 -> 3905;
3906 -> 1473;
3906 -> 1363;
3906 -> 1364;
3906 -> 3891;
3906 -> 1371;
3906 -> 1368;
3907 -> 1488;
3908 -> 3907;
3908 -> 1383;
3909 -> 3908;
3909 -> 1385;
3909 -> 1383;
3910 -> 1381;
3910 -> 1415;
3910 -> 1484;
3910 -> 3909;
3910 -> 1493;
3910 -> 1409;
3910 -> 1410;
3910 -> 3895;
3910 -> 1417;
3910 -> 1414;
3911 -> 1429;
3912 -> 3911;
3912 -> 1250;
3913 -> 3912;
3913 -> 1252;
3913 -> 1250;
3914 -> 1448;
3915 -> 3914;
3915 -> 1288;
3916 -> 3915;
3916 -> 1290;
3916 -> 1288;
3917 -> 1286;
3917 -> 1318;
3917 -> 1444;
3917 -> 3916;
3917 -> 1453;
3917 -> 1314;
3917 -> 1315;
3917 -> 3902;
3917 -> 1325;
3917 -> 1317;
3918 -> 1468;
3919 -> 3918;
3919 -> 1337;
3920 -> 3919;
3920 -> 1339;
3920 -> 1337;
3921 -> 1335;
3921 -> 1369;
3921 -> 1464;
3921 -> 3920;
3921 -> 1473;
3921 -> 1363;
3921 -> 1364;
3921 -> 3906;
3921 -> 1371;
3921 -> 1368;
3922 -> 1488;
3923 -> 3922;
3923 -> 1383;
3924 -> 3923;
3924 -> 1385;
3924 -> 1383;
3925 -> 1381;
3925 -> 1415;
3925 -> 1484;
3925 -> 3924;
3925 -> 1493;
3925 -> 1409;
3925 -> 1410;
3925 -> 3910;
3925 -> 1417;
3925 -> 1414;
3926 -> 1429;
3927 -> 3926;
3927 -> 1250;
3928 -> 3927;
3928 -> 1252;
3928 -> 1250;
3929 -> 1448;
3930 -> 3929;
3930 -> 1288;
3931 -> 3930;
3931 -> 1290;
3931 -> 1288;
3932 -> 1286;
3932 -> 1318;
3932 -> 1444;
3932 -> 3931;
3932 -> 1453;
3932 -> 1314;
3932 -> 1315;
3932 -> 3917;
3932 -> 1325;
3932 -> 1317;
3933 -> 1468;
3934 -> 3933;
3934 -> 1337;
3935 -> 3934;
3935 -> 1339;
3935 -> 1337;
3936 -> 1335;
3936 -> 1369;
3936 -> 1464;
3936 -> 3935;
3936 -> 1473;
3936 -> 1363;
3936 -> 1364;
3936 -> 3921;
3936 -> 1371;
3936 -> 1368;
3937 -> 1488;
3938 -> 3937;
3938 -> 1383;
3939 -> 3938;
3939 -> 1385;
3939 -> 1383;
3940 -> 1381;
3940 -> 1415;
3940 -> 1484;
3940 -> 3939;
3940 -> 1493;
3940 -> 1409;
3940 -> 1410;
3940 -> 3925;
3940 -> 1417;
3940 -> 1414;
3941 -> 1429;
3942 -> 3941;
3942 -> 1250;
3943 -> 3942;
3943 -> 1252;
3943 -> 1250;
3944 -> 1448;
3945 -> 3944;
3945 -> 1288;
3946 -> 3945;
3946 -> 1290;
3946 -> 1288;
3947 -> 1286;
3947 -> 1318;
3947 -> 1444;
3947 -> 3946;
3947 -> 1453;
3947 -> 1314;
3947 -> 1315;
3947 -> 3932;
3947 -> 1325;
3947 -> 1317;
3948 -> 1468;
3949 -> 3948;
3949 -> 1337;
3950 -> 3949;
3950 -> 1339;
3950 -> 1337;
3951 -> 1335;
3951 -> 1369;
3951 -> 1464;
3951 -> 3950;
3951 -> 1473;
3951 -> 1363;
3951 -> 1364;
3951 -> 3936;
3951 -> 1371;
3951 -> 1368;
3952 -> 1488;
3953 -> 3952;
3953 -> 1383;
3954 -> 3953;
3954 -> 1385;
3954 -> 1383;
3955 -> 1381;
3955 -> 1415;
3955 -> 1484;
3955 -> 3954;
3955 -> 1493;
3955 -> 1409;
3955 -> 1410;
3955 -> 3940;
3955 -> 1417;
3955 -> 1414;
3956 -> 1429;
3957 -> 3956;
3957 -> 1250;
3958 -> 3957;
3958 -> 1252;
3958 -> 1250;
3959 -> 1448;
3960 -> 3959;
3960 -> 1288;
3961 -> 3960;
3961 -> 1290;
3961 -> 1288;
3962 -> 1286;
3962 -> 1318;
3962 -> 1444;
3962 -> 3961;
3962 -> 1453;
3962 -> 1314;
3962 -> 1315;
3962 -> 3947;
3962 -> 1325;
3962 -> 1317;
3963 -> 1468;
3964 -> 3963;
3964 -> 1337;
3965 -> 3964;
3965 -> 1339;
3965 -> 1337;
3966 -> 1335;
3966 -> 1369;
3966 -> 1464;
3966 -> 3965;
3966 -> 1473;
3966 -> 1363;
3966 -> 1364;
3966 -> 3951;
3966 -> 1371;
3966 -> 1368;
3967 -> 1488;
3968 -> 3967;
3968 -> 1383;
3969 -> 3968;
3969 -> 1385;
3969 -> 1383;
3970 -> 1381;
3970 -> 1415;
3970 -> 1484;
3970 -> 3969;
3970 -> 1493;
3970 -> 1409;
3970 -> 1410;
3970 -> 3955;
3970 -> 1417;
3970 -> 1414;
3971 -> 1429;
3972 -> 3971;
3972 -> 1250;
3973 -> 3972;
3973 -> 1252;
3973 -> 1250;
3974 -> 1448;
3975 -> 3974;
3975 -> 1288;
3976 -> 3975;
3976 -> 1290;
3976 -> 1288;
3977 -> 1286;
3977 -> 1318;
3977 -> 1444;
3977 -> 3976;
3977 -> 1453;
3977 -> 1314;
3977 -> 1315;
3977 -> 3962;
3977 -> 1325;
3977 -> 1317;
3978 -> 1468;
3979 -> 3978;
3979 -> 1337;
3980 -> 3979;
3980 -> 1339;
3980 -> 1337;
3981 -> 1335;
3981 -> 1369;
3981 -> 1464;
3981 -> 3980;
3981 -> 1473;
3981 -> 1363;
3981 -> 1364;
3981 -> 3966;
3981 -> 1371;
3981 -> 1368;
3982 -> 1488;
3983 -> 3982;
3983 -> 1383;
3984 -> 3983;
3984 -> 1385;
3984 -> 1383;
3985 -> 1381;
3985 -> 1415;
3985 -> 1484;
3985 -> 3984;
3985 -> 1493;
3985 -> 1409;
3985 -> 1410;
3985 -> 3970;
3985 -> 1417;
3985 -> 1414;
3986 -> 1429;
3987 -> 3986;
3987 -> 1250;
3988 -> 3987;
3988 -> 1252;
3988 -> 1250;
3989 -> 1448;
3990 -> 3989;
3990 -> 1288;
3991 -> 3990;
3991 -> 1290;
3991 -> 1288;
3992 -> 1286;
3992 -> 1318;
3992 -> 1444;
3992 -> 3991;
3992 -> 1453;
3992 -> 1314;
3992 -> 1315;
3992 -> 3977;
3992 -> 1325;
3992 -> 1317;
3993 -> 1468;
3994 -> 3993;
3994 -> 1337;
3995 -> 3994;
3995 -> 1339;
3995 -> 1337;
3996 -> 1335;
3996 -> 1369;
3996 -> 1464;
3996 -> 3995;
3996 -> 1473;
3996 -> 1363;
3996 -> 1364;
3996 -> 3981;
3996 -> 1371;
3996 -> 1368;
3997 -> 1488;
3998 -> 3997;
3998 -> 1383;
3999 -> 3998;
3999 -> 1385;
3999 -> 1383;
4000 -> 1381;
4000 -> 1415;
4000 -> 1484;
4000 -> 3999;
4000 -> 1493;
4000 -> 1409;
4000 -> 1410;
4000 -> 3985;
4000 -> 1417;
4000 -> 1414;
4001 -> 1429;
4002 -> 4001;
4002 -> 1250;
4003 -> 4002;
4003 -> 1252;
4003 -> 1250;
4004 -> 1448;
4005 -> 4004;
4005 -> 1288;
4006 -> 4005;
4006 -> 1290;
4006 -> 1288;
4007 -> 1286;
4007 -> 1318;
4007 -> 1444;
4007 -> 4006;
4007 -> 1453;
4007 -> 1314;
4007 -> 1315;
4007 -> 3992;
4007 -> 1325;
4007 -> 1317;
4008 -> 1468;
4009 -> 4008;
4009 -> 1337;
4010 -> 4009;
4010 -> 1339;
4010 -> 1337;
4011 -> 1335;
4011 -> 1369;
4011 -> 1464;
4011 -> 4010;
4011 -> 1473;
4011 -> 1363;
4011 -> 1364;
4011 -> 3996;
4011 -> 1371;
4011 -> 1368;
4012 -> 1488;
4013 -> 4012;
4013 -> 1383;
4014 -> 4013;
4014 -> 1385;
4014 -> 1383;
4015 -> 1381;
4015 -> 1415;
4015 -> 1484;
4015 -> 4014;
4015 -> 1493;
4015 -> 1409;
4015 -> 1410;
4015 -> 4000;
4015 -> 1417;
4015 -> 1414;
4016 -> 1429;
4017 -> 4016;
4017 -> 1250;
4018 -> 4017;
4018 -> 1252;
4018 -> 1250;
4019 -> 1448;
4020 -> 4019;
4020 -> 1288;
4021 -> 4020;
4021 -> 1290;
4021 -> 1288;
4022 -> 1286;
4022 -> 1318;
4022 -> 1444;
4022 -> 4021;
4022 -> 1453;
4022 -> 1314;
4022 -> 1315;
4022 -> 4007;
4022 -> 1325;
4022 -> 1317;
4023 -> 1468;
4024 -> 4023;
4024 -> 1337;
4025 -> 4024;
4025 -> 1339;
4025 -> 1337;
4026 -> 1335;
4026 -> 1369;
4026 -> 1464;
4026 -> 4025;
4026 -> 1473;
4026 -> 1363;
4026 -> 1364;
4026 -> 4011;
4026 -> 1371;
4026 -> 1368;
4027 -> 1488;
4028 -> 4027;
4028 -> 1383;
4029 -> 4028;
4029 -> 1385;
4029 -> 1383;
4030 -> 1381;
4030 -> 1415;
4030 -> 1484;
4030 -> 4029;
4030 -> 1493;
4030 -> 1409;
4030 -> 1410;
4030 -> 4015;
4030 -> 1417;
4030 -> 1414;
4031 -> 1429;
4032 -> 4031;
4032 -> 1250;
4033 -> 4032;
4033 -> 1252;
4033 -> 1250;
4034 -> 1448;
4035 -> 4034;
4035 -> 1288;
4036 -> 4035;
4036 -> 1290;
4036 -> 1288;
4037 -> 1286;
4037 -> 1318;
4037 -> 1444;
4037 -> 4036;
4037 -> 1453;
4037 -> 1314;
4037 -> 1315;
4037 -> 4022;
4037 -> 1325;
4037 -> 1317;
4038 -> 1468;
4039 -> 4038;
4039 -> 1337;
4040 -> 4039;
4040 -> 1339;
4040 -> 1337;
4041 -> 1335;
4041 -> 1369;
4041 -> 1464;
4041 -> 4040;
4041 -> 1473;
4041 -> 1363;
4041 -> 1364;
4041 -> 4026;
4041 -> 1371;
4041 -> 1368;
4042 -> 1488;
4043 -> 4042;
4043 -> 1383;
4044 -> 4043;
4044 -> 1385;
4044 -> 1383;
4045 -> 1381;
4045 -> 1415;
4045 -> 1484;
4045 -> 4044;
4045 -> 1493;
4045 -> 1409;
4045 -> 1410;
4045 -> 4030;
4045 -> 1417;
4045 -> 1414;
4046 -> 1429;
4047 -> 4046;
4047 -> 1250;
4048 -> 4047;
4048 -> 1252;
4048 -> 1250;
4049 -> 1448;
4050 -> 4049;
4050 -> 1288;
4051 -> 4050;
4051 -> 1290;
4051 -> 1288;
4052 -> 1286;
4052 -> 1318;
4052 -> 1444;
4052 -> 4051;
4052 -> 1453;
4052 -> 1314;
4052 -> 1315;
4052 -> 4037;
4052 -> 1325;
4052 -> 1317;
4053 -> 1468;
4054 -> 4053;
4054 -> 1337;
4055 -> 4054;
4055 -> 1339;
4055 -> 1337;
4056 -> 1335;
4056 -> 1369;
4056 -> 1464;
4056 -> 4055;
4056 -> 1473;
4056 -> 1363;
4056 -> 1364;
4056 -> 4041;
4056 -> 1371;
4056 -> 1368;
4057 -> 1488;
4058 -> 4057;
4058 -> 1383;
4059 -> 4058;
4059 -> 1385;
4059 -> 1383;
4060 -> 1381;
4060 -> 1415;
4060 -> 1484;
4060 -> 4059;
4060 -> 1493;
4060 -> 1409;
4060 -> 1410;
4060 -> 4045;
4060 -> 1417;
4060 -> 1414;
4061 -> 1429;
4062 -> 4061;
4062 -> 1250;
4063 -> 4062;
4063 -> 1252;
4063 -> 1250;
4064 -> 1448;
4065 -> 4064;
4065 -> 1288;
4066 -> 4065;
4066 -> 1290;
4066 -> 1288;
4067 -> 1286;
4067 -> 1318;
4067 -> 1444;
4067 -> 4066;
4067 -> 1453;
4067 -> 1314;
4067 -> 1315;
4067 -> 4052;
4067 -> 1325;
4067 -> 1317;
4068 -> 1468;
4069 -> 4068;
4069 -> 1337;
4070 -> 4069;
4070 -> 1339;
4070 -> 1337;
4071 -> 1335;
4071 -> 1369;
4071 -> 1464;
4071 -> 4070;
4071 -> 1473;
4071 -> 1363;
4071 -> 1364;
4071 -> 4056;
4071 -> 1371;
4071 -> 1368;
4072 -> 1488;
4073 -> 4072;
4073 -> 1383;
4074 -> 4073;
4074 -> 1385;
4074 -> 1383;
4075 -> 1381;
4075 -> 1415;
4075 -> 1484;
4075 -> 4074;
4075 -> 1493;
4075 -> 1409;
4075 -> 1410;
4075 -> 4060;
4075 -> 1417;
4075 -> 1414;
4076 -> 1429;
4077 -> 4076;
4077 -> 1250;
4078 -> 4077;
4078 -> 1252;
4078 -> 1250;
4079 -> 1448;
4080 -> 4079;
4080 -> 1288;
4081 -> 4080;
4081 -> 1290;
4081 -> 1288;
4082 -> 1286;
4082 -> 1318;
4082 -> 1444;
4082 -> 4081;
4082 -> 1453;
4082 -> 1314;
4082 -> 1315;
4082 -> 4067;
4082 -> 1325;
4082 -> 1317;
4083 -> 1468;
4084 -> 4083;
4084 -> 1337;
4085 -> 4084;
4085 -> 1339;
4085 -> 1337;
4086 -> 1335;
4086 -> 1369;
4086 -> 1464;
4086 -> 4085;
4086 -> 1473;
4086 -> 1363;
4086 -> 1364;
4086 -> 4071;
4086 -> 1371;
4086 -> 1368;
4087 -> 1488;
4088 -> 4087;
4088 -> 1383;
4089 -> 4088;
4089 -> 1385;
4089 -> 1383;
4090 -> 1381;
4090 -> 1415;
4090 -> 1484;
4090 -> 4089;
4090 -> 1493;
4090 -> 1409;
4090 -> 1410;
4090 -> 4075;
4090 -> 1417;
4090 -> 1414;
4091 -> 1429;
4092 -> 4091;
4092 -> 1250;
4093 -> 4092;
4093 -> 1252;
4093 -> 1250;
4094 -> 1448;
4095 -> 4094;
4095 -> 1288;
4096 -> 4095;
4096 -> 1290;
4096 -> 1288;
4097 -> 1286;
4097 -> 1318;
4097 -> 1444;
4097 -> 4096;
4097 -> 1453;
4097 -> 1314;
4097 -> 1315;
4097 -> 4082;
4097 -> 1325;
4097 -> 1317;
4098 -> 1468;
4099 -> 4098;
4099 -> 1337;
4100 -> 4099;
4100 -> 1339;
4100 -> 1337;
4101 -> 1335;
4101 -> 1369;
4101 -> 1464;
4101 -> 4100;
4101 -> 1473;
4101 -> 1363;
4101 -> 1364;
4101 -> 4086;
4101 -> 1371;
4101 -> 1368;
4102 -> 1488;
4103 -> 4102;
4103 -> 1383;
4104 -> 4103;
4104 -> 1385;
4104 -> 1383;
4105 -> 1381;
4105 -> 1415;
4105 -> 1484;
4105 -> 4104;
4105 -> 1493;
4105 -> 1409;
4105 -> 1410;
4105 -> 4090;
4105 -> 1417;
4105 -> 1414;
4106 -> 1429;
4107 -> 4106;
4107 -> 1250;
4108 -> 4107;
4108 -> 1252;
4108 -> 1250;
4109 -> 1448;
4110 -> 4109;
4110 -> 1288;
4111 -> 4110;
4111 -> 1290;
4111 -> 1288;
4112 -> 1286;
4112 -> 1318;
4112 -> 1444;
4112 -> 4111;
4112 -> 1453;
4112 -> 1314;
4112 -> 1315;
4112 -> 4097;
4112 -> 1325;
4112 -> 1317;
4113 -> 1468;
4114 -> 4113;
4114 -> 1337;
4115 -> 4114;
4115 -> 1339;
4115 -> 1337;
4116 -> 1335;
4116 -> 1369;
4116 -> 1464;
4116 -> 4115;
4116 -> 1473;
4116 -> 1363;
4116 -> 1364;
4116 -> 4101;
4116 -> 1371;
4116 -> 1368;
4117 -> 1488;
4118 -> 4117;
4118 -> 1383;
4119 -> 4118;
4119 -> 1385;
4119 -> 1383;
4120 -> 1381;
4120 -> 1415;
4120 -> 1484;
4120 -> 4119;
4120 -> 1493;
4120 -> 1409;
4120 -> 1410;
4120 -> 4105;
4120 -> 1417;
4120 -> 1414;
4121 -> 1429;
4122 -> 4121;
4122 -> 1250;
4123 -> 4122;
4123 -> 1252;
4123 -> 1250;
4124 -> 1448;
4125 -> 4124;
4125 -> 1288;
4126 -> 4125;
4126 -> 1290;
4126 -> 1288;
4127 -> 1286;
4127 -> 1318;
4127 -> 1444;
4127 -> 4126;
4127 -> 1453;
4127 -> 1314;
4127 -> 1315;
4127 -> 4112;
4127 -> 1325;
4127 -> 1317;
4128 -> 1468;
4129 -> 4128;
4129 -> 1337;
4130 -> 4129;
4130 -> 1339;
4130 -> 1337;
4131 -> 1335;
4131 -> 1369;
4131 -> 1464;
4131 -> 4130;
4131 -> 1473;
4131 -> 1363;
4131 -> 1364;
4131 -> 4116;
4131 -> 1371;
4131 -> 1368;
4132 -> 1488;
4133 -> 4132;
4133 -> 1383;
4134 -> 4133;
4134 -> 1385;
4134 -> 1383;
4135 -> 1381;
4135 -> 1415;
4135 -> 1484;
4135 -> 4134;
4135 -> 1493;
4135 -> 1409;
4135 -> 1410;
4135 -> 4120;
4135 -> 1417;
4135 -> 1414;
4136 -> 1429;
4137 -> 4136;
4137 -> 1250;
4138 -> 4137;
4138 -> 1252;
4138 -> 1250;
4139 -> 1448;
4140 -> 4139;
4140 -> 1288;
4141 -> 4140;
4141 -> 1290;
4141 -> 1288;
4142 -> 1286;
4142 -> 1318;
4142 -> 1444;
4142 -> 4141;
4142 -> 1453;
4142 -> 1314;
4142 -> 1315;
4142 -> 4127;
4142 -> 1325;
4142 -> 1317;
4143 -> 1468;
4144 -> 4143;
4144 -> 1337;
4145 -> 4144;
4145 -> 1339;
4145 -> 1337;
4146 -> 1335;
4146 -> 1369;
4146 -> 1464;
4146 -> 4145;
4146 -> 1473;
4146 -> 1363;
4146 -> 1364;
4146 -> 4131;
4146 -> 1371;
4146 -> 1368;
4147 -> 1488;
4148 -> 4147;
4148 -> 1383;
4149 -> 4148;
4149 -> 1385;
4149 -> 1383;
4150 -> 1381;
4150 -> 1415;
4150 -> 1484;
4150 -> 4149;
4150 -> 1493;
4150 -> 1409;
4150 -> 1410;
4150 -> 4135;
4150 -> 1417;
4150 -> 1414;
4151 -> 1429;
4152 -> 4151;
4152 -> 1250;
4153 -> 4152;
4153 -> 1252;
4153 -> 1250;
4154 -> 1448;
4155 -> 4154;
4155 -> 1288;
4156 -> 4155;
4156 -> 1290;
4156 -> 1288;
4157 -> 1286;
4157 -> 1318;
4157 -> 1444;
4157 -> 4156;
4157 -> 1453;
4157 -> 1314;
4157 -> 1315;
4157 -> 4142;
4157 -> 1325;
4157 -> 1317;
4158 -> 1468;
4159 -> 4158;
4159 -> 1337;
4160 -> 4159;
4160 -> 1339;
4160 -> 1337;
4161 -> 1335;
4161 -> 1369;
4161 -> 1464;
4161 -> 4160;
4161 -> 1473;
4161 -> 1363;
4161 -> 1364;
4161 -> 4146;
4161 -> 1371;
4161 -> 1368;
4162 -> 1488;
4163 -> 4162;
4163 -> 1383;
4164 -> 4163;
4164 -> 1385;
4164 -> 1383;
4165 -> 1381;
4165 -> 1415;
4165 -> 1484;
4165 -> 4164;
4165 -> 1493;
4165 -> 1409;
4165 -> 1410;
4165 -> 4150;
4165 -> 1417;
4165 -> 1414;
4166 -> 1429;
4167 -> 4166;
4167 -> 1250;
4168 -> 4167;
4168 -> 1252;
4168 -> 1250;
4169 -> 1448;
4170 -> 4169;
4170 -> 1288;
4171 -> 4170;
4171 -> 1290;
4171 -> 1288;
4172 -> 1286;
4172 -> 1318;
4172 -> 1444;
4172 -> 4171;
4172 -> 1453;
4172 -> 1314;
4172 -> 1315;
4172 -> 4157;
4172 -> 1325;
4172 -> 1317;
4173 -> 1468;
4174 -> 4173;
4174 -> 1337;
4175 -> 4174;
4175 -> 1339;
4175 -> 1337;
4176 -> 1335;
4176 -> 1369;
4176 -> 1464;
4176 -> 4175;
4176 -> 1473;
4176 -> 1363;
4176 -> 1364;
4176 -> 4161;
4176 -> 1371;
4176 -> 1368;
4177 -> 1488;
4178 -> 4177;
4178 -> 1383;
4179 -> 4178;
4179 -> 1385;
4179 -> 1383;
4180 -> 1381;
4180 -> 1415;
4180 -> 1484;
4180 -> 4179;
4180 -> 1493;
4180 -> 1409;
4180 -> 1410;
4180 -> 4165;
4180 -> 1417;
4180 -> 1414;
4181 -> 1429;
4182 -> 4181;
4182 -> 1250;
4183 -> 4182;
4183 -> 1252;
4183 -> 1250;
4184 -> 1448;
4185 -> 4184;
4185 -> 1288;
4186 -> 4185;
4186 -> 1290;
4186 -> 1288;
4187 -> 1286;
4187 -> 1318;
4187 -> 1444;
4187 -> 4186;
4187 -> 1453;
4187 -> 1314;
4187 -> 1315;
4187 -> 4172;
4187 -> 1325;
4187 -> 1317;
4188 -> 1468;
4189 -> 4188;
4189 -> 1337;
4190 -> 4189;
4190 -> 1339;
4190 -> 1337;
4191 -> 1335;
4191 -> 1369;
4191 -> 1464;
4191 -> 4190;
4191 -> 1473;
4191 -> 1363;
4191 -> 1364;
4191 -> 4176;
4191 -> 1371;
4191 -> 1368;
4192 -> 1488;
4193 -> 4192;
4193 -> 1383;
4194 -> 4193;
4194 -> 1385;
4194 -> 1383;
4195 -> 1381;
4195 -> 1415;
4195 -> 1484;
4195 -> 4194;
4195 -> 1493;
4195 -> 1409;
4195 -> 1410;
4195 -> 4180;
4195 -> 1417;
4195 -> 1414;
4196 -> 1429;
4197 -> 4196;
4197 -> 1250;
4198 -> 4197;
4198 -> 1252;
4198 -> 1250;
4199 -> 1448;
4200 -> 4199;
4200 -> 1288;
4201 -> 4200;
4201 -> 1290;
4201 -> 1288;
4202 -> 1286;
4202 -> 1318;
4202 -> 1444;
4202 -> 4201;
4202 -> 1453;
4202 -> 1314;
4202 -> 1315;
4202 -> 4187;
4202 -> 1325;
4202 -> 1317;
4203 -> 1468;
4204 -> 4203;
4204 -> 1337;
4205 -> 4204;
4205 -> 1339;
4205 -> 1337;
4206 -> 1335;
4206 -> 1369;
4206 -> 1464;
4206 -> 4205;
4206 -> 1473;
4206 -> 1363;
4206 -> 1364;
4206 -> 4191;
4206 -> 1371;
4206 -> 1368;
4207 -> 1488;
4208 -> 4207;
4208 -> 1383;
4209 -> 4208;
4209 -> 1385;
4209 -> 1383;
4210 -> 1381;
4210 -> 1415;
4210 -> 1484;
4210 -> 4209;
4210 -> 1493;
4210 -> 1409;
4210 -> 1410;
4210 -> 4195;
4210 -> 1417;
4210 -> 1414;
4211 -> 1429;
4212 -> 4211;
4212 -> 1250;
4213 -> 4212;
4213 -> 1252;
4213 -> 1250;
4214 -> 1448;
4215 -> 4214;
4215 -> 1288;
4216 -> 4215;
4216 -> 1290;
4216 -> 1288;
4217 -> 1286;
4217 -> 1318;
4217 -> 1444;
4217 -> 4216;
4217 -> 1453;
4217 -> 1314;
4217 -> 1315;
4217 -> 4202;
4217 -> 1325;
4217 -> 1317;
4218 -> 1468;
4219 -> 4218;
4219 -> 1337;
4220 -> 4219;
4220 -> 1339;
4220 -> 1337;
4221 -> 1335;
4221 -> 1369;
4221 -> 1464;
4221 -> 4220;
4221 -> 1473;
4221 -> 1363;
4221 -> 1364;
4221 -> 4206;
4221 -> 1371;
4221 -> 1368;
4222 -> 1488;
4223 -> 4222;
4223 -> 1383;
4224 -> 4223;
4224 -> 1385;
4224 -> 1383;
4225 -> 1381;
4225 -> 1415;
4225 -> 1484;
4225 -> 4224;
4225 -> 1493;
4225 -> 1409;
4225 -> 1410;
4225 -> 4210;
4225 -> 1417;
4225 -> 1414;
4226 -> 1429;
4227 -> 4226;
4227 -> 1250;
4228 -> 4227;
4228 -> 1252;
4228 -> 1250;
4229 -> 1448;
4230 -> 4229;
4230 -> 1288;
4231 -> 4230;
4231 -> 1290;
4231 -> 1288;
4232 -> 1286;
4232 -> 1318;
4232 -> 1444;
4232 -> 4231;
4232 -> 1453;
4232 -> 1314;
4232 -> 1315;
4232 -> 4217;
4232 -> 1325;
4232 -> 1317;
4233 -> 1468;
4234 -> 4233;
4234 -> 1337;
4235 -> 4234;
4235 -> 1339;
4235 -> 1337;
4236 -> 1335;
4236 -> 1369;
4236 -> 1464;
4236 -> 4235;
4236 -> 1473;
4236 -> 1363;
4236 -> 1364;
4236 -> 4221;
4236 -> 1371;
4236 -> 1368;
4237 -> 1488;
4238 -> 4237;
4238 -> 1383;
4239 -> 4238;
4239 -> 1385;
4239 -> 1383;
4240 -> 1381;
4240 -> 1415;
4240 -> 1484;
4240 -> 4239;
4240 -> 1493;
4240 -> 1409;
4240 -> 1410;
4240 -> 4225;
4240 -> 1417;
4240 -> 1414;
4241 -> 1429;
4242 -> 4241;
4242 -> 1250;
4243 -> 4242;
4243 -> 1252;
4243 -> 1250;
4244 -> 1448;
4245 -> 4244;
4245 -> 1288;
4246 -> 4245;
4246 -> 1290;
4246 -> 1288;
4247 -> 1286;
4247 -> 1318;
4247 -> 1444;
4247 -> 4246;
4247 -> 1453;
4247 -> 1314;
4247 -> 1315;
4247 -> 4232;
4247 -> 1325;
4247 -> 1317;
4248 -> 1468;
4249 -> 4248;
4249 -> 1337;
4250 -> 4249;
4250 -> 1339;
4250 -> 1337;
4251 -> 1335;
4251 -> 1369;
4251 -> 1464;
4251 -> 4250;
4251 -> 1473;
4251 -> 1363;
4251 -> 1364;
4251 -> 4236;
4251 -> 1371;
4251 -> 1368;
4252 -> 1488;
4253 -> 4252;
4253 -> 1383;
4254 -> 4253;
4254 -> 1385;
4254 -> 1383;
4255 -> 1381;
4255 -> 1415;
4255 -> 1484;
4255 -> 4254;
4255 -> 1493;
4255 -> 1409;
4255 -> 1410;
4255 -> 4240;
4255 -> 1417;
4255 -> 1414;
4256 -> 1429;
4257 -> 4256;
4257 -> 1250;
4258 -> 4257;
4258 -> 1252;
4258 -> 1250;
4259 -> 1448;
4260 -> 4259;
4260 -> 1288;
4261 -> 4260;
4261 -> 1290;
4261 -> 1288;
4262 -> 1286;
4262 -> 1318;
4262 -> 1444;
4262 -> 4261;
4262 -> 1453;
4262 -> 1314;
4262 -> 1315;
4262 -> 4247;
4262 -> 1325;
4262 -> 1317;
4263 -> 1468;
4264 -> 4263;
4264 -> 1337;
4265 -> 4264;
4265 -> 1339;
4265 -> 1337;
4266 -> 1335;
4266 -> 1369;
4266 -> 1464;
4266 -> 4265;
4266 -> 1473;
4266 -> 1363;
4266 -> 1364;
4266 -> 4251;
4266 -> 1371;
4266 -> 1368;
4267 -> 1488;
4268 -> 4267;
4268 -> 1383;
4269 -> 4268;
4269 -> 1385;
4269 -> 1383;
4270 -> 1381;
4270 -> 1415;
4270 -> 1484;
4270 -> 4269;
4270 -> 1493;
4270 -> 1409;
4270 -> 1410;
4270 -> 4255;
4270 -> 1417;
4270 -> 1414;
4271 -> 1429;
4272 -> 4271;
4272 -> 1250;
4273 -> 4272;
4273 -> 1252;
4273 -> 1250;
4274 -> 1448;
4275 -> 4274;
4275 -> 1288;
4276 -> 4275;
4276 -> 1290;
4276 -> 1288;
4277 -> 1286;
4277 -> 1318;
4277 -> 1444;
4277 -> 4276;
4277 -> 1453;
4277 -> 1314;
4277 -> 1315;
4277 -> 4262;
4277 -> 1325;
4277 -> 1317;
4278 -> 1468;
4279 -> 4278;
4279 -> 1337;
4280 -> 4279;
4280 -> 1339;
4280 -> 1337;
4281 -> 1335;
4281 -> 1369;
4281 -> 1464;
4281 -> 4280;
4281 -> 1473;
4281 -> 1363;
4281 -> 1364;
4281 -> 4266;
4281 -> 1371;
4281 -> 1368;
4282 -> 1488;
4283 -> 4282;
4283 -> 1383;
4284 -> 4283;
4284 -> 1385;
4284 -> 1383;
4285 -> 1381;
4285 -> 1415;
4285 -> 1484;
4285 -> 4284;
4285 -> 1493;
4285 -> 1409;
4285 -> 1410;
4285 -> 4270;
4285 -> 1417;
4285 -> 1414;
4286 -> 1429;
4287 -> 4286;
4287 -> 1250;
4288 -> 4287;
4288 -> 1252;
4288 -> 1250;
4289 -> 1448;
4290 -> 4289;
4290 -> 1288;
4291 -> 4290;
4291 -> 1290;
4291 -> 1288;
4292 -> 1286;
4292 -> 1318;
4292 -> 1444;
4292 -> 4291;
4292 -> 1453;
4292 -> 1314;
4292 -> 1315;
4292 -> 4277;
4292 -> 1325;
4292 -> 1317;
4293 -> 1468;
4294 -> 4293;
4294 -> 1337;
4295 -> 4294;
4295 -> 1339;
4295 -> 1337;
4296 -> 1335;
4296 -> 1369;
4296 -> 1464;
4296 -> 4295;
4296 -> 1473;
4296 -> 1363;
4296 -> 1364;
4296 -> 4281;
4296 -> 1371;
4296 -> 1368;
4297 -> 1488;
4298 -> 4297;
4298 -> 1383;
4299 -> 4298;
4299 -> 1385;
4299 -> 1383;
4300 -> 1381;
4300 -> 1415;
4300 -> 1484;
4300 -> 4299;
4300 -> 1493;
4300 -> 1409;
4300 -> 1410;
4300 -> 4285;
4300 -> 1417;
4300 -> 1414;
4301 -> 1429;
4302 -> 4301;
4302 -> 1250;
4303 -> 4302;
4303 -> 1252;
4303 -> 1250;
4304 -> 1448;
4305 -> 4304;
4305 -> 1288;
4306 -> 4305;
4306 -> 1290;
4306 -> 1288;
4307 -> 1286;
4307 -> 1318;
4307 -> 1444;
4307 -> 4306;
4307 -> 1453;
4307 -> 1314;
4307 -> 1315;
4307 -> 4292;
4307 -> 1325;
4307 -> 1317;
4308 -> 1468;
4309 -> 4308;
4309 -> 1337;
4310 -> 4309;
4310 -> 1339;
4310 -> 1337;
4311 -> 1335;
4311 -> 1369;
4311 -> 1464;
4311 -> 4310;
4311 -> 1473;
4311 -> 1363;
4311 -> 1364;
4311 -> 4296;
4311 -> 1371;
4311 -> 1368;
4312 -> 1488;
4313 -> 4312;
4313 -> 1383;
4314 -> 4313;
4314 -> 1385;
4314 -> 1383;
4315 -> 1381;
4315 -> 1415;
4315 -> 1484;
4315 -> 4314;
4315 -> 1493;
4315 -> 1409;
4315 -> 1410;
4315 -> 4300;
4315 -> 1417;
4315 -> 1414;
4316 -> 1429;
4317 -> 4316;
4317 -> 1250;
4318 -> 4317;
4318 -> 1252;
4318 -> 1250;
4319 -> 1448;
4320 -> 4319;
4320 -> 1288;
4321 -> 4320;
4321 -> 1290;
4321 -> 1288;
4322 -> 1286;
4322 -> 1318;
4322 -> 1444;
4322 -> 4321;
4322 -> 1453;
4322 -> 1314;
4322 -> 1315;
4322 -> 4307;
4322 -> 1325;
4322 -> 1317;
4323 -> 1468;
4324 -> 4323;
4324 -> 1337;
4325 -> 4324;
4325 -> 1339;
4325 -> 1337;
4326 -> 1335;
4326 -> 1369;
4326 -> 1464;
4326 -> 4325;
4326 -> 1473;
4326 -> 1363;
4326 -> 1364;
4326 -> 4311;
4326 -> 1371;
4326 -> 1368;
4327 -> 1488;
4328 -> 4327;
4328 -> 1383;
4329 -> 4328;
4329 -> 1385;
4329 -> 1383;
4330 -> 1381;
4330 -> 1415;
4330 -> 1484;
4330 -> 4329;
4330 -> 1493;
4330 -> 1409;
4330 -> 1410;
4330 -> 4315;
4330 -> 1417;
4330 -> 1414;
4331 -> 1429;
4332 -> 4331;
4332 -> 1250;
4333 -> 4332;
4333 -> 1252;
4333 -> 1250;
4334 -> 1448;
4335 -> 4334;
4335 -> 1288;
4336 -> 4335;
4336 -> 1290;
4336 -> 1288;
4337 -> 1286;
4337 -> 1318;
4337 -> 1444;
4337 -> 4336;
4337 -> 1453;
4337 -> 1314;
4337 -> 1315;
4337 -> 4322;
4337 -> 1325;
4337 -> 1317;
4338 -> 1468;
4339 -> 4338;
4339 -> 1337;
4340 -> 4339;
4340 -> 1339;
4340 -> 1337;
4341 -> 1335;
4341 -> 1369;
4341 -> 1464;
4341 -> 4340;
4341 -> 1473;
4341 -> 1363;
4341 -> 1364;
4341 -> 4326;
4341 -> 1371;
4341 -> 1368;
4342 -> 1488;
4343 -> 4342;
4343 -> 1383;
4344 -> 4343;
4344 -> 1385;
4344 -> 1383;
4345 -> 1381;
4345 -> 1415;
4345 -> 1484;
4345 -> 4344;
4345 -> 1493;
4345 -> 1409;
4345 -> 1410;
4345 -> 4330;
4345 -> 1417;
4345 -> 1414;
4346 -> 1429;
4347 -> 4346;
4347 -> 1250;
4348 -> 4347;
4348 -> 1252;
4348 -> 1250;
4349 -> 1448;
4350 -> 4349;
4350 -> 1288;
4351 -> 4350;
4351 -> 1290;
4351 -> 1288;
4352 -> 1286;
4352 -> 1318;
4352 -> 1444;
4352 -> 4351;
4352 -> 1453;
4352 -> 1314;
4352 -> 1315;
4352 -> 4337;
4352 -> 1325;
4352 -> 1317;
4353 -> 1468;
4354 -> 4353;
4354 -> 1337;
4355 -> 4354;
4355 -> 1339;
4355 -> 1337;
4356 -> 1335;
4356 -> 1369;
4356 -> 1464;
4356 -> 4355;
4356 -> 1473;
4356 -> 1363;
4356 -> 1364;
4356 -> 4341;
4356 -> 1371;
4356 -> 1368;
4357 -> 1488;
4358 -> 4357;
4358 -> 1383;
4359 -> 4358;
4359 -> 1385;
4359 -> 1383;
4360 -> 1381;
4360 -> 1415;
4360 -> 1484;
4360 -> 4359;
4360 -> 1493;
4360 -> 1409;
4360 -> 1410;
4360 -> 4345;
4360 -> 1417;
4360 -> 1414;
4361 -> 1429;
4362 -> 4361;
4362 -> 1250;
4363 -> 4362;
4363 -> 1252;
4363 -> 1250;
4364 -> 1448;
4365 -> 4364;
4365 -> 1288;
4366 -> 4365;
4366 -> 1290;
4366 -> 1288;
4367 -> 1286;
4367 -> 1318;
4367 -> 1444;
4367 -> 4366;
4367 -> 1453;
4367 -> 1314;
4367 -> 1315;
4367 -> 4352;
4367 -> 1325;
4367 -> 1317;
4368 -> 1468;
4369 -> 4368;
4369 -> 1337;
4370 -> 4369;
4370 -> 1339;
4370 -> 1337;
4371 -> 1335;
4371 -> 1369;
4371 -> 1464;
4371 -> 4370;
4371 -> 1473;
4371 -> 1363;
4371 -> 1364;
4371 -> 4356;
4371 -> 1371;
4371 -> 1368;
4372 -> 1488;
4373 -> 4372;
4373 -> 1383;
4374 -> 4373;
4374 -> 1385;
4374 -> 1383;
4375 -> 1381;
4375 -> 1415;
4375 -> 1484;
4375 -> 4374;
4375 -> 1493;
4375 -> 1409;
4375 -> 1410;
4375 -> 4360;
4375 -> 1417;
4375 -> 1414;
4376 -> 1429;
4377 -> 4376;
4377 -> 1250;
4378 -> 4377;
4378 -> 1252;
4378 -> 1250;
4379 -> 1448;
4380 -> 4379;
4380 -> 1288;
4381 -> 4380;
4381 -> 1290;
4381 -> 1288;
4382 -> 1286;
4382 -> 1318;
4382 -> 1444;
4382 -> 4381;
4382 -> 1453;
4382 -> 1314;
4382 -> 1315;
4382 -> 4367;
4382 -> 1325;
4382 -> 1317;
4383 -> 1468;
4384 -> 4383;
4384 -> 1337;
4385 -> 4384;
4385 -> 1339;
4385 -> 1337;
4386 -> 1335;
4386 -> 1369;
4386 -> 1464;
4386 -> 4385;
4386 -> 1473;
4386 -> 1363;
4386 -> 1364;
4386 -> 4371;
4386 -> 1371;
4386 -> 1368;
4387 -> 1488;
4388 -> 4387;
4388 -> 1383;
4389 -> 4388;
4389 -> 1385;
4389 -> 1383;
4390 -> 1381;
4390 -> 1415;
4390 -> 1484;
4390 -> 4389;
4390 -> 1493;
4390 -> 1409;
4390 -> 1410;
4390 -> 4375;
4390 -> 1417;
4390 -> 1414;
4391 -> 1429;
4392 -> 4391;
4392 -> 1250;
4393 -> 4392;
4393 -> 1252;
4393 -> 1250;
4394 -> 1448;
4395 -> 4394;
4395 -> 1288;
4396 -> 4395;
4396 -> 1290;
4396 -> 1288;
4397 -> 1286;
4397 -> 1318;
4397 -> 1444;
4397 -> 4396;
4397 -> 1453;
4397 -> 1314;
4397 -> 1315;
4397 -> 4382;
4397 -> 1325;
4397 -> 1317;
4398 -> 1468;
4399 -> 4398;
4399 -> 1337;
4400 -> 4399;
4400 -> 1339;
4400 -> 1337;
4401 -> 1335;
4401 -> 1369;
4401 -> 1464;
4401 -> 4400;
4401 -> 1473;
4401 -> 1363;
4401 -> 1364;
4401 -> 4386;
4401 -> 1371;
4401 -> 1368;
4402 -> 1488;
4403 -> 4402;
4403 -> 1383;
4404 -> 4403;
4404 -> 1385;
4404 -> 1383;
4405 -> 1381;
4405 -> 1415;
4405 -> 1484;
4405 -> 4404;
4405 -> 1493;
4405 -> 1409;
4405 -> 1410;
4405 -> 4390;
4405 -> 1417;
4405 -> 1414;
4406 -> 1429;
4407 -> 4406;
4407 -> 1250;
4408 -> 4407;
4408 -> 1252;
4408 -> 1250;
4409 -> 1448;
4410 -> 4409;
4410 -> 1288;
4411 -> 4410;
4411 -> 1290;
4411 -> 1288;
4412 -> 1286;
4412 -> 1318;
4412 -> 1444;
4412 -> 4411;
4412 -> 1453;
4412 -> 1314;
4412 -> 1315;
4412 -> 4397;
4412 -> 1325;
4412 -> 1317;
4413 -> 1468;
4414 -> 4413;
4414 -> 1337;
4415 -> 4414;
4415 -> 1339;
4415 -> 1337;
4416 -> 1335;
4416 -> 1369;
4416 -> 1464;
4416 -> 4415;
4416 -> 1473;
4416 -> 1363;
4416 -> 1364;
4416 -> 4401;
4416 -> 1371;
4416 -> 1368;
4417 -> 1488;
4418 -> 4417;
4418 -> 1383;
4419 -> 4418;
4419 -> 1385;
4419 -> 1383;
4420 -> 1381;
4420 -> 1415;
4420 -> 1484;
4420 -> 4419;
4420 -> 1493;
4420 -> 1409;
4420 -> 1410;
4420 -> 4405;
4420 -> 1417;
4420 -> 1414;
4421 -> 1429;
4422 -> 4421;
4422 -> 1250;
4423 -> 4422;
4423 -> 1252;
4423 -> 1250;
4424 -> 1448;
4425 -> 4424;
4425 -> 1288;
4426 -> 4425;
4426 -> 1290;
4426 -> 1288;
4427 -> 1286;
4427 -> 1318;
4427 -> 1444;
4427 -> 4426;
4427 -> 1453;
4427 -> 1314;
4427 -> 1315;
4427 -> 4412;
4427 -> 1325;
4427 -> 1317;
4428 -> 1468;
4429 -> 4428;
4429 -> 1337;
4430 -> 4429;
4430 -> 1339;
4430 -> 1337;
4431 -> 1335;
4431 -> 1369;
4431 -> 1464;
4431 -> 4430;
4431 -> 1473;
4431 -> 1363;
4431 -> 1364;
4431 -> 4416;
4431 -> 1371;
4431 -> 1368;
4432 -> 1488;
4433 -> 4432;
4433 -> 1383;
4434 -> 4433;
4434 -> 1385;
4434 -> 1383;
4435 -> 1381;
4435 -> 1415;
4435 -> 1484;
4435 -> 4434;
4435 -> 1493;
4435 -> 1409;
4435 -> 1410;
4435 -> 4420;
4435 -> 1417;
4435 -> 1414;
4436 -> 1429;
4437 -> 4436;
4437 -> 1250;
4438 -> 4437;
4438 -> 1252;
4438 -> 1250;
4439 -> 1448;
4440 -> 4439;
4440 -> 1288;
4441 -> 4440;
4441 -> 1290;
4441 -> 1288;
4442 -> 1286;
4442 -> 1318;
4442 -> 1444;
4442 -> 4441;
4442 -> 1453;
4442 -> 1314;
4442 -> 1315;
4442 -> 4427;
4442 -> 1325;
4442 -> 1317;
4443 -> 1468;
4444 -> 4443;
4444 -> 1337;
4445 -> 4444;
4445 -> 1339;
4445 -> 1337;
4446 -> 1335;
4446 -> 1369;
4446 -> 1464;
4446 -> 4445;
4446 -> 1473;
4446 -> 1363;
4446 -> 1364;
4446 -> 4431;
4446 -> 1371;
4446 -> 1368;
4447 -> 1488;
4448 -> 4447;
4448 -> 1383;
4449 -> 4448;
4449 -> 1385;
4449 -> 1383;
4450 -> 1381;
4450 -> 1415;
4450 -> 1484;
4450 -> 4449;
4450 -> 1493;
4450 -> 1409;
4450 -> 1410;
4450 -> 4435;
4450 -> 1417;
4450 -> 1414;
4451 -> 1429;
4452 -> 4451;
4452 -> 1250;
4453 -> 4452;
4453 -> 1252;
4453 -> 1250;
4454 -> 1448;
4455 -> 4454;
4455 -> 1288;
4456 -> 4455;
4456 -> 1290;
4456 -> 1288;
4457 -> 1286;
4457 -> 1318;
4457 -> 1444;
4457 -> 4456;
4457 -> 1453;
4457 -> 1314;
4457 -> 1315;
4457 -> 4442;
4457 -> 1325;
4457 -> 1317;
4458 -> 1468;
4459 -> 4458;
4459 -> 1337;
4460 -> 4459;
4460 -> 1339;
4460 -> 1337;
4461 -> 1335;
4461 -> 1369;
4461 -> 1464;
4461 -> 4460;
4461 -> 1473;
4461 -> 1363;
4461 -> 1364;
4461 -> 4446;
4461 -> 1371;
4461 -> 1368;
4462 -> 1488;
4463 -> 4462;
4463 -> 1383;
4464 -> 4463;
4464 -> 1385;
4464 -> 1383;
4465 -> 1381;
4465 -> 1415;
4465 -> 1484;
4465 -> 4464;
4465 -> 1493;
4465 -> 1409;
4465 -> 1410;
4465 -> 4450;
4465 -> 1417;
4465 -> 1414;
4466 -> 1429;
4467 -> 4466;
4467 -> 1250;
4468 -> 4467;
4468 -> 1252;
4468 -> 1250;
4469 -> 1448;
4470 -> 4469;
4470 -> 1288;
4471 -> 4470;
4471 -> 1290;
4471 -> 1288;
4472 -> 1286;
4472 -> 1318;
4472 -> 1444;
4472 -> 4471;
4472 -> 1453;
4472 -> 1314;
4472 -> 1315;
4472 -> 4457;
4472 -> 1325;
4472 -> 1317;
4473 -> 1468;
4474 -> 4473;
4474 -> 1337;
4475 -> 4474;
4475 -> 1339;
4475 -> 1337;
4476 -> 1335;
4476 -> 1369;
4476 -> 1464;
4476 -> 4475;
4476 -> 1473;
4476 -> 1363;
4476 -> 1364;
4476 -> 4461;
4476 -> 1371;
4476 -> 1368;
4477 -> 1488;
4478 -> 4477;
4478 -> 1383;
4479 -> 4478;
4479 -> 1385;
4479 -> 1383;
4480 -> 1381;
4480 -> 1415;
4480 -> 1484;
4480 -> 4479;
4480 -> 1493;
4480 -> 1409;
4480 -> 1410;
4480 -> 4465;
4480 -> 1417;
4480 -> 1414;
4481 -> 1429;
4482 -> 4481;
4482 -> 1250;
4483 -> 4482;
4483 -> 1252;
4483 -> 1250;
4484 -> 1448;
4485 -> 4484;
4485 -> 1288;
4486 -> 4485;
4486 -> 1290;
4486 -> 1288;
4487 -> 1286;
4487 -> 1318;
4487 -> 1444;
4487 -> 4486;
4487 -> 1453;
4487 -> 1314;
4487 -> 1315;
4487 -> 4472;
4487 -> 1325;
4487 -> 1317;
4488 -> 1468;
4489 -> 4488;
4489 -> 1337;
4490 -> 4489;
4490 -> 1339;
4490 -> 1337;
4491 -> 1335;
4491 -> 1369;
4491 -> 1464;
4491 -> 4490;
4491 -> 1473;
4491 -> 1363;
4491 -> 1364;
4491 -> 4476;
4491 -> 1371;
4491 -> 1368;
4492 -> 1488;
4493 -> 4492;
4493 -> 1383;
4494 -> 4493;
4494 -> 1385;
4494 -> 1383;
4495 -> 1381;
4495 -> 1415;
4495 -> 1484;
4495 -> 4494;
4495 -> 1493;
4495 -> 1409;
4495 -> 1410;
4495 -> 4480;
4495 -> 1417;
4495 -> 1414;
4496 -> 1429;
4497 -> 4496;
4497 -> 1250;
4498 -> 4497;
4498 -> 1252;
4498 -> 1250;
4499 -> 1448;
4500 -> 4499;
4500 -> 1288;
4501 -> 4500;
4501 -> 1290;
4501 -> 1288;
4502 -> 1286;
4502 -> 1318;
4502 -> 1444;
4502 -> 4501;
4502 -> 1453;
4502 -> 1314;
4502 -> 1315;
4502 -> 4487;
4502 -> 1325;
4502 -> 1317;
4503 -> 1468;
4504 -> 4503;
4504 -> 1337;
4505 -> 4504;
4505 -> 1339;
4505 -> 1337;
4506 -> 1335;
4506 -> 1369;
4506 -> 1464;
4506 -> 4505;
4506 -> 1473;
4506 -> 1363;
4506 -> 1364;
4506 -> 4491;
4506 -> 1371;
4506 -> 1368;
4507 -> 1488;
4508 -> 4507;
4508 -> 1383;
4509 -> 4508;
4509 -> 1385;
4509 -> 1383;
4510 -> 1381;
4510 -> 1415;
4510 -> 1484;
4510 -> 4509;
4510 -> 1493;
4510 -> 1409;
4510 -> 1410;
4510 -> 4495;
4510 -> 1417;
4510 -> 1414;
4511 -> 1429;
4512 -> 4511;
4512 -> 1250;
4513 -> 4512;
4513 -> 1252;
4513 -> 1250;
4514 -> 1448;
4515 -> 4514;
4515 -> 1288;
4516 -> 4515;
4516 -> 1290;
4516 -> 1288;
4517 -> 1286;
4517 -> 1318;
4517 -> 1444;
4517 -> 4516;
4517 -> 1453;
4517 -> 1314;
4517 -> 1315;
4517 -> 4502;
4517 -> 1325;
4517 -> 1317;
4518 -> 1468;
4519 -> 4518;
4519 -> 1337;
4520 -> 4519;
4520 -> 1339;
4520 -> 1337;
4521 -> 1335;
4521 -> 1369;
4521 -> 1464;
4521 -> 4520;
4521 -> 1473;
4521 -> 1363;
4521 -> 1364;
4521 -> 4506;
4521 -> 1371;
4521 -> 1368;
4522 -> 1488;
4523 -> 4522;
4523 -> 1383;
4524 -> 4523;
4524 -> 1385;
4524 -> 1383;
4525 -> 1381;
4525 -> 1415;
4525 -> 1484;
4525 -> 4524;
4525 -> 1493;
4525 -> 1409;
4525 -> 1410;
4525 -> 4510;
4525 -> 1417;
4525 -> 1414;
4526 -> 1429;
4527 -> 4526;
4527 -> 1250;
4528 -> 4527;
4528 -> 1252;
4528 -> 1250;
4529 -> 1448;
4530 -> 4529;
4530 -> 1288;
4531 -> 4530;
4531 -> 1290;
4531 -> 1288;
4532 -> 1286;
4532 -> 1318;
4532 -> 1444;
4532 -> 4531;
4532 -> 1453;
4532 -> 1314;
4532 -> 1315;
4532 -> 4517;
4532 -> 1325;
4532 -> 1317;
4533 -> 1468;
4534 -> 4533;
4534 -> 1337;
4535 -> 4534;
4535 -> 1339;
4535 -> 1337;
4536 -> 1335;
4536 -> 1369;
4536 -> 1464;
4536 -> 4535;
4536 -> 1473;
4536 -> 1363;
4536 -> 1364;
4536 -> 4521;
4536 -> 1371;
4536 -> 1368;
4537 -> 1488;
4538 -> 4537;
4538 -> 1383;
4539 -> 4538;
4539 -> 1385;
4539 -> 1383;
4540 -> 1381;
4540 -> 1415;
4540 -> 1484;
4540 -> 4539;
4540 -> 1493;
4540 -> 1409;
4540 -> 1410;
4540 -> 4525;
4540 -> 1417;
4540 -> 1414;
4541 -> 1429;
4542 -> 4541;
4542 -> 1250;
4543 -> 4542;
4543 -> 1252;
4543 -> 1250;
4544 -> 1448;
4545 -> 4544;
4545 -> 1288;
4546 -> 4545;
4546 -> 1290;
4546 -> 1288;
4547 -> 1286;
4547 -> 1318;
4547 -> 1444;
4547 -> 4546;
4547 -> 1453;
4547 -> 1314;
4547 -> 1315;
4547 -> 4532;
4547 -> 1325;
4547 -> 1317;
4548 -> 1468;
4549 -> 4548;
4549 -> 1337;
4550 -> 4549;
4550 -> 1339;
4550 -> 1337;
4551 -> 1335;
4551 -> 1369;
4551 -> 1464;
4551 -> 4550;
4551 -> 1473;
4551 -> 1363;
4551 -> 1364;
4551 -> 4536;
4551 -> 1371;
4551 -> 1368;
4552 -> 1488;
4553 -> 4552;
4553 -> 1383;
4554 -> 4553;
4554 -> 1385;
4554 -> 1383;
4555 -> 1381;
4555 -> 1415;
4555 -> 1484;
4555 -> 4554;
4555 -> 1493;
4555 -> 1409;
4555 -> 1410;
4555 -> 4540;
4555 -> 1417;
4555 -> 1414;
4556 -> 1429;
4557 -> 4556;
4557 -> 1250;
4558 -> 4557;
4558 -> 1252;
4558 -> 1250;
4559 -> 1448;
4560 -> 4559;
4560 -> 1288;
4561 -> 4560;
4561 -> 1290;
4561 -> 1288;
4562 -> 1286;
4562 -> 1318;
4562 -> 1444;
4562 -> 4561;
4562 -> 1453;
4562 -> 1314;
4562 -> 1315;
4562 -> 4547;
4562 -> 1325;
4562 -> 1317;
4563 -> 1468;
4564 -> 4563;
4564 -> 1337;
4565 -> 4564;
4565 -> 1339;
4565 -> 1337;
4566 -> 1335;
4566 -> 1369;
4566 -> 1464;
4566 -> 4565;
4566 -> 1473;
4566 -> 1363;
4566 -> 1364;
4566 -> 4551;
4566 -> 1371;
4566 -> 1368;
4567 -> 1488;
4568 -> 4567;
4568 -> 1383;
4569 -> 4568;
4569 -> 1385;
4569 -> 1383;
4570 -> 1381;
4570 -> 1415;
4570 -> 1484;
4570 -> 4569;
4570 -> 1493;
4570 -> 1409;
4570 -> 1410;
4570 -> 4555;
4570 -> 1417;
4570 -> 1414;
4571 -> 1429;
4572 -> 4571;
4572 -> 1250;
4573 -> 4572;
4573 -> 1252;
4573 -> 1250;
4574 -> 1448;
4575 -> 4574;
4575 -> 1288;
4576 -> 4575;
4576 -> 1290;
4576 -> 1288;
4577 -> 1286;
4577 -> 1318;
4577 -> 1444;
4577 -> 4576;
4577 -> 1453;
4577 -> 1314;
4577 -> 1315;
4577 -> 4562;
4577 -> 1325;
4577 -> 1317;
4578 -> 1468;
4579 -> 4578;
4579 -> 1337;
4580 -> 4579;
4580 -> 1339;
4580 -> 1337;
4581 -> 1335;
4581 -> 1369;
4581 -> 1464;
4581 -> 4580;
4581 -> 1473;
4581 -> 1363;
4581 -> 1364;
4581 -> 4566;
4581 -> 1371;
4581 -> 1368;
4582 -> 1488;
4583 -> 4582;
4583 -> 1383;
4584 -> 4583;
4584 -> 1385;
4584 -> 1383;
4585 -> 1381;
4585 -> 1415;
4585 -> 1484;
4585 -> 4584;
4585 -> 1493;
4585 -> 1409;
4585 -> 1410;
4585 -> 4570;
4585 -> 1417;
4585 -> 1414;
4586 -> 1429;
4587 -> 4586;
4587 -> 1250;
4588 -> 4587;
4588 -> 1252;
4588 -> 1250;
4589 -> 1448;
4590 -> 4589;
4590 -> 1288;
4591 -> 4590;
4591 -> 1290;
4591 -> 1288;
4592 -> 1286;
4592 -> 1318;
4592 -> 1444;
4592 -> 4591;
4592 -> 1453;
4592 -> 1314;
4592 -> 1315;
4592 -> 4577;
4592 -> 1325;
4592 -> 1317;
4593 -> 1468;
4594 -> 4593;
4594 -> 1337;
4595 -> 4594;
4595 -> 1339;
4595 -> 1337;
4596 -> 1335;
4596 -> 1369;
4596 -> 1464;
4596 -> 4595;
4596 -> 1473;
4596 -> 1363;
4596 -> 1364;
4596 -> 4581;
4596 -> 1371;
4596 -> 1368;
4597 -> 1488;
4598 -> 4597;
4598 -> 1383;
4599 -> 4598;
4599 -> 1385;
4599 -> 1383;
4600 -> 1381;
4600 -> 1415;
4600 -> 1484;
4600 -> 4599;
4600 -> 1493;
4600 -> 1409;
4600 -> 1410;
4600 -> 4585;
4600 -> 1417;
4600 -> 1414;
4601 -> 1429;
4602 -> 4601;
4602 -> 1250;
4603 -> 4602;
4603 -> 1252;
4603 -> 1250;
4604 -> 1448;
4605 -> 4604;
4605 -> 1288;
4606 -> 4605;
4606 -> 1290;
4606 -> 1288;
4607 -> 1286;
4607 -> 1318;
4607 -> 1444;
4607 -> 4606;
4607 -> 1453;
4607 -> 1314;
4607 -> 1315;
4607 -> 4592;
4607 -> 1325;
4607 -> 1317;
4608 -> 1468;
4609 -> 4608;
4609 -> 1337;
4610 -> 4609;
4610 -> 1339;
4610 -> 1337;
4611 -> 1335;
4611 -> 1369;
4611 -> 1464;
4611 -> 4610;
4611 -> 1473;
4611 -> 1363;
4611 -> 1364;
4611 -> 4596;
4611 -> 1371;
4611 -> 1368;
4612 -> 1488;
4613 -> 4612;
4613 -> 1383;
4614 -> 4613;
4614 -> 1385;
4614 -> 1383;
4615 -> 1381;
4615 -> 1415;
4615 -> 1484;
4615 -> 4614;
4615 -> 1493;
4615 -> 1409;
4615 -> 1410;
4615 -> 4600;
4615 -> 1417;
4615 -> 1414;
4616 -> 1429;
4617 -> 4616;
4617 -> 1250;
4618 -> 4617;
4618 -> 1252;
4618 -> 1250;
4619 -> 1448;
4620 -> 4619;
4620 -> 1288;
4621 -> 4620;
4621 -> 1290;
4621 -> 1288;
4622 -> 1286;
4622 -> 1318;
4622 -> 1444;
4622 -> 4621;
4622 -> 1453;
4622 -> 1314;
4622 -> 1315;
4622 -> 4607;
4622 -> 1325;
4622 -> 1317;
4623 -> 1468;
4624 -> 4623;
4624 -> 1337;
4625 -> 4624;
4625 -> 1339;
4625 -> 1337;
4626 -> 1335;
4626 -> 1369;
4626 -> 1464;
4626 -> 4625;
4626 -> 1473;
4626 -> 1363;
4626 -> 1364;
4626 -> 4611;
4626 -> 1371;
4626 -> 1368;
4627 -> 1488;
4628 -> 4627;
4628 -> 1383;
4629 -> 4628;
4629 -> 1385;
4629 -> 1383;
4630 -> 1381;
4630 -> 1415;
4630 -> 1484;
4630 -> 4629;
4630 -> 1493;
4630 -> 1409;
4630 -> 1410;
4630 -> 4615;
4630 -> 1417;
4630 -> 1414;
4631 -> 1429;
4632 -> 4631;
4632 -> 1250;
4633 -> 4632;
4633 -> 1252;
4633 -> 1250;
4634 -> 1448;
4635 -> 4634;
4635 -> 1288;
4636 -> 4635;
4636 -> 1290;
4636 -> 1288;
4637 -> 1286;
4637 -> 1318;
4637 -> 1444;
4637 -> 4636;
4637 -> 1453;
4637 -> 1314;
4637 -> 1315;
4637 -> 4622;
4637 -> 1325;
4637 -> 1317;
4638 -> 1468;
4639 -> 4638;
4639 -> 1337;
4640 -> 4639;
4640 -> 1339;
4640 -> 1337;
4641 -> 1335;
4641 -> 1369;
4641 -> 1464;
4641 -> 4640;
4641 -> 1473;
4641 -> 1363;
4641 -> 1364;
4641 -> 4626;
4641 -> 1371;
4641 -> 1368;
4642 -> 1488;
4643 -> 4642;
4643 -> 1383;
4644 -> 4643;
4644 -> 1385;
4644 -> 1383;
4645 -> 1381;
4645 -> 1415;
4645 -> 1484;
4645 -> 4644;
4645 -> 1493;
4645 -> 1409;
4645 -> 1410;
4645 -> 4630;
4645 -> 1417;
4645 -> 1414;
4646 -> 1224;
4646 -> 1222;
4647 -> 1223;
4647 -> 1222;
4648 -> 1225;
4648 -> 1222;
4649 -> 1222;
4650 -> 4646;
4650 -> 4649;
4651 -> 4647;
4651 -> 4649;
4652 -> 4648;
4652 -> 4649;
4653 -> 4650;
4653 -> 1227;
4653 -> 4649;
4654 -> 4649;
4655 -> 4651;
4655 -> 4654;
4655 -> 4649;
4656 -> 4655;
4657 -> 4652;
4657 -> 4656;
4657 -> 4655;
4658 -> 1231;
4658 -> 1230;
4658 -> 4650;
4658 -> 4657;
4659 -> 1207;
4660 -> 1211;
4660 -> 4659;
4660 -> 1207;
4661 -> 4658;
4661 -> 1207;
4662 -> 4661;
4662 -> 991;
4663 -> 991;
4664 -> 4662;
4664 -> 4663;
4665 -> 980;
4665 -> 4663;
4666 -> 4663;
4667 -> 4664;
4667 -> 4666;
4667 -> 4663;
4668 -> 4665;
4668 -> 951;
4668 -> 987;
4668 -> 986;
4668 -> 4663;
4669 -> 4665;
4669 -> 987;
4669 -> 986;
4669 -> 951;
4669 -> 4663;
4670 -> 4664;
4670 -> 4669;
4670 -> 4663;
4671 -> 4665;
4671 -> 951;
4671 -> 4663;
4672 -> 991;
4673 -> 991;
4674 -> 4661;
4674 -> 4673;
4675 -> 4674;
4675 -> 4673;
4676 -> 4675;
4676 -> 991;
4677 -> 978;
4678 -> 915;
4679 -> 4678;
4679 -> 921;
4679 -> 915;
4680 -> 921;
4680 -> 915;
4681 -> 921;
4681 -> 915;
4682 -> 921;
4682 -> 915;
4683 -> 921;
4683 -> 915;
4684 -> 921;
4684 -> 915;
4685 -> 921;
4685 -> 915;
4686 -> 915;
4687 -> 4686;
4687 -> 921;
4687 -> 915;
4688 -> 921;
4688 -> 4687;
4688 -> 915;
4689 -> 915;
4690 -> 4689;
4690 -> 921;
4690 -> 915;
4691 -> 914;
4691 -> 763;
4692 -> 763;
4693 -> 4691;
4693 -> 4692;
4694 -> 4693;
4694 -> 4692;
4695 -> 0;
4695 -> 4692;
4696 -> 4692;
4697 -> 4694;
4697 -> 4696;
4698 -> 4695;
4698 -> 4696;
4699 -> 4693;
4699 -> 4696;
4700 -> 4696;
4701 -> 4699;
4701 -> 4682;
4701 -> 4700;
4701 -> 4696;
4702 -> 4697;
4702 -> 4696;
4703 -> 4696;
4704 -> 4702;
4704 -> 4703;
4705 -> 4703;
4706 -> 4703;
4707 -> 4704;
4707 -> 4702;
4707 -> 4703;
4708 -> 4703;
4709 -> 4703;
4710 -> 4707;
4710 -> 4709;
4711 -> 4708;
4711 -> 4709;
4712 -> 4710;
4712 -> 4702;
4712 -> 4709;
4713 -> 4712;
4713 -> 4711;
4713 -> 4709;
4714 -> 4710;
4714 -> 4712;
4714 -> 4709;
4715 -> 4714;
4715 -> 4711;
4715 -> 4709;
4716 -> 4710;
4716 -> 4714;
4716 -> 4709;
4717 -> 4716;
4717 -> 4711;
4717 -> 4709;
4718 -> 4710;
4718 -> 4716;
4718 -> 4709;
4719 -> 4718;
4719 -> 4711;
4719 -> 4709;
4720 -> 4705;
4720 -> 4703;
4721 -> 4708;
4721 -> 4703;
4722 -> 4706;
4722 -> 4703;
4723 -> 0;
4723 -> 4703;
4724 -> 4720;
4724 -> 4721;
4724 -> 4722;
4724 -> 4723;
4724 -> 4704;
4724 -> 4718;
4724 -> 4712;
4724 -> 4714;
4724 -> 4716;
4724 -> 4713;
4724 -> 4715;
4724 -> 4717;
4724 -> 4719;
4724 -> 4703;
4725 -> 4703;
4726 -> 4724;
4726 -> 4725;
4727 -> 4726;
4727 -> 4724;
4727 -> 4725;
4728 -> 4724;
4728 -> 4725;
4729 -> 4725;
4730 -> 4728;
4730 -> 4729;
4731 -> 4730;
4731 -> 4727;
4731 -> 4729;
4732 -> 4729;
4733 -> 4730;
4733 -> 4727;
4733 -> 4732;
4733 -> 4729;
4734 -> 4730;
4734 -> 4727;
4734 -> 4733;
4735 -> 4734;
4735 -> 4725;
4736 -> 4735;
4736 -> 4728;
4736 -> 4725;
4737 -> 4724;
4737 -> 4725;
4738 -> 4737;
4738 -> 4736;
4738 -> 4725;
4739 -> 4724;
4739 -> 4725;
4740 -> 4724;
4740 -> 4725;
4741 -> 4725;
4742 -> 4739;
4742 -> 4738;
4742 -> 4741;
4742 -> 4725;
4743 -> 0;
4743 -> 4703;
4744 -> 4703;
4745 -> 4743;
4745 -> 4744;
4746 -> 4704;
4746 -> 4744;
4747 -> 4745;
4747 -> 4744;
4748 -> 4744;
4749 -> 4747;
4749 -> 4748;
4750 -> 4749;
4750 -> 0;
4750 -> 4748;
4751 -> 4750;
4752 -> 4744;
4753 -> 4746;
4753 -> 4752;
4754 -> 4753;
4754 -> 4738;
4754 -> 4752;
4755 -> 4754;
4755 -> 4744;
4756 -> 4744;
4757 -> 4755;
4757 -> 4756;
4758 -> 4757;
4758 -> 4744;
4759 -> 4758;
4759 -> 4745;
4759 -> 4744;
4760 -> 4759;
4761 -> 4746;
4761 -> 4760;
4762 -> 4760;
4763 -> 4761;
4763 -> 4738;
4763 -> 4762;
4764 -> 4762;
4765 -> 4764;
4765 -> 4760;
4766 -> 4765;
4766 -> 4761;
4766 -> 4760;
4767 -> 4760;
4768 -> 4767;
4768 -> 4761;
4768 -> 4760;
4769 -> 4760;
4770 -> 4761;
4770 -> 4738;
4770 -> 4769;
4770 -> 4760;
4771 -> 4761;
4771 -> 4738;
4771 -> 4760;
4772 -> 4759;
4773 -> 4755;
4773 -> 4759;
4774 -> 4738;
4774 -> 4703;
4775 -> 4773;
4775 -> 4703;
4776 -> 4774;
4776 -> 4775;
4776 -> 4704;
4776 -> 4738;
4776 -> 4766;
4776 -> 4768;
4776 -> 4771;
4776 -> 4703;
4777 -> 4703;
4778 -> 4776;
4778 -> 4777;
4779 -> 4776;
4779 -> 4777;
4780 -> 4778;
4780 -> 4777;
4781 -> 4777;
4782 -> 4781;
4782 -> 4780;
4782 -> 4777;
4783 -> 4781;
4783 -> 4777;
4784 -> 4783;
4784 -> 4782;
4784 -> 4777;
4785 -> 4776;
4785 -> 4777;
4786 -> 4776;
4786 -> 4777;
4787 -> 4785;
4787 -> 4784;
4787 -> 4777;
4788 -> 4785;
4788 -> 4784;
4788 -> 4777;
4789 -> 4703;
4790 -> 4738;
4790 -> 4789;
4790 -> 4703;
4791 -> 4784;
4791 -> 4703;
4792 -> 4704;
4792 -> 4784;
4792 -> 4703;
4793 -> 4703;
4794 -> 4792;
4794 -> 4793;
4795 -> 4738;
4795 -> 4793;
4796 -> 4795;
4796 -> 4738;
4796 -> 4793;
4797 -> 4794;
4797 -> 4796;
4797 -> 4784;
4797 -> 4738;
4797 -> 4793;
4798 -> 4795;
4798 -> 4738;
4798 -> 4793;
4799 -> 4794;
4799 -> 4798;
4799 -> 4797;
4799 -> 4738;
4799 -> 4793;
4800 -> 4795;
4800 -> 4738;
4800 -> 4793;
4801 -> 4794;
4801 -> 4800;
4801 -> 4799;
4801 -> 4738;
4801 -> 4793;
4802 -> 4795;
4802 -> 4738;
4802 -> 4793;
4803 -> 4794;
4803 -> 4802;
4803 -> 4801;
4803 -> 4738;
4803 -> 4793;
4804 -> 4703;
4805 -> 4702;
4805 -> 4791;
4805 -> 4803;
4805 -> 4696;
4806 -> 4805;
4806 -> 763;
4807 -> 4806;
4807 -> 763;
4808 -> 4806;
4808 -> 4805;
4808 -> 763;
4809 -> 763;
4810 -> 4808;
4810 -> 4809;
4811 -> 4808;
4811 -> 4809;
4812 -> 4808;
4812 -> 4809;
4813 -> 4807;
4813 -> 4809;
4814 -> 4810;
4814 -> 4809;
4815 -> 4811;
4815 -> 4809;
4816 -> 4812;
4816 -> 4809;
4817 -> 4809;
4818 -> 4817;
4818 -> 4814;
4818 -> 4815;
4818 -> 4816;
4818 -> 4808;
4818 -> 4809;
4819 -> 4818;
4819 -> 752;
4820 -> 752;
4821 -> 4819;
4821 -> 4820;
4822 -> 753;
4822 -> 4820;
4823 -> 4821;
4823 -> 4820;
4824 -> 4822;
4824 -> 4820;
4825 -> 4823;
4825 -> 4824;
4825 -> 4820;
4826 -> 4823;
4826 -> 4824;
4826 -> 4818;
4826 -> 754;
4826 -> 755;
4826 -> 756;
4826 -> 757;
4826 -> 758;
4826 -> 759;
4826 -> 760;
4826 -> 4820;
4827 -> 4820;
4828 -> 4827;
4829 -> 4826;
4829 -> 753;
4829 -> 752;
4830 -> 752;
4831 -> 748;
4831 -> 747;
4832 -> 749;
4832 -> 747;
4833 -> 750;
4833 -> 747;
4834 -> 751;
4834 -> 747;
4835 -> 747;
4836 -> 4831;
4836 -> 4835;
4837 -> 4832;
4837 -> 4835;
4838 -> 4833;
4838 -> 4835;
4839 -> 4834;
4839 -> 4835;
4840 -> 4836;
4840 -> 4835;
4841 -> 4837;
4841 -> 4835;
4842 -> 4838;
4842 -> 4835;
4843 -> 4835;
4844 -> 4839;
4844 -> 4835;
4845 -> 4835;
4846 -> 4840;
4846 -> 4845;
4847 -> 4841;
4847 -> 4845;
4848 -> 4842;
4848 -> 4845;
4849 -> 4843;
4849 -> 4845;
4850 -> 4844;
4850 -> 4845;
4851 -> 4846;
4851 -> 4845;
4852 -> 4847;
4852 -> 4845;
4853 -> 4848;
4853 -> 4845;
4854 -> 4849;
4854 -> 4845;
4855 -> 4845;
4856 -> 4855;
4856 -> 4845;
4857 -> 4850;
4857 -> 4845;
4858 -> 4845;
4859 -> 4851;
4859 -> 4858;
4860 -> 4852;
4860 -> 4858;
4861 -> 4853;
4861 -> 4858;
4862 -> 4854;
4862 -> 4858;
4863 -> 4856;
4863 -> 4858;
4864 -> 4857;
4864 -> 4858;
4865 -> 4858;
4866 -> 4859;
4866 -> 4865;
4866 -> 4858;
4867 -> 4860;
4867 -> 4858;
4868 -> 4859;
4868 -> 4858;
4869 -> 4867;
4869 -> 4858;
4870 -> 4858;
4871 -> 4858;
4872 -> 4868;
4872 -> 4871;
4873 -> 4869;
4873 -> 4871;
4874 -> 4870;
4874 -> 4871;
4875 -> 4870;
4875 -> 4871;
4876 -> 4870;
4876 -> 4871;
4877 -> 4872;
4877 -> 4871;
4878 -> 4871;
4879 -> 4877;
4879 -> 4878;
4880 -> 4876;
4880 -> 4878;
4881 -> 4880;
4881 -> 4878;
4882 -> 4880;
4882 -> 4878;
4883 -> 4879;
4883 -> 4878;
4884 -> 4878;
4885 -> 4878;
4886 -> 4883;
4886 -> 4885;
4887 -> 4884;
4887 -> 4885;
4888 -> 4887;
4888 -> 4885;
4889 -> 4887;
4889 -> 4885;
4890 -> 4887;
4890 -> 4885;
4891 -> 4887;
4891 -> 4885;
4892 -> 4887;
4892 -> 4885;
4893 -> 4887;
4893 -> 4885;
4894 -> 4887;
4894 -> 4885;
4895 -> 4887;
4895 -> 4885;
4896 -> 4886;
4896 -> 4887;
4896 -> 4885;
4897 -> 4885;
4898 -> 4897;
4898 -> 4887;
4898 -> 4885;
4899 -> 4885;
4900 -> 4899;
4900 -> 4887;
4900 -> 4885;
4901 -> 4886;
4901 -> 1215;
4901 -> 4887;
4901 -> 4885;
4902 -> 4885;
4903 -> 4902;
4903 -> 4887;
4903 -> 4885;
4904 -> 834;
4904 -> 1215;
4904 -> 4885;
4905 -> 4885;
4906 -> 4905;
4906 -> 4887;
4906 -> 4885;
4907 -> 4884;
4907 -> 4880;
4907 -> 4878;
4908 -> 4876;
4908 -> 4871;
4909 -> 4876;
4909 -> 4871;
4910 -> 4876;
4910 -> 4871;
4911 -> 4876;
4911 -> 4871;
4912 -> 4876;
4912 -> 4871;
4913 -> 4876;
4913 -> 4871;
4914 -> 4876;
4914 -> 4871;
4915 -> 4876;
4915 -> 4871;
4916 -> 4876;
4916 -> 4871;
4917 -> 4876;
4917 -> 4871;
4918 -> 4871;
4919 -> 4918;
4919 -> 4871;
4920 -> 4919;
4920 -> 4876;
4920 -> 4871;
4921 -> 4871;
4922 -> 4921;
4922 -> 4871;
4923 -> 4922;
4923 -> 4876;
4923 -> 4871;
4924 -> 4876;
4924 -> 4871;
4925 -> 4876;
4925 -> 4871;
4926 -> 4871;
4927 -> 4873;
4927 -> 4926;
4927 -> 4871;
4928 -> 4873;
4928 -> 4876;
4928 -> 4871;
4929 -> 4871;
4930 -> 4929;
4930 -> 4876;
4930 -> 4871;
4931 -> 4871;
4932 -> 4931;
4932 -> 4876;
4932 -> 4871;
4933 -> 4871;
4934 -> 4871;
4935 -> 4933;
4935 -> 4934;
4936 -> 4935;
4936 -> 4934;
4937 -> 4935;
4937 -> 4934;
4938 -> 4935;
4938 -> 4934;
4939 -> 4934;
4940 -> 4939;
4940 -> 4935;
4940 -> 4934;
4941 -> 4934;
4942 -> 4941;
4942 -> 4935;
4942 -> 4934;
4943 -> 4933;
4943 -> 4876;
4943 -> 4871;
4944 -> 4876;
4944 -> 4871;
4945 -> 4874;
4945 -> 4876;
4945 -> 4871;
4946 -> 4875;
4946 -> 4876;
4946 -> 4871;
4947 -> 4870;
4947 -> 4858;
4948 -> 4858;
4949 -> 4864;
4949 -> 4858;
4950 -> 4858;
4951 -> 4947;
4951 -> 4950;
4952 -> 4948;
4952 -> 4950;
4953 -> 4948;
4953 -> 4950;
4954 -> 4949;
4954 -> 4950;
4955 -> 4948;
4955 -> 4950;
4956 -> 4948;
4956 -> 4950;
4957 -> 4951;
4957 -> 4950;
4958 -> 4954;
4958 -> 4950;
4959 -> 4952;
4959 -> 4950;
4960 -> 4953;
4960 -> 4950;
4961 -> 4950;
4962 -> 4950;
4963 -> 4955;
4963 -> 4950;
4964 -> 4950;
4965 -> 4957;
4965 -> 4964;
4966 -> 4958;
4966 -> 4964;
4967 -> 4959;
4967 -> 4964;
4968 -> 4960;
4968 -> 4964;
4969 -> 4961;
4969 -> 4964;
4970 -> 4962;
4970 -> 4964;
4971 -> 4963;
4971 -> 4964;
4972 -> 4956;
4972 -> 4964;
4973 -> 4972;
4973 -> 4964;
4974 -> 4972;
4974 -> 4964;
4975 -> 4972;
4975 -> 4964;
4976 -> 4972;
4976 -> 4964;
4977 -> 4972;
4977 -> 4964;
4978 -> 4972;
4978 -> 4964;
4979 -> 4972;
4979 -> 4964;
4980 -> 4972;
4980 -> 4964;
4981 -> 4972;
4981 -> 4964;
4982 -> 4972;
4982 -> 4964;
4983 -> 4972;
4983 -> 4964;
4984 -> 4972;
4984 -> 4964;
4985 -> 4972;
4985 -> 4964;
4986 -> 4965;
4986 -> 4972;
4986 -> 4964;
4987 -> 4966;
4987 -> 4972;
4987 -> 4964;
4988 -> 4969;
4988 -> 4972;
4988 -> 4964;
4989 -> 4971;
4989 -> 4972;
4989 -> 4964;
4990 -> 4964;
4991 -> 4990;
4991 -> 4972;
4991 -> 4964;
4992 -> 4964;
4993 -> 4967;
4993 -> 4992;
4993 -> 4964;
4994 -> 4993;
4994 -> 4972;
4994 -> 4964;
4995 -> 4964;
4996 -> 4972;
4996 -> 4995;
4997 -> 4996;
4997 -> 4994;
4997 -> 4995;
4998 -> 4997;
4998 -> 4964;
4999 -> 4998;
4999 -> 4969;
4999 -> 4964;
5000 -> 4999;
5001 -> 5000;
5001 -> 4972;
5001 -> 4999;
5002 -> 4999;
5003 -> 5002;
5003 -> 4972;
5003 -> 4999;
5004 -> 4964;
5005 -> 4972;
5005 -> 5004;
5006 -> 5005;
5006 -> 4994;
5006 -> 5004;
5007 -> 5006;
5007 -> 4964;
5008 -> 4970;
5008 -> 5007;
5008 -> 4964;
5009 -> 5008;
5009 -> 4971;
5009 -> 4964;
5010 -> 5009;
5011 -> 4972;
5011 -> 5010;
5012 -> 5010;
5013 -> 5010;
5014 -> 5011;
5014 -> 4986;
5014 -> 4907;
5014 -> 5013;
5015 -> 5014;
5015 -> 4896;
5015 -> 5013;
5016 -> 5015;
5016 -> 5010;
5017 -> 5016;
5017 -> 4904;
5017 -> 5012;
5017 -> 5010;
5018 -> 5017;
5018 -> 5010;
5019 -> 5018;
5019 -> 5011;
5019 -> 5010;
5020 -> 5011;
5020 -> 4986;
5020 -> 5010;
5021 -> 5011;
5021 -> 4987;
5021 -> 5010;
5022 -> 5010;
5023 -> 5021;
5023 -> 5017;
5024 -> 996;
5024 -> 5017;
5025 -> 5017;
5025 -> 4907;
5025 -> 4882;
5025 -> 4928;
5025 -> 5023;
5025 -> 4930;
5025 -> 4932;
5025 -> 4912;
5025 -> 4943;
5025 -> 4945;
5025 -> 4946;
5025 -> 4916;
5025 -> 4917;
5025 -> 4920;
5025 -> 4923;
5025 -> 4924;
5025 -> 4944;
5025 -> 4896;
5025 -> 4898;
5025 -> 4900;
5025 -> 4901;
5025 -> 4904;
5025 -> 4893;
5025 -> 4906;
5025 -> 4903;
5025 -> 4919;
5025 -> 4922;
5025 -> 0;
5025 -> 4929;
5025 -> 4931;
5025 -> 4940;
5025 -> 4942;
5025 -> 4941;
5025 -> 4939;
5025 -> 4902;
5026 -> 5023;
5027 -> 5023;
5028 -> 5023;
5028 -> 5025;
5028 -> 5027;
5029 -> 5028;
5029 -> 5023;
5030 -> 5023;
5031 -> 5030;
5031 -> 5023;
5032 -> 5023;
5033 -> 5023;
5034 -> 5023;
5034 -> 5025;
5034 -> 5033;
5035 -> 5034;
5035 -> 5023;
5036 -> 5023;
5037 -> 5035;
5037 -> 5036;
5037 -> 5023;
5038 -> 5037;
5039 -> 5035;
5039 -> 5038;
5040 -> 5038;
5041 -> 5039;
5041 -> 5040;
5042 -> 5040;
5043 -> 5041;
5043 -> 5042;
5043 -> 5040;
5044 -> 5041;
5044 -> 5040;
5045 -> 5035;
5045 -> 5043;
5046 -> 5043;
5047 -> 5045;
5047 -> 5046;
5048 -> 5046;
5049 -> 5047;
5049 -> 5048;
5049 -> 5046;
5050 -> 5035;
5050 -> 5023;
5051 -> 5050;
5052 -> 5023;
5053 -> 5025;
5053 -> 5033;
5054 -> 5023;
5055 -> 5053;
5055 -> 5054;
5055 -> 5023;
5056 -> 5025;
5056 -> 5023;
5057 -> 5023;
5058 -> 5056;
5058 -> 5057;
5059 -> 5057;
5060 -> 5057;
5061 -> 5058;
5061 -> 5060;
5061 -> 5057;
5062 -> 5061;
5063 -> 5062;
5063 -> 5058;
5063 -> 5053;
5063 -> 5061;
5064 -> 5059;
5064 -> 5057;
5065 -> 5064;
5065 -> 5023;
5066 -> 5023;
5067 -> 5065;
5067 -> 5066;
5068 -> 5023;
5068 -> 5066;
5069 -> 5066;
5070 -> 5068;
5070 -> 5053;
5070 -> 5069;
5070 -> 5066;
5071 -> 5070;
5072 -> 5071;
5072 -> 5023;
5073 -> 5023;
5074 -> 5053;
5074 -> 5023;
5075 -> 5074;
5075 -> 5036;
5075 -> 5023;
5076 -> 5075;
5077 -> 5074;
5077 -> 5076;
5078 -> 5076;
5079 -> 5077;
5079 -> 5078;
5080 -> 5078;
5081 -> 5079;
5081 -> 5080;
5081 -> 5078;
5082 -> 5079;
5082 -> 5078;
5083 -> 5074;
5083 -> 5081;
5084 -> 5081;
5085 -> 5083;
5085 -> 5084;
5086 -> 5084;
5087 -> 5085;
5087 -> 5086;
5087 -> 5084;
5088 -> 5074;
5088 -> 5023;
5089 -> 5088;
5090 -> 5053;
5090 -> 5023;
5091 -> 5072;
5091 -> 5023;
5092 -> 5023;
5093 -> 5090;
5093 -> 5053;
5093 -> 0;
5093 -> 5023;
5094 -> 5023;
5095 -> 5090;
5095 -> 5053;
5095 -> 5023;
5096 -> 5090;
5096 -> 5053;
5096 -> 5095;
5097 -> 5053;
5097 -> 5096;
5098 -> 5090;
5098 -> 5053;
5098 -> 5096;
5099 -> 5096;
5100 -> 5097;
5100 -> 5099;
5101 -> 5098;
5101 -> 5099;
5102 -> 5097;
5102 -> 5099;
5103 -> 5101;
5103 -> 5099;
5104 -> 5100;
5104 -> 5099;
5105 -> 5102;
5105 -> 5099;
5106 -> 5099;
5107 -> 5103;
5107 -> 5106;
5108 -> 5104;
5108 -> 5106;
5109 -> 5105;
5109 -> 5106;
5110 -> 5107;
5110 -> 1227;
5110 -> 5106;
5111 -> 5106;
5112 -> 5108;
5112 -> 5111;
5112 -> 5106;
5113 -> 5112;
5114 -> 5109;
5114 -> 5113;
5114 -> 5112;
5115 -> 1231;
5115 -> 1230;
5115 -> 5107;
5115 -> 5114;
5116 -> 5023;
5117 -> 5091;
5117 -> 5116;
5117 -> 5023;
5118 -> 5115;
5118 -> 5023;
5119 -> 5118;
5119 -> 5017;
5120 -> 5017;
5121 -> 5119;
5121 -> 5120;
5122 -> 5011;
5122 -> 5120;
5123 -> 5120;
5124 -> 5121;
5124 -> 5123;
5124 -> 5120;
5125 -> 5122;
5125 -> 4982;
5125 -> 5019;
5125 -> 5018;
5125 -> 5120;
5126 -> 5122;
5126 -> 5019;
5126 -> 5018;
5126 -> 4982;
5126 -> 5120;
5127 -> 5121;
5127 -> 5126;
5127 -> 5120;
5128 -> 5122;
5128 -> 4982;
5128 -> 5120;
5129 -> 5017;
5130 -> 5017;
5131 -> 5118;
5131 -> 5130;
5132 -> 5131;
5132 -> 5130;
5133 -> 5132;
5133 -> 5017;
5134 -> 5009;
5135 -> 4950;
5136 -> 5135;
5136 -> 4956;
5136 -> 4950;
5137 -> 4956;
5137 -> 4950;
5138 -> 4956;
5138 -> 4950;
5139 -> 4956;
5139 -> 4950;
5140 -> 4956;
5140 -> 4950;
5141 -> 4956;
5141 -> 4950;
5142 -> 4956;
5142 -> 4950;
5143 -> 4950;
5144 -> 5143;
5144 -> 4956;
5144 -> 4950;
5145 -> 4956;
5145 -> 5144;
5145 -> 4950;
5146 -> 4950;
5147 -> 5146;
5147 -> 4956;
5147 -> 4950;
5148 -> 4858;
5149 -> 4948;
5149 -> 5148;
5150 -> 5149;
5150 -> 5148;
5151 -> 0;
5151 -> 5148;
5152 -> 5148;
5153 -> 5150;
5153 -> 5152;
5154 -> 5151;
5154 -> 5152;
5155 -> 5149;
5155 -> 5152;
5156 -> 5152;
5157 -> 5155;
5157 -> 5139;
5157 -> 5156;
5157 -> 5152;
5158 -> 5153;
5158 -> 5152;
5159 -> 5152;
5160 -> 5158;
5160 -> 5159;
5161 -> 5159;
5162 -> 5159;
5163 -> 5160;
5163 -> 5158;
5163 -> 5159;
5164 -> 5159;
5165 -> 5159;
5166 -> 5163;
5166 -> 5165;
5167 -> 5164;
5167 -> 5165;
5168 -> 5166;
5168 -> 5158;
5168 -> 5165;
5169 -> 5168;
5169 -> 5167;
5169 -> 5165;
5170 -> 5166;
5170 -> 5168;
5170 -> 5165;
5171 -> 5170;
5171 -> 5167;
5171 -> 5165;
5172 -> 5166;
5172 -> 5170;
5172 -> 5165;
5173 -> 5172;
5173 -> 5167;
5173 -> 5165;
5174 -> 5166;
5174 -> 5172;
5174 -> 5165;
5175 -> 5174;
5175 -> 5167;
5175 -> 5165;
5176 -> 5161;
5176 -> 5159;
5177 -> 5164;
5177 -> 5159;
5178 -> 5162;
5178 -> 5159;
5179 -> 0;
5179 -> 5159;
5180 -> 5176;
5180 -> 5177;
5180 -> 5178;
5180 -> 5179;
5180 -> 5160;
5180 -> 5174;
5180 -> 5168;
5180 -> 5170;
5180 -> 5172;
5180 -> 5169;
5180 -> 5171;
5180 -> 5173;
5180 -> 5175;
5180 -> 5159;
5181 -> 5159;
5182 -> 5180;
5182 -> 5181;
5183 -> 5182;
5183 -> 5180;
5183 -> 5181;
5184 -> 5180;
5184 -> 5181;
5185 -> 5181;
5186 -> 5184;
5186 -> 5185;
5187 -> 5186;
5187 -> 5183;
5187 -> 5185;
5188 -> 5185;
5189 -> 5186;
5189 -> 5183;
5189 -> 5188;
5189 -> 5185;
5190 -> 5186;
5190 -> 5183;
5190 -> 5189;
5191 -> 5190;
5191 -> 5181;
5192 -> 5191;
5192 -> 5184;
5192 -> 5181;
5193 -> 5180;
5193 -> 5181;
5194 -> 5193;
5194 -> 5192;
5194 -> 5181;
5195 -> 5180;
5195 -> 5181;
5196 -> 5180;
5196 -> 5181;
5197 -> 5181;
5198 -> 5195;
5198 -> 5194;
5198 -> 5197;
5198 -> 5181;
5199 -> 0;
5199 -> 5159;
5200 -> 5159;
5201 -> 5199;
5201 -> 5200;
5202 -> 5160;
5202 -> 5200;
5203 -> 5201;
5203 -> 5200;
5204 -> 5200;
5205 -> 5203;
5205 -> 5204;
5206 -> 5205;
5206 -> 0;
5206 -> 5204;
5207 -> 5206;
5208 -> 5200;
5209 -> 5202;
5209 -> 5208;
5210 -> 5209;
5210 -> 5194;
5210 -> 5208;
5211 -> 5210;
5211 -> 5200;
5212 -> 5200;
5213 -> 5211;
5213 -> 5212;
5214 -> 5213;
5214 -> 5200;
5215 -> 5214;
5215 -> 5201;
5215 -> 5200;
5216 -> 5215;
5217 -> 5202;
5217 -> 5216;
5218 -> 5216;
5219 -> 5217;
5219 -> 5194;
5219 -> 5218;
5220 -> 5218;
5221 -> 5220;
5221 -> 5216;
5222 -> 5221;
5222 -> 5217;
5222 -> 5216;
5223 -> 5216;
5224 -> 5223;
5224 -> 5217;
5224 -> 5216;
5225 -> 5216;
5226 -> 5217;
5226 -> 5194;
5226 -> 5225;
5226 -> 5216;
5227 -> 5217;
5227 -> 5194;
5227 -> 5216;
5228 -> 5215;
5229 -> 5211;
5229 -> 5215;
5230 -> 5194;
5230 -> 5159;
5231 -> 5229;
5231 -> 5159;
5232 -> 5230;
5232 -> 5231;
5232 -> 5160;
5232 -> 5194;
5232 -> 5222;
5232 -> 5224;
5232 -> 5227;
5232 -> 5159;
5233 -> 5159;
5234 -> 5232;
5234 -> 5233;
5235 -> 5232;
5235 -> 5233;
5236 -> 5234;
5236 -> 5233;
5237 -> 5233;
5238 -> 5237;
5238 -> 5236;
5238 -> 5233;
5239 -> 5237;
5239 -> 5233;
5240 -> 5239;
5240 -> 5238;
5240 -> 5233;
5241 -> 5232;
5241 -> 5233;
5242 -> 5232;
5242 -> 5233;
5243 -> 5241;
5243 -> 5240;
5243 -> 5233;
5244 -> 5241;
5244 -> 5240;
5244 -> 5233;
5245 -> 5159;
5246 -> 5194;
5246 -> 5245;
5246 -> 5159;
5247 -> 5240;
5247 -> 5159;
5248 -> 5160;
5248 -> 5240;
5248 -> 5159;
5249 -> 5159;
5250 -> 5248;
5250 -> 5249;
5251 -> 5194;
5251 -> 5249;
5252 -> 5251;
5252 -> 5194;
5252 -> 5249;
5253 -> 5250;
5253 -> 5252;
5253 -> 5240;
5253 -> 5194;
5253 -> 5249;
5254 -> 5251;
5254 -> 5194;
5254 -> 5249;
5255 -> 5250;
5255 -> 5254;
5255 -> 5253;
5255 -> 5194;
5255 -> 5249;
5256 -> 5251;
5256 -> 5194;
5256 -> 5249;
5257 -> 5250;
5257 -> 5256;
5257 -> 5255;
5257 -> 5194;
5257 -> 5249;
5258 -> 5251;
5258 -> 5194;
5258 -> 5249;
5259 -> 5250;
5259 -> 5258;
5259 -> 5257;
5259 -> 5194;
5259 -> 5249;
5260 -> 5159;
5261 -> 5158;
5261 -> 5247;
5261 -> 5259;
5261 -> 5152;
5262 -> 5261;
5262 -> 4858;
5263 -> 4858;
5264 -> 5262;
5264 -> 5263;
5265 -> 5262;
5265 -> 5263;
5266 -> 5262;
5266 -> 5263;
5267 -> 5262;
5267 -> 5263;
5268 -> 5264;
5268 -> 5263;
5269 -> 5265;
5269 -> 5263;
5270 -> 5266;
5270 -> 5263;
5271 -> 5263;
5272 -> 5271;
5272 -> 5268;
5272 -> 5269;
5272 -> 5270;
5272 -> 5262;
5272 -> 5263;
5273 -> 4859;
5273 -> 4858;
5274 -> 4859;
5274 -> 5053;
5274 -> 4858;
5275 -> 4861;
5275 -> 4858;
5276 -> 4867;
5276 -> 4858;
5277 -> 5272;
5277 -> 4858;
5278 -> 4858;
5279 -> 4948;
5279 -> 5278;
5280 -> 5278;
5281 -> 5279;
5281 -> 4986;
5281 -> 5280;
5282 -> 5281;
5282 -> 5053;
5282 -> 5280;
5283 -> 5282;
5283 -> 5278;
5284 -> 5283;
5284 -> 4858;
5285 -> 4862;
5285 -> 4858;
5286 -> 4858;
5287 -> 4858;
5288 -> 5273;
5288 -> 5287;
5289 -> 5274;
5289 -> 5287;
5290 -> 5274;
5290 -> 5287;
5291 -> 5275;
5291 -> 5287;
5292 -> 5276;
5292 -> 5287;
5293 -> 5277;
5293 -> 5287;
5294 -> 5284;
5294 -> 5287;
5295 -> 5285;
5295 -> 5287;
5296 -> 5286;
5296 -> 5287;
5297 -> 5286;
5297 -> 5287;
5298 -> 5287;
5299 -> 5297;
5299 -> 5298;
5300 -> 5298;
5301 -> 5300;
5301 -> 5298;
5302 -> 5300;
5302 -> 5298;
5303 -> 5300;
5303 -> 5298;
5304 -> 5300;
5304 -> 5298;
5305 -> 0;
5305 -> 5300;
5305 -> 5298;
5306 -> 5297;
5306 -> 5287;
5307 -> 5297;
5307 -> 5287;
5308 -> 5297;
5308 -> 5287;
5309 -> 5297;
5309 -> 5287;
5310 -> 5297;
5310 -> 5287;
5311 -> 5297;
5311 -> 5287;
5312 -> 5297;
5312 -> 5287;
5313 -> 5297;
5313 -> 5287;
5314 -> 5287;
5315 -> 5293;
5315 -> 5314;
5315 -> 5287;
5316 -> 5287;
5317 -> 5292;
5317 -> 5316;
5317 -> 5287;
5318 -> 5287;
5319 -> 5288;
5319 -> 5318;
5319 -> 5287;
5320 -> 5288;
5320 -> 5053;
5320 -> 5289;
5320 -> 5287;
5321 -> 5288;
5321 -> 5053;
5321 -> 5290;
5321 -> 5287;
5322 -> 5320;
5322 -> 5321;
5322 -> 5287;
5323 -> 5288;
5323 -> 5297;
5323 -> 5287;
5324 -> 5289;
5324 -> 5287;
5325 -> 5324;
5325 -> 5297;
5325 -> 5287;
5326 -> 5290;
5326 -> 5297;
5326 -> 5287;
5327 -> 5292;
5327 -> 5297;
5327 -> 5287;
5328 -> 5291;
5328 -> 5287;
5329 -> 5328;
5329 -> 5297;
5329 -> 5287;
5330 -> 5296;
5330 -> 5287;
5331 -> 5293;
5331 -> 5330;
5332 -> 5330;
5333 -> 5331;
5333 -> 5332;
5334 -> 5297;
5334 -> 5332;
5335 -> 5333;
5335 -> 5332;
5336 -> 5334;
5336 -> 5332;
5337 -> 5335;
5337 -> 5336;
5337 -> 5332;
5338 -> 5335;
5338 -> 5336;
5338 -> 5272;
5338 -> 5300;
5338 -> 5301;
5338 -> 5302;
5338 -> 5303;
5338 -> 5304;
5338 -> 5305;
5338 -> 5306;
5338 -> 5327;
5338 -> 5307;
5338 -> 5329;
5338 -> 5308;
5338 -> 5309;
5338 -> 5310;
5338 -> 5325;
5338 -> 5311;
5338 -> 5326;
5338 -> 5312;
5338 -> 5313;
5338 -> 5323;
5338 -> 5053;
5338 -> 5332;
5339 -> 5332;
5340 -> 5339;
5341 -> 5338;
5341 -> 5297;
5341 -> 5287;
5342 -> 5287;
5343 -> 5293;
5343 -> 5342;
5344 -> 5343;
5344 -> 5338;
5344 -> 5341;
5344 -> 5342;
5345 -> 5344;
5345 -> 5287;
5346 -> 5345;
5346 -> 5297;
5346 -> 5287;
5347 -> 0;
5347 -> 5287;
5348 -> 5347;
5348 -> 5295;
5348 -> 5287;
5349 -> 5348;
5349 -> 5297;
5349 -> 5287;
5350 -> 5294;
5350 -> 5287;
5351 -> 5287;
5352 -> 5350;
5352 -> 5351;
5353 -> 5297;
5353 -> 5351;
5354 -> 5352;
5354 -> 5353;
5354 -> 5351;
5355 -> 5351;
5356 -> 5355;
5356 -> 5353;
5356 -> 5351;
5357 -> 5287;
5358 -> 5286;
5358 -> 4858;
5359 -> 4858;
5360 -> 5358;
5360 -> 5359;
5360 -> 5338;
5360 -> 5341;
5360 -> 5346;
5360 -> 5349;
5360 -> 5354;
5360 -> 5356;
5360 -> 0;
5360 -> 5053;
5360 -> 4858;
5361 -> 5360;
5361 -> 5359;
5362 -> 5360;
5362 -> 5359;
5363 -> 5361;
5363 -> 5359;
5364 -> 5359;
5365 -> 5363;
5365 -> 5364;
5366 -> 5362;
5366 -> 5364;
5367 -> 5366;
5367 -> 5360;
5367 -> 5364;
5368 -> 5367;
5368 -> 5359;
5369 -> 5360;
5369 -> 5359;
5370 -> 5360;
5370 -> 5359;
5371 -> 5359;
5372 -> 5370;
5372 -> 5368;
5372 -> 5371;
5372 -> 5359;
5373 -> 5370;
5373 -> 5368;
5373 -> 5359;
5374 -> 5360;
5374 -> 5359;
5375 -> 5359;
5376 -> 5360;
5376 -> 5375;
5376 -> 5373;
5376 -> 4858;
5377 -> 5360;
5377 -> 5359;
5378 -> 5360;
5378 -> 5359;
5379 -> 5360;
5379 -> 5359;
5380 -> 5360;
5380 -> 5359;
5381 -> 5378;
5381 -> 5359;
5382 -> 5381;
5383 -> 5380;
5383 -> 5382;
5384 -> 5382;
5385 -> 5384;
5385 -> 5381;
5386 -> 5381;
5387 -> 5385;
5387 -> 5386;
5387 -> 5381;
5388 -> 5359;
5389 -> 5380;
5389 -> 5388;
5390 -> 5388;
5391 -> 5389;
5391 -> 5390;
5392 -> 5391;
5392 -> 5376;
5392 -> 5390;
5393 -> 5392;
5393 -> 5388;
5394 -> 5388;
5395 -> 5393;
5395 -> 5394;
5396 -> 5395;
5396 -> 5394;
5397 -> 0;
5397 -> 5396;
5398 -> 5397;
5398 -> 5359;
5399 -> 5377;
5399 -> 5398;
5399 -> 5376;
5399 -> 5359;
5400 -> 5379;
5400 -> 5359;
5401 -> 5400;
5402 -> 5380;
5402 -> 5401;
5403 -> 5401;
5403 -> 5400;
5404 -> 5400;
5405 -> 5403;
5405 -> 5404;
5405 -> 5400;
5406 -> 5286;
5406 -> 4858;
5407 -> 5406;
5407 -> 4835;
5408 -> 5407;
5408 -> 747;
5409 -> 5408;
5409 -> 58;
5410 -> 58;
5411 -> 5409;
5411 -> 5410;
5412 -> 5410;
5413 -> 5410;
5414 -> 5413;
5414 -> 5411;
5414 -> 5399;
5414 -> 5410;
5415 -> 5414;
5415 -> 5413;
5416 -> 5413;
5417 -> 5415;
5417 -> 5416;
5418 -> 5412;
5418 -> 5410;
5419 -> 5410;
5420 -> 5418;
5420 -> 5419;
5420 -> 5415;
5420 -> 5412;
5420 -> 5410;
5421 -> 5420;
5421 -> 5419;
5422 -> 5421;
5422 -> 5420;
5422 -> 791;
5422 -> 5419;
5423 -> 5421;
5423 -> 5420;
5423 -> 5422;
5423 -> 5419;
5424 -> 5410;
5425 -> 5424;
5425 -> 5412;
5425 -> 5410;
5426 -> 5412;
5426 -> 5410;
5427 -> 5410;
5428 -> 5410;
5429 -> 5426;
5429 -> 5428;
5430 -> 5427;
5430 -> 5428;
5431 -> 5428;
5432 -> 5429;
5432 -> 5431;
5432 -> 5428;
5433 -> 5429;
5433 -> 5423;
5433 -> 5428;
5434 -> 5429;
5434 -> 5428;
5435 -> 5428;
5436 -> 5430;
5436 -> 5428;
5437 -> 5434;
5437 -> 5435;
5437 -> 5436;
5437 -> 5423;
5437 -> 5425;
5437 -> 5427;
5437 -> 5428;
5438 -> 5428;
5439 -> 5437;
5439 -> 5438;
5439 -> 5428;
5440 -> 5437;
5440 -> 5428;
5441 -> 5428;
5442 -> 5440;
5442 -> 5441;
5443 -> 5440;
5443 -> 5441;
5444 -> 5442;
5444 -> 5441;
5445 -> 5441;
5446 -> 5445;
5446 -> 5444;
5446 -> 5440;
5446 -> 5441;
5447 -> 5440;
5447 -> 5441;
5448 -> 5440;
5448 -> 5441;
5449 -> 5447;
5449 -> 5441;
5450 -> 5441;
5451 -> 5449;
5451 -> 5450;
5452 -> 5448;
5452 -> 5450;
5453 -> 5451;
5453 -> 5450;
5454 -> 5450;
5455 -> 5454;
5455 -> 5453;
5455 -> 5446;
5455 -> 5450;
5456 -> 5441;
5457 -> 5448;
5457 -> 5456;
5458 -> 5456;
5459 -> 5457;
5459 -> 5455;
5459 -> 5458;
5460 -> 5456;
5461 -> 5459;
5461 -> 5441;
5462 -> 5441;
5463 -> 5461;
5463 -> 5462;
5463 -> 5441;
5464 -> 5461;
5464 -> 5448;
5464 -> 5463;
5465 -> 5448;
5465 -> 5455;
5465 -> 0;
5465 -> 5441;
5466 -> 5465;
5466 -> 5448;
5466 -> 5441;
5467 -> 5440;
5467 -> 5455;
5467 -> 5464;
5467 -> 5466;
5467 -> 5428;
5468 -> 5467;
5468 -> 5428;
5469 -> 5428;
5470 -> 5469;
5471 -> 5411;
5471 -> 5410;
5472 -> 5471;
5472 -> 54;
5473 -> 5472;
5473 -> 55;
5473 -> 54;
5474 -> 55;
5474 -> 39;
5475 -> 39;
5476 -> 42;
5476 -> 5475;
5476 -> 39;
5477 -> 0;
5477 -> 39;
5478 -> 47;
5478 -> 39;
5479 -> 44;
5479 -> 5474;
5479 -> 41;
5479 -> 42;
5479 -> 39;
5480 -> 5479;
5480 -> 39;
5481 -> 39;
5482 -> 5480;
5482 -> 5481;
5483 -> 0;
5483 -> 5481;
5484 -> 5483;
5485 -> 39;
5486 -> 5479;
5486 -> 55;
5486 -> 5473;
5486 -> 5468;
5486 -> 19;
5486 -> 0;
5486 -> 39;
5487 -> 39;
5488 -> 5487;
5489 -> 5486;
5489 -> 5488;
5489 -> 39;
5490 -> 0;
5492 -> 5490;
5492 -> 5491;
5493 -> 5491;
5494 -> 5491;
5495 -> 5491;
5496 -> 5491;
5497 -> 5491;
5498 -> 5491;
5499 -> 5491;
5500 -> 5491;
5501 -> 5491;
5502 -> 5491;
5503 -> 5491;
5504 -> 5491;
5505 -> 5491;
5506 -> 5491;
5507 -> 5491;
5508 -> 5491;
5509 -> 5491;
5510 -> 5491;
5511 -> 5491;
5512 -> 5491;
5513 -> 5491;
5514 -> 5491;
5515 -> 5491;
5516 -> 5491;
5517 -> 5491;
5518 -> 5491;
5519 -> 5491;
5520 -> 5492;
5520 -> 5491;
5521 -> 5493;
5521 -> 5491;
5522 -> 5494;
5522 -> 5491;
5523 -> 5495;
5523 -> 5491;
5524 -> 5496;
5524 -> 5491;
5525 -> 5497;
5525 -> 5491;
5526 -> 5498;
5526 -> 5491;
5527 -> 5499;
5527 -> 5491;
5528 -> 5500;
5528 -> 5491;
5529 -> 5501;
5529 -> 5491;
5530 -> 5502;
5530 -> 5491;
5531 -> 5503;
5531 -> 5491;
5532 -> 5504;
5532 -> 5491;
5533 -> 5505;
5533 -> 5491;
5534 -> 5506;
5534 -> 5491;
5535 -> 5507;
5535 -> 5491;
5536 -> 5508;
5536 -> 5491;
5537 -> 5509;
5537 -> 5491;
5538 -> 5510;
5538 -> 5491;
5539 -> 5491;
5540 -> 5491;
5541 -> 5511;
5541 -> 5491;
5542 -> 5512;
5542 -> 5491;
5543 -> 5491;
5544 -> 5513;
5544 -> 5491;
5545 -> 5514;
5545 -> 5491;
5546 -> 5515;
5546 -> 5491;
5547 -> 5517;
5547 -> 5491;
5548 -> 5491;
5549 -> 5516;
5549 -> 5491;
5550 -> 0;
5550 -> 5491;
5551 -> 5518;
5551 -> 5491;
5552 -> 5520;
5552 -> 5519;
5553 -> 5521;
5553 -> 5519;
5554 -> 5522;
5554 -> 5519;
5555 -> 5523;
5555 -> 5519;
5556 -> 5524;
5556 -> 5519;
5557 -> 5525;
5557 -> 5519;
5558 -> 5526;
5558 -> 5519;
5559 -> 5527;
5559 -> 5519;
5560 -> 5528;
5560 -> 5519;
5561 -> 5529;
5561 -> 5519;
5562 -> 5530;
5562 -> 5519;
5563 -> 5531;
5563 -> 5519;
5564 -> 5532;
5564 -> 5519;
5565 -> 5533;
5565 -> 5519;
5566 -> 5534;
5566 -> 5519;
5567 -> 5535;
5567 -> 5519;
5568 -> 5536;
5568 -> 5519;
5569 -> 5537;
5569 -> 5519;
5570 -> 5538;
5570 -> 5519;
5571 -> 5539;
5571 -> 5519;
5572 -> 5540;
5572 -> 5519;
5573 -> 5541;
5573 -> 5519;
5574 -> 5542;
5574 -> 5519;
5575 -> 5543;
5575 -> 5519;
5576 -> 5544;
5576 -> 5519;
5577 -> 5545;
5577 -> 5519;
5578 -> 5546;
5578 -> 5519;
5579 -> 5547;
5579 -> 5519;
5580 -> 5548;
5580 -> 5519;
5581 -> 5549;
5581 -> 5519;
5582 -> 5550;
5582 -> 5519;
5583 -> 5551;
5583 -> 5519;
5584 -> 5519;
5585 -> 5552;
5585 -> 5519;
5586 -> 5553;
5586 -> 5519;
5587 -> 5554;
5587 -> 5519;
5588 -> 5555;
5588 -> 5519;
5589 -> 5556;
5589 -> 5519;
5590 -> 5561;
5590 -> 5519;
5591 -> 5562;
5591 -> 5519;
5592 -> 5563;
5592 -> 5519;
5593 -> 5564;
5593 -> 5519;
5594 -> 5581;
5594 -> 5519;
5595 -> 5558;
5595 -> 5519;
5596 -> 5559;
5596 -> 5519;
5597 -> 5565;
5597 -> 5519;
5598 -> 5566;
5598 -> 5519;
5599 -> 5567;
5599 -> 5519;
5600 -> 5568;
5600 -> 5519;
5601 -> 5600;
5601 -> 5519;
5602 -> 5569;
5602 -> 5519;
5603 -> 5570;
5603 -> 5519;
5604 -> 5571;
5604 -> 5519;
5605 -> 5572;
5605 -> 5519;
5606 -> 5573;
5606 -> 5519;
5607 -> 5574;
5607 -> 5519;
5608 -> 5575;
5608 -> 5519;
5609 -> 5576;
5609 -> 5519;
5610 -> 5577;
5610 -> 5519;
5611 -> 5578;
5611 -> 5519;
5612 -> 5579;
5612 -> 5519;
5613 -> 5580;
5613 -> 5519;
5614 -> 5584;
5614 -> 5585;
5614 -> 5586;
5614 -> 5587;
5614 -> 5588;
5614 -> 5589;
5614 -> 5590;
5614 -> 5591;
5614 -> 5592;
5614 -> 5593;
5614 -> 5594;
5614 -> 5595;
5614 -> 5596;
5614 -> 5597;
5614 -> 5598;
5614 -> 5599;
5614 -> 5601;
5614 -> 5602;
5614 -> 5603;
5614 -> 5604;
5614 -> 5605;
5614 -> 5606;
5614 -> 5607;
5614 -> 5608;
5614 -> 5609;
5614 -> 5610;
5614 -> 5611;
5614 -> 5612;
5614 -> 5613;
5614 -> 5491;
5614 -> 5539;
5614 -> 5519;
5615 -> 5584;
5615 -> 5519;
5616 -> 5584;
5616 -> 5519;
5617 -> 5584;
5617 -> 5519;
5618 -> 5557;
5618 -> 5519;
5619 -> 5618;
5619 -> 5584;
5619 -> 5519;
5620 -> 5560;
5620 -> 5584;
5620 -> 5519;
5621 -> 5582;
5621 -> 5584;
5621 -> 5519;
5622 -> 5583;
5622 -> 5584;
5622 -> 5519;
5623 -> 5491;
5624 -> 0;
5626 -> 5624;
5626 -> 5625;
5627 -> 5625;
5628 -> 5625;
5629 -> 5625;
5630 -> 5625;
5631 -> 5625;
5632 -> 5625;
5633 -> 5625;
5634 -> 5625;
5635 -> 5625;
5636 -> 5625;
5637 -> 5625;
5638 -> 5625;
5639 -> 5625;
5640 -> 5625;
5641 -> 5625;
5642 -> 5625;
5643 -> 5625;
5644 -> 5625;
5645 -> 5625;
5646 -> 5625;
5647 -> 5625;
5648 -> 5625;
5649 -> 5625;
5650 -> 5625;
5651 -> 5625;
5652 -> 5625;
5653 -> 5625;
5654 -> 5626;
5654 -> 5625;
5655 -> 5627;
5655 -> 5625;
5656 -> 5628;
5656 -> 5625;
5657 -> 5629;
5657 -> 5625;
5658 -> 5630;
5658 -> 5625;
5659 -> 5631;
5659 -> 5625;
5660 -> 5632;
5660 -> 5625;
5661 -> 5633;
5661 -> 5625;
5662 -> 5634;
5662 -> 5625;
5663 -> 5635;
5663 -> 5625;
5664 -> 5636;
5664 -> 5625;
5665 -> 5637;
5665 -> 5625;
5666 -> 5638;
5666 -> 5625;
5667 -> 5639;
5667 -> 5625;
5668 -> 5640;
5668 -> 5625;
5669 -> 5641;
5669 -> 5625;
5670 -> 5642;
5670 -> 5625;
5671 -> 5643;
5671 -> 5625;
5672 -> 5644;
5672 -> 5625;
5673 -> 5625;
5674 -> 5625;
5675 -> 5645;
5675 -> 5625;
5676 -> 5646;
5676 -> 5625;
5677 -> 5625;
5678 -> 5647;
5678 -> 5625;
5679 -> 5648;
5679 -> 5625;
5680 -> 5649;
5680 -> 5625;
5681 -> 5651;
5681 -> 5625;
5682 -> 5625;
5683 -> 5650;
5683 -> 5625;
5684 -> 0;
5684 -> 5625;
5685 -> 5652;
5685 -> 5625;
5686 -> 5654;
5686 -> 5653;
5687 -> 5655;
5687 -> 5653;
5688 -> 5656;
5688 -> 5653;
5689 -> 5657;
5689 -> 5653;
5690 -> 5658;
5690 -> 5653;
5691 -> 5659;
5691 -> 5653;
5692 -> 5660;
5692 -> 5653;
5693 -> 5661;
5693 -> 5653;
5694 -> 5662;
5694 -> 5653;
5695 -> 5663;
5695 -> 5653;
5696 -> 5664;
5696 -> 5653;
5697 -> 5665;
5697 -> 5653;
5698 -> 5666;
5698 -> 5653;
5699 -> 5667;
5699 -> 5653;
5700 -> 5668;
5700 -> 5653;
5701 -> 5669;
5701 -> 5653;
5702 -> 5670;
5702 -> 5653;
5703 -> 5671;
5703 -> 5653;
5704 -> 5672;
5704 -> 5653;
5705 -> 5673;
5705 -> 5653;
5706 -> 5674;
5706 -> 5653;
5707 -> 5675;
5707 -> 5653;
5708 -> 5676;
5708 -> 5653;
5709 -> 5677;
5709 -> 5653;
5710 -> 5678;
5710 -> 5653;
5711 -> 5679;
5711 -> 5653;
5712 -> 5680;
5712 -> 5653;
5713 -> 5681;
5713 -> 5653;
5714 -> 5682;
5714 -> 5653;
5715 -> 5683;
5715 -> 5653;
5716 -> 5684;
5716 -> 5653;
5717 -> 5685;
5717 -> 5653;
5718 -> 5653;
5719 -> 5686;
5719 -> 5653;
5720 -> 5687;
5720 -> 5653;
5721 -> 5688;
5721 -> 5653;
5722 -> 5689;
5722 -> 5653;
5723 -> 5690;
5723 -> 5653;
5724 -> 5695;
5724 -> 5653;
5725 -> 5696;
5725 -> 5653;
5726 -> 5697;
5726 -> 5653;
5727 -> 5698;
5727 -> 5653;
5728 -> 5715;
5728 -> 5653;
5729 -> 5692;
5729 -> 5653;
5730 -> 5693;
5730 -> 5653;
5731 -> 5699;
5731 -> 5653;
5732 -> 5700;
5732 -> 5653;
5733 -> 5701;
5733 -> 5653;
5734 -> 5702;
5734 -> 5653;
5735 -> 5734;
5735 -> 5653;
5736 -> 5703;
5736 -> 5653;
5737 -> 5704;
5737 -> 5653;
5738 -> 5705;
5738 -> 5653;
5739 -> 5706;
5739 -> 5653;
5740 -> 5707;
5740 -> 5653;
5741 -> 5708;
5741 -> 5653;
5742 -> 5709;
5742 -> 5653;
5743 -> 5710;
5743 -> 5653;
5744 -> 5711;
5744 -> 5653;
5745 -> 5712;
5745 -> 5653;
5746 -> 5713;
5746 -> 5653;
5747 -> 5714;
5747 -> 5653;
5748 -> 5718;
5748 -> 5719;
5748 -> 5720;
5748 -> 5721;
5748 -> 5722;
5748 -> 5723;
5748 -> 5724;
5748 -> 5725;
5748 -> 5726;
5748 -> 5727;
5748 -> 5728;
5748 -> 5729;
5748 -> 5730;
5748 -> 5731;
5748 -> 5732;
5748 -> 5733;
5748 -> 5735;
5748 -> 5736;
5748 -> 5737;
5748 -> 5738;
5748 -> 5739;
5748 -> 5740;
5748 -> 5741;
5748 -> 5742;
5748 -> 5743;
5748 -> 5744;
5748 -> 5745;
5748 -> 5746;
5748 -> 5747;
5748 -> 5625;
5748 -> 5673;
5748 -> 5653;
5749 -> 5718;
5749 -> 5653;
5750 -> 5718;
5750 -> 5653;
5751 -> 5718;
5751 -> 5653;
5752 -> 5691;
5752 -> 5653;
5753 -> 5752;
5753 -> 5718;
5753 -> 5653;
5754 -> 5694;
5754 -> 5718;
5754 -> 5653;
5755 -> 5716;
5755 -> 5718;
5755 -> 5653;
5756 -> 5717;
5756 -> 5718;
5756 -> 5653;
5759 -> 5757;
5759 -> 5758;
5760 -> 5625;
5760 -> 5758;
5761 -> 5759;
5761 -> 5760;
5761 -> 5748;
5761 -> 5758;
5762 -> 5760;
5762 -> 5758;
5763 -> 5758;
5764 -> 5758;
5765 -> 5762;
5765 -> 5764;
5766 -> 5763;
5766 -> 5764;
5767 -> 5765;
5767 -> 5748;
5767 -> 5764;
5768 -> 5765;
5768 -> 5748;
5768 -> 5764;
5769 -> 5765;
5769 -> 5748;
5769 -> 5764;
5770 -> 5765;
5770 -> 5748;
5770 -> 5764;
5771 -> 5765;
5771 -> 5748;
5771 -> 5753;
5771 -> 5764;
5772 -> 5765;
5772 -> 5748;
5772 -> 5764;
5773 -> 5765;
5773 -> 5748;
5773 -> 5764;
5774 -> 5765;
5774 -> 5748;
5774 -> 5749;
5774 -> 5754;
5774 -> 5764;
5775 -> 5765;
5775 -> 5748;
5775 -> 5764;
5776 -> 5765;
5776 -> 5748;
5776 -> 5764;
5777 -> 5765;
5777 -> 5748;
5777 -> 5764;
5778 -> 5765;
5778 -> 5748;
5778 -> 5764;
5779 -> 5765;
5779 -> 5748;
5779 -> 5764;
5780 -> 5765;
5780 -> 5748;
5780 -> 5764;
5781 -> 5765;
5781 -> 5748;
5781 -> 5764;
5782 -> 5765;
5782 -> 5748;
5782 -> 5764;
5783 -> 5765;
5783 -> 5748;
5783 -> 5764;
5784 -> 5765;
5784 -> 5748;
5784 -> 5764;
5785 -> 5765;
5785 -> 5748;
5785 -> 5764;
5786 -> 5765;
5786 -> 5748;
5786 -> 5764;
5787 -> 5765;
5787 -> 5748;
5787 -> 5764;
5788 -> 5765;
5788 -> 5748;
5788 -> 5764;
5789 -> 5765;
5789 -> 5748;
5789 -> 5764;
5790 -> 5765;
5790 -> 5748;
5790 -> 5764;
5791 -> 5765;
5791 -> 5748;
5791 -> 5764;
5792 -> 5765;
5792 -> 5748;
5792 -> 5764;
5793 -> 5765;
5793 -> 5748;
5793 -> 5764;
5794 -> 5765;
5794 -> 5748;
5794 -> 5764;
5795 -> 5765;
5795 -> 5748;
5795 -> 5764;
5796 -> 5765;
5796 -> 5748;
5796 -> 5764;
5797 -> 5765;
5797 -> 5748;
5797 -> 5750;
5797 -> 5755;
5797 -> 5764;
5798 -> 5765;
5798 -> 5748;
5798 -> 5751;
5798 -> 5756;
5798 -> 5764;
5799 -> 5764;
5800 -> 5767;
5800 -> 5799;
5801 -> 5768;
5801 -> 5799;
5802 -> 5769;
5802 -> 5799;
5803 -> 5770;
5803 -> 5799;
5804 -> 5771;
5804 -> 5799;
5805 -> 5772;
5805 -> 5799;
5806 -> 5773;
5806 -> 5799;
5807 -> 5774;
5807 -> 5799;
5808 -> 5775;
5808 -> 5799;
5809 -> 5776;
5809 -> 5799;
5810 -> 5777;
5810 -> 5799;
5811 -> 5778;
5811 -> 5799;
5812 -> 5779;
5812 -> 5799;
5813 -> 5780;
5813 -> 5799;
5814 -> 5781;
5814 -> 5799;
5815 -> 5782;
5815 -> 5799;
5816 -> 5783;
5816 -> 5799;
5817 -> 5784;
5817 -> 5799;
5818 -> 5785;
5818 -> 5799;
5819 -> 5786;
5819 -> 5799;
5820 -> 5787;
5820 -> 5799;
5821 -> 5788;
5821 -> 5799;
5822 -> 5789;
5822 -> 5799;
5823 -> 5790;
5823 -> 5799;
5824 -> 5791;
5824 -> 5799;
5825 -> 5792;
5825 -> 5799;
5826 -> 5793;
5826 -> 5799;
5827 -> 5794;
5827 -> 5799;
5828 -> 5795;
5828 -> 5799;
5829 -> 5796;
5829 -> 5799;
5830 -> 5797;
5830 -> 5799;
5831 -> 5798;
5831 -> 5799;
5832 -> 5766;
5832 -> 5799;
5833 -> 5799;
5834 -> 5833;
5834 -> 5800;
5834 -> 5801;
5834 -> 5802;
5834 -> 5803;
5834 -> 5804;
5834 -> 5809;
5834 -> 5810;
5834 -> 5811;
5834 -> 5812;
5834 -> 5829;
5834 -> 5806;
5834 -> 5807;
5834 -> 5813;
5834 -> 5814;
5834 -> 5815;
5834 -> 5816;
5834 -> 5817;
5834 -> 5818;
5834 -> 5819;
5834 -> 5820;
5834 -> 5821;
5834 -> 5822;
5834 -> 5823;
5834 -> 5824;
5834 -> 5825;
5834 -> 5826;
5834 -> 5827;
5834 -> 5828;
5834 -> 5748;
5834 -> 5749;
5834 -> 5754;
5834 -> 5750;
5834 -> 5755;
5834 -> 5751;
5834 -> 5756;
5834 -> 5753;
5834 -> 5752;
5834 -> 5799;
5835 -> 5833;
5835 -> 5799;
5836 -> 5833;
5836 -> 5799;
5837 -> 5833;
5837 -> 5799;
5838 -> 5805;
5838 -> 5799;
5839 -> 5838;
5839 -> 5833;
5839 -> 5799;
5840 -> 5808;
5840 -> 5833;
5840 -> 5799;
5841 -> 5759;
5841 -> 5763;
5841 -> 5758;
5842 -> 5763;
5843 -> 5486;
5843 -> 5487;
5844 -> 5486;
5844 -> 5487;
5845 -> 5486;
5845 -> 5487;
5846 -> 5486;
5846 -> 5487;
5847 -> 5843;
5847 -> 5487;
5848 -> 5846;
5848 -> 5487;
5849 -> 5844;
5849 -> 5487;
5850 -> 5845;
5850 -> 5487;
5851 -> 5487;
5852 -> 5487;
5853 -> 5847;
5853 -> 5852;
5854 -> 5848;
5854 -> 5852;
5855 -> 5849;
5855 -> 5852;
5856 -> 5850;
5856 -> 5852;
5857 -> 5851;
5857 -> 5852;
5858 -> 5851;
5858 -> 5852;
5859 -> 5851;
5859 -> 5852;
5860 -> 5851;
5860 -> 5852;
5861 -> 5852;
5862 -> 5854;
5862 -> 5861;
5862 -> 5852;
5863 -> 5860;
5863 -> 5852;
5864 -> 5856;
5864 -> 5852;
5865 -> 5864;
5865 -> 5489;
5865 -> 5852;
5866 -> 5853;
5866 -> 5852;
5867 -> 5854;
5867 -> 5852;
5868 -> 5865;
5868 -> 5852;
5869 -> 5857;
5869 -> 5852;
5870 -> 5858;
5870 -> 5852;
5871 -> 5859;
5871 -> 5852;
5872 -> 5860;
5872 -> 5852;
5873 -> 5852;
5874 -> 0;
5874 -> 5852;
5875 -> 5854;
5875 -> 5865;
5875 -> 5852;
5877 -> 5876;
5878 -> 5876;
5880 -> 5878;
5881 -> 5879;
5881 -> 5880;
5881 -> 5877;
5882 -> 5878;
5882 -> 5852;
5883 -> 5852;
5884 -> 5874;
5884 -> 5883;
5885 -> 5875;
5885 -> 5883;
5886 -> 5875;
5886 -> 5883;
5887 -> 5882;
5887 -> 5883;
5888 -> 5872;
5888 -> 5883;
5889 -> 5873;
5889 -> 5883;
5890 -> 5873;
5890 -> 5883;
5891 -> 5884;
5891 -> 5883;
5892 -> 5885;
5892 -> 5883;
5893 -> 5886;
5893 -> 5883;
5894 -> 5887;
5894 -> 5883;
5895 -> 5888;
5895 -> 5883;
5896 -> 5883;
5897 -> 5896;
5897 -> 5891;
5897 -> 5892;
5897 -> 5893;
5897 -> 5894;
5897 -> 5895;
5897 -> 0;
5897 -> 5865;
5897 -> 5881;
5897 -> 5883;
5898 -> 5896;
5898 -> 5883;
5899 -> 5889;
5899 -> 5896;
5899 -> 5883;
5900 -> 5852;
5901 -> 5866;
5901 -> 5900;
5902 -> 5867;
5902 -> 5900;
5903 -> 5868;
5903 -> 5900;
5904 -> 5869;
5904 -> 5900;
5905 -> 5870;
5905 -> 5900;
5906 -> 5871;
5906 -> 5900;
5907 -> 5872;
5907 -> 5900;
5908 -> 5873;
5908 -> 5900;
5909 -> 5873;
5909 -> 5900;
5910 -> 5873;
5910 -> 5900;
5911 -> 5873;
5911 -> 5900;
5912 -> 5873;
5912 -> 5900;
5913 -> 5873;
5913 -> 5900;
5914 -> 5901;
5914 -> 5900;
5915 -> 5902;
5915 -> 5900;
5916 -> 5903;
5916 -> 5900;
5917 -> 5904;
5917 -> 5900;
5918 -> 5905;
5918 -> 5900;
5919 -> 5906;
5919 -> 5900;
5920 -> 5907;
5920 -> 5900;
5921 -> 5908;
5921 -> 5900;
5922 -> 5909;
5922 -> 5900;
5923 -> 5910;
5923 -> 5900;
5924 -> 5910;
5924 -> 5897;
5924 -> 5900;
5925 -> 5924;
5925 -> 5897;
5925 -> 5898;
5925 -> 5899;
5925 -> 5900;
5926 -> 5911;
5926 -> 5900;
5927 -> 5912;
5927 -> 5900;
5928 -> 5900;
5929 -> 5914;
5929 -> 5928;
5930 -> 5915;
5930 -> 5928;
5931 -> 5916;
5931 -> 5928;
5932 -> 5917;
5932 -> 5928;
5933 -> 5918;
5933 -> 5928;
5934 -> 5919;
5934 -> 5928;
5935 -> 5920;
5935 -> 5928;
5936 -> 5921;
5936 -> 5928;
5937 -> 5922;
5937 -> 5928;
5938 -> 5923;
5938 -> 5928;
5939 -> 5925;
5939 -> 5928;
5940 -> 5926;
5940 -> 5928;
5941 -> 5927;
5941 -> 5928;
5942 -> 5913;
5942 -> 5928;
5943 -> 5929;
5943 -> 5928;
5944 -> 5931;
5944 -> 5928;
5945 -> 5939;
5945 -> 5928;
5946 -> 5935;
5946 -> 5928;
5947 -> 5940;
5947 -> 5928;
5948 -> 5941;
5948 -> 5928;
5949 -> 5928;
5950 -> 5949;
5950 -> 5943;
5950 -> 5944;
5950 -> 5945;
5950 -> 5946;
5950 -> 5947;
5950 -> 5948;
5950 -> 5865;
5950 -> 5925;
5950 -> 5928;
5951 -> 5949;
5951 -> 5928;
5952 -> 5949;
5952 -> 5928;
5953 -> 5949;
5953 -> 5928;
5954 -> 5949;
5954 -> 5928;
5955 -> 5949;
5955 -> 5928;
5956 -> 5949;
5956 -> 5928;
5957 -> 5949;
5957 -> 5928;
5958 -> 5949;
5958 -> 5928;
5959 -> 5949;
5959 -> 5928;
5960 -> 5949;
5960 -> 5928;
5961 -> 5949;
5961 -> 5928;
5962 -> 5949;
5962 -> 5928;
5963 -> 5949;
5963 -> 5928;
5964 -> 5949;
5964 -> 5928;
5965 -> 5949;
5965 -> 5928;
5966 -> 5949;
5966 -> 5928;
5967 -> 5949;
5967 -> 5928;
5968 -> 5949;
5968 -> 5928;
5969 -> 5949;
5969 -> 5928;
5970 -> 5949;
5970 -> 5928;
5971 -> 5949;
5971 -> 5928;
5972 -> 5949;
5972 -> 5928;
5973 -> 5949;
5973 -> 5928;
5974 -> 5949;
5974 -> 5928;
5975 -> 5949;
5975 -> 5928;
5976 -> 5949;
5976 -> 5928;
5977 -> 5928;
5978 -> 5977;
5978 -> 5949;
5978 -> 5928;
5979 -> 5949;
5979 -> 5928;
5980 -> 5949;
5980 -> 5928;
5981 -> 5949;
5981 -> 5928;
5982 -> 5949;
5982 -> 5928;
5983 -> 5949;
5983 -> 5928;
5984 -> 5949;
5984 -> 5928;
5985 -> 5949;
5985 -> 5928;
5986 -> 5928;
5987 -> 5928;
5988 -> 5985;
5988 -> 5987;
5989 -> 5986;
5989 -> 5987;
5991 -> 5990;
5992 -> 5990;
5993 -> 5987;
5994 -> 5989;
5994 -> 5993;
5995 -> 5993;
5996 -> 5989;
5996 -> 5987;
5997 -> 5988;
5997 -> 5989;
5997 -> 5987;
5998 -> 5986;
5998 -> 5949;
5998 -> 5928;
5999 -> 5930;
5999 -> 5949;
5999 -> 5928;
6000 -> 5949;
6000 -> 5928;
6001 -> 5928;
6002 -> 5928;
6003 -> 6000;
6003 -> 6002;
6004 -> 6001;
6004 -> 6002;
6005 -> 6004;
6005 -> 6002;
6006 -> 6004;
6006 -> 6002;
6007 -> 6004;
6007 -> 6002;
6008 -> 6003;
6008 -> 6004;
6008 -> 6002;
6009 -> 6001;
6009 -> 5949;
6009 -> 5928;
6010 -> 5949;
6010 -> 5950;
6010 -> 5928;
6011 -> 6010;
6011 -> 5950;
6011 -> 5951;
6011 -> 5999;
6011 -> 5952;
6011 -> 5953;
6011 -> 5954;
6011 -> 5955;
6011 -> 5956;
6011 -> 5957;
6011 -> 5958;
6011 -> 5959;
6011 -> 5960;
6011 -> 5961;
6011 -> 6009;
6011 -> 5962;
6011 -> 5963;
6011 -> 5964;
6011 -> 5965;
6011 -> 5966;
6011 -> 5967;
6011 -> 5968;
6011 -> 5969;
6011 -> 5970;
6011 -> 5971;
6011 -> 5972;
6011 -> 5973;
6011 -> 5974;
6011 -> 5975;
6011 -> 5976;
6011 -> 5978;
6011 -> 5979;
6011 -> 5998;
6011 -> 5980;
6011 -> 5981;
6011 -> 5982;
6011 -> 5983;
6011 -> 5984;
6011 -> 5977;
6011 -> 5995;
6011 -> 5996;
6011 -> 5997;
6011 -> 6008;
6011 -> 6006;
6011 -> 6007;
6011 -> 5928;
6012 -> 6011;
6012 -> 5949;
6012 -> 5928;
6013 -> 5949;
6013 -> 6011;
6013 -> 5928;
6014 -> 6013;
6014 -> 6011;
6014 -> 6012;
6014 -> 5928;
6015 -> 6014;
6015 -> 5949;
6015 -> 5928;
6016 -> 5949;
6016 -> 6014;
6016 -> 5928;
6017 -> 6016;
6017 -> 6014;
6017 -> 6015;
6017 -> 5928;
6018 -> 6017;
6018 -> 5949;
6018 -> 5928;
6019 -> 5949;
6019 -> 6017;
6019 -> 5928;
6020 -> 6019;
6020 -> 6017;
6020 -> 6018;
6020 -> 5928;
6021 -> 6020;
6021 -> 5949;
6021 -> 5928;
6022 -> 5949;
6022 -> 5928;
6023 -> 5928;
6024 -> 5928;
6025 -> 6022;
6025 -> 6024;
6026 -> 6023;
6026 -> 6024;
6027 -> 6024;
6028 -> 6027;
6028 -> 6024;
6029 -> 6027;
6029 -> 6024;
6030 -> 6027;
6030 -> 6024;
6031 -> 6024;
6032 -> 6031;
6032 -> 6027;
6032 -> 6024;
6033 -> 6024;
6034 -> 6025;
6034 -> 6033;
6034 -> 6024;
6035 -> 6025;
6035 -> 6027;
6035 -> 6024;
6036 -> 6023;
6036 -> 5949;
6036 -> 5928;
6037 -> 5938;
6037 -> 6020;
6037 -> 5928;
6038 -> 5928;
6039 -> 6037;
6039 -> 6038;
6040 -> 6038;
6041 -> 6039;
6041 -> 6038;
6042 -> 6041;
6042 -> 6020;
6042 -> 6021;
6042 -> 6036;
6042 -> 6038;
6043 -> 0;
6043 -> 6038;
6044 -> 6038;
6045 -> 6043;
6045 -> 6044;
6046 -> 6045;
6046 -> 6044;
6047 -> 0;
6047 -> 6046;
6048 -> 6047;
6048 -> 6040;
6048 -> 6038;
6049 -> 6048;
6049 -> 5928;
6050 -> 6049;
6050 -> 5949;
6050 -> 5928;
6051 -> 5935;
6051 -> 5928;
6052 -> 6051;
6053 -> 5932;
6053 -> 6052;
6053 -> 6051;
6054 -> 5933;
6054 -> 6052;
6054 -> 6051;
6055 -> 6053;
6055 -> 6054;
6055 -> 6051;
6056 -> 5934;
6056 -> 6052;
6056 -> 6051;
6057 -> 6055;
6057 -> 6056;
6057 -> 6051;
6058 -> 5937;
6058 -> 5928;
6059 -> 5949;
6059 -> 6020;
6059 -> 6021;
6059 -> 6036;
6059 -> 6050;
6059 -> 6027;
6059 -> 6028;
6059 -> 6035;
6059 -> 6029;
6059 -> 6030;
6059 -> 6032;
6059 -> 6031;
6059 -> 6058;
6060 -> 6058;
6061 -> 5949;
6061 -> 6060;
6062 -> 6061;
6062 -> 6059;
6062 -> 6060;
6063 -> 5936;
6063 -> 6058;
6064 -> 6058;
6065 -> 6058;
6066 -> 6059;
6066 -> 6065;
6067 -> 6062;
6067 -> 6065;
6068 -> 6063;
6068 -> 6065;
6069 -> 6064;
6069 -> 6065;
6070 -> 6066;
6070 -> 6065;
6071 -> 6067;
6071 -> 6065;
6072 -> 6068;
6072 -> 6065;
6073 -> 6065;
6074 -> 6073;
6074 -> 6070;
6074 -> 6071;
6074 -> 6072;
6074 -> 6059;
6074 -> 6065;
6075 -> 6064;
6075 -> 5949;
6075 -> 6058;
6076 -> 5938;
6076 -> 5949;
6076 -> 5928;
6077 -> 5949;
6077 -> 6074;
6077 -> 5928;
6078 -> 5928;
6079 -> 5949;
6079 -> 6074;
6079 -> 6078;
6079 -> 5928;
6080 -> 5852;
6081 -> 5855;
6081 -> 6080;
6081 -> 5852;
6082 -> 5855;
6082 -> 6081;
6083 -> 6081;
6084 -> 6082;
6084 -> 6083;
6085 -> 5873;
6085 -> 6083;
6086 -> 6083;
6087 -> 6084;
6087 -> 6086;
6087 -> 6083;
6088 -> 6084;
6088 -> 6083;
6089 -> 6088;
6089 -> 6074;
6089 -> 6075;
6089 -> 6076;
6089 -> 6083;
6090 -> 6083;
6091 -> 6085;
6091 -> 6089;
6091 -> 6083;
6092 -> 6090;
6092 -> 6083;
6093 -> 6091;
6093 -> 6089;
6093 -> 6083;
6094 -> 6092;
6094 -> 6093;
6094 -> 6090;
6094 -> 6089;
6094 -> 6083;
6095 -> 6083;
6096 -> 6083;
6097 -> 6084;
6097 -> 6083;
6098 -> 6097;
6098 -> 6094;
6098 -> 6083;
6099 -> 6098;
6100 -> 6098;
6101 -> 6098;
6101 -> 6100;
6102 -> 6101;
6102 -> 6098;
6102 -> 6100;
6103 -> 6102;
6103 -> 6098;
6104 -> 6098;
6105 -> 6085;
6105 -> 6104;
6105 -> 6098;
6106 -> 6098;
6107 -> 6090;
6107 -> 6106;
6107 -> 6104;
6107 -> 6098;
6108 -> 6098;
6109 -> 6098;
6109 -> 6108;
6110 -> 6108;
6111 -> 6109;
6111 -> 6110;
6112 -> 6111;
6112 -> 6107;
6112 -> 6110;
6113 -> 6112;
6113 -> 6108;
6114 -> 6108;
6115 -> 6109;
6115 -> 6114;
6116 -> 6115;
6116 -> 6107;
6116 -> 6114;
6117 -> 6116;
6117 -> 6108;
6118 -> 6108;
6119 -> 6118;
6119 -> 6098;
6120 -> 6095;
6120 -> 6119;
6120 -> 6098;
6121 -> 6096;
6121 -> 6098;
6122 -> 6090;
6122 -> 6107;
6122 -> 6083;
6123 -> 6085;
6123 -> 6122;
6123 -> 6083;
6124 -> 6084;
6124 -> 6083;
6125 -> 6083;
6126 -> 6124;
6126 -> 6125;
6127 -> 6091;
6127 -> 6125;
6128 -> 6127;
6128 -> 6122;
6128 -> 6125;
6129 -> 6127;
6129 -> 6122;
6129 -> 6125;
6130 -> 6127;
6130 -> 6122;
6130 -> 6125;
6131 -> 6127;
6131 -> 6122;
6131 -> 6125;
6132 -> 6127;
6132 -> 6122;
6132 -> 6125;
6133 -> 6126;
6133 -> 6125;
6134 -> 6127;
6134 -> 6122;
6134 -> 6133;
6134 -> 6125;
6135 -> 6125;
6136 -> 6132;
6136 -> 6135;
6136 -> 6125;
6137 -> 6134;
6137 -> 6136;
6138 -> 6136;
6139 -> 6137;
6139 -> 6138;
6140 -> 6127;
6140 -> 6138;
6141 -> 6139;
6141 -> 6138;
6142 -> 6140;
6142 -> 6134;
6142 -> 6138;
6143 -> 6138;
6144 -> 6138;
6145 -> 6141;
6145 -> 6144;
6146 -> 6142;
6146 -> 6144;
6147 -> 6142;
6147 -> 6144;
6148 -> 6142;
6148 -> 6144;
6149 -> 6142;
6149 -> 6144;
6150 -> 6143;
6150 -> 6144;
6151 -> 6143;
6151 -> 6144;
6152 -> 6144;
6152 -> 6145;
6152 -> 6146;
6152 -> 6147;
6152 -> 6148;
6152 -> 6149;
6152 -> 6134;
6153 -> 6143;
6153 -> 6136;
6154 -> 6153;
6154 -> 6083;
6155 -> 6085;
6155 -> 6152;
6155 -> 6083;
6156 -> 6120;
6156 -> 6083;
6157 -> 6154;
6157 -> 6083;
6158 -> 6083;
6159 -> 6155;
6159 -> 6158;
6160 -> 6156;
6160 -> 6158;
6161 -> 6157;
6161 -> 6158;
6162 -> 6085;
6162 -> 6158;
6163 -> 6162;
6163 -> 6152;
6163 -> 6158;
6164 -> 6158;
6165 -> 6162;
6165 -> 6164;
6166 -> 6165;
6166 -> 6152;
6166 -> 6164;
6167 -> 6166;
6167 -> 6164;
6168 -> 6167;
6168 -> 6158;
6169 -> 6162;
6169 -> 6152;
6169 -> 6144;
6169 -> 6150;
6169 -> 6158;
6170 -> 6158;
6171 -> 6169;
6171 -> 6170;
6172 -> 6171;
6172 -> 6169;
6172 -> 6170;
6173 -> 6158;
6174 -> 6172;
6174 -> 6173;
6175 -> 6159;
6175 -> 6158;
6176 -> 6160;
6176 -> 6158;
6177 -> 6161;
6177 -> 6158;
6178 -> 6158;
6179 -> 6158;
6180 -> 6163;
6180 -> 6179;
6181 -> 6163;
6181 -> 6179;
6182 -> 6163;
6182 -> 6179;
6183 -> 6168;
6183 -> 6179;
6184 -> 6172;
6184 -> 6179;
6185 -> 6174;
6185 -> 6179;
6186 -> 6174;
6186 -> 6179;
6187 -> 6175;
6187 -> 6179;
6188 -> 6176;
6188 -> 6179;
6189 -> 6177;
6189 -> 6179;
6190 -> 6174;
6190 -> 6179;
6191 -> 6178;
6191 -> 6179;
6192 -> 6178;
6192 -> 6179;
6193 -> 6183;
6193 -> 6179;
6194 -> 6184;
6194 -> 6179;
6195 -> 6185;
6195 -> 6179;
6196 -> 6189;
6196 -> 6174;
6196 -> 6179;
6197 -> 6179;
6198 -> 6196;
6198 -> 6197;
6199 -> 6197;
6200 -> 6198;
6200 -> 6199;
6201 -> 6200;
6201 -> 6196;
6201 -> 6199;
6202 -> 6201;
6202 -> 6197;
6203 -> 6196;
6203 -> 6197;
6204 -> 6203;
6204 -> 6202;
6204 -> 6197;
6205 -> 6191;
6205 -> 6179;
6206 -> 6179;
6207 -> 6193;
6207 -> 6206;
6208 -> 6194;
6208 -> 6206;
6209 -> 6195;
6209 -> 6206;
6210 -> 6205;
6210 -> 6206;
6211 -> 6192;
6211 -> 6206;
6212 -> 6210;
6212 -> 6206;
6213 -> 6206;
6214 -> 6213;
6214 -> 6206;
6215 -> 6213;
6215 -> 6206;
6216 -> 6213;
6216 -> 6206;
6217 -> 6213;
6217 -> 6206;
6218 -> 6213;
6218 -> 6206;
6219 -> 6213;
6219 -> 6206;
6220 -> 6213;
6220 -> 6206;
6221 -> 6213;
6221 -> 6206;
6222 -> 6213;
6222 -> 6206;
6223 -> 6213;
6223 -> 6206;
6224 -> 6213;
6224 -> 6206;
6225 -> 6213;
6225 -> 6206;
6226 -> 6213;
6226 -> 6206;
6227 -> 6213;
6227 -> 6206;
6228 -> 6213;
6228 -> 6206;
6229 -> 6213;
6229 -> 6206;
6230 -> 6213;
6230 -> 6206;
6231 -> 6213;
6231 -> 6206;
6232 -> 6213;
6232 -> 6206;
6233 -> 6213;
6233 -> 6206;
6234 -> 6213;
6234 -> 6206;
6235 -> 6213;
6235 -> 6206;
6236 -> 6213;
6236 -> 6206;
6237 -> 6213;
6237 -> 6206;
6238 -> 6213;
6238 -> 6206;
6239 -> 6213;
6239 -> 6206;
6240 -> 6206;
6241 -> 6240;
6241 -> 6213;
6241 -> 6206;
6242 -> 6213;
6242 -> 6206;
6243 -> 6213;
6243 -> 6206;
6244 -> 6213;
6244 -> 6206;
6245 -> 6213;
6245 -> 6206;
6246 -> 6213;
6246 -> 6206;
6247 -> 6213;
6247 -> 6206;
6248 -> 6213;
6248 -> 6206;
6249 -> 6206;
6250 -> 6206;
6251 -> 6248;
6251 -> 6250;
6252 -> 6249;
6252 -> 6250;
6253 -> 6250;
6254 -> 6252;
6254 -> 6253;
6255 -> 6253;
6256 -> 6252;
6256 -> 6250;
6257 -> 6251;
6257 -> 6252;
6257 -> 6250;
6258 -> 6249;
6258 -> 6213;
6258 -> 6206;
6259 -> 6213;
6259 -> 6206;
6260 -> 6206;
6261 -> 6206;
6262 -> 6259;
6262 -> 6261;
6263 -> 6260;
6263 -> 6261;
6264 -> 6263;
6264 -> 6261;
6265 -> 6263;
6265 -> 6261;
6266 -> 6263;
6266 -> 6261;
6267 -> 6262;
6267 -> 6263;
6267 -> 6261;
6268 -> 6260;
6268 -> 6213;
6268 -> 6206;
6269 -> 6213;
6269 -> 6206;
6270 -> 6206;
6271 -> 6206;
6272 -> 6269;
6272 -> 6271;
6273 -> 6270;
6273 -> 6271;
6274 -> 6271;
6275 -> 6274;
6275 -> 6271;
6276 -> 6274;
6276 -> 6271;
6277 -> 6274;
6277 -> 6271;
6278 -> 6271;
6279 -> 6278;
6279 -> 6274;
6279 -> 6271;
6280 -> 6271;
6281 -> 6272;
6281 -> 6280;
6281 -> 6271;
6282 -> 6272;
6282 -> 6274;
6282 -> 6271;
6283 -> 6270;
6283 -> 6213;
6283 -> 6206;
6284 -> 6206;
6285 -> 6204;
6285 -> 6284;
6286 -> 6284;
6287 -> 6285;
6287 -> 6284;
6288 -> 6287;
6288 -> 6204;
6288 -> 6274;
6288 -> 6278;
6288 -> 6283;
6288 -> 6275;
6288 -> 6282;
6288 -> 6276;
6288 -> 6277;
6288 -> 6279;
6289 -> 6287;
6290 -> 6288;
6290 -> 6289;
6291 -> 6287;
6292 -> 6290;
6292 -> 6291;
6293 -> 6186;
6293 -> 6206;
6294 -> 6293;
6295 -> 6207;
6295 -> 6294;
6295 -> 6293;
6296 -> 6208;
6296 -> 6294;
6296 -> 6293;
6297 -> 6295;
6297 -> 6296;
6297 -> 6293;
6298 -> 6209;
6298 -> 6294;
6298 -> 6293;
6299 -> 6297;
6299 -> 6298;
6299 -> 6293;
6300 -> 6187;
6300 -> 6188;
6301 -> 6213;
6301 -> 6188;
6302 -> 6187;
6302 -> 6301;
6302 -> 6290;
6302 -> 6292;
6302 -> 6188;
6303 -> 6187;
6303 -> 6213;
6303 -> 6188;
6304 -> 6213;
6304 -> 6302;
6304 -> 6206;
6305 -> 6206;
6306 -> 6213;
6306 -> 6302;
6306 -> 6305;
6306 -> 6206;
6307 -> 6178;
6307 -> 6083;
6308 -> 6307;
6308 -> 6081;
6309 -> 6308;
6309 -> 6302;
6309 -> 5852;
6310 -> 6308;
6310 -> 5852;
6311 -> 5486;
6311 -> 6310;
6311 -> 6302;
6311 -> 6303;
6311 -> 6189;
6311 -> 39;
6312 -> 6311;
6312 -> 39;
6313 -> 39;
6314 -> 6312;
6314 -> 6313;
6315 -> 6313;
6316 -> 6314;
6316 -> 6315;
6317 -> 6315;
6318 -> 6316;
6318 -> 6311;
6318 -> 6317;
6319 -> 6317;
6320 -> 6318;
6320 -> 6311;
6320 -> 6319;
6320 -> 6317;
6321 -> 6318;
6321 -> 6311;
6321 -> 6320;
6322 -> 6320;
6323 -> 6321;
6323 -> 6322;
6324 -> 6321;
6324 -> 6322;
6325 -> 6321;
6325 -> 6322;
6326 -> 6321;
6326 -> 6322;
6327 -> 6321;
6327 -> 6322;
6328 -> 6322;
6329 -> 6322;
6330 -> 6322;
6331 -> 6322;
6332 -> 6322;
6333 -> 0;
6335 -> 6334;
6337 -> 6336;
6339 -> 6333;
6339 -> 6338;
6340 -> 6335;
6340 -> 6338;
6341 -> 6337;
6341 -> 6338;
6342 -> 6338;
6343 -> 6342;
6343 -> 6338;
6344 -> 6342;
6344 -> 6338;
6345 -> 6342;
6345 -> 6338;
6346 -> 6342;
6346 -> 6338;
6347 -> 6342;
6347 -> 6338;
6348 -> 6342;
6348 -> 6338;
6349 -> 6342;
6349 -> 6338;
6350 -> 6339;
6350 -> 6342;
6350 -> 6338;
6351 -> 6340;
6351 -> 6342;
6351 -> 6338;
6352 -> 6342;
6352 -> 6338;
6353 -> 6338;
6354 -> 6338;
6355 -> 6352;
6355 -> 6354;
6356 -> 6353;
6356 -> 6354;
6357 -> 6356;
6357 -> 6354;
6358 -> 6356;
6358 -> 6354;
6359 -> 6356;
6359 -> 6354;
6360 -> 6356;
6360 -> 6354;
6361 -> 6355;
6361 -> 6350;
6361 -> 0;
6361 -> 6354;
6362 -> 6361;
6362 -> 6356;
6362 -> 6354;
6363 -> 6356;
6363 -> 6362;
6363 -> 6361;
6363 -> 6354;
6364 -> 6363;
6364 -> 6356;
6364 -> 6354;
6365 -> 6356;
6365 -> 6362;
6365 -> 6363;
6365 -> 6354;
6366 -> 6365;
6366 -> 6356;
6366 -> 6354;
6367 -> 6356;
6367 -> 6362;
6367 -> 6365;
6367 -> 6354;
6368 -> 6367;
6368 -> 6356;
6368 -> 6354;
6369 -> 6353;
6369 -> 6341;
6369 -> 6338;
6370 -> 6369;
6370 -> 6342;
6370 -> 6338;
6371 -> 6342;
6371 -> 6338;
6372 -> 6371;
6372 -> 6342;
6372 -> 6338;
6373 -> 6342;
6373 -> 6338;
6374 -> 6373;
6374 -> 6342;
6374 -> 6338;
6375 -> 6342;
6375 -> 6338;
6376 -> 6375;
6376 -> 6342;
6376 -> 6338;
6377 -> 6338;
6378 -> 0;
6379 -> 6378;
6380 -> 0;
6381 -> 6380;
6382 -> 6377;
6382 -> 6322;
6383 -> 6323;
6383 -> 6322;
6384 -> 6328;
6384 -> 6383;
6385 -> 6383;
6386 -> 6324;
6386 -> 6383;
6387 -> 6325;
6387 -> 6383;
6388 -> 6326;
6388 -> 6383;
6389 -> 6327;
6389 -> 6383;
6390 -> 6329;
6390 -> 6383;
6391 -> 6330;
6391 -> 6383;
6392 -> 6331;
6392 -> 6383;
6393 -> 6332;
6393 -> 6383;
6394 -> 6382;
6394 -> 6383;
6395 -> 6383;
6396 -> 6384;
6396 -> 6395;
6397 -> 6385;
6397 -> 6395;
6398 -> 6386;
6398 -> 6395;
6399 -> 6387;
6399 -> 6395;
6400 -> 6388;
6400 -> 6395;
6401 -> 6389;
6401 -> 6395;
6402 -> 6390;
6402 -> 6395;
6403 -> 6391;
6403 -> 6395;
6404 -> 6392;
6404 -> 6395;
6405 -> 6393;
6405 -> 6395;
6406 -> 6394;
6406 -> 6395;
6407 -> 6397;
6407 -> 6311;
6407 -> 6395;
6408 -> 6395;
6409 -> 6407;
6409 -> 6408;
6410 -> 6409;
6410 -> 0;
6410 -> 6395;
6411 -> 6397;
6411 -> 6395;
6412 -> 6398;
6412 -> 6395;
6413 -> 6401;
6413 -> 6395;
6414 -> 6405;
6414 -> 6395;
6415 -> 6406;
6415 -> 6395;
6416 -> 6395;
6417 -> 6411;
6417 -> 6416;
6418 -> 6412;
6418 -> 6416;
6419 -> 6413;
6419 -> 6416;
6420 -> 6414;
6420 -> 6416;
6421 -> 6415;
6421 -> 6416;
6422 -> 6417;
6422 -> 6418;
6422 -> 6419;
6422 -> 6416;
6423 -> 6422;
6423 -> 6409;
6423 -> 6416;
6424 -> 6417;
6424 -> 6416;
6425 -> 6423;
6425 -> 6416;
6426 -> 6420;
6426 -> 6424;
6426 -> 6425;
6426 -> 6332;
6426 -> 6423;
6426 -> 6416;
6427 -> 6423;
6427 -> 6416;
6428 -> 6416;
6429 -> 6427;
6429 -> 6428;
6430 -> 6421;
6430 -> 6428;
6431 -> 6428;
6432 -> 6430;
6432 -> 6351;
6432 -> 6431;
6432 -> 6428;
6433 -> 6430;
6433 -> 6350;
6433 -> 6432;
6434 -> 6429;
6434 -> 6432;
6435 -> 6430;
6435 -> 6370;
6435 -> 6432;
6436 -> 6432;
6437 -> 6432;
6438 -> 6433;
6438 -> 6437;
6439 -> 6434;
6439 -> 6437;
6440 -> 6435;
6440 -> 6437;
6441 -> 6436;
6441 -> 6437;
6442 -> 6441;
6442 -> 6437;
6443 -> 6441;
6443 -> 6437;
6444 -> 6441;
6444 -> 6437;
6445 -> 6441;
6445 -> 6437;
6446 -> 6441;
6446 -> 6437;
6447 -> 6441;
6447 -> 6437;
6448 -> 6441;
6448 -> 6437;
6449 -> 6441;
6449 -> 6437;
6450 -> 6449;
6450 -> 6441;
6450 -> 6437;
6451 -> 6441;
6451 -> 6437;
6452 -> 6451;
6452 -> 6441;
6452 -> 6437;
6453 -> 6441;
6453 -> 6437;
6454 -> 6453;
6454 -> 6441;
6454 -> 6437;
6455 -> 6436;
6455 -> 6416;
6456 -> 6395;
6457 -> 6397;
6457 -> 6395;
6458 -> 6396;
6458 -> 6457;
6458 -> 6328;
6458 -> 6426;
6458 -> 6395;
6459 -> 6397;
6459 -> 6395;
6460 -> 6402;
6460 -> 6329;
6460 -> 6395;
6461 -> 6402;
6461 -> 6459;
6461 -> 6460;
6461 -> 6329;
6461 -> 6458;
6461 -> 6395;
6462 -> 6328;
6462 -> 6461;
6462 -> 6322;
6463 -> 6329;
6463 -> 6461;
6463 -> 6322;
6464 -> 6330;
6464 -> 6322;
6465 -> 6331;
6465 -> 6322;
6466 -> 6455;
6466 -> 6322;
6467 -> 6322;
6468 -> 6322;
6469 -> 6462;
6469 -> 6468;
6470 -> 6463;
6470 -> 6468;
6471 -> 6464;
6471 -> 6468;
6472 -> 6465;
6472 -> 6468;
6473 -> 6463;
6473 -> 6468;
6474 -> 6466;
6474 -> 6468;
6475 -> 6467;
6475 -> 6468;
6476 -> 6475;
6476 -> 6468;
6477 -> 6475;
6477 -> 6468;
6478 -> 6475;
6478 -> 6468;
6479 -> 6475;
6479 -> 6468;
6480 -> 6475;
6480 -> 6468;
6481 -> 6469;
6481 -> 6468;
6482 -> 6469;
6482 -> 6462;
6482 -> 6468;
6483 -> 6469;
6483 -> 6468;
6484 -> 6473;
6484 -> 6481;
6484 -> 6468;
6485 -> 0;
6485 -> 6468;
6486 -> 6469;
6486 -> 6475;
6486 -> 6468;
6487 -> 6470;
6487 -> 6475;
6487 -> 6468;
6488 -> 6471;
6488 -> 6475;
6488 -> 6468;
6489 -> 6472;
6489 -> 6475;
6489 -> 6468;
6490 -> 6473;
6490 -> 6475;
6490 -> 6468;
6491 -> 6474;
6491 -> 6475;
6491 -> 6468;
6492 -> 6467;
6492 -> 6320;
6493 -> 6320;
6494 -> 6321;
6494 -> 6492;
6494 -> 6493;
6494 -> 6487;
6494 -> 6488;
6494 -> 6489;
6494 -> 6490;
6494 -> 6491;
6494 -> 6486;
6494 -> 6484;
6494 -> 6462;
6494 -> 6464;
6494 -> 6465;
6494 -> 6438;
6494 -> 6439;
6494 -> 6440;
6494 -> 6445;
6494 -> 6450;
6494 -> 6452;
6494 -> 6454;
6494 -> 0;
6494 -> 6362;
6494 -> 6364;
6494 -> 6366;
6494 -> 6368;
6494 -> 6367;
6494 -> 6449;
6494 -> 6451;
6494 -> 6453;
6494 -> 6320;
6495 -> 6318;
6495 -> 6494;
6495 -> 6317;
6496 -> 6495;
6496 -> 6315;
6497 -> 6496;
6497 -> 6313;
6498 -> 6497;
6498 -> 6494;
6498 -> 6313;
6499 -> 6313;
6500 -> 6497;
6500 -> 6499;
6500 -> 6494;
6500 -> 6313;
6501 -> 6313;
6502 -> 6500;
6502 -> 6501;
6503 -> 6501;
6504 -> 0;
6504 -> 6313;
6505 -> 6313;
6506 -> 6504;
6506 -> 6505;
6507 -> 6502;
6507 -> 6505;
6508 -> 6506;
6508 -> 6505;
6509 -> 6505;
6510 -> 6508;
6510 -> 6509;
6511 -> 6510;
6511 -> 6509;
6512 -> 6511;
6513 -> 6505;
6514 -> 6512;
6514 -> 6513;
6514 -> 6505;
6515 -> 6507;
6515 -> 6502;
6515 -> 6505;
6516 -> 6506;
6516 -> 6505;
6517 -> 6505;
6518 -> 6516;
6518 -> 6517;
6519 -> 6518;
6519 -> 6517;
6520 -> 6517;
6521 -> 6519;
6521 -> 6520;
6522 -> 6521;
6522 -> 6520;
6523 -> 6522;
6524 -> 6517;
6525 -> 6518;
6525 -> 6517;
6526 -> 0;
6526 -> 6525;
6527 -> 6515;
6527 -> 6526;
6527 -> 6505;
6528 -> 46;
6528 -> 6527;
6528 -> 39;
6529 -> 6311;
6529 -> 39;
6530 -> 6529;
6530 -> 1;
6531 -> 0;
6531 -> 1;
6532 -> 1;
6533 -> 1;
6534 -> 6530;
6534 -> 6533;
6535 -> 6532;
6535 -> 6533;
6536 -> 6532;
6536 -> 6533;
6537 -> 6532;
6537 -> 6533;
6538 -> 6532;
6538 -> 6533;
6539 -> 6532;
6539 -> 6533;
6540 -> 6532;
6540 -> 6533;
6541 -> 6532;
6541 -> 6533;
6542 -> 6532;
6542 -> 6533;
6543 -> 6532;
6543 -> 6533;
6544 -> 6532;
6544 -> 6533;
6545 -> 6531;
6545 -> 6533;
6546 -> 10;
6546 -> 6533;
6547 -> 6534;
6547 -> 6533;
6548 -> 6535;
6548 -> 6533;
6549 -> 6536;
6549 -> 6533;
6550 -> 6537;
6550 -> 6533;
6551 -> 6533;
6552 -> 6550;
6552 -> 6551;
6553 -> 6546;
6553 -> 6551;
6554 -> 6551;
6555 -> 6552;
6555 -> 6554;
6555 -> 6551;
6556 -> 6555;
6557 -> 6538;
6557 -> 6533;
6558 -> 6539;
6558 -> 6533;
6559 -> 6533;
6560 -> 6558;
6560 -> 6559;
6561 -> 6546;
6561 -> 6559;
6562 -> 6559;
6563 -> 6560;
6563 -> 6562;
6563 -> 6559;
6564 -> 6563;
6565 -> 6540;
6565 -> 6533;
6566 -> 6541;
6566 -> 6533;
6567 -> 6542;
6567 -> 6533;
6568 -> 6543;
6568 -> 6533;
6569 -> 6544;
6569 -> 6533;
6570 -> 6545;
6570 -> 6533;
6571 -> 6533;
6572 -> 6547;
6572 -> 6571;
6573 -> 6548;
6573 -> 6571;
6574 -> 6549;
6574 -> 6571;
6575 -> 6556;
6575 -> 6571;
6576 -> 6557;
6576 -> 6571;
6577 -> 6564;
6577 -> 6571;
6578 -> 6565;
6578 -> 6571;
6579 -> 6566;
6579 -> 6571;
6580 -> 6567;
6580 -> 6571;
6581 -> 6568;
6581 -> 6571;
6582 -> 6569;
6582 -> 6571;
6583 -> 6570;
6583 -> 6571;
6584 -> 6546;
6584 -> 6571;
6585 -> 6572;
6585 -> 6571;
6586 -> 6571;
6587 -> 6579;
6587 -> 6586;
6587 -> 6571;
6588 -> 6571;
6589 -> 6575;
6589 -> 6588;
6589 -> 6571;
6590 -> 6571;
6591 -> 6572;
6591 -> 6571;
6592 -> 6574;
6592 -> 6571;
6593 -> 6573;
6593 -> 6571;
6594 -> 6578;
6594 -> 6571;
6595 -> 6579;
6595 -> 6571;
6596 -> 6580;
6596 -> 6571;
6597 -> 6571;
6598 -> 6597;
6598 -> 6581;
6598 -> 6571;
6599 -> 6576;
6599 -> 6571;
6600 -> 6577;
6600 -> 6571;
6601 -> 6582;
6601 -> 6571;
6602 -> 6583;
6602 -> 6571;
6603 -> 6571;
6604 -> 6591;
6604 -> 6603;
6605 -> 6592;
6605 -> 6603;
6606 -> 6593;
6606 -> 6603;
6607 -> 6594;
6607 -> 6603;
6608 -> 6595;
6608 -> 6603;
6609 -> 6596;
6609 -> 6603;
6610 -> 6598;
6610 -> 6603;
6611 -> 6599;
6611 -> 6603;
6612 -> 6600;
6612 -> 6603;
6613 -> 6601;
6613 -> 6603;
6614 -> 6602;
6614 -> 6603;
6615 -> 6584;
6615 -> 6603;
6616 -> 6604;
6616 -> 6603;
6617 -> 6615;
6617 -> 9;
6617 -> 6603;
6618 -> 6605;
6618 -> 6603;
6619 -> 6603;
6620 -> 6603;
6621 -> 6616;
6621 -> 6620;
6622 -> 6617;
6622 -> 6620;
6623 -> 6618;
6623 -> 6620;
6624 -> 6619;
6624 -> 6620;
6625 -> 6624;
6625 -> 6620;
6626 -> 6624;
6626 -> 6620;
6627 -> 6624;
6627 -> 6620;
6628 -> 6624;
6628 -> 6620;
6629 -> 6624;
6629 -> 6620;
6630 -> 6624;
6630 -> 6620;
6631 -> 6621;
6631 -> 6624;
6631 -> 6620;
6632 -> 6623;
6632 -> 6624;
6632 -> 6620;
6633 -> 6622;
6633 -> 6624;
6633 -> 6620;
6634 -> 6608;
6634 -> 6603;
6635 -> 6609;
6635 -> 6603;
6636 -> 6610;
6636 -> 6603;
6637 -> 6606;
6637 -> 6603;
6638 -> 6613;
6638 -> 6603;
6639 -> 6614;
6639 -> 6603;
6640 -> 6607;
6640 -> 6603;
6641 -> 6603;
6642 -> 6634;
6642 -> 6641;
6643 -> 6635;
6643 -> 6641;
6644 -> 6636;
6644 -> 6641;
6645 -> 6637;
6645 -> 6641;
6646 -> 6638;
6646 -> 6641;
6647 -> 6639;
6647 -> 6641;
6648 -> 6640;
6648 -> 6641;
6649 -> 6619;
6649 -> 6641;
6650 -> 0;
6651 -> 6650;
6652 -> 6651;
6653 -> 6649;
6653 -> 6632;
6653 -> 6641;
6654 -> 6641;
6655 -> 6653;
6655 -> 6654;
6656 -> 6655;
6656 -> 6654;
6657 -> 6652;
6657 -> 6651;
6657 -> 6656;
6657 -> 6654;
6658 -> 6657;
6658 -> 6641;
6659 -> 6645;
6659 -> 6641;
6660 -> 6646;
6660 -> 6641;
6661 -> 6641;
6662 -> 6658;
6662 -> 6661;
6663 -> 6659;
6663 -> 6661;
6664 -> 6660;
6664 -> 6661;
6665 -> 6649;
6665 -> 6661;
6667 -> 6665;
6667 -> 6631;
6667 -> 6661;
6668 -> 6663;
6668 -> 6661;
6669 -> 6664;
6669 -> 6661;
6670 -> 6661;
6671 -> 6667;
6671 -> 6668;
6671 -> 6669;
6671 -> 6670;
6671 -> 6662;
6671 -> 6502;
6671 -> 6657;
6671 -> 6661;
6672 -> 6671;
6672 -> 6670;
6673 -> 6671;
6673 -> 6670;
6674 -> 6671;
6674 -> 6670;
6675 -> 6671;
6675 -> 6670;
6676 -> 6671;
6676 -> 6670;
6677 -> 6671;
6677 -> 6670;
6678 -> 6672;
6678 -> 6670;
6679 -> 6670;
6680 -> 6678;
6680 -> 6679;
6681 -> 6679;
6682 -> 6680;
6682 -> 6679;
6683 -> 6679;
6684 -> 6682;
6684 -> 6683;
6685 -> 6683;
6686 -> 6684;
6686 -> 6671;
6686 -> 6683;
6687 -> 6683;
6688 -> 6686;
6688 -> 6687;
6689 -> 6683;
6690 -> 6688;
6690 -> 6689;
6690 -> 6683;
6691 -> 6684;
6691 -> 6688;
6691 -> 6683;
6692 -> 6683;
6693 -> 6691;
6693 -> 6692;
6694 -> 6692;
6695 -> 6693;
6695 -> 6694;
6696 -> 6695;
6696 -> 6691;
6696 -> 6694;
6697 -> 6695;
6697 -> 6696;
6698 -> 6696;
6699 -> 6697;
6699 -> 6698;
6700 -> 6695;
6700 -> 6691;
6700 -> 6698;
6701 -> 6699;
6701 -> 6698;
6702 -> 6698;
6703 -> 6701;
6703 -> 6702;
6704 -> 6700;
6704 -> 6702;
6705 -> 6702;
6706 -> 6702;
6707 -> 6702;
6708 -> 6703;
6708 -> 6707;
6709 -> 6708;
6709 -> 6702;
6710 -> 6702;
6711 -> 6702;
6712 -> 6711;
6712 -> 6702;
6713 -> 6702;
6714 -> 6713;
6714 -> 6702;
6715 -> 6702;
6716 -> 6715;
6716 -> 6702;
6717 -> 6702;
6718 -> 6717;
6718 -> 6702;
6719 -> 6703;
6719 -> 6702;
6720 -> 6706;
6720 -> 6702;
6721 -> 6717;
6721 -> 6702;
6722 -> 6710;
6722 -> 6702;
6723 -> 6711;
6723 -> 6702;
6724 -> 6713;
6724 -> 6702;
6725 -> 6715;
6725 -> 6702;
6726 -> 6705;
6726 -> 6702;
6727 -> 6719;
6727 -> 6720;
6727 -> 6721;
6727 -> 6722;
6727 -> 6723;
6727 -> 6724;
6727 -> 6725;
6727 -> 6726;
6727 -> 6704;
6727 -> 6691;
6727 -> 6706;
6727 -> 6705;
6727 -> 6718;
6727 -> 6712;
6727 -> 6714;
6727 -> 6716;
6727 -> 6702;
6728 -> 6702;
6729 -> 6727;
6729 -> 6728;
6730 -> 6728;
6731 -> 6729;
6731 -> 6730;
6732 -> 6730;
6733 -> 6731;
6733 -> 6727;
6733 -> 6732;
6734 -> 6733;
6734 -> 6730;
6735 -> 6734;
6735 -> 6728;
6736 -> 6728;
6737 -> 6735;
6737 -> 6736;
6738 -> 6737;
6738 -> 6727;
6738 -> 6736;
6739 -> 6736;
6740 -> 6738;
6740 -> 6739;
6741 -> 6740;
6741 -> 6738;
6741 -> 6739;
6742 -> 6739;
6743 -> 6741;
6743 -> 6742;
6744 -> 6743;
6744 -> 6742;
6745 -> 6742;
6746 -> 6742;
6747 -> 6744;
6747 -> 6746;
6748 -> 6745;
6748 -> 6746;
6749 -> 6747;
6749 -> 6741;
6749 -> 6746;
6750 -> 0;
6750 -> 6749;
6751 -> 6746;
6752 -> 6750;
6752 -> 6751;
6753 -> 6748;
6753 -> 6751;
6754 -> 6752;
6754 -> 6751;
6755 -> 6751;
6756 -> 6754;
6756 -> 6755;
6757 -> 6753;
6757 -> 6755;
6758 -> 6757;
6758 -> 6755;
6759 -> 6756;
6759 -> 6757;
6759 -> 6755;
6760 -> 6747;
6760 -> 6748;
6760 -> 6746;
6761 -> 6745;
6761 -> 6739;
6762 -> 6741;
6762 -> 6761;
6762 -> 6759;
6762 -> 6760;
6762 -> 6739;
6763 -> 6741;
6763 -> 6742;
6764 -> 6763;
6764 -> 6762;
6764 -> 6742;
6765 -> 6739;
6766 -> 6740;
6766 -> 6764;
6766 -> 6765;
6766 -> 6739;
6768 -> 6767;
6769 -> 6768;
6770 -> 6764;
6770 -> 6766;
6771 -> 6740;
6771 -> 6764;
6771 -> 6766;
6772 -> 6766;
6773 -> 6771;
6773 -> 6772;
6774 -> 6771;
6774 -> 6772;
6775 -> 6771;
6775 -> 6772;
6776 -> 6773;
6776 -> 6772;
6777 -> 6774;
6777 -> 6772;
6778 -> 6775;
6778 -> 6772;
6779 -> 6772;
6780 -> 6772;
6781 -> 6776;
6781 -> 6780;
6782 -> 6777;
6782 -> 6780;
6783 -> 6778;
6783 -> 6780;
6784 -> 6779;
6784 -> 6780;
6785 -> 6780;
6786 -> 6784;
6786 -> 6785;
6787 -> 6784;
6787 -> 6780;
6788 -> 6784;
6788 -> 6780;
6789 -> 6784;
6789 -> 6780;
6790 -> 6781;
6790 -> 6784;
6790 -> 6780;
6791 -> 6782;
6791 -> 6784;
6791 -> 6780;
6792 -> 6783;
6792 -> 6784;
6792 -> 6780;
6793 -> 6772;
6794 -> 6793;
6794 -> 6773;
6794 -> 6771;
6794 -> 6772;
6795 -> 6794;
6795 -> 6793;
6796 -> 6772;
6797 -> 6794;
6797 -> 6796;
6798 -> 6779;
6798 -> 6796;
6799 -> 6796;
6800 -> 6797;
6800 -> 6799;
6800 -> 6796;
6801 -> 6798;
6801 -> 6800;
6802 -> 6801;
6802 -> 6797;
6802 -> 6790;
6802 -> 6791;
6802 -> 6792;
6802 -> 6794;
6802 -> 6800;
6803 -> 6800;
6804 -> 6802;
6804 -> 6803;
6805 -> 6802;
6805 -> 6803;
6806 -> 6805;
6806 -> 6802;
6806 -> 6803;
6807 -> 6803;
6808 -> 6806;
6808 -> 6807;
6809 -> 6804;
6809 -> 6803;
6810 -> 6804;
6810 -> 6808;
6810 -> 6803;
6811 -> 6803;
6812 -> 6809;
6812 -> 6811;
6813 -> 6810;
6813 -> 6811;
6814 -> 6810;
6814 -> 6811;
6815 -> 6805;
6815 -> 6811;
6816 -> 6811;
6817 -> 6812;
6817 -> 6816;
6818 -> 6817;
6818 -> 6808;
6818 -> 6816;
6819 -> 6818;
6819 -> 6811;
6820 -> 6811;
6821 -> 6812;
6821 -> 6820;
6822 -> 6821;
6822 -> 6808;
6822 -> 6820;
6823 -> 6822;
6823 -> 6811;
6824 -> 6815;
6824 -> 6808;
6824 -> 6811;
6825 -> 6811;
6826 -> 6824;
6826 -> 6825;
6827 -> 6823;
6827 -> 6826;
6827 -> 6811;
6828 -> 6819;
6828 -> 6827;
6828 -> 6811;
6829 -> 6811;
6830 -> 6813;
6830 -> 6808;
6830 -> 6829;
6830 -> 6811;
6831 -> 0;
6831 -> 6830;
6832 -> 6804;
6832 -> 6826;
6832 -> 6803;
6833 -> 6803;
6834 -> 6832;
6834 -> 6833;
6835 -> 6832;
6835 -> 6833;
6836 -> 6834;
6836 -> 6833;
6837 -> 6833;
6838 -> 6833;
6839 -> 6836;
6839 -> 6838;
6840 -> 6837;
6840 -> 6838;
6841 -> 6838;
6842 -> 6841;
6842 -> 6838;
6843 -> 6839;
6843 -> 6841;
6843 -> 6838;
6844 -> 6837;
6844 -> 6803;
6845 -> 6832;
6845 -> 6844;
6845 -> 6841;
6845 -> 6842;
6845 -> 6843;
6845 -> 6803;
6846 -> 6804;
6846 -> 6803;
6847 -> 6831;
6847 -> 6803;
6848 -> 0;
6848 -> 6803;
6849 -> 6803;
6850 -> 6845;
6850 -> 6849;
6851 -> 6845;
6851 -> 6849;
6852 -> 6845;
6852 -> 6849;
6853 -> 6845;
6853 -> 6849;
6854 -> 6845;
6854 -> 6849;
6855 -> 6845;
6855 -> 6849;
6856 -> 6845;
6856 -> 6849;
6857 -> 6750;
6857 -> 6849;
6858 -> 6852;
6858 -> 6849;
6859 -> 6852;
6859 -> 6849;
6860 -> 6859;
6860 -> 6845;
6860 -> 6849;
6861 -> 6849;
6862 -> 6860;
6862 -> 6861;
6863 -> 6862;
6863 -> 6860;
6863 -> 6861;
6864 -> 6861;
6865 -> 6863;
6865 -> 6864;
6866 -> 6864;
6867 -> 6865;
6867 -> 6866;
6868 -> 6867;
6868 -> 6863;
6868 -> 6866;
6869 -> 6866;
6870 -> 6868;
6870 -> 6869;
6870 -> 6866;
6871 -> 6868;
6871 -> 6866;
6872 -> 6871;
6872 -> 6864;
6873 -> 6860;
6873 -> 6861;
6874 -> 6873;
6874 -> 6872;
6874 -> 6861;
6875 -> 6853;
6875 -> 6849;
6876 -> 0;
6876 -> 6849;
6877 -> 6849;
6878 -> 6857;
6878 -> 6877;
6879 -> 6858;
6879 -> 6877;
6880 -> 6874;
6880 -> 6877;
6881 -> 6875;
6881 -> 6877;
6882 -> 6876;
6882 -> 6877;
6883 -> 6856;
6883 -> 6877;
6884 -> 6878;
6884 -> 6877;
6885 -> 6879;
6885 -> 6877;
6886 -> 6880;
6886 -> 6877;
6887 -> 6882;
6887 -> 6877;
6888 -> 6877;
6889 -> 6884;
6889 -> 6888;
6890 -> 6885;
6890 -> 6888;
6891 -> 6886;
6891 -> 6888;
6892 -> 6887;
6892 -> 6888;
6893 -> 6883;
6893 -> 6888;
6894 -> 6889;
6894 -> 6888;
6895 -> 6888;
6896 -> 6894;
6896 -> 6895;
6897 -> 6893;
6897 -> 6895;
6898 -> 6896;
6898 -> 6893;
6898 -> 6895;
6899 -> 6893;
6899 -> 6888;
6900 -> 6893;
6900 -> 6888;
6901 -> 6890;
6901 -> 6893;
6901 -> 6888;
6902 -> 6891;
6902 -> 6893;
6902 -> 6888;
6903 -> 6892;
6903 -> 6893;
6903 -> 6888;
6904 -> 6881;
6904 -> 6883;
6904 -> 6877;
6905 -> 6856;
6905 -> 6849;
6906 -> 6856;
6906 -> 6849;
6907 -> 6856;
6907 -> 6849;
6908 -> 6854;
6908 -> 6845;
6908 -> 6849;
6909 -> 6854;
6909 -> 6856;
6909 -> 6849;
6910 -> 6855;
6910 -> 6856;
6910 -> 6849;
6911 -> 6850;
6911 -> 6856;
6911 -> 6849;
6912 -> 6851;
6912 -> 6856;
6912 -> 6849;
6913 -> 6845;
6913 -> 6874;
6913 -> 6898;
6913 -> 6901;
6913 -> 6902;
6913 -> 6903;
6913 -> 6904;
6913 -> 6910;
6913 -> 6911;
6913 -> 6912;
6913 -> 6909;
6913 -> 0;
6913 -> 6803;
6914 -> 6845;
6914 -> 6847;
6914 -> 6848;
6914 -> 6913;
6914 -> 0;
6914 -> 6803;
6915 -> 6766;
6916 -> 6740;
6916 -> 6914;
6916 -> 6915;
6917 -> 6916;
6917 -> 6914;
6917 -> 6915;
6918 -> 6727;
6918 -> 6728;
6919 -> 6918;
6919 -> 6917;
6919 -> 6728;
6920 -> 6727;
6920 -> 6728;
6921 -> 5878;
6921 -> 6728;
6922 -> 6727;
6922 -> 6921;
6922 -> 6919;
6922 -> 6702;
6923 -> 6704;
6923 -> 6922;
6923 -> 6702;
6924 -> 6702;
6925 -> 6922;
6925 -> 6702;
6926 -> 6702;
6927 -> 6923;
6927 -> 6702;
6928 -> 6702;
6929 -> 6702;
6930 -> 6702;
6931 -> 6930;
6931 -> 6702;
6932 -> 6702;
6933 -> 6932;
6933 -> 6702;
6934 -> 6702;
6935 -> 6934;
6935 -> 6702;
6936 -> 6703;
6936 -> 6927;
6936 -> 6702;
6937 -> 6702;
6938 -> 6936;
6938 -> 6937;
6938 -> 6702;
6939 -> 6938;
6939 -> 6702;
6940 -> 6702;
6941 -> 6939;
6941 -> 6940;
6941 -> 6702;
6942 -> 6941;
6942 -> 6702;
6943 -> 6702;
6944 -> 6942;
6944 -> 6943;
6944 -> 6702;
6945 -> 6944;
6945 -> 6702;
6946 -> 0;
6946 -> 6702;
6947 -> 6946;
6947 -> 6945;
6947 -> 6702;
6948 -> 6703;
6948 -> 6702;
6949 -> 6927;
6949 -> 6702;
6950 -> 6922;
6950 -> 6702;
6951 -> 6702;
6952 -> 6703;
6952 -> 6951;
6953 -> 6952;
6953 -> 6927;
6953 -> 6951;
6954 -> 6953;
6954 -> 6702;
6955 -> 6702;
6956 -> 6703;
6956 -> 6955;
6957 -> 6956;
6957 -> 6927;
6957 -> 6955;
6958 -> 6957;
6958 -> 6702;
6959 -> 6709;
6959 -> 6702;
6960 -> 6706;
6960 -> 6702;
6961 -> 6934;
6961 -> 6702;
6962 -> 6930;
6962 -> 6702;
6963 -> 6932;
6963 -> 6702;
6964 -> 6947;
6964 -> 6702;
6965 -> 6705;
6965 -> 6702;
6966 -> 6928;
6966 -> 6702;
6967 -> 6929;
6967 -> 6702;
6968 -> 6704;
6968 -> 6948;
6968 -> 6949;
6968 -> 6950;
6968 -> 6954;
6968 -> 6958;
6968 -> 6959;
6968 -> 6960;
6968 -> 6961;
6968 -> 6962;
6968 -> 6963;
6968 -> 6964;
6968 -> 6965;
6968 -> 6966;
6968 -> 6967;
6968 -> 6927;
6968 -> 6922;
6968 -> 6935;
6968 -> 6931;
6968 -> 6933;
6968 -> 0;
6968 -> 6702;
6969 -> 6968;
6969 -> 6702;
6970 -> 6968;
6970 -> 6702;
6971 -> 6968;
6971 -> 6702;
6972 -> 6922;
6972 -> 6971;
6972 -> 6968;
6972 -> 6970;
6972 -> 6702;
6973 -> 6702;
6974 -> 6702;
6975 -> 6974;
6975 -> 6702;
6976 -> 6968;
6976 -> 6702;
6977 -> 6970;
6977 -> 6702;
6978 -> 6972;
6978 -> 6702;
6979 -> 6922;
6979 -> 6702;
6980 -> 6922;
6980 -> 6972;
6980 -> 6702;
6981 -> 6706;
6981 -> 6702;
6982 -> 6709;
6982 -> 6702;
6983 -> 6973;
6983 -> 6702;
6984 -> 6974;
6984 -> 6702;
6985 -> 6976;
6985 -> 6977;
6985 -> 6978;
6985 -> 6979;
6985 -> 6980;
6985 -> 6981;
6985 -> 6982;
6985 -> 6983;
6985 -> 6984;
6985 -> 6972;
6985 -> 6970;
6985 -> 6975;
6985 -> 6702;
6986 -> 6702;
6987 -> 6702;
6988 -> 6987;
6988 -> 6968;
6988 -> 6985;
6988 -> 6702;
6989 -> 6703;
6989 -> 6702;
6990 -> 6704;
6990 -> 6985;
6990 -> 6702;
6991 -> 6703;
6991 -> 6985;
6991 -> 6702;
6992 -> 6702;
6994 -> 6922;
6994 -> 6702;
6995 -> 6702;
6996 -> 6989;
6996 -> 6995;
6997 -> 6990;
6997 -> 6995;
6998 -> 6991;
6998 -> 6995;
6999 -> 6994;
6999 -> 6995;
7000 -> 6992;
7000 -> 6995;
7001 -> 6995;
7002 -> 7000;
7002 -> 7001;
7003 -> 7001;
7004 -> 7002;
7004 -> 7003;
7007 -> 7006;
7007 -> 7005;
7008 -> 7005;
7009 -> 7003;
7010 -> 7004;
7010 -> 7009;
7011 -> 0;
7012 -> 0;
7012 -> 7011;
7013 -> 0;
7014 -> 7012;
7014 -> 0;
7014 -> 7013;
7015 -> 7014;
7016 -> 7009;
7017 -> 7010;
7017 -> 7016;
7018 -> 7017;
7018 -> 7016;
7019 -> 7010;
7019 -> 7009;
7020 -> 7003;
7021 -> 7020;
7021 -> 7004;
7021 -> 7003;
7022 -> 7004;
7022 -> 7003;
7023 -> 7002;
7023 -> 7001;
7024 -> 7002;
7024 -> 7001;
7025 -> 7002;
7025 -> 7001;
7026 -> 7002;
7026 -> 7001;
7027 -> 7002;
7027 -> 7001;
7028 -> 7002;
7028 -> 7001;
7029 -> 7002;
7029 -> 7001;
7030 -> 7000;
7030 -> 6995;
7031 -> 7000;
7031 -> 6995;
7032 -> 7000;
7032 -> 6995;
7033 -> 7000;
7033 -> 6995;
7034 -> 7000;
7034 -> 6995;
7035 -> 7000;
7035 -> 6995;
7036 -> 7000;
7036 -> 6995;
7037 -> 7000;
7037 -> 6995;
7038 -> 7000;
7038 -> 6995;
7039 -> 6995;
7040 -> 7039;
7040 -> 7000;
7040 -> 6995;
7041 -> 6995;
7042 -> 7041;
7042 -> 7000;
7042 -> 6995;
7043 -> 6995;
7044 -> 7043;
7044 -> 7000;
7044 -> 6995;
7045 -> 7000;
7045 -> 6995;
7046 -> 7000;
7046 -> 6995;
7047 -> 6995;
7048 -> 6996;
7048 -> 7047;
7048 -> 6995;
7049 -> 6995;
7050 -> 6997;
7050 -> 7049;
7050 -> 6995;
7051 -> 6998;
7051 -> 6995;
7052 -> 6999;
7052 -> 6922;
7052 -> 6995;
7053 -> 6996;
7053 -> 7000;
7053 -> 6995;
7054 -> 6997;
7054 -> 7000;
7054 -> 6995;
7055 -> 6995;
7056 -> 7055;
7056 -> 6999;
7056 -> 6922;
7056 -> 6995;
7057 -> 7000;
7057 -> 6995;
7058 -> 6995;
7059 -> 6996;
7059 -> 7058;
7060 -> 7058;
7061 -> 7059;
7061 -> 6991;
7061 -> 7060;
7062 -> 7061;
7062 -> 6995;
7063 -> 6998;
7063 -> 6995;
7064 -> 6995;
7065 -> 6995;
7066 -> 7057;
7066 -> 7065;
7067 -> 7062;
7067 -> 7065;
7068 -> 7063;
7068 -> 7065;
7069 -> 7064;
7069 -> 7065;
7070 -> 7065;
7071 -> 7069;
7071 -> 7070;
7072 -> 7070;
7073 -> 7071;
7073 -> 7072;
7074 -> 7072;
7075 -> 7073;
7075 -> 7074;
7076 -> 7075;
7076 -> 7074;
7077 -> 7071;
7077 -> 7070;
7078 -> 7069;
7078 -> 7065;
7079 -> 0;
7079 -> 7069;
7079 -> 7065;
7080 -> 7069;
7080 -> 7065;
7081 -> 7069;
7081 -> 7065;
7082 -> 7069;
7082 -> 7065;
7083 -> 7069;
7083 -> 7065;
7084 -> 7069;
7084 -> 7065;
7085 -> 7065;
7086 -> 7066;
7086 -> 7085;
7086 -> 7065;
7087 -> 7066;
7087 -> 7069;
7087 -> 7065;
7088 -> 7067;
7088 -> 7069;
7088 -> 7065;
7089 -> 7068;
7089 -> 7069;
7089 -> 7065;
7090 -> 7056;
7090 -> 7064;
7090 -> 7076;
7090 -> 7077;
7090 -> 7087;
7090 -> 7079;
7090 -> 7088;
7090 -> 7081;
7090 -> 7082;
7090 -> 7083;
7090 -> 7089;
7090 -> 7018;
7090 -> 7019;
7090 -> 7021;
7090 -> 7022;
7090 -> 7023;
7090 -> 7024;
7090 -> 7025;
7090 -> 7026;
7090 -> 7027;
7090 -> 7028;
7090 -> 7029;
7090 -> 7053;
7090 -> 7031;
7090 -> 7054;
7090 -> 7033;
7090 -> 7034;
7090 -> 7035;
7090 -> 7036;
7090 -> 7037;
7090 -> 7038;
7090 -> 7040;
7090 -> 7042;
7090 -> 7044;
7090 -> 7045;
7090 -> 7046;
7090 -> 7020;
7090 -> 6991;
7090 -> 7039;
7090 -> 7041;
7090 -> 7043;
7090 -> 6995;
7091 -> 6995;
7092 -> 6996;
7092 -> 7091;
7093 -> 7092;
7093 -> 7090;
7093 -> 7091;
7094 -> 7093;
7094 -> 6995;
7095 -> 7094;
7095 -> 6995;
7096 -> 6999;
7096 -> 6995;
7097 -> 7000;
7097 -> 7096;
7098 -> 7096;
7099 -> 7095;
7099 -> 7096;
7101 -> 7100;
7102 -> 7056;
7102 -> 7090;
7102 -> 7096;
7103 -> 7096;
7104 -> 7097;
7104 -> 7103;
7105 -> 7098;
7105 -> 7103;
7106 -> 7099;
7106 -> 7103;
7107 -> 7102;
7107 -> 7103;
7108 -> 7098;
7108 -> 7103;
7109 -> 7104;
7109 -> 7103;
7110 -> 7105;
7110 -> 7103;
7111 -> 7106;
7111 -> 7103;
7112 -> 7107;
7112 -> 7103;
7113 -> 7103;
7114 -> 7109;
7114 -> 7113;
7115 -> 7110;
7115 -> 7113;
7116 -> 7111;
7116 -> 7113;
7117 -> 7112;
7117 -> 7113;
7118 -> 7108;
7118 -> 7113;
7119 -> 7113;
7120 -> 7118;
7120 -> 7119;
7121 -> 7119;
7122 -> 7120;
7122 -> 7121;
7123 -> 7121;
7124 -> 7122;
7124 -> 7123;
7125 -> 7124;
7125 -> 7123;
7126 -> 7120;
7126 -> 7119;
7127 -> 7118;
7127 -> 7113;
7128 -> 7118;
7128 -> 7113;
7129 -> 7118;
7129 -> 7113;
7130 -> 7118;
7130 -> 7113;
7131 -> 7118;
7131 -> 7113;
7132 -> 7118;
7132 -> 7113;
7133 -> 7118;
7133 -> 7113;
7134 -> 7113;
7135 -> 7134;
7135 -> 7113;
7136 -> 7101;
7136 -> 7113;
7137 -> 7135;
7137 -> 7136;
7137 -> 7113;
7138 -> 7137;
7138 -> 7118;
7138 -> 7113;
7139 -> 7113;
7140 -> 7139;
7140 -> 7113;
7141 -> 7101;
7141 -> 7113;
7142 -> 7140;
7142 -> 7141;
7142 -> 7113;
7143 -> 7142;
7143 -> 7118;
7143 -> 7113;
7144 -> 7118;
7144 -> 7113;
7145 -> 7118;
7145 -> 7113;
7146 -> 7118;
7146 -> 7113;
7147 -> 7118;
7147 -> 7113;
7148 -> 7113;
7149 -> 7114;
7149 -> 7148;
7149 -> 7113;
7150 -> 7113;
7151 -> 7115;
7151 -> 7150;
7151 -> 7113;
7152 -> 7114;
7152 -> 7118;
7152 -> 7113;
7153 -> 7117;
7153 -> 7118;
7153 -> 7113;
7154 -> 7115;
7154 -> 7118;
7154 -> 7113;
7155 -> 7116;
7155 -> 7118;
7155 -> 7113;
7156 -> 7118;
7156 -> 7113;
7157 -> 7113;
7158 -> 7113;
7159 -> 7156;
7159 -> 7158;
7160 -> 7157;
7160 -> 7158;
7161 -> 7158;
7162 -> 7160;
7162 -> 7161;
7163 -> 7161;
7164 -> 7162;
7164 -> 7163;
7165 -> 7163;
7166 -> 7164;
7166 -> 7165;
7167 -> 7165;
7168 -> 7166;
7168 -> 7167;
7169 -> 7168;
7169 -> 7167;
7170 -> 7164;
7170 -> 7163;
7171 -> 7164;
7171 -> 7163;
7172 -> 7162;
7172 -> 7161;
7173 -> 7162;
7173 -> 7161;
7174 -> 7162;
7174 -> 7161;
7175 -> 7160;
7175 -> 7158;
7176 -> 7158;
7177 -> 7159;
7177 -> 7176;
7177 -> 7158;
7178 -> 7159;
7178 -> 7160;
7178 -> 7158;
7179 -> 7157;
7179 -> 7118;
7179 -> 7113;
7180 -> 7118;
7180 -> 7113;
7181 -> 7180;
7181 -> 7125;
7181 -> 7126;
7181 -> 7152;
7181 -> 7153;
7181 -> 7154;
7181 -> 7179;
7181 -> 7131;
7181 -> 7132;
7181 -> 7133;
7181 -> 7138;
7181 -> 7143;
7181 -> 7155;
7181 -> 7145;
7181 -> 7146;
7181 -> 7147;
7181 -> 7137;
7181 -> 7142;
7181 -> 7090;
7181 -> 6922;
7181 -> 7169;
7181 -> 7170;
7181 -> 7171;
7181 -> 7172;
7181 -> 7173;
7181 -> 7174;
7181 -> 7178;
7181 -> 7113;
7182 -> 7181;
7182 -> 7118;
7182 -> 7113;
7183 -> 7103;
7184 -> 7107;
7184 -> 7183;
7184 -> 7103;
7185 -> 7056;
7185 -> 7182;
7185 -> 6995;
7186 -> 7185;
7186 -> 7000;
7186 -> 6995;
7187 -> 6995;
7188 -> 6996;
7188 -> 7187;
7189 -> 7188;
7189 -> 7182;
7189 -> 7187;
7190 -> 7189;
7190 -> 6995;
7191 -> 7190;
7191 -> 7182;
7191 -> 7186;
7191 -> 6995;
7192 -> 6702;
7193 -> 6702;
7194 -> 6968;
7194 -> 7193;
7194 -> 6702;
7195 -> 7194;
7197 -> 7196;
7198 -> 7196;
7199 -> 7196;
7200 -> 7198;
7200 -> 7199;
7200 -> 7196;
7201 -> 7200;
7201 -> 7197;
7202 -> 7197;
7203 -> 7202;
7204 -> 7203;
7205 -> 7204;
7205 -> 7203;
7206 -> 7203;
7206 -> 7202;
7207 -> 7202;
7207 -> 7197;
7208 -> 7202;
7208 -> 7197;
7209 -> 7197;
7210 -> 7201;
7210 -> 7209;
7210 -> 7197;
7211 -> 7201;
7211 -> 7202;
7211 -> 7197;
7212 -> 7202;
7212 -> 7197;
7213 -> 7197;
7214 -> 7197;
7215 -> 7212;
7215 -> 7214;
7216 -> 7213;
7216 -> 7214;
7217 -> 7213;
7217 -> 7214;
7218 -> 7214;
7219 -> 7217;
7219 -> 7218;
7220 -> 7218;
7221 -> 7219;
7221 -> 7220;
7222 -> 7221;
7222 -> 7220;
7223 -> 7217;
7223 -> 7214;
7224 -> 7217;
7224 -> 7214;
7225 -> 7217;
7225 -> 7214;
7226 -> 7214;
7227 -> 7215;
7227 -> 7226;
7227 -> 7214;
7228 -> 7214;
7229 -> 7216;
7229 -> 7228;
7229 -> 7214;
7230 -> 7215;
7230 -> 7217;
7230 -> 7214;
7231 -> 7216;
7231 -> 7217;
7231 -> 7214;
7232 -> 7217;
7232 -> 7214;
7233 -> 7214;
7234 -> 7214;
7235 -> 7232;
7235 -> 7234;
7236 -> 7233;
7236 -> 7234;
7237 -> 7234;
7238 -> 7236;
7238 -> 7237;
7239 -> 7237;
7240 -> 7238;
7240 -> 7239;
7241 -> 7239;
7242 -> 7240;
7242 -> 7241;
7243 -> 7242;
7243 -> 7241;
7244 -> 7238;
7244 -> 7237;
7245 -> 7238;
7245 -> 7237;
7246 -> 7236;
7246 -> 7234;
7247 -> 7236;
7247 -> 7234;
7248 -> 7234;
7249 -> 7235;
7249 -> 7248;
7249 -> 7234;
7250 -> 7235;
7250 -> 7236;
7250 -> 7234;
7251 -> 6750;
7251 -> 7236;
7251 -> 7234;
7252 -> 7233;
7252 -> 7217;
7252 -> 7214;
7253 -> 7213;
7253 -> 7202;
7253 -> 7197;
7254 -> 7197;
7254 -> 7196;
7255 -> 7197;
7255 -> 7196;
7256 -> 7196;
7257 -> 7255;
7257 -> 7256;
7258 -> 7197;
7258 -> 7256;
7259 -> 7256;
7260 -> 7258;
7260 -> 7206;
7260 -> 7259;
7260 -> 7256;
7261 -> 7257;
7261 -> 7258;
7261 -> 7256;
7262 -> 7196;
7263 -> 7196;
7264 -> 7263;
7264 -> 7195;
7265 -> 7264;
7265 -> 6702;
7266 -> 6702;
7267 -> 7265;
7267 -> 7266;
7268 -> 6992;
7268 -> 7266;
7269 -> 7266;
7270 -> 7268;
7270 -> 7182;
7270 -> 7269;
7270 -> 7266;
7271 -> 7267;
7271 -> 7268;
7271 -> 7266;
7272 -> 6702;
7273 -> 6702;
7274 -> 6702;
7275 -> 6968;
7275 -> 7274;
7275 -> 6702;
7276 -> 6702;
7277 -> 7276;
7277 -> 6702;
7278 -> 6992;
7278 -> 6702;
7279 -> 6922;
7279 -> 6702;
7280 -> 7275;
7280 -> 6702;
7281 -> 6968;
7281 -> 6702;
7282 -> 7273;
7282 -> 6702;
7283 -> 7276;
7283 -> 6702;
7284 -> 6702;
7285 -> 7278;
7285 -> 7284;
7286 -> 7279;
7286 -> 7284;
7287 -> 7280;
7287 -> 7284;
7288 -> 7281;
7288 -> 7284;
7289 -> 7282;
7289 -> 7284;
7290 -> 7283;
7290 -> 7284;
7291 -> 7284;
7292 -> 7285;
7292 -> 7291;
7293 -> 7292;
7293 -> 7182;
7293 -> 7186;
7293 -> 7291;
7294 -> 7293;
7294 -> 7284;
7295 -> 7284;
7296 -> 7295;
7296 -> 7286;
7296 -> 6922;
7296 -> 7284;
7297 -> 7294;
7297 -> 7182;
7297 -> 7185;
7297 -> 7296;
7297 -> 7284;
7298 -> 7284;
7299 -> 7294;
7299 -> 7182;
7299 -> 7185;
7299 -> 7298;
7299 -> 7284;
7300 -> 7299;
7300 -> 7284;
7301 -> 7284;
7302 -> 7284;
7303 -> 7302;
7303 -> 7294;
7303 -> 7182;
7303 -> 7185;
7303 -> 7284;
7304 -> 7303;
7305 -> 7304;
7305 -> 7303;
7306 -> 7287;
7306 -> 7305;
7307 -> 7306;
7307 -> 7303;
7308 -> 7306;
7308 -> 7303;
7309 -> 7303;
7310 -> 7303;
7311 -> 7310;
7311 -> 7306;
7311 -> 7303;
7312 -> 7307;
7312 -> 7303;
7313 -> 7308;
7313 -> 7303;
7314 -> 7309;
7314 -> 7303;
7315 -> 7312;
7315 -> 7313;
7315 -> 7314;
7315 -> 7303;
7316 -> 7303;
7317 -> 7294;
7317 -> 7302;
7317 -> 7182;
7317 -> 7186;
7317 -> 7271;
7317 -> 7185;
7317 -> 7205;
7317 -> 7261;
7317 -> 7211;
7317 -> 7253;
7317 -> 7254;
7317 -> 7222;
7317 -> 7230;
7317 -> 7231;
7317 -> 7252;
7317 -> 7243;
7317 -> 7244;
7317 -> 7245;
7317 -> 7251;
7317 -> 7250;
7317 -> 7200;
7317 -> 7303;
7318 -> 7315;
7318 -> 7303;
7319 -> 7285;
7319 -> 7303;
7320 -> 7303;
7321 -> 7318;
7321 -> 7320;
7322 -> 7319;
7322 -> 7320;
7323 -> 7317;
7323 -> 7320;
7324 -> 7320;
7325 -> 7321;
7325 -> 7324;
7325 -> 7320;
7326 -> 7320;
7327 -> 7323;
7327 -> 7326;
7328 -> 7326;
7329 -> 7327;
7329 -> 7317;
7329 -> 7328;
7329 -> 7326;
7330 -> 7320;
7331 -> 7321;
7331 -> 7323;
7331 -> 7320;
7332 -> 7303;
7333 -> 7301;
7333 -> 7306;
7333 -> 7303;
7334 -> 7317;
7335 -> 7334;
7335 -> 7317;
7336 -> 7286;
7336 -> 7335;
7336 -> 6922;
7336 -> 7317;
7336 -> 7331;
7336 -> 7315;
7337 -> 7336;
7337 -> 7335;
7338 -> 7317;
7339 -> 7317;
7340 -> 7339;
7340 -> 7337;
7340 -> 7317;
7341 -> 7340;
7342 -> 7288;
7342 -> 7336;
7342 -> 7337;
7342 -> 7341;
7342 -> 7340;
7343 -> 7340;
7344 -> 7288;
7344 -> 7336;
7344 -> 7337;
7344 -> 7343;
7344 -> 7340;
7345 -> 7333;
7345 -> 7339;
7345 -> 7340;
7346 -> 7344;
7346 -> 7336;
7346 -> 7337;
7346 -> 7345;
7346 -> 7340;
7347 -> 7346;
7347 -> 7336;
7347 -> 7340;
7348 -> 7346;
7348 -> 7336;
7348 -> 7340;
7349 -> 7346;
7349 -> 7336;
7349 -> 7348;
7350 -> 7289;
7350 -> 7348;
7351 -> 7348;
7352 -> 7349;
7352 -> 7351;
7353 -> 7350;
7353 -> 7351;
7354 -> 7351;
7355 -> 7351;
7356 -> 7353;
7356 -> 7355;
7356 -> 7351;
7357 -> 7356;
7358 -> 7352;
7358 -> 7351;
7359 -> 7351;
7360 -> 7351;
7361 -> 7358;
7361 -> 7360;
7362 -> 7359;
7362 -> 7360;
7363 -> 7362;
7363 -> 7360;
7364 -> 7362;
7364 -> 7360;
7365 -> 7360;
7366 -> 7361;
7366 -> 7365;
7366 -> 7360;
7367 -> 7360;
7368 -> 7360;
7369 -> 7360;
7370 -> 7360;
7371 -> 7362;
7371 -> 7370;
7371 -> 7360;
7372 -> 7360;
7373 -> 7360;
7374 -> 7360;
7375 -> 7360;
7376 -> 7352;
7376 -> 7351;
7377 -> 7359;
7377 -> 7351;
7378 -> 7357;
7378 -> 7376;
7378 -> 7377;
7378 -> 7351;
7379 -> 7359;
7379 -> 7351;
7380 -> 7379;
7380 -> 7348;
7381 -> 7380;
7381 -> 7339;
7381 -> 7337;
7381 -> 7348;
7382 -> 7346;
7382 -> 7336;
7382 -> 7339;
7382 -> 7337;
7382 -> 7340;
7383 -> 7333;
7383 -> 7340;
7384 -> 7344;
7384 -> 7336;
7384 -> 7337;
7384 -> 7383;
7384 -> 7340;
7385 -> 7384;
7385 -> 7336;
7385 -> 7340;
7386 -> 7384;
7386 -> 7336;
7386 -> 7340;
7387 -> 7384;
7387 -> 7336;
7387 -> 7386;
7388 -> 7386;
7389 -> 7387;
7389 -> 7388;
7390 -> 7388;
7391 -> 7388;
7392 -> 7389;
7392 -> 7357;
7393 -> 7390;
7393 -> 7357;
7394 -> 7357;
7394 -> 7392;
7394 -> 7393;
7394 -> 7336;
7394 -> 7337;
7394 -> 7378;
7394 -> 7362;
7394 -> 7361;
7394 -> 7360;
7395 -> 7394;
7396 -> 7395;
7396 -> 7340;
7396 -> 7337;
7396 -> 7386;
7397 -> 7384;
7397 -> 7336;
7397 -> 7340;
7397 -> 7337;
7398 -> 7337;
7398 -> 7382;
7398 -> 7397;
7398 -> 7394;
7398 -> 7317;
7399 -> 7337;
7399 -> 7381;
7399 -> 7396;
7399 -> 7398;
7399 -> 7317;
7400 -> 7338;
7400 -> 7317;
7401 -> 7317;
7402 -> 7399;
7402 -> 7401;
7403 -> 7300;
7403 -> 7402;
7403 -> 7399;
7403 -> 7401;
7404 -> 7317;
7405 -> 7317;
7405 -> 7404;
7406 -> 7404;
7407 -> 7399;
7407 -> 7406;
7407 -> 7404;
7408 -> 7404;
7409 -> 7403;
7409 -> 7408;
7410 -> 7408;
7411 -> 7409;
7411 -> 7403;
7411 -> 7410;
7411 -> 7408;
7412 -> 7404;
7413 -> 7333;
7413 -> 7337;
7413 -> 7317;
7414 -> 7300;
7414 -> 7284;
7415 -> 7414;
7415 -> 7403;
7415 -> 7284;
7416 -> 6702;
7417 -> 6702;
7418 -> 6986;
7418 -> 7417;
7418 -> 6702;
7419 -> 6703;
7419 -> 7415;
7419 -> 6702;
7420 -> 6703;
7420 -> 7415;
7420 -> 7419;
7421 -> 6704;
7421 -> 7415;
7421 -> 7420;
7422 -> 6986;
7422 -> 7420;
7423 -> 6968;
7423 -> 7420;
7424 -> 7420;
7425 -> 7422;
7425 -> 7424;
7426 -> 7423;
7426 -> 7424;
7427 -> 7423;
7427 -> 7424;
7428 -> 7425;
7428 -> 7424;
7429 -> 7420;
7430 -> 6985;
7430 -> 7420;
7431 -> 6922;
7431 -> 7420;
7432 -> 6968;
7432 -> 7420;
7433 -> 6705;
7433 -> 7415;
7433 -> 7420;
7434 -> 7264;
7434 -> 7420;
7435 -> 6992;
7435 -> 7420;
7436 -> 7434;
7436 -> 7420;
7437 -> 7415;
7437 -> 7420;
7438 -> 7420;
7439 -> 6992;
7439 -> 7438;
7440 -> 7438;
7441 -> 7439;
7441 -> 7440;
7442 -> 7441;
7442 -> 7433;
7442 -> 7440;
7443 -> 7442;
7443 -> 7438;
7444 -> 7438;
7445 -> 7420;
7446 -> 7443;
7446 -> 7445;
7447 -> 7445;
7448 -> 7446;
7448 -> 7447;
7449 -> 7447;
7450 -> 7448;
7450 -> 7443;
7450 -> 7449;
7450 -> 7447;
7451 -> 7445;
7452 -> 7446;
7452 -> 7443;
7452 -> 7445;
7453 -> 7420;
7454 -> 6992;
7454 -> 7453;
7455 -> 7453;
7456 -> 7454;
7456 -> 7455;
7457 -> 7456;
7457 -> 7443;
7457 -> 7455;
7458 -> 7453;
7459 -> 7420;
7460 -> 7457;
7460 -> 7459;
7461 -> 7459;
7462 -> 7460;
7462 -> 7461;
7463 -> 7461;
7464 -> 7462;
7464 -> 7457;
7464 -> 7463;
7464 -> 7461;
7465 -> 7459;
7466 -> 7460;
7466 -> 7457;
7466 -> 7459;
7467 -> 6704;
7467 -> 7430;
7467 -> 7431;
7467 -> 7432;
7467 -> 7433;
7467 -> 7436;
7467 -> 7437;
7467 -> 7452;
7467 -> 7466;
7467 -> 7457;
7467 -> 7443;
7467 -> 6922;
7467 -> 7415;
7467 -> 6985;
7467 -> 7420;
7468 -> 6703;
7468 -> 7467;
7468 -> 7420;
7469 -> 6704;
7469 -> 7420;
7470 -> 6704;
7470 -> 6703;
7470 -> 7420;
7471 -> 6992;
7471 -> 6703;
7471 -> 7420;
7472 -> 6702;
7473 -> 6705;
7473 -> 7467;
7473 -> 7470;
7473 -> 7471;
7473 -> 6702;
7474 -> 6706;
7474 -> 7473;
7474 -> 6702;
7475 -> 7472;
7475 -> 6698;
7476 -> 6700;
7476 -> 7474;
7476 -> 7475;
7476 -> 6698;
7477 -> 6700;
7477 -> 7474;
7477 -> 6698;
7478 -> 6699;
7478 -> 7477;
7478 -> 6698;
7479 -> 6696;
7480 -> 6695;
7480 -> 7477;
7480 -> 6696;
7481 -> 6695;
7481 -> 7477;
7481 -> 6694;
7482 -> 7481;
7482 -> 6692;
7483 -> 6685;
7483 -> 6683;
7484 -> 7483;
7484 -> 6679;
7485 -> 6679;
7486 -> 7484;
7486 -> 7485;
7486 -> 6679;
7487 -> 6681;
7487 -> 6679;
7488 -> 7487;
7488 -> 6670;
7489 -> 0;
7489 -> 6670;
7490 -> 7488;
7490 -> 6670;
7491 -> 6670;
7492 -> 6672;
7492 -> 7491;
7492 -> 6670;
7493 -> 7488;
7493 -> 6670;
7494 -> 7491;
7494 -> 7493;
7494 -> 7492;
7494 -> 6681;
7494 -> 7482;
7494 -> 6670;
7495 -> 7494;
7496 -> 7489;
7496 -> 7494;
7497 -> 6674;
7497 -> 7494;
7498 -> 6675;
7498 -> 7494;
7499 -> 7494;
7500 -> 7495;
7500 -> 7499;
7501 -> 7496;
7501 -> 7499;
7502 -> 7497;
7502 -> 7499;
7503 -> 7498;
7503 -> 7499;
7504 -> 7500;
7504 -> 7482;
7504 -> 6681;
7504 -> 7491;
7504 -> 7492;
7504 -> 7494;
7504 -> 7499;
7505 -> 7504;
7506 -> 7504;
7507 -> 7506;
7507 -> 7482;
7507 -> 7494;
7507 -> 7491;
7507 -> 7492;
7507 -> 6681;
7507 -> 7504;
7508 -> 7506;
7508 -> 7507;
7508 -> 0;
7508 -> 7504;
7509 -> 7508;
7509 -> 7504;
7510 -> 7509;
7511 -> 7508;
7511 -> 7504;
7512 -> 7507;
7512 -> 7504;
7513 -> 7504;
7514 -> 7512;
7514 -> 7513;
7515 -> 7514;
7515 -> 7507;
7515 -> 0;
7515 -> 7513;
7516 -> 7515;
7516 -> 7513;
7517 -> 7516;
7518 -> 7516;
7519 -> 7508;
7519 -> 7516;
7520 -> 7516;
7520 -> 7517;
7520 -> 7519;
7521 -> 7517;
7521 -> 7519;
7522 -> 7519;
7523 -> 7520;
7523 -> 7516;
7524 -> 7502;
7524 -> 7520;
7524 -> 7523;
7524 -> 7516;
7525 -> 7516;
7526 -> 7499;
7527 -> 6672;
7527 -> 6670;
7528 -> 6673;
7528 -> 6670;
7529 -> 6675;
7529 -> 6670;
7530 -> 6676;
7530 -> 6670;
7531 -> 6677;
7531 -> 6670;
7532 -> 6670;
7533 -> 7527;
7533 -> 7532;
7534 -> 7528;
7534 -> 7532;
7535 -> 7529;
7535 -> 7532;
7536 -> 7530;
7536 -> 7532;
7537 -> 7531;
7537 -> 7532;
7538 -> 7532;
7539 -> 7537;
7539 -> 7538;
7539 -> 7532;
7540 -> 0;
7540 -> 7539;
7541 -> 7532;
7542 -> 7532;
7543 -> 7532;
7544 -> 7540;
7544 -> 0;
7544 -> 7532;
7545 -> 7544;
7545 -> 7532;
7546 -> 7533;
7546 -> 7524;
7546 -> 7532;
7547 -> 7532;
7548 -> 7546;
7548 -> 7547;
7549 -> 7547;
7550 -> 7548;
7550 -> 7549;
7551 -> 7549;
7552 -> 7551;
7553 -> 7550;
7553 -> 7547;
7554 -> 7532;
7555 -> 7553;
7555 -> 7554;
7556 -> 7555;
7556 -> 7553;
7556 -> 7554;
7557 -> 7553;
7557 -> 7554;
7558 -> 7554;
7559 -> 7553;
7559 -> 7556;
7559 -> 7558;
7559 -> 7554;
7560 -> 7532;
7561 -> 7541;
7561 -> 7532;
7562 -> 7532;
7563 -> 7545;
7563 -> 7532;
7564 -> 7534;
7564 -> 7532;
7565 -> 7540;
7565 -> 7532;
7566 -> 7556;
7566 -> 7532;
7567 -> 7536;
7567 -> 7532;
7568 -> 7561;
7568 -> 7562;
7568 -> 7563;
7568 -> 7564;
7568 -> 7565;
7568 -> 7566;
7568 -> 7567;
7568 -> 7533;
7568 -> 7541;
7568 -> 7556;
7568 -> 7540;
7568 -> 0;
7568 -> 7532;
7569 -> 7568;
7569 -> 7562;
7570 -> 7569;
7570 -> 7568;
7570 -> 7562;
7571 -> 7568;
7571 -> 7562;
7572 -> 7568;
7572 -> 7562;
7573 -> 7568;
7573 -> 7562;
7574 -> 7568;
7574 -> 7562;
7575 -> 7568;
7575 -> 7562;
7576 -> 7568;
7576 -> 7562;
7577 -> 7568;
7577 -> 7562;
7578 -> 7568;
7578 -> 7562;
7579 -> 7568;
7579 -> 7562;
7580 -> 7579;
7580 -> 7570;
7580 -> 7562;
7581 -> 7571;
7581 -> 7562;
7582 -> 7577;
7582 -> 7562;
7583 -> 7562;
7584 -> 7581;
7584 -> 7583;
7585 -> 7582;
7585 -> 7583;
7586 -> 7579;
7586 -> 7583;
7587 -> 7584;
7587 -> 7583;
7588 -> 7583;
7589 -> 7587;
7589 -> 7588;
7590 -> 7586;
7590 -> 7588;
7591 -> 7588;
7592 -> 7590;
7592 -> 7591;
7593 -> 7591;
7594 -> 7592;
7594 -> 7593;
7595 -> 7593;
7596 -> 7594;
7596 -> 7595;
7597 -> 7596;
7597 -> 7570;
7597 -> 7595;
7598 -> 7596;
7598 -> 7570;
7598 -> 7595;
7599 -> 7598;
7599 -> 7593;
7600 -> 7594;
7600 -> 7570;
7600 -> 7593;
7601 -> 7594;
7601 -> 7600;
7601 -> 7593;
7602 -> 7601;
7602 -> 7591;
7603 -> 7602;
7603 -> 7588;
7604 -> 7588;
7605 -> 7603;
7605 -> 7604;
7606 -> 7605;
7606 -> 7600;
7606 -> 7604;
7607 -> 7606;
7607 -> 7588;
7608 -> 7589;
7608 -> 7600;
7608 -> 7588;
7609 -> 7583;
7610 -> 7608;
7610 -> 7609;
7610 -> 7583;
7611 -> 7583;
7612 -> 7611;
7612 -> 7583;
7613 -> 0;
7613 -> 7583;
7614 -> 7583;
7615 -> 7612;
7615 -> 7614;
7616 -> 7613;
7616 -> 7614;
7617 -> 7613;
7617 -> 7614;
7620 -> 7618;
7620 -> 7619;
7621 -> 7619;
7622 -> 7620;
7622 -> 7619;
7623 -> 7619;
7624 -> 0;
7624 -> 7619;
7625 -> 0;
7625 -> 7619;
7626 -> 7622;
7626 -> 7621;
7627 -> 7623;
7627 -> 7621;
7628 -> 7624;
7628 -> 7621;
7629 -> 7625;
7629 -> 7621;
7630 -> 7621;
7631 -> 7626;
7631 -> 7621;
7632 -> 7627;
7632 -> 7621;
7633 -> 7628;
7633 -> 7621;
7634 -> 7631;
7634 -> 7630;
7635 -> 7632;
7635 -> 7630;
7636 -> 7633;
7636 -> 7630;
7637 -> 7630;
7638 -> 5878;
7638 -> 7630;
7639 -> 7634;
7639 -> 7630;
7640 -> 7635;
7640 -> 7630;
7641 -> 7637;
7641 -> 7638;
7641 -> 7639;
7641 -> 7640;
7641 -> 7600;
7641 -> 7623;
7641 -> 7630;
7642 -> 7641;
7642 -> 7637;
7643 -> 7641;
7643 -> 7637;
7645 -> 7644;
7647 -> 7646;
7648 -> 0;
7649 -> 7648;
7650 -> 7649;
7654 -> 0;
7656 -> 7654;
7656 -> 7655;
7657 -> 7656;
7657 -> 7655;
7658 -> 7657;
7658 -> 5878;
7658 -> 7641;
7658 -> 7655;
7659 -> 7655;
7660 -> 7658;
7660 -> 7659;
7661 -> 7659;
7662 -> 7658;
7662 -> 7661;
7662 -> 7655;
7663 -> 7653;
7663 -> 7662;
7664 -> 0;
7666 -> 7664;
7666 -> 7665;
7667 -> 7666;
7667 -> 7665;
7668 -> 7667;
7668 -> 5878;
7668 -> 7662;
7668 -> 7665;
7669 -> 7665;
7670 -> 7668;
7670 -> 7669;
7671 -> 7669;
7672 -> 7653;
7672 -> 7668;
7672 -> 7663;
7673 -> 0;
7675 -> 7673;
7675 -> 7674;
7676 -> 7675;
7676 -> 7674;
7677 -> 7676;
7677 -> 5878;
7677 -> 7668;
7677 -> 7674;
7678 -> 7674;
7679 -> 7677;
7679 -> 7678;
7680 -> 7678;
7681 -> 7653;
7681 -> 7677;
7681 -> 7672;
7682 -> 0;
7684 -> 7682;
7684 -> 7683;
7685 -> 7684;
7685 -> 7683;
7686 -> 7685;
7686 -> 5878;
7686 -> 7677;
7686 -> 7683;
7687 -> 7683;
7688 -> 7686;
7688 -> 7687;
7689 -> 7687;
7690 -> 7653;
7690 -> 7686;
7690 -> 7681;
7691 -> 0;
7693 -> 7691;
7693 -> 7692;
7694 -> 7693;
7694 -> 7692;
7695 -> 7694;
7695 -> 5878;
7695 -> 7686;
7695 -> 7692;
7696 -> 7692;
7697 -> 7695;
7697 -> 7696;
7698 -> 7696;
7699 -> 7653;
7699 -> 7695;
7699 -> 7690;
7700 -> 0;
7702 -> 7700;
7702 -> 7701;
7703 -> 7702;
7703 -> 7701;
7704 -> 7703;
7704 -> 5878;
7704 -> 7695;
7704 -> 7701;
7705 -> 7701;
7706 -> 7704;
7706 -> 7705;
7707 -> 7705;
7708 -> 7653;
7708 -> 7704;
7708 -> 7699;
7709 -> 0;
7711 -> 7709;
7711 -> 7710;
7712 -> 7711;
7712 -> 7710;
7713 -> 7712;
7713 -> 5878;
7713 -> 7704;
7713 -> 7710;
7714 -> 7710;
7715 -> 7713;
7715 -> 7714;
7716 -> 7714;
7717 -> 7653;
7717 -> 7713;
7717 -> 7708;
7718 -> 0;
7720 -> 7718;
7720 -> 7719;
7721 -> 7720;
7721 -> 7719;
7722 -> 7721;
7722 -> 5878;
7722 -> 7713;
7722 -> 7719;
7723 -> 7719;
7724 -> 7722;
7724 -> 7723;
7725 -> 7723;
7726 -> 7653;
7726 -> 7722;
7726 -> 7717;
7727 -> 0;
7729 -> 7727;
7729 -> 7728;
7730 -> 7729;
7730 -> 7728;
7731 -> 7730;
7731 -> 5878;
7731 -> 7722;
7731 -> 7728;
7732 -> 7728;
7733 -> 7731;
7733 -> 7732;
7734 -> 7732;
7735 -> 7653;
7735 -> 7731;
7735 -> 7726;
7736 -> 0;
7738 -> 7736;
7738 -> 7737;
7739 -> 7738;
7739 -> 7737;
7740 -> 7739;
7740 -> 5878;
7740 -> 7731;
7740 -> 7737;
7741 -> 7737;
7742 -> 7740;
7742 -> 7741;
7743 -> 7741;
7744 -> 7653;
7744 -> 7740;
7744 -> 7735;
7745 -> 0;
7747 -> 7745;
7747 -> 7746;
7748 -> 7747;
7748 -> 7746;
7749 -> 7748;
7749 -> 5878;
7749 -> 7740;
7749 -> 7746;
7750 -> 7746;
7751 -> 7749;
7751 -> 7750;
7752 -> 7750;
7753 -> 7653;
7753 -> 7749;
7753 -> 7744;
7754 -> 0;
7756 -> 7754;
7756 -> 7755;
7757 -> 7756;
7757 -> 7755;
7758 -> 7757;
7758 -> 5878;
7758 -> 7749;
7758 -> 7755;
7759 -> 7755;
7760 -> 7758;
7760 -> 7759;
7761 -> 7759;
7762 -> 7653;
7762 -> 7758;
7762 -> 7753;
7763 -> 0;
7765 -> 7763;
7765 -> 7764;
7766 -> 7765;
7766 -> 7764;
7767 -> 7766;
7767 -> 5878;
7767 -> 7758;
7767 -> 7764;
7768 -> 7764;
7769 -> 7767;
7769 -> 7768;
7770 -> 7768;
7771 -> 7653;
7771 -> 7767;
7771 -> 7762;
7772 -> 0;
7774 -> 7772;
7774 -> 7773;
7775 -> 7774;
7775 -> 7773;
7776 -> 7775;
7776 -> 5878;
7776 -> 7767;
7776 -> 7773;
7777 -> 7773;
7778 -> 7776;
7778 -> 7777;
7779 -> 7777;
7780 -> 7653;
7780 -> 7776;
7780 -> 7771;
7781 -> 0;
7783 -> 7781;
7783 -> 7782;
7784 -> 7783;
7784 -> 7782;
7785 -> 7784;
7785 -> 5878;
7785 -> 7776;
7785 -> 7782;
7786 -> 7782;
7787 -> 7785;
7787 -> 7786;
7788 -> 7786;
7789 -> 7653;
7789 -> 7785;
7789 -> 7780;
7790 -> 0;
7792 -> 7790;
7792 -> 7791;
7793 -> 7792;
7793 -> 7791;
7794 -> 7793;
7794 -> 5878;
7794 -> 7785;
7794 -> 7791;
7795 -> 7791;
7796 -> 7794;
7796 -> 7795;
7797 -> 7795;
7798 -> 7653;
7798 -> 7794;
7798 -> 7789;
7799 -> 0;
7801 -> 7799;
7801 -> 7800;
7802 -> 7801;
7802 -> 7800;
7803 -> 7802;
7803 -> 5878;
7803 -> 7794;
7803 -> 7800;
7804 -> 7800;
7805 -> 7803;
7805 -> 7804;
7806 -> 7804;
7807 -> 7653;
7807 -> 7803;
7807 -> 7798;
7808 -> 0;
7810 -> 7808;
7810 -> 7809;
7811 -> 7810;
7811 -> 7809;
7812 -> 7811;
7812 -> 5878;
7812 -> 7803;
7812 -> 7809;
7813 -> 7809;
7814 -> 7812;
7814 -> 7813;
7815 -> 7813;
7816 -> 7653;
7816 -> 7812;
7816 -> 7807;
7817 -> 0;
7819 -> 7817;
7819 -> 7818;
7820 -> 7819;
7820 -> 7818;
7821 -> 7820;
7821 -> 5878;
7821 -> 7812;
7821 -> 7818;
7822 -> 7818;
7823 -> 7821;
7823 -> 7822;
7824 -> 7822;
7825 -> 7653;
7825 -> 7821;
7825 -> 7816;
7826 -> 0;
7828 -> 7826;
7828 -> 7827;
7829 -> 7828;
7829 -> 7827;
7830 -> 7829;
7830 -> 5878;
7830 -> 7821;
7830 -> 7827;
7831 -> 7827;
7832 -> 7830;
7832 -> 7831;
7833 -> 7831;
7834 -> 7653;
7834 -> 7830;
7834 -> 7825;
7835 -> 0;
7837 -> 7835;
7837 -> 7836;
7838 -> 7837;
7838 -> 7836;
7839 -> 7838;
7839 -> 5878;
7839 -> 7830;
7839 -> 7836;
7840 -> 7836;
7841 -> 7839;
7841 -> 7840;
7842 -> 7840;
7843 -> 7653;
7843 -> 7839;
7843 -> 7834;
7844 -> 0;
7846 -> 7844;
7846 -> 7845;
7847 -> 7846;
7847 -> 7845;
7848 -> 7847;
7848 -> 5878;
7848 -> 7839;
7848 -> 7845;
7849 -> 7845;
7850 -> 7848;
7850 -> 7849;
7851 -> 7849;
7852 -> 7653;
7852 -> 7848;
7852 -> 7843;
7853 -> 0;
7855 -> 7853;
7855 -> 7854;
7856 -> 7855;
7856 -> 7854;
7857 -> 7856;
7857 -> 5878;
7857 -> 7848;
7857 -> 7854;
7858 -> 7854;
7859 -> 7857;
7859 -> 7858;
7860 -> 7858;
7861 -> 7653;
7861 -> 7857;
7861 -> 7852;
7862 -> 0;
7864 -> 7862;
7864 -> 7863;
7865 -> 7864;
7865 -> 7863;
7866 -> 7865;
7866 -> 5878;
7866 -> 7857;
7866 -> 7863;
7867 -> 7863;
7868 -> 7866;
7868 -> 7867;
7869 -> 7867;
7870 -> 7653;
7870 -> 7866;
7870 -> 7861;
7871 -> 0;
7873 -> 7871;
7873 -> 7872;
7874 -> 7873;
7874 -> 7872;
7875 -> 7874;
7875 -> 5878;
7875 -> 7866;
7875 -> 7872;
7876 -> 7872;
7877 -> 7875;
7877 -> 7876;
7878 -> 7876;
7879 -> 7653;
7879 -> 7875;
7879 -> 7870;
7880 -> 0;
7882 -> 7880;
7882 -> 7881;
7883 -> 7882;
7883 -> 7881;
7884 -> 7883;
7884 -> 5878;
7884 -> 7875;
7884 -> 7881;
7885 -> 7881;
7886 -> 7884;
7886 -> 7885;
7887 -> 7885;
7888 -> 7653;
7888 -> 7884;
7888 -> 7879;
7889 -> 0;
7891 -> 7889;
7891 -> 7890;
7892 -> 7891;
7892 -> 7890;
7893 -> 7892;
7893 -> 5878;
7893 -> 7884;
7893 -> 7890;
7894 -> 7890;
7895 -> 7893;
7895 -> 7894;
7896 -> 7894;
7897 -> 7653;
7897 -> 7893;
7897 -> 7888;
7898 -> 0;
7900 -> 7898;
7900 -> 7899;
7901 -> 7900;
7901 -> 7899;
7902 -> 7901;
7902 -> 5878;
7902 -> 7893;
7902 -> 7899;
7903 -> 7899;
7904 -> 7902;
7904 -> 7903;
7905 -> 7903;
7906 -> 7653;
7906 -> 7902;
7906 -> 7897;
7907 -> 0;
7909 -> 7907;
7909 -> 7908;
7910 -> 7909;
7910 -> 7908;
7911 -> 7910;
7911 -> 5878;
7911 -> 7902;
7911 -> 7908;
7912 -> 7908;
7913 -> 7911;
7913 -> 7912;
7914 -> 7912;
7915 -> 7653;
7915 -> 7911;
7915 -> 7906;
7916 -> 0;
7918 -> 7916;
7918 -> 7917;
7919 -> 7918;
7919 -> 7917;
7920 -> 7919;
7920 -> 5878;
7920 -> 7911;
7920 -> 7917;
7921 -> 7917;
7922 -> 7920;
7922 -> 7921;
7923 -> 7921;
7924 -> 7653;
7924 -> 7920;
7924 -> 7915;
7925 -> 0;
7927 -> 7925;
7927 -> 7926;
7928 -> 7927;
7928 -> 7926;
7929 -> 7928;
7929 -> 5878;
7929 -> 7920;
7929 -> 7926;
7930 -> 7926;
7931 -> 7929;
7931 -> 7930;
7932 -> 7930;
7933 -> 7653;
7933 -> 7929;
7933 -> 7924;
7934 -> 0;
7936 -> 7934;
7936 -> 7935;
7937 -> 7936;
7937 -> 7935;
7938 -> 7937;
7938 -> 5878;
7938 -> 7929;
7938 -> 7935;
7939 -> 7935;
7940 -> 7938;
7940 -> 7939;
7941 -> 7939;
7942 -> 7653;
7942 -> 7938;
7942 -> 7933;
7943 -> 0;
7945 -> 7943;
7945 -> 7944;
7946 -> 7945;
7946 -> 7944;
7947 -> 7946;
7947 -> 5878;
7947 -> 7938;
7947 -> 7944;
7948 -> 7944;
7949 -> 7947;
7949 -> 7948;
7950 -> 7948;
7951 -> 7653;
7951 -> 7947;
7951 -> 7942;
7952 -> 0;
7954 -> 7952;
7954 -> 7953;
7955 -> 7954;
7955 -> 7953;
7956 -> 7955;
7956 -> 5878;
7956 -> 7947;
7956 -> 7953;
7957 -> 7953;
7958 -> 7956;
7958 -> 7957;
7959 -> 7957;
7960 -> 7653;
7960 -> 7956;
7960 -> 7951;
7961 -> 0;
7963 -> 7961;
7963 -> 7962;
7964 -> 7963;
7964 -> 7962;
7965 -> 7964;
7965 -> 5878;
7965 -> 7956;
7965 -> 7962;
7966 -> 7962;
7967 -> 7965;
7967 -> 7966;
7968 -> 7966;
7969 -> 7653;
7969 -> 7965;
7969 -> 7960;
7970 -> 0;
7972 -> 7970;
7972 -> 7971;
7973 -> 7972;
7973 -> 7971;
7974 -> 7973;
7974 -> 5878;
7974 -> 7965;
7974 -> 7971;
7975 -> 7971;
7976 -> 7974;
7976 -> 7975;
7977 -> 7975;
7978 -> 7653;
7978 -> 7974;
7978 -> 7969;
7979 -> 0;
7981 -> 7979;
7981 -> 7980;
7982 -> 7981;
7982 -> 7980;
7983 -> 7982;
7983 -> 5878;
7983 -> 7974;
7983 -> 7980;
7984 -> 7980;
7985 -> 7983;
7985 -> 7984;
7986 -> 7984;
7987 -> 7653;
7987 -> 7983;
7987 -> 7978;
7988 -> 0;
7990 -> 7988;
7990 -> 7989;
7991 -> 7990;
7991 -> 7989;
7992 -> 7991;
7992 -> 5878;
7992 -> 7983;
7992 -> 7989;
7993 -> 7989;
7994 -> 7992;
7994 -> 7993;
7995 -> 7993;
7996 -> 7653;
7996 -> 7992;
7996 -> 7987;
7997 -> 0;
7999 -> 7997;
7999 -> 7998;
8000 -> 7999;
8000 -> 7998;
8001 -> 8000;
8001 -> 5878;
8001 -> 7992;
8001 -> 7998;
8002 -> 7998;
8003 -> 8001;
8003 -> 8002;
8004 -> 8002;
8005 -> 7653;
8005 -> 8001;
8005 -> 7996;
8006 -> 0;
8008 -> 8006;
8008 -> 8007;
8009 -> 8008;
8009 -> 8007;
8010 -> 8009;
8010 -> 5878;
8010 -> 8001;
8010 -> 8007;
8011 -> 8007;
8012 -> 8010;
8012 -> 8011;
8013 -> 8011;
8014 -> 7653;
8014 -> 8010;
8014 -> 8005;
8015 -> 0;
8017 -> 8015;
8017 -> 8016;
8018 -> 8017;
8018 -> 8016;
8019 -> 8018;
8019 -> 5878;
8019 -> 8010;
8019 -> 8016;
8020 -> 8016;
8021 -> 8019;
8021 -> 8020;
8022 -> 8020;
8023 -> 7653;
8023 -> 8019;
8023 -> 8014;
8024 -> 0;
8026 -> 8024;
8026 -> 8025;
8027 -> 8026;
8027 -> 8025;
8028 -> 8027;
8028 -> 5878;
8028 -> 8019;
8028 -> 8025;
8029 -> 8025;
8030 -> 8028;
8030 -> 8029;
8031 -> 8029;
8032 -> 7653;
8032 -> 8028;
8032 -> 8023;
8033 -> 0;
8035 -> 8033;
8035 -> 8034;
8036 -> 8035;
8036 -> 8034;
8037 -> 8036;
8037 -> 5878;
8037 -> 8028;
8037 -> 8034;
8038 -> 8034;
8039 -> 8037;
8039 -> 8038;
8040 -> 8038;
8041 -> 7653;
8041 -> 8037;
8041 -> 8032;
8042 -> 0;
8044 -> 8042;
8044 -> 8043;
8045 -> 8044;
8045 -> 8043;
8046 -> 8045;
8046 -> 5878;
8046 -> 8037;
8046 -> 8043;
8047 -> 8043;
8048 -> 8046;
8048 -> 8047;
8049 -> 8047;
8050 -> 7653;
8050 -> 8046;
8050 -> 8041;
8051 -> 0;
8053 -> 8051;
8053 -> 8052;
8054 -> 8053;
8054 -> 8052;
8055 -> 8054;
8055 -> 5878;
8055 -> 8046;
8055 -> 8052;
8056 -> 8052;
8057 -> 8055;
8057 -> 8056;
8058 -> 8056;
8059 -> 7653;
8059 -> 8055;
8059 -> 8050;
8060 -> 0;
8062 -> 8060;
8062 -> 8061;
8063 -> 8062;
8063 -> 8061;
8064 -> 8063;
8064 -> 5878;
8064 -> 8055;
8064 -> 8061;
8065 -> 8061;
8066 -> 8064;
8066 -> 8065;
8067 -> 8065;
8068 -> 7653;
8068 -> 8064;
8068 -> 8059;
8069 -> 0;
8071 -> 8069;
8071 -> 8070;
8072 -> 8071;
8072 -> 8070;
8073 -> 8072;
8073 -> 5878;
8073 -> 8064;
8073 -> 8070;
8074 -> 8070;
8075 -> 8073;
8075 -> 8074;
8076 -> 8074;
8077 -> 7653;
8077 -> 8073;
8077 -> 8068;
8078 -> 0;
8080 -> 8078;
8080 -> 8079;
8081 -> 8080;
8081 -> 8079;
8082 -> 8081;
8082 -> 5878;
8082 -> 8073;
8082 -> 8079;
8083 -> 8079;
8084 -> 8082;
8084 -> 8083;
8085 -> 8083;
8086 -> 7653;
8086 -> 8082;
8086 -> 8077;
8087 -> 0;
8089 -> 8087;
8089 -> 8088;
8090 -> 8089;
8090 -> 8088;
8091 -> 8090;
8091 -> 5878;
8091 -> 8082;
8091 -> 8088;
8092 -> 8088;
8093 -> 8091;
8093 -> 8092;
8094 -> 8092;
8095 -> 7653;
8095 -> 8091;
8095 -> 8086;
8096 -> 0;
8098 -> 8096;
8098 -> 8097;
8099 -> 8098;
8099 -> 8097;
8100 -> 8099;
8100 -> 5878;
8100 -> 8091;
8100 -> 8097;
8101 -> 8097;
8102 -> 8100;
8102 -> 8101;
8103 -> 8101;
8104 -> 7653;
8104 -> 8100;
8104 -> 8095;
8105 -> 0;
8107 -> 8105;
8107 -> 8106;
8108 -> 8107;
8108 -> 8106;
8109 -> 8108;
8109 -> 5878;
8109 -> 8100;
8109 -> 8106;
8110 -> 8106;
8111 -> 8109;
8111 -> 8110;
8112 -> 8110;
8113 -> 7653;
8113 -> 8109;
8113 -> 8104;
8114 -> 0;
8116 -> 8114;
8116 -> 8115;
8117 -> 8116;
8117 -> 8115;
8118 -> 8117;
8118 -> 5878;
8118 -> 8109;
8118 -> 8115;
8119 -> 8115;
8120 -> 8118;
8120 -> 8119;
8121 -> 8119;
8122 -> 7653;
8122 -> 8118;
8122 -> 8113;
8123 -> 0;
8125 -> 8123;
8125 -> 8124;
8126 -> 8125;
8126 -> 8124;
8127 -> 8126;
8127 -> 5878;
8127 -> 8118;
8127 -> 8124;
8128 -> 8124;
8129 -> 8127;
8129 -> 8128;
8130 -> 8128;
8131 -> 7653;
8131 -> 8127;
8131 -> 8122;
8132 -> 0;
8134 -> 8132;
8134 -> 8133;
8135 -> 8134;
8135 -> 8133;
8136 -> 8135;
8136 -> 5878;
8136 -> 8127;
8136 -> 8133;
8137 -> 8133;
8138 -> 8136;
8138 -> 8137;
8139 -> 8137;
8140 -> 7653;
8140 -> 8136;
8140 -> 8131;
8141 -> 7653;
8141 -> 8140;
8142 -> 7642;
8142 -> 7637;
8143 -> 7637;
8144 -> 8142;
8144 -> 8143;
8145 -> 8144;
8145 -> 0;
8145 -> 8143;
8146 -> 8144;
8146 -> 0;
8146 -> 8145;
8147 -> 8144;
8147 -> 8146;
8148 -> 8146;
8149 -> 8147;
8149 -> 8148;
8150 -> 8149;
8150 -> 8148;
8151 -> 8150;
8152 -> 8144;
8152 -> 8151;
8153 -> 8151;
8154 -> 8152;
8154 -> 8153;
8155 -> 8154;
8155 -> 8153;
8156 -> 8155;
8157 -> 8144;
8157 -> 8156;
8158 -> 8156;
8159 -> 8157;
8159 -> 8158;
8160 -> 8159;
8160 -> 8158;
8161 -> 8160;
8162 -> 0;
8162 -> 8161;
8163 -> 7641;
8163 -> 8162;
8163 -> 8136;
8163 -> 7630;
8164 -> 7636;
8164 -> 7637;
8164 -> 7630;
8165 -> 7630;
8165 -> 7621;
8166 -> 7626;
8166 -> 0;
8166 -> 7621;
8167 -> 7629;
8167 -> 0;
8167 -> 7621;
8168 -> 8167;
8169 -> 8168;
8169 -> 7630;
8169 -> 7621;
8170 -> 7619;
8171 -> 0;
8173 -> 8171;
8173 -> 8172;
8174 -> 8172;
8175 -> 8173;
8175 -> 8172;
8176 -> 8172;
8177 -> 0;
8177 -> 8172;
8178 -> 0;
8178 -> 8172;
8179 -> 8175;
8179 -> 8174;
8180 -> 8176;
8180 -> 8174;
8181 -> 8177;
8181 -> 8174;
8182 -> 8178;
8182 -> 8174;
8183 -> 8174;
8184 -> 8179;
8184 -> 8174;
8185 -> 8180;
8185 -> 8174;
8186 -> 8181;
8186 -> 8174;
8187 -> 8184;
8187 -> 8183;
8188 -> 8185;
8188 -> 8183;
8189 -> 8186;
8189 -> 8183;
8190 -> 8183;
8191 -> 5878;
8191 -> 8183;
8192 -> 8187;
8192 -> 8183;
8193 -> 8188;
8193 -> 8183;
8194 -> 8190;
8194 -> 8191;
8194 -> 8192;
8194 -> 8193;
8194 -> 8163;
8194 -> 8164;
8194 -> 8165;
8194 -> 8169;
8194 -> 8176;
8194 -> 0;
8194 -> 8168;
8194 -> 8183;
8195 -> 8194;
8195 -> 8190;
8196 -> 8190;
8197 -> 0;
8197 -> 8194;
8198 -> 8189;
8198 -> 8190;
8198 -> 8183;
8199 -> 8183;
8199 -> 8174;
8200 -> 8179;
8200 -> 0;
8200 -> 8174;
8201 -> 8182;
8201 -> 0;
8201 -> 8174;
8202 -> 8201;
8203 -> 8202;
8203 -> 8183;
8203 -> 8174;
8204 -> 8172;
8205 -> 7616;
8205 -> 7614;
8206 -> 7614;
8207 -> 7614;
8208 -> 8205;
8208 -> 8207;
8209 -> 8206;
8209 -> 8207;
8210 -> 8208;
8210 -> 8207;
8211 -> 8207;
8212 -> 0;
8212 -> 8207;
8213 -> 0;
8213 -> 8207;
8214 -> 8207;
8215 -> 8210;
8215 -> 8214;
8216 -> 8211;
8216 -> 8214;
8217 -> 8212;
8217 -> 8214;
8218 -> 8213;
8218 -> 8214;
8219 -> 8209;
8219 -> 8214;
8220 -> 8215;
8220 -> 8214;
8221 -> 8216;
8221 -> 8214;
8222 -> 8217;
8222 -> 8214;
8223 -> 8214;
8224 -> 8220;
8224 -> 8223;
8225 -> 8221;
8225 -> 8223;
8226 -> 8222;
8226 -> 8223;
8227 -> 8219;
8227 -> 8223;
8228 -> 5878;
8228 -> 8223;
8229 -> 8224;
8229 -> 8223;
8230 -> 8225;
8230 -> 8223;
8231 -> 8223;
8232 -> 8231;
8232 -> 8228;
8232 -> 8229;
8232 -> 8230;
8232 -> 8197;
8232 -> 8198;
8232 -> 8199;
8232 -> 8203;
8232 -> 8211;
8232 -> 0;
8232 -> 8202;
8232 -> 8223;
8233 -> 8232;
8233 -> 8231;
8234 -> 8231;
8235 -> 8232;
8236 -> 0;
8236 -> 8235;
8237 -> 8226;
8237 -> 8231;
8237 -> 8223;
8238 -> 8219;
8238 -> 8214;
8239 -> 8215;
8239 -> 0;
8239 -> 8214;
8240 -> 8218;
8240 -> 0;
8240 -> 8214;
8241 -> 8240;
8242 -> 8241;
8242 -> 8219;
8242 -> 8214;
8243 -> 8206;
8243 -> 7614;
8244 -> 7617;
8244 -> 7614;
8245 -> 7614;
8246 -> 7614;
8247 -> 8243;
8247 -> 8246;
8248 -> 8244;
8248 -> 8246;
8249 -> 8245;
8249 -> 8246;
8250 -> 8245;
8250 -> 8246;
8251 -> 8247;
8251 -> 8246;
8252 -> 8248;
8252 -> 8246;
8253 -> 8249;
8253 -> 8246;
8254 -> 8246;
8255 -> 8254;
8255 -> 8251;
8255 -> 8252;
8255 -> 8253;
8255 -> 8236;
8255 -> 8237;
8255 -> 8238;
8255 -> 8242;
8255 -> 0;
8255 -> 8241;
8255 -> 8246;
8256 -> 8245;
8256 -> 7614;
8257 -> 7615;
8257 -> 8256;
8257 -> 7611;
8257 -> 8255;
8257 -> 7614;
8258 -> 8206;
8258 -> 7614;
8259 -> 8258;
8259 -> 7583;
8260 -> 7585;
8260 -> 7583;
8261 -> 7611;
8261 -> 7583;
8262 -> 0;
8262 -> 7583;
8263 -> 8260;
8263 -> 8261;
8263 -> 8262;
8263 -> 7586;
8263 -> 8257;
8263 -> 0;
8263 -> 7583;
8264 -> 7583;
8265 -> 8263;
8265 -> 8264;
8266 -> 8263;
8266 -> 8264;
8267 -> 8263;
8267 -> 8264;
8268 -> 8265;
8268 -> 8264;
8269 -> 8267;
8269 -> 8263;
8269 -> 8264;
8271 -> 8270;
8272 -> 8266;
8272 -> 8264;
8273 -> 8264;
8274 -> 8268;
8274 -> 8273;
8275 -> 8269;
8275 -> 8273;
8276 -> 8269;
8276 -> 8273;
8277 -> 8269;
8277 -> 8273;
8278 -> 8269;
8278 -> 8273;
8279 -> 8269;
8279 -> 8273;
8280 -> 8272;
8280 -> 8273;
8281 -> 8273;
8282 -> 8274;
8282 -> 8281;
8282 -> 8273;
8283 -> 8274;
8283 -> 8263;
8283 -> 8282;
8284 -> 8274;
8284 -> 8283;
8284 -> 0;
8285 -> 8273;
8286 -> 8273;
8287 -> 8271;
8287 -> 8273;
8288 -> 8274;
8288 -> 8283;
8288 -> 8273;
8289 -> 8273;
8290 -> 8287;
8290 -> 8288;
8290 -> 8289;
8290 -> 8270;
8290 -> 8273;
8291 -> 8274;
8291 -> 8283;
8291 -> 8290;
8292 -> 8290;
8293 -> 8291;
8293 -> 8292;
8294 -> 8292;
8294 -> 8290;
8295 -> 8290;
8296 -> 8294;
8296 -> 8295;
8297 -> 8294;
8297 -> 8295;
8298 -> 8296;
8298 -> 8295;
8299 -> 8295;
8300 -> 8298;
8300 -> 8299;
8301 -> 8300;
8301 -> 8299;
8302 -> 8299;
8303 -> 8301;
8303 -> 8302;
8304 -> 8299;
8305 -> 8301;
8305 -> 8304;
8306 -> 8303;
8306 -> 8305;
8306 -> 8299;
8307 -> 8300;
8307 -> 8299;
8308 -> 8307;
8309 -> 8290;
8310 -> 8308;
8310 -> 8309;
8311 -> 8308;
8311 -> 8309;
8312 -> 8310;
8312 -> 8309;
8313 -> 8309;
8314 -> 8312;
8314 -> 8313;
8315 -> 8313;
8316 -> 7650;
8316 -> 7649;
8316 -> 8313;
8317 -> 8313;
8318 -> 8317;
8319 -> 8318;
8319 -> 8317;
8320 -> 8319;
8320 -> 8313;
8321 -> 8316;
8321 -> 8320;
8321 -> 8319;
8321 -> 8313;
8322 -> 8314;
8322 -> 8313;
8323 -> 8315;
8323 -> 8313;
8324 -> 7650;
8324 -> 8321;
8324 -> 8322;
8324 -> 8323;
8324 -> 8313;
8325 -> 0;
8325 -> 8313;
8326 -> 8325;
8326 -> 8309;
8327 -> 8326;
8327 -> 8290;
8328 -> 8308;
8328 -> 8327;
8328 -> 8290;
8329 -> 8275;
8329 -> 8290;
8330 -> 8276;
8330 -> 8290;
8331 -> 8277;
8331 -> 8290;
8332 -> 8278;
8332 -> 8290;
8333 -> 8279;
8333 -> 8290;
8334 -> 8280;
8334 -> 8290;
8335 -> 8286;
8335 -> 8290;
8336 -> 8290;
8337 -> 8291;
8337 -> 8336;
8338 -> 8291;
8338 -> 8336;
8339 -> 8294;
8339 -> 8336;
8340 -> 8308;
8340 -> 8336;
8341 -> 8308;
8341 -> 8336;
8342 -> 8328;
8342 -> 8336;
8343 -> 8329;
8343 -> 8336;
8344 -> 8330;
8344 -> 8336;
8345 -> 8331;
8345 -> 8336;
8346 -> 8332;
8346 -> 8336;
8347 -> 8333;
8347 -> 8336;
8348 -> 8334;
8348 -> 8336;
8349 -> 8335;
8349 -> 8336;
8350 -> 8336;
8351 -> 8341;
8351 -> 8328;
8351 -> 8336;
8352 -> 8341;
8352 -> 8328;
8352 -> 8336;
8353 -> 8341;
8353 -> 8328;
8353 -> 8336;
8354 -> 8339;
8354 -> 8336;
8355 -> 8141;
8355 -> 8354;
8355 -> 8336;
8356 -> 8355;
8356 -> 8336;
8357 -> 8340;
8357 -> 8343;
8357 -> 8336;
8358 -> 8336;
8359 -> 8336;
8360 -> 8336;
8361 -> 8339;
8361 -> 8336;
8362 -> 8358;
8362 -> 8336;
8363 -> 8346;
8363 -> 8361;
8363 -> 8362;
8363 -> 8328;
8363 -> 8336;
8364 -> 8336;
8365 -> 8347;
8365 -> 8364;
8365 -> 8336;
8366 -> 8359;
8366 -> 8336;
8367 -> 8338;
8367 -> 8366;
8368 -> 0;
8368 -> 8367;
8369 -> 8368;
8369 -> 0;
8369 -> 8336;
8370 -> 8352;
8370 -> 8336;
8371 -> 0;
8371 -> 8336;
8372 -> 8370;
8372 -> 0;
8372 -> 8336;
8373 -> 8370;
8373 -> 0;
8373 -> 8336;
8374 -> 8368;
8374 -> 0;
8374 -> 8373;
8375 -> 8368;
8375 -> 8336;
8376 -> 8345;
8376 -> 8375;
8377 -> 8368;
8377 -> 8336;
8378 -> 8350;
8378 -> 8273;
8379 -> 8377;
8379 -> 8273;
8380 -> 8274;
8380 -> 8379;
8380 -> 8363;
8380 -> 8273;
8381 -> 6750;
8381 -> 7583;
8382 -> 8381;
8382 -> 7562;
8383 -> 7562;
8384 -> 8382;
8384 -> 8383;
8384 -> 7562;
8385 -> 7571;
8385 -> 7562;
8386 -> 8382;
8386 -> 7562;
8387 -> 7562;
8388 -> 8385;
8388 -> 8386;
8388 -> 8387;
8388 -> 7579;
8388 -> 8380;
8388 -> 7562;
8389 -> 8388;
8389 -> 8387;
8390 -> 8387;
8391 -> 8389;
8391 -> 8390;
8392 -> 8390;
8393 -> 8391;
8393 -> 8392;
8394 -> 8393;
8394 -> 8390;
8395 -> 8391;
8395 -> 8390;
8396 -> 8395;
8396 -> 8387;
8397 -> 8387;
8398 -> 8396;
8398 -> 8397;
8399 -> 8397;
8400 -> 8398;
8400 -> 8391;
8400 -> 8399;
8401 -> 8400;
8401 -> 8397;
8402 -> 8397;
8403 -> 8398;
8403 -> 8391;
8403 -> 8402;
8404 -> 8403;
8404 -> 8397;
8405 -> 8397;
8406 -> 8398;
8406 -> 8405;
8407 -> 0;
8407 -> 8405;
8408 -> 8407;
8408 -> 8405;
8409 -> 8405;
8410 -> 8406;
8410 -> 8409;
8411 -> 8410;
8411 -> 8391;
8411 -> 8409;
8412 -> 8409;
8413 -> 8411;
8413 -> 8412;
8413 -> 8409;
8414 -> 8413;
8415 -> 8410;
8415 -> 8414;
8416 -> 8414;
8417 -> 8415;
8417 -> 8416;
8418 -> 8416;
8419 -> 8417;
8419 -> 8391;
8419 -> 8418;
8419 -> 8416;
8420 -> 8416;
8421 -> 8417;
8421 -> 8420;
8422 -> 8420;
8423 -> 8420;
8424 -> 8421;
8424 -> 8423;
8425 -> 8424;
8425 -> 8391;
8425 -> 8423;
8426 -> 8425;
8426 -> 8420;
8427 -> 8420;
8428 -> 8426;
8428 -> 8427;
8429 -> 8427;
8430 -> 8428;
8430 -> 8429;
8431 -> 8430;
8431 -> 8427;
8432 -> 8428;
8432 -> 8427;
8433 -> 8427;
8434 -> 8432;
8434 -> 8433;
8435 -> 8431;
8435 -> 8433;
8436 -> 8433;
8437 -> 8434;
8437 -> 8436;
8438 -> 8437;
8438 -> 8433;
8439 -> 8438;
8439 -> 8435;
8439 -> 8433;
8440 -> 8433;
8441 -> 8435;
8441 -> 8391;
8441 -> 8440;
8441 -> 8433;
8442 -> 8435;
8442 -> 8391;
8442 -> 8441;
8443 -> 8434;
8443 -> 8441;
8444 -> 8441;
8445 -> 8443;
8445 -> 8444;
8446 -> 8435;
8446 -> 8444;
8447 -> 8446;
8447 -> 8391;
8447 -> 8444;
8448 -> 8444;
8449 -> 8446;
8449 -> 8391;
8449 -> 8448;
8449 -> 8444;
8450 -> 8449;
8451 -> 8447;
8451 -> 8450;
8451 -> 8449;
8452 -> 8451;
8453 -> 8452;
8453 -> 8451;
8454 -> 8451;
8455 -> 8453;
8455 -> 8391;
8455 -> 8454;
8455 -> 8451;
8456 -> 8453;
8456 -> 8451;
8457 -> 8455;
8457 -> 8456;
8457 -> 8391;
8457 -> 8451;
8458 -> 8446;
8458 -> 8457;
8458 -> 8451;
8459 -> 8451;
8460 -> 8445;
8460 -> 8459;
8460 -> 8451;
8461 -> 8445;
8461 -> 8460;
8462 -> 8460;
8463 -> 8460;
8464 -> 8461;
8464 -> 8463;
8465 -> 8462;
8465 -> 8463;
8466 -> 8465;
8466 -> 8463;
8467 -> 8464;
8467 -> 8465;
8467 -> 8463;
8468 -> 8455;
8468 -> 8462;
8468 -> 8458;
8468 -> 8467;
8468 -> 8460;
8469 -> 8455;
8469 -> 8468;
8469 -> 8451;
8470 -> 8451;
8471 -> 8469;
8471 -> 8470;
8472 -> 8471;
8473 -> 8471;
8473 -> 8472;
8473 -> 8469;
8473 -> 8468;
8474 -> 8471;
8475 -> 8473;
8475 -> 8474;
8476 -> 8475;
8476 -> 8473;
8476 -> 8474;
8477 -> 8470;
8478 -> 8470;
8478 -> 8451;
8479 -> 8478;
8479 -> 8441;
8480 -> 8441;
8481 -> 8435;
8481 -> 8476;
8481 -> 8433;
8482 -> 8420;
8483 -> 8481;
8483 -> 8482;
8484 -> 8483;
8484 -> 8420;
8485 -> 8484;
8486 -> 8484;
8486 -> 8485;
8487 -> 8486;
8487 -> 8476;
8487 -> 8485;
8488 -> 8487;
8488 -> 8484;
8489 -> 8422;
8489 -> 8420;
8490 -> 8489;
8490 -> 8416;
8491 -> 8417;
8491 -> 8476;
8491 -> 8416;
8492 -> 8416;
8493 -> 8490;
8493 -> 8492;
8494 -> 8491;
8494 -> 8492;
8495 -> 8418;
8495 -> 8492;
8496 -> 8418;
8496 -> 8492;
8497 -> 8418;
8497 -> 8492;
8498 -> 8418;
8498 -> 8492;
8499 -> 8417;
8499 -> 8492;
8500 -> 8492;
8501 -> 8492;
8502 -> 8499;
8502 -> 8501;
8503 -> 8502;
8503 -> 8476;
8503 -> 8501;
8504 -> 8503;
8504 -> 8492;
8505 -> 8492;
8506 -> 8505;
8506 -> 8492;
8507 -> 8493;
8507 -> 8492;
8508 -> 8495;
8508 -> 8492;
8509 -> 8500;
8509 -> 8492;
8510 -> 8504;
8510 -> 8492;
8511 -> 8498;
8511 -> 8492;
8512 -> 8497;
8512 -> 8492;
8513 -> 8505;
8513 -> 8492;
8514 -> 8492;
8515 -> 8507;
8515 -> 8514;
8516 -> 8508;
8516 -> 8514;
8517 -> 8509;
8517 -> 8514;
8518 -> 8510;
8518 -> 8514;
8519 -> 8511;
8519 -> 8514;
8520 -> 8512;
8520 -> 8514;
8521 -> 8513;
8521 -> 8514;
8522 -> 8499;
8522 -> 8514;
8523 -> 8522;
8523 -> 8514;
8524 -> 8514;
8525 -> 8514;
8526 -> 8514;
8527 -> 8514;
8528 -> 8527;
8528 -> 8515;
8528 -> 8490;
8528 -> 8514;
8529 -> 8514;
8530 -> 8524;
8530 -> 8529;
8530 -> 8514;
8531 -> 0;
8531 -> 8530;
8532 -> 0;
8532 -> 8530;
8533 -> 8532;
8533 -> 8492;
8534 -> 8533;
8534 -> 0;
8534 -> 8492;
8535 -> 8492;
8536 -> 8535;
8536 -> 8492;
8537 -> 8492;
8538 -> 8533;
8538 -> 8492;
8539 -> 8496;
8539 -> 8538;
8540 -> 0;
8540 -> 8539;
8541 -> 8539;
8542 -> 8494;
8542 -> 8539;
8543 -> 8539;
8544 -> 8539;
8545 -> 8499;
8545 -> 8544;
8546 -> 8539;
8547 -> 8540;
8547 -> 8492;
8548 -> 8533;
8548 -> 8492;
8549 -> 8500;
8549 -> 8492;
8550 -> 8495;
8550 -> 8492;
8551 -> 8541;
8551 -> 8492;
8552 -> 8492;
8553 -> 8547;
8553 -> 8552;
8554 -> 8548;
8554 -> 8552;
8555 -> 8549;
8555 -> 8552;
8556 -> 8550;
8556 -> 8552;
8557 -> 8551;
8557 -> 8552;
8558 -> 8499;
8558 -> 8552;
8559 -> 8492;
8560 -> 8492;
8561 -> 8540;
8561 -> 8492;
8562 -> 8542;
8562 -> 8561;
8562 -> 0;
8562 -> 8492;
8563 -> 8498;
8563 -> 8562;
8564 -> 8540;
8564 -> 8563;
8565 -> 8563;
8566 -> 8564;
8566 -> 8565;
8567 -> 8499;
8567 -> 8565;
8568 -> 8566;
8568 -> 8565;
8569 -> 8563;
8570 -> 8500;
8570 -> 8563;
8571 -> 8563;
8572 -> 8570;
8572 -> 8571;
8573 -> 8499;
8573 -> 8571;
8574 -> 8571;
8575 -> 8573;
8575 -> 8574;
8576 -> 8574;
8577 -> 8576;
8577 -> 8571;
8578 -> 8572;
8578 -> 8500;
8578 -> 8571;
8579 -> 8563;
8580 -> 8562;
8581 -> 8542;
8581 -> 8562;
8582 -> 0;
8582 -> 8581;
8583 -> 8582;
8583 -> 0;
8583 -> 8492;
8584 -> 8500;
8584 -> 8492;
8585 -> 8580;
8585 -> 8492;
8586 -> 0;
8586 -> 8585;
8587 -> 8585;
8588 -> 8586;
8588 -> 8587;
8589 -> 8417;
8589 -> 8562;
8589 -> 8587;
8590 -> 8589;
8590 -> 8562;
8590 -> 8587;
8591 -> 8588;
8591 -> 8587;
8592 -> 8590;
8592 -> 8591;
8592 -> 8587;
8593 -> 8414;
8594 -> 8415;
8594 -> 8562;
8594 -> 8582;
8594 -> 8414;
8595 -> 8594;
8595 -> 8413;
8596 -> 8595;
8596 -> 8562;
8596 -> 0;
8596 -> 8409;
8597 -> 8596;
8597 -> 8405;
8598 -> 8405;
8599 -> 8597;
8599 -> 8598;
8599 -> 8405;
8600 -> 8408;
8600 -> 8407;
8600 -> 8405;
8601 -> 8600;
8602 -> 8406;
8602 -> 8601;
8603 -> 8601;
8604 -> 8602;
8604 -> 8603;
8605 -> 8603;
8606 -> 8604;
8606 -> 8605;
8607 -> 8605;
8608 -> 8606;
8608 -> 8562;
8608 -> 8607;
8608 -> 8605;
8609 -> 8606;
8609 -> 8562;
8609 -> 8608;
8610 -> 8608;
8611 -> 8609;
8611 -> 8610;
8612 -> 8606;
8612 -> 8610;
8613 -> 8610;
8614 -> 8612;
8614 -> 8562;
8614 -> 8613;
8615 -> 8614;
8615 -> 8610;
8616 -> 8615;
8617 -> 8615;
8618 -> 8617;
8618 -> 8615;
8619 -> 8617;
8619 -> 8615;
8620 -> 8615;
8621 -> 8619;
8621 -> 8620;
8622 -> 8612;
8622 -> 8620;
8623 -> 8620;
8624 -> 8620;
8625 -> 8620;
8626 -> 8625;
8626 -> 8622;
8626 -> 8562;
8626 -> 8582;
8626 -> 8592;
8626 -> 8620;
8627 -> 8622;
8627 -> 8562;
8627 -> 8625;
8627 -> 8582;
8627 -> 8592;
8627 -> 0;
8627 -> 8626;
8628 -> 8626;
8629 -> 8627;
8629 -> 8628;
8630 -> 8629;
8630 -> 8627;
8630 -> 8628;
8631 -> 8630;
8631 -> 8626;
8632 -> 8626;
8633 -> 8627;
8633 -> 8632;
8634 -> 8633;
8634 -> 8627;
8634 -> 8632;
8635 -> 8634;
8636 -> 8634;
8637 -> 8633;
8637 -> 8636;
8638 -> 8637;
8638 -> 8627;
8638 -> 8636;
8639 -> 8638;
8639 -> 8634;
8640 -> 8634;
8641 -> 8639;
8641 -> 8640;
8642 -> 8641;
8642 -> 8627;
8642 -> 8640;
8643 -> 8634;
8644 -> 8642;
8644 -> 8643;
8645 -> 8643;
8646 -> 8644;
8646 -> 8645;
8647 -> 8646;
8647 -> 8627;
8647 -> 8645;
8648 -> 8647;
8648 -> 8643;
8649 -> 8634;
8650 -> 8633;
8650 -> 8649;
8651 -> 8650;
8651 -> 8627;
8651 -> 8649;
8652 -> 8651;
8652 -> 8634;
8653 -> 8648;
8653 -> 8634;
8654 -> 8652;
8654 -> 8653;
8654 -> 8627;
8654 -> 8634;
8655 -> 8654;
8655 -> 8634;
8656 -> 8633;
8656 -> 8654;
8656 -> 8634;
8657 -> 8634;
8658 -> 8635;
8658 -> 8657;
8658 -> 8634;
8659 -> 8658;
8659 -> 8634;
8660 -> 8656;
8660 -> 8659;
8660 -> 8657;
8660 -> 0;
8660 -> 8654;
8660 -> 8634;
8661 -> 8633;
8661 -> 8660;
8661 -> 8632;
8662 -> 8661;
8662 -> 8626;
8663 -> 8620;
8664 -> 8624;
8664 -> 8663;
8664 -> 8620;
8665 -> 0;
8665 -> 8664;
8666 -> 8659;
8666 -> 8664;
8667 -> 8666;
8667 -> 8615;
8668 -> 8615;
8669 -> 8667;
8669 -> 8615;
8670 -> 8669;
8671 -> 8612;
8671 -> 8670;
8672 -> 8670;
8673 -> 8671;
8673 -> 8672;
8674 -> 8673;
8674 -> 8660;
8674 -> 8672;
8675 -> 8672;
8676 -> 8673;
8676 -> 8660;
8676 -> 8672;
8677 -> 8676;
8677 -> 8670;
8678 -> 8670;
8679 -> 8670;
8680 -> 8679;
8680 -> 8677;
8680 -> 8660;
8680 -> 8670;
8681 -> 8678;
8681 -> 8670;
8682 -> 8681;
8682 -> 8669;
8683 -> 8615;
8684 -> 8615;
8685 -> 8612;
8685 -> 8660;
8685 -> 8684;
8685 -> 8615;
8686 -> 8612;
8686 -> 8660;
8686 -> 8685;
8687 -> 8685;
8688 -> 8686;
8688 -> 8687;
8689 -> 8687;
8690 -> 8688;
8690 -> 8689;
8691 -> 8690;
8691 -> 8687;
8692 -> 8687;
8693 -> 8692;
8693 -> 8685;
8694 -> 8615;
8695 -> 8615;
8696 -> 8668;
8696 -> 8695;
8696 -> 8615;
8697 -> 8667;
8697 -> 8615;
8698 -> 8696;
8698 -> 8697;
8698 -> 8615;
8699 -> 0;
8699 -> 8698;
8700 -> 8611;
8700 -> 8615;
8701 -> 8699;
8701 -> 8615;
8702 -> 8615;
8703 -> 8700;
8703 -> 8701;
8703 -> 8702;
8703 -> 8691;
8703 -> 8615;
8704 -> 8616;
8704 -> 8703;
8705 -> 8703;
8706 -> 8704;
8706 -> 8705;
8707 -> 8612;
8707 -> 8705;
8708 -> 8705;
8709 -> 8707;
8709 -> 8708;
8710 -> 8708;
8711 -> 8710;
8711 -> 8705;
8712 -> 8706;
8712 -> 8616;
8712 -> 8705;
8713 -> 8703;
8714 -> 8616;
8714 -> 8615;
8715 -> 8703;
8715 -> 8610;
8716 -> 8608;
8717 -> 8603;
8718 -> 8604;
8718 -> 8703;
8718 -> 8603;
8719 -> 8718;
8719 -> 8601;
8720 -> 8719;
8720 -> 8703;
8720 -> 8601;
8721 -> 8719;
8721 -> 8703;
8721 -> 8601;
8722 -> 8721;
8722 -> 8600;
8723 -> 8600;
8724 -> 8722;
8724 -> 8723;
8724 -> 8600;
8725 -> 8408;
8725 -> 8405;
8726 -> 8725;
8726 -> 8397;
8727 -> 8726;
8727 -> 8387;
8728 -> 8388;
8728 -> 8727;
8728 -> 8703;
8728 -> 7562;
8729 -> 8388;
8729 -> 8387;
8730 -> 8387;
8731 -> 8729;
8731 -> 8730;
8732 -> 8730;
8733 -> 8731;
8733 -> 8732;
8734 -> 8733;
8734 -> 8728;
8734 -> 8732;
8735 -> 8733;
8735 -> 8728;
8735 -> 8732;
8736 -> 8735;
8736 -> 8730;
8737 -> 8731;
8737 -> 8728;
8737 -> 8730;
8738 -> 8737;
8738 -> 8387;
8739 -> 8387;
8740 -> 8738;
8740 -> 8739;
8741 -> 8739;
8742 -> 8740;
8742 -> 8737;
8742 -> 8741;
8742 -> 8739;
8743 -> 8740;
8743 -> 8742;
8744 -> 8740;
8744 -> 8737;
8744 -> 8742;
8745 -> 8742;
8746 -> 8740;
8746 -> 8745;
8747 -> 8745;
8748 -> 8746;
8748 -> 8747;
8749 -> 8745;
8750 -> 8745;
8751 -> 8746;
8751 -> 8737;
8751 -> 8750;
8752 -> 8751;
8752 -> 8745;
8753 -> 8745;
8754 -> 8746;
8754 -> 8753;
8755 -> 8754;
8755 -> 8745;
8756 -> 8745;
8757 -> 8755;
8757 -> 8756;
8758 -> 8752;
8758 -> 8745;
8759 -> 8758;
8760 -> 8746;
8760 -> 8759;
8761 -> 8759;
8762 -> 0;
8762 -> 8759;
8763 -> 8759;
8764 -> 8761;
8764 -> 8763;
8765 -> 8762;
8765 -> 8763;
8766 -> 8760;
8766 -> 8763;
8767 -> 8765;
8767 -> 8763;
8768 -> 8763;
8769 -> 8766;
8769 -> 8768;
8770 -> 8769;
8770 -> 8737;
8770 -> 8768;
8771 -> 8770;
8771 -> 8763;
8772 -> 8763;
8773 -> 8771;
8773 -> 8772;
8773 -> 8763;
8774 -> 8767;
8774 -> 8765;
8774 -> 8763;
8775 -> 8774;
8776 -> 8766;
8776 -> 8775;
8777 -> 8775;
8778 -> 8776;
8778 -> 8737;
8778 -> 8775;
8779 -> 8778;
8779 -> 8775;
8780 -> 8779;
8780 -> 8737;
8780 -> 8775;
8781 -> 8779;
8781 -> 8737;
8781 -> 8775;
8782 -> 8781;
8782 -> 8774;
8783 -> 8774;
8784 -> 8782;
8784 -> 8783;
8784 -> 8774;
8785 -> 8767;
8785 -> 8763;
8786 -> 8785;
8786 -> 8758;
8787 -> 8786;
8787 -> 0;
8787 -> 8758;
8788 -> 8787;
8789 -> 8745;
8790 -> 8746;
8790 -> 8737;
8790 -> 8789;
8791 -> 8790;
8791 -> 8745;
8792 -> 8791;
8792 -> 8745;
8793 -> 8792;
8794 -> 8746;
8794 -> 8793;
8795 -> 8793;
8796 -> 0;
8796 -> 8793;
8797 -> 8793;
8798 -> 8795;
8798 -> 8797;
8799 -> 8796;
8799 -> 8797;
8800 -> 8794;
8800 -> 8797;
8801 -> 8799;
8801 -> 8797;
8802 -> 8797;
8803 -> 8800;
8803 -> 8802;
8804 -> 8803;
8804 -> 8737;
8804 -> 8802;
8805 -> 8804;
8805 -> 8797;
8806 -> 8797;
8807 -> 8805;
8807 -> 8806;
8807 -> 8797;
8808 -> 8801;
8808 -> 8799;
8808 -> 8797;
8809 -> 8808;
8810 -> 8800;
8810 -> 8809;
8811 -> 8809;
8812 -> 8810;
8812 -> 8737;
8812 -> 8809;
8813 -> 8812;
8813 -> 8809;
8814 -> 8813;
8814 -> 8737;
8814 -> 8809;
8815 -> 8813;
8815 -> 8737;
8815 -> 8809;
8816 -> 8815;
8816 -> 8808;
8817 -> 8808;
8818 -> 8816;
8818 -> 8817;
8818 -> 8808;
8819 -> 8801;
8819 -> 8797;
8820 -> 8819;
8820 -> 8792;
8821 -> 8820;
8821 -> 0;
8821 -> 8792;
8822 -> 8821;
8823 -> 8745;
8824 -> 8746;
8824 -> 8823;
8825 -> 8823;
8826 -> 8823;
8827 -> 8825;
8827 -> 8826;
8828 -> 8825;
8828 -> 8826;
8829 -> 8824;
8829 -> 8826;
8830 -> 8828;
8830 -> 8826;
8831 -> 8826;
8832 -> 8829;
8832 -> 8831;
8833 -> 8832;
8833 -> 8737;
8833 -> 8831;
8834 -> 8833;
8834 -> 8826;
8835 -> 8826;
8836 -> 8834;
8836 -> 8835;
8836 -> 8826;
8837 -> 8830;
8837 -> 8828;
8837 -> 8826;
8838 -> 8837;
8839 -> 8829;
8839 -> 8838;
8840 -> 8838;
8841 -> 8839;
8841 -> 8737;
8841 -> 8838;
8842 -> 8841;
8842 -> 8838;
8843 -> 8842;
8843 -> 8737;
8843 -> 8838;
8844 -> 8842;
8844 -> 8737;
8844 -> 8838;
8845 -> 8844;
8845 -> 8837;
8846 -> 8837;
8847 -> 8845;
8847 -> 8846;
8847 -> 8837;
8848 -> 8830;
8848 -> 8826;
8849 -> 8848;
8849 -> 8745;
8850 -> 8745;
8851 -> 8746;
8851 -> 8850;
8852 -> 8851;
8852 -> 8745;
8853 -> 8745;
8854 -> 8852;
8854 -> 8853;
8855 -> 8788;
8855 -> 8745;
8856 -> 8822;
8856 -> 8745;
8857 -> 8849;
8857 -> 8745;
8858 -> 5878;
8858 -> 8745;
8859 -> 8854;
8859 -> 8855;
8859 -> 8856;
8859 -> 8857;
8859 -> 8858;
8859 -> 8737;
8859 -> 8745;
8860 -> 8859;
8860 -> 8742;
8861 -> 8742;
8862 -> 8742;
8863 -> 8740;
8863 -> 8860;
8863 -> 8739;
8864 -> 8388;
8864 -> 8387;
8865 -> 8387;
8866 -> 8388;
8866 -> 8865;
8866 -> 8863;
8866 -> 7562;
8867 -> 7562;
8868 -> 7575;
8868 -> 8867;
8868 -> 7562;
8869 -> 8868;
8870 -> 7562;
8871 -> 7579;
8871 -> 8866;
8871 -> 7562;
8872 -> 7579;
8872 -> 8866;
8872 -> 8871;
8873 -> 8872;
8873 -> 8871;
8874 -> 7579;
8874 -> 8866;
8874 -> 8873;
8875 -> 8871;
8876 -> 8875;
8877 -> 8876;
8877 -> 8875;
8878 -> 8875;
8878 -> 8866;
8878 -> 8874;
8879 -> 8878;
8879 -> 8871;
8880 -> 7571;
8880 -> 8871;
8881 -> 8874;
8881 -> 8871;
8882 -> 8866;
8882 -> 8871;
8883 -> 8869;
8883 -> 8871;
8884 -> 8871;
8885 -> 8871;
8886 -> 8879;
8886 -> 8885;
8887 -> 8880;
8887 -> 8885;
8888 -> 8881;
8888 -> 8885;
8889 -> 8882;
8889 -> 8885;
8890 -> 8883;
8890 -> 8885;
8891 -> 8884;
8891 -> 8885;
8892 -> 8886;
8892 -> 8885;
8893 -> 8887;
8893 -> 8885;
8894 -> 8888;
8894 -> 8885;
8895 -> 8889;
8895 -> 8885;
8896 -> 8890;
8896 -> 8885;
8897 -> 0;
8897 -> 8885;
8898 -> 8885;
8899 -> 8892;
8899 -> 8898;
8900 -> 8893;
8900 -> 8898;
8901 -> 8894;
8901 -> 8898;
8902 -> 8895;
8902 -> 8898;
8903 -> 8896;
8903 -> 8898;
8904 -> 8897;
8904 -> 8898;
8905 -> 8891;
8905 -> 8898;
8906 -> 8898;
8907 -> 8899;
8907 -> 8906;
8908 -> 8898;
8909 -> 8907;
8909 -> 8908;
8909 -> 8878;
8909 -> 8898;
8910 -> 8900;
8910 -> 8898;
8911 -> 8901;
8911 -> 8898;
8912 -> 8902;
8912 -> 8898;
8913 -> 8903;
8913 -> 8898;
8914 -> 8898;
8915 -> 8909;
8915 -> 8914;
8916 -> 8910;
8916 -> 8914;
8917 -> 8911;
8917 -> 8914;
8918 -> 8912;
8918 -> 8914;
8919 -> 8913;
8919 -> 8914;
8920 -> 8905;
8920 -> 8914;
8921 -> 8914;
8922 -> 8915;
8922 -> 8921;
8923 -> 8922;
8923 -> 8909;
8923 -> 8921;
8924 -> 8914;
8925 -> 8923;
8925 -> 8924;
8926 -> 8915;
8926 -> 8914;
8927 -> 8918;
8927 -> 8914;
8928 -> 8919;
8928 -> 8914;
8929 -> 8917;
8929 -> 8914;
8930 -> 8916;
8930 -> 8914;
8931 -> 8914;
8932 -> 8931;
8933 -> 8914;
8934 -> 8933;
8934 -> 8925;
8934 -> 8926;
8934 -> 8927;
8934 -> 8928;
8934 -> 8929;
8934 -> 8930;
8934 -> 8931;
8934 -> 8909;
8934 -> 8869;
8934 -> 8932;
8934 -> 8914;
8935 -> 8934;
8935 -> 8933;
8936 -> 8933;
8937 -> 8934;
8937 -> 8936;
8937 -> 8914;
8938 -> 8914;
8939 -> 8938;
8939 -> 8933;
8939 -> 8914;
8940 -> 0;
8942 -> 8940;
8942 -> 8941;
8943 -> 8941;
8944 -> 8943;
8944 -> 8941;
8945 -> 8942;
8945 -> 8943;
8945 -> 8941;
8946 -> 8941;
8947 -> 0;
8949 -> 8947;
8949 -> 8948;
8950 -> 8948;
8951 -> 8950;
8951 -> 8948;
8952 -> 8949;
8952 -> 8950;
8952 -> 8948;
8953 -> 8948;
8954 -> 0;
8956 -> 8954;
8956 -> 8955;
8957 -> 8955;
8958 -> 8957;
8958 -> 8955;
8959 -> 8956;
8959 -> 8957;
8959 -> 8955;
8960 -> 8955;
8961 -> 0;
8963 -> 8961;
8963 -> 8962;
8964 -> 8962;
8965 -> 8964;
8965 -> 8962;
8966 -> 8963;
8966 -> 8964;
8966 -> 8962;
8967 -> 8962;
8968 -> 0;
8970 -> 8968;
8970 -> 8969;
8971 -> 8969;
8972 -> 8971;
8972 -> 8969;
8973 -> 8970;
8973 -> 8971;
8973 -> 8969;
8974 -> 8969;
8975 -> 0;
8977 -> 8975;
8977 -> 8976;
8978 -> 8976;
8979 -> 8978;
8979 -> 8976;
8980 -> 8977;
8980 -> 8978;
8980 -> 8976;
8981 -> 8976;
8982 -> 0;
8984 -> 8982;
8984 -> 8983;
8985 -> 8983;
8986 -> 8985;
8986 -> 8983;
8987 -> 8984;
8987 -> 8985;
8987 -> 8983;
8988 -> 8983;
8989 -> 0;
8991 -> 8989;
8991 -> 8990;
8992 -> 8990;
8993 -> 8992;
8993 -> 8990;
8994 -> 8991;
8994 -> 8992;
8994 -> 8990;
8995 -> 8990;
8996 -> 8946;
8996 -> 8914;
8997 -> 8996;
8997 -> 8943;
8997 -> 8944;
8997 -> 8945;
8997 -> 8914;
8998 -> 8997;
8998 -> 8933;
8998 -> 8914;
8999 -> 8914;
9000 -> 8999;
9000 -> 8933;
9000 -> 8914;
9001 -> 8933;
9001 -> 8914;
9002 -> 8933;
9002 -> 8914;
9003 -> 8933;
9003 -> 8914;
9004 -> 8933;
9004 -> 8914;
9005 -> 8933;
9005 -> 8914;
9006 -> 8914;
9007 -> 8915;
9007 -> 9006;
9008 -> 9006;
9009 -> 9007;
9009 -> 9008;
9010 -> 9009;
9010 -> 8937;
9010 -> 9008;
9011 -> 9010;
9011 -> 9006;
9012 -> 9011;
9012 -> 8914;
9013 -> 9012;
9013 -> 0;
9013 -> 8914;
9014 -> 9013;
9014 -> 8914;
9015 -> 9014;
9015 -> 8933;
9015 -> 8914;
9016 -> 8933;
9016 -> 8937;
9016 -> 8939;
9016 -> 8914;
9017 -> 8915;
9017 -> 8914;
9018 -> 8933;
9018 -> 8914;
9019 -> 9016;
9019 -> 9017;
9019 -> 9018;
9019 -> 8937;
9019 -> 8939;
9019 -> 8998;
9019 -> 9000;
9019 -> 9001;
9019 -> 9002;
9019 -> 9015;
9019 -> 9003;
9019 -> 9004;
9019 -> 9005;
9019 -> 8938;
9019 -> 8997;
9019 -> 8999;
9019 -> 8914;
9020 -> 8914;
9021 -> 9019;
9021 -> 9020;
9022 -> 9021;
9022 -> 9020;
9023 -> 8914;
9024 -> 8915;
9024 -> 9023;
9025 -> 9023;
9026 -> 9024;
9026 -> 9025;
9027 -> 9026;
9027 -> 9022;
9027 -> 9025;
9028 -> 9027;
9029 -> 9026;
9029 -> 9028;
9030 -> 9028;
9031 -> 9029;
9031 -> 9022;
9031 -> 9030;
9031 -> 9028;
9032 -> 9027;
9033 -> 9027;
9034 -> 9027;
9035 -> 9034;
9036 -> 9034;
9036 -> 9035;
9037 -> 9035;
9038 -> 9036;
9038 -> 9022;
9038 -> 9037;
9038 -> 9035;
9039 -> 9034;
9040 -> 9034;
9040 -> 9027;
9041 -> 9026;
9041 -> 9022;
9041 -> 9027;
9042 -> 9033;
9042 -> 9027;
9043 -> 9027;
9044 -> 9026;
9044 -> 9042;
9044 -> 9025;
9045 -> 9026;
9045 -> 9042;
9045 -> 9025;
9046 -> 9045;
9046 -> 9023;
9047 -> 9023;
9048 -> 9046;
9048 -> 8914;
9049 -> 8905;
9049 -> 8898;
9050 -> 8905;
9050 -> 8898;
9051 -> 8905;
9051 -> 8898;
9052 -> 8905;
9052 -> 8898;
9053 -> 8905;
9053 -> 8898;
9054 -> 8905;
9054 -> 8898;
9055 -> 8905;
9055 -> 8898;
9056 -> 8905;
9056 -> 8898;
9057 -> 8905;
9057 -> 8898;
9058 -> 8905;
9058 -> 8898;
9059 -> 8899;
9059 -> 8898;
9060 -> 8899;
9060 -> 8905;
9060 -> 8898;
9061 -> 8904;
9061 -> 8898;
9062 -> 9061;
9062 -> 8905;
9062 -> 8898;
9063 -> 8898;
9064 -> 8900;
9064 -> 9042;
9064 -> 9063;
9064 -> 8898;
9065 -> 9064;
9065 -> 8898;
9066 -> 9065;
9067 -> 9066;
9068 -> 9067;
9068 -> 9042;
9068 -> 9066;
9069 -> 9068;
9069 -> 8905;
9069 -> 8898;
9070 -> 8905;
9070 -> 9042;
9070 -> 8898;
9071 -> 8899;
9071 -> 8898;
9072 -> 8905;
9072 -> 8898;
9073 -> 9070;
9073 -> 9071;
9073 -> 9072;
9073 -> 9042;
9073 -> 9049;
9073 -> 9060;
9073 -> 9050;
9073 -> 9051;
9073 -> 9052;
9073 -> 9053;
9073 -> 9054;
9073 -> 9055;
9073 -> 9056;
9073 -> 9057;
9073 -> 9058;
9073 -> 9069;
9073 -> 9062;
9073 -> 9061;
9073 -> 8898;
9074 -> 8898;
9075 -> 7562;
9076 -> 7572;
9076 -> 9075;
9076 -> 7562;
9077 -> 7573;
9077 -> 8884;
9077 -> 7562;
9078 -> 7562;
9079 -> 7574;
9079 -> 9078;
9079 -> 7562;
9080 -> 7574;
9080 -> 8884;
9080 -> 9079;
9081 -> 7562;
9082 -> 7576;
9082 -> 9081;
9082 -> 7562;
9083 -> 7576;
9083 -> 9073;
9083 -> 9082;
9084 -> 8884;
9084 -> 9083;
9084 -> 9073;
9084 -> 9077;
9084 -> 9080;
9084 -> 9082;
9085 -> 8884;
9085 -> 7576;
9085 -> 9082;
9086 -> 8884;
9086 -> 7562;
9087 -> 7568;
9087 -> 9086;
9087 -> 9084;
9087 -> 9085;
9087 -> 7532;
9088 -> 7568;
9088 -> 7562;
9089 -> 7568;
9089 -> 7562;
9090 -> 7568;
9090 -> 7562;
9091 -> 7568;
9091 -> 7562;
9092 -> 7568;
9092 -> 7562;
9093 -> 7568;
9093 -> 7562;
9094 -> 7568;
9094 -> 7562;
9095 -> 7568;
9095 -> 7562;
9096 -> 7562;
9097 -> 9090;
9097 -> 7562;
9098 -> 9092;
9098 -> 7562;
9099 -> 0;
9099 -> 7562;
9100 -> 7562;
9101 -> 9094;
9101 -> 7562;
9102 -> 7562;
9103 -> 9099;
9103 -> 9102;
9104 -> 9100;
9104 -> 9102;
9105 -> 9101;
9105 -> 9102;
9106 -> 9095;
9106 -> 9102;
9107 -> 9102;
9108 -> 9103;
9108 -> 9102;
9109 -> 9104;
9109 -> 9102;
9110 -> 9107;
9110 -> 9102;
9111 -> 9105;
9111 -> 9102;
9112 -> 9102;
9113 -> 9108;
9113 -> 9112;
9114 -> 9109;
9114 -> 9112;
9115 -> 9110;
9115 -> 9112;
9116 -> 9111;
9116 -> 9112;
9117 -> 9106;
9117 -> 9112;
9118 -> 9112;
9119 -> 9113;
9119 -> 0;
9119 -> 9112;
9120 -> 9119;
9120 -> 9114;
9120 -> 9112;
9121 -> 9120;
9122 -> 9117;
9122 -> 9121;
9123 -> 9121;
9124 -> 9122;
9124 -> 9087;
9124 -> 9123;
9125 -> 9123;
9126 -> 9124;
9126 -> 9120;
9127 -> 9120;
9128 -> 9117;
9128 -> 9127;
9129 -> 9128;
9129 -> 9087;
9129 -> 9127;
9130 -> 9129;
9130 -> 9120;
9131 -> 9130;
9132 -> 9126;
9132 -> 9087;
9132 -> 9130;
9133 -> 9116;
9133 -> 9130;
9134 -> 9131;
9134 -> 9132;
9134 -> 9133;
9134 -> 9087;
9134 -> 9130;
9135 -> 9134;
9135 -> 9131;
9136 -> 9134;
9136 -> 9131;
9137 -> 9134;
9137 -> 9131;
9138 -> 9134;
9138 -> 9131;
9139 -> 9131;
9140 -> 9139;
9140 -> 9131;
9141 -> 9131;
9142 -> 9136;
9142 -> 9141;
9143 -> 9142;
9143 -> 9131;
9144 -> 9137;
9144 -> 9131;
9145 -> 9139;
9145 -> 9131;
9146 -> 9143;
9146 -> 9134;
9146 -> 9144;
9146 -> 9145;
9146 -> 9140;
9146 -> 9131;
9147 -> 9134;
9147 -> 9131;
9148 -> 9134;
9148 -> 9131;
9149 -> 9147;
9149 -> 9131;
9150 -> 9131;
9151 -> 9149;
9151 -> 9150;
9152 -> 9148;
9152 -> 9150;
9153 -> 9152;
9153 -> 9146;
9153 -> 9150;
9154 -> 9153;
9154 -> 9131;
9155 -> 9131;
9156 -> 9154;
9156 -> 9155;
9157 -> 9148;
9157 -> 9155;
9158 -> 9155;
9159 -> 9156;
9159 -> 9158;
9159 -> 9155;
9160 -> 9156;
9160 -> 9146;
9160 -> 9155;
9161 -> 9155;
9162 -> 9160;
9162 -> 9161;
9163 -> 9160;
9163 -> 9161;
9164 -> 9157;
9164 -> 9161;
9165 -> 9161;
9166 -> 9162;
9166 -> 9165;
9166 -> 9161;
9167 -> 9162;
9167 -> 9146;
9167 -> 9161;
9168 -> 9161;
9169 -> 9168;
9169 -> 9155;
9170 -> 9169;
9170 -> 9131;
9171 -> 9134;
9171 -> 9170;
9171 -> 9146;
9171 -> 9168;
9171 -> 9130;
9172 -> 9120;
9173 -> 9126;
9173 -> 9120;
9174 -> 9116;
9174 -> 9087;
9174 -> 9171;
9174 -> 9173;
9175 -> 9173;
9175 -> 9087;
9175 -> 9174;
9176 -> 9173;
9177 -> 9175;
9177 -> 9176;
9178 -> 9173;
9179 -> 9177;
9179 -> 9178;
9180 -> 9177;
9180 -> 9178;
9181 -> 9179;
9181 -> 9178;
9182 -> 5878;
9182 -> 9178;
9183 -> 9180;
9183 -> 9181;
9183 -> 9182;
9183 -> 9177;
9183 -> 9178;
9184 -> 9180;
9184 -> 9183;
9184 -> 9178;
9185 -> 9178;
9186 -> 9184;
9186 -> 9185;
9187 -> 9186;
9187 -> 9185;
9188 -> 9187;
9189 -> 9180;
9189 -> 9183;
9189 -> 9178;
9190 -> 9113;
9190 -> 0;
9190 -> 9112;
9191 -> 9118;
9191 -> 9190;
9192 -> 9191;
9192 -> 9117;
9192 -> 9118;
9192 -> 9183;
9192 -> 9190;
9193 -> 9190;
9194 -> 9192;
9194 -> 9193;
9195 -> 0;
9195 -> 9193;
9196 -> 9192;
9196 -> 9195;
9196 -> 9190;
9197 -> 9190;
9198 -> 9117;
9198 -> 9197;
9199 -> 9198;
9199 -> 9196;
9199 -> 9197;
9200 -> 9199;
9200 -> 9190;
9201 -> 9190;
9202 -> 9200;
9202 -> 9201;
9203 -> 9200;
9203 -> 9201;
9204 -> 9202;
9204 -> 9201;
9205 -> 5878;
9205 -> 9201;
9206 -> 9203;
9206 -> 9204;
9206 -> 9205;
9206 -> 9200;
9206 -> 9201;
9207 -> 9201;
9208 -> 9203;
9208 -> 9206;
9208 -> 9207;
9208 -> 9201;
9209 -> 9203;
9209 -> 9206;
9209 -> 9201;
9210 -> 9201;
9211 -> 9203;
9211 -> 9206;
9211 -> 9210;
9211 -> 9201;
9212 -> 9203;
9212 -> 9206;
9212 -> 9201;
9213 -> 9203;
9213 -> 9206;
9213 -> 9201;
9214 -> 9201;
9215 -> 9203;
9215 -> 9206;
9215 -> 9214;
9215 -> 9201;
9216 -> 9203;
9216 -> 9206;
9216 -> 9201;
9217 -> 9201;
9218 -> 9203;
9218 -> 9206;
9218 -> 9217;
9218 -> 9201;
9219 -> 9201;
9220 -> 9203;
9220 -> 9206;
9220 -> 9219;
9220 -> 9201;
9221 -> 9203;
9221 -> 9206;
9221 -> 9201;
9222 -> 9203;
9222 -> 9221;
9222 -> 0;
9222 -> 9201;
9223 -> 9203;
9223 -> 9221;
9223 -> 9201;
9224 -> 9190;
9225 -> 9117;
9225 -> 9224;
9226 -> 9225;
9226 -> 9221;
9226 -> 9224;
9227 -> 9226;
9227 -> 9190;
9228 -> 9116;
9228 -> 9221;
9228 -> 9190;
9229 -> 9190;
9230 -> 9117;
9230 -> 9229;
9231 -> 9230;
9231 -> 9228;
9231 -> 9229;
9232 -> 9230;
9232 -> 9228;
9232 -> 9229;
9233 -> 9232;
9233 -> 9190;
9234 -> 9116;
9234 -> 9233;
9234 -> 9190;
9235 -> 9116;
9235 -> 9190;
9236 -> 9190;
9237 -> 9190;
9238 -> 9236;
9238 -> 9237;
9239 -> 9236;
9239 -> 9237;
9240 -> 9236;
9240 -> 9237;
9241 -> 9235;
9241 -> 9237;
9242 -> 9117;
9242 -> 9237;
9243 -> 9237;
9244 -> 9242;
9244 -> 9243;
9245 -> 9244;
9245 -> 9234;
9245 -> 9243;
9246 -> 9243;
9247 -> 9245;
9247 -> 9246;
9249 -> 0;
9250 -> 0;
9251 -> 0;
9254 -> 9248;
9254 -> 9253;
9255 -> 9249;
9255 -> 9253;
9256 -> 9250;
9256 -> 9253;
9257 -> 9251;
9257 -> 9253;
9258 -> 9252;
9258 -> 9253;
9259 -> 9253;
9260 -> 9259;
9260 -> 9253;
9261 -> 9259;
9261 -> 9253;
9262 -> 9259;
9262 -> 9253;
9263 -> 9253;
9264 -> 9255;
9264 -> 9263;
9264 -> 9253;
9265 -> 9256;
9265 -> 0;
9265 -> 9253;
9266 -> 9257;
9266 -> 0;
9266 -> 9253;
9267 -> 9254;
9267 -> 9259;
9267 -> 9253;
9268 -> 9255;
9268 -> 9259;
9268 -> 9253;
9269 -> 9256;
9269 -> 9259;
9269 -> 9253;
9270 -> 9258;
9270 -> 9259;
9270 -> 9253;
9271 -> 9257;
9271 -> 9259;
9271 -> 9253;
9272 -> 9253;
9273 -> 9247;
9273 -> 9246;
9274 -> 9246;
9275 -> 9273;
9275 -> 9274;
9276 -> 9274;
9277 -> 9275;
9277 -> 9276;
9278 -> 9277;
9278 -> 9274;
9279 -> 9274;
9280 -> 9278;
9280 -> 9245;
9280 -> 9279;
9280 -> 9274;
9281 -> 9274;
9282 -> 9275;
9282 -> 9281;
9283 -> 9282;
9283 -> 9245;
9283 -> 9281;
9284 -> 9283;
9284 -> 9281;
9285 -> 9284;
9285 -> 9274;
9286 -> 9280;
9286 -> 9285;
9286 -> 9274;
9287 -> 9272;
9287 -> 9286;
9288 -> 9245;
9288 -> 9287;
9288 -> 9267;
9288 -> 9270;
9288 -> 9268;
9288 -> 9269;
9288 -> 9271;
9288 -> 0;
9288 -> 9243;
9289 -> 9288;
9289 -> 9237;
9290 -> 9241;
9290 -> 9237;
9291 -> 9237;
9292 -> 9290;
9292 -> 9291;
9293 -> 9289;
9293 -> 9291;
9294 -> 9291;
9295 -> 9292;
9295 -> 9234;
9295 -> 9288;
9295 -> 9294;
9296 -> 9294;
9297 -> 9293;
9297 -> 9295;
9297 -> 9296;
9298 -> 9296;
9299 -> 9297;
9299 -> 9298;
9300 -> 9299;
9300 -> 9295;
9300 -> 0;
9300 -> 9298;
9301 -> 9300;
9301 -> 9296;
9302 -> 9296;
9303 -> 9301;
9303 -> 9302;
9303 -> 9296;
9304 -> 9303;
9304 -> 9296;
9305 -> 9296;
9306 -> 9304;
9306 -> 9305;
9307 -> 9305;
9308 -> 9306;
9308 -> 9307;
9308 -> 9305;
9309 -> 9296;
9310 -> 9303;
9310 -> 9296;
9311 -> 9310;
9311 -> 9294;
9312 -> 9311;
9312 -> 9294;
9313 -> 0;
9313 -> 9312;
9314 -> 9312;
9315 -> 9313;
9315 -> 9314;
9316 -> 9311;
9316 -> 9294;
9317 -> 9292;
9317 -> 9294;
9318 -> 9294;
9319 -> 9316;
9319 -> 9318;
9320 -> 9317;
9320 -> 9318;
9321 -> 9293;
9321 -> 9295;
9321 -> 9318;
9322 -> 9319;
9322 -> 9318;
9323 -> 9318;
9324 -> 9322;
9324 -> 9323;
9325 -> 9321;
9325 -> 9323;
9326 -> 9325;
9326 -> 9295;
9326 -> 9315;
9326 -> 9324;
9326 -> 9323;
9327 -> 9326;
9328 -> 9294;
9329 -> 9315;
9329 -> 9296;
9330 -> 9329;
9330 -> 9305;
9331 -> 9330;
9331 -> 9307;
9331 -> 9305;
9332 -> 0;
9332 -> 9315;
9333 -> 9315;
9334 -> 9332;
9334 -> 9333;
9335 -> 9334;
9336 -> 9293;
9336 -> 9335;
9337 -> 9336;
9337 -> 9272;
9337 -> 9335;
9338 -> 9337;
9339 -> 9334;
9340 -> 0;
9340 -> 9334;
9341 -> 9334;
9342 -> 9340;
9342 -> 9341;
9343 -> 9315;
9343 -> 9294;
9344 -> 9343;
9344 -> 9318;
9345 -> 9293;
9345 -> 9315;
9345 -> 9318;
9346 -> 9344;
9346 -> 9318;
9347 -> 9346;
9347 -> 9323;
9348 -> 9345;
9348 -> 9323;
9349 -> 9348;
9349 -> 9315;
9349 -> 9334;
9349 -> 9342;
9349 -> 9347;
9349 -> 9323;
9350 -> 9349;
9351 -> 9342;
9351 -> 9296;
9352 -> 9351;
9352 -> 9305;
9353 -> 9352;
9353 -> 9307;
9353 -> 9305;
9354 -> 9342;
9355 -> 9237;
9356 -> 9237;
9357 -> 9237;
9358 -> 9238;
9358 -> 9357;
9358 -> 9237;
9359 -> 9237;
9360 -> 9242;
9360 -> 9359;
9361 -> 9359;
9362 -> 9360;
9362 -> 9361;
9363 -> 9361;
9364 -> 9362;
9364 -> 9363;
9365 -> 9364;
9365 -> 9342;
9365 -> 9363;
9366 -> 9364;
9366 -> 9342;
9366 -> 9363;
9367 -> 9366;
9367 -> 9361;
9368 -> 9362;
9368 -> 9342;
9368 -> 9361;
9369 -> 9368;
9369 -> 9359;
9370 -> 9369;
9370 -> 9237;
9371 -> 9356;
9371 -> 9237;
9372 -> 9241;
9372 -> 9237;
9373 -> 9371;
9373 -> 9372;
9373 -> 9370;
9373 -> 9234;
9373 -> 9368;
9373 -> 9237;
9374 -> 9237;
9375 -> 9374;
9376 -> 9374;
9377 -> 9373;
9377 -> 9374;
9378 -> 9374;
9379 -> 9377;
9379 -> 9378;
9380 -> 9378;
9381 -> 9379;
9381 -> 9380;
9381 -> 9378;
9382 -> 9374;
9383 -> 9373;
9383 -> 9374;
9384 -> 9373;
9384 -> 9374;
9385 -> 9373;
9385 -> 9374;
9386 -> 9383;
9386 -> 9374;
9387 -> 9374;
9388 -> 9386;
9388 -> 9387;
9389 -> 9385;
9389 -> 9387;
9390 -> 9389;
9390 -> 9373;
9390 -> 9388;
9390 -> 9387;
9391 -> 9390;
9392 -> 9373;
9392 -> 9374;
9393 -> 9373;
9393 -> 9374;
9394 -> 9374;
9395 -> 9393;
9395 -> 9394;
9396 -> 9394;
9397 -> 9395;
9397 -> 9374;
9398 -> 9374;
9399 -> 9392;
9399 -> 9374;
9400 -> 9374;
9401 -> 9399;
9401 -> 9400;
9402 -> 9393;
9402 -> 9400;
9403 -> 9400;
9404 -> 9402;
9404 -> 9403;
9405 -> 9403;
9406 -> 9400;
9407 -> 9400;
9408 -> 9402;
9408 -> 9407;
9409 -> 9407;
9410 -> 9408;
9410 -> 9373;
9410 -> 9409;
9410 -> 9407;
9411 -> 9408;
9411 -> 9373;
9411 -> 9410;
9412 -> 9410;
9413 -> 9408;
9413 -> 9412;
9414 -> 9413;
9414 -> 9373;
9414 -> 9412;
9415 -> 9412;
9416 -> 9413;
9416 -> 9373;
9416 -> 9415;
9417 -> 9416;
9417 -> 9412;
9418 -> 9412;
9419 -> 9413;
9419 -> 9418;
9420 -> 9418;
9421 -> 9420;
9421 -> 9418;
9422 -> 9418;
9423 -> 9419;
9423 -> 9422;
9424 -> 9423;
9424 -> 9373;
9424 -> 9422;
9425 -> 9424;
9425 -> 9418;
9426 -> 9418;
9427 -> 9425;
9427 -> 9426;
9427 -> 9418;
9428 -> 9421;
9428 -> 9420;
9428 -> 9418;
9429 -> 9428;
9430 -> 9419;
9430 -> 9429;
9431 -> 9429;
9432 -> 9430;
9432 -> 9373;
9432 -> 9429;
9433 -> 9432;
9433 -> 9429;
9434 -> 9433;
9434 -> 9373;
9434 -> 9429;
9435 -> 9433;
9435 -> 9373;
9435 -> 9429;
9436 -> 9435;
9436 -> 9428;
9437 -> 9428;
9438 -> 9436;
9438 -> 9437;
9438 -> 9428;
9439 -> 9421;
9439 -> 9418;
9440 -> 9439;
9440 -> 9412;
9441 -> 9417;
9441 -> 9440;
9441 -> 9373;
9441 -> 9412;
9442 -> 9412;
9443 -> 9413;
9443 -> 9442;
9444 -> 9442;
9445 -> 9442;
9446 -> 9444;
9446 -> 9445;
9447 -> 9444;
9447 -> 9445;
9448 -> 9443;
9448 -> 9445;
9449 -> 9445;
9450 -> 9448;
9450 -> 9449;
9451 -> 9450;
9451 -> 9441;
9451 -> 9449;
9452 -> 9451;
9452 -> 9441;
9452 -> 9449;
9453 -> 9452;
9453 -> 9445;
9454 -> 9445;
9455 -> 9453;
9455 -> 9454;
9455 -> 9445;
9456 -> 9447;
9456 -> 9445;
9457 -> 9456;
9458 -> 9448;
9458 -> 9457;
9459 -> 9458;
9459 -> 9441;
9459 -> 9457;
9460 -> 9457;
9461 -> 9458;
9461 -> 9441;
9461 -> 9457;
9462 -> 9461;
9462 -> 9457;
9463 -> 9462;
9463 -> 9441;
9463 -> 9457;
9464 -> 9462;
9464 -> 9441;
9464 -> 9457;
9465 -> 9464;
9465 -> 9456;
9466 -> 9456;
9467 -> 9465;
9467 -> 9466;
9467 -> 9456;
9468 -> 9447;
9468 -> 9412;
9469 -> 9412;
9470 -> 9413;
9470 -> 9469;
9471 -> 9470;
9471 -> 9441;
9471 -> 9469;
9472 -> 9470;
9472 -> 9441;
9472 -> 9469;
9473 -> 9412;
9474 -> 9413;
9474 -> 9473;
9475 -> 9474;
9475 -> 9441;
9475 -> 9473;
9476 -> 9474;
9476 -> 9441;
9476 -> 9473;
9477 -> 9414;
9477 -> 9441;
9477 -> 9468;
9477 -> 9472;
9477 -> 9476;
9477 -> 9412;
9478 -> 9477;
9478 -> 9410;
9479 -> 9410;
9480 -> 9408;
9480 -> 9478;
9480 -> 9407;
9481 -> 9480;
9481 -> 9400;
9482 -> 9481;
9483 -> 9374;
9484 -> 9392;
9484 -> 9374;
9485 -> 9374;
9486 -> 9484;
9486 -> 9485;
9487 -> 9393;
9487 -> 9485;
9488 -> 9487;
9488 -> 9478;
9488 -> 9485;
9489 -> 9485;
9490 -> 9488;
9490 -> 9489;
9490 -> 9485;
9491 -> 9374;
9492 -> 9392;
9492 -> 9374;
9493 -> 9374;
9494 -> 9492;
9494 -> 9493;
9495 -> 9393;
9495 -> 9493;
9496 -> 9493;
9497 -> 9495;
9497 -> 9496;
9498 -> 9496;
9499 -> 9497;
9499 -> 9478;
9499 -> 9498;
9499 -> 9496;
9500 -> 9493;
9501 -> 9493;
9502 -> 9495;
9502 -> 9501;
9503 -> 0;
9503 -> 9501;
9504 -> 9503;
9504 -> 9501;
9505 -> 9501;
9506 -> 9502;
9506 -> 9478;
9506 -> 9505;
9507 -> 9505;
9508 -> 9506;
9508 -> 9478;
9508 -> 9505;
9509 -> 9508;
9509 -> 9501;
9510 -> 9501;
9511 -> 9509;
9511 -> 9510;
9511 -> 9501;
9512 -> 9504;
9512 -> 9503;
9512 -> 9501;
9513 -> 9512;
9514 -> 9513;
9515 -> 9514;
9516 -> 9515;
9517 -> 9502;
9517 -> 9478;
9517 -> 9516;
9517 -> 9515;
9518 -> 9514;
9519 -> 9502;
9519 -> 9478;
9519 -> 9514;
9520 -> 9519;
9520 -> 9513;
9521 -> 9520;
9521 -> 9478;
9521 -> 9513;
9522 -> 9520;
9522 -> 9478;
9522 -> 9513;
9523 -> 9522;
9523 -> 9512;
9524 -> 9512;
9525 -> 9523;
9525 -> 9524;
9525 -> 9512;
9526 -> 9504;
9526 -> 9501;
9527 -> 9526;
9527 -> 9493;
9528 -> 9493;
9529 -> 9495;
9529 -> 9478;
9529 -> 9528;
9530 -> 9529;
9530 -> 9493;
9531 -> 9493;
9532 -> 9495;
9532 -> 9478;
9532 -> 9531;
9533 -> 9532;
9533 -> 9493;
9534 -> 9493;
9535 -> 9495;
9535 -> 9478;
9535 -> 9534;
9536 -> 9535;
9536 -> 9493;
9537 -> 9493;
9538 -> 9495;
9538 -> 9478;
9538 -> 9537;
9539 -> 9538;
9539 -> 9493;
9540 -> 9493;
9541 -> 9495;
9541 -> 9478;
9541 -> 9540;
9542 -> 9541;
9542 -> 9493;
9543 -> 9493;
9544 -> 9495;
9544 -> 9478;
9544 -> 9543;
9545 -> 9544;
9545 -> 9493;
9546 -> 9374;
9547 -> 9374;
9548 -> 9393;
9548 -> 9547;
9549 -> 9547;
9550 -> 9548;
9550 -> 9478;
9550 -> 9549;
9551 -> 9550;
9551 -> 9547;
9552 -> 9547;
9553 -> 9548;
9553 -> 9478;
9553 -> 9552;
9554 -> 9553;
9554 -> 9547;
9555 -> 9547;
9556 -> 0;
9556 -> 9555;
9557 -> 9556;
9557 -> 9555;
9558 -> 9555;
9559 -> 9548;
9559 -> 9478;
9559 -> 9558;
9560 -> 9558;
9561 -> 9559;
9561 -> 9478;
9561 -> 9558;
9562 -> 9561;
9562 -> 9555;
9563 -> 9555;
9564 -> 9562;
9564 -> 9563;
9564 -> 9555;
9565 -> 9557;
9565 -> 9556;
9565 -> 9555;
9566 -> 9565;
9567 -> 9566;
9568 -> 9567;
9569 -> 9568;
9570 -> 9548;
9570 -> 9478;
9570 -> 9569;
9570 -> 9568;
9571 -> 9567;
9572 -> 9548;
9572 -> 9478;
9572 -> 9567;
9573 -> 9572;
9573 -> 9566;
9574 -> 9573;
9574 -> 9478;
9574 -> 9566;
9575 -> 9573;
9575 -> 9478;
9575 -> 9566;
9576 -> 9575;
9576 -> 9565;
9577 -> 9565;
9578 -> 9576;
9578 -> 9577;
9578 -> 9565;
9579 -> 9557;
9579 -> 9555;
9580 -> 9579;
9580 -> 9547;
9581 -> 9580;
9581 -> 9374;
9582 -> 9374;
9583 -> 9393;
9583 -> 9582;
9584 -> 9583;
9584 -> 9478;
9584 -> 9582;
9585 -> 9584;
9585 -> 9374;
9586 -> 9374;
9587 -> 9585;
9587 -> 9586;
9588 -> 9374;
9589 -> 9393;
9589 -> 9588;
9590 -> 9589;
9590 -> 9478;
9590 -> 9588;
9591 -> 9590;
9591 -> 9374;
9592 -> 9374;
9593 -> 9591;
9593 -> 9592;
9594 -> 9374;
9595 -> 9393;
9595 -> 9594;
9596 -> 9595;
9596 -> 9478;
9596 -> 9594;
9597 -> 9596;
9597 -> 9374;
9598 -> 9374;
9599 -> 9597;
9599 -> 9598;
9600 -> 9593;
9600 -> 9599;
9600 -> 9478;
9600 -> 9374;
9601 -> 9374;
9602 -> 9393;
9602 -> 9601;
9603 -> 9601;
9604 -> 9602;
9604 -> 9478;
9604 -> 9603;
9604 -> 9601;
9605 -> 9602;
9605 -> 9478;
9605 -> 9601;
9606 -> 9605;
9606 -> 9374;
9607 -> 9600;
9607 -> 9606;
9607 -> 9478;
9607 -> 9374;
9608 -> 9393;
9608 -> 9478;
9608 -> 9374;
9609 -> 9392;
9609 -> 9374;
9610 -> 9374;
9611 -> 9608;
9611 -> 9610;
9612 -> 9609;
9612 -> 9610;
9613 -> 9611;
9613 -> 9610;
9614 -> 9612;
9614 -> 9610;
9615 -> 9610;
9616 -> 9613;
9616 -> 9615;
9617 -> 9614;
9617 -> 9615;
9618 -> 9615;
9619 -> 9616;
9619 -> 9618;
9620 -> 9619;
9620 -> 9615;
9621 -> 9620;
9621 -> 9478;
9621 -> 9615;
9622 -> 9621;
9623 -> 9610;
9624 -> 9610;
9625 -> 9611;
9625 -> 9624;
9626 -> 9625;
9626 -> 9610;
9627 -> 9626;
9627 -> 9478;
9627 -> 9610;
9628 -> 0;
9628 -> 9627;
9629 -> 9627;
9630 -> 9628;
9630 -> 9629;
9631 -> 9611;
9631 -> 9629;
9632 -> 9630;
9632 -> 9629;
9633 -> 9629;
9634 -> 9631;
9634 -> 9633;
9635 -> 9634;
9635 -> 9629;
9636 -> 0;
9636 -> 9629;
9637 -> 9629;
9638 -> 9635;
9638 -> 9637;
9639 -> 9636;
9639 -> 9637;
9640 -> 9638;
9640 -> 9639;
9640 -> 9637;
9641 -> 9630;
9641 -> 0;
9641 -> 9629;
9642 -> 9629;
9643 -> 9631;
9643 -> 9478;
9643 -> 9642;
9643 -> 9629;
9644 -> 9643;
9645 -> 9631;
9645 -> 9478;
9645 -> 9644;
9646 -> 0;
9646 -> 9644;
9647 -> 9644;
9648 -> 9630;
9648 -> 9643;
9649 -> 9643;
9650 -> 9643;
9651 -> 9643;
9652 -> 9630;
9652 -> 9643;
9653 -> 9631;
9653 -> 9652;
9653 -> 9645;
9653 -> 9643;
9654 -> 9630;
9654 -> 0;
9654 -> 9653;
9655 -> 9654;
9655 -> 9653;
9656 -> 9649;
9656 -> 9655;
9657 -> 9653;
9658 -> 9657;
9659 -> 9658;
9659 -> 9657;
9660 -> 9657;
9660 -> 9653;
9661 -> 9648;
9661 -> 9653;
9662 -> 9653;
9663 -> 9651;
9663 -> 9653;
9664 -> 9656;
9664 -> 9653;
9665 -> 9640;
9665 -> 9653;
9666 -> 9653;
9667 -> 9661;
9667 -> 9666;
9668 -> 9662;
9668 -> 9666;
9669 -> 9662;
9669 -> 9666;
9670 -> 9663;
9670 -> 9666;
9671 -> 9662;
9671 -> 9666;
9672 -> 9664;
9672 -> 9666;
9673 -> 9665;
9673 -> 9666;
9674 -> 9660;
9674 -> 9666;
9675 -> 9666;
9676 -> 9666;
9677 -> 9676;
9677 -> 9666;
9678 -> 9666;
9679 -> 9667;
9679 -> 9678;
9679 -> 9666;
9680 -> 9667;
9680 -> 9679;
9681 -> 9671;
9681 -> 9679;
9682 -> 9679;
9683 -> 9681;
9683 -> 9679;
9684 -> 9679;
9685 -> 9668;
9685 -> 9679;
9686 -> 9669;
9686 -> 9679;
9687 -> 9670;
9687 -> 9679;
9688 -> 9672;
9688 -> 9679;
9689 -> 9673;
9689 -> 9679;
9690 -> 9679;
9691 -> 9683;
9691 -> 9690;
9692 -> 9684;
9692 -> 9690;
9693 -> 9685;
9693 -> 9690;
9694 -> 9686;
9694 -> 9690;
9695 -> 9687;
9695 -> 9690;
9696 -> 9688;
9696 -> 9690;
9697 -> 9689;
9697 -> 9690;
9698 -> 9674;
9698 -> 9690;
9699 -> 9690;
9700 -> 9690;
9701 -> 9698;
9701 -> 9690;
9702 -> 9691;
9702 -> 9690;
9703 -> 9692;
9703 -> 9690;
9704 -> 9690;
9705 -> 9701;
9705 -> 9704;
9706 -> 9702;
9706 -> 9704;
9707 -> 9703;
9707 -> 9704;
9708 -> 9706;
9708 -> 9704;
9709 -> 9704;
9710 -> 9704;
9711 -> 9708;
9711 -> 9710;
9712 -> 9709;
9712 -> 9710;
9713 -> 9705;
9713 -> 9710;
9714 -> 9711;
9714 -> 9710;
9715 -> 9710;
9716 -> 9712;
9716 -> 9710;
9717 -> 9710;
9718 -> 9714;
9718 -> 9717;
9719 -> 9715;
9719 -> 9717;
9720 -> 9716;
9720 -> 9717;
9721 -> 9713;
9721 -> 9717;
9722 -> 9717;
9723 -> 9718;
9723 -> 9717;
9724 -> 9717;
9725 -> 9723;
9725 -> 9724;
9726 -> 9721;
9726 -> 9724;
9727 -> 9724;
9728 -> 9725;
9728 -> 9681;
9728 -> 9724;
9729 -> 9727;
9729 -> 9724;
9730 -> 9726;
9730 -> 9657;
9730 -> 9728;
9730 -> 9729;
9730 -> 9724;
9731 -> 9724;
9732 -> 9731;
9732 -> 9717;
9733 -> 9717;
9734 -> 9732;
9734 -> 9733;
9734 -> 9717;
9735 -> 9734;
9736 -> 9721;
9736 -> 9735;
9737 -> 9736;
9737 -> 9730;
9737 -> 9735;
9738 -> 9737;
9738 -> 9734;
9739 -> 9738;
9739 -> 9730;
9739 -> 9734;
9740 -> 9734;
9741 -> 9738;
9741 -> 9740;
9741 -> 9730;
9741 -> 9734;
9742 -> 9725;
9742 -> 9734;
9743 -> 9734;
9744 -> 9742;
9744 -> 9743;
9745 -> 9741;
9745 -> 9743;
9746 -> 9743;
9747 -> 9743;
9748 -> 9745;
9748 -> 9747;
9749 -> 9747;
9750 -> 9748;
9750 -> 9741;
9750 -> 9749;
9750 -> 9747;
9751 -> 9750;
9752 -> 9748;
9752 -> 9750;
9753 -> 9750;
9754 -> 9748;
9754 -> 9753;
9755 -> 9753;
9756 -> 9754;
9756 -> 9741;
9756 -> 9755;
9757 -> 9756;
9757 -> 9753;
9758 -> 9757;
9758 -> 9750;
9759 -> 9750;
9760 -> 9758;
9760 -> 9759;
9761 -> 9759;
9762 -> 9760;
9762 -> 9761;
9763 -> 9762;
9763 -> 9759;
9764 -> 9760;
9764 -> 9741;
9764 -> 9759;
9766 -> 9765;
9768 -> 9767;
9769 -> 9751;
9769 -> 9750;
9770 -> 9750;
9771 -> 9750;
9772 -> 9752;
9772 -> 9771;
9773 -> 9752;
9773 -> 9771;
9774 -> 9764;
9774 -> 9771;
9775 -> 9769;
9775 -> 9771;
9776 -> 9770;
9776 -> 9771;
9777 -> 9771;
9778 -> 9776;
9778 -> 9771;
9779 -> 9776;
9779 -> 9771;
9780 -> 9776;
9780 -> 9771;
9781 -> 9776;
9781 -> 9771;
9782 -> 9776;
9782 -> 9771;
9783 -> 9776;
9783 -> 9771;
9786 -> 9785;
9786 -> 9784;
9788 -> 9787;
9788 -> 9784;
9789 -> 9784;
9792 -> 9791;
9792 -> 9790;
9794 -> 9793;
9794 -> 9790;
9795 -> 9790;
9797 -> 0;
9797 -> 9796;
9799 -> 0;
9799 -> 9798;
9800 -> 9799;
9800 -> 9796;
9801 -> 9796;
9803 -> 0;
9803 -> 9802;
9804 -> 0;
9804 -> 9802;
9805 -> 9802;
9806 -> 9795;
9806 -> 9776;
9806 -> 9771;
9807 -> 9771;
9808 -> 9774;
9808 -> 9807;
9808 -> 9771;
9809 -> 9772;
9809 -> 9776;
9809 -> 9771;
9810 -> 9773;
9810 -> 9776;
9810 -> 9771;
9811 -> 9774;
9811 -> 9776;
9811 -> 9771;
9812 -> 9771;
9813 -> 9774;
9813 -> 9812;
9814 -> 9813;
9814 -> 9771;
9815 -> 9814;
9815 -> 9741;
9816 -> 9775;
9816 -> 9815;
9816 -> 9751;
9816 -> 9741;
9816 -> 9814;
9817 -> 9751;
9817 -> 9816;
9817 -> 9750;
9818 -> 9751;
9818 -> 9816;
9818 -> 9750;
9819 -> 9748;
9819 -> 9818;
9819 -> 9750;
9820 -> 9770;
9820 -> 9750;
9821 -> 9750;
9822 -> 9819;
9822 -> 9820;
9822 -> 9821;
9822 -> 9776;
9822 -> 9809;
9822 -> 9810;
9822 -> 9811;
9822 -> 9781;
9822 -> 9782;
9822 -> 9783;
9822 -> 9806;
9822 -> 9818;
9822 -> 9792;
9822 -> 9794;
9822 -> 9790;
9822 -> 9750;
9823 -> 9748;
9823 -> 9822;
9823 -> 9747;
9824 -> 9823;
9824 -> 9743;
9825 -> 9744;
9825 -> 9730;
9825 -> 9743;
9826 -> 9743;
9827 -> 9825;
9827 -> 9826;
9828 -> 9824;
9828 -> 9826;
9829 -> 9828;
9829 -> 9826;
9830 -> 9827;
9830 -> 9826;
9831 -> 9830;
9831 -> 9822;
9831 -> 9826;
9832 -> 9831;
9833 -> 9831;
9834 -> 9831;
9835 -> 9833;
9835 -> 9834;
9836 -> 9829;
9836 -> 9834;
9837 -> 9834;
9838 -> 9837;
9838 -> 9834;
9839 -> 9834;
9840 -> 9836;
9840 -> 9839;
9841 -> 9839;
9842 -> 9840;
9842 -> 9822;
9842 -> 9841;
9842 -> 9839;
9843 -> 9842;
9844 -> 9840;
9844 -> 9822;
9844 -> 9842;
9845 -> 9843;
9845 -> 9842;
9846 -> 9842;
9847 -> 9845;
9847 -> 9846;
9848 -> 9840;
9848 -> 9846;
9849 -> 9846;
9850 -> 9848;
9850 -> 9822;
9850 -> 9849;
9851 -> 9850;
9851 -> 9822;
9851 -> 9849;
9852 -> 9850;
9852 -> 9822;
9852 -> 9851;
9853 -> 9851;
9854 -> 9850;
9854 -> 9853;
9855 -> 9853;
9856 -> 9853;
9857 -> 9853;
9858 -> 9853;
9859 -> 9854;
9859 -> 9822;
9859 -> 9853;
9860 -> 9859;
9861 -> 9859;
9861 -> 9860;
9862 -> 9860;
9863 -> 9861;
9863 -> 9862;
9864 -> 9863;
9864 -> 9822;
9864 -> 9862;
9865 -> 9864;
9865 -> 9860;
9866 -> 9865;
9866 -> 9859;
9867 -> 9853;
9868 -> 9853;
9869 -> 9855;
9869 -> 9868;
9869 -> 9853;
9870 -> 9853;
9871 -> 9856;
9871 -> 9870;
9871 -> 9853;
9872 -> 9867;
9872 -> 9853;
9873 -> 9872;
9873 -> 9851;
9874 -> 9850;
9874 -> 9873;
9874 -> 9849;
9875 -> 9874;
9875 -> 9846;
9876 -> 9846;
9877 -> 9846;
9878 -> 9875;
9878 -> 9877;
9879 -> 9876;
9879 -> 9877;
9880 -> 9878;
9880 -> 9877;
9881 -> 0;
9881 -> 9877;
9882 -> 9880;
9882 -> 9879;
9882 -> 9877;
9883 -> 9846;
9884 -> 9848;
9884 -> 9873;
9884 -> 9883;
9885 -> 9884;
9885 -> 9873;
9885 -> 9883;
9886 -> 9885;
9886 -> 9846;
9887 -> 9846;
9888 -> 9876;
9888 -> 9887;
9889 -> 9888;
9889 -> 9882;
9889 -> 9880;
9889 -> 9887;
9890 -> 0;
9890 -> 9887;
9891 -> 9888;
9891 -> 9882;
9891 -> 9887;
9892 -> 9889;
9892 -> 9887;
9893 -> 9892;
9893 -> 9846;
9894 -> 9848;
9894 -> 9846;
9895 -> 9893;
9895 -> 9846;
9896 -> 9847;
9896 -> 9846;
9897 -> 9846;
9898 -> 9894;
9898 -> 9897;
9899 -> 9895;
9899 -> 9897;
9900 -> 9896;
9900 -> 9897;
9901 -> 9897;
9902 -> 9897;
9903 -> 9897;
9904 -> 9898;
9904 -> 9903;
9905 -> 9903;
9906 -> 9904;
9906 -> 9873;
9906 -> 9905;
9907 -> 9906;
9907 -> 9873;
9907 -> 9905;
9908 -> 9907;
9908 -> 9897;
9909 -> 9897;
9910 -> 9908;
9910 -> 9909;
9911 -> 9897;
9912 -> 9910;
9913 -> 9912;
9913 -> 9910;
9914 -> 9898;
9914 -> 9910;
9915 -> 9910;
9916 -> 9914;
9916 -> 9915;
9917 -> 9913;
9917 -> 9915;
9918 -> 9915;
9919 -> 9916;
9919 -> 9918;
9920 -> 9918;
9921 -> 9919;
9921 -> 9920;
9922 -> 9920;
9923 -> 9921;
9923 -> 9922;
9924 -> 9923;
9924 -> 9873;
9924 -> 9922;
9925 -> 9924;
9925 -> 9920;
9926 -> 9920;
9927 -> 9925;
9928 -> 9925;
9929 -> 9927;
9929 -> 9928;
9929 -> 9925;
9930 -> 9925;
9931 -> 9925;
9931 -> 9930;
9932 -> 9931;
9932 -> 9873;
9932 -> 9930;
9933 -> 9932;
9934 -> 9932;
9935 -> 9933;
9935 -> 9934;
9935 -> 9932;
9936 -> 9932;
9937 -> 9932;
9938 -> 9920;
9939 -> 9938;
9939 -> 9918;
9940 -> 9918;
9941 -> 9939;
9941 -> 9915;
9942 -> 9941;
9943 -> 9917;
9943 -> 9942;
9944 -> 9942;
9945 -> 9943;
9945 -> 9873;
9945 -> 9944;
9945 -> 9942;
9946 -> 9943;
9946 -> 9873;
9946 -> 9945;
9947 -> 9945;
9948 -> 9943;
9948 -> 9945;
9949 -> 9945;
9950 -> 9945;
9951 -> 9948;
9951 -> 9950;
9952 -> 9949;
9952 -> 9950;
9953 -> 0;
9953 -> 9952;
9953 -> 9950;
9954 -> 9951;
9954 -> 9952;
9954 -> 9950;
9955 -> 9946;
9955 -> 9945;
9956 -> 9955;
9956 -> 9949;
9957 -> 9956;
9957 -> 9955;
9957 -> 9949;
9958 -> 9945;
9959 -> 9949;
9959 -> 9958;
9960 -> 9949;
9960 -> 9958;
9961 -> 9957;
9961 -> 9958;
9962 -> 9949;
9962 -> 9958;
9963 -> 9958;
9964 -> 9961;
9964 -> 9957;
9964 -> 9963;
9964 -> 9958;
9965 -> 9958;
9966 -> 9961;
9966 -> 9957;
9966 -> 9965;
9966 -> 9958;
9967 -> 9966;
9967 -> 9958;
9968 -> 9959;
9968 -> 9967;
9969 -> 9960;
9969 -> 9967;
9970 -> 9962;
9970 -> 9967;
9971 -> 9967;
9972 -> 9968;
9972 -> 9971;
9973 -> 9969;
9973 -> 9971;
9974 -> 9967;
9974 -> 9971;
9975 -> 9970;
9975 -> 9971;
9976 -> 9967;
9976 -> 9971;
9977 -> 9971;
9978 -> 9976;
9978 -> 9971;
9979 -> 9976;
9979 -> 9971;
9980 -> 9976;
9980 -> 9971;
9981 -> 9972;
9981 -> 9976;
9981 -> 9971;
9982 -> 9974;
9982 -> 9976;
9982 -> 9971;
9983 -> 9973;
9983 -> 9976;
9983 -> 9971;
9984 -> 9976;
9984 -> 9971;
9985 -> 0;
9985 -> 9971;
9986 -> 9984;
9986 -> 9976;
9986 -> 9971;
9987 -> 9975;
9987 -> 9976;
9987 -> 9971;
9988 -> 9974;
9988 -> 9971;
9989 -> 9988;
9990 -> 9988;
9990 -> 9989;
9991 -> 9990;
9991 -> 9989;
9992 -> 9991;
9992 -> 9988;
9993 -> 9988;
9994 -> 9943;
9994 -> 9957;
9994 -> 9945;
9995 -> 9967;
9995 -> 9945;
9996 -> 9945;
9997 -> 9994;
9997 -> 9995;
9997 -> 9996;
9997 -> 9976;
9997 -> 9983;
9997 -> 9987;
9997 -> 9986;
9997 -> 9981;
9997 -> 9982;
9997 -> 9957;
9997 -> 9953;
9997 -> 9954;
9997 -> 9984;
9997 -> 9945;
9998 -> 9943;
9998 -> 9997;
9998 -> 9942;
9999 -> 9998;
9999 -> 9941;
10000 -> 9899;
10000 -> 9889;
10000 -> 9897;
10001 -> 9846;
10002 -> 9893;
10002 -> 9846;
10003 -> 10002;
10003 -> 9842;
10004 -> 9842;
10005 -> 9844;
10005 -> 10003;
10005 -> 10004;
10005 -> 9889;
10005 -> 9997;
10005 -> 0;
10005 -> 9842;
10006 -> 10005;
10007 -> 9840;
10007 -> 10006;
10008 -> 10006;
10009 -> 10007;
10009 -> 10008;
10010 -> 0;
10010 -> 10008;
10011 -> 10010;
10011 -> 10006;
10012 -> 10006;
10013 -> 10007;
10013 -> 10012;
10014 -> 10013;
10014 -> 10005;
10014 -> 10012;
10015 -> 10014;
10015 -> 10006;
10016 -> 10006;
10017 -> 10015;
10017 -> 10016;
10017 -> 10006;
10018 -> 10017;
10018 -> 10006;
10019 -> 10018;
10020 -> 10019;
10020 -> 10005;
10021 -> 10005;
10022 -> 10020;
10022 -> 10021;
10023 -> 10022;
10023 -> 10005;
10023 -> 10021;
10024 -> 10021;
10025 -> 10022;
10025 -> 10005;
10025 -> 10024;
10025 -> 10021;
10026 -> 10025;
10027 -> 10022;
10027 -> 10005;
10027 -> 10025;
10028 -> 10026;
10028 -> 10025;
10029 -> 10025;
10030 -> 10022;
10030 -> 10028;
10030 -> 10021;
10031 -> 9843;
10031 -> 10005;
10032 -> 10030;
10032 -> 10031;
10032 -> 10028;
10032 -> 9843;
10032 -> 10005;
10033 -> 10005;
10034 -> 9840;
10034 -> 10033;
10035 -> 10033;
10036 -> 10034;
10036 -> 10035;
10037 -> 10036;
10037 -> 10032;
10037 -> 10035;
10038 -> 10037;
10038 -> 10033;
10039 -> 10033;
10040 -> 10038;
10040 -> 10039;
10041 -> 10039;
10042 -> 10040;
10042 -> 10041;
10043 -> 10042;
10043 -> 10039;
10044 -> 10040;
10044 -> 10039;
10045 -> 10043;
10045 -> 10033;
10046 -> 10005;
10047 -> 10005;
10048 -> 9840;
10048 -> 10047;
10049 -> 10047;
10050 -> 10048;
10050 -> 10049;
10051 -> 0;
10051 -> 10049;
10052 -> 10051;
10052 -> 10047;
10053 -> 10047;
10054 -> 10048;
10054 -> 10053;
10055 -> 10054;
10055 -> 10032;
10055 -> 10053;
10056 -> 10047;
10057 -> 10055;
10057 -> 10005;
10058 -> 9840;
10058 -> 10005;
10059 -> 10005;
10060 -> 10058;
10060 -> 10059;
10061 -> 10057;
10061 -> 10059;
10062 -> 10061;
10062 -> 10032;
10062 -> 10059;
10063 -> 10005;
10064 -> 0;
10064 -> 10005;
10065 -> 10005;
10066 -> 10064;
10066 -> 10065;
10067 -> 9840;
10067 -> 10032;
10067 -> 10065;
10068 -> 10067;
10068 -> 10066;
10068 -> 10065;
10069 -> 10068;
10069 -> 10005;
10070 -> 9843;
10070 -> 10032;
10070 -> 10068;
10070 -> 9842;
10071 -> 9840;
10071 -> 10070;
10071 -> 9839;
10072 -> 10071;
10072 -> 9834;
10073 -> 9835;
10073 -> 9834;
10074 -> 9837;
10074 -> 9834;
10075 -> 10072;
10075 -> 10073;
10075 -> 10074;
10075 -> 10070;
10075 -> 9838;
10075 -> 9834;
10076 -> 10075;
10076 -> 9834;
10077 -> 9832;
10077 -> 9831;
10078 -> 9831;
10079 -> 10077;
10079 -> 10078;
10079 -> 9831;
10080 -> 10077;
10080 -> 9826;
10081 -> 9743;
10082 -> 10080;
10082 -> 10081;
10082 -> 9743;
10083 -> 9745;
10083 -> 10082;
10084 -> 9744;
10084 -> 10082;
10085 -> 10082;
10086 -> 10082;
10087 -> 10083;
10087 -> 10086;
10088 -> 10084;
10088 -> 10086;
10089 -> 10085;
10089 -> 10086;
10090 -> 10085;
10090 -> 10086;
10091 -> 10087;
10091 -> 10086;
10092 -> 10088;
10092 -> 10086;
10093 -> 10086;
10094 -> 10089;
10094 -> 10086;
10095 -> 10086;
10096 -> 10091;
10096 -> 10095;
10097 -> 10092;
10097 -> 10095;
10098 -> 10093;
10098 -> 10095;
10099 -> 10094;
10099 -> 10095;
10100 -> 10090;
10100 -> 10095;
10101 -> 10096;
10101 -> 10095;
10102 -> 10097;
10102 -> 10095;
10103 -> 10095;
10104 -> 10097;
10104 -> 9730;
10104 -> 10103;
10104 -> 10095;
10105 -> 10104;
10105 -> 10095;
10106 -> 10099;
10106 -> 10095;
10107 -> 10098;
10107 -> 10095;
10108 -> 10095;
10109 -> 10101;
10109 -> 10108;
10110 -> 10102;
10110 -> 10108;
10111 -> 10105;
10111 -> 10108;
10112 -> 10106;
10112 -> 10108;
10113 -> 10107;
10113 -> 10108;
10114 -> 10100;
10114 -> 10108;
10115 -> 10109;
10115 -> 10108;
10116 -> 10110;
10116 -> 9730;
10116 -> 10108;
10117 -> 10111;
10117 -> 10108;
10118 -> 10110;
10118 -> 9730;
10118 -> 10117;
10119 -> 10111;
10119 -> 10108;
10120 -> 10110;
10120 -> 9730;
10120 -> 10119;
10121 -> 10111;
10121 -> 10108;
10122 -> 10108;
10123 -> 10112;
10123 -> 10108;
10124 -> 10108;
10125 -> 10113;
10125 -> 10108;
10126 -> 10108;
10127 -> 10108;
10128 -> 10115;
10128 -> 10127;
10129 -> 10116;
10129 -> 10127;
10130 -> 10118;
10130 -> 10127;
10131 -> 10120;
10131 -> 10127;
10132 -> 10121;
10132 -> 10127;
10133 -> 10122;
10133 -> 10127;
10134 -> 10123;
10134 -> 10127;
10135 -> 10124;
10135 -> 10127;
10136 -> 10125;
10136 -> 10127;
10137 -> 10126;
10137 -> 10127;
10138 -> 10114;
10138 -> 10127;
10139 -> 10130;
10139 -> 10127;
10140 -> 10131;
10140 -> 10127;
10141 -> 10132;
10141 -> 10127;
10142 -> 10137;
10142 -> 10127;
10143 -> 10127;
10144 -> 10139;
10144 -> 10143;
10145 -> 10140;
10145 -> 10143;
10146 -> 10141;
10146 -> 10143;
10147 -> 10142;
10147 -> 10143;
10148 -> 10138;
10148 -> 10143;
10150 -> 10149;
10151 -> 10149;
10152 -> 10151;
10153 -> 10151;
10155 -> 10154;
10157 -> 10156;
10159 -> 10158;
10161 -> 10160;
10163 -> 10161;
10163 -> 10162;
10164 -> 10163;
10166 -> 10165;
10168 -> 10167;
10170 -> 10169;
10172 -> 10171;
10182 -> 10174;
10182 -> 10173;
10183 -> 10175;
10183 -> 10173;
10184 -> 10176;
10184 -> 10173;
10185 -> 10177;
10185 -> 10173;
10186 -> 10178;
10186 -> 10173;
10187 -> 10179;
10187 -> 10173;
10188 -> 10180;
10188 -> 10173;
10189 -> 10181;
10189 -> 10173;
10190 -> 10173;
10191 -> 10153;
10191 -> 10151;
10192 -> 10191;
10192 -> 10152;
10193 -> 10152;
10195 -> 10194;
10197 -> 8995;
10199 -> 10196;
10199 -> 10197;
10199 -> 10198;
10199 -> 8992;
10199 -> 8993;
10199 -> 8994;
10200 -> 10199;
10202 -> 10201;
10203 -> 10202;
10203 -> 10201;
10204 -> 10202;
10204 -> 10201;
10205 -> 10202;
10205 -> 10201;
10206 -> 10201;
10208 -> 10207;
10209 -> 10193;
10210 -> 10209;
10211 -> 10210;
10212 -> 10211;
10212 -> 10210;
10213 -> 10209;
10213 -> 10193;
10214 -> 10209;
10214 -> 10193;
10215 -> 10193;
10215 -> 10152;
10216 -> 10193;
10216 -> 10152;
10217 -> 10193;
10217 -> 10152;
10218 -> 10192;
10218 -> 10193;
10218 -> 10152;
10219 -> 10151;
10219 -> 10149;
10220 -> 10150;
10220 -> 10151;
10220 -> 10149;
10221 -> 10149;
10222 -> 10147;
10222 -> 10143;
10223 -> 10143;
10224 -> 10222;
10224 -> 10223;
10225 -> 10148;
10225 -> 10223;
10226 -> 10224;
10226 -> 10223;
10227 -> 10223;
10228 -> 10226;
10228 -> 10227;
10229 -> 10225;
10229 -> 10227;
10230 -> 10227;
10231 -> 10229;
10231 -> 10230;
10232 -> 10230;
10233 -> 10231;
10233 -> 10230;
10234 -> 10231;
10234 -> 10230;
10235 -> 10229;
10235 -> 10227;
10236 -> 10229;
10236 -> 10227;
10237 -> 10229;
10237 -> 10227;
10238 -> 10228;
10238 -> 10229;
10238 -> 10227;
10239 -> 10148;
10239 -> 10143;
10240 -> 10148;
10240 -> 10143;
10241 -> 10148;
10241 -> 10143;
10242 -> 10143;
10243 -> 10144;
10243 -> 10242;
10243 -> 10143;
10244 -> 10144;
10244 -> 10148;
10244 -> 10143;
10245 -> 10145;
10245 -> 10148;
10245 -> 10143;
10246 -> 10143;
10247 -> 10145;
10247 -> 10246;
10247 -> 10143;
10248 -> 10146;
10248 -> 10247;
10248 -> 10143;
10249 -> 10248;
10249 -> 10148;
10249 -> 10143;
10250 -> 10138;
10250 -> 10127;
10251 -> 10138;
10251 -> 10127;
10252 -> 10138;
10252 -> 10127;
10253 -> 10138;
10253 -> 10127;
10254 -> 10138;
10254 -> 10127;
10255 -> 10138;
10255 -> 10127;
10256 -> 10127;
10257 -> 10128;
10257 -> 10256;
10257 -> 10127;
10258 -> 10127;
10259 -> 10129;
10259 -> 10258;
10259 -> 10127;
10260 -> 10127;
10261 -> 10136;
10261 -> 10260;
10261 -> 10127;
10262 -> 10129;
10262 -> 10138;
10262 -> 10127;
10263 -> 10128;
10263 -> 10138;
10263 -> 10127;
10264 -> 10133;
10264 -> 10138;
10264 -> 10127;
10265 -> 10134;
10265 -> 10138;
10265 -> 10127;
10266 -> 10135;
10266 -> 10138;
10266 -> 10127;
10267 -> 10136;
10267 -> 10138;
10267 -> 10127;
10268 -> 9743;
10269 -> 10085;
10269 -> 10268;
10269 -> 9743;
10270 -> 10085;
10270 -> 9743;
10271 -> 10270;
10271 -> 9734;
10272 -> 10271;
10273 -> 10272;
10273 -> 9739;
10273 -> 10271;
10274 -> 9738;
10274 -> 10272;
10274 -> 10075;
10274 -> 10273;
10275 -> 10110;
10275 -> 10273;
10276 -> 10273;
10277 -> 10275;
10277 -> 10276;
10278 -> 10274;
10278 -> 10276;
10279 -> 10276;
10280 -> 10277;
10280 -> 10274;
10280 -> 10276;
10281 -> 10280;
10282 -> 10278;
10282 -> 10280;
10283 -> 10280;
10284 -> 10282;
10284 -> 10283;
10285 -> 10283;
10286 -> 10284;
10286 -> 10274;
10286 -> 10285;
10286 -> 10283;
10287 -> 10286;
10288 -> 10286;
10289 -> 10288;
10289 -> 10286;
10290 -> 0;
10290 -> 10286;
10291 -> 10289;
10291 -> 10286;
10292 -> 10286;
10293 -> 10291;
10293 -> 10292;
10294 -> 10284;
10294 -> 10292;
10295 -> 10292;
10296 -> 10293;
10296 -> 10295;
10296 -> 10292;
10297 -> 10292;
10298 -> 10292;
10299 -> 10292;
10300 -> 10294;
10300 -> 10299;
10301 -> 10299;
10302 -> 10301;
10302 -> 10292;
10303 -> 10302;
10303 -> 10292;
10304 -> 10302;
10304 -> 10292;
10305 -> 10304;
10306 -> 10293;
10306 -> 10292;
10307 -> 0;
10307 -> 10292;
10308 -> 10297;
10308 -> 10292;
10309 -> 10298;
10309 -> 10292;
10310 -> 10303;
10310 -> 10305;
10310 -> 10306;
10310 -> 10307;
10310 -> 10308;
10310 -> 10309;
10310 -> 10289;
10310 -> 10292;
10311 -> 10310;
10311 -> 10292;
10312 -> 10292;
10313 -> 10311;
10313 -> 10312;
10314 -> 10294;
10314 -> 10312;
10315 -> 10312;
10316 -> 10314;
10316 -> 10310;
10316 -> 10315;
10316 -> 10312;
10317 -> 0;
10317 -> 10316;
10318 -> 10313;
10318 -> 10316;
10319 -> 10318;
10319 -> 10310;
10320 -> 10314;
10320 -> 10318;
10321 -> 10318;
10322 -> 10318;
10323 -> 10319;
10323 -> 10322;
10324 -> 10320;
10324 -> 10322;
10325 -> 10319;
10325 -> 10322;
10326 -> 10321;
10326 -> 10322;
10327 -> 10322;
10328 -> 10326;
10328 -> 10322;
10329 -> 10326;
10329 -> 10322;
10330 -> 10326;
10330 -> 10322;
10331 -> 10322;
10332 -> 10323;
10332 -> 10331;
10332 -> 10322;
10333 -> 10322;
10334 -> 10324;
10334 -> 10333;
10334 -> 10322;
10335 -> 10322;
10336 -> 10325;
10336 -> 10335;
10336 -> 10322;
10337 -> 10324;
10337 -> 10326;
10337 -> 10322;
10338 -> 10323;
10338 -> 10326;
10338 -> 10322;
10339 -> 10325;
10339 -> 10326;
10339 -> 10322;
10340 -> 10318;
10341 -> 10321;
10341 -> 10340;
10342 -> 10341;
10342 -> 10338;
10342 -> 10340;
10343 -> 10342;
10343 -> 10318;
10344 -> 10321;
10344 -> 10318;
10345 -> 10317;
10345 -> 10343;
10345 -> 10344;
10345 -> 10318;
10346 -> 10314;
10346 -> 10310;
10346 -> 10316;
10347 -> 10317;
10347 -> 10316;
10348 -> 10316;
10349 -> 10346;
10349 -> 10347;
10349 -> 10348;
10349 -> 10317;
10349 -> 10310;
10349 -> 10345;
10349 -> 10326;
10349 -> 10337;
10349 -> 10338;
10349 -> 10339;
10349 -> 10316;
10350 -> 10292;
10351 -> 10310;
10351 -> 10292;
10352 -> 10292;
10353 -> 10351;
10353 -> 10352;
10354 -> 10294;
10354 -> 10352;
10355 -> 10352;
10356 -> 10354;
10356 -> 10349;
10356 -> 10355;
10356 -> 10352;
10357 -> 10356;
10358 -> 10354;
10358 -> 10357;
10359 -> 10358;
10359 -> 10349;
10359 -> 10357;
10360 -> 10359;
10360 -> 10356;
10361 -> 10356;
10362 -> 10356;
10363 -> 10360;
10363 -> 10362;
10364 -> 10363;
10364 -> 10356;
10365 -> 10356;
10366 -> 10353;
10366 -> 10356;
10367 -> 10366;
10367 -> 10364;
10367 -> 10356;
10368 -> 10367;
10369 -> 10364;
10369 -> 10368;
10370 -> 10360;
10370 -> 10369;
10371 -> 10354;
10371 -> 10369;
10372 -> 10368;
10372 -> 10369;
10373 -> 0;
10374 -> 10373;
10375 -> 10374;
10377 -> 10376;
10378 -> 10377;
10378 -> 10376;
10379 -> 0;
10379 -> 10377;
10379 -> 10376;
10380 -> 0;
10380 -> 10377;
10380 -> 10376;
10381 -> 10377;
10381 -> 10376;
10382 -> 10377;
10382 -> 10376;
10383 -> 10377;
10383 -> 10376;
10384 -> 10377;
10384 -> 10376;
10385 -> 10221;
10385 -> 10377;
10385 -> 10376;
10386 -> 0;
10386 -> 10377;
10386 -> 10376;
10387 -> 10376;
10388 -> 10367;
10388 -> 10364;
10388 -> 10369;
10389 -> 10369;
10390 -> 10370;
10390 -> 10389;
10391 -> 10371;
10391 -> 10389;
10392 -> 10372;
10392 -> 10389;
10393 -> 10388;
10393 -> 10389;
10394 -> 10389;
10395 -> 10394;
10395 -> 10389;
10396 -> 10389;
10397 -> 10389;
10398 -> 10390;
10398 -> 10389;
10399 -> 10392;
10399 -> 10389;
10400 -> 10394;
10400 -> 10389;
10401 -> 10396;
10401 -> 10389;
10402 -> 10397;
10402 -> 10389;
10403 -> 10389;
10404 -> 10398;
10404 -> 10403;
10405 -> 10399;
10405 -> 10403;
10406 -> 10400;
10406 -> 10403;
10407 -> 10401;
10407 -> 10403;
10408 -> 10402;
10408 -> 10403;
10409 -> 10403;
10410 -> 10404;
10410 -> 10409;
10411 -> 10410;
10411 -> 10403;
10412 -> 10405;
10412 -> 10403;
10413 -> 10411;
10413 -> 10412;
10413 -> 10364;
10413 -> 10403;
10414 -> 10413;
10414 -> 10403;
10415 -> 10403;
10416 -> 10389;
10417 -> 10389;
10418 -> 10389;
10419 -> 10389;
10420 -> 10414;
10420 -> 10419;
10420 -> 10389;
10421 -> 10390;
10421 -> 10420;
10422 -> 10391;
10422 -> 10420;
10423 -> 10392;
10423 -> 10420;
10424 -> 10393;
10424 -> 10420;
10425 -> 10417;
10425 -> 10420;
10426 -> 10420;
10427 -> 10420;
10428 -> 10421;
10428 -> 10427;
10429 -> 10422;
10429 -> 10427;
10430 -> 10423;
10430 -> 10427;
10431 -> 10424;
10431 -> 10427;
10432 -> 10425;
10432 -> 10427;
10433 -> 10426;
10433 -> 10427;
10434 -> 10428;
10434 -> 10427;
10435 -> 10429;
10435 -> 10427;
10436 -> 10430;
10436 -> 10427;
10437 -> 10431;
10437 -> 10427;
10438 -> 10427;
10439 -> 10432;
10439 -> 10427;
10440 -> 10427;
10441 -> 10434;
10441 -> 10440;
10442 -> 10435;
10442 -> 10440;
10443 -> 10436;
10443 -> 10440;
10444 -> 10437;
10444 -> 10440;
10445 -> 10438;
10445 -> 10440;
10446 -> 10439;
10446 -> 10440;
10447 -> 10433;
10447 -> 10440;
10448 -> 10440;
10449 -> 10447;
10449 -> 10448;
10450 -> 10448;
10451 -> 10448;
10452 -> 10449;
10452 -> 10451;
10453 -> 10451;
10454 -> 10452;
10454 -> 10451;
10455 -> 10452;
10455 -> 10451;
10456 -> 10449;
10456 -> 10448;
10457 -> 10449;
10457 -> 10448;
10458 -> 10449;
10458 -> 10448;
10459 -> 10450;
10459 -> 10449;
10459 -> 10448;
10460 -> 10447;
10460 -> 10440;
10461 -> 10447;
10461 -> 10440;
10462 -> 10447;
10462 -> 10440;
10463 -> 10447;
10463 -> 10440;
10464 -> 10447;
10464 -> 10440;
10465 -> 10447;
10465 -> 10440;
10466 -> 10447;
10466 -> 10440;
10467 -> 10447;
10467 -> 10440;
10468 -> 10447;
10468 -> 10440;
10469 -> 10221;
10469 -> 10447;
10469 -> 10440;
10470 -> 10440;
10471 -> 10470;
10471 -> 10447;
10471 -> 10440;
10472 -> 10221;
10472 -> 10447;
10472 -> 10440;
10473 -> 10440;
10474 -> 10473;
10474 -> 10447;
10474 -> 10440;
10475 -> 10447;
10475 -> 10440;
10476 -> 8170;
10476 -> 10447;
10476 -> 10440;
10477 -> 10447;
10477 -> 10440;
10478 -> 10447;
10478 -> 10440;
10479 -> 10443;
10479 -> 10364;
10479 -> 10440;
10480 -> 10440;
10481 -> 10442;
10481 -> 10480;
10481 -> 10440;
10482 -> 10440;
10483 -> 10445;
10483 -> 10482;
10483 -> 10440;
10484 -> 10440;
10485 -> 10440;
10486 -> 10440;
10487 -> 10441;
10487 -> 10486;
10488 -> 10487;
10488 -> 10440;
10489 -> 10443;
10489 -> 10440;
10490 -> 10488;
10490 -> 10489;
10490 -> 10413;
10490 -> 10364;
10490 -> 10440;
10491 -> 10443;
10491 -> 10447;
10491 -> 10440;
10492 -> 10442;
10492 -> 10447;
10492 -> 10440;
10493 -> 10440;
10494 -> 10441;
10494 -> 10493;
10495 -> 10494;
10495 -> 10490;
10495 -> 10493;
10496 -> 10495;
10496 -> 10440;
10497 -> 10443;
10497 -> 10440;
10498 -> 10496;
10498 -> 10447;
10498 -> 10440;
10499 -> 10440;
10500 -> 10445;
10500 -> 10499;
10500 -> 10440;
10501 -> 10490;
10501 -> 10447;
10501 -> 10500;
10502 -> 10500;
10503 -> 10440;
10504 -> 10444;
10504 -> 10503;
10504 -> 10440;
10505 -> 10440;
10506 -> 10441;
10506 -> 10505;
10507 -> 10506;
10507 -> 10496;
10507 -> 10505;
10508 -> 10507;
10508 -> 10440;
10509 -> 10440;
10510 -> 10508;
10510 -> 10509;
10511 -> 10509;
10512 -> 10510;
10512 -> 10511;
10513 -> 10512;
10513 -> 10509;
10514 -> 10510;
10514 -> 10509;
10515 -> 10504;
10515 -> 10513;
10515 -> 10440;
10516 -> 0;
10516 -> 10447;
10516 -> 10515;
10517 -> 10485;
10517 -> 10440;
10518 -> 10389;
10519 -> 10415;
10519 -> 10518;
10519 -> 10389;
10520 -> 10426;
10520 -> 10389;
10521 -> 10361;
10521 -> 10520;
10521 -> 10452;
10521 -> 10454;
10521 -> 10455;
10521 -> 10456;
10521 -> 10457;
10521 -> 10459;
10521 -> 10492;
10521 -> 10501;
10521 -> 10498;
10521 -> 10516;
10521 -> 10464;
10521 -> 10465;
10521 -> 10466;
10521 -> 10467;
10521 -> 10468;
10521 -> 10469;
10521 -> 10471;
10521 -> 10472;
10521 -> 10474;
10521 -> 10475;
10521 -> 10476;
10521 -> 10477;
10521 -> 10478;
10521 -> 10491;
10521 -> 10212;
10521 -> 10213;
10521 -> 10214;
10521 -> 10215;
10521 -> 10216;
10521 -> 10218;
10521 -> 10220;
10521 -> 10470;
10521 -> 10473;
10521 -> 10496;
10521 -> 10364;
10521 -> 10369;
10522 -> 10356;
10523 -> 0;
10523 -> 10356;
10524 -> 10522;
10524 -> 10523;
10524 -> 10361;
10524 -> 10521;
10524 -> 10356;
10525 -> 10524;
10525 -> 10522;
10526 -> 10525;
10526 -> 10524;
10526 -> 10522;
10527 -> 10361;
10527 -> 10526;
10527 -> 10356;
10528 -> 10356;
10529 -> 10365;
10529 -> 10528;
10529 -> 10356;
10530 -> 10354;
10530 -> 10527;
10530 -> 10356;
10531 -> 10526;
10531 -> 10356;
10532 -> 10356;
10533 -> 10356;
10534 -> 10530;
10534 -> 10533;
10534 -> 10356;
10535 -> 10526;
10535 -> 10534;
10536 -> 10534;
10537 -> 10535;
10537 -> 10536;
10538 -> 10360;
10538 -> 10536;
10539 -> 10536;
10540 -> 10538;
10540 -> 10530;
10540 -> 10539;
10540 -> 10536;
10541 -> 10537;
10541 -> 10530;
10541 -> 10536;
10542 -> 10541;
10543 -> 10542;
10544 -> 10542;
10545 -> 10542;
10545 -> 10544;
10546 -> 10545;
10546 -> 10530;
10546 -> 10544;
10547 -> 10546;
10547 -> 10542;
10548 -> 10542;
10549 -> 10538;
10549 -> 10530;
10549 -> 10547;
10549 -> 10548;
10549 -> 10542;
10550 -> 10549;
10550 -> 10542;
10551 -> 10540;
10551 -> 10542;
10552 -> 10534;
10553 -> 10292;
10554 -> 10286;
10555 -> 10280;
10556 -> 10280;
10557 -> 10280;
10558 -> 10557;
10558 -> 10280;
10559 -> 10281;
10559 -> 10280;
10560 -> 10556;
10560 -> 10280;
10561 -> 10282;
10561 -> 10549;
10561 -> 10559;
10561 -> 10560;
10561 -> 10280;
10562 -> 10281;
10562 -> 10561;
10563 -> 10557;
10563 -> 10561;
10564 -> 10282;
10564 -> 10561;
10564 -> 10562;
10564 -> 10563;
10564 -> 10558;
10565 -> 10076;
10565 -> 10280;
10566 -> 10280;
10567 -> 10280;
10568 -> 10280;
10569 -> 10567;
10569 -> 10280;
10570 -> 10280;
10571 -> 10568;
10571 -> 10280;
10572 -> 10569;
10572 -> 10280;
10573 -> 10570;
10573 -> 10280;
10574 -> 10571;
10574 -> 10280;
10575 -> 10572;
10575 -> 10280;
10576 -> 10280;
10577 -> 10280;
10577 -> 9730;
10577 -> 10576;
10578 -> 10577;
10578 -> 10280;
10579 -> 10574;
10579 -> 10280;
10580 -> 10573;
10580 -> 10280;
10581 -> 10575;
10581 -> 10280;
10582 -> 10578;
10582 -> 10280;
10583 -> 10579;
10583 -> 10280;
10584 -> 10580;
10584 -> 10280;
10585 -> 10280;
10586 -> 10581;
10586 -> 10280;
10587 -> 10280;
10587 -> 9730;
10588 -> 10582;
10588 -> 10280;
10589 -> 10280;
10589 -> 9730;
10589 -> 10118;
10589 -> 10588;
10590 -> 10582;
10590 -> 10280;
10591 -> 10280;
10591 -> 9730;
10591 -> 10120;
10591 -> 10590;
10592 -> 10582;
10592 -> 10280;
10593 -> 10280;
10594 -> 10583;
10594 -> 10280;
10595 -> 10280;
10596 -> 10584;
10596 -> 10280;
10597 -> 10280;
10598 -> 10586;
10598 -> 10585;
10599 -> 10587;
10599 -> 10585;
10600 -> 10589;
10600 -> 10585;
10601 -> 10591;
10601 -> 10585;
10602 -> 10592;
10602 -> 10585;
10603 -> 10593;
10603 -> 10585;
10604 -> 10594;
10604 -> 10585;
10605 -> 10595;
10605 -> 10585;
10606 -> 10596;
10606 -> 10585;
10607 -> 10597;
10607 -> 10585;
10608 -> 10585;
10609 -> 10600;
10609 -> 10585;
10610 -> 10601;
10610 -> 10585;
10611 -> 10602;
10611 -> 10585;
10612 -> 10607;
10612 -> 10585;
10613 -> 10609;
10613 -> 10608;
10614 -> 10610;
10614 -> 10608;
10615 -> 10611;
10615 -> 10608;
10616 -> 10612;
10616 -> 10608;
10617 -> 10608;
10618 -> 10616;
10618 -> 10608;
10619 -> 10618;
10619 -> 10617;
10620 -> 10617;
10621 -> 10619;
10621 -> 10617;
10622 -> 10621;
10622 -> 10620;
10623 -> 10620;
10624 -> 10623;
10625 -> 10624;
10625 -> 10623;
10626 -> 10624;
10626 -> 10623;
10627 -> 10623;
10627 -> 10620;
10628 -> 10623;
10628 -> 10620;
10629 -> 10623;
10629 -> 10620;
10630 -> 10622;
10630 -> 10623;
10630 -> 10620;
10631 -> 10617;
10631 -> 10608;
10632 -> 10617;
10632 -> 10608;
10633 -> 10617;
10633 -> 10608;
10634 -> 10608;
10635 -> 10613;
10635 -> 10634;
10635 -> 10608;
10636 -> 10613;
10636 -> 10617;
10636 -> 10608;
10637 -> 10614;
10637 -> 10617;
10637 -> 10608;
10638 -> 10608;
10639 -> 10614;
10639 -> 10638;
10639 -> 10608;
10640 -> 10615;
10640 -> 10639;
10640 -> 10608;
10641 -> 10640;
10641 -> 10617;
10641 -> 10608;
10642 -> 10608;
10642 -> 10585;
10643 -> 10608;
10643 -> 10585;
10644 -> 10608;
10644 -> 10585;
10645 -> 10608;
10645 -> 10585;
10646 -> 10608;
10646 -> 10585;
10647 -> 10608;
10647 -> 10585;
10648 -> 10585;
10649 -> 10598;
10649 -> 10648;
10649 -> 10585;
10650 -> 10585;
10651 -> 10599;
10651 -> 10650;
10651 -> 10585;
10652 -> 10585;
10653 -> 10606;
10653 -> 10652;
10653 -> 10585;
10654 -> 10599;
10654 -> 10608;
10654 -> 10585;
10655 -> 10598;
10655 -> 10608;
10655 -> 10585;
10656 -> 10603;
10656 -> 10608;
10656 -> 10585;
10657 -> 10604;
10657 -> 10608;
10657 -> 10585;
10658 -> 10605;
10658 -> 10608;
10658 -> 10585;
10659 -> 10606;
10659 -> 10608;
10659 -> 10585;
10660 -> 10276;
10661 -> 10280;
10661 -> 10660;
10661 -> 10276;
10662 -> 10280;
10662 -> 10273;
10663 -> 10273;
10663 -> 9739;
10663 -> 9734;
10664 -> 10663;
10664 -> 9734;
10665 -> 10663;
10665 -> 9720;
10665 -> 9734;
10666 -> 9734;
10667 -> 10270;
10667 -> 10666;
10667 -> 9734;
10668 -> 9720;
10668 -> 10663;
10668 -> 9734;
10669 -> 10270;
10669 -> 9734;
10670 -> 10669;
10670 -> 9704;
10671 -> 9704;
10672 -> 10670;
10672 -> 10671;
10673 -> 10671;
10674 -> 10672;
10674 -> 10673;
10675 -> 0;
10675 -> 10673;
10676 -> 10675;
10676 -> 10671;
10677 -> 10676;
10677 -> 10672;
10677 -> 10671;
10678 -> 10677;
10679 -> 10678;
10679 -> 9690;
10680 -> 9690;
10681 -> 10679;
10681 -> 10680;
10682 -> 9698;
10682 -> 10680;
10683 -> 10680;
10684 -> 10681;
10684 -> 10683;
10684 -> 10680;
10685 -> 10684;
10686 -> 9694;
10686 -> 10685;
10686 -> 9690;
10687 -> 10686;
10688 -> 9690;
10689 -> 10687;
10689 -> 10688;
10689 -> 9690;
10690 -> 10689;
10690 -> 9693;
10690 -> 9690;
10691 -> 9698;
10691 -> 9690;
10692 -> 9690;
10693 -> 9690;
10694 -> 9690;
10695 -> 9692;
10695 -> 10694;
10695 -> 9690;
10696 -> 10695;
10697 -> 9698;
10697 -> 10696;
10698 -> 10697;
10698 -> 10564;
10698 -> 10696;
10699 -> 10698;
10699 -> 10695;
10700 -> 10693;
10700 -> 10695;
10701 -> 10695;
10702 -> 10700;
10702 -> 10701;
10703 -> 10699;
10703 -> 10701;
10704 -> 10701;
10705 -> 10703;
10705 -> 10704;
10706 -> 10705;
10706 -> 10701;
10707 -> 10701;
10708 -> 10707;
10708 -> 10706;
10708 -> 10564;
10708 -> 10701;
10709 -> 10695;
10710 -> 10693;
10710 -> 9690;
10711 -> 10693;
10711 -> 9690;
10712 -> 10687;
10712 -> 9690;
10713 -> 9666;
10714 -> 10712;
10714 -> 10713;
10714 -> 9666;
10715 -> 10714;
10715 -> 9666;
10716 -> 10715;
10716 -> 9643;
10717 -> 9648;
10717 -> 10716;
10718 -> 10716;
10719 -> 9630;
10719 -> 10716;
10720 -> 10719;
10721 -> 10720;
10722 -> 10721;
10722 -> 10564;
10723 -> 10721;
10723 -> 10564;
10724 -> 10723;
10724 -> 10720;
10725 -> 10720;
10725 -> 10564;
10726 -> 10725;
10726 -> 10719;
10727 -> 10719;
10728 -> 10726;
10728 -> 10727;
10729 -> 10719;
10730 -> 10717;
10730 -> 10719;
10731 -> 9630;
10731 -> 10719;
10732 -> 10719;
10733 -> 10728;
10733 -> 10732;
10734 -> 10730;
10734 -> 10732;
10735 -> 10731;
10735 -> 10732;
10736 -> 10729;
10736 -> 10732;
10737 -> 10729;
10737 -> 10732;
10738 -> 10733;
10738 -> 10732;
10739 -> 10734;
10739 -> 10732;
10740 -> 10735;
10740 -> 10732;
10741 -> 10736;
10741 -> 10732;
10742 -> 10732;
10743 -> 10738;
10743 -> 10742;
10744 -> 10739;
10744 -> 10742;
10745 -> 10740;
10745 -> 10742;
10746 -> 10741;
10746 -> 10742;
10747 -> 10737;
10747 -> 10742;
10748 -> 10743;
10748 -> 10742;
10749 -> 10744;
10749 -> 10742;
10750 -> 10742;
10751 -> 10744;
10751 -> 10717;
10751 -> 10750;
10751 -> 10742;
10752 -> 10751;
10752 -> 10742;
10753 -> 10746;
10753 -> 10742;
10754 -> 10745;
10754 -> 10742;
10755 -> 10742;
10756 -> 10748;
10756 -> 10755;
10757 -> 10749;
10757 -> 10755;
10758 -> 10752;
10758 -> 10755;
10759 -> 10753;
10759 -> 10755;
10760 -> 10754;
10760 -> 10755;
10761 -> 10747;
10761 -> 10755;
10762 -> 10756;
10762 -> 10755;
10763 -> 10757;
10763 -> 10717;
10763 -> 10755;
10764 -> 10758;
10764 -> 10755;
10765 -> 10757;
10765 -> 10717;
10765 -> 10764;
10766 -> 10758;
10766 -> 10755;
10767 -> 10757;
10767 -> 10717;
10767 -> 10766;
10768 -> 10758;
10768 -> 10755;
10769 -> 10755;
10770 -> 10759;
10770 -> 10755;
10771 -> 10755;
10772 -> 10760;
10772 -> 10755;
10773 -> 10755;
10774 -> 10755;
10775 -> 10762;
10775 -> 10774;
10776 -> 10763;
10776 -> 10774;
10777 -> 10765;
10777 -> 10774;
10778 -> 10767;
10778 -> 10774;
10779 -> 10768;
10779 -> 10774;
10780 -> 10769;
10780 -> 10774;
10781 -> 10770;
10781 -> 10774;
10782 -> 10771;
10782 -> 10774;
10783 -> 10772;
10783 -> 10774;
10784 -> 10773;
10784 -> 10774;
10785 -> 10761;
10785 -> 10774;
10786 -> 10777;
10786 -> 10774;
10787 -> 10778;
10787 -> 10774;
10788 -> 10779;
10788 -> 10774;
10789 -> 10784;
10789 -> 10774;
10790 -> 10774;
10791 -> 10786;
10791 -> 10790;
10792 -> 10787;
10792 -> 10790;
10793 -> 10788;
10793 -> 10790;
10794 -> 10789;
10794 -> 10790;
10795 -> 10785;
10795 -> 10790;
10796 -> 10794;
10796 -> 10790;
10797 -> 10790;
10798 -> 10796;
10798 -> 10797;
10799 -> 10795;
10799 -> 10797;
10800 -> 10798;
10800 -> 10797;
10801 -> 10797;
10802 -> 10800;
10802 -> 10801;
10803 -> 10799;
10803 -> 10801;
10804 -> 10801;
10805 -> 10803;
10805 -> 10804;
10806 -> 10804;
10807 -> 10805;
10807 -> 10804;
10808 -> 10805;
10808 -> 10804;
10809 -> 10803;
10809 -> 10801;
10810 -> 10803;
10810 -> 10801;
10811 -> 10803;
10811 -> 10801;
10812 -> 10802;
10812 -> 10803;
10812 -> 10801;
10813 -> 10795;
10813 -> 10790;
10814 -> 10795;
10814 -> 10790;
10815 -> 10795;
10815 -> 10790;
10816 -> 10790;
10817 -> 10791;
10817 -> 10816;
10817 -> 10790;
10818 -> 10791;
10818 -> 10795;
10818 -> 10790;
10819 -> 10792;
10819 -> 10795;
10819 -> 10790;
10820 -> 10790;
10821 -> 10792;
10821 -> 10820;
10821 -> 10790;
10822 -> 10793;
10822 -> 10821;
10822 -> 10790;
10823 -> 10822;
10823 -> 10795;
10823 -> 10790;
10824 -> 10785;
10824 -> 10774;
10825 -> 10785;
10825 -> 10774;
10826 -> 10785;
10826 -> 10774;
10827 -> 10785;
10827 -> 10774;
10828 -> 10785;
10828 -> 10774;
10829 -> 10785;
10829 -> 10774;
10830 -> 10774;
10831 -> 10775;
10831 -> 10830;
10831 -> 10774;
10832 -> 10774;
10833 -> 10776;
10833 -> 10832;
10833 -> 10774;
10834 -> 10774;
10835 -> 10783;
10835 -> 10834;
10835 -> 10774;
10836 -> 10783;
10836 -> 0;
10836 -> 10774;
10837 -> 10778;
10837 -> 10834;
10837 -> 10774;
10838 -> 10835;
10838 -> 10837;
10838 -> 10774;
10839 -> 10776;
10839 -> 10785;
10839 -> 10774;
10840 -> 10775;
10840 -> 10785;
10840 -> 10774;
10841 -> 10780;
10841 -> 10785;
10841 -> 10774;
10842 -> 10781;
10842 -> 10785;
10842 -> 10774;
10843 -> 10782;
10843 -> 10785;
10843 -> 10774;
10844 -> 10783;
10844 -> 10785;
10844 -> 10774;
10845 -> 9631;
10845 -> 10728;
10845 -> 9641;
10845 -> 9643;
10846 -> 10729;
10846 -> 9643;
10847 -> 9643;
10848 -> 10845;
10848 -> 10846;
10848 -> 10847;
10848 -> 10805;
10848 -> 10807;
10848 -> 10808;
10848 -> 10809;
10848 -> 10810;
10848 -> 10812;
10848 -> 10818;
10848 -> 10819;
10848 -> 10823;
10848 -> 10839;
10848 -> 10840;
10848 -> 10841;
10848 -> 10842;
10848 -> 10843;
10848 -> 10844;
10848 -> 10728;
10848 -> 9643;
10849 -> 10848;
10850 -> 9631;
10850 -> 10849;
10851 -> 10850;
10851 -> 10848;
10851 -> 10849;
10852 -> 10851;
10852 -> 10848;
10853 -> 9656;
10853 -> 10848;
10854 -> 10852;
10854 -> 10853;
10854 -> 10848;
10854 -> 9649;
10855 -> 9656;
10855 -> 10854;
10855 -> 9643;
10856 -> 9631;
10856 -> 10855;
10856 -> 9641;
10856 -> 9629;
10857 -> 9627;
10858 -> 10856;
10858 -> 10857;
10858 -> 9627;
10859 -> 10856;
10859 -> 9627;
10860 -> 0;
10860 -> 9627;
10861 -> 9627;
10862 -> 10860;
10862 -> 10861;
10863 -> 9611;
10863 -> 10861;
10864 -> 10862;
10864 -> 10861;
10865 -> 10861;
10866 -> 10863;
10866 -> 10865;
10867 -> 10866;
10867 -> 10855;
10867 -> 10865;
10868 -> 10867;
10868 -> 10861;
10869 -> 0;
10869 -> 10861;
10870 -> 10861;
10871 -> 10868;
10871 -> 10870;
10872 -> 10869;
10872 -> 10870;
10873 -> 10871;
10873 -> 10872;
10873 -> 10870;
10874 -> 10862;
10874 -> 0;
10874 -> 10861;
10875 -> 10861;
10876 -> 10863;
10876 -> 10855;
10876 -> 10875;
10876 -> 10861;
10877 -> 10863;
10877 -> 10855;
10877 -> 10874;
10877 -> 10861;
10878 -> 10877;
10879 -> 10877;
10880 -> 10877;
10881 -> 10880;
10881 -> 10877;
10882 -> 10873;
10882 -> 10877;
10883 -> 10877;
10884 -> 10879;
10884 -> 10877;
10885 -> 10879;
10885 -> 10877;
10886 -> 10882;
10886 -> 10877;
10887 -> 10877;
10888 -> 10877;
10889 -> 10888;
10889 -> 10877;
10890 -> 10877;
10891 -> 10883;
10891 -> 10877;
10892 -> 10884;
10892 -> 10877;
10893 -> 10885;
10893 -> 10877;
10894 -> 10886;
10894 -> 10877;
10895 -> 10877;
10896 -> 10877;
10897 -> 10890;
10897 -> 10877;
10898 -> 10877;
10899 -> 10877;
10900 -> 10898;
10900 -> 10877;
10901 -> 10877;
10902 -> 10877;
10903 -> 10877;
10904 -> 10877;
10905 -> 10877;
10906 -> 10877;
10907 -> 10905;
10907 -> 10877;
10908 -> 10877;
10909 -> 10906;
10909 -> 10877;
10910 -> 10877;
10911 -> 10877;
10912 -> 10877;
10913 -> 10877;
10914 -> 10877;
10915 -> 10877;
10916 -> 10877;
10917 -> 10877;
10918 -> 10877;
10919 -> 10877;
10920 -> 10877;
10921 -> 10877;
10922 -> 10907;
10922 -> 10921;
10922 -> 10877;
10923 -> 10877;
10924 -> 10877;
10925 -> 10908;
10925 -> 10924;
10925 -> 10877;
10926 -> 10877;
10927 -> 10877;
10928 -> 10903;
10928 -> 10877;
10929 -> 10877;
10930 -> 10877;
10931 -> 10930;
10931 -> 10877;
10932 -> 10930;
10932 -> 10900;
10932 -> 10877;
10933 -> 10877;
10934 -> 10900;
10934 -> 10930;
10934 -> 10877;
10935 -> 10898;
10935 -> 10877;
10936 -> 10877;
10937 -> 10883;
10937 -> 10898;
10937 -> 10877;
10938 -> 10877;
10939 -> 10937;
10939 -> 10938;
10939 -> 10877;
10940 -> 10939;
10940 -> 10891;
10940 -> 10877;
10941 -> 10877;
10942 -> 10877;
10943 -> 10877;
10944 -> 10890;
10944 -> 10943;
10944 -> 10877;
10945 -> 10944;
10946 -> 10945;
10946 -> 10903;
10947 -> 10946;
10947 -> 10944;
10948 -> 10942;
10948 -> 10944;
10949 -> 10944;
10950 -> 10948;
10950 -> 10949;
10951 -> 10947;
10951 -> 10949;
10952 -> 10949;
10953 -> 10951;
10953 -> 10952;
10954 -> 10953;
10954 -> 10949;
10955 -> 10949;
10956 -> 10955;
10956 -> 10954;
10956 -> 10903;
10956 -> 10949;
10957 -> 10944;
10958 -> 10942;
10958 -> 10877;
10959 -> 10942;
10959 -> 10877;
10960 -> 10937;
10961 -> 10960;
10961 -> 10903;
10962 -> 10960;
10962 -> 10903;
10963 -> 10962;
10963 -> 10937;
10964 -> 10937;
10964 -> 10903;
10965 -> 10937;
10966 -> 10937;
10967 -> 10937;
10968 -> 10937;
10969 -> 10937;
10970 -> 10937;
10971 -> 10937;
10972 -> 10937;
10973 -> 10937;
10974 -> 10937;
10975 -> 10937;
10976 -> 10937;
10977 -> 10964;
10977 -> 10976;
10977 -> 10937;
10978 -> 10937;
10979 -> 10937;
10980 -> 10937;
10980 -> 0;
10981 -> 10863;
10981 -> 10964;
10981 -> 10874;
10981 -> 10861;
10982 -> 9627;
10983 -> 10981;
10983 -> 10982;
10983 -> 9627;
10984 -> 10981;
10984 -> 9627;
10985 -> 9374;
10986 -> 9373;
10986 -> 9374;
10987 -> 9373;
10987 -> 9374;
10988 -> 9374;
10989 -> 10987;
10989 -> 10988;
10990 -> 10988;
10991 -> 10990;
10991 -> 9374;
10992 -> 10986;
10992 -> 10964;
10992 -> 9374;
10993 -> 9389;
10993 -> 10964;
10993 -> 9388;
10993 -> 9387;
10994 -> 10993;
10995 -> 10964;
10995 -> 9374;
10996 -> 10995;
10996 -> 9378;
10997 -> 10996;
10997 -> 9380;
10997 -> 9378;
10998 -> 9374;
10999 -> 9374;
11000 -> 9373;
11000 -> 9374;
11001 -> 9374;
11002 -> 11000;
11002 -> 11001;
11003 -> 11001;
11004 -> 11002;
11004 -> 10964;
11004 -> 11003;
11004 -> 11001;
11005 -> 11004;
11006 -> 11005;
11006 -> 11004;
11007 -> 11004;
11008 -> 11006;
11008 -> 11007;
11009 -> 11007;
11010 -> 11007;
11011 -> 11008;
11011 -> 11010;
11012 -> 11011;
11012 -> 11007;
11013 -> 11007;
11014 -> 11008;
11014 -> 11013;
11015 -> 11014;
11015 -> 11007;
11016 -> 11015;
11017 -> 11015;
11017 -> 11016;
11018 -> 11017;
11018 -> 10964;
11018 -> 11016;
11019 -> 11018;
11019 -> 11015;
11020 -> 11009;
11020 -> 11007;
11021 -> 11020;
11021 -> 11004;
11022 -> 11021;
11022 -> 11004;
11023 -> 11002;
11023 -> 10964;
11023 -> 11004;
11024 -> 11004;
11025 -> 11004;
11026 -> 11022;
11026 -> 11025;
11027 -> 11023;
11027 -> 11025;
11028 -> 11024;
11028 -> 11025;
11029 -> 11024;
11029 -> 11025;
11030 -> 11024;
11030 -> 11025;
11031 -> 11024;
11031 -> 11025;
11032 -> 11002;
11032 -> 11025;
11033 -> 11025;
11034 -> 11025;
11035 -> 11032;
11035 -> 11034;
11036 -> 11035;
11036 -> 11025;
11037 -> 11025;
11038 -> 11037;
11038 -> 11025;
11039 -> 11026;
11039 -> 11025;
11040 -> 11028;
11040 -> 11025;
11041 -> 11033;
11041 -> 11025;
11042 -> 11036;
11042 -> 11025;
11043 -> 11031;
11043 -> 11025;
11044 -> 11030;
11044 -> 11025;
11045 -> 11037;
11045 -> 11025;
11046 -> 11032;
11046 -> 11025;
11047 -> 11046;
11047 -> 11025;
11048 -> 11025;
11049 -> 11025;
11050 -> 11025;
11051 -> 11050;
11051 -> 11039;
11051 -> 11022;
11051 -> 11025;
11052 -> 0;
11052 -> 11025;
11053 -> 11033;
11053 -> 0;
11053 -> 11025;
11054 -> 11025;
11055 -> 11054;
11055 -> 11025;
11056 -> 11025;
11057 -> 11029;
11057 -> 11033;
11058 -> 11057;
11059 -> 11057;
11060 -> 11032;
11060 -> 11059;
11061 -> 11057;
11062 -> 11057;
11062 -> 11025;
11063 -> 11033;
11063 -> 11025;
11064 -> 11028;
11064 -> 11025;
11065 -> 11058;
11065 -> 11025;
11066 -> 11025;
11067 -> 11062;
11067 -> 11066;
11068 -> 11063;
11068 -> 11066;
11069 -> 11063;
11069 -> 11066;
11070 -> 11064;
11070 -> 11066;
11071 -> 11065;
11071 -> 11066;
11072 -> 11032;
11072 -> 11066;
11073 -> 11025;
11074 -> 11025;
11075 -> 11031;
11075 -> 11057;
11076 -> 11057;
11076 -> 11075;
11077 -> 11075;
11078 -> 11076;
11078 -> 11077;
11079 -> 11032;
11079 -> 11077;
11080 -> 11078;
11080 -> 11077;
11081 -> 11075;
11082 -> 11033;
11082 -> 11075;
11083 -> 11075;
11084 -> 11082;
11084 -> 11083;
11085 -> 11032;
11085 -> 11083;
11086 -> 11083;
11087 -> 11085;
11087 -> 11086;
11088 -> 11087;
11088 -> 11057;
11088 -> 11086;
11089 -> 11088;
11089 -> 11083;
11090 -> 11084;
11090 -> 11033;
11090 -> 11083;
11091 -> 11075;
11092 -> 11057;
11092 -> 11025;
11093 -> 11033;
11093 -> 11025;
11094 -> 0;
11094 -> 11057;
11095 -> 11057;
11096 -> 11094;
11096 -> 11095;
11097 -> 11096;
11097 -> 11057;
11098 -> 11002;
11098 -> 11057;
11098 -> 11001;
11099 -> 11098;
11099 -> 9374;
11100 -> 9373;
11100 -> 11099;
11100 -> 11057;
11100 -> 11096;
11100 -> 9237;
11101 -> 9389;
11101 -> 11100;
11101 -> 9388;
11101 -> 9387;
11102 -> 11101;
11103 -> 11100;
11103 -> 9374;
11104 -> 11103;
11104 -> 9378;
11105 -> 11104;
11105 -> 9380;
11105 -> 9378;
11106 -> 9374;
11107 -> 9373;
11107 -> 11100;
11107 -> 11106;
11108 -> 9373;
11108 -> 11100;
11108 -> 11106;
11109 -> 11108;
11109 -> 9374;
11110 -> 9374;
11111 -> 9389;
11111 -> 11109;
11111 -> 9388;
11111 -> 9387;
11112 -> 11111;
11113 -> 11109;
11113 -> 9374;
11114 -> 11113;
11114 -> 9378;
11115 -> 11114;
11115 -> 9380;
11115 -> 9378;
11116 -> 9373;
11116 -> 9374;
11117 -> 9374;
11118 -> 9373;
11118 -> 9374;
11119 -> 11118;
11119 -> 11109;
11119 -> 9374;
11120 -> 9373;
11120 -> 9374;
11121 -> 11120;
11121 -> 11119;
11121 -> 9374;
11122 -> 9373;
11122 -> 9374;
11123 -> 11122;
11123 -> 11121;
11123 -> 9766;
11123 -> 9374;
11124 -> 9374;
11125 -> 11123;
11126 -> 11122;
11126 -> 11125;
11127 -> 11126;
11127 -> 11121;
11127 -> 11125;
11128 -> 11127;
11128 -> 11121;
11128 -> 11125;
11129 -> 11128;
11130 -> 11129;
11130 -> 11128;
11131 -> 11128;
11132 -> 11126;
11132 -> 11130;
11132 -> 11128;
11133 -> 11130;
11133 -> 11128;
11134 -> 11126;
11134 -> 11132;
11134 -> 11128;
11135 -> 11134;
11135 -> 11125;
11136 -> 11135;
11136 -> 11123;
11137 -> 11123;
11138 -> 11136;
11138 -> 11135;
11138 -> 11137;
11138 -> 11123;
11139 -> 11122;
11139 -> 11135;
11139 -> 11123;
11140 -> 9766;
11140 -> 11123;
11141 -> 11136;
11141 -> 11123;
11142 -> 9373;
11142 -> 11141;
11142 -> 11135;
11142 -> 11139;
11142 -> 9237;
11143 -> 9373;
11143 -> 9374;
11144 -> 9374;
11145 -> 11143;
11145 -> 11144;
11146 -> 0;
11146 -> 11144;
11147 -> 11146;
11147 -> 9374;
11148 -> 9374;
11149 -> 11143;
11149 -> 11148;
11150 -> 9374;
11151 -> 9389;
11151 -> 11142;
11151 -> 9388;
11151 -> 9387;
11152 -> 11151;
11153 -> 11142;
11153 -> 9374;
11154 -> 11153;
11154 -> 9378;
11155 -> 11154;
11155 -> 9380;
11155 -> 9378;
11156 -> 9373;
11156 -> 9374;
11157 -> 9373;
11157 -> 9374;
11158 -> 11156;
11158 -> 9374;
11159 -> 9374;
11160 -> 11158;
11160 -> 11159;
11161 -> 11157;
11161 -> 11142;
11161 -> 11159;
11162 -> 11161;
11162 -> 11142;
11162 -> 11160;
11162 -> 11159;
11163 -> 9389;
11163 -> 11162;
11163 -> 9388;
11163 -> 9387;
11164 -> 11163;
11165 -> 11162;
11165 -> 9374;
11166 -> 11165;
11166 -> 9378;
11167 -> 11166;
11167 -> 9380;
11167 -> 9378;
11168 -> 9373;
11168 -> 9374;
11169 -> 9373;
11169 -> 9374;
11170 -> 11168;
11170 -> 9374;
11171 -> 9374;
11172 -> 11170;
11172 -> 11171;
11173 -> 11169;
11173 -> 11162;
11173 -> 11171;
11174 -> 11173;
11174 -> 11162;
11174 -> 11172;
11174 -> 11171;
11175 -> 9389;
11175 -> 11174;
11175 -> 9388;
11175 -> 9387;
11176 -> 11175;
11177 -> 11174;
11177 -> 9374;
11178 -> 11177;
11178 -> 9378;
11179 -> 11178;
11179 -> 9380;
11179 -> 9378;
11180 -> 9373;
11180 -> 9374;
11181 -> 9374;
11182 -> 9374;
11183 -> 11180;
11183 -> 11174;
11183 -> 11182;
11184 -> 11183;
11184 -> 9374;
11185 -> 11184;
11185 -> 11174;
11186 -> 11184;
11187 -> 11185;
11187 -> 11186;
11187 -> 11184;
11188 -> 11185;
11188 -> 11174;
11188 -> 11186;
11188 -> 11184;
11189 -> 9374;
11190 -> 11180;
11190 -> 11174;
11190 -> 11189;
11190 -> 9374;
11191 -> 9374;
11192 -> 11180;
11192 -> 11174;
11192 -> 11191;
11193 -> 11192;
11193 -> 9374;
11194 -> 11193;
11195 -> 11180;
11195 -> 11194;
11196 -> 11194;
11197 -> 11195;
11197 -> 11196;
11198 -> 11197;
11198 -> 11194;
11199 -> 11194;
11200 -> 11194;
11201 -> 11198;
11201 -> 11200;
11202 -> 11200;
11203 -> 11201;
11203 -> 11202;
11204 -> 11203;
11204 -> 11200;
11205 -> 11200;
11206 -> 11204;
11206 -> 11205;
11207 -> 0;
11207 -> 11206;
11208 -> 11207;
11208 -> 11193;
11209 -> 11208;
11209 -> 0;
11209 -> 11193;
11210 -> 11193;
11211 -> 11180;
11211 -> 11210;
11212 -> 11210;
11213 -> 11211;
11213 -> 11212;
11214 -> 11213;
11214 -> 11198;
11214 -> 11212;
11215 -> 11214;
11215 -> 11210;
11216 -> 11210;
11217 -> 11210;
11218 -> 11215;
11218 -> 11217;
11219 -> 11217;
11220 -> 11218;
11220 -> 11219;
11221 -> 11220;
11221 -> 11217;
11222 -> 11217;
11223 -> 11221;
11223 -> 11222;
11224 -> 11223;
11224 -> 11193;
11225 -> 11209;
11225 -> 11224;
11225 -> 11193;
11226 -> 0;
11226 -> 11193;
11227 -> 11193;
11228 -> 11227;
11228 -> 11180;
11228 -> 11215;
11228 -> 11193;
11229 -> 11180;
11229 -> 11215;
11229 -> 11227;
11229 -> 11228;
11230 -> 11228;
11231 -> 11229;
11231 -> 11230;
11232 -> 11231;
11232 -> 11229;
11232 -> 11230;
11233 -> 11232;
11233 -> 11228;
11234 -> 11226;
11234 -> 11233;
11234 -> 0;
11234 -> 11228;
11235 -> 11228;
11236 -> 11229;
11236 -> 11235;
11237 -> 11236;
11237 -> 11228;
11238 -> 11193;
11239 -> 11238;
11239 -> 11180;
11239 -> 11229;
11239 -> 11193;
11240 -> 11180;
11240 -> 11229;
11240 -> 11238;
11240 -> 11239;
11241 -> 11239;
11242 -> 11240;
11242 -> 11241;
11243 -> 11242;
11243 -> 11239;
11244 -> 9374;
11245 -> 11180;
11245 -> 11244;
11246 -> 11244;
11247 -> 11245;
11247 -> 11243;
11247 -> 11246;
11247 -> 11244;
11248 -> 11245;
11248 -> 11243;
11248 -> 11244;
11249 -> 11248;
11249 -> 9374;
11250 -> 11181;
11250 -> 9374;
11251 -> 9374;
11252 -> 11249;
11252 -> 11251;
11253 -> 11250;
11253 -> 11251;
11254 -> 11180;
11254 -> 11251;
11255 -> 11252;
11255 -> 11251;
11256 -> 11251;
11257 -> 11255;
11257 -> 11256;
11257 -> 11251;
11258 -> 11251;
11259 -> 11255;
11259 -> 11258;
11260 -> 11259;
11260 -> 11243;
11260 -> 11258;
11261 -> 11260;
11261 -> 11251;
11262 -> 11251;
11263 -> 11261;
11263 -> 11243;
11263 -> 11262;
11263 -> 11251;
11264 -> 11251;
11265 -> 11263;
11265 -> 11264;
11266 -> 11251;
11267 -> 11265;
11267 -> 11266;
11268 -> 11266;
11269 -> 11268;
11269 -> 11251;
11270 -> 11263;
11270 -> 11269;
11270 -> 11251;
11271 -> 9374;
11272 -> 9374;
11273 -> 11180;
11273 -> 11263;
11273 -> 11272;
11274 -> 11273;
11274 -> 11263;
11274 -> 11272;
11275 -> 11272;
11276 -> 11273;
11276 -> 9374;
11277 -> 11181;
11277 -> 9374;
11278 -> 11276;
11278 -> 11277;
11278 -> 11263;
11278 -> 11181;
11278 -> 9374;
11279 -> 11181;
11279 -> 11278;
11279 -> 9374;
11280 -> 9389;
11280 -> 11279;
11280 -> 9388;
11280 -> 9387;
11281 -> 11280;
11282 -> 11279;
11282 -> 9374;
11283 -> 11282;
11283 -> 9378;
11284 -> 11283;
11284 -> 9380;
11284 -> 9378;
11285 -> 9238;
11285 -> 9237;
11286 -> 11285;
11287 -> 11286;
11287 -> 9242;
11287 -> 11285;
11288 -> 11285;
11289 -> 11288;
11289 -> 9242;
11289 -> 11285;
11290 -> 9242;
11290 -> 11279;
11290 -> 11287;
11290 -> 11289;
11290 -> 9237;
11291 -> 9237;
11292 -> 9240;
11292 -> 11291;
11292 -> 9237;
11293 -> 9238;
11293 -> 9237;
11294 -> 9239;
11294 -> 9237;
11295 -> 9241;
11295 -> 9237;
11296 -> 9237;
11297 -> 11293;
11297 -> 11296;
11298 -> 11294;
11298 -> 11296;
11299 -> 11295;
11299 -> 11296;
11300 -> 9242;
11300 -> 11296;
11301 -> 11296;
11302 -> 11297;
11302 -> 11301;
11302 -> 11296;
11303 -> 11300;
11303 -> 11290;
11303 -> 11296;
11304 -> 11303;
11305 -> 11300;
11305 -> 11303;
11306 -> 11304;
11306 -> 11303;
11307 -> 11299;
11307 -> 11303;
11308 -> 11303;
11309 -> 11303;
11310 -> 11305;
11310 -> 11309;
11311 -> 11306;
11311 -> 11309;
11312 -> 11307;
11312 -> 11309;
11313 -> 11308;
11313 -> 11309;
11314 -> 11308;
11314 -> 11309;
11315 -> 11309;
11316 -> 11310;
11316 -> 11309;
11317 -> 11313;
11317 -> 11309;
11318 -> 11314;
11318 -> 11309;
11319 -> 11315;
11319 -> 11309;
11320 -> 11312;
11320 -> 11309;
11321 -> 11309;
11322 -> 11309;
11323 -> 11316;
11323 -> 11322;
11324 -> 11317;
11324 -> 11322;
11325 -> 11318;
11325 -> 11322;
11326 -> 11319;
11326 -> 11322;
11327 -> 11320;
11327 -> 11322;
11328 -> 11321;
11328 -> 11322;
11329 -> 11322;
11330 -> 11328;
11330 -> 11329;
11331 -> 11328;
11331 -> 11322;
11332 -> 11328;
11332 -> 11322;
11333 -> 11328;
11333 -> 11322;
11334 -> 11328;
11334 -> 11322;
11335 -> 11328;
11335 -> 11322;
11336 -> 11328;
11336 -> 11322;
11337 -> 11323;
11337 -> 11328;
11337 -> 11322;
11338 -> 11324;
11338 -> 11328;
11338 -> 11322;
11339 -> 11325;
11339 -> 11328;
11339 -> 11322;
11340 -> 11326;
11340 -> 11328;
11340 -> 11322;
11341 -> 11327;
11341 -> 11328;
11341 -> 11322;
11342 -> 8946;
11342 -> 11322;
11343 -> 11342;
11343 -> 11328;
11343 -> 11322;
11344 -> 11322;
11345 -> 11328;
11345 -> 11344;
11346 -> 11344;
11347 -> 11345;
11347 -> 11338;
11347 -> 11346;
11347 -> 11344;
11348 -> 11344;
11349 -> 11345;
11349 -> 11337;
11349 -> 11348;
11350 -> 11349;
11350 -> 11342;
11350 -> 11348;
11351 -> 11347;
11351 -> 11350;
11351 -> 11342;
11351 -> 11344;
11352 -> 11351;
11352 -> 11322;
11353 -> 11352;
11354 -> 11353;
11354 -> 11328;
11354 -> 11352;
11355 -> 11309;
11356 -> 11310;
11356 -> 11355;
11357 -> 11355;
11358 -> 11356;
11358 -> 11357;
11359 -> 11358;
11359 -> 11342;
11359 -> 11357;
11360 -> 11358;
11360 -> 11342;
11360 -> 11357;
11361 -> 11360;
11361 -> 11355;
11362 -> 11356;
11362 -> 11342;
11362 -> 11355;
11363 -> 11362;
11363 -> 11309;
11364 -> 11309;
11365 -> 11363;
11365 -> 11364;
11366 -> 11321;
11366 -> 11364;
11367 -> 11364;
11368 -> 11365;
11368 -> 11367;
11368 -> 11364;
11369 -> 11366;
11369 -> 11368;
11370 -> 11368;
11371 -> 11369;
11371 -> 11370;
11372 -> 11365;
11372 -> 11370;
11373 -> 11372;
11373 -> 11370;
11374 -> 11370;
11375 -> 11373;
11375 -> 11374;
11376 -> 11371;
11376 -> 11374;
11377 -> 11376;
11377 -> 11341;
11377 -> 9234;
11377 -> 11362;
11377 -> 11374;
11378 -> 11375;
11378 -> 11374;
11379 -> 11375;
11379 -> 11374;
11380 -> 11374;
11381 -> 11379;
11381 -> 11380;
11382 -> 11376;
11382 -> 11380;
11383 -> 11380;
11384 -> 11381;
11384 -> 11383;
11385 -> 0;
11385 -> 11383;
11386 -> 11385;
11386 -> 11380;
11387 -> 11386;
11387 -> 11381;
11387 -> 11380;
11388 -> 11380;
11389 -> 11380;
11390 -> 11381;
11390 -> 11389;
11391 -> 0;
11391 -> 11389;
11392 -> 11391;
11392 -> 11380;
11393 -> 11392;
11394 -> 11381;
11394 -> 11393;
11395 -> 11393;
11395 -> 11392;
11396 -> 11380;
11397 -> 11381;
11397 -> 11396;
11398 -> 0;
11398 -> 11396;
11399 -> 11398;
11399 -> 11380;
11400 -> 11380;
11401 -> 11381;
11401 -> 11400;
11402 -> 0;
11402 -> 11400;
11403 -> 11402;
11403 -> 11380;
11404 -> 11380;
11405 -> 11381;
11405 -> 11404;
11406 -> 0;
11406 -> 11404;
11407 -> 11406;
11407 -> 11380;
11408 -> 11380;
11409 -> 11381;
11409 -> 11408;
11410 -> 0;
11410 -> 11408;
11411 -> 11410;
11411 -> 11380;
11412 -> 11380;
11413 -> 11381;
11413 -> 11412;
11414 -> 0;
11414 -> 11412;
11415 -> 11414;
11415 -> 11380;
11416 -> 11380;
11417 -> 11381;
11417 -> 11380;
11418 -> 11416;
11418 -> 11380;
11419 -> 11417;
11419 -> 11418;
11419 -> 11382;
11419 -> 11343;
11419 -> 11377;
11419 -> 11380;
11420 -> 11380;
11421 -> 11419;
11421 -> 11420;
11422 -> 11419;
11422 -> 11420;
11423 -> 11421;
11423 -> 11420;
11424 -> 11423;
11424 -> 11420;
11425 -> 11424;
11426 -> 11380;
11427 -> 11381;
11427 -> 11380;
11428 -> 11426;
11428 -> 11380;
11429 -> 11380;
11430 -> 11427;
11430 -> 11429;
11431 -> 11428;
11431 -> 11429;
11432 -> 11382;
11432 -> 11429;
11433 -> 11429;
11434 -> 11429;
11435 -> 11430;
11435 -> 11434;
11436 -> 11434;
11437 -> 11435;
11437 -> 11436;
11438 -> 11437;
11438 -> 11425;
11438 -> 11436;
11439 -> 11436;
11440 -> 11437;
11440 -> 11425;
11440 -> 11436;
11441 -> 11440;
11441 -> 11434;
11442 -> 11434;
11443 -> 11435;
11443 -> 11442;
11444 -> 11443;
11444 -> 11425;
11444 -> 11442;
11445 -> 11442;
11446 -> 11443;
11446 -> 11425;
11446 -> 11442;
11447 -> 11446;
11447 -> 11434;
11448 -> 11441;
11448 -> 11425;
11448 -> 11434;
11449 -> 11447;
11449 -> 11425;
11449 -> 11434;
11450 -> 11434;
11451 -> 11441;
11451 -> 11425;
11451 -> 11450;
11451 -> 11434;
11452 -> 11447;
11452 -> 11451;
11453 -> 11452;
11453 -> 11425;
11453 -> 11434;
11454 -> 11452;
11454 -> 11434;
11455 -> 11454;
11455 -> 11429;
11456 -> 11429;
11457 -> 11456;
11457 -> 11380;
11458 -> 11457;
11458 -> 11380;
11459 -> 11458;
11460 -> 11381;
11460 -> 11459;
11461 -> 0;
11461 -> 11459;
11462 -> 11461;
11462 -> 11458;
11463 -> 0;
11463 -> 11462;
11464 -> 11380;
11465 -> 11381;
11465 -> 11464;
11466 -> 0;
11466 -> 11464;
11467 -> 11466;
11467 -> 11380;
11468 -> 11467;
11468 -> 11380;
11469 -> 11381;
11469 -> 11468;
11470 -> 11463;
11470 -> 11468;
11471 -> 11469;
11471 -> 11470;
11471 -> 11382;
11471 -> 11343;
11471 -> 11425;
11471 -> 11468;
11472 -> 11471;
11472 -> 11468;
11473 -> 11471;
11473 -> 0;
11473 -> 11374;
11474 -> 11471;
11474 -> 11374;
11475 -> 11374;
11476 -> 11474;
11476 -> 11475;
11477 -> 11476;
11477 -> 11475;
11478 -> 11477;
11479 -> 11374;
11480 -> 11374;
11481 -> 11375;
11481 -> 11480;
11482 -> 11481;
11482 -> 11471;
11482 -> 11480;
11483 -> 11482;
11483 -> 11374;
11484 -> 11483;
11485 -> 11484;
11485 -> 11483;
11486 -> 11483;
11487 -> 11485;
11487 -> 11483;
11488 -> 11486;
11488 -> 11483;
11489 -> 11483;
11490 -> 11487;
11490 -> 11489;
11491 -> 11488;
11491 -> 11489;
11492 -> 11376;
11492 -> 11489;
11493 -> 11489;
11494 -> 11489;
11495 -> 11490;
11495 -> 11494;
11496 -> 11495;
11496 -> 11489;
11497 -> 11489;
11497 -> 11483;
11498 -> 11483;
11499 -> 11498;
11499 -> 11483;
11500 -> 11493;
11500 -> 11499;
11501 -> 11483;
11502 -> 11500;
11502 -> 11501;
11502 -> 11483;
11503 -> 11502;
11503 -> 11497;
11503 -> 11483;
11504 -> 11497;
11504 -> 11483;
11505 -> 11478;
11505 -> 11504;
11506 -> 11485;
11507 -> 11485;
11508 -> 11506;
11508 -> 11485;
11509 -> 11485;
11510 -> 11507;
11510 -> 11509;
11511 -> 11508;
11511 -> 11509;
11512 -> 11376;
11512 -> 11509;
11513 -> 11509;
11514 -> 11509;
11515 -> 11510;
11515 -> 11514;
11516 -> 11515;
11516 -> 11485;
11516 -> 11514;
11517 -> 11516;
11518 -> 0;
11518 -> 11517;
11519 -> 11518;
11519 -> 11516;
11520 -> 11515;
11520 -> 11485;
11520 -> 11516;
11521 -> 11516;
11522 -> 11519;
11522 -> 11521;
11523 -> 11520;
11523 -> 11521;
11524 -> 11515;
11524 -> 11521;
11525 -> 11522;
11525 -> 11521;
11526 -> 11521;
11527 -> 11525;
11527 -> 11526;
11528 -> 11524;
11528 -> 11526;
11529 -> 11527;
11529 -> 11526;
11530 -> 11526;
11531 -> 11526;
11532 -> 11529;
11532 -> 11531;
11533 -> 11530;
11533 -> 11531;
11534 -> 11530;
11534 -> 11531;
11535 -> 11528;
11535 -> 11531;
11536 -> 11532;
11536 -> 11531;
11537 -> 11533;
11537 -> 11531;
11538 -> 11534;
11538 -> 11531;
11539 -> 11531;
11540 -> 11531;
11541 -> 11536;
11541 -> 11540;
11542 -> 11537;
11542 -> 11540;
11543 -> 11538;
11543 -> 11540;
11544 -> 11539;
11544 -> 11540;
11545 -> 11539;
11545 -> 11540;
11546 -> 11539;
11546 -> 11540;
11547 -> 11539;
11547 -> 11540;
11548 -> 11539;
11548 -> 11540;
11549 -> 11539;
11549 -> 11540;
11550 -> 11535;
11550 -> 11540;
11551 -> 11540;
11552 -> 11540;
11553 -> 11540;
11554 -> 11540;
11555 -> 11540;
11556 -> 11541;
11556 -> 11540;
11557 -> 11550;
11557 -> 11485;
11557 -> 11556;
11557 -> 0;
11557 -> 11540;
11558 -> 11540;
11559 -> 11555;
11559 -> 11558;
11559 -> 11540;
11560 -> 8659;
11560 -> 11540;
11561 -> 11560;
11561 -> 11531;
11562 -> 11561;
11562 -> 11526;
11563 -> 11562;
11563 -> 11521;
11564 -> 11523;
11564 -> 11521;
11565 -> 11563;
11565 -> 11521;
11566 -> 11564;
11566 -> 11565;
11566 -> 0;
11566 -> 11557;
11566 -> 11485;
11566 -> 11521;
11567 -> 11516;
11568 -> 11515;
11568 -> 11566;
11568 -> 11514;
11569 -> 11568;
11569 -> 11509;
11570 -> 11509;
11570 -> 11485;
11571 -> 11485;
11572 -> 11571;
11572 -> 11485;
11573 -> 11572;
11574 -> 11485;
11574 -> 11573;
11575 -> 11574;
11575 -> 11566;
11575 -> 11573;
11576 -> 11485;
11577 -> 11575;
11577 -> 11576;
11577 -> 11485;
11578 -> 11570;
11578 -> 11485;
11579 -> 11478;
11579 -> 11578;
11580 -> 11478;
11580 -> 11374;
11581 -> 11374;
11582 -> 11375;
11582 -> 11581;
11583 -> 11582;
11583 -> 11575;
11583 -> 11581;
11584 -> 11583;
11584 -> 11374;
11585 -> 11374;
11586 -> 11584;
11586 -> 11374;
11587 -> 11374;
11588 -> 11586;
11588 -> 11587;
11589 -> 11376;
11589 -> 11587;
11590 -> 11587;
11591 -> 11588;
11591 -> 11590;
11592 -> 0;
11592 -> 11590;
11593 -> 11592;
11593 -> 11587;
11594 -> 11593;
11594 -> 11588;
11594 -> 11587;
11595 -> 11587;
11596 -> 11587;
11597 -> 11588;
11597 -> 11596;
11598 -> 0;
11598 -> 11596;
11599 -> 11598;
11599 -> 11587;
11600 -> 11599;
11601 -> 11588;
11601 -> 11600;
11602 -> 11600;
11602 -> 11599;
11603 -> 11587;
11604 -> 11588;
11604 -> 11603;
11605 -> 0;
11605 -> 11603;
11606 -> 11605;
11606 -> 11587;
11607 -> 11587;
11608 -> 11588;
11608 -> 11607;
11609 -> 0;
11609 -> 11607;
11610 -> 11609;
11610 -> 11587;
11611 -> 11587;
11612 -> 11588;
11612 -> 11611;
11613 -> 0;
11613 -> 11611;
11614 -> 11613;
11614 -> 11587;
11615 -> 11587;
11616 -> 11588;
11616 -> 11615;
11617 -> 0;
11617 -> 11615;
11618 -> 11617;
11618 -> 11587;
11619 -> 11587;
11620 -> 11588;
11620 -> 11619;
11621 -> 0;
11621 -> 11619;
11622 -> 11621;
11622 -> 11587;
11623 -> 11587;
11624 -> 11623;
11624 -> 11587;
11625 -> 11587;
11626 -> 11588;
11626 -> 11625;
11627 -> 11587;
11628 -> 11627;
11628 -> 11587;
11629 -> 11587;
11630 -> 11628;
11630 -> 11629;
11631 -> 11589;
11631 -> 11629;
11632 -> 11629;
11633 -> 11629;
11634 -> 11588;
11634 -> 11629;
11635 -> 11629;
11636 -> 11635;
11636 -> 11587;
11637 -> 11636;
11637 -> 11587;
11638 -> 11637;
11639 -> 11588;
11639 -> 11638;
11640 -> 0;
11640 -> 11638;
11641 -> 11640;
11641 -> 11637;
11642 -> 11588;
11642 -> 11641;
11643 -> 11641;
11644 -> 11642;
11644 -> 11643;
11645 -> 11589;
11645 -> 11643;
11646 -> 11643;
11647 -> 11644;
11647 -> 11646;
11648 -> 11646;
11648 -> 11643;
11649 -> 11643;
11650 -> 11644;
11650 -> 11649;
11651 -> 11649;
11652 -> 11650;
11652 -> 11651;
11653 -> 11652;
11653 -> 11588;
11653 -> 11651;
11654 -> 11653;
11654 -> 11649;
11655 -> 11654;
11655 -> 11649;
11656 -> 11655;
11656 -> 11654;
11656 -> 11649;
11657 -> 11649;
11658 -> 11654;
11658 -> 11657;
11659 -> 11657;
11660 -> 11658;
11660 -> 11659;
11661 -> 11659;
11662 -> 11661;
11662 -> 11657;
11663 -> 11662;
11663 -> 11657;
11664 -> 11663;
11664 -> 11662;
11664 -> 11657;
11665 -> 11663;
11665 -> 11664;
11666 -> 11665;
11666 -> 11649;
11667 -> 11666;
11667 -> 11643;
11668 -> 11643;
11669 -> 11644;
11669 -> 11668;
11670 -> 11669;
11670 -> 11643;
11671 -> 11670;
11671 -> 11667;
11671 -> 11643;
11672 -> 11643;
11673 -> 11671;
11673 -> 11672;
11673 -> 11643;
11674 -> 11671;
11674 -> 11643;
11675 -> 11643;
11676 -> 11674;
11676 -> 11675;
11677 -> 11645;
11677 -> 11675;
11678 -> 11675;
11679 -> 11676;
11679 -> 11678;
11680 -> 0;
11680 -> 11678;
11681 -> 11680;
11681 -> 11675;
11682 -> 11681;
11682 -> 11676;
11682 -> 11675;
11683 -> 11675;
11684 -> 11675;
11685 -> 11676;
11685 -> 11684;
11686 -> 0;
11686 -> 11684;
11687 -> 11686;
11687 -> 11675;
11688 -> 11687;
11689 -> 11676;
11689 -> 11688;
11690 -> 11688;
11690 -> 11687;
11691 -> 11675;
11692 -> 11676;
11692 -> 11691;
11693 -> 0;
11693 -> 11691;
11694 -> 11693;
11694 -> 11675;
11695 -> 11675;
11696 -> 11676;
11696 -> 11695;
11697 -> 0;
11697 -> 11695;
11698 -> 11697;
11698 -> 11675;
11699 -> 11675;
11700 -> 11676;
11700 -> 11699;
11701 -> 0;
11701 -> 11699;
11702 -> 11701;
11702 -> 11675;
11703 -> 11675;
11704 -> 11676;
11704 -> 11703;
11705 -> 0;
11705 -> 11703;
11706 -> 11705;
11706 -> 11675;
11707 -> 11675;
11708 -> 11676;
11708 -> 11707;
11709 -> 0;
11709 -> 11707;
11710 -> 11709;
11710 -> 11675;
11711 -> 11675;
11712 -> 11711;
11712 -> 11675;
11713 -> 11676;
11713 -> 11712;
11713 -> 11677;
11713 -> 11343;
11713 -> 11588;
11713 -> 11675;
11714 -> 11675;
11715 -> 11713;
11715 -> 11714;
11716 -> 11713;
11716 -> 11714;
11717 -> 11713;
11717 -> 11714;
11718 -> 11713;
11718 -> 11714;
11719 -> 11716;
11719 -> 11714;
11720 -> 11719;
11720 -> 11714;
11721 -> 11717;
11721 -> 11720;
11722 -> 11718;
11722 -> 11713;
11722 -> 11720;
11723 -> 11720;
11724 -> 11721;
11724 -> 11723;
11725 -> 11722;
11725 -> 11723;
11726 -> 11716;
11726 -> 11723;
11727 -> 11726;
11727 -> 11724;
11727 -> 11723;
11728 -> 11727;
11729 -> 11641;
11730 -> 11728;
11730 -> 11729;
11731 -> 11730;
11731 -> 11729;
11732 -> 11731;
11733 -> 11587;
11734 -> 11588;
11734 -> 11733;
11735 -> 0;
11735 -> 11733;
11736 -> 11735;
11736 -> 11587;
11737 -> 11587;
11738 -> 11588;
11738 -> 11737;
11739 -> 0;
11739 -> 11737;
11740 -> 11739;
11740 -> 11587;
11741 -> 11736;
11741 -> 11740;
11741 -> 11587;
11742 -> 11741;
11742 -> 11587;
11743 -> 11732;
11743 -> 11742;
11744 -> 11374;
11745 -> 11743;
11745 -> 11744;
11746 -> 11374;
11747 -> 11375;
11747 -> 11746;
11748 -> 11747;
11748 -> 11727;
11748 -> 11746;
11749 -> 11747;
11749 -> 11727;
11749 -> 11746;
11750 -> 11749;
11750 -> 11374;
11751 -> 11374;
11752 -> 11750;
11752 -> 11751;
11753 -> 11376;
11753 -> 11751;
11754 -> 11752;
11755 -> 11752;
11756 -> 11755;
11756 -> 11752;
11757 -> 11752;
11758 -> 11756;
11758 -> 11757;
11759 -> 11754;
11759 -> 11757;
11760 -> 11759;
11760 -> 11341;
11760 -> 11727;
11760 -> 11757;
11761 -> 11758;
11761 -> 11757;
11762 -> 11757;
11763 -> 11761;
11763 -> 11762;
11764 -> 11759;
11764 -> 11762;
11765 -> 11762;
11766 -> 11763;
11766 -> 11765;
11767 -> 0;
11767 -> 11765;
11768 -> 11767;
11768 -> 11762;
11769 -> 11768;
11770 -> 11769;
11770 -> 11757;
11771 -> 11758;
11771 -> 11757;
11772 -> 11757;
11773 -> 11771;
11773 -> 11772;
11774 -> 11759;
11774 -> 11772;
11775 -> 11772;
11776 -> 11773;
11776 -> 11775;
11777 -> 0;
11777 -> 11775;
11778 -> 11777;
11778 -> 11772;
11779 -> 11778;
11779 -> 11773;
11779 -> 11772;
11780 -> 11772;
11781 -> 11772;
11782 -> 11773;
11782 -> 11781;
11783 -> 0;
11783 -> 11781;
11784 -> 11783;
11784 -> 11772;
11785 -> 11784;
11786 -> 11773;
11786 -> 11785;
11787 -> 11785;
11788 -> 11786;
11788 -> 11760;
11788 -> 11787;
11789 -> 11788;
11789 -> 11760;
11789 -> 11787;
11790 -> 11789;
11790 -> 11785;
11791 -> 11790;
11792 -> 11791;
11792 -> 11790;
11793 -> 11792;
11794 -> 11786;
11794 -> 11760;
11794 -> 11793;
11795 -> 11794;
11795 -> 11760;
11795 -> 0;
11795 -> 11793;
11796 -> 11794;
11796 -> 11760;
11796 -> 11795;
11797 -> 11796;
11797 -> 11792;
11798 -> 11797;
11798 -> 11784;
11799 -> 11784;
11800 -> 11798;
11800 -> 11799;
11801 -> 11774;
11801 -> 11799;
11802 -> 11799;
11803 -> 11800;
11803 -> 11802;
11804 -> 11802;
11804 -> 11799;
11805 -> 11804;
11805 -> 11800;
11805 -> 11799;
11806 -> 11799;
11807 -> 11800;
11807 -> 11799;
11808 -> 11799;
11809 -> 11800;
11809 -> 11808;
11810 -> 11808;
11810 -> 11799;
11811 -> 11799;
11812 -> 11800;
11812 -> 11811;
11813 -> 11811;
11813 -> 11799;
11814 -> 11799;
11815 -> 11800;
11815 -> 11814;
11816 -> 11814;
11816 -> 11799;
11817 -> 11799;
11818 -> 11800;
11818 -> 11817;
11819 -> 11817;
11819 -> 11799;
11820 -> 11799;
11821 -> 11800;
11821 -> 11820;
11822 -> 11820;
11822 -> 11799;
11823 -> 11799;
11824 -> 11800;
11824 -> 11823;
11825 -> 11823;
11825 -> 11799;
11826 -> 11800;
11826 -> 11799;
11827 -> 11800;
11827 -> 11799;
11828 -> 11827;
11828 -> 11800;
11829 -> 11827;
11830 -> 11757;
11831 -> 11829;
11831 -> 11830;
11832 -> 11831;
11832 -> 11830;
11833 -> 11832;
11834 -> 11757;
11835 -> 11759;
11835 -> 11834;
11836 -> 11834;
11837 -> 11835;
11837 -> 11338;
11837 -> 11836;
11837 -> 11834;
11838 -> 11834;
11839 -> 11835;
11839 -> 11337;
11839 -> 11838;
11840 -> 11839;
11840 -> 11827;
11840 -> 11838;
11841 -> 11837;
11841 -> 11840;
11841 -> 11827;
11841 -> 11834;
11842 -> 11841;
11842 -> 11757;
11843 -> 11758;
11843 -> 11842;
11844 -> 11842;
11845 -> 11843;
11845 -> 11844;
11846 -> 11759;
11846 -> 11844;
11847 -> 11844;
11848 -> 11845;
11848 -> 11847;
11849 -> 11847;
11850 -> 11848;
11850 -> 11849;
11851 -> 11850;
11851 -> 11827;
11851 -> 11849;
11852 -> 11851;
11853 -> 11852;
11853 -> 11851;
11854 -> 11851;
11855 -> 11853;
11855 -> 11854;
11856 -> 11853;
11856 -> 11854;
11857 -> 11855;
11857 -> 11854;
11858 -> 11856;
11858 -> 11853;
11858 -> 11854;
11859 -> 11858;
11860 -> 11859;
11860 -> 11858;
11861 -> 11859;
11862 -> 11859;
11863 -> 11861;
11863 -> 11862;
11864 -> 11859;
11865 -> 11859;
11866 -> 11861;
11866 -> 11865;
11867 -> 11866;
11867 -> 11859;
11867 -> 11865;
11868 -> 11866;
11868 -> 11859;
11868 -> 11867;
11869 -> 11867;
11870 -> 11866;
11870 -> 11868;
11870 -> 11867;
11871 -> 11868;
11871 -> 11867;
11872 -> 11866;
11872 -> 11870;
11872 -> 11865;
11873 -> 11872;
11873 -> 11859;
11874 -> 11873;
11874 -> 11872;
11874 -> 11861;
11874 -> 11859;
11875 -> 11873;
11875 -> 11859;
11876 -> 11874;
11876 -> 11875;
11876 -> 11872;
11876 -> 11859;
11877 -> 11861;
11877 -> 11876;
11877 -> 11859;
11878 -> 11877;
11878 -> 11876;
11879 -> 11874;
11879 -> 11878;
11879 -> 11859;
11880 -> 11879;
11880 -> 11859;
11881 -> 11880;
11881 -> 11859;
11882 -> 11881;
11883 -> 11882;
11883 -> 11881;
11884 -> 11857;
11884 -> 11883;
11884 -> 11880;
11884 -> 11881;
11885 -> 11857;
11885 -> 11854;
11886 -> 11853;
11886 -> 11885;
11886 -> 11884;
11886 -> 11851;
11887 -> 11853;
11887 -> 11854;
11888 -> 11853;
11888 -> 11854;
11889 -> 11854;
11890 -> 11854;
11891 -> 11888;
11891 -> 11886;
11891 -> 11854;
11892 -> 11887;
11892 -> 11891;
11893 -> 11891;
11894 -> 11892;
11894 -> 11893;
11895 -> 11894;
11896 -> 11894;
11897 -> 11894;
11897 -> 11896;
11898 -> 11897;
11899 -> 11897;
11899 -> 11898;
11900 -> 11898;
11900 -> 11897;
11901 -> 11900;
11902 -> 11901;
11902 -> 11889;
11902 -> 11900;
11903 -> 11897;
11903 -> 11900;
11904 -> 11902;
11904 -> 11903;
11904 -> 11901;
11904 -> 11897;
11904 -> 11896;
11904 -> 11900;
11905 -> 11854;
11906 -> 11902;
11906 -> 11905;
11906 -> 11854;
11907 -> 11888;
11907 -> 11904;
11907 -> 11906;
11908 -> 11888;
11908 -> 11906;
11909 -> 11902;
11909 -> 11904;
11909 -> 11906;
11910 -> 11906;
11911 -> 11906;
11912 -> 11907;
11912 -> 11911;
11913 -> 11908;
11913 -> 11911;
11914 -> 11909;
11914 -> 11911;
11915 -> 11910;
11915 -> 11911;
11916 -> 11911;
11917 -> 11914;
11917 -> 11909;
11917 -> 11916;
11917 -> 11911;
11918 -> 11890;
11918 -> 11914;
11918 -> 11906;
11919 -> 11890;
11919 -> 11918;
11919 -> 11854;
11920 -> 11919;
11921 -> 11919;
11922 -> 11921;
11923 -> 0;
11923 -> 11921;
11924 -> 11921;
11924 -> 11923;
11925 -> 11889;
11925 -> 11905;
11925 -> 11854;
11926 -> 11852;
11926 -> 11924;
11926 -> 11851;
11927 -> 11926;
11927 -> 11850;
11927 -> 11851;
11928 -> 11850;
11928 -> 11924;
11928 -> 11927;
11928 -> 11849;
11929 -> 11928;
11929 -> 11844;
11930 -> 11929;
11931 -> 11846;
11931 -> 11341;
11931 -> 11929;
11932 -> 11846;
11932 -> 11354;
11932 -> 11931;
11932 -> 11353;
11932 -> 11929;
11933 -> 11842;
11934 -> 11752;
11935 -> 11374;
11936 -> 11370;
11937 -> 11368;
11938 -> 11309;
11939 -> 11309;
11940 -> 11321;
11940 -> 11939;
11941 -> 11940;
11941 -> 11354;
11941 -> 11939;
11942 -> 11939;
11943 -> 11941;
11943 -> 11942;
11943 -> 11939;
11944 -> 11939;
11945 -> 11941;
11945 -> 11944;
11945 -> 11932;
11945 -> 11939;
11946 -> 11945;
11947 -> 11309;
11948 -> 11315;
11948 -> 11309;
11949 -> 11300;
11949 -> 11946;
11949 -> 11303;
11950 -> 11304;
11950 -> 11303;
11951 -> 11949;
11951 -> 11950;
11951 -> 11946;
11951 -> 11303;
11952 -> 11300;
11952 -> 11951;
11952 -> 11296;
11953 -> 11300;
11953 -> 11951;
11953 -> 11296;
11954 -> 11290;
11954 -> 9237;
11955 -> 11954;
11955 -> 11951;
11955 -> 9237;
11956 -> 11953;
11956 -> 9237;
11957 -> 9190;
11958 -> 9117;
11958 -> 11956;
11958 -> 11957;
11958 -> 9190;
11959 -> 9116;
11959 -> 11956;
11959 -> 9112;
11960 -> 9113;
11960 -> 0;
11960 -> 9112;
11961 -> 9115;
11961 -> 9112;
11962 -> 9118;
11962 -> 9112;
11963 -> 9116;
11963 -> 9112;
11964 -> 11961;
11964 -> 11962;
11964 -> 11963;
11964 -> 9117;
11964 -> 9107;
11964 -> 11959;
11964 -> 9112;
11965 -> 9112;
11966 -> 9102;
11967 -> 9107;
11967 -> 11964;
11967 -> 9102;
11968 -> 9096;
11968 -> 7562;
11969 -> 9098;
11969 -> 11967;
11969 -> 11968;
11969 -> 9101;
11969 -> 9095;
11969 -> 9087;
11969 -> 7562;
11970 -> 9096;
11970 -> 7562;
11971 -> 9088;
11971 -> 7562;
11972 -> 9090;
11972 -> 7562;
11973 -> 9089;
11973 -> 11972;
11974 -> 11971;
11974 -> 11969;
11974 -> 11972;
11975 -> 9092;
11975 -> 11972;
11976 -> 11972;
11977 -> 11974;
11977 -> 11976;
11978 -> 11974;
11978 -> 11976;
11979 -> 11974;
11979 -> 11976;
11980 -> 11974;
11980 -> 11976;
11981 -> 11976;
11982 -> 11981;
11982 -> 11978;
11982 -> 11974;
11982 -> 11976;
11983 -> 11982;
11983 -> 11981;
11984 -> 0;
11984 -> 11976;
11985 -> 11976;
11986 -> 11982;
11986 -> 11985;
11987 -> 11984;
11987 -> 11985;
11988 -> 11987;
11988 -> 11985;
11989 -> 11985;
11990 -> 11988;
11990 -> 11989;
11991 -> 11986;
11991 -> 11989;
11992 -> 11990;
11992 -> 11989;
11993 -> 11991;
11993 -> 11992;
11993 -> 11982;
11993 -> 11984;
11993 -> 11989;
11994 -> 11993;
11994 -> 11976;
11995 -> 11973;
11995 -> 11993;
11995 -> 11972;
11996 -> 11972;
11997 -> 9095;
11997 -> 11972;
11998 -> 11971;
11998 -> 11972;
11999 -> 9089;
11999 -> 11972;
12000 -> 9091;
12000 -> 11972;
12001 -> 11969;
12001 -> 11972;
12002 -> 11996;
12002 -> 11972;
12003 -> 9093;
12003 -> 11972;
12004 -> 9094;
12004 -> 11972;
12005 -> 11972;
12006 -> 11997;
12006 -> 12005;
12007 -> 11998;
12007 -> 12005;
12008 -> 11999;
12008 -> 12005;
12009 -> 12000;
12009 -> 12005;
12010 -> 12001;
12010 -> 12005;
12011 -> 12002;
12011 -> 12005;
12012 -> 12003;
12012 -> 12005;
12013 -> 12004;
12013 -> 12005;
12014 -> 12005;
12015 -> 12006;
12015 -> 12014;
12015 -> 12005;
12016 -> 12005;
12017 -> 12011;
12017 -> 12016;
12017 -> 12005;
12018 -> 12005;
12019 -> 12006;
12019 -> 12018;
12020 -> 12019;
12020 -> 11993;
12020 -> 12018;
12021 -> 12020;
12021 -> 12005;
12022 -> 12005;
12023 -> 12005;
12024 -> 12012;
12024 -> 12005;
12025 -> 12006;
12025 -> 12024;
12026 -> 12007;
12026 -> 12024;
12027 -> 12010;
12027 -> 12024;
12028 -> 12011;
12028 -> 12024;
12029 -> 12013;
12029 -> 12024;
12030 -> 12024;
12031 -> 12025;
12031 -> 12030;
12032 -> 12026;
12032 -> 12030;
12033 -> 12027;
12033 -> 12030;
12034 -> 12028;
12034 -> 12030;
12035 -> 12029;
12035 -> 12030;
12036 -> 12035;
12036 -> 12030;
12037 -> 12030;
12038 -> 12036;
12038 -> 12037;
12039 -> 12031;
12039 -> 12037;
12040 -> 12037;
12041 -> 12039;
12041 -> 11993;
12041 -> 12040;
12041 -> 12037;
12042 -> 12041;
12043 -> 12039;
12043 -> 12041;
12044 -> 12041;
12045 -> 12043;
12045 -> 12044;
12046 -> 12045;
12046 -> 12044;
12047 -> 12044;
12048 -> 12046;
12048 -> 12047;
12049 -> 12047;
12050 -> 12048;
12050 -> 12049;
12051 -> 12049;
12052 -> 12050;
12052 -> 12051;
12053 -> 12051;
12054 -> 12052;
12054 -> 12053;
12055 -> 12054;
12055 -> 12051;
12056 -> 12052;
12056 -> 12049;
12057 -> 12049;
12058 -> 12056;
12058 -> 12057;
12059 -> 12049;
12060 -> 12058;
12060 -> 12047;
12061 -> 12047;
12062 -> 12060;
12062 -> 12061;
12063 -> 0;
12063 -> 12047;
12064 -> 12047;
12065 -> 12063;
12065 -> 12064;
12066 -> 12062;
12066 -> 12064;
12067 -> 12064;
12068 -> 12067;
12068 -> 12064;
12069 -> 12064;
12070 -> 12066;
12070 -> 12069;
12071 -> 12069;
12072 -> 12070;
12072 -> 12058;
12072 -> 12071;
12072 -> 12069;
12073 -> 12070;
12073 -> 12058;
12073 -> 12072;
12074 -> 12072;
12075 -> 12074;
12075 -> 12072;
12076 -> 12072;
12077 -> 12075;
12077 -> 12076;
12078 -> 0;
12078 -> 12076;
12079 -> 12077;
12079 -> 12076;
12080 -> 12078;
12080 -> 12076;
12081 -> 12080;
12081 -> 12072;
12082 -> 12072;
12083 -> 12070;
12083 -> 12081;
12083 -> 12069;
12084 -> 12083;
12084 -> 12064;
12085 -> 12065;
12085 -> 12064;
12086 -> 12067;
12086 -> 12064;
12087 -> 12084;
12087 -> 12085;
12087 -> 12086;
12087 -> 12081;
12087 -> 12068;
12087 -> 12064;
12088 -> 12087;
12088 -> 12064;
12089 -> 12088;
12089 -> 12044;
12090 -> 12044;
12091 -> 12089;
12091 -> 12090;
12091 -> 12044;
12092 -> 12091;
12092 -> 12044;
12093 -> 12092;
12093 -> 12044;
12094 -> 12041;
12095 -> 12094;
12095 -> 12087;
12096 -> 12095;
12096 -> 12041;
12097 -> 12041;
12098 -> 12039;
12098 -> 12097;
12099 -> 12098;
12099 -> 12087;
12099 -> 12097;
12100 -> 12097;
12101 -> 12099;
12101 -> 12100;
12102 -> 12101;
12102 -> 12099;
12102 -> 12100;
12103 -> 12100;
12104 -> 12102;
12104 -> 12103;
12105 -> 12103;
12106 -> 12104;
12106 -> 12105;
12107 -> 12105;
12108 -> 12107;
12109 -> 12106;
12109 -> 12108;
12110 -> 12109;
12110 -> 12107;
12111 -> 12105;
12112 -> 12105;
12113 -> 12106;
12113 -> 12103;
12115 -> 12114;
12116 -> 12103;
12117 -> 12113;
12117 -> 12116;
12118 -> 12117;
12118 -> 12116;
12119 -> 12116;
12120 -> 12118;
12120 -> 12119;
12121 -> 12119;
12122 -> 12120;
12122 -> 12121;
12123 -> 12122;
12123 -> 12106;
12123 -> 12121;
12124 -> 12122;
12124 -> 12106;
12124 -> 12123;
12125 -> 12123;
12126 -> 12122;
12126 -> 12125;
12127 -> 12126;
12127 -> 12125;
12128 -> 12125;
12129 -> 12125;
12130 -> 12127;
12130 -> 12129;
12131 -> 12128;
12131 -> 12129;
12132 -> 12129;
12133 -> 12131;
12133 -> 12132;
12134 -> 12131;
12134 -> 12129;
12135 -> 12130;
12135 -> 12129;
12136 -> 12130;
12136 -> 12131;
12136 -> 12129;
12137 -> 12128;
12137 -> 12123;
12138 -> 12123;
12139 -> 12124;
12139 -> 12137;
12139 -> 12138;
12139 -> 12136;
12139 -> 12106;
12139 -> 12123;
12140 -> 12122;
12140 -> 12139;
12140 -> 12121;
12141 -> 12140;
12141 -> 12119;
12142 -> 12102;
12142 -> 12103;
12143 -> 12103;
12144 -> 12142;
12144 -> 12141;
12144 -> 12143;
12145 -> 12144;
12145 -> 12103;
12146 -> 12103;
12147 -> 12145;
12147 -> 12146;
12148 -> 12147;
12148 -> 12146;
12149 -> 12146;
12150 -> 12148;
12150 -> 12149;
12151 -> 12149;
12152 -> 12150;
12153 -> 12152;
12153 -> 12150;
12154 -> 12150;
12155 -> 12150;
12156 -> 12153;
12156 -> 12155;
12157 -> 12154;
12157 -> 12155;
12158 -> 12155;
12159 -> 12157;
12159 -> 12158;
12160 -> 12158;
12161 -> 12159;
12161 -> 12160;
12162 -> 12157;
12162 -> 12155;
12163 -> 12156;
12163 -> 12155;
12164 -> 12156;
12164 -> 12157;
12164 -> 12155;
12165 -> 12102;
12165 -> 12103;
12166 -> 12102;
12166 -> 12103;
12167 -> 12103;
12168 -> 12166;
12168 -> 12167;
12169 -> 12168;
12169 -> 12164;
12169 -> 12167;
12170 -> 12169;
12170 -> 12103;
12171 -> 12165;
12171 -> 12103;
12172 -> 12103;
12173 -> 12171;
12173 -> 12172;
12174 -> 12170;
12174 -> 12172;
12175 -> 12172;
12176 -> 12175;
12176 -> 12172;
12177 -> 12172;
12178 -> 12177;
12179 -> 12175;
12179 -> 12172;
12180 -> 12174;
12180 -> 12173;
12180 -> 12179;
12180 -> 12164;
12180 -> 12176;
12180 -> 12172;
12181 -> 12180;
12181 -> 12172;
12182 -> 12103;
12183 -> 12181;
12183 -> 12182;
12184 -> 12183;
12184 -> 12182;
12185 -> 12182;
12186 -> 12184;
12186 -> 12185;
12187 -> 12186;
12187 -> 12184;
12187 -> 12185;
12188 -> 12186;
12188 -> 12185;
12189 -> 12185;
12190 -> 12100;
12191 -> 12188;
12191 -> 12190;
12192 -> 12191;
12192 -> 12190;
12193 -> 12190;
12194 -> 12192;
12194 -> 12193;
12195 -> 12194;
12195 -> 12193;
12196 -> 12195;
12196 -> 12041;
12197 -> 12096;
12197 -> 12196;
12197 -> 12041;
12198 -> 12093;
12198 -> 12197;
12200 -> 0;
12202 -> 12199;
12202 -> 12201;
12203 -> 12200;
12203 -> 12201;
12204 -> 12201;
12205 -> 12204;
12205 -> 12201;
12206 -> 12202;
12206 -> 12204;
12206 -> 12201;
12207 -> 12203;
12207 -> 12204;
12207 -> 12201;
12208 -> 12201;
12209 -> 12208;
12209 -> 12198;
12210 -> 12039;
12210 -> 12195;
12210 -> 12041;
12211 -> 12209;
12211 -> 12041;
12212 -> 12041;
12213 -> 12210;
12213 -> 12211;
12213 -> 12212;
12213 -> 12206;
12213 -> 12207;
12213 -> 12195;
12213 -> 0;
12213 -> 12041;
12214 -> 12039;
12214 -> 12213;
12214 -> 12037;
12215 -> 12214;
12215 -> 12030;
12216 -> 12215;
12216 -> 12213;
12216 -> 12030;
12217 -> 12215;
12217 -> 12213;
12217 -> 12030;
12218 -> 12034;
12218 -> 12217;
12218 -> 11996;
12218 -> 12213;
12218 -> 12030;
12219 -> 12215;
12219 -> 12218;
12219 -> 12030;
12220 -> 12030;
12221 -> 12219;
12221 -> 12220;
12221 -> 12030;
12222 -> 12221;
12223 -> 12006;
12223 -> 12005;
12224 -> 12007;
12224 -> 12005;
12225 -> 12008;
12225 -> 12005;
12226 -> 12009;
12226 -> 12005;
12227 -> 12010;
12227 -> 12005;
12228 -> 12011;
12228 -> 12005;
12229 -> 12012;
12229 -> 12005;
12230 -> 12222;
12230 -> 12005;
12231 -> 12013;
12231 -> 12005;
12232 -> 12005;
12233 -> 12005;
12234 -> 12223;
12234 -> 12233;
12235 -> 12224;
12235 -> 12233;
12236 -> 12225;
12236 -> 12233;
12237 -> 12226;
12237 -> 12233;
12238 -> 12227;
12238 -> 12233;
12239 -> 12228;
12239 -> 12233;
12240 -> 12229;
12240 -> 12233;
12241 -> 12230;
12241 -> 12233;
12242 -> 12231;
12242 -> 12233;
12243 -> 12232;
12243 -> 12233;
12244 -> 12233;
12245 -> 12243;
12245 -> 12244;
12246 -> 12243;
12246 -> 12233;
12247 -> 12243;
12247 -> 12233;
12248 -> 12243;
12248 -> 12233;
12249 -> 12243;
12249 -> 12233;
12250 -> 12243;
12250 -> 12233;
12251 -> 12243;
12251 -> 12233;
12252 -> 12243;
12252 -> 12233;
12253 -> 12243;
12253 -> 12233;
12254 -> 12243;
12254 -> 12233;
12255 -> 12243;
12255 -> 12233;
12256 -> 12243;
12256 -> 12233;
12257 -> 12233;
12258 -> 12234;
12258 -> 12257;
12258 -> 12233;
12259 -> 12233;
12260 -> 12239;
12260 -> 12259;
12260 -> 12233;
12261 -> 12234;
12261 -> 12243;
12261 -> 12233;
12262 -> 12235;
12262 -> 12243;
12262 -> 12233;
12263 -> 12236;
12263 -> 12243;
12263 -> 12233;
12264 -> 12242;
12264 -> 12243;
12264 -> 12233;
12265 -> 12239;
12265 -> 12243;
12265 -> 12233;
12266 -> 12240;
12266 -> 12243;
12266 -> 12233;
12267 -> 12241;
12267 -> 12243;
12267 -> 12233;
12268 -> 12238;
12268 -> 12243;
12268 -> 12233;
12269 -> 12238;
12269 -> 12233;
12270 -> 12233;
12271 -> 12269;
12271 -> 12270;
12272 -> 12243;
12272 -> 12270;
12273 -> 12271;
12273 -> 12270;
12274 -> 12233;
12275 -> 12236;
12275 -> 12233;
12276 -> 12235;
12276 -> 12218;
12276 -> 12275;
12277 -> 12276;
12277 -> 12243;
12277 -> 12275;
12278 -> 12237;
12278 -> 12243;
12278 -> 12233;
12279 -> 12005;
12280 -> 12006;
12280 -> 12279;
12281 -> 12280;
12281 -> 12218;
12281 -> 12279;
12282 -> 12281;
12282 -> 12005;
12283 -> 12282;
12284 -> 12283;
12284 -> 12232;
12284 -> 12282;
12285 -> 12005;
12286 -> 12006;
12286 -> 12285;
12287 -> 12285;
12288 -> 12286;
12288 -> 12287;
12289 -> 12287;
12290 -> 12288;
12290 -> 12289;
12291 -> 12289;
12292 -> 12290;
12292 -> 12291;
12293 -> 12292;
12293 -> 12218;
12293 -> 12291;
12294 -> 12292;
12294 -> 12218;
12294 -> 12291;
12295 -> 12294;
12295 -> 12289;
12296 -> 12290;
12296 -> 12218;
12296 -> 12289;
12297 -> 12285;
12298 -> 12285;
12299 -> 12296;
12299 -> 12005;
12300 -> 12005;
12301 -> 12299;
12301 -> 12300;
12302 -> 12300;
12303 -> 12005;
12304 -> 12301;
12304 -> 12303;
12305 -> 12232;
12305 -> 12303;
12306 -> 12303;
12307 -> 12304;
12307 -> 12306;
12308 -> 12307;
12308 -> 12303;
12309 -> 12005;
12310 -> 12005;
12311 -> 12232;
12311 -> 12310;
12312 -> 12311;
12312 -> 12284;
12312 -> 12310;
12313 -> 12310;
12314 -> 12312;
12314 -> 12313;
12314 -> 12310;
12315 -> 12310;
12316 -> 12315;
12316 -> 12310;
12317 -> 12312;
12317 -> 12316;
12317 -> 12283;
12317 -> 12310;
12318 -> 12005;
12319 -> 12005;
12320 -> 12007;
12320 -> 12319;
12320 -> 12005;
12321 -> 12011;
12321 -> 12320;
12322 -> 12320;
12323 -> 12321;
12323 -> 12322;
12324 -> 12007;
12324 -> 12322;
12325 -> 12324;
12325 -> 12307;
12325 -> 12322;
12326 -> 12325;
12326 -> 12320;
12327 -> 12326;
12327 -> 12320;
12328 -> 12011;
12328 -> 12320;
12329 -> 12320;
12330 -> 12327;
12330 -> 12329;
12331 -> 12328;
12331 -> 12329;
12332 -> 12232;
12332 -> 12329;
12333 -> 12330;
12333 -> 12329;
12334 -> 12320;
12335 -> 12011;
12335 -> 12320;
12336 -> 12320;
12337 -> 12335;
12337 -> 12336;
12338 -> 12007;
12338 -> 12336;
12339 -> 12336;
12340 -> 12337;
12340 -> 12336;
12341 -> 12336;
12342 -> 12340;
12342 -> 12341;
12343 -> 12338;
12343 -> 12341;
12344 -> 12341;
12345 -> 12343;
12345 -> 12344;
12346 -> 12344;
12347 -> 12346;
12347 -> 12345;
12347 -> 12344;
12348 -> 12344;
12349 -> 12345;
12349 -> 12348;
12350 -> 12348;
12351 -> 12349;
12351 -> 12307;
12351 -> 12350;
12352 -> 12350;
12353 -> 12352;
12353 -> 12351;
12353 -> 12350;
12354 -> 12351;
12354 -> 12307;
12354 -> 12350;
12355 -> 12354;
12355 -> 12348;
12356 -> 12355;
12356 -> 12344;
12357 -> 12356;
12357 -> 12341;
12358 -> 12341;
12359 -> 12343;
12359 -> 12358;
12360 -> 12358;
12361 -> 12359;
12361 -> 12307;
12361 -> 12360;
12362 -> 12360;
12363 -> 12362;
12363 -> 12361;
12363 -> 12360;
12364 -> 12361;
12364 -> 12307;
12364 -> 12360;
12365 -> 12364;
12365 -> 12358;
12366 -> 12365;
12366 -> 12341;
12367 -> 12366;
12368 -> 12357;
12368 -> 12367;
12368 -> 12366;
12369 -> 12368;
12370 -> 12336;
12371 -> 12339;
12371 -> 12336;
12372 -> 12338;
12372 -> 12307;
12372 -> 12336;
12373 -> 12371;
12373 -> 12372;
12373 -> 12339;
12373 -> 12307;
12373 -> 12347;
12373 -> 12353;
12373 -> 12363;
12373 -> 12336;
12374 -> 12339;
12374 -> 12336;
12375 -> 12338;
12375 -> 12373;
12375 -> 12336;
12376 -> 12339;
12376 -> 12336;
12377 -> 12338;
12377 -> 12375;
12377 -> 12336;
12378 -> 12339;
12378 -> 12336;
12379 -> 12338;
12379 -> 12377;
12379 -> 12336;
12380 -> 12339;
12380 -> 12336;
12381 -> 12338;
12381 -> 12379;
12381 -> 12336;
12382 -> 12339;
12382 -> 12336;
12383 -> 12338;
12383 -> 12381;
12383 -> 12336;
12384 -> 12339;
12384 -> 12336;
12385 -> 12338;
12385 -> 12383;
12385 -> 12336;
12386 -> 12339;
12386 -> 12336;
12387 -> 12338;
12387 -> 12385;
12387 -> 12336;
12388 -> 12339;
12388 -> 12387;
12388 -> 12336;
12389 -> 12388;
12389 -> 12320;
12390 -> 12389;
12390 -> 12320;
12391 -> 12011;
12391 -> 12320;
12392 -> 12320;
12393 -> 12390;
12393 -> 12392;
12394 -> 12391;
12394 -> 12392;
12395 -> 12232;
12395 -> 12392;
12396 -> 12393;
12396 -> 12392;
12397 -> 12320;
12398 -> 12320;
12399 -> 12006;
12399 -> 12398;
12400 -> 12399;
12400 -> 12387;
12400 -> 12398;
12401 -> 12400;
12401 -> 12320;
12402 -> 12232;
12402 -> 12320;
12403 -> 12007;
12403 -> 12320;
12404 -> 12011;
12404 -> 12320;
12405 -> 12320;
12406 -> 12402;
12406 -> 12405;
12407 -> 12403;
12407 -> 12405;
12408 -> 12404;
12408 -> 12405;
12409 -> 12401;
12409 -> 12405;
12410 -> 12405;
12411 -> 12407;
12411 -> 12410;
12412 -> 0;
12412 -> 12410;
12413 -> 12412;
12413 -> 12405;
12414 -> 12405;
12415 -> 12414;
12415 -> 12405;
12416 -> 12405;
12417 -> 12415;
12417 -> 12416;
12418 -> 12409;
12418 -> 12416;
12419 -> 12417;
12419 -> 12414;
12419 -> 12416;
12420 -> 12418;
12420 -> 12387;
12420 -> 12416;
12421 -> 12416;
12422 -> 12420;
12422 -> 12421;
12422 -> 12416;
12423 -> 12405;
12424 -> 12409;
12424 -> 12387;
12424 -> 12405;
12425 -> 12424;
12426 -> 12407;
12426 -> 12387;
12426 -> 0;
12426 -> 12424;
12427 -> 6750;
12427 -> 12426;
12428 -> 12424;
12429 -> 12407;
12429 -> 12428;
12430 -> 12428;
12431 -> 12430;
12431 -> 12424;
12432 -> 12414;
12432 -> 12424;
12433 -> 12432;
12433 -> 12419;
12433 -> 12424;
12434 -> 12409;
12434 -> 12387;
12434 -> 12424;
12435 -> 12405;
12436 -> 12414;
12436 -> 12419;
12436 -> 12435;
12436 -> 12405;
12437 -> 12414;
12437 -> 12419;
12437 -> 12405;
12438 -> 12405;
12439 -> 12438;
12439 -> 12405;
12440 -> 12405;
12441 -> 12439;
12441 -> 12440;
12442 -> 12409;
12442 -> 12440;
12443 -> 12441;
12443 -> 12438;
12443 -> 12440;
12444 -> 12442;
12444 -> 12434;
12444 -> 12440;
12445 -> 12440;
12446 -> 12444;
12446 -> 12445;
12446 -> 12440;
12447 -> 12405;
12448 -> 12438;
12448 -> 12405;
12449 -> 12448;
12449 -> 12443;
12449 -> 12405;
12450 -> 12438;
12450 -> 12443;
12450 -> 12405;
12451 -> 12320;
12452 -> 12320;
12453 -> 12232;
12453 -> 12452;
12454 -> 12453;
12454 -> 12284;
12454 -> 12452;
12455 -> 12452;
12456 -> 12454;
12456 -> 12455;
12456 -> 12452;
12457 -> 12452;
12458 -> 12457;
12458 -> 12452;
12459 -> 12454;
12459 -> 12458;
12459 -> 12317;
12459 -> 12452;
12460 -> 12320;
12461 -> 12007;
12461 -> 12434;
12461 -> 12320;
12462 -> 12320;
12463 -> 12461;
12463 -> 12462;
12463 -> 12320;
12464 -> 12005;
12465 -> 12007;
12465 -> 12464;
12465 -> 12005;
12466 -> 12005;
12467 -> 12007;
12467 -> 12434;
12467 -> 12466;
12468 -> 12467;
12468 -> 12434;
12468 -> 12466;
12469 -> 12468;
12469 -> 12005;
12470 -> 12232;
12470 -> 12256;
12470 -> 12469;
12470 -> 12005;
12471 -> 12005;
12472 -> 12006;
12472 -> 12471;
12473 -> 12472;
12473 -> 12434;
12473 -> 12471;
12474 -> 12473;
12474 -> 12005;
12475 -> 12005;
12476 -> 12012;
12476 -> 12475;
12476 -> 12005;
12477 -> 12006;
12477 -> 12476;
12478 -> 12011;
12478 -> 12476;
12479 -> 12013;
12479 -> 12476;
12480 -> 12476;
12481 -> 12477;
12481 -> 12480;
12482 -> 12478;
12482 -> 12480;
12483 -> 12479;
12483 -> 12480;
12484 -> 12480;
12485 -> 12481;
12485 -> 12484;
12486 -> 12484;
12487 -> 12485;
12487 -> 12486;
12488 -> 12486;
12489 -> 12487;
12489 -> 12488;
12490 -> 12489;
12490 -> 12474;
12490 -> 12488;
12491 -> 12489;
12491 -> 12474;
12491 -> 12488;
12492 -> 12491;
12492 -> 12486;
12493 -> 12487;
12493 -> 12474;
12493 -> 12486;
12494 -> 12493;
12494 -> 12480;
12495 -> 12483;
12495 -> 12480;
12496 -> 12480;
12497 -> 12495;
12497 -> 12496;
12498 -> 12494;
12498 -> 12496;
12499 -> 12498;
12499 -> 12493;
12499 -> 12496;
12500 -> 12499;
12501 -> 12497;
12501 -> 12499;
12502 -> 12501;
12502 -> 12500;
12503 -> 12500;
12504 -> 12502;
12504 -> 12503;
12505 -> 12503;
12506 -> 12504;
12506 -> 12505;
12506 -> 12503;
12507 -> 12500;
12508 -> 0;
12508 -> 12499;
12509 -> 12499;
12510 -> 12508;
12510 -> 12509;
12511 -> 12498;
12511 -> 12509;
12512 -> 12510;
12512 -> 12509;
12513 -> 12509;
12514 -> 12512;
12514 -> 12513;
12515 -> 12511;
12515 -> 12501;
12515 -> 12513;
12516 -> 12515;
12516 -> 12501;
12516 -> 12514;
12516 -> 12513;
12517 -> 12499;
12518 -> 12499;
12519 -> 12499;
12520 -> 12498;
12520 -> 12519;
12521 -> 12519;
12522 -> 12520;
12522 -> 12521;
12523 -> 12522;
12523 -> 12501;
12523 -> 12521;
12524 -> 12519;
12525 -> 12519;
12526 -> 12520;
12526 -> 12501;
12526 -> 12525;
12526 -> 12519;
12527 -> 12526;
12527 -> 12499;
12528 -> 12499;
12529 -> 12498;
12529 -> 12528;
12530 -> 12528;
12531 -> 12529;
12531 -> 12501;
12531 -> 12530;
12532 -> 12531;
12532 -> 12501;
12532 -> 12528;
12533 -> 12532;
12533 -> 12528;
12534 -> 12533;
12534 -> 12499;
12535 -> 12527;
12535 -> 12534;
12535 -> 12499;
12536 -> 12499;
12537 -> 12498;
12537 -> 12501;
12537 -> 12499;
12538 -> 12498;
12538 -> 12501;
12538 -> 12499;
12539 -> 12498;
12539 -> 12501;
12539 -> 12499;
12540 -> 12518;
12540 -> 12499;
12541 -> 12539;
12541 -> 12540;
12541 -> 12501;
12541 -> 12499;
12542 -> 12498;
12542 -> 12541;
12542 -> 12496;
12543 -> 12498;
12543 -> 12541;
12543 -> 12496;
12544 -> 12482;
12544 -> 12543;
12544 -> 12541;
12544 -> 12480;
12545 -> 12476;
12546 -> 12476;
12547 -> 12007;
12547 -> 12546;
12547 -> 12476;
12548 -> 12476;
12549 -> 12222;
12549 -> 12548;
12550 -> 12546;
12550 -> 12548;
12551 -> 12550;
12551 -> 12548;
12552 -> 12549;
12552 -> 12551;
12553 -> 12222;
12553 -> 12546;
12553 -> 12476;
12554 -> 12547;
12554 -> 12553;
12554 -> 12476;
12555 -> 11972;
12556 -> 11996;
12556 -> 11972;
12557 -> 12556;
12557 -> 12544;
12557 -> 11972;
12558 -> 11971;
12558 -> 12557;
12559 -> 11996;
12559 -> 12557;
12560 -> 12557;
12561 -> 12558;
12561 -> 12560;
12562 -> 12559;
12562 -> 12560;
12563 -> 9095;
12563 -> 12560;
12564 -> 12563;
12564 -> 12557;
12564 -> 12560;
12565 -> 12563;
12565 -> 12557;
12565 -> 12560;
12566 -> 12557;
12567 -> 9092;
12567 -> 11972;
12568 -> 11996;
12568 -> 11972;
12569 -> 9094;
12569 -> 11972;
12570 -> 12567;
12570 -> 12568;
12570 -> 12569;
12570 -> 9095;
12570 -> 12557;
12570 -> 9087;
12570 -> 11972;
12571 -> 11972;
12572 -> 11969;
12572 -> 12570;
12572 -> 11972;
12573 -> 7562;
12574 -> 7568;
12574 -> 12573;
12574 -> 12570;
12574 -> 7532;
12575 -> 7568;
12575 -> 7562;
12576 -> 7568;
12576 -> 7562;
12577 -> 7568;
12577 -> 7562;
12578 -> 7568;
12578 -> 7562;
12579 -> 7568;
12579 -> 7562;
12580 -> 7568;
12580 -> 7562;
12581 -> 7568;
12581 -> 7562;
12582 -> 7562;
12583 -> 12575;
12583 -> 7562;
12584 -> 12577;
12584 -> 7562;
12585 -> 12582;
12585 -> 7562;
12586 -> 12581;
12586 -> 12583;
12586 -> 12584;
12586 -> 12585;
12586 -> 12574;
12586 -> 12582;
12586 -> 7562;
12587 -> 12575;
12587 -> 12586;
12587 -> 7562;
12588 -> 7562;
12589 -> 12581;
12589 -> 12588;
12590 -> 12588;
12591 -> 12589;
12591 -> 12590;
12592 -> 12591;
12592 -> 12586;
12592 -> 12590;
12593 -> 12591;
12593 -> 12586;
12593 -> 12590;
12594 -> 12593;
12594 -> 12588;
12595 -> 12589;
12595 -> 12586;
12595 -> 12588;
12596 -> 12595;
12596 -> 7562;
12597 -> 7562;
12598 -> 12596;
12598 -> 12597;
12599 -> 7562;
12600 -> 12582;
12600 -> 7562;
12601 -> 7562;
12602 -> 12600;
12602 -> 12601;
12603 -> 12581;
12603 -> 12601;
12604 -> 12601;
12605 -> 12603;
12605 -> 12604;
12606 -> 12604;
12607 -> 12605;
12607 -> 12606;
12608 -> 12607;
12608 -> 12598;
12608 -> 12606;
12609 -> 12607;
12609 -> 12598;
12609 -> 12606;
12610 -> 12609;
12610 -> 12604;
12611 -> 12605;
12611 -> 12598;
12611 -> 12604;
12612 -> 12611;
12612 -> 12601;
12613 -> 12601;
12614 -> 12612;
12614 -> 12613;
12615 -> 12601;
12616 -> 12615;
12616 -> 12614;
12616 -> 12611;
12616 -> 12601;
12617 -> 12614;
12617 -> 12615;
12617 -> 12611;
12617 -> 12616;
12618 -> 12616;
12619 -> 12618;
12619 -> 12616;
12620 -> 12616;
12621 -> 12617;
12621 -> 12620;
12622 -> 12621;
12622 -> 12616;
12623 -> 12622;
12623 -> 12616;
12624 -> 12601;
12625 -> 12624;
12625 -> 7562;
12626 -> 12579;
12626 -> 7562;
12627 -> 12582;
12627 -> 7562;
12628 -> 12580;
12628 -> 7562;
12629 -> 12626;
12629 -> 12627;
12629 -> 12628;
12629 -> 12581;
12629 -> 12622;
12629 -> 12574;
12629 -> 7562;
12630 -> 7562;
12631 -> 12580;
12631 -> 12574;
12631 -> 12629;
12631 -> 7562;
12632 -> 7562;
12633 -> 12578;
12633 -> 7562;
12634 -> 7562;
12639 -> 12636;
12639 -> 12635;
12640 -> 12637;
12640 -> 12635;
12641 -> 12638;
12641 -> 12635;
12642 -> 12635;
12643 -> 12581;
12643 -> 7562;
12644 -> 12633;
12644 -> 7562;
12645 -> 12576;
12645 -> 7562;
12646 -> 12632;
12646 -> 7562;
12647 -> 12580;
12647 -> 7562;
12648 -> 7562;
12649 -> 7562;
12650 -> 12643;
12650 -> 12649;
12651 -> 12644;
12651 -> 12649;
12652 -> 12645;
12652 -> 12649;
12653 -> 12646;
12653 -> 12649;
12654 -> 12647;
12654 -> 12649;
12655 -> 12648;
12655 -> 12649;
12656 -> 12648;
12656 -> 12649;
12657 -> 12649;
12658 -> 12649;
12659 -> 12652;
12659 -> 12658;
12659 -> 12649;
12660 -> 12649;
12661 -> 12650;
12661 -> 12660;
12662 -> 12660;
12663 -> 12661;
12663 -> 12662;
12664 -> 12663;
12664 -> 12631;
12664 -> 12662;
12665 -> 12663;
12665 -> 12631;
12665 -> 12662;
12666 -> 12665;
12666 -> 12660;
12667 -> 12661;
12667 -> 12631;
12667 -> 12660;
12668 -> 12667;
12668 -> 12649;
12669 -> 12649;
12670 -> 12668;
12670 -> 12669;
12671 -> 12670;
12671 -> 12651;
12671 -> 12649;
12672 -> 12650;
12672 -> 12649;
12673 -> 12657;
12673 -> 12649;
12674 -> 12655;
12674 -> 12649;
12675 -> 12656;
12675 -> 12649;
12676 -> 12649;
12677 -> 12653;
12677 -> 12649;
12678 -> 12654;
12678 -> 12649;
12679 -> 12649;
12680 -> 12671;
12680 -> 12679;
12681 -> 12672;
12681 -> 12679;
12682 -> 12673;
12682 -> 12679;
12683 -> 12674;
12683 -> 12679;
12684 -> 12675;
12684 -> 12679;
12685 -> 12676;
12685 -> 12679;
12686 -> 12676;
12686 -> 12679;
12687 -> 12677;
12687 -> 12679;
12688 -> 12678;
12688 -> 12679;
12689 -> 12676;
12689 -> 12679;
12690 -> 12679;
12691 -> 12689;
12691 -> 12690;
12692 -> 12689;
12692 -> 12679;
12693 -> 12689;
12693 -> 12679;
12694 -> 12689;
12694 -> 12679;
12695 -> 12689;
12695 -> 12679;
12696 -> 12689;
12696 -> 12679;
12697 -> 12689;
12697 -> 12679;
12698 -> 12689;
12698 -> 12679;
12699 -> 12689;
12699 -> 12679;
12700 -> 12689;
12700 -> 12679;
12701 -> 12689;
12701 -> 12679;
12702 -> 12689;
12702 -> 12679;
12703 -> 12689;
12703 -> 12679;
12704 -> 12680;
12704 -> 12689;
12704 -> 12679;
12705 -> 12681;
12705 -> 12689;
12705 -> 12679;
12706 -> 12682;
12706 -> 12689;
12706 -> 12679;
12707 -> 12683;
12707 -> 12689;
12707 -> 12679;
12708 -> 12684;
12708 -> 12689;
12708 -> 12679;
12709 -> 12685;
12709 -> 12689;
12709 -> 12679;
12710 -> 12686;
12710 -> 12689;
12710 -> 12679;
12711 -> 12687;
12711 -> 12689;
12711 -> 12679;
12712 -> 12688;
12712 -> 12689;
12712 -> 12679;
12713 -> 12649;
12714 -> 12650;
12714 -> 12713;
12715 -> 12713;
12716 -> 12714;
12716 -> 12715;
12717 -> 12716;
12717 -> 12667;
12717 -> 12715;
12718 -> 12716;
12718 -> 12667;
12718 -> 12715;
12719 -> 12718;
12719 -> 12713;
12720 -> 12714;
12720 -> 12667;
12720 -> 12713;
12721 -> 12720;
12721 -> 12649;
12722 -> 12649;
12723 -> 12721;
12723 -> 12722;
12724 -> 12722;
12725 -> 12649;
12726 -> 12723;
12726 -> 12725;
12727 -> 12676;
12727 -> 12725;
12728 -> 12725;
12729 -> 12727;
12729 -> 12726;
12730 -> 12726;
12731 -> 12729;
12731 -> 12726;
12732 -> 12731;
12732 -> 12712;
12732 -> 12631;
12732 -> 12720;
12732 -> 12726;
12733 -> 12726;
12734 -> 12730;
12734 -> 12733;
12735 -> 12734;
12735 -> 12733;
12736 -> 12733;
12737 -> 12735;
12737 -> 12736;
12738 -> 12737;
12738 -> 12732;
12738 -> 12736;
12739 -> 12738;
12739 -> 12733;
12740 -> 12733;
12741 -> 12733;
12741 -> 12726;
12742 -> 12741;
12743 -> 12731;
12743 -> 12704;
12743 -> 12742;
12743 -> 12741;
12744 -> 12741;
12745 -> 12741;
12746 -> 12744;
12746 -> 12745;
12747 -> 12731;
12747 -> 12745;
12748 -> 12747;
12748 -> 12703;
12748 -> 12745;
12749 -> 12745;
12750 -> 12748;
12751 -> 12747;
12751 -> 12706;
12751 -> 12750;
12751 -> 12748;
12752 -> 12741;
12753 -> 12741;
12754 -> 12752;
12754 -> 12753;
12755 -> 12731;
12755 -> 12753;
12756 -> 12755;
12756 -> 12703;
12756 -> 12753;
12757 -> 12753;
12758 -> 12756;
12759 -> 12755;
12759 -> 12706;
12759 -> 12758;
12759 -> 12756;
12760 -> 12741;
12761 -> 12731;
12761 -> 12760;
12762 -> 12761;
12762 -> 12702;
12762 -> 12760;
12763 -> 12741;
12764 -> 12741;
12765 -> 12731;
12765 -> 12705;
12765 -> 12764;
12766 -> 12765;
12766 -> 12732;
12766 -> 12764;
12767 -> 12766;
12767 -> 12741;
12768 -> 12767;
12769 -> 12767;
12770 -> 12768;
12770 -> 12769;
12771 -> 12731;
12771 -> 12769;
12772 -> 12771;
12772 -> 12703;
12772 -> 12769;
12773 -> 12769;
12774 -> 12772;
12775 -> 12771;
12775 -> 12706;
12775 -> 12774;
12775 -> 12772;
12776 -> 12767;
12777 -> 12731;
12777 -> 12776;
12778 -> 12777;
12778 -> 12762;
12778 -> 12776;
12779 -> 12767;
12780 -> 12767;
12781 -> 12731;
12781 -> 12704;
12781 -> 12780;
12781 -> 12767;
12782 -> 12767;
12783 -> 12780;
12783 -> 12782;
12784 -> 12780;
12784 -> 12782;
12785 -> 12731;
12785 -> 12782;
12786 -> 12783;
12786 -> 12782;
12787 -> 12784;
12787 -> 12782;
12788 -> 12786;
12788 -> 12787;
12788 -> 12782;
12789 -> 12782;
12790 -> 12788;
12790 -> 12789;
12791 -> 12785;
12791 -> 12789;
12792 -> 12791;
12792 -> 12703;
12792 -> 12789;
12793 -> 12789;
12794 -> 12792;
12795 -> 12791;
12795 -> 12706;
12795 -> 12794;
12795 -> 12792;
12796 -> 12782;
12797 -> 12767;
12798 -> 12731;
12798 -> 12797;
12799 -> 12798;
12799 -> 12778;
12799 -> 12797;
12800 -> 12797;
12801 -> 12798;
12801 -> 12799;
12801 -> 12800;
12801 -> 12797;
12802 -> 12767;
12803 -> 12767;
12804 -> 12767;
12805 -> 12803;
12805 -> 12804;
12806 -> 12731;
12806 -> 12804;
12807 -> 12806;
12807 -> 12703;
12807 -> 12804;
12808 -> 12804;
12809 -> 12807;
12810 -> 12806;
12810 -> 12706;
12810 -> 12809;
12810 -> 12807;
12811 -> 12741;
12812 -> 12741;
12813 -> 12811;
12813 -> 12812;
12814 -> 12731;
12814 -> 12812;
12815 -> 12814;
12815 -> 12703;
12815 -> 12812;
12816 -> 12812;
12817 -> 12815;
12818 -> 12814;
12818 -> 12706;
12818 -> 12817;
12818 -> 12815;
12819 -> 12741;
12820 -> 12731;
12820 -> 12819;
12821 -> 12820;
12821 -> 12799;
12821 -> 12819;
12822 -> 12741;
12823 -> 12731;
12823 -> 12710;
12823 -> 12726;
12824 -> 12726;
12825 -> 12730;
12825 -> 12824;
12826 -> 12825;
12826 -> 12732;
12826 -> 12824;
12827 -> 12825;
12827 -> 12732;
12827 -> 12824;
12828 -> 12827;
12828 -> 12726;
12829 -> 12731;
12829 -> 12712;
12829 -> 12732;
12829 -> 12828;
12830 -> 12731;
12830 -> 12828;
12831 -> 12828;
12832 -> 12830;
12832 -> 12831;
12833 -> 12832;
12833 -> 12712;
12833 -> 12829;
12833 -> 12831;
12834 -> 12831;
12835 -> 12831;
12835 -> 12834;
12836 -> 12834;
12837 -> 12836;
12837 -> 12831;
12838 -> 12832;
12838 -> 12710;
12838 -> 12831;
12839 -> 12831;
12840 -> 12831;
12840 -> 12839;
12841 -> 12840;
12841 -> 12732;
12841 -> 12833;
12841 -> 12839;
12842 -> 12839;
12843 -> 12840;
12843 -> 12732;
12843 -> 12833;
12843 -> 12842;
12843 -> 12839;
12844 -> 12831;
12845 -> 12833;
12846 -> 12833;
12847 -> 12846;
12847 -> 12833;
12848 -> 12833;
12849 -> 12847;
12849 -> 12848;
12850 -> 12845;
12850 -> 12848;
12851 -> 12850;
12851 -> 12712;
12851 -> 12833;
12851 -> 12848;
12852 -> 12848;
12853 -> 12850;
12853 -> 12707;
12853 -> 12852;
12853 -> 12848;
12854 -> 12849;
12854 -> 12848;
12855 -> 12848;
12856 -> 12854;
12856 -> 12855;
12857 -> 12850;
12857 -> 12855;
12858 -> 12857;
12858 -> 12712;
12858 -> 12851;
12858 -> 12855;
12859 -> 12856;
12859 -> 12855;
12860 -> 12855;
12861 -> 12859;
12861 -> 12860;
12862 -> 12860;
12863 -> 12861;
12863 -> 12862;
12864 -> 12862;
12865 -> 12864;
12865 -> 12860;
12866 -> 12861;
12866 -> 12860;
12867 -> 12860;
12868 -> 12866;
12868 -> 12867;
12869 -> 12867;
12870 -> 12868;
12870 -> 12869;
12871 -> 12869;
12871 -> 12867;
12872 -> 12871;
12872 -> 12860;
12873 -> 12865;
12873 -> 12872;
12873 -> 12860;
12874 -> 12873;
12874 -> 12861;
12874 -> 12860;
12875 -> 12855;
12876 -> 12857;
12876 -> 12707;
12876 -> 12875;
12876 -> 12855;
12877 -> 12856;
12877 -> 12855;
12878 -> 12855;
12879 -> 12877;
12879 -> 12878;
12880 -> 12879;
12880 -> 12878;
12881 -> 12880;
12881 -> 12878;
12882 -> 12878;
12883 -> 12881;
12883 -> 12855;
12884 -> 12855;
12885 -> 12855;
12886 -> 12885;
12886 -> 12855;
12887 -> 12856;
12887 -> 12855;
12888 -> 12884;
12888 -> 12855;
12889 -> 12885;
12889 -> 12855;
12890 -> 12855;
12891 -> 12887;
12891 -> 12890;
12892 -> 12888;
12892 -> 12890;
12893 -> 12889;
12893 -> 12890;
12894 -> 12857;
12894 -> 12890;
12895 -> 0;
12895 -> 12890;
12896 -> 12890;
12897 -> 12890;
12898 -> 12890;
12899 -> 12891;
12899 -> 12898;
12900 -> 0;
12900 -> 12898;
12901 -> 12900;
12901 -> 12890;
12902 -> 12890;
12903 -> 12897;
12903 -> 12902;
12903 -> 12890;
12904 -> 0;
12904 -> 12903;
12905 -> 12890;
12906 -> 12905;
12906 -> 12855;
12907 -> 12904;
12907 -> 0;
12907 -> 12855;
12908 -> 12895;
12908 -> 0;
12908 -> 12907;
12909 -> 12907;
12910 -> 12848;
12911 -> 12850;
12911 -> 12710;
12911 -> 12848;
12912 -> 12911;
12913 -> 12849;
12913 -> 12912;
12914 -> 12912;
12915 -> 12913;
12915 -> 12914;
12916 -> 12914;
12917 -> 12915;
12917 -> 12833;
12917 -> 12858;
12917 -> 12916;
12917 -> 12914;
12918 -> 12917;
12919 -> 12915;
12919 -> 12918;
12920 -> 12918;
12921 -> 12919;
12921 -> 12833;
12921 -> 12858;
12921 -> 12918;
12922 -> 12921;
12923 -> 12919;
12923 -> 12922;
12924 -> 12922;
12925 -> 12923;
12925 -> 12833;
12925 -> 12858;
12925 -> 12924;
12925 -> 12922;
12926 -> 12925;
12927 -> 12925;
12928 -> 12923;
12928 -> 12927;
12929 -> 12927;
12930 -> 12928;
12930 -> 12929;
12931 -> 12930;
12931 -> 12833;
12931 -> 12858;
12931 -> 12929;
12932 -> 12929;
12933 -> 12931;
12933 -> 12932;
12934 -> 12932;
12934 -> 12929;
12935 -> 12929;
12936 -> 12931;
12936 -> 12935;
12937 -> 12935;
12938 -> 12936;
12938 -> 12833;
12938 -> 12858;
12938 -> 12937;
12939 -> 12938;
12939 -> 12935;
12940 -> 12939;
12940 -> 12929;
12941 -> 12940;
12941 -> 12927;
12942 -> 12927;
12943 -> 12941;
12943 -> 12942;
12944 -> 12943;
12944 -> 12927;
12945 -> 12927;
12946 -> 12945;
12946 -> 12927;
12947 -> 12928;
12947 -> 12833;
12947 -> 12858;
12947 -> 12927;
12948 -> 12944;
12948 -> 12947;
12948 -> 12858;
12948 -> 12833;
12948 -> 12927;
12949 -> 12948;
12949 -> 12927;
12950 -> 12927;
12951 -> 12950;
12951 -> 12925;
12952 -> 12926;
12952 -> 12951;
12952 -> 12950;
12952 -> 12925;
12953 -> 12926;
12953 -> 12925;
12954 -> 12925;
12955 -> 12953;
12955 -> 12954;
12956 -> 12954;
12957 -> 12955;
12957 -> 12952;
12957 -> 12956;
12957 -> 12954;
12958 -> 10375;
12958 -> 12957;
12959 -> 12923;
12959 -> 12833;
12959 -> 12948;
12959 -> 12925;
12960 -> 12958;
12960 -> 12925;
12961 -> 12925;
12962 -> 12959;
12962 -> 12960;
12962 -> 12961;
12962 -> 10374;
12962 -> 12948;
12962 -> 0;
12962 -> 12925;
12963 -> 12925;
12964 -> 12962;
12964 -> 12963;
12964 -> 12925;
12965 -> 12964;
12966 -> 12965;
12967 -> 12965;
12967 -> 12966;
12968 -> 12966;
12968 -> 12965;
12969 -> 12965;
12969 -> 12964;
12970 -> 12958;
12970 -> 12964;
12971 -> 12964;
12972 -> 12970;
12972 -> 12971;
12973 -> 12969;
12973 -> 12971;
12974 -> 12971;
12975 -> 12973;
12975 -> 12962;
12975 -> 12974;
12975 -> 12971;
12976 -> 12964;
12977 -> 12926;
12977 -> 12952;
12977 -> 12925;
12978 -> 12921;
12979 -> 12921;
12980 -> 0;
12980 -> 12921;
12981 -> 0;
12981 -> 12921;
12982 -> 0;
12982 -> 12921;
12983 -> 0;
12983 -> 12921;
12984 -> 12921;
12985 -> 12919;
12985 -> 12984;
12986 -> 12985;
12986 -> 12833;
12986 -> 12962;
12986 -> 12984;
12987 -> 12986;
12987 -> 0;
12987 -> 12984;
12988 -> 12985;
12988 -> 12833;
12988 -> 12962;
12988 -> 12987;
12989 -> 12988;
12990 -> 12988;
12991 -> 12989;
12991 -> 12990;
12992 -> 12985;
12992 -> 12990;
12993 -> 12992;
12993 -> 12833;
12993 -> 12962;
12993 -> 12990;
12994 -> 10221;
12994 -> 12990;
12995 -> 12993;
12996 -> 12992;
12996 -> 12995;
12997 -> 12996;
12997 -> 12833;
12997 -> 12962;
12997 -> 12995;
12998 -> 12997;
12999 -> 12998;
13000 -> 12998;
13000 -> 12999;
13001 -> 12999;
13001 -> 12998;
13002 -> 12998;
13002 -> 12997;
13003 -> 12997;
13004 -> 13002;
13004 -> 13003;
13005 -> 13004;
13005 -> 12997;
13006 -> 12996;
13006 -> 12833;
13006 -> 12962;
13006 -> 12997;
13007 -> 13005;
13007 -> 12997;
13008 -> 13002;
13008 -> 13007;
13009 -> 12996;
13009 -> 13007;
13010 -> 13007;
13011 -> 13007;
13012 -> 13008;
13012 -> 13011;
13013 -> 13009;
13013 -> 13011;
13014 -> 13010;
13014 -> 13011;
13015 -> 13012;
13015 -> 13011;
13016 -> 13013;
13016 -> 13011;
13017 -> 13011;
13018 -> 13011;
13019 -> 13015;
13019 -> 13018;
13020 -> 13016;
13020 -> 13018;
13021 -> 13017;
13021 -> 13018;
13022 -> 13014;
13022 -> 13018;
13023 -> 13018;
13024 -> 13019;
13024 -> 13023;
13025 -> 13018;
13026 -> 13019;
13026 -> 13025;
13027 -> 13026;
13027 -> 13018;
13028 -> 13027;
13030 -> 13029;
13031 -> 13029;
13032 -> 13031;
13032 -> 13018;
13033 -> 13019;
13033 -> 13018;
13034 -> 13018;
13035 -> 13034;
13035 -> 13024;
13035 -> 13028;
13035 -> 13032;
13035 -> 13033;
13035 -> 13005;
13035 -> 13030;
13035 -> 13018;
13036 -> 13034;
13036 -> 13018;
13037 -> 13034;
13037 -> 13018;
13038 -> 13018;
13039 -> 13019;
13039 -> 13038;
13039 -> 13018;
13040 -> 13020;
13040 -> 13034;
13040 -> 13018;
13041 -> 13021;
13041 -> 13034;
13041 -> 13018;
13042 -> 13005;
13042 -> 13007;
13043 -> 13042;
13043 -> 13010;
13043 -> 13005;
13043 -> 13035;
13043 -> 13036;
13043 -> 13040;
13043 -> 13037;
13043 -> 13041;
13043 -> 12833;
13043 -> 12962;
13043 -> 13007;
13044 -> 13043;
13044 -> 13010;
13045 -> 13044;
13045 -> 13043;
13045 -> 13010;
13046 -> 13043;
13046 -> 13010;
13047 -> 13043;
13047 -> 13010;
13048 -> 13043;
13048 -> 13010;
13049 -> 13046;
13049 -> 13010;
13050 -> 13010;
13051 -> 13049;
13051 -> 13050;
13052 -> 13048;
13052 -> 13045;
13052 -> 13050;
13053 -> 13050;
13054 -> 13052;
13054 -> 13053;
13055 -> 13053;
13056 -> 13054;
13056 -> 13055;
13057 -> 13055;
13058 -> 13056;
13058 -> 13045;
13058 -> 13057;
13058 -> 13055;
13059 -> 13053;
13060 -> 13054;
13060 -> 13050;
13061 -> 13051;
13061 -> 13060;
13061 -> 13045;
13061 -> 13050;
13062 -> 13060;
13062 -> 13051;
13062 -> 13045;
13062 -> 13061;
13063 -> 13010;
13064 -> 13062;
13064 -> 13063;
13064 -> 13010;
13065 -> 13047;
13065 -> 13010;
13066 -> 13010;
13067 -> 13010;
13068 -> 13065;
13068 -> 13067;
13069 -> 13066;
13069 -> 13067;
13070 -> 13062;
13070 -> 13067;
13071 -> 13068;
13071 -> 13067;
13072 -> 13067;
13073 -> 13069;
13073 -> 13067;
13074 -> 13070;
13074 -> 13067;
13075 -> 13071;
13075 -> 13067;
13076 -> 13067;
13077 -> 13075;
13077 -> 13076;
13078 -> 13074;
13078 -> 13062;
13078 -> 13076;
13079 -> 13078;
13079 -> 13076;
13080 -> 13077;
13080 -> 13076;
13081 -> 13076;
13082 -> 13076;
13083 -> 13079;
13083 -> 13082;
13084 -> 13080;
13084 -> 13082;
13085 -> 13081;
13085 -> 13082;
13086 -> 13081;
13086 -> 13082;
13087 -> 13083;
13087 -> 13082;
13088 -> 13082;
13089 -> 13085;
13089 -> 13082;
13090 -> 13084;
13090 -> 13045;
13090 -> 13082;
13091 -> 13084;
13091 -> 13045;
13091 -> 13082;
13092 -> 13086;
13092 -> 13082;
13093 -> 13086;
13093 -> 13082;
13094 -> 13086;
13094 -> 13082;
13095 -> 13086;
13095 -> 13082;
13096 -> 13082;
13097 -> 13090;
13097 -> 13096;
13097 -> 13082;
13098 -> 13086;
13098 -> 13082;
13099 -> 13086;
13099 -> 13082;
13100 -> 13086;
13100 -> 13082;
13101 -> 13086;
13101 -> 13082;
13102 -> 13086;
13102 -> 13082;
13103 -> 13086;
13103 -> 13082;
13104 -> 13082;
13105 -> 13087;
13105 -> 13104;
13105 -> 13082;
13106 -> 13082;
13107 -> 13091;
13107 -> 13106;
13107 -> 13082;
13108 -> 13082;
13109 -> 13088;
13109 -> 13108;
13109 -> 13082;
13110 -> 13088;
13110 -> 13086;
13110 -> 13082;
13111 -> 13081;
13111 -> 13067;
13112 -> 13111;
13112 -> 13067;
13113 -> 13111;
13113 -> 13067;
13114 -> 13113;
13114 -> 13010;
13115 -> 13084;
13115 -> 13114;
13115 -> 13045;
13115 -> 13090;
13115 -> 13086;
13115 -> 13091;
13115 -> 13087;
13115 -> 13089;
13115 -> 13110;
13115 -> 13062;
13115 -> 13007;
13116 -> 13084;
13116 -> 13010;
13117 -> 13084;
13117 -> 13010;
13118 -> 13084;
13118 -> 13010;
13119 -> 13116;
13119 -> 13010;
13120 -> 13117;
13120 -> 13010;
13121 -> 13010;
13122 -> 13119;
13122 -> 13121;
13123 -> 13120;
13123 -> 13121;
13124 -> 13118;
13124 -> 13121;
13125 -> 13122;
13125 -> 13121;
13126 -> 13125;
13126 -> 13121;
13127 -> 13125;
13127 -> 13121;
13128 -> 13123;
13128 -> 13121;
13129 -> 13121;
13130 -> 13127;
13130 -> 13129;
13131 -> 13128;
13131 -> 13129;
13132 -> 13124;
13132 -> 13129;
13133 -> 13132;
13133 -> 13129;
13134 -> 13130;
13134 -> 13129;
13135 -> 13133;
13135 -> 13134;
13135 -> 13129;
13136 -> 13135;
13137 -> 13084;
13137 -> 13136;
13137 -> 13115;
13137 -> 13007;
13138 -> 13137;
13138 -> 12993;
13139 -> 13138;
13139 -> 12993;
13140 -> 12991;
13140 -> 13139;
13141 -> 13138;
13141 -> 13140;
13142 -> 0;
13142 -> 12988;
13143 -> 12988;
13144 -> 13141;
13144 -> 13143;
13144 -> 12988;
13145 -> 13144;
13146 -> 13141;
13146 -> 13145;
13147 -> 13145;
13148 -> 13146;
13148 -> 13147;
13149 -> 13147;
13150 -> 13148;
13150 -> 13137;
13150 -> 13149;
13150 -> 13147;
13151 -> 0;
13151 -> 13150;
13152 -> 13150;
13153 -> 13148;
13153 -> 13137;
13153 -> 13152;
13154 -> 13153;
13154 -> 13137;
13154 -> 13152;
13155 -> 13154;
13155 -> 13150;
13156 -> 13150;
13157 -> 13148;
13157 -> 13156;
13158 -> 13157;
13158 -> 13137;
13158 -> 13156;
13159 -> 13158;
13159 -> 13150;
13160 -> 13150;
13161 -> 13155;
13161 -> 13160;
13161 -> 13150;
13162 -> 13159;
13162 -> 13161;
13162 -> 13150;
13163 -> 13155;
13163 -> 13150;
13164 -> 13150;
13165 -> 13155;
13165 -> 13164;
13166 -> 13165;
13166 -> 13150;
13167 -> 13162;
13167 -> 13166;
13167 -> 13150;
13168 -> 13148;
13168 -> 13137;
13168 -> 13150;
13169 -> 13151;
13169 -> 13150;
13170 -> 13150;
13171 -> 13148;
13171 -> 13137;
13171 -> 13169;
13171 -> 13147;
13172 -> 13171;
13172 -> 13145;
13173 -> 13172;
13173 -> 0;
13173 -> 13145;
13174 -> 13173;
13174 -> 13145;
13175 -> 13146;
13175 -> 13137;
13175 -> 13169;
13175 -> 13174;
13176 -> 13175;
13176 -> 13144;
13177 -> 13176;
13177 -> 13144;
13178 -> 13142;
13178 -> 12985;
13178 -> 12987;
13179 -> 13142;
13179 -> 12984;
13180 -> 13179;
13180 -> 12921;
13181 -> 13180;
13182 -> 13180;
13183 -> 13181;
13183 -> 13180;
13184 -> 13180;
13185 -> 13183;
13185 -> 13184;
13186 -> 12919;
13186 -> 13184;
13187 -> 13184;
13188 -> 13184;
13189 -> 13186;
13189 -> 13188;
13190 -> 13189;
13190 -> 13137;
13190 -> 13188;
13191 -> 13188;
13192 -> 13190;
13192 -> 13191;
13193 -> 13191;
13193 -> 13188;
13194 -> 13190;
13194 -> 13184;
13195 -> 13184;
13196 -> 13194;
13196 -> 13195;
13197 -> 13196;
13197 -> 13184;
13198 -> 13184;
13199 -> 13184;
13200 -> 13184;
13201 -> 13186;
13201 -> 13200;
13202 -> 13201;
13202 -> 13137;
13202 -> 13178;
13202 -> 13200;
13203 -> 13202;
13203 -> 13184;
13204 -> 13186;
13204 -> 13137;
13204 -> 13184;
13205 -> 13197;
13205 -> 13204;
13205 -> 13137;
13205 -> 13169;
13205 -> 13175;
13205 -> 13178;
13205 -> 13184;
13206 -> 13187;
13206 -> 13184;
13207 -> 13206;
13207 -> 13180;
13208 -> 13182;
13208 -> 13180;
13209 -> 13180;
13210 -> 13208;
13210 -> 13209;
13211 -> 12919;
13211 -> 13209;
13212 -> 13209;
13213 -> 13211;
13213 -> 13212;
13214 -> 13213;
13214 -> 13205;
13214 -> 13212;
13215 -> 13212;
13216 -> 13214;
13216 -> 13215;
13217 -> 13215;
13217 -> 13212;
13218 -> 13214;
13218 -> 13209;
13219 -> 13209;
13220 -> 13218;
13220 -> 13219;
13221 -> 13220;
13221 -> 13209;
13222 -> 13209;
13223 -> 13209;
13224 -> 13211;
13224 -> 13223;
13225 -> 13224;
13225 -> 13205;
13225 -> 13223;
13226 -> 13225;
13226 -> 13209;
13227 -> 13211;
13227 -> 13205;
13227 -> 13209;
13228 -> 13221;
13228 -> 13227;
13228 -> 13205;
13228 -> 13209;
13229 -> 13222;
13229 -> 13209;
13230 -> 13229;
13230 -> 13180;
13231 -> 13180;
13232 -> 13231;
13232 -> 13228;
13233 -> 13232;
13233 -> 13180;
13234 -> 13230;
13234 -> 13180;
13235 -> 13182;
13235 -> 13180;
13236 -> 13180;
13237 -> 13234;
13237 -> 13236;
13238 -> 13235;
13238 -> 13236;
13239 -> 12919;
13239 -> 13236;
13240 -> 13236;
13241 -> 13239;
13241 -> 13240;
13242 -> 13241;
13242 -> 13228;
13242 -> 13240;
13243 -> 13240;
13244 -> 13242;
13244 -> 13243;
13245 -> 13243;
13245 -> 13240;
13246 -> 13242;
13246 -> 13236;
13247 -> 13236;
13248 -> 13246;
13248 -> 13247;
13249 -> 13248;
13249 -> 13236;
13250 -> 13239;
13250 -> 13228;
13250 -> 13236;
13251 -> 13249;
13251 -> 13250;
13251 -> 13228;
13251 -> 13236;
13252 -> 13180;
13253 -> 13207;
13253 -> 13180;
13254 -> 13230;
13254 -> 13180;
13255 -> 13182;
13255 -> 13180;
13256 -> 13180;
13257 -> 13253;
13257 -> 13256;
13258 -> 13254;
13258 -> 13256;
13259 -> 13255;
13259 -> 13256;
13260 -> 12919;
13260 -> 13256;
13261 -> 13256;
13262 -> 13260;
13262 -> 13261;
13263 -> 13262;
13263 -> 13251;
13263 -> 13261;
13264 -> 13261;
13265 -> 13263;
13265 -> 13264;
13266 -> 13264;
13266 -> 13261;
13267 -> 13263;
13267 -> 13256;
13268 -> 13256;
13269 -> 13267;
13269 -> 13268;
13270 -> 13269;
13270 -> 13256;
13271 -> 13260;
13271 -> 13251;
13271 -> 13256;
13272 -> 13270;
13272 -> 13271;
13272 -> 13251;
13272 -> 13256;
13273 -> 13180;
13274 -> 13181;
13274 -> 13180;
13275 -> 13182;
13275 -> 13180;
13276 -> 12979;
13276 -> 13275;
13276 -> 13182;
13276 -> 13180;
13277 -> 13182;
13277 -> 13276;
13277 -> 13180;
13278 -> 13181;
13278 -> 13180;
13279 -> 13230;
13279 -> 13222;
13279 -> 13180;
13280 -> 12979;
13280 -> 13277;
13280 -> 12921;
13281 -> 12919;
13281 -> 13272;
13281 -> 12921;
13283 -> 13282;
13284 -> 13282;
13285 -> 13280;
13285 -> 12921;
13286 -> 13284;
13286 -> 12921;
13287 -> 12979;
13287 -> 13285;
13287 -> 13286;
13287 -> 13277;
13287 -> 12921;
13288 -> 12921;
13289 -> 12979;
13289 -> 12921;
13290 -> 13289;
13290 -> 13287;
13290 -> 12921;
13291 -> 12921;
13292 -> 12919;
13292 -> 13291;
13293 -> 13291;
13294 -> 13293;
13294 -> 13291;
13295 -> 13291;
13296 -> 13294;
13296 -> 13295;
13297 -> 13292;
13297 -> 13295;
13298 -> 13295;
13299 -> 13297;
13299 -> 13298;
13300 -> 13298;
13301 -> 13300;
13301 -> 13295;
13302 -> 13295;
13303 -> 13297;
13303 -> 13302;
13304 -> 13303;
13304 -> 13272;
13304 -> 13302;
13305 -> 13304;
13305 -> 13295;
13306 -> 13295;
13307 -> 13305;
13307 -> 13306;
13308 -> 13306;
13308 -> 13295;
13309 -> 13301;
13309 -> 13308;
13309 -> 13295;
13310 -> 13295;
13311 -> 13297;
13311 -> 13310;
13312 -> 13310;
13313 -> 13311;
13313 -> 13312;
13314 -> 13313;
13314 -> 13272;
13314 -> 13312;
13315 -> 13314;
13315 -> 13310;
13316 -> 13310;
13317 -> 13315;
13318 -> 13315;
13319 -> 13317;
13319 -> 13318;
13319 -> 13315;
13320 -> 13317;
13320 -> 13319;
13321 -> 13320;
13321 -> 13295;
13322 -> 13295;
13323 -> 13321;
13323 -> 13322;
13324 -> 13322;
13325 -> 13323;
13325 -> 13324;
13326 -> 13325;
13326 -> 13272;
13326 -> 13324;
13327 -> 13322;
13328 -> 13295;
13329 -> 13326;
13329 -> 13328;
13330 -> 13328;
13330 -> 13295;
13331 -> 13295;
13332 -> 13309;
13332 -> 13330;
13332 -> 13295;
13333 -> 13295;
13334 -> 13297;
13334 -> 13333;
13335 -> 13334;
13335 -> 13272;
13335 -> 13333;
13336 -> 13335;
13336 -> 13295;
13337 -> 13336;
13337 -> 10166;
13337 -> 13295;
13338 -> 13332;
13338 -> 13337;
13338 -> 13295;
13339 -> 13295;
13340 -> 13295;
13341 -> 13340;
13341 -> 12921;
13342 -> 12979;
13342 -> 13287;
13342 -> 12921;
13343 -> 12919;
13343 -> 13272;
13343 -> 12921;
13344 -> 13342;
13344 -> 12921;
13345 -> 13343;
13345 -> 13344;
13345 -> 13342;
13345 -> 13272;
13345 -> 12921;
13346 -> 13280;
13346 -> 13345;
13347 -> 12918;
13348 -> 12919;
13348 -> 13346;
13348 -> 13347;
13348 -> 12918;
13349 -> 13348;
13350 -> 12979;
13350 -> 13348;
13351 -> 13348;
13352 -> 13350;
13352 -> 13351;
13353 -> 13351;
13354 -> 0;
13354 -> 13351;
13355 -> 13352;
13355 -> 13353;
13355 -> 13354;
13355 -> 13346;
13355 -> 13351;
13356 -> 12919;
13356 -> 13355;
13356 -> 13348;
13357 -> 13355;
13357 -> 13348;
13358 -> 13348;
13359 -> 13348;
13360 -> 13356;
13360 -> 13359;
13360 -> 13348;
13361 -> 13355;
13361 -> 13356;
13361 -> 13360;
13362 -> 12919;
13362 -> 13361;
13362 -> 13360;
13363 -> 13361;
13363 -> 13360;
13364 -> 12918;
13365 -> 12979;
13365 -> 13364;
13365 -> 12918;
13366 -> 12979;
13366 -> 13362;
13366 -> 13365;
13367 -> 12917;
13368 -> 12912;
13369 -> 12913;
13369 -> 13366;
13369 -> 12912;
13370 -> 13369;
13370 -> 12911;
13371 -> 12833;
13372 -> 12831;
13373 -> 12831;
13373 -> 13372;
13374 -> 13372;
13375 -> 13374;
13375 -> 12831;
13376 -> 12828;
13377 -> 13366;
13378 -> 13366;
13378 -> 12707;
13378 -> 13377;
13379 -> 13366;
13380 -> 13379;
13380 -> 13366;
13381 -> 13380;
13381 -> 13366;
13382 -> 13366;
13383 -> 13381;
13383 -> 13382;
13384 -> 13382;
13385 -> 13383;
13385 -> 13384;
13386 -> 13384;
13387 -> 13386;
13387 -> 13382;
13388 -> 13383;
13388 -> 13382;
13389 -> 13382;
13390 -> 13388;
13390 -> 13389;
13391 -> 13389;
13392 -> 13390;
13392 -> 13391;
13393 -> 13391;
13393 -> 13389;
13394 -> 13393;
13394 -> 13382;
13395 -> 13387;
13395 -> 13394;
13395 -> 13382;
13396 -> 13395;
13396 -> 13383;
13396 -> 13382;
13397 -> 13366;
13398 -> 13366;
13398 -> 12707;
13398 -> 13397;
13399 -> 13380;
13399 -> 13366;
13400 -> 13366;
13401 -> 13399;
13401 -> 13400;
13402 -> 13401;
13402 -> 13400;
13403 -> 13402;
13403 -> 13400;
13404 -> 13400;
13405 -> 13403;
13405 -> 13366;
13406 -> 13366;
13407 -> 13366;
13408 -> 13407;
13408 -> 13366;
13409 -> 13380;
13409 -> 13366;
13410 -> 13406;
13410 -> 13366;
13411 -> 13407;
13411 -> 13366;
13412 -> 13366;
13413 -> 13409;
13413 -> 13412;
13414 -> 13410;
13414 -> 13412;
13415 -> 13411;
13415 -> 13412;
13416 -> 13366;
13416 -> 13412;
13417 -> 0;
13417 -> 13412;
13418 -> 13412;
13419 -> 13412;
13420 -> 13412;
13421 -> 13413;
13421 -> 13420;
13422 -> 0;
13422 -> 13420;
13423 -> 13422;
13423 -> 13412;
13424 -> 13412;
13425 -> 13419;
13425 -> 13424;
13425 -> 13412;
13426 -> 0;
13426 -> 13425;
13427 -> 13412;
13428 -> 13427;
13428 -> 13366;
13429 -> 13426;
13429 -> 0;
13429 -> 13366;
13430 -> 13417;
13430 -> 0;
13430 -> 13429;
13431 -> 13429;
13432 -> 13366;
13433 -> 13366;
13434 -> 13366;
13434 -> 13433;
13435 -> 13433;
13435 -> 13366;
13436 -> 13366;
13437 -> 13436;
13437 -> 13366;
13438 -> 13366;
13439 -> 13366;
13440 -> 13439;
13441 -> 13440;
13442 -> 13440;
13442 -> 13441;
13443 -> 13441;
13443 -> 13440;
13444 -> 13440;
13444 -> 13439;
13445 -> 13366;
13445 -> 13439;
13446 -> 13439;
13447 -> 13445;
13447 -> 13446;
13448 -> 13444;
13448 -> 13446;
13449 -> 13446;
13450 -> 13448;
13450 -> 13366;
13450 -> 13449;
13450 -> 13446;
13451 -> 13439;
13452 -> 13366;
13453 -> 13366;
13454 -> 0;
13454 -> 13366;
13455 -> 0;
13455 -> 13366;
13456 -> 0;
13456 -> 13366;
13457 -> 0;
13457 -> 13366;
13458 -> 13366;
13459 -> 13366;
13459 -> 12732;
13460 -> 13458;
13460 -> 13366;
13461 -> 10221;
13461 -> 13366;
13462 -> 13366;
13462 -> 12732;
13462 -> 13460;
13463 -> 13366;
13464 -> 13463;
13464 -> 13366;
13465 -> 13464;
13465 -> 13366;
13466 -> 13366;
13467 -> 13460;
13467 -> 13433;
13468 -> 13366;
13469 -> 13366;
13470 -> 13366;
13471 -> 13470;
13471 -> 12732;
13471 -> 13366;
13471 -> 13460;
13472 -> 13471;
13472 -> 13366;
13473 -> 13468;
13473 -> 13460;
13474 -> 13469;
13474 -> 13473;
13474 -> 13460;
13475 -> 13460;
13476 -> 13460;
13477 -> 13366;
13477 -> 13460;
13478 -> 13460;
13479 -> 13476;
13479 -> 13478;
13480 -> 13477;
13480 -> 13478;
13481 -> 13476;
13481 -> 13478;
13482 -> 13476;
13482 -> 13478;
13483 -> 13478;
13484 -> 13482;
13484 -> 13483;
13485 -> 13483;
13486 -> 13484;
13486 -> 13483;
13487 -> 13482;
13487 -> 13478;
13488 -> 13482;
13488 -> 13478;
13489 -> 13482;
13489 -> 13478;
13490 -> 13482;
13490 -> 13478;
13491 -> 0;
13491 -> 13482;
13491 -> 13478;
13492 -> 13482;
13492 -> 13478;
13493 -> 8170;
13493 -> 13482;
13493 -> 13478;
13494 -> 0;
13494 -> 13482;
13494 -> 13478;
13495 -> 13482;
13495 -> 13478;
13496 -> 13482;
13496 -> 13478;
13497 -> 13482;
13497 -> 13478;
13498 -> 13482;
13498 -> 13478;
13499 -> 13478;
13500 -> 13479;
13500 -> 13499;
13500 -> 13478;
13501 -> 13478;
13502 -> 13480;
13502 -> 13501;
13502 -> 13478;
13503 -> 13481;
13503 -> 13460;
13503 -> 13478;
13504 -> 13481;
13504 -> 13482;
13504 -> 13478;
13505 -> 13480;
13505 -> 13482;
13505 -> 13478;
13506 -> 13478;
13507 -> 13506;
13507 -> 13478;
13508 -> 13506;
13508 -> 13482;
13508 -> 13478;
13509 -> 13478;
13510 -> 13479;
13510 -> 13509;
13511 -> 13510;
13511 -> 13475;
13511 -> 13509;
13512 -> 13511;
13512 -> 13478;
13513 -> 13481;
13513 -> 13478;
13514 -> 13482;
13514 -> 13487;
13514 -> 13478;
13515 -> 13482;
13515 -> 13488;
13515 -> 13478;
13516 -> 13512;
13516 -> 13513;
13516 -> 13514;
13516 -> 13515;
13516 -> 13475;
13516 -> 13460;
13516 -> 13478;
13517 -> 13476;
13517 -> 13460;
13518 -> 13465;
13518 -> 13517;
13518 -> 13463;
13518 -> 13484;
13518 -> 13486;
13518 -> 13516;
13518 -> 13505;
13518 -> 13490;
13518 -> 13491;
13518 -> 13492;
13518 -> 13493;
13518 -> 13494;
13518 -> 13495;
13518 -> 13496;
13518 -> 13497;
13518 -> 13498;
13518 -> 13504;
13518 -> 13508;
13518 -> 0;
13518 -> 13460;
13518 -> 12732;
13518 -> 13366;
13518 -> 13507;
13519 -> 13460;
13520 -> 13476;
13520 -> 13519;
13521 -> 0;
13521 -> 13519;
13522 -> 13520;
13522 -> 13518;
13522 -> 0;
13522 -> 13519;
13523 -> 0;
13523 -> 13522;
13524 -> 13523;
13524 -> 13519;
13525 -> 13524;
13525 -> 13460;
13526 -> 13466;
13526 -> 13366;
13527 -> 13526;
13527 -> 13366;
13528 -> 13366;
13529 -> 13528;
13529 -> 13366;
13530 -> 13518;
13530 -> 13433;
13531 -> 13366;
13532 -> 13366;
13533 -> 13532;
13533 -> 13518;
13534 -> 13533;
13534 -> 13366;
13535 -> 13531;
13535 -> 13366;
13536 -> 13535;
13536 -> 13366;
13537 -> 13366;
13538 -> 13537;
13538 -> 13518;
13539 -> 13538;
13539 -> 13366;
13540 -> 13536;
13540 -> 13366;
13541 -> 13366;
13542 -> 13540;
13542 -> 13366;
13543 -> 13541;
13543 -> 13366;
13544 -> 13527;
13544 -> 13366;
13545 -> 13536;
13545 -> 13366;
13546 -> 13366;
13547 -> 13544;
13547 -> 13366;
13548 -> 13545;
13548 -> 13366;
13549 -> 13546;
13549 -> 13366;
13550 -> 13463;
13550 -> 13366;
13551 -> 13550;
13551 -> 13518;
13551 -> 13366;
13552 -> 13551;
13553 -> 13551;
13553 -> 13552;
13554 -> 13553;
13554 -> 13518;
13554 -> 13552;
13555 -> 13554;
13555 -> 13551;
13556 -> 13551;
13557 -> 13551;
13557 -> 13555;
13558 -> 13463;
13558 -> 13557;
13558 -> 13366;
13559 -> 13536;
13559 -> 13531;
13559 -> 13366;
13560 -> 13366;
13560 -> 13558;
13561 -> 13366;
13562 -> 13366;
13563 -> 13562;
13563 -> 13558;
13563 -> 13366;
13564 -> 13563;
13565 -> 13563;
13566 -> 13561;
13566 -> 13565;
13567 -> 13564;
13567 -> 13565;
13568 -> 13567;
13568 -> 13565;
13569 -> 13566;
13569 -> 13568;
13570 -> 13561;
13570 -> 13564;
13570 -> 13563;
13571 -> 13563;
13571 -> 13570;
13572 -> 13366;
13573 -> 13366;
13573 -> 13572;
13574 -> 13572;
13575 -> 13574;
13575 -> 13572;
13576 -> 13572;
13577 -> 13575;
13577 -> 13576;
13578 -> 13573;
13578 -> 13576;
13579 -> 13576;
13580 -> 13578;
13580 -> 13579;
13581 -> 13579;
13582 -> 13581;
13582 -> 13576;
13583 -> 13576;
13584 -> 13578;
13584 -> 13583;
13585 -> 13584;
13585 -> 13558;
13585 -> 13583;
13586 -> 13585;
13586 -> 13576;
13587 -> 13576;
13588 -> 13586;
13588 -> 13587;
13589 -> 13587;
13589 -> 13576;
13590 -> 13582;
13590 -> 13589;
13590 -> 13576;
13591 -> 13576;
13592 -> 13578;
13592 -> 13591;
13593 -> 13591;
13594 -> 13592;
13594 -> 13593;
13595 -> 13594;
13595 -> 13558;
13595 -> 13593;
13596 -> 13595;
13596 -> 13591;
13597 -> 13591;
13598 -> 13596;
13599 -> 13596;
13600 -> 13598;
13600 -> 13599;
13600 -> 13596;
13601 -> 13598;
13601 -> 13600;
13602 -> 13601;
13602 -> 13576;
13603 -> 13576;
13604 -> 13602;
13604 -> 13603;
13605 -> 13603;
13606 -> 13604;
13606 -> 13605;
13607 -> 13606;
13607 -> 13558;
13607 -> 13605;
13608 -> 13603;
13609 -> 13607;
13610 -> 13607;
13610 -> 13609;
13611 -> 13610;
13611 -> 13558;
13611 -> 13609;
13612 -> 13611;
13613 -> 13603;
13613 -> 13576;
13614 -> 13576;
13615 -> 13590;
13615 -> 13613;
13615 -> 13576;
13616 -> 13576;
13617 -> 13576;
13618 -> 13617;
13618 -> 13366;
13619 -> 13558;
13620 -> 13558;
13621 -> 13620;
13621 -> 13558;
13622 -> 13366;
13623 -> 13366;
13624 -> 13366;
13624 -> 13621;
13625 -> 13624;
13625 -> 13366;
13626 -> 13366;
13626 -> 12712;
13626 -> 13621;
13626 -> 13625;
13627 -> 13366;
13627 -> 13625;
13628 -> 13625;
13629 -> 13627;
13629 -> 13628;
13630 -> 13625;
13630 -> 13628;
13631 -> 13630;
13631 -> 13628;
13632 -> 13628;
13633 -> 13631;
13633 -> 13632;
13634 -> 13629;
13634 -> 13632;
13635 -> 13633;
13635 -> 13632;
13636 -> 13632;
13637 -> 13635;
13637 -> 13636;
13638 -> 13634;
13638 -> 13636;
13639 -> 13638;
13639 -> 12712;
13639 -> 13626;
13639 -> 13636;
13640 -> 13637;
13640 -> 13636;
13641 -> 13636;
13642 -> 13640;
13642 -> 13641;
13643 -> 13641;
13644 -> 13642;
13644 -> 13643;
13645 -> 13643;
13646 -> 13645;
13646 -> 13641;
13647 -> 13642;
13647 -> 13641;
13648 -> 13641;
13649 -> 13647;
13649 -> 13648;
13650 -> 13648;
13651 -> 13649;
13651 -> 13650;
13652 -> 0;
13652 -> 13650;
13653 -> 13652;
13653 -> 13648;
13654 -> 13653;
13654 -> 13641;
13655 -> 13646;
13655 -> 13654;
13655 -> 13641;
13656 -> 13655;
13656 -> 13642;
13656 -> 13641;
13657 -> 13636;
13658 -> 13638;
13658 -> 12707;
13658 -> 13657;
13658 -> 13636;
13659 -> 13637;
13659 -> 13636;
13660 -> 13636;
13661 -> 13659;
13661 -> 13660;
13662 -> 13661;
13662 -> 13660;
13663 -> 13662;
13663 -> 13660;
13664 -> 13660;
13665 -> 13663;
13665 -> 13636;
13666 -> 13636;
13667 -> 13636;
13668 -> 13667;
13668 -> 13636;
13669 -> 13637;
13669 -> 13636;
13670 -> 13666;
13670 -> 13636;
13671 -> 13667;
13671 -> 13636;
13672 -> 13636;
13673 -> 13669;
13673 -> 13672;
13674 -> 13670;
13674 -> 13672;
13675 -> 13671;
13675 -> 13672;
13676 -> 13638;
13676 -> 13672;
13677 -> 0;
13677 -> 13672;
13678 -> 13672;
13679 -> 13672;
13680 -> 13672;
13681 -> 13673;
13681 -> 13680;
13682 -> 0;
13682 -> 13680;
13683 -> 13682;
13683 -> 13672;
13684 -> 13672;
13685 -> 13679;
13685 -> 13684;
13685 -> 13672;
13686 -> 0;
13686 -> 13685;
13687 -> 13672;
13688 -> 13687;
13688 -> 13636;
13689 -> 13686;
13689 -> 0;
13689 -> 13636;
13690 -> 13677;
13690 -> 0;
13690 -> 13689;
13691 -> 13689;
13692 -> 13632;
13693 -> 13628;
13694 -> 13625;
13695 -> 12726;
13696 -> 12730;
13696 -> 13695;
13697 -> 13696;
13697 -> 13695;
13698 -> 13695;
13699 -> 13697;
13699 -> 13698;
13700 -> 13699;
13700 -> 13639;
13700 -> 13698;
13701 -> 13700;
13701 -> 13695;
13702 -> 13695;
13703 -> 13695;
13703 -> 12726;
13704 -> 13703;
13705 -> 12731;
13705 -> 13704;
13706 -> 13705;
13706 -> 12821;
13706 -> 13704;
13707 -> 13704;
13708 -> 13705;
13708 -> 13706;
13708 -> 13707;
13708 -> 13704;
13709 -> 13703;
13710 -> 13703;
13711 -> 13703;
13712 -> 13710;
13712 -> 13711;
13713 -> 12731;
13713 -> 13711;
13714 -> 13713;
13714 -> 12703;
13714 -> 13711;
13715 -> 13711;
13716 -> 13714;
13717 -> 13713;
13717 -> 12706;
13717 -> 13716;
13717 -> 13714;
13718 -> 13703;
13719 -> 12731;
13719 -> 13718;
13720 -> 13719;
13720 -> 13706;
13720 -> 13718;
13721 -> 13718;
13722 -> 13719;
13722 -> 13720;
13722 -> 13721;
13722 -> 13718;
13723 -> 13703;
13724 -> 13703;
13725 -> 13703;
13726 -> 13724;
13726 -> 13725;
13727 -> 12731;
13727 -> 13725;
13728 -> 13727;
13728 -> 12703;
13728 -> 13725;
13729 -> 13725;
13730 -> 13728;
13731 -> 13727;
13731 -> 12706;
13731 -> 13730;
13731 -> 13728;
13732 -> 12649;
13733 -> 12649;
13734 -> 12676;
13734 -> 13720;
13734 -> 13733;
13734 -> 12649;
13735 -> 12657;
13735 -> 12649;
13736 -> 12649;
13737 -> 12655;
13737 -> 13736;
13737 -> 12649;
13738 -> 13737;
13739 -> 12650;
13739 -> 13738;
13740 -> 13738;
13741 -> 13739;
13741 -> 13639;
13741 -> 13740;
13742 -> 13740;
13743 -> 13741;
13743 -> 13737;
13744 -> 13743;
13745 -> 12653;
13745 -> 13743;
13746 -> 12654;
13746 -> 13743;
13747 -> 13743;
13748 -> 13744;
13748 -> 13747;
13749 -> 13744;
13749 -> 13747;
13750 -> 13745;
13750 -> 13747;
13751 -> 13746;
13751 -> 13747;
13752 -> 13748;
13752 -> 13747;
13753 -> 13747;
13754 -> 13752;
13754 -> 13753;
13755 -> 13754;
13755 -> 13639;
13755 -> 13753;
13756 -> 13753;
13757 -> 13755;
13757 -> 13756;
13758 -> 12579;
13758 -> 7562;
13759 -> 12632;
13759 -> 7562;
13760 -> 12580;
13760 -> 7562;
13761 -> 13758;
13761 -> 13759;
13761 -> 13760;
13761 -> 12581;
13761 -> 13757;
13761 -> 12632;
13761 -> 7562;
13762 -> 7562;
13763 -> 7568;
13763 -> 7562;
13764 -> 7568;
13764 -> 7562;
13765 -> 7568;
13765 -> 7562;
13766 -> 7568;
13766 -> 7562;
13767 -> 7562;
13768 -> 13766;
13768 -> 13761;
13768 -> 13767;
13768 -> 7562;
13769 -> 13763;
13769 -> 7562;
13770 -> 7562;
13771 -> 13769;
13771 -> 13770;
13772 -> 13766;
13772 -> 13770;
13773 -> 13770;
13774 -> 13772;
13774 -> 13761;
13774 -> 13773;
13774 -> 13770;
13775 -> 7562;
13776 -> 7568;
13776 -> 7562;
13777 -> 7562;
13778 -> 13776;
13778 -> 13777;
13779 -> 13777;
13780 -> 13778;
13780 -> 13779;
13781 -> 13779;
13782 -> 13780;
13782 -> 13781;
13783 -> 13781;
13784 -> 13782;
13784 -> 13783;
13785 -> 13784;
13785 -> 13761;
13785 -> 13783;
13786 -> 13784;
13786 -> 13761;
13786 -> 13783;
13787 -> 13786;
13787 -> 13781;
13788 -> 13777;
13789 -> 13777;
13790 -> 7562;
13791 -> 13790;
13792 -> 13791;
13793 -> 7568;
13793 -> 7562;
13794 -> 7562;
13795 -> 13793;
13795 -> 13794;
13796 -> 13795;
13796 -> 13761;
13796 -> 13794;
13797 -> 7562;
13798 -> 13796;
13798 -> 13797;
13799 -> 7568;
13799 -> 7562;
13800 -> 7562;
13801 -> 13799;
13801 -> 13800;
13802 -> 13800;
13803 -> 13801;
13803 -> 13802;
13804 -> 13803;
13804 -> 13798;
13804 -> 13802;
13805 -> 13803;
13805 -> 13798;
13805 -> 13802;
13806 -> 13805;
13806 -> 13800;
13807 -> 7562;
13808 -> 13807;
13809 -> 13798;
13809 -> 13808;
13810 -> 13809;
13810 -> 13807;
13811 -> 13807;
13812 -> 13798;
13812 -> 13811;
13813 -> 13812;
13813 -> 13807;
13814 -> 13807;
13815 -> 0;
13815 -> 13814;
13816 -> 13815;
13816 -> 13814;
13817 -> 13814;
13818 -> 13817;
13819 -> 13798;
13819 -> 13817;
13820 -> 13819;
13820 -> 13814;
13821 -> 13814;
13822 -> 13820;
13822 -> 13821;
13822 -> 13814;
13823 -> 13816;
13823 -> 13815;
13823 -> 13814;
13824 -> 13823;
13825 -> 13824;
13826 -> 13825;
13827 -> 13826;
13828 -> 13825;
13829 -> 13798;
13829 -> 13825;
13830 -> 13829;
13830 -> 13824;
13831 -> 13830;
13831 -> 13798;
13831 -> 13824;
13832 -> 13830;
13832 -> 13798;
13832 -> 13824;
13833 -> 13832;
13833 -> 13823;
13834 -> 13823;
13835 -> 13833;
13835 -> 13834;
13835 -> 13823;
13836 -> 13816;
13836 -> 13814;
13837 -> 13836;
13837 -> 13807;
13838 -> 13837;
13838 -> 7562;
13839 -> 7568;
13839 -> 7562;
13840 -> 7562;
13841 -> 13839;
13841 -> 13840;
13842 -> 13840;
13843 -> 13841;
13843 -> 13842;
13844 -> 13843;
13844 -> 13798;
13844 -> 13842;
13845 -> 13843;
13845 -> 13798;
13845 -> 13842;
13846 -> 13845;
13846 -> 13840;
13847 -> 7562;
13848 -> 13847;
13849 -> 7568;
13849 -> 7562;
13850 -> 7568;
13850 -> 7562;
13851 -> 7562;
13852 -> 13850;
13852 -> 13851;
13853 -> 13851;
13854 -> 13852;
13854 -> 13798;
13854 -> 13853;
13855 -> 13854;
13855 -> 13851;
13856 -> 13851;
13857 -> 13855;
13857 -> 13856;
13858 -> 13857;
13858 -> 7562;
13859 -> 7562;
13860 -> 13858;
13860 -> 13859;
13861 -> 13859;
13862 -> 13861;
13862 -> 7562;
13863 -> 7562;
13864 -> 7568;
13864 -> 13863;
13864 -> 13798;
13864 -> 7532;
13865 -> 7568;
13865 -> 7562;
13866 -> 7568;
13866 -> 7562;
13867 -> 7562;
13868 -> 13866;
13868 -> 13864;
13868 -> 13867;
13869 -> 13868;
13869 -> 7562;
13870 -> 7562;
13871 -> 13869;
13871 -> 13870;
13872 -> 7562;
13873 -> 13872;
13873 -> 13871;
13873 -> 13864;
13873 -> 7562;
13874 -> 13871;
13874 -> 13872;
13874 -> 13864;
13874 -> 13873;
13875 -> 13873;
13876 -> 13874;
13876 -> 13875;
13877 -> 13875;
13878 -> 13876;
13878 -> 13877;
13879 -> 13877;
13880 -> 13878;
13880 -> 13874;
13880 -> 13879;
13880 -> 13877;
13881 -> 13875;
13882 -> 13876;
13883 -> 13865;
13883 -> 13876;
13884 -> 13876;
13885 -> 13882;
13885 -> 13884;
13886 -> 13883;
13886 -> 13884;
13887 -> 13866;
13887 -> 13884;
13888 -> 13884;
13889 -> 13887;
13889 -> 13874;
13889 -> 13888;
13890 -> 13889;
13890 -> 13884;
13891 -> 13885;
13891 -> 13884;
13892 -> 13890;
13892 -> 13891;
13892 -> 13884;
13893 -> 13884;
13894 -> 13885;
13894 -> 13884;
13895 -> 13893;
13895 -> 13884;
13896 -> 13894;
13896 -> 13895;
13896 -> 13887;
13896 -> 13874;
13896 -> 13884;
13897 -> 13884;
13898 -> 13896;
13898 -> 13897;
13899 -> 13898;
13899 -> 13896;
13899 -> 13897;
13900 -> 13885;
13900 -> 13884;
13901 -> 13884;
13902 -> 13884;
13903 -> 13900;
13903 -> 13902;
13904 -> 13901;
13904 -> 13902;
13905 -> 13904;
13905 -> 13902;
13906 -> 13902;
13907 -> 13903;
13907 -> 13906;
13907 -> 13902;
13908 -> 13903;
13908 -> 13904;
13908 -> 13902;
13909 -> 13885;
13909 -> 13884;
13910 -> 13901;
13910 -> 13884;
13911 -> 13909;
13911 -> 13910;
13911 -> 13887;
13911 -> 13899;
13911 -> 13908;
13911 -> 13884;
13912 -> 13884;
13913 -> 13911;
13913 -> 13901;
13913 -> 13884;
13914 -> 13885;
13914 -> 13913;
13915 -> 13911;
13915 -> 13913;
13916 -> 13886;
13916 -> 13913;
13917 -> 13913;
13918 -> 13914;
13918 -> 13917;
13919 -> 13915;
13919 -> 13917;
13920 -> 13916;
13920 -> 13917;
13921 -> 13887;
13921 -> 13917;
13922 -> 13917;
13923 -> 13921;
13923 -> 13911;
13923 -> 13922;
13924 -> 13923;
13924 -> 13917;
13925 -> 13917;
13926 -> 13924;
13926 -> 13925;
13927 -> 13926;
13927 -> 13911;
13927 -> 13925;
13928 -> 13917;
13929 -> 13919;
13929 -> 13928;
13930 -> 13928;
13931 -> 13929;
13931 -> 13911;
13931 -> 13930;
13932 -> 13931;
13932 -> 13917;
13933 -> 13927;
13933 -> 13911;
13933 -> 13917;
13934 -> 13921;
13934 -> 13911;
13934 -> 0;
13934 -> 13917;
13935 -> 13932;
13935 -> 13911;
13935 -> 13917;
13936 -> 13934;
13936 -> 13935;
13936 -> 13917;
13937 -> 13917;
13938 -> 13918;
13938 -> 13937;
13939 -> 13938;
13939 -> 13937;
13940 -> 13939;
13940 -> 13911;
13940 -> 13937;
13941 -> 13939;
13941 -> 13911;
13941 -> 13940;
13942 -> 13941;
13942 -> 13939;
13942 -> 13940;
13943 -> 13939;
13943 -> 13911;
13943 -> 13942;
13943 -> 13937;
13944 -> 13937;
13945 -> 13943;
13945 -> 13944;
13946 -> 0;
13946 -> 13944;
13947 -> 13946;
13947 -> 13917;
13948 -> 13917;
13949 -> 13918;
13949 -> 13948;
13950 -> 13949;
13950 -> 13943;
13950 -> 13948;
13951 -> 13950;
13951 -> 13917;
13952 -> 13947;
13952 -> 0;
13952 -> 13917;
13953 -> 13917;
13954 -> 13918;
13954 -> 13953;
13955 -> 13954;
13955 -> 13953;
13956 -> 13955;
13956 -> 13943;
13956 -> 13953;
13957 -> 13955;
13957 -> 13943;
13957 -> 13953;
13958 -> 13953;
13959 -> 13957;
13959 -> 13958;
13960 -> 13958;
13961 -> 13960;
13961 -> 13917;
13962 -> 13952;
13962 -> 13961;
13962 -> 13917;
13963 -> 13951;
13963 -> 13962;
13963 -> 13917;
13964 -> 13917;
13965 -> 13921;
13965 -> 13957;
13965 -> 13964;
13965 -> 13917;
13966 -> 13913;
13967 -> 13884;
13968 -> 13885;
13968 -> 13967;
13969 -> 13968;
13969 -> 13957;
13969 -> 13967;
13970 -> 13968;
13970 -> 13957;
13970 -> 13967;
13971 -> 13970;
13971 -> 13884;
13972 -> 13884;
13973 -> 13911;
13973 -> 13884;
13974 -> 13971;
13974 -> 13972;
13975 -> 13972;
13976 -> 13974;
13976 -> 13971;
13976 -> 13975;
13977 -> 13976;
13977 -> 13972;
13978 -> 13971;
13978 -> 13972;
13979 -> 13971;
13979 -> 13972;
13980 -> 13978;
13980 -> 13972;
13981 -> 13972;
13982 -> 13972;
13983 -> 13980;
13983 -> 13982;
13984 -> 13981;
13984 -> 13982;
13985 -> 13979;
13985 -> 13982;
13986 -> 13983;
13986 -> 13982;
13987 -> 13982;
13988 -> 13986;
13988 -> 13987;
13989 -> 13985;
13989 -> 13987;
13990 -> 13987;
13991 -> 13988;
13991 -> 13990;
13991 -> 13987;
13992 -> 13991;
13993 -> 13971;
13993 -> 13992;
13993 -> 13977;
13993 -> 13884;
13994 -> 13911;
13994 -> 13884;
13995 -> 13865;
13995 -> 13993;
13996 -> 13995;
13996 -> 13993;
13997 -> 13993;
13998 -> 13997;
13998 -> 13993;
13999 -> 13993;
14000 -> 13993;
14001 -> 13993;
14002 -> 13993;
14003 -> 14000;
14003 -> 13993;
14004 -> 14003;
14004 -> 13993;
14005 -> 14001;
14005 -> 13993;
14006 -> 14004;
14006 -> 14005;
14006 -> 13993;
14007 -> 14001;
14007 -> 13993;
14008 -> 13993;
14009 -> 14007;
14009 -> 14008;
14009 -> 13993;
14010 -> 13993;
14011 -> 14000;
14011 -> 13993;
14012 -> 14011;
14012 -> 13993;
14013 -> 14012;
14013 -> 13993;
14014 -> 13993;
14015 -> 14013;
14016 -> 13993;
14016 -> 14015;
14016 -> 14009;
14017 -> 14016;
14018 -> 7568;
14018 -> 13882;
14018 -> 14016;
14018 -> 13994;
14018 -> 14017;
14018 -> 7532;
14019 -> 7568;
14019 -> 7562;
14020 -> 7562;
14021 -> 14019;
14021 -> 14018;
14021 -> 14020;
14022 -> 7568;
14022 -> 7562;
14023 -> 7568;
14023 -> 7562;
14024 -> 14022;
14024 -> 14021;
14024 -> 7562;
14025 -> 14023;
14025 -> 14021;
14025 -> 14024;
14026 -> 14022;
14026 -> 14024;
14027 -> 14024;
14028 -> 14025;
14028 -> 14027;
14029 -> 14026;
14029 -> 14027;
14030 -> 14023;
14030 -> 14027;
14031 -> 14028;
14031 -> 14021;
14031 -> 14027;
14032 -> 14031;
14033 -> 14031;
14034 -> 14033;
14034 -> 14031;
14035 -> 14031;
14036 -> 14035;
14036 -> 14034;
14036 -> 14021;
14036 -> 14031;
14037 -> 14034;
14037 -> 14035;
14037 -> 14021;
14037 -> 14036;
14038 -> 14029;
14038 -> 14021;
14038 -> 14036;
14039 -> 14036;
14040 -> 14037;
14040 -> 14039;
14041 -> 14038;
14041 -> 14039;
14042 -> 14030;
14042 -> 14039;
14043 -> 14042;
14043 -> 14037;
14043 -> 14039;
14044 -> 14040;
14044 -> 14039;
14045 -> 14043;
14045 -> 14044;
14045 -> 14039;
14046 -> 14039;
14047 -> 14040;
14047 -> 14046;
14047 -> 14039;
14048 -> 14039;
14049 -> 14040;
14049 -> 14039;
14050 -> 14048;
14050 -> 14039;
14051 -> 14049;
14051 -> 14050;
14051 -> 14042;
14051 -> 14037;
14051 -> 14039;
14052 -> 14039;
14053 -> 14040;
14053 -> 14039;
14054 -> 14041;
14054 -> 14039;
14055 -> 14039;
14056 -> 14053;
14056 -> 14055;
14057 -> 14054;
14057 -> 14055;
14058 -> 14042;
14058 -> 14055;
14059 -> 14055;
14060 -> 14056;
14060 -> 14059;
14061 -> 14060;
14061 -> 14051;
14061 -> 14059;
14062 -> 14061;
14062 -> 14055;
14063 -> 14055;
14064 -> 14062;
14064 -> 14063;
14064 -> 14055;
14065 -> 14055;
14066 -> 14062;
14066 -> 14065;
14067 -> 14066;
14067 -> 14055;
14068 -> 14056;
14068 -> 14055;
14069 -> 14058;
14069 -> 14067;
14070 -> 14056;
14070 -> 14067;
14071 -> 14067;
14072 -> 14067;
14073 -> 14069;
14073 -> 14072;
14074 -> 14070;
14074 -> 14072;
14075 -> 14071;
14075 -> 14072;
14076 -> 14075;
14076 -> 14072;
14077 -> 14075;
14077 -> 14072;
14078 -> 14072;
14079 -> 14073;
14079 -> 14078;
14079 -> 14072;
14080 -> 14072;
14081 -> 14074;
14081 -> 14080;
14081 -> 14072;
14082 -> 14073;
14082 -> 14075;
14082 -> 14072;
14083 -> 14074;
14083 -> 14075;
14083 -> 14072;
14084 -> 14040;
14084 -> 14039;
14085 -> 14071;
14085 -> 14039;
14086 -> 14084;
14086 -> 14085;
14086 -> 14042;
14086 -> 14067;
14086 -> 14082;
14086 -> 14083;
14086 -> 14039;
14087 -> 14039;
14088 -> 14086;
14088 -> 14039;
14089 -> 14032;
14089 -> 14088;
14089 -> 14086;
14089 -> 14036;
14090 -> 14029;
14090 -> 14021;
14090 -> 14031;
14091 -> 14030;
14091 -> 14089;
14091 -> 14090;
14092 -> 14028;
14092 -> 14031;
14093 -> 14032;
14093 -> 14089;
14093 -> 14031;
14094 -> 14031;
14095 -> 14093;
14096 -> 14028;
14096 -> 14095;
14097 -> 14095;
14098 -> 14096;
14098 -> 14097;
14099 -> 14097;
14100 -> 14097;
14101 -> 14098;
14101 -> 14100;
14102 -> 14101;
14102 -> 14093;
14102 -> 14100;
14103 -> 14102;
14103 -> 14097;
14104 -> 14097;
14105 -> 14103;
14105 -> 14104;
14105 -> 14097;
14106 -> 14099;
14106 -> 14097;
14107 -> 14106;
14108 -> 14098;
14108 -> 14107;
14109 -> 14107;
14110 -> 14108;
14110 -> 14093;
14110 -> 14107;
14111 -> 14110;
14111 -> 14107;
14112 -> 14111;
14112 -> 14093;
14112 -> 14107;
14113 -> 14111;
14113 -> 14093;
14113 -> 14107;
14114 -> 14113;
14114 -> 14106;
14115 -> 14106;
14116 -> 14114;
14116 -> 14115;
14116 -> 14106;
14117 -> 14099;
14117 -> 14097;
14118 -> 14117;
14118 -> 14095;
14119 -> 0;
14119 -> 14095;
14120 -> 14118;
14120 -> 14093;
14121 -> 14032;
14121 -> 14093;
14121 -> 14031;
14122 -> 14093;
14122 -> 14027;
14123 -> 7568;
14123 -> 14122;
14123 -> 14121;
14123 -> 14093;
14123 -> 7532;
14124 -> 7568;
14124 -> 7562;
14125 -> 7562;
14126 -> 14124;
14126 -> 14123;
14126 -> 14125;
14127 -> 14126;
14127 -> 14123;
14127 -> 14125;
14128 -> 14127;
14128 -> 7562;
14129 -> 7568;
14129 -> 7562;
14130 -> 14129;
14130 -> 14128;
14130 -> 7562;
14131 -> 7568;
14131 -> 7562;
14132 -> 7568;
14132 -> 7562;
14133 -> 14131;
14133 -> 14130;
14133 -> 7562;
14134 -> 7562;
14135 -> 14132;
14135 -> 14130;
14135 -> 14134;
14136 -> 14135;
14136 -> 7562;
14137 -> 7562;
14138 -> 14136;
14138 -> 14137;
14139 -> 14137;
14140 -> 14137;
14141 -> 14140;
14141 -> 14137;
14142 -> 14137;
14143 -> 14141;
14143 -> 14142;
14144 -> 14138;
14144 -> 14142;
14145 -> 14143;
14145 -> 14140;
14145 -> 14142;
14146 -> 14144;
14146 -> 14130;
14146 -> 14142;
14147 -> 14142;
14148 -> 14146;
14148 -> 14147;
14148 -> 14142;
14149 -> 14137;
14150 -> 14140;
14150 -> 14137;
14151 -> 14139;
14151 -> 14150;
14151 -> 14145;
14151 -> 14137;
14152 -> 14140;
14152 -> 14151;
14152 -> 14137;
14153 -> 14137;
14154 -> 14153;
14154 -> 14137;
14155 -> 14137;
14156 -> 14154;
14156 -> 14155;
14157 -> 14138;
14157 -> 14155;
14158 -> 14156;
14158 -> 14153;
14158 -> 14155;
14159 -> 14157;
14159 -> 14130;
14159 -> 14155;
14160 -> 14155;
14161 -> 14159;
14161 -> 14160;
14161 -> 14155;
14162 -> 14137;
14163 -> 14153;
14163 -> 14137;
14164 -> 14139;
14164 -> 14163;
14164 -> 14152;
14164 -> 14158;
14164 -> 14137;
14165 -> 14153;
14165 -> 14164;
14165 -> 14137;
14166 -> 14139;
14166 -> 14165;
14166 -> 14137;
14167 -> 14166;
14167 -> 7562;
14168 -> 7562;
14169 -> 7568;
14169 -> 14167;
14169 -> 14130;
14169 -> 14166;
14169 -> 14165;
14169 -> 14168;
14169 -> 7532;
14170 -> 7568;
14170 -> 7562;
14171 -> 7568;
14171 -> 7562;
14172 -> 14170;
14172 -> 14169;
14172 -> 7562;
14173 -> 7562;
14174 -> 14172;
14174 -> 14173;
14175 -> 14171;
14175 -> 14173;
14176 -> 14175;
14176 -> 14169;
14176 -> 14173;
14177 -> 14176;
14177 -> 7562;
14178 -> 7562;
14179 -> 7568;
14179 -> 7562;
14180 -> 7568;
14180 -> 7562;
14181 -> 14179;
14181 -> 14177;
14181 -> 7562;
14182 -> 7562;
14183 -> 14181;
14183 -> 14182;
14184 -> 14180;
14184 -> 14182;
14185 -> 14182;
14186 -> 14183;
14186 -> 14182;
14187 -> 14182;
14188 -> 14186;
14188 -> 14187;
14189 -> 14184;
14189 -> 14187;
14190 -> 14187;
14191 -> 14189;
14191 -> 14190;
14192 -> 14190;
14193 -> 14192;
14193 -> 14191;
14193 -> 14190;
14194 -> 14190;
14195 -> 14191;
14195 -> 14194;
14196 -> 14194;
14197 -> 14195;
14197 -> 14177;
14197 -> 14196;
14198 -> 14196;
14199 -> 14197;
14199 -> 14177;
14199 -> 14196;
14200 -> 14199;
14200 -> 14194;
14201 -> 14200;
14201 -> 14190;
14202 -> 14201;
14202 -> 14187;
14203 -> 14187;
14204 -> 14189;
14204 -> 14203;
14205 -> 14203;
14206 -> 14204;
14206 -> 14177;
14206 -> 14205;
14207 -> 14205;
14208 -> 14206;
14208 -> 14177;
14208 -> 14205;
14209 -> 14208;
14209 -> 14203;
14210 -> 14209;
14210 -> 14187;
14211 -> 14210;
14212 -> 14202;
14212 -> 14211;
14212 -> 14210;
14213 -> 14212;
14214 -> 14182;
14215 -> 14185;
14215 -> 14182;
14216 -> 14184;
14216 -> 14177;
14216 -> 14182;
14217 -> 14185;
14217 -> 14182;
14218 -> 14185;
14218 -> 14182;
14219 -> 14185;
14219 -> 14182;
14220 -> 14185;
14220 -> 14182;
14221 -> 14185;
14221 -> 14182;
14222 -> 14185;
14222 -> 14182;
14223 -> 14185;
14223 -> 14182;
14224 -> 14185;
14224 -> 14216;
14224 -> 14182;
14225 -> 14224;
14225 -> 7562;
14226 -> 7562;
14227 -> 7568;
14227 -> 7562;
14228 -> 7568;
14228 -> 7562;
14229 -> 7562;
14230 -> 7562;
14231 -> 14228;
14231 -> 14225;
14231 -> 14230;
14232 -> 14230;
14233 -> 14231;
14233 -> 7562;
14234 -> 14229;
14234 -> 14233;
14234 -> 14225;
14234 -> 7562;
14235 -> 7562;
14236 -> 14229;
14236 -> 14234;
14236 -> 14235;
14236 -> 7562;
14237 -> 14229;
14237 -> 14234;
14237 -> 14236;
14238 -> 14236;
14239 -> 14237;
14239 -> 14238;
14240 -> 14239;
14240 -> 14237;
14241 -> 14240;
14241 -> 14236;
14242 -> 7562;
14243 -> 7568;
14243 -> 7562;
14244 -> 7568;
14244 -> 7562;
14245 -> 7562;
14246 -> 14244;
14246 -> 14237;
14246 -> 14245;
14247 -> 14246;
14247 -> 7562;
14248 -> 14244;
14248 -> 7562;
14249 -> 14243;
14249 -> 7562;
14250 -> 14244;
14250 -> 14237;
14250 -> 7562;
14251 -> 7562;
14252 -> 14248;
14252 -> 14251;
14253 -> 14249;
14253 -> 14251;
14254 -> 14250;
14254 -> 14251;
14255 -> 14247;
14255 -> 14251;
14256 -> 14251;
14257 -> 14255;
14257 -> 14256;
14258 -> 14256;
14259 -> 14257;
14259 -> 14258;
14260 -> 14258;
14261 -> 14259;
14261 -> 14260;
14262 -> 14260;
14263 -> 14261;
14263 -> 14262;
14264 -> 14263;
14264 -> 14262;
14265 -> 14264;
14265 -> 14260;
14266 -> 14265;
14266 -> 14258;
14267 -> 14266;
14267 -> 14256;
14268 -> 14256;
14269 -> 14257;
14269 -> 14268;
14270 -> 14268;
14271 -> 14269;
14271 -> 14270;
14272 -> 14270;
14273 -> 14272;
14273 -> 14268;
14274 -> 14268;
14275 -> 14273;
14275 -> 14274;
14275 -> 14268;
14276 -> 14275;
14276 -> 14268;
14277 -> 14276;
14277 -> 14256;
14278 -> 14256;
14279 -> 14257;
14279 -> 14278;
14280 -> 0;
14280 -> 14278;
14281 -> 14280;
14281 -> 14256;
14282 -> 14281;
14282 -> 14257;
14282 -> 14256;
14283 -> 14277;
14283 -> 14282;
14283 -> 14256;
14284 -> 14251;
14285 -> 14251;
14286 -> 14255;
14286 -> 14285;
14287 -> 14285;
14288 -> 14286;
14288 -> 14287;
14289 -> 14287;
14290 -> 14289;
14291 -> 14287;
14292 -> 14288;
14292 -> 14237;
14292 -> 14287;
14293 -> 14292;
14293 -> 14285;
14294 -> 14285;
14295 -> 14286;
14295 -> 14294;
14296 -> 14294;
14297 -> 14296;
14298 -> 14294;
14299 -> 14295;
14299 -> 14237;
14299 -> 14294;
14300 -> 14299;
14300 -> 14285;
14301 -> 14293;
14301 -> 14237;
14301 -> 14285;
14302 -> 14300;
14302 -> 14237;
14302 -> 14285;
14303 -> 14285;
14304 -> 14293;
14304 -> 14237;
14304 -> 14303;
14304 -> 14285;
14305 -> 14300;
14305 -> 14304;
14306 -> 14305;
14306 -> 14237;
14306 -> 14285;
14307 -> 14305;
14307 -> 14285;
14308 -> 14307;
14308 -> 14251;
14309 -> 14251;
14310 -> 14252;
14310 -> 14251;
14311 -> 14309;
14311 -> 14251;
14312 -> 14251;
14313 -> 14310;
14313 -> 14312;
14314 -> 14311;
14314 -> 14312;
14315 -> 14255;
14315 -> 14312;
14316 -> 14313;
14316 -> 14312;
14317 -> 14314;
14317 -> 14312;
14318 -> 14312;
14319 -> 14316;
14319 -> 14318;
14320 -> 14317;
14320 -> 14318;
14321 -> 14315;
14321 -> 14318;
14322 -> 14312;
14323 -> 14312;
14324 -> 14315;
14324 -> 14237;
14324 -> 14323;
14325 -> 14324;
14325 -> 14312;
14326 -> 14325;
14326 -> 14237;
14326 -> 14312;
14327 -> 14312;
14328 -> 14315;
14328 -> 14327;
14329 -> 14328;
14329 -> 14237;
14329 -> 14327;
14330 -> 14328;
14330 -> 14237;
14330 -> 14329;
14331 -> 14329;
14332 -> 14330;
14332 -> 14331;
14333 -> 14332;
14333 -> 14331;
14334 -> 14333;
14335 -> 14334;
14335 -> 14333;
14336 -> 14333;
14337 -> 14335;
14337 -> 14336;
14338 -> 14336;
14339 -> 14337;
14339 -> 14338;
14340 -> 14339;
14340 -> 14336;
14341 -> 14336;
14342 -> 14341;
14342 -> 14333;
14343 -> 14339;
14344 -> 14339;
14345 -> 14339;
14346 -> 14345;
14347 -> 14345;
14347 -> 14346;
14348 -> 14346;
14348 -> 14345;
14349 -> 14345;
14349 -> 14348;
14350 -> 14348;
14351 -> 14349;
14351 -> 14350;
14352 -> 14350;
14353 -> 14351;
14353 -> 14352;
14354 -> 14353;
14354 -> 14339;
14354 -> 14352;
14355 -> 14352;
14356 -> 14353;
14356 -> 14339;
14356 -> 14355;
14356 -> 14352;
14357 -> 14350;
14358 -> 14351;
14359 -> 14351;
14360 -> 14351;
14360 -> 14359;
14361 -> 14359;
14362 -> 14360;
14362 -> 14361;
14363 -> 14362;
14363 -> 14351;
14363 -> 14361;
14364 -> 14361;
14365 -> 14363;
14365 -> 14364;
14365 -> 14361;
14366 -> 14361;
14367 -> 14362;
14367 -> 14366;
14368 -> 14366;
14369 -> 14367;
14369 -> 14368;
14370 -> 14368;
14371 -> 14369;
14371 -> 14370;
14372 -> 14370;
14372 -> 14368;
14373 -> 14369;
14373 -> 14366;
14374 -> 14367;
14374 -> 14351;
14374 -> 14366;
14375 -> 14366;
14376 -> 14374;
14376 -> 14375;
14377 -> 14373;
14377 -> 14375;
14378 -> 14376;
14378 -> 14375;
14379 -> 14377;
14379 -> 14351;
14379 -> 14378;
14379 -> 14375;
14380 -> 14379;
14381 -> 14380;
14382 -> 14381;
14382 -> 14361;
14383 -> 14382;
14384 -> 14382;
14385 -> 14383;
14385 -> 14384;
14386 -> 14385;
14386 -> 14384;
14387 -> 0;
14387 -> 14385;
14387 -> 14384;
14388 -> 0;
14388 -> 14385;
14388 -> 14384;
14389 -> 14385;
14389 -> 14384;
14390 -> 14385;
14390 -> 14384;
14391 -> 14385;
14391 -> 14384;
14392 -> 14385;
14392 -> 14384;
14393 -> 10221;
14393 -> 14385;
14393 -> 14384;
14394 -> 0;
14394 -> 14385;
14394 -> 14384;
14395 -> 14362;
14395 -> 14351;
14395 -> 14379;
14395 -> 14382;
14396 -> 14383;
14396 -> 14382;
14397 -> 14382;
14398 -> 14395;
14398 -> 14396;
14398 -> 14397;
14398 -> 14386;
14398 -> 14387;
14398 -> 14388;
14398 -> 14389;
14398 -> 14390;
14398 -> 14391;
14398 -> 14392;
14398 -> 14393;
14398 -> 14394;
14398 -> 14379;
14398 -> 0;
14398 -> 14382;
14399 -> 14398;
14399 -> 14359;
14400 -> 14399;
14400 -> 10387;
14400 -> 14359;
14401 -> 14399;
14401 -> 14398;
14401 -> 14359;
14402 -> 0;
14402 -> 14401;
14403 -> 14401;
14404 -> 14403;
14404 -> 14401;
14405 -> 14404;
14406 -> 14405;
14407 -> 14405;
14407 -> 14406;
14408 -> 14406;
14408 -> 14405;
14409 -> 14405;
14409 -> 14404;
14410 -> 14404;
14411 -> 14409;
14411 -> 14410;
14412 -> 14411;
14412 -> 14404;
14413 -> 14360;
14413 -> 14351;
14413 -> 14398;
14413 -> 14404;
14414 -> 14404;
14415 -> 14412;
14415 -> 14413;
14415 -> 14414;
14415 -> 14398;
14415 -> 14404;
14416 -> 14404;
14417 -> 14360;
14417 -> 14416;
14418 -> 14416;
14419 -> 14417;
14419 -> 14418;
14420 -> 14419;
14420 -> 14351;
14420 -> 14415;
14420 -> 14418;
14421 -> 14420;
14421 -> 14416;
14422 -> 14416;
14423 -> 14421;
14423 -> 14422;
14423 -> 14416;
14424 -> 14423;
14424 -> 14416;
14425 -> 14424;
14426 -> 14421;
14426 -> 14425;
14427 -> 14425;
14428 -> 14426;
14428 -> 14427;
14429 -> 14428;
14429 -> 14425;
14430 -> 14425;
14431 -> 14429;
14431 -> 14430;
14432 -> 14431;
14432 -> 14404;
14433 -> 14404;
14434 -> 14432;
14434 -> 14433;
14434 -> 14404;
14435 -> 14415;
14435 -> 14434;
14436 -> 14435;
14436 -> 14399;
14436 -> 14401;
14437 -> 14399;
14437 -> 14415;
14437 -> 14436;
14437 -> 14359;
14438 -> 14437;
14438 -> 14351;
14439 -> 14350;
14440 -> 14439;
14440 -> 14348;
14441 -> 14436;
14442 -> 14436;
14442 -> 14339;
14442 -> 14415;
14443 -> 14436;
14444 -> 14442;
14444 -> 14443;
14444 -> 14436;
14445 -> 14436;
14446 -> 14436;
14446 -> 14445;
14447 -> 14445;
14447 -> 14436;
14448 -> 14436;
14449 -> 14436;
14450 -> 14449;
14450 -> 14436;
14451 -> 14436;
14452 -> 10387;
14452 -> 14436;
14453 -> 10387;
14453 -> 14436;
14454 -> 14452;
14454 -> 14436;
14455 -> 14454;
14455 -> 10387;
14455 -> 14436;
14456 -> 14455;
14457 -> 14456;
14457 -> 14436;
14458 -> 14339;
14459 -> 14331;
14460 -> 14459;
14460 -> 14329;
14461 -> 14460;
14461 -> 14328;
14461 -> 14329;
14462 -> 14328;
14462 -> 14436;
14462 -> 14461;
14462 -> 14327;
14463 -> 14462;
14463 -> 14312;
14464 -> 14463;
14464 -> 14312;
14465 -> 14312;
14466 -> 14315;
14466 -> 14465;
14467 -> 14466;
14467 -> 14436;
14467 -> 14465;
14468 -> 14467;
14468 -> 14312;
14469 -> 14312;
14470 -> 14468;
14470 -> 14469;
14470 -> 14436;
14470 -> 14453;
14470 -> 14461;
14470 -> 10378;
14470 -> 10379;
14470 -> 10380;
14470 -> 10381;
14470 -> 10382;
14470 -> 10383;
14470 -> 10384;
14470 -> 10385;
14470 -> 10386;
14470 -> 0;
14470 -> 14312;
14471 -> 14470;
14471 -> 14469;
14472 -> 14469;
14473 -> 14471;
14473 -> 14472;
14474 -> 14473;
14474 -> 14469;
14475 -> 14469;
14476 -> 14474;
14476 -> 14475;
14477 -> 14475;
14478 -> 14476;
14478 -> 14470;
14478 -> 14475;
14479 -> 14469;
14480 -> 14478;
14480 -> 14479;
14480 -> 14469;
14481 -> 14470;
14481 -> 14469;
14482 -> 14469;
14483 -> 14481;
14483 -> 14482;
14484 -> 14483;
14484 -> 14480;
14484 -> 14482;
14485 -> 14483;
14485 -> 14480;
14485 -> 14482;
14486 -> 14485;
14486 -> 14469;
14487 -> 14486;
14487 -> 14469;
14488 -> 14481;
14488 -> 14469;
14489 -> 0;
14489 -> 14469;
14490 -> 14469;
14491 -> 14487;
14491 -> 14490;
14492 -> 14488;
14492 -> 14490;
14493 -> 14489;
14493 -> 14490;
14494 -> 14490;
14495 -> 14494;
14495 -> 14491;
14495 -> 14480;
14495 -> 14490;
14496 -> 14490;
14497 -> 14496;
14497 -> 14469;
14498 -> 14469;
14499 -> 14470;
14499 -> 14497;
14499 -> 14480;
14499 -> 14312;
14500 -> 14326;
14500 -> 14499;
14500 -> 14312;
14501 -> 14500;
14501 -> 14312;
14502 -> 0;
14502 -> 14501;
14503 -> 14501;
14504 -> 14502;
14504 -> 14503;
14505 -> 14504;
14505 -> 14503;
14506 -> 14503;
14507 -> 14506;
14507 -> 14503;
14508 -> 0;
14508 -> 14503;
14509 -> 14503;
14510 -> 14507;
14510 -> 14509;
14511 -> 14508;
14511 -> 14509;
14512 -> 14510;
14512 -> 14511;
14512 -> 14509;
14513 -> 14503;
14513 -> 14499;
14513 -> 14504;
14514 -> 14312;
14515 -> 14315;
14515 -> 14514;
14516 -> 14515;
14516 -> 14499;
14516 -> 14514;
14517 -> 14516;
14517 -> 14312;
14518 -> 14312;
14519 -> 14517;
14519 -> 14518;
14520 -> 14518;
14521 -> 14519;
14521 -> 14520;
14522 -> 14521;
14522 -> 14518;
14523 -> 14518;
14524 -> 14522;
14524 -> 14523;
14525 -> 14523;
14526 -> 14518;
14527 -> 14524;
14527 -> 14526;
14527 -> 14518;
14528 -> 14517;
14528 -> 14518;
14529 -> 14518;
14530 -> 14528;
14530 -> 14529;
14531 -> 14530;
14531 -> 14527;
14531 -> 14529;
14532 -> 14530;
14532 -> 14527;
14532 -> 14529;
14533 -> 14532;
14533 -> 14518;
14534 -> 14533;
14534 -> 14518;
14535 -> 14528;
14535 -> 14518;
14536 -> 0;
14536 -> 14518;
14537 -> 14518;
14538 -> 14534;
14538 -> 14537;
14539 -> 14535;
14539 -> 14537;
14540 -> 14536;
14540 -> 14537;
14541 -> 14537;
14542 -> 14541;
14542 -> 14538;
14542 -> 14527;
14542 -> 14537;
14543 -> 14537;
14544 -> 14543;
14544 -> 14518;
14545 -> 14518;
14546 -> 14517;
14546 -> 14544;
14546 -> 14527;
14546 -> 14312;
14547 -> 14326;
14547 -> 14546;
14547 -> 14312;
14548 -> 14547;
14548 -> 14312;
14549 -> 0;
14549 -> 14548;
14550 -> 14548;
14551 -> 14549;
14551 -> 14550;
14552 -> 14551;
14552 -> 14550;
14553 -> 14550;
14554 -> 14553;
14554 -> 14550;
14555 -> 0;
14555 -> 14550;
14556 -> 14550;
14557 -> 14554;
14557 -> 14556;
14558 -> 14555;
14558 -> 14556;
14559 -> 14557;
14559 -> 14558;
14559 -> 14556;
14560 -> 14550;
14560 -> 14546;
14560 -> 14551;
14561 -> 14312;
14562 -> 14315;
14562 -> 14561;
14563 -> 14561;
14564 -> 14562;
14564 -> 14563;
14565 -> 14564;
14565 -> 14546;
14565 -> 14563;
14566 -> 14563;
14567 -> 14565;
14567 -> 14561;
14568 -> 14561;
14569 -> 14567;
14569 -> 14568;
14569 -> 14561;
14570 -> 14569;
14570 -> 14312;
14571 -> 14326;
14571 -> 14570;
14571 -> 14312;
14572 -> 14320;
14572 -> 14571;
14573 -> 14571;
14574 -> 14315;
14574 -> 14546;
14574 -> 14573;
14575 -> 0;
14575 -> 14573;
14576 -> 14573;
14577 -> 14575;
14577 -> 14576;
14578 -> 14574;
14578 -> 14576;
14579 -> 14577;
14579 -> 14576;
14580 -> 14576;
14581 -> 14578;
14581 -> 14580;
14582 -> 14581;
14582 -> 14576;
14583 -> 0;
14583 -> 14576;
14584 -> 14576;
14585 -> 14582;
14585 -> 14584;
14586 -> 14583;
14586 -> 14584;
14587 -> 14585;
14587 -> 14586;
14587 -> 14584;
14588 -> 14578;
14588 -> 14546;
14588 -> 14577;
14588 -> 14576;
14589 -> 14588;
14590 -> 14588;
14591 -> 14588;
14592 -> 14591;
14592 -> 14588;
14593 -> 14587;
14593 -> 14588;
14594 -> 14590;
14594 -> 14588;
14595 -> 14590;
14595 -> 14588;
14596 -> 14593;
14596 -> 14588;
14597 -> 14588;
14598 -> 14588;
14599 -> 14598;
14599 -> 14588;
14600 -> 14588;
14601 -> 14588;
14602 -> 14594;
14602 -> 14588;
14603 -> 14595;
14603 -> 14588;
14604 -> 14596;
14604 -> 14588;
14605 -> 14588;
14606 -> 14588;
14607 -> 14600;
14607 -> 14588;
14608 -> 14588;
14609 -> 14588;
14610 -> 14588;
14611 -> 14588;
14612 -> 14588;
14613 -> 14588;
14614 -> 14588;
14615 -> 14588;
14616 -> 14588;
14617 -> 14588;
14618 -> 14588;
14619 -> 14588;
14620 -> 14588;
14621 -> 14588;
14622 -> 14588;
14623 -> 14588;
14624 -> 14588;
14625 -> 14588;
14626 -> 14588;
14627 -> 14588;
14628 -> 14588;
14629 -> 14588;
14630 -> 14588;
14631 -> 14588;
14632 -> 14631;
14632 -> 14588;
14633 -> 14631;
14633 -> 14609;
14633 -> 14588;
14634 -> 14588;
14635 -> 14609;
14635 -> 14631;
14635 -> 14588;
14636 -> 14588;
14637 -> 14588;
14638 -> 14588;
14639 -> 14600;
14639 -> 14638;
14639 -> 14588;
14640 -> 14639;
14640 -> 14601;
14640 -> 14588;
14641 -> 14588;
14642 -> 14588;
14643 -> 14588;
14644 -> 14600;
14644 -> 14643;
14644 -> 14588;
14645 -> 14644;
14646 -> 14645;
14646 -> 14644;
14647 -> 14642;
14647 -> 14644;
14648 -> 14644;
14649 -> 14647;
14649 -> 14648;
14650 -> 14646;
14650 -> 14648;
14651 -> 14648;
14652 -> 14650;
14652 -> 14651;
14653 -> 14652;
14653 -> 14648;
14654 -> 14648;
14655 -> 14654;
14655 -> 14653;
14655 -> 14588;
14655 -> 14648;
14656 -> 14644;
14657 -> 14642;
14657 -> 14588;
14658 -> 14642;
14658 -> 14588;
14659 -> 14600;
14660 -> 14659;
14660 -> 14600;
14661 -> 14600;
14662 -> 14600;
14663 -> 14600;
14664 -> 14600;
14665 -> 14600;
14666 -> 14600;
14667 -> 14600;
14668 -> 14600;
14669 -> 14600;
14670 -> 14600;
14671 -> 14600;
14672 -> 14600;
14673 -> 14600;
14674 -> 14600;
14675 -> 14600;
14675 -> 0;
14676 -> 14578;
14676 -> 14600;
14676 -> 14577;
14676 -> 14576;
14677 -> 14573;
14678 -> 14676;
14678 -> 14677;
14678 -> 14573;
14679 -> 14676;
14679 -> 14573;
14680 -> 14679;
14681 -> 14680;
14681 -> 14571;
14682 -> 14571;
14683 -> 14572;
14683 -> 14682;
14684 -> 14681;
14684 -> 14682;
14685 -> 14682;
14686 -> 14684;
14686 -> 14685;
14686 -> 14682;
14687 -> 14571;
14688 -> 14312;
14689 -> 14315;
14689 -> 14600;
14689 -> 14688;
14690 -> 14689;
14690 -> 14312;
14691 -> 14251;
14692 -> 14253;
14692 -> 14251;
14693 -> 14308;
14693 -> 14251;
14694 -> 14683;
14694 -> 14251;
14695 -> 14251;
14696 -> 14254;
14696 -> 14251;
14697 -> 14251;
14698 -> 14693;
14698 -> 14697;
14699 -> 14694;
14699 -> 14697;
14700 -> 14695;
14700 -> 14697;
14701 -> 14696;
14701 -> 14697;
14702 -> 14255;
14702 -> 14697;
14703 -> 14697;
14704 -> 14702;
14704 -> 14703;
14705 -> 14703;
14706 -> 14704;
14706 -> 14705;
14707 -> 14705;
14708 -> 14706;
14708 -> 14707;
14709 -> 14707;
14710 -> 14708;
14710 -> 14709;
14711 -> 14710;
14711 -> 14709;
14712 -> 14711;
14712 -> 14707;
14713 -> 14712;
14713 -> 14705;
14714 -> 14713;
14714 -> 14703;
14715 -> 14703;
14716 -> 14704;
14716 -> 14715;
14717 -> 14715;
14718 -> 14716;
14718 -> 14717;
14719 -> 14717;
14720 -> 14719;
14720 -> 14715;
14721 -> 14715;
14722 -> 14720;
14722 -> 14721;
14722 -> 14715;
14723 -> 14722;
14723 -> 14715;
14724 -> 14723;
14724 -> 14703;
14725 -> 14703;
14726 -> 14704;
14726 -> 14725;
14727 -> 0;
14727 -> 14725;
14728 -> 14727;
14728 -> 14703;
14729 -> 14728;
14729 -> 14704;
14729 -> 14703;
14730 -> 14724;
14730 -> 14729;
14730 -> 14703;
14731 -> 14697;
14732 -> 14697;
14733 -> 14699;
14733 -> 14732;
14733 -> 14697;
14734 -> 14698;
14734 -> 14237;
14734 -> 14733;
14734 -> 14697;
14735 -> 14734;
14736 -> 7568;
14736 -> 14735;
14736 -> 14600;
14736 -> 7532;
14737 -> 7568;
14737 -> 7562;
14738 -> 7562;
14739 -> 14737;
14739 -> 14736;
14739 -> 14738;
14740 -> 14739;
14740 -> 7562;
14741 -> 7562;
14742 -> 14740;
14742 -> 14741;
14743 -> 14741;
14744 -> 14742;
14744 -> 14743;
14745 -> 14743;
14746 -> 14745;
14747 -> 14743;
14748 -> 14744;
14748 -> 14741;
14749 -> 14741;
14750 -> 14748;
14750 -> 14749;
14751 -> 14750;
14751 -> 14736;
14751 -> 14749;
14752 -> 14750;
14752 -> 14736;
14752 -> 14749;
14753 -> 14749;
14754 -> 14752;
14754 -> 14753;
14754 -> 14749;
14755 -> 14749;
14756 -> 14755;
14756 -> 14741;
14757 -> 14741;
14758 -> 14742;
14758 -> 14757;
14759 -> 14757;
14760 -> 14759;
14761 -> 14757;
14762 -> 14758;
14762 -> 14741;
14763 -> 14741;
14764 -> 14762;
14764 -> 14763;
14765 -> 14764;
14765 -> 14736;
14765 -> 14763;
14766 -> 14764;
14766 -> 14736;
14766 -> 14763;
14767 -> 14763;
14768 -> 14766;
14768 -> 14767;
14768 -> 14763;
14769 -> 14763;
14770 -> 14769;
14770 -> 14741;
14771 -> 14741;
14772 -> 14742;
14772 -> 14736;
14772 -> 14771;
14773 -> 14772;
14773 -> 14741;
14774 -> 14741;
14775 -> 14774;
14775 -> 7562;
14776 -> 7568;
14776 -> 14775;
14776 -> 14736;
14776 -> 14774;
14776 -> 7532;
14777 -> 13852;
14777 -> 14776;
14777 -> 13853;
14778 -> 14777;
14778 -> 13851;
14779 -> 14778;
14779 -> 13856;
14780 -> 14779;
14780 -> 7562;
14781 -> 14780;
14781 -> 13859;
14782 -> 14776;
14783 -> 14776;
14783 -> 14782;
14784 -> 14782;
14785 -> 14783;
14785 -> 14776;
14785 -> 14784;
14785 -> 14782;
14786 -> 14776;
14787 -> 13865;
14787 -> 14776;
14788 -> 14787;
14788 -> 14776;
14789 -> 14776;
14790 -> 14789;
14790 -> 14776;
14791 -> 14776;
14792 -> 14776;
14793 -> 14776;
14794 -> 14793;
14794 -> 14776;
14795 -> 14776;
14796 -> 14776;
14797 -> 7568;
14797 -> 7562;
14798 -> 14797;
14798 -> 7562;
14799 -> 7562;
14800 -> 14798;
14800 -> 14799;
14801 -> 14797;
14801 -> 14776;
14801 -> 14799;
14802 -> 14799;
14803 -> 14801;
14803 -> 14802;
14804 -> 14802;
14805 -> 14803;
14805 -> 14804;
14806 -> 14804;
14807 -> 14805;
14807 -> 14806;
14808 -> 14806;
14809 -> 14807;
14809 -> 14808;
14810 -> 14809;
14810 -> 14808;
14811 -> 14810;
14811 -> 14806;
14812 -> 14811;
14812 -> 14804;
14813 -> 14812;
14813 -> 14802;
14814 -> 14802;
14815 -> 14803;
14815 -> 14814;
14816 -> 14814;
14817 -> 14816;
14817 -> 14802;
14818 -> 14802;
14819 -> 14803;
14819 -> 14818;
14820 -> 0;
14820 -> 14818;
14821 -> 14820;
14821 -> 14802;
14822 -> 14817;
14822 -> 14821;
14822 -> 14802;
14823 -> 14802;
14824 -> 14803;
14824 -> 14823;
14825 -> 0;
14825 -> 14823;
14826 -> 14825;
14826 -> 14802;
14827 -> 14826;
14827 -> 14803;
14827 -> 14802;
14828 -> 14822;
14828 -> 14827;
14828 -> 14802;
14829 -> 14799;
14830 -> 14799;
14831 -> 14801;
14831 -> 14830;
14832 -> 0;
14832 -> 14830;
14833 -> 14832;
14833 -> 14799;
14834 -> 14800;
14834 -> 14799;
14835 -> 14799;
14836 -> 14799;
14837 -> 14834;
14837 -> 14836;
14838 -> 14835;
14838 -> 14836;
14839 -> 14801;
14839 -> 14836;
14840 -> 14836;
14841 -> 14839;
14841 -> 14840;
14842 -> 14840;
14843 -> 14841;
14843 -> 14842;
14844 -> 14842;
14845 -> 14843;
14845 -> 14844;
14846 -> 14844;
14847 -> 14845;
14847 -> 14846;
14848 -> 14847;
14848 -> 14846;
14849 -> 14848;
14849 -> 14844;
14850 -> 14849;
14850 -> 14842;
14851 -> 14850;
14851 -> 14840;
14852 -> 14840;
14853 -> 14841;
14853 -> 14852;
14854 -> 14852;
14855 -> 14854;
14855 -> 14840;
14856 -> 14840;
14857 -> 14841;
14857 -> 14856;
14858 -> 0;
14858 -> 14856;
14859 -> 14858;
14859 -> 14840;
14860 -> 14855;
14860 -> 14859;
14860 -> 14840;
14861 -> 14840;
14862 -> 14841;
14862 -> 14861;
14863 -> 0;
14863 -> 14861;
14864 -> 14863;
14864 -> 14840;
14865 -> 14864;
14865 -> 14841;
14865 -> 14840;
14866 -> 14860;
14866 -> 14865;
14866 -> 14840;
14867 -> 14836;
14868 -> 14836;
14869 -> 14839;
14869 -> 14868;
14870 -> 0;
14870 -> 14868;
14871 -> 14870;
14871 -> 14836;
14872 -> 14836;
14873 -> 14872;
14873 -> 14836;
14874 -> 14836;
14875 -> 14836;
14876 -> 14839;
14876 -> 14875;
14877 -> 14875;
14878 -> 14877;
14879 -> 14876;
14879 -> 14836;
14880 -> 14837;
14880 -> 14836;
14881 -> 14874;
14881 -> 14836;
14882 -> 14836;
14883 -> 14880;
14883 -> 14882;
14884 -> 14881;
14884 -> 14882;
14885 -> 14839;
14885 -> 14882;
14886 -> 14883;
14886 -> 14882;
14887 -> 14884;
14887 -> 14882;
14888 -> 14882;
14889 -> 14886;
14889 -> 14888;
14890 -> 14887;
14890 -> 14888;
14891 -> 14885;
14891 -> 14888;
14892 -> 14882;
14893 -> 14882;
14894 -> 14885;
14894 -> 14776;
14894 -> 14893;
14895 -> 14894;
14895 -> 14882;
14896 -> 14882;
14897 -> 14895;
14897 -> 14896;
14898 -> 14897;
14898 -> 14882;
14899 -> 14882;
14900 -> 14883;
14900 -> 14899;
14901 -> 14899;
14902 -> 14900;
14902 -> 14776;
14902 -> 14901;
14903 -> 14901;
14904 -> 14902;
14904 -> 14776;
14904 -> 14901;
14905 -> 14904;
14905 -> 14899;
14906 -> 14905;
14906 -> 14882;
14907 -> 14836;
14908 -> 14879;
14908 -> 14836;
14909 -> 14890;
14909 -> 14836;
14910 -> 14836;
14911 -> 14838;
14911 -> 14836;
14912 -> 14836;
14913 -> 14908;
14913 -> 14912;
14914 -> 14909;
14914 -> 14912;
14915 -> 14910;
14915 -> 14912;
14916 -> 14911;
14916 -> 14912;
14917 -> 14839;
14917 -> 14912;
14918 -> 14912;
14919 -> 14917;
14919 -> 14918;
14920 -> 14918;
14921 -> 14919;
14921 -> 14920;
14922 -> 14920;
14923 -> 14921;
14923 -> 14922;
14924 -> 14922;
14925 -> 14923;
14925 -> 14924;
14926 -> 14925;
14926 -> 14924;
14927 -> 14926;
14927 -> 14922;
14928 -> 14927;
14928 -> 14920;
14929 -> 14928;
14929 -> 14918;
14930 -> 14918;
14931 -> 14919;
14931 -> 14930;
14932 -> 14930;
14933 -> 14932;
14933 -> 14918;
14934 -> 14918;
14935 -> 14919;
14935 -> 14934;
14936 -> 0;
14936 -> 14934;
14937 -> 14936;
14937 -> 14918;
14938 -> 14933;
14938 -> 14937;
14938 -> 14918;
14939 -> 14918;
14940 -> 14919;
14940 -> 14939;
14941 -> 0;
14941 -> 14939;
14942 -> 14941;
14942 -> 14918;
14943 -> 14942;
14943 -> 14919;
14943 -> 14918;
14944 -> 14938;
14944 -> 14943;
14944 -> 14918;
14945 -> 14912;
14946 -> 14912;
14947 -> 14914;
14947 -> 14946;
14947 -> 14912;
14948 -> 14913;
14948 -> 14776;
14948 -> 14947;
14948 -> 14912;
14949 -> 14948;
14949 -> 14799;
14950 -> 14949;
14950 -> 7562;
14951 -> 7568;
14951 -> 14950;
14951 -> 14776;
14951 -> 14902;
14951 -> 14948;
14951 -> 7532;
14952 -> 14131;
14952 -> 14951;
14952 -> 7562;
14953 -> 14132;
14953 -> 14951;
14953 -> 14134;
14954 -> 14953;
14954 -> 14137;
14955 -> 14954;
14955 -> 14142;
14956 -> 14955;
14956 -> 14951;
14956 -> 14142;
14957 -> 14956;
14957 -> 14147;
14957 -> 14142;
14958 -> 14954;
14958 -> 14155;
14959 -> 14958;
14959 -> 14951;
14959 -> 14155;
14960 -> 14959;
14960 -> 14160;
14960 -> 14155;
14961 -> 14170;
14961 -> 14951;
14961 -> 7562;
14962 -> 14961;
14962 -> 14173;
14963 -> 14179;
14963 -> 14951;
14963 -> 7562;
14964 -> 14963;
14964 -> 14182;
14965 -> 14964;
14965 -> 14182;
14966 -> 14965;
14966 -> 14187;
14967 -> 14951;
14967 -> 14196;
14968 -> 14967;
14968 -> 14194;
14969 -> 14968;
14969 -> 14190;
14970 -> 14969;
14970 -> 14187;
14971 -> 14951;
14971 -> 14205;
14972 -> 14971;
14972 -> 14203;
14973 -> 14972;
14973 -> 14187;
14974 -> 14973;
14975 -> 14970;
14975 -> 14974;
14975 -> 14973;
14976 -> 14975;
14977 -> 14951;
14978 -> 14977;
14978 -> 14951;
14979 -> 14978;
14979 -> 14951;
14980 -> 7568;
14980 -> 7562;
14981 -> 7568;
14981 -> 7562;
14982 -> 14981;
14982 -> 14951;
14982 -> 7562;
14983 -> 14981;
14983 -> 14951;
14983 -> 7562;
14984 -> 14983;
14985 -> 14981;
14985 -> 14984;
14986 -> 14984;
14987 -> 14985;
14987 -> 14951;
14987 -> 14986;
14988 -> 14987;
14988 -> 14984;
14989 -> 14984;
14990 -> 14985;
14990 -> 14951;
14990 -> 14984;
14991 -> 14990;
14992 -> 14988;
14992 -> 14991;
14993 -> 14992;
14993 -> 14990;
14994 -> 14990;
14995 -> 14994;
14995 -> 14993;
14995 -> 14951;
14995 -> 14990;
14996 -> 14993;
14996 -> 14994;
14996 -> 14951;
14996 -> 14995;
14997 -> 14995;
14998 -> 14996;
14998 -> 14997;
14999 -> 14995;
15000 -> 14989;
15000 -> 14995;
15001 -> 14995;
15002 -> 14998;
15002 -> 15001;
15003 -> 14999;
15003 -> 15001;
15004 -> 15000;
15004 -> 15001;
15005 -> 15001;
15006 -> 15001;
15007 -> 15002;
15007 -> 15006;
15008 -> 15006;
15008 -> 15001;
15009 -> 15008;
15010 -> 15001;
15011 -> 15002;
15011 -> 15010;
15012 -> 15010;
15013 -> 15011;
15013 -> 15012;
15014 -> 15010;
15015 -> 15011;
15015 -> 15001;
15016 -> 15015;
15017 -> 15015;
15018 -> 15016;
15018 -> 15017;
15018 -> 15015;
15019 -> 15016;
15019 -> 15018;
15020 -> 15009;
15020 -> 15018;
15021 -> 15004;
15021 -> 15018;
15022 -> 15018;
15023 -> 15019;
15023 -> 15022;
15024 -> 15020;
15024 -> 15022;
15025 -> 15021;
15025 -> 15022;
15026 -> 15022;
15027 -> 15022;
15028 -> 15023;
15028 -> 15027;
15029 -> 15027;
15029 -> 15022;
15030 -> 15029;
15031 -> 15023;
15031 -> 15030;
15032 -> 0;
15032 -> 15030;
15033 -> 15031;
15033 -> 15011;
15033 -> 0;
15033 -> 15030;
15034 -> 0;
15034 -> 15033;
15035 -> 15034;
15035 -> 15030;
15036 -> 15035;
15036 -> 15029;
15037 -> 15036;
15038 -> 15018;
15039 -> 15023;
15039 -> 15027;
15040 -> 15029;
15041 -> 15022;
15042 -> 15023;
15042 -> 15041;
15043 -> 15042;
15043 -> 15011;
15043 -> 15041;
15044 -> 15041;
15045 -> 15042;
15045 -> 15011;
15045 -> 15044;
15045 -> 15041;
15046 -> 15022;
15047 -> 15040;
15047 -> 15023;
15048 -> 15047;
15048 -> 15023;
15049 -> 15023;
15050 -> 15023;
15051 -> 15023;
15051 -> 15050;
15052 -> 15050;
15052 -> 15023;
15053 -> 15052;
15054 -> 15023;
15054 -> 15053;
15055 -> 0;
15055 -> 15053;
15056 -> 15054;
15056 -> 15023;
15056 -> 0;
15056 -> 15053;
15057 -> 0;
15057 -> 15056;
15058 -> 15057;
15058 -> 15053;
15059 -> 15058;
15059 -> 15052;
15060 -> 15059;
15061 -> 14985;
15061 -> 15023;
15061 -> 14984;
15062 -> 14984;
15063 -> 14988;
15063 -> 15062;
15064 -> 15063;
15064 -> 15023;
15064 -> 15062;
15065 -> 15064;
15065 -> 14984;
15066 -> 14984;
15067 -> 15065;
15067 -> 15066;
15068 -> 14988;
15068 -> 14984;
15069 -> 14989;
15069 -> 14984;
15070 -> 14984;
15071 -> 15068;
15071 -> 15070;
15072 -> 15069;
15072 -> 15070;
15073 -> 15070;
15074 -> 15073;
15074 -> 15070;
15075 -> 15070;
15076 -> 15071;
15076 -> 15075;
15077 -> 15076;
15077 -> 15023;
15077 -> 15075;
15078 -> 15077;
15078 -> 15070;
15079 -> 15072;
15079 -> 15070;
15080 -> 15070;
15081 -> 15074;
15081 -> 15080;
15082 -> 15078;
15082 -> 15080;
15083 -> 15079;
15083 -> 15080;
15084 -> 15080;
15085 -> 15082;
15085 -> 15084;
15085 -> 15080;
15086 -> 15070;
15087 -> 15070;
15088 -> 15071;
15088 -> 15087;
15089 -> 15088;
15089 -> 15023;
15089 -> 15087;
15090 -> 15089;
15090 -> 15070;
15091 -> 15070;
15092 -> 15090;
15092 -> 15091;
15093 -> 15073;
15093 -> 15092;
15094 -> 15092;
15095 -> 15094;
15096 -> 15094;
15097 -> 15096;
15097 -> 15023;
15097 -> 15094;
15098 -> 15096;
15098 -> 15023;
15098 -> 15094;
15099 -> 15098;
15099 -> 15092;
15100 -> 15072;
15100 -> 15092;
15101 -> 15092;
15102 -> 15093;
15102 -> 15101;
15103 -> 15099;
15103 -> 15101;
15104 -> 15100;
15104 -> 15101;
15105 -> 15101;
15106 -> 15103;
15106 -> 15105;
15106 -> 15101;
15107 -> 15092;
15108 -> 15073;
15108 -> 15070;
15109 -> 15108;
15109 -> 14984;
15110 -> 14989;
15110 -> 14984;
15111 -> 15110;
15111 -> 14983;
15112 -> 15111;
15112 -> 14981;
15112 -> 14983;
15113 -> 14983;
15114 -> 14981;
15114 -> 15023;
15114 -> 15112;
15114 -> 15110;
15114 -> 15113;
15114 -> 14983;
15115 -> 14981;
15115 -> 15023;
15115 -> 15112;
15115 -> 7562;
15116 -> 7568;
15116 -> 7562;
15117 -> 7568;
15117 -> 7562;
15118 -> 7568;
15118 -> 7562;
15119 -> 7562;
15120 -> 15118;
15120 -> 15115;
15120 -> 15119;
15121 -> 15120;
15121 -> 7562;
15122 -> 15121;
15122 -> 15115;
15122 -> 7562;
15123 -> 7562;
15124 -> 15123;
15124 -> 15122;
15124 -> 7562;
15125 -> 15121;
15125 -> 15123;
15125 -> 15115;
15125 -> 15124;
15126 -> 15117;
15126 -> 15124;
15127 -> 15124;
15128 -> 15125;
15128 -> 15127;
15129 -> 15126;
15129 -> 15127;
15130 -> 15127;
15130 -> 15125;
15131 -> 15128;
15131 -> 15127;
15132 -> 15127;
15133 -> 15128;
15133 -> 15132;
15133 -> 15127;
15134 -> 15127;
15135 -> 15128;
15136 -> 15121;
15136 -> 15123;
15136 -> 15128;
15136 -> 15124;
15137 -> 15124;
15138 -> 15136;
15138 -> 15137;
15139 -> 7568;
15139 -> 7562;
15140 -> 0;
15140 -> 7562;
15141 -> 7568;
15141 -> 15140;
15141 -> 15138;
15141 -> 0;
15141 -> 7532;
15142 -> 7562;
15143 -> 15142;
15144 -> 15143;
15145 -> 7568;
15145 -> 7562;
15146 -> 7562;
15147 -> 7568;
15147 -> 15146;
15147 -> 15141;
15147 -> 7532;
15148 -> 7568;
15148 -> 7562;
15149 -> 7562;
15150 -> 15148;
15150 -> 15149;
15151 -> 15150;
15151 -> 15147;
15151 -> 15149;
15152 -> 15150;
15152 -> 15147;
15152 -> 15149;
15153 -> 15152;
15153 -> 7562;
15154 -> 7568;
15154 -> 7562;
15155 -> 0;
15155 -> 7562;
15156 -> 7568;
15156 -> 15155;
15156 -> 15153;
15156 -> 7532;
15157 -> 7568;
15157 -> 7562;
15158 -> 7568;
15158 -> 7562;
15159 -> 15158;
15159 -> 15156;
15159 -> 7562;
15160 -> 7562;
15161 -> 15159;
15161 -> 15160;
15162 -> 15161;
15163 -> 0;
15163 -> 7562;
15164 -> 15158;
15164 -> 15156;
15164 -> 7562;
15165 -> 7562;
15166 -> 15164;
15166 -> 15165;
15167 -> 15166;
15167 -> 15165;
15168 -> 15167;
15169 -> 7562;
15170 -> 15163;
15170 -> 15169;
15171 -> 15168;
15171 -> 15169;
15172 -> 15158;
15172 -> 15169;
15173 -> 15170;
15173 -> 15169;
15174 -> 15169;
15175 -> 15157;
15175 -> 15173;
15175 -> 15174;
15175 -> 15169;
15176 -> 15169;
15177 -> 15157;
15177 -> 15176;
15177 -> 15169;
15178 -> 15171;
15178 -> 15169;
15179 -> 15169;
15180 -> 15157;
15180 -> 15178;
15180 -> 15179;
15180 -> 15169;
15181 -> 15169;
15182 -> 15157;
15182 -> 15181;
15182 -> 15169;
15183 -> 7562;
15184 -> 7562;
15185 -> 15158;
15185 -> 15184;
15186 -> 15185;
15186 -> 15156;
15186 -> 15184;
15187 -> 15186;
15187 -> 7562;
15188 -> 7562;
15189 -> 15158;
15189 -> 15188;
15190 -> 15189;
15190 -> 15156;
15190 -> 15188;
15191 -> 15190;
15191 -> 7562;
15192 -> 7562;
15193 -> 15158;
15193 -> 15192;
15194 -> 15193;
15194 -> 15156;
15194 -> 15192;
15195 -> 15194;
15195 -> 7562;
15196 -> 7562;
15197 -> 15158;
15197 -> 15196;
15198 -> 15196;
15199 -> 15197;
15199 -> 15198;
15200 -> 15198;
15201 -> 15199;
15201 -> 15156;
15201 -> 15200;
15202 -> 15200;
15203 -> 15201;
15203 -> 15196;
15204 -> 15203;
15204 -> 15196;
15205 -> 15196;
15206 -> 15203;
15206 -> 15205;
15207 -> 15206;
15207 -> 15196;
15208 -> 15196;
15209 -> 15207;
15209 -> 15208;
15210 -> 15209;
15210 -> 15203;
15210 -> 15208;
15211 -> 15210;
15211 -> 7562;
15212 -> 15211;
15212 -> 7562;
15213 -> 7568;
15213 -> 7562;
15214 -> 15213;
15214 -> 15212;
15214 -> 7562;
15215 -> 7568;
15215 -> 7562;
15216 -> 7562;
15217 -> 15216;
15217 -> 7562;
15218 -> 7562;
15219 -> 15215;
15219 -> 15218;
15220 -> 15219;
15220 -> 15214;
15220 -> 15218;
15221 -> 15218;
15222 -> 15220;
15222 -> 7562;
15223 -> 7562;
15224 -> 15222;
15224 -> 15223;
15224 -> 7562;
15225 -> 7562;
15226 -> 15215;
15226 -> 15225;
15227 -> 15225;
15228 -> 15226;
15228 -> 15227;
15229 -> 15227;
15230 -> 15228;
15230 -> 15229;
15231 -> 15229;
15232 -> 15230;
15232 -> 15214;
15232 -> 15231;
15232 -> 15229;
15233 -> 15227;
15234 -> 15228;
15234 -> 15214;
15234 -> 15227;
15235 -> 15234;
15235 -> 15225;
15236 -> 15235;
15236 -> 15214;
15236 -> 15225;
15237 -> 15235;
15237 -> 15214;
15237 -> 15225;
15238 -> 15237;
15238 -> 7562;
15239 -> 7562;
15240 -> 15238;
15240 -> 15239;
15240 -> 7562;
15241 -> 15217;
15241 -> 7562;
15242 -> 7568;
15242 -> 15241;
15242 -> 15214;
15242 -> 7532;
15243 -> 7568;
15243 -> 7562;
15244 -> 7562;
15245 -> 15243;
15245 -> 15242;
15245 -> 7562;
15246 -> 7568;
15246 -> 7562;
15247 -> 7562;
15248 -> 15246;
15248 -> 15247;
15249 -> 15247;
15250 -> 15247;
15251 -> 15248;
15251 -> 15250;
15252 -> 15251;
15252 -> 15245;
15252 -> 15250;
15253 -> 15250;
15254 -> 15252;
15254 -> 15247;
15255 -> 15247;
15256 -> 15254;
15256 -> 15255;
15256 -> 15247;
15257 -> 15249;
15257 -> 15247;
15258 -> 15257;
15259 -> 15248;
15259 -> 15258;
15260 -> 15258;
15261 -> 15259;
15261 -> 15260;
15262 -> 15260;
15263 -> 15261;
15263 -> 15262;
15264 -> 15262;
15265 -> 15263;
15265 -> 15245;
15265 -> 15264;
15265 -> 15262;
15266 -> 15260;
15267 -> 15261;
15267 -> 15245;
15267 -> 15260;
15268 -> 15267;
15268 -> 15258;
15269 -> 15268;
15269 -> 15245;
15269 -> 15258;
15270 -> 15268;
15270 -> 15245;
15270 -> 15258;
15271 -> 15270;
15271 -> 15257;
15272 -> 15257;
15273 -> 15271;
15273 -> 15272;
15273 -> 15257;
15274 -> 15249;
15274 -> 15247;
15275 -> 15274;
15275 -> 7562;
15276 -> 0;
15276 -> 7562;
15277 -> 7568;
15277 -> 15275;
15277 -> 15245;
15277 -> 7532;
15278 -> 7568;
15278 -> 7562;
15279 -> 15278;
15279 -> 15277;
15279 -> 7562;
15280 -> 14737;
15280 -> 15279;
15280 -> 14738;
15281 -> 15280;
15281 -> 14743;
15282 -> 15281;
15282 -> 14741;
15283 -> 15282;
15283 -> 14749;
15284 -> 15283;
15284 -> 15279;
15284 -> 14749;
15285 -> 15283;
15285 -> 15279;
15285 -> 14749;
15286 -> 15285;
15286 -> 14753;
15286 -> 14749;
15287 -> 15280;
15287 -> 14757;
15288 -> 15287;
15288 -> 14741;
15289 -> 15288;
15289 -> 14763;
15290 -> 15289;
15290 -> 15279;
15290 -> 14763;
15291 -> 15289;
15291 -> 15279;
15291 -> 14763;
15292 -> 15291;
15292 -> 14767;
15292 -> 14763;
15293 -> 15280;
15293 -> 15279;
15293 -> 14771;
15294 -> 15293;
15294 -> 14741;
15295 -> 14981;
15295 -> 15279;
15295 -> 7562;
15296 -> 15251;
15296 -> 15279;
15296 -> 15250;
15297 -> 15296;
15297 -> 15247;
15298 -> 15297;
15298 -> 15255;
15298 -> 15247;
15299 -> 15263;
15299 -> 15279;
15299 -> 15264;
15299 -> 15262;
15300 -> 15261;
15300 -> 15279;
15300 -> 15260;
15301 -> 15300;
15301 -> 15258;
15302 -> 15301;
15302 -> 15279;
15302 -> 15258;
15303 -> 15301;
15303 -> 15279;
15303 -> 15258;
15304 -> 15303;
15304 -> 15257;
15305 -> 15304;
15305 -> 15272;
15305 -> 15257;
15306 -> 7568;
15306 -> 7562;
15307 -> 7568;
15307 -> 7562;
15308 -> 15306;
15308 -> 7562;
15309 -> 7562;
15310 -> 15308;
15310 -> 15309;
15311 -> 15307;
15311 -> 15279;
15311 -> 15309;
15312 -> 15310;
15312 -> 15309;
15313 -> 15311;
15313 -> 15279;
15313 -> 15312;
15313 -> 15309;
15314 -> 7568;
15314 -> 7562;
15315 -> 7562;
15316 -> 7568;
15316 -> 15315;
15316 -> 15313;
15316 -> 7532;
15317 -> 7568;
15317 -> 7562;
15318 -> 15317;
15318 -> 15316;
15318 -> 7562;
15319 -> 15318;
15319 -> 14251;
15320 -> 15318;
15320 -> 14256;
15321 -> 15320;
15321 -> 14258;
15322 -> 15321;
15322 -> 14260;
15323 -> 15322;
15323 -> 14262;
15324 -> 15323;
15324 -> 14262;
15325 -> 15324;
15325 -> 14260;
15326 -> 15325;
15326 -> 14258;
15327 -> 15326;
15327 -> 14256;
15328 -> 15320;
15328 -> 14268;
15329 -> 15328;
15329 -> 14270;
15330 -> 15320;
15330 -> 14278;
15331 -> 14281;
15331 -> 15320;
15331 -> 14256;
15332 -> 14277;
15332 -> 15331;
15332 -> 14256;
15333 -> 15318;
15333 -> 14285;
15334 -> 15318;
15334 -> 14285;
15335 -> 15318;
15335 -> 14285;
15336 -> 15318;
15336 -> 14318;
15337 -> 15318;
15337 -> 14327;
15338 -> 15337;
15338 -> 14312;
15339 -> 15338;
15339 -> 14312;
15340 -> 15318;
15340 -> 14469;
15341 -> 15340;
15341 -> 14482;
15342 -> 15341;
15342 -> 15318;
15342 -> 14482;
15343 -> 15342;
15343 -> 14469;
15344 -> 15343;
15344 -> 14490;
15345 -> 15340;
15345 -> 14490;
15346 -> 14494;
15346 -> 15344;
15346 -> 15318;
15346 -> 14490;
15347 -> 15318;
15347 -> 14312;
15348 -> 0;
15348 -> 15347;
15349 -> 15347;
15350 -> 15348;
15350 -> 15349;
15351 -> 15350;
15351 -> 15349;
15352 -> 15349;
15353 -> 15352;
15353 -> 15349;
15354 -> 0;
15354 -> 15349;
15355 -> 15349;
15356 -> 15353;
15356 -> 15355;
15357 -> 15354;
15357 -> 15355;
15358 -> 15356;
15358 -> 15357;
15358 -> 15355;
15359 -> 15349;
15359 -> 15318;
15359 -> 15350;
15360 -> 15318;
15360 -> 14518;
15361 -> 15360;
15361 -> 14529;
15362 -> 15361;
15362 -> 15318;
15362 -> 14529;
15363 -> 15362;
15363 -> 14518;
15364 -> 15363;
15364 -> 14537;
15365 -> 15360;
15365 -> 14537;
15366 -> 14541;
15366 -> 15364;
15366 -> 15318;
15366 -> 14537;
15367 -> 15318;
15367 -> 14312;
15368 -> 0;
15368 -> 15367;
15369 -> 15367;
15370 -> 15368;
15370 -> 15369;
15371 -> 15370;
15371 -> 15369;
15372 -> 15369;
15373 -> 15372;
15373 -> 15369;
15374 -> 0;
15374 -> 15369;
15375 -> 15369;
15376 -> 15373;
15376 -> 15375;
15377 -> 15374;
15377 -> 15375;
15378 -> 15376;
15378 -> 15377;
15378 -> 15375;
15379 -> 15369;
15379 -> 15318;
15379 -> 15370;
15380 -> 15318;
15381 -> 15318;
15382 -> 15381;
15382 -> 15318;
15383 -> 0;
15383 -> 15318;
15384 -> 15318;
15385 -> 15382;
15385 -> 15384;
15386 -> 15383;
15386 -> 15384;
15387 -> 15385;
15387 -> 15386;
15387 -> 15384;
15388 -> 15318;
15389 -> 15318;
15390 -> 15388;
15390 -> 15389;
15390 -> 15318;
15391 -> 15388;
15391 -> 15318;
15392 -> 15391;
15393 -> 15392;
15393 -> 15318;
15394 -> 15318;
15395 -> 15393;
15395 -> 15394;
15395 -> 15318;
15396 -> 15318;
15396 -> 14688;
15397 -> 15396;
15397 -> 14312;
15398 -> 15319;
15398 -> 14697;
15399 -> 15318;
15399 -> 14697;
15400 -> 15399;
15400 -> 14703;
15401 -> 15400;
15401 -> 14705;
15402 -> 15401;
15402 -> 14707;
15403 -> 15402;
15403 -> 14709;
15404 -> 15403;
15404 -> 14709;
15405 -> 15404;
15405 -> 14707;
15406 -> 15405;
15406 -> 14705;
15407 -> 15406;
15407 -> 14703;
15408 -> 15400;
15408 -> 14715;
15409 -> 15408;
15409 -> 14717;
15410 -> 15400;
15410 -> 14725;
15411 -> 14728;
15411 -> 15400;
15411 -> 14703;
15412 -> 14724;
15412 -> 15411;
15412 -> 14703;
15413 -> 15319;
15413 -> 14802;
15414 -> 15413;
15414 -> 14804;
15415 -> 15414;
15415 -> 14806;
15416 -> 15415;
15416 -> 14808;
15417 -> 15416;
15417 -> 14808;
15418 -> 15417;
15418 -> 14806;
15419 -> 15418;
15419 -> 14804;
15420 -> 15419;
15420 -> 14802;
15421 -> 15413;
15421 -> 14814;
15422 -> 15413;
15422 -> 14818;
15423 -> 15413;
15423 -> 14823;
15424 -> 14826;
15424 -> 15413;
15424 -> 14802;
15425 -> 14822;
15425 -> 15424;
15425 -> 14802;
15426 -> 15319;
15426 -> 14830;
15427 -> 15319;
15427 -> 14840;
15428 -> 15427;
15428 -> 14842;
15429 -> 15428;
15429 -> 14844;
15430 -> 15429;
15430 -> 14846;
15431 -> 15430;
15431 -> 14846;
15432 -> 15431;
15432 -> 14844;
15433 -> 15432;
15433 -> 14842;
15434 -> 15433;
15434 -> 14840;
15435 -> 15427;
15435 -> 14852;
15436 -> 15427;
15436 -> 14856;
15437 -> 15427;
15437 -> 14861;
15438 -> 14864;
15438 -> 15427;
15438 -> 14840;
15439 -> 14860;
15439 -> 15438;
15439 -> 14840;
15440 -> 15319;
15440 -> 14868;
15441 -> 15319;
15441 -> 14882;
15442 -> 15441;
15442 -> 14888;
15443 -> 15441;
15443 -> 15319;
15443 -> 14893;
15444 -> 15443;
15444 -> 14882;
15445 -> 15444;
15445 -> 14896;
15446 -> 15445;
15446 -> 14882;
15447 -> 15319;
15447 -> 14901;
15448 -> 15447;
15448 -> 14899;
15449 -> 15448;
15449 -> 14882;
15450 -> 15319;
15450 -> 14912;
15451 -> 15450;
15451 -> 14918;
15452 -> 15451;
15452 -> 14920;
15453 -> 15452;
15453 -> 14922;
15454 -> 15453;
15454 -> 14924;
15455 -> 15454;
15455 -> 14924;
15456 -> 15455;
15456 -> 14922;
15457 -> 15456;
15457 -> 14920;
15458 -> 15457;
15458 -> 14918;
15459 -> 15451;
15459 -> 14930;
15460 -> 15451;
15460 -> 14934;
15461 -> 15451;
15461 -> 14939;
15462 -> 14942;
15462 -> 15451;
15462 -> 14918;
15463 -> 14938;
15463 -> 15462;
15463 -> 14918;
15464 -> 7568;
15464 -> 7562;
15465 -> 7562;
15466 -> 7562;
15467 -> 15465;
15467 -> 15466;
15468 -> 15465;
15468 -> 15466;
15469 -> 15464;
15469 -> 15466;
15470 -> 15468;
15470 -> 15466;
15471 -> 15466;
15472 -> 15469;
15472 -> 15471;
15473 -> 15472;
15473 -> 15319;
15473 -> 15471;
15474 -> 15471;
15475 -> 15473;
15475 -> 15466;
15476 -> 15466;
15477 -> 15475;
15477 -> 15476;
15477 -> 15466;
15478 -> 15470;
15478 -> 15468;
15478 -> 15466;
15479 -> 15478;
15480 -> 15469;
15480 -> 15479;
15481 -> 15479;
15482 -> 15480;
15482 -> 15481;
15483 -> 15481;
15484 -> 15482;
15484 -> 15483;
15485 -> 15483;
15486 -> 15484;
15486 -> 15319;
15486 -> 15485;
15486 -> 15483;
15487 -> 15481;
15488 -> 15482;
15488 -> 15319;
15488 -> 15481;
15489 -> 15488;
15489 -> 15479;
15490 -> 15489;
15490 -> 15319;
15490 -> 15479;
15491 -> 15489;
15491 -> 15319;
15491 -> 15479;
15492 -> 15491;
15492 -> 15478;
15493 -> 15478;
15494 -> 15492;
15494 -> 15493;
15494 -> 15478;
15495 -> 15470;
15495 -> 15466;
15496 -> 13843;
15496 -> 15319;
15496 -> 13842;
15497 -> 13843;
15497 -> 15319;
15497 -> 13842;
15498 -> 15497;
15498 -> 13840;
15499 -> 7532;
15500 -> 7545;
15500 -> 15499;
15500 -> 7532;
15501 -> 15319;
15501 -> 7532;
15502 -> 7535;
15502 -> 15501;
15502 -> 15319;
15502 -> 7532;
15503 -> 7541;
15503 -> 7532;
15504 -> 15503;
15504 -> 15502;
15504 -> 7532;
15505 -> 15319;
15505 -> 15504;
15505 -> 7532;
15506 -> 15504;
15506 -> 15505;
15507 -> 7542;
15507 -> 15505;
15508 -> 15505;
15509 -> 15505;
15510 -> 15506;
15510 -> 15509;
15511 -> 15507;
15511 -> 15509;
15512 -> 15508;
15512 -> 15509;
15513 -> 15510;
15513 -> 15512;
15513 -> 15509;
15514 -> 15511;
15514 -> 7542;
15514 -> 15509;
15515 -> 15512;
15515 -> 15513;
15515 -> 15514;
15516 -> 15515;
15516 -> 15514;
15517 -> 0;
15517 -> 15514;
15518 -> 15514;
15519 -> 15516;
15519 -> 15518;
15519 -> 15514;
15520 -> 15516;
15520 -> 15519;
15521 -> 15519;
15522 -> 15520;
15522 -> 15521;
15522 -> 15519;
15523 -> 15522;
15523 -> 15519;
15524 -> 15519;
15525 -> 15523;
15525 -> 15524;
15526 -> 15512;
15526 -> 15524;
15527 -> 15525;
15527 -> 15520;
15527 -> 15522;
15527 -> 15524;
15528 -> 15527;
15528 -> 15524;
15529 -> 15525;
15529 -> 15520;
15529 -> 15522;
15529 -> 15524;
15530 -> 15528;
15530 -> 15524;
15531 -> 15524;
15532 -> 15527;
15532 -> 15524;
15533 -> 15528;
15533 -> 15524;
15534 -> 15533;
15534 -> 15530;
15534 -> 15524;
15535 -> 15534;
15535 -> 15512;
15535 -> 15509;
15536 -> 6671;
15536 -> 6670;
15537 -> 6670;
15538 -> 15536;
15538 -> 15537;
15539 -> 15537;
15540 -> 15538;
15540 -> 15539;
15541 -> 15539;
15542 -> 15540;
15542 -> 15541;
15543 -> 15542;
15543 -> 15535;
15543 -> 15541;
15544 -> 15542;
15544 -> 15535;
15544 -> 15541;
15545 -> 15544;
15545 -> 15539;
15546 -> 15540;
15546 -> 15535;
15546 -> 15539;
15547 -> 15546;
15547 -> 6670;
15548 -> 6670;
15549 -> 15547;
15549 -> 15548;
15550 -> 15549;
15550 -> 15548;
15551 -> 15548;
15552 -> 15550;
15552 -> 15551;
15553 -> 15551;
15554 -> 15552;
15555 -> 15554;
15555 -> 15552;
15556 -> 15552;
15557 -> 15552;
15558 -> 15555;
15558 -> 15557;
15559 -> 15556;
15559 -> 15557;
15560 -> 15557;
15561 -> 15559;
15561 -> 15560;
15562 -> 15560;
15563 -> 15561;
15563 -> 15562;
15564 -> 15559;
15564 -> 15557;
15565 -> 15558;
15565 -> 15557;
15566 -> 15558;
15566 -> 15559;
15566 -> 15557;
15567 -> 6671;
15567 -> 6670;
15568 -> 6670;
15569 -> 15567;
15569 -> 15568;
15570 -> 15569;
15570 -> 15566;
15570 -> 15568;
15571 -> 6670;
15572 -> 15570;
15572 -> 15571;
15573 -> 15571;
15574 -> 6671;
15574 -> 6670;
15575 -> 6662;
15575 -> 15572;
15575 -> 6661;
15576 -> 15575;
15576 -> 6665;
15576 -> 6661;
15577 -> 6662;
15577 -> 15575;
15577 -> 6661;
15578 -> 15577;
15578 -> 6665;
15578 -> 6661;
15579 -> 6662;
15579 -> 15577;
15579 -> 6661;
15580 -> 15579;
15580 -> 6665;
15580 -> 6661;
15581 -> 6662;
15581 -> 15579;
15581 -> 6661;
15582 -> 15581;
15582 -> 6665;
15582 -> 6661;
15583 -> 6665;
15583 -> 6631;
15583 -> 15581;
15583 -> 6661;
15584 -> 6661;
15585 -> 15583;
15585 -> 15584;
15586 -> 15584;
15587 -> 15586;
15588 -> 15587;
15589 -> 15585;
15589 -> 15588;
15590 -> 15589;
15590 -> 15587;
15591 -> 15584;
15592 -> 15591;
15593 -> 15592;
15594 -> 6661;
15595 -> 6665;
15595 -> 6631;
15595 -> 15585;
15595 -> 15594;
15596 -> 15594;
15597 -> 15594;
15598 -> 15597;
15599 -> 6661;
15600 -> 6657;
15600 -> 15595;
15600 -> 6641;
15601 -> 15600;
15601 -> 6649;
15601 -> 6641;
15602 -> 6647;
15602 -> 6641;
15603 -> 6657;
15603 -> 15602;
15603 -> 15600;
15603 -> 6641;
15604 -> 6641;
15605 -> 6648;
15605 -> 15604;
15605 -> 6641;
15606 -> 6641;
15607 -> 6642;
15607 -> 15606;
15607 -> 6641;
15608 -> 6643;
15608 -> 15606;
15608 -> 6641;
15609 -> 15607;
15609 -> 15608;
15609 -> 6641;
15610 -> 6603;
15611 -> 6603;
15612 -> 6611;
15612 -> 15611;
15612 -> 6603;
15613 -> 6612;
15613 -> 15611;
15613 -> 6603;
15614 -> 15612;
15614 -> 15613;
15614 -> 6603;
15615 -> 6619;
15615 -> 6603;
15616 -> 15615;
15616 -> 6571;
15617 -> 6571;
15618 -> 6590;
15618 -> 15617;
15618 -> 6571;
15619 -> 15616;
15619 -> 15618;
15620 -> 15619;
15620 -> 6571;
15621 -> 15619;
15621 -> 6571;
15622 -> 15621;
15622 -> 6533;
15623 -> 15622;
15623 -> 1;
15624 -> 1;
15625 -> 6529;
15625 -> 15624;
15626 -> 15624;
15627 -> 15625;
15627 -> 15626;
15628 -> 15626;
15629 -> 15627;
15629 -> 15628;
15630 -> 15629;
15630 -> 15603;
15630 -> 15628;
15631 -> 15629;
15631 -> 15603;
15631 -> 15628;
15632 -> 15631;
15632 -> 15626;
15633 -> 15627;
15633 -> 15603;
15633 -> 15626;
15634 -> 15633;
15634 -> 1;
15635 -> 1;
15636 -> 15634;
15636 -> 15635;
15637 -> 1;
15638 -> 6529;
15638 -> 15637;
15639 -> 15637;
15640 -> 15638;
15640 -> 15639;
15641 -> 15639;
15642 -> 15640;
15642 -> 15641;
15643 -> 15642;
15643 -> 15633;
15643 -> 15641;
15644 -> 15642;
15644 -> 15633;
15644 -> 15641;
15645 -> 15644;
15645 -> 15639;
15646 -> 15640;
15646 -> 15633;
15646 -> 15639;
15647 -> 15646;
15647 -> 1;
15648 -> 15636;
15648 -> 15647;
15648 -> 1;
15649 -> 0;
15649 -> 1;
15650 -> 1;
15651 -> 15649;
15651 -> 15650;
15652 -> 6529;
15652 -> 15650;
15653 -> 15651;
15653 -> 0;
15653 -> 15650;
15654 -> 15650;
15655 -> 15651;
15655 -> 15650;
15656 -> 15652;
15656 -> 15655;
15656 -> 15646;
15656 -> 15650;
15657 -> 15656;
15658 -> 15657;
15659 -> 15658;
15659 -> 15657;
15660 -> 15657;
15660 -> 15656;
15661 -> 15651;
15661 -> 15656;
15662 -> 15656;
15663 -> 15661;
15663 -> 15662;
15664 -> 15660;
15664 -> 15662;
15665 -> 15662;
15666 -> 15664;
15666 -> 15665;
15667 -> 15666;
15667 -> 15662;
15668 -> 15663;
15668 -> 15662;
15669 -> 15662;
15670 -> 15668;
15670 -> 15669;
15671 -> 15667;
15671 -> 15669;
15672 -> 15669;
15673 -> 15671;
15673 -> 15672;
15674 -> 15673;
15674 -> 15669;
15675 -> 15674;
15676 -> 15674;
15676 -> 15675;
15677 -> 0;
15677 -> 15675;
15678 -> 15677;
15678 -> 15674;
15679 -> 15674;
15680 -> 15669;
15681 -> 15671;
15681 -> 15657;
15681 -> 15680;
15681 -> 15669;
15682 -> 15671;
15682 -> 15657;
15682 -> 15681;
15683 -> 15681;
15684 -> 15682;
15684 -> 15683;
15684 -> 15657;
15684 -> 15673;
15684 -> 15681;
15685 -> 15671;
15685 -> 15684;
15685 -> 15670;
15685 -> 15669;
15686 -> 15669;
15687 -> 15670;
15687 -> 15685;
15688 -> 15685;
15689 -> 15671;
15689 -> 15684;
15689 -> 15685;
15690 -> 15687;
15690 -> 15685;
15691 -> 15670;
15691 -> 15685;
15692 -> 15685;
15693 -> 15685;
15694 -> 15689;
15694 -> 15693;
15695 -> 15690;
15695 -> 15693;
15696 -> 15691;
15696 -> 15693;
15697 -> 15692;
15697 -> 15693;
15698 -> 15692;
15698 -> 15693;
15699 -> 15694;
15699 -> 15693;
15700 -> 15695;
15700 -> 15693;
15701 -> 15696;
15701 -> 15693;
15702 -> 15697;
15702 -> 15693;
15703 -> 15693;
15704 -> 15699;
15704 -> 15703;
15705 -> 15700;
15705 -> 15703;
15706 -> 15701;
15706 -> 15703;
15707 -> 15702;
15707 -> 15703;
15708 -> 15698;
15708 -> 15703;
15709 -> 15698;
15709 -> 15703;
15710 -> 15698;
15710 -> 15703;
15711 -> 15698;
15711 -> 15703;
15712 -> 15703;
15713 -> 15705;
15713 -> 15712;
15713 -> 15703;
15714 -> 15698;
15714 -> 15703;
15715 -> 15698;
15715 -> 15703;
15716 -> 15698;
15716 -> 15703;
15717 -> 15698;
15717 -> 15703;
15718 -> 15698;
15718 -> 15703;
15719 -> 15698;
15719 -> 15703;
15720 -> 15703;
15721 -> 15704;
15721 -> 15720;
15721 -> 15703;
15722 -> 15703;
15723 -> 15705;
15723 -> 15722;
15723 -> 15703;
15724 -> 15703;
15725 -> 15706;
15725 -> 15724;
15725 -> 15703;
15726 -> 15706;
15726 -> 0;
15726 -> 15703;
15727 -> 15705;
15727 -> 15724;
15727 -> 15703;
15728 -> 15725;
15728 -> 15727;
15728 -> 15703;
15729 -> 15671;
15729 -> 15684;
15729 -> 15670;
15729 -> 15685;
15730 -> 15692;
15730 -> 15685;
15731 -> 15685;
15732 -> 15729;
15732 -> 15730;
15732 -> 15731;
15732 -> 15698;
15732 -> 15705;
15732 -> 15704;
15732 -> 15707;
15732 -> 15706;
15732 -> 15684;
15732 -> 15685;
15733 -> 15671;
15733 -> 15732;
15733 -> 15670;
15733 -> 15669;
15734 -> 15650;
15735 -> 15733;
15735 -> 15734;
15736 -> 15734;
15737 -> 15736;
15738 -> 15735;
15738 -> 15650;
15739 -> 15733;
15739 -> 15650;
}