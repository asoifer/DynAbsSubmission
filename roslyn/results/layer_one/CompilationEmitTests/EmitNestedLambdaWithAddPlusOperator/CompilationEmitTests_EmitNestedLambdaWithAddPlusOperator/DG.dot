digraph G {
0 [label="EXTERNAL"];
1 [label="param InitializeTestModule(this) 809215"];
2 [label="RuntimeHelpers.RunModuleConstructor(typeof(TestBase).Module.ModuleHandle); 809216"];
3 [label="param CompilationEmitTests(this) 809217"];
4 [label="param EmitMetadataTestBase(this) 809218"];
5 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 809219"];
6 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 809220"];
7 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 809221"];
8 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 809222"];
9 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 809223"];
10 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 809224"];
11 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 809225"];
12 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 809226"];
13 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 809227"];
14 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 809228"];
15 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 809229"];
16 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 809230"];
17 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 809231"];
18 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 809232"];
19 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 809233"];
20 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 809234"];
21 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 809235"];
22 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 809236"];
23 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 809237"];
24 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 809238"];
25 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 809239"];
26 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 809240"];
27 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 809241"];
28 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 809242"];
29 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 809243"];
30 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 809244"];
31 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 809245"];
32 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 809246"];
33 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 809247"];
34 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 809248"];
35 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 809249"];
36 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 809250"];
37 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 809251"];
38 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 809252"];
39 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 809253"];
40 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 809254"];
41 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 809255"];
42 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 809256"];
43 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 809257"];
44 [label="LazyThreadSafetyMode.PublicationOnly 809258"];
45 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 809259"];
46 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 809260"];
47 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 809261"];
48 [label="LazyThreadSafetyMode.PublicationOnly 809262"];
49 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 809263"];
50 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 809264"];
51 [label="RuntimeUtilities.IsCoreClrRuntime 809265"];
52 [label="'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' 809266"];
53 [label="new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51') 809267"];
54 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 809268"];
55 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 809269"];
56 [label="LazyThreadSafetyMode.PublicationOnly 809270"];
57 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 809271"];
58 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 809272"];
59 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 809273"];
60 [label="LazyThreadSafetyMode.PublicationOnly 809274"];
61 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 809275"];
62 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 809276"];
63 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 809277"];
64 [label="LazyThreadSafetyMode.PublicationOnly 809278"];
65 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 809279"];
66 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 809280"];
67 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 809281"];
68 [label="LazyThreadSafetyMode.PublicationOnly 809282"];
69 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809283"];
70 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809284"];
71 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 809285"];
72 [label="LazyThreadSafetyMode.PublicationOnly 809286"];
73 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809287"];
74 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809288"];
75 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 809289"];
76 [label="LazyThreadSafetyMode.PublicationOnly 809290"];
77 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809291"];
78 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809292"];
79 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 809293"];
80 [label="LazyThreadSafetyMode.PublicationOnly 809294"];
81 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809295"];
82 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809296"];
83 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 809297"];
84 [label="LazyThreadSafetyMode.PublicationOnly 809298"];
85 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809299"];
86 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809300"];
87 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 809301"];
88 [label="LazyThreadSafetyMode.PublicationOnly 809302"];
89 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809303"];
90 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809304"];
91 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 809305"];
92 [label="LazyThreadSafetyMode.PublicationOnly 809306"];
93 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809307"];
94 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809308"];
95 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 809309"];
96 [label="LazyThreadSafetyMode.PublicationOnly 809310"];
97 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 809311"];
98 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 809312"];
99 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 809313"];
100 [label="LazyThreadSafetyMode.PublicationOnly 809314"];
101 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 809315"];
102 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 809316"];
103 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 809317"];
104 [label="LazyThreadSafetyMode.PublicationOnly 809318"];
105 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809319"];
106 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809320"];
107 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 809321"];
108 [label="LazyThreadSafetyMode.PublicationOnly 809322"];
109 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809323"];
110 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809324"];
111 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 809325"];
112 [label="LazyThreadSafetyMode.PublicationOnly 809326"];
113 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809327"];
114 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809328"];
115 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 809329"];
116 [label="LazyThreadSafetyMode.PublicationOnly 809330"];
117 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809331"];
118 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809332"];
119 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 809333"];
120 [label="LazyThreadSafetyMode.PublicationOnly 809334"];
121 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 809335"];
122 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 809336"];
123 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 809337"];
124 [label="LazyThreadSafetyMode.PublicationOnly 809338"];
125 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809339"];
126 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809340"];
127 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 809341"];
128 [label="LazyThreadSafetyMode.PublicationOnly 809342"];
129 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809343"];
130 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809344"];
131 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 809345"];
132 [label="LazyThreadSafetyMode.PublicationOnly 809346"];
133 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809347"];
134 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809348"];
135 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 809349"];
136 [label="LazyThreadSafetyMode.PublicationOnly 809350"];
137 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809351"];
138 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809352"];
139 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 809353"];
140 [label="LazyThreadSafetyMode.PublicationOnly 809354"];
141 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809355"];
142 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809356"];
143 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 809357"];
144 [label="LazyThreadSafetyMode.PublicationOnly 809358"];
145 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809359"];
146 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809360"];
147 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 809361"];
148 [label="LazyThreadSafetyMode.PublicationOnly 809362"];
149 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809363"];
150 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809364"];
151 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 809365"];
152 [label="LazyThreadSafetyMode.PublicationOnly 809366"];
153 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809367"];
154 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809368"];
155 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 809369"];
156 [label="LazyThreadSafetyMode.PublicationOnly 809370"];
157 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809371"];
158 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809372"];
159 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 809373"];
160 [label="LazyThreadSafetyMode.PublicationOnly 809374"];
161 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809375"];
162 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809376"];
163 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 809377"];
164 [label="LazyThreadSafetyMode.PublicationOnly 809378"];
165 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809379"];
166 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809380"];
167 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 809381"];
168 [label="LazyThreadSafetyMode.PublicationOnly 809382"];
169 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809383"];
170 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809384"];
171 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 809385"];
172 [label="LazyThreadSafetyMode.PublicationOnly 809386"];
173 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809387"];
174 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 809388"];
175 [label="@'R:\\Invalid.dll' 809389"];
176 [label="fullPath: @'R:\\Invalid.dll' 809390"];
177 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 809391"];
178 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 809392"];
179 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 809393"];
180 [label="MscorlibRef_v4_0_30316_17626 809394"];
181 [label="Net451.mscorlib 809395"];
182 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 809396"];
183 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 809397"];
184 [label="'/*<bind>*/' 809398"];
185 [label="StartString = '/*<bind>*/' 809399"];
186 [label="'/*</bind>*/' 809400"];
187 [label="EndString = '/*</bind>*/' 809401"];
188 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 809402"];
189 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 809403"];
190 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 809404"];
191 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 809405"];
192 [label="param CSharpTestBase(this) 809406"];
193 [label="param CommonTestBase(this) 809407"];
194 [label="param TestBase(this) 809408"];
195 [label="_temp 809409"];
196 [label="param EmitNestedLambdaWithAddPlusOperator(this) 809410"];
197 [label="CompileAndVerify(@'\npublic class C\n{\n    delegate int D(int i);\n    delegate D E(int i);\n\n    public static void Main()\n    {\n        D y = x => x + 1;\n        E e = x => (y += (z => z + 1));\n    }\n}\n'); 809411"];
198 [label="@'\npublic class C\n{\n    delegate int D(int i);\n    delegate D E(int i);\n\n    public static void Main()\n    {\n        D y = x => x + 1;\n        E e = x => (y += (z => z + 1));\n    }\n}\n' 809412"];
199 [label="param operator(string source) 809413"];
200 [label="source 809414"];
201 [label="new CSharpTestSource(source) 809415"];
202 [label="param CSharpTestSource(object value) 809416"];
203 [label="param CSharpTestSource(this) 809417"];
204 [label="Value 809418"];
205 [label="CompileAndVerify(@'\npublic class C\n{\n    delegate int D(int i);\n    delegate D E(int i);\n\n    public static void Main()\n    {\n        D y = x => x + 1;\n        E e = x => (y += (z => z + 1));\n    }\n}\n'); 809419"];
206 [label="CompileAndVerify(@'\npublic class C\n{\n    delegate int D(int i);\n    delegate D E(int i);\n\n    public static void Main()\n    {\n        D y = x => x + 1;\n        E e = x => (y += (z => z + 1));\n    }\n}\n') 809420"];
207 [label="param CompileAndVerify(CSharpTestSource source) 809421"];
208 [label="param CompileAndVerify(IEnumerable<MetadataReference> references = null) 809422"];
209 [label="param CompileAndVerify(IEnumerable<ResourceDescription> manifestResources = null) 809423"];
210 [label="param CompileAndVerify(IEnumerable<ModuleData> dependencies = null) 809424"];
211 [label="param CompileAndVerify(Action<ModuleSymbol> sourceSymbolValidator = null) 809425"];
212 [label="param CompileAndVerify(Action<PEAssembly> assemblyValidator = null) 809426"];
213 [label="param CompileAndVerify(Action<ModuleSymbol> symbolValidator = null) 809427"];
214 [label="param CompileAndVerify(SignatureDescription[] expectedSignatures = null) 809428"];
215 [label="param CompileAndVerify(string expectedOutput = null) 809429"];
216 [label="param CompileAndVerify(int? expectedReturnCode = null) 809430"];
217 [label="param CompileAndVerify(string[] args = null) 809431"];
218 [label="param CompileAndVerify(CSharpCompilationOptions options = null) 809432"];
219 [label="param CompileAndVerify(CSharpParseOptions parseOptions = null) 809433"];
220 [label="param CompileAndVerify(EmitOptions emitOptions = null) 809434"];
221 [label="param CompileAndVerify(TargetFramework targetFramework = TargetFramework.Standard) 809435"];
222 [label="param CompileAndVerify(Verification verify = Verification.Passes) 809436"];
223 [label="param CompileAndVerify(this) 809437"];
224 [label="kind: SourceCodeKind.Regular 809438"];
225 [label="documentationMode: DocumentationMode.Parse 809439"];
226 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 809440"];
227 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 809441"];
228 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 809442"];
229 [label="SourceCodeKind.Script 809443"];
230 [label="Regular.WithKind(SourceCodeKind.Script) 809444"];
231 [label="Script = Regular.WithKind(SourceCodeKind.Script) 809445"];
232 [label="LanguageVersion.CSharp6 809446"];
233 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 809447"];
234 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 809448"];
235 [label="LanguageVersion.CSharp7 809449"];
236 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 809450"];
237 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 809451"];
238 [label="LanguageVersion.CSharp7_1 809452"];
239 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 809453"];
240 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 809454"];
241 [label="LanguageVersion.CSharp7_2 809455"];
242 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 809456"];
243 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 809457"];
244 [label="LanguageVersion.CSharp7_3 809458"];
245 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 809459"];
246 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 809460"];
247 [label="LanguageVersion.Default 809461"];
248 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 809462"];
249 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 809463"];
250 [label="LanguageVersion.Preview 809464"];
251 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 809465"];
252 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 809466"];
253 [label="LanguageVersion.CSharp8 809467"];
254 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 809468"];
255 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 809469"];
256 [label="LanguageVersion.CSharp9 809470"];
257 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 809471"];
258 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 809472"];
259 [label="DocumentationMode.Diagnose 809473"];
260 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 809474"];
261 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 809475"];
262 [label="Regular 809476"];
263 [label="'UseLegacyStrongNameProvider' 809477"];
264 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 809478"];
265 [label="param WithFeature(this CSharpParseOptions options) 809479"];
266 [label="param WithFeature(string feature) 809480"];
267 [label="param WithFeature(string value = 'true') 809481"];
268 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 809482"];
269 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 809483"];
270 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 809484"];
271 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 809485"];
272 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 809486"];
273 [label="new[] { new KeyValuePair<string, string>(feature, value) } 809487"];
274 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 809488"];
275 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 809489"];
276 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 809490"];
277 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 809491"];
278 [label="1 809492"];
279 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 809493"];
280 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 809494"];
281 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 809495"];
282 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 809496"];
283 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 809497"];
284 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 809498"];
285 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 809499"];
286 [label="LanguageVersion.CSharp8 809500"];
287 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 809501"];
288 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 809502"];
289 [label="RegularWithExtendedPartialMethods = RegularPreview 809503"];
290 [label="new SmallDictionary<string, string> { } 809504"];
291 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 809505"];
292 [label="kind: SourceCodeKind.Regular 809506"];
293 [label="documentationMode: DocumentationMode.None 809507"];
294 [label="languageVersion: LanguageVersion.Preview 809508"];
295 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 809509"];
296 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 809510"];
297 [label="s_experimentalFeatures 809511"];
298 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 809512"];
299 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 809513"];
300 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 809514"];
301 [label="'testV7SwitchBinder' 809515"];
302 [label="'true' 809516"];
303 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 809517"];
304 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 809518"];
305 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 809519"];
306 [label="RegularWithoutRecursivePatterns = Regular7_3 809520"];
307 [label="RegularWithRecursivePatterns = Regular8 809521"];
308 [label="RegularWithoutPatternCombinators = Regular8 809522"];
309 [label="RegularWithPatternCombinators = RegularPreview 809523"];
310 [label="OutputKind.DynamicallyLinkedLibrary 809524"];
311 [label="OptimizationLevel.Release 809525"];
312 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 809526"];
313 [label="param CreateTestOptions(OutputKind outputKind) 809527"];
314 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 809528"];
315 [label="param CreateTestOptions(bool allowUnsafe = false) 809529"];
316 [label="outputKind 809530"];
317 [label="optimizationLevel: optimizationLevel 809531"];
318 [label="warningLevel: Diagnostic.MaxWarningLevel 809532"];
319 [label="allowUnsafe: allowUnsafe 809533"];
320 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 809534"];
321 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 809535"];
322 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 809536"];
323 [label="OutputKind.ConsoleApplication 809537"];
324 [label="OptimizationLevel.Release 809538"];
325 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 809539"];
326 [label="param CreateTestOptions(OutputKind outputKind) 809540"];
327 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 809541"];
328 [label="param CreateTestOptions(bool allowUnsafe = false) 809542"];
329 [label="outputKind 809543"];
330 [label="optimizationLevel: optimizationLevel 809544"];
331 [label="warningLevel: Diagnostic.MaxWarningLevel 809545"];
332 [label="allowUnsafe: allowUnsafe 809546"];
333 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 809547"];
334 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 809548"];
335 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 809549"];
336 [label="true 809550"];
337 [label="ReleaseDll.WithDebugPlusMode(true) 809551"];
338 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 809552"];
339 [label="true 809553"];
340 [label="ReleaseExe.WithDebugPlusMode(true) 809554"];
341 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 809555"];
342 [label="OutputKind.DynamicallyLinkedLibrary 809556"];
343 [label="OptimizationLevel.Debug 809557"];
344 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 809558"];
345 [label="param CreateTestOptions(OutputKind outputKind) 809559"];
346 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 809560"];
347 [label="param CreateTestOptions(bool allowUnsafe = false) 809561"];
348 [label="outputKind 809562"];
349 [label="optimizationLevel: optimizationLevel 809563"];
350 [label="warningLevel: Diagnostic.MaxWarningLevel 809564"];
351 [label="allowUnsafe: allowUnsafe 809565"];
352 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 809566"];
353 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 809567"];
354 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 809568"];
355 [label="OutputKind.ConsoleApplication 809569"];
356 [label="OptimizationLevel.Debug 809570"];
357 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 809571"];
358 [label="param CreateTestOptions(OutputKind outputKind) 809572"];
359 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 809573"];
360 [label="param CreateTestOptions(bool allowUnsafe = false) 809574"];
361 [label="outputKind 809575"];
362 [label="optimizationLevel: optimizationLevel 809576"];
363 [label="warningLevel: Diagnostic.MaxWarningLevel 809577"];
364 [label="allowUnsafe: allowUnsafe 809578"];
365 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 809579"];
366 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 809580"];
367 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 809581"];
368 [label="OutputKind.WindowsRuntimeMetadata 809582"];
369 [label="OptimizationLevel.Release 809583"];
370 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 809584"];
371 [label="param CreateTestOptions(OutputKind outputKind) 809585"];
372 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 809586"];
373 [label="param CreateTestOptions(bool allowUnsafe = false) 809587"];
374 [label="outputKind 809588"];
375 [label="optimizationLevel: optimizationLevel 809589"];
376 [label="warningLevel: Diagnostic.MaxWarningLevel 809590"];
377 [label="allowUnsafe: allowUnsafe 809591"];
378 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 809592"];
379 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 809593"];
380 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 809594"];
381 [label="OutputKind.WindowsRuntimeMetadata 809595"];
382 [label="OptimizationLevel.Debug 809596"];
383 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 809597"];
384 [label="param CreateTestOptions(OutputKind outputKind) 809598"];
385 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 809599"];
386 [label="param CreateTestOptions(bool allowUnsafe = false) 809600"];
387 [label="outputKind 809601"];
388 [label="optimizationLevel: optimizationLevel 809602"];
389 [label="warningLevel: Diagnostic.MaxWarningLevel 809603"];
390 [label="allowUnsafe: allowUnsafe 809604"];
391 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 809605"];
392 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 809606"];
393 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 809607"];
394 [label="OutputKind.NetModule 809608"];
395 [label="OptimizationLevel.Release 809609"];
396 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 809610"];
397 [label="param CreateTestOptions(OutputKind outputKind) 809611"];
398 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 809612"];
399 [label="param CreateTestOptions(bool allowUnsafe = false) 809613"];
400 [label="outputKind 809614"];
401 [label="optimizationLevel: optimizationLevel 809615"];
402 [label="warningLevel: Diagnostic.MaxWarningLevel 809616"];
403 [label="allowUnsafe: allowUnsafe 809617"];
404 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 809618"];
405 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 809619"];
406 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 809620"];
407 [label="OutputKind.NetModule 809621"];
408 [label="OptimizationLevel.Debug 809622"];
409 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 809623"];
410 [label="param CreateTestOptions(OutputKind outputKind) 809624"];
411 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 809625"];
412 [label="param CreateTestOptions(bool allowUnsafe = false) 809626"];
413 [label="outputKind 809627"];
414 [label="optimizationLevel: optimizationLevel 809628"];
415 [label="warningLevel: Diagnostic.MaxWarningLevel 809629"];
416 [label="allowUnsafe: allowUnsafe 809630"];
417 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 809631"];
418 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 809632"];
419 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 809633"];
420 [label="true 809634"];
421 [label="ReleaseDll.WithAllowUnsafe(true) 809635"];
422 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 809636"];
423 [label="true 809637"];
424 [label="ReleaseExe.WithAllowUnsafe(true) 809638"];
425 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 809639"];
426 [label="true 809640"];
427 [label="DebugDll.WithAllowUnsafe(true) 809641"];
428 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 809642"];
429 [label="true 809643"];
430 [label="DebugExe.WithAllowUnsafe(true) 809644"];
431 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 809645"];
432 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 809646"];
433 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 809647"];
434 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 809648"];
435 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 809649"];
436 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 809650"];
437 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 809651"];
438 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 809652"];
439 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 809653"];
440 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 809654"];
441 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 809655"];
442 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 809656"];
443 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 809657"];
444 [label="DebugInformationFormat.Pdb 809658"];
445 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 809659"];
446 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 809660"];
447 [label="options = options ?? TestOptions.ReleaseDll.WithOutputKind((expectedOutput != null) ? OutputKind.ConsoleApplication : OutputKind.DynamicallyLinkedLibrary); 809661"];
448 [label="options = options ?? TestOptions.ReleaseDll.WithOutputKind((expectedOutput != null) ? OutputKind.ConsoleApplication : OutputKind.DynamicallyLinkedLibrary); 809662"];
449 [label="(expectedOutput != null) 809663"];
450 [label="options = options ?? TestOptions.ReleaseDll.WithOutputKind((expectedOutput != null) ? OutputKind.ConsoleApplication : OutputKind.DynamicallyLinkedLibrary); 809664"];
451 [label="options = options ?? TestOptions.ReleaseDll.WithOutputKind((expectedOutput != null) ? OutputKind.ConsoleApplication : OutputKind.DynamicallyLinkedLibrary); 809665"];
452 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 809666"];
453 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 809667"];
454 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 809668"];
455 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 809669"];
456 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 809670"];
457 [label="GetUniqueName() 809671"];
458 [label="return Guid.NewGuid().ToString('D'); 809672"];
459 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 809673"];
460 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 809674"];
461 [label="CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()) 809675"];
462 [label="param CreateCompilation(CSharpTestSource source) 809676"];
463 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 809677"];
464 [label="param CreateCompilation(CSharpCompilationOptions options = null) 809678"];
465 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 809679"];
466 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 809680"];
467 [label="param CreateCompilation(string assemblyName = '') 809681"];
468 [label="param CreateCompilation(string sourceFileName = '') 809682"];
469 [label="param CreateCompilation(bool skipUsesIsNullable = false) 809683"];
470 [label="source 809684"];
471 [label="targetFramework 809685"];
472 [label="references 809686"];
473 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 809687"];
474 [label="param GetReferences(TargetFramework tf) 809688"];
475 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 809689"];
476 [label="var references = GetReferences(tf); 809690"];
477 [label="GetReferences(tf) 809691"];
478 [label="param GetReferences(TargetFramework targetFramework) 809692"];
479 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 809693"];
480 [label="StandardReferences 809694"];
481 [label="RuntimeUtilities.IsCoreClrRuntime 809695"];
482 [label="NetStandard20References 809696"];
483 [label="ImmutableArray.Create<MetadataReference>(NetStandard20.netstandard, NetStandard20.mscorlib, NetStandard20.SystemRuntime, NetStandard20.SystemCore, NetStandard20.SystemDynamicRuntime, NetStandard20.SystemLinq, NetStandard20.SystemLinqExpressions) 809697"];
484 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 809698"];
485 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 809699"];
486 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 809700"];
487 [label="return references; 809701"];
488 [label="options 809702"];
489 [label="parseOptions 809703"];
490 [label="assemblyName 809704"];
491 [label="sourceFileName 809705"];
492 [label="skipUsesIsNullable 809706"];
493 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 809707"];
494 [label="param CreateEmptyCompilation(CSharpTestSource source) 809708"];
495 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 809709"];
496 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 809710"];
497 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 809711"];
498 [label="param CreateEmptyCompilation(string assemblyName = '') 809712"];
499 [label="param CreateEmptyCompilation(string sourceFileName = '') 809713"];
500 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 809714"];
501 [label="source 809715"];
502 [label="references 809716"];
503 [label="options 809717"];
504 [label="parseOptions 809718"];
505 [label="assemblyName 809719"];
506 [label="sourceFileName 809720"];
507 [label="skipUsesIsNullable 809721"];
508 [label="null 809722"];
509 [label="experimentalFeature: null 809723"];
510 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 809724"];
511 [label="param CreateCompilationCore(CSharpTestSource source) 809725"];
512 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 809726"];
513 [label="param CreateCompilationCore(CSharpCompilationOptions options) 809727"];
514 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 809728"];
515 [label="param CreateCompilationCore(string assemblyName) 809729"];
516 [label="param CreateCompilationCore(string sourceFileName) 809730"];
517 [label="param CreateCompilationCore(bool skipUsesIsNullable) 809731"];
518 [label="param CreateCompilationCore(MessageID? experimentalFeature) 809732"];
519 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 809733"];
520 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 809734"];
521 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 809735"];
522 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 809736"];
523 [label="param GetSyntaxTrees(string sourceFileName = '') 809737"];
524 [label="param GetSyntaxTrees(this) 809738"];
525 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 809739"];
526 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 809740"];
527 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 809741"];
528 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 809742"];
529 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 809743"];
530 [label="param Parse(string text) 809744"];
531 [label="param Parse(string filename = '') 809745"];
532 [label="param Parse(CSharpParseOptions options = null) 809746"];
533 [label="param Parse(Encoding encoding = null) 809747"];
534 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 809748"];
535 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 809749"];
536 [label="options = TestOptions.Regular; 809750"];
537 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 809751"];
538 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 809752"];
539 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 809753"];
540 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 809754"];
541 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 809755"];
542 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 809756"];
543 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 809757"];
544 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 809758"];
545 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 809759"];
546 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 809760"];
547 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 809761"];
548 [label="param CheckSerializable(SyntaxTree tree) 809762"];
549 [label="var stream = new MemoryStream(); 809763"];
550 [label="var root = tree.GetRoot(); 809764"];
551 [label="var root = tree.GetRoot(); 809765"];
552 [label="root.SerializeTo(stream); 809766"];
553 [label="root.SerializeTo(stream); 809767"];
554 [label="root.SerializeTo(stream); 809768"];
555 [label="stream.Position = 0; 809769"];
556 [label="stream.Position 809770"];
557 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 809771"];
558 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 809772"];
559 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 809773"];
560 [label="return tree; 809774"];
561 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 809775"];
562 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 809776"];
563 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 809777"];
564 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 809778"];
565 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 809779"];
566 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 809780"];
567 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 809781"];
568 [label="'ROSLYN_TEST_IOPERATION' 809782"];
569 [label="Environment.GetEnvironmentVariable('ROSLYN_TEST_IOPERATION') 809783"];
570 [label="string.IsNullOrEmpty(Environment.GetEnvironmentVariable('ROSLYN_TEST_IOPERATION')) 809784"];
571 [label="internal static bool EnableVerifyIOperation { get; } = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable('ROSLYN_TEST_IOPERATION')); 809785"];
572 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 809786"];
573 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 809787"];
574 [label="param ValidateIOperations(Func<Compilation> createCompilation) 809788"];
575 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 809789"];
576 [label="return; 809790"];
577 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 809791"];
578 [label="OutputKind.ConsoleApplication 809792"];
579 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 809793"];
580 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 809794"];
581 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 809795"];
582 [label="OutputKind.DynamicallyLinkedLibrary 809796"];
583 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 809797"];
584 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 809798"];
585 [label="true 809799"];
586 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 809800"];
587 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 809801"];
588 [label="var compilation = createCompilationLambda(); 809802"];
589 [label="var compilation = createCompilationLambda(); 809803"];
590 [label="param Create(string? assemblyName) 809804"];
591 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 809805"];
592 [label="param Create(IEnumerable<MetadataReference>? references = null) 809806"];
593 [label="param Create(CSharpCompilationOptions? options = null) 809807"];
594 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 809808"];
595 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 809809"];
596 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 809810"];
597 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 809811"];
598 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 809812"];
599 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 809813"];
600 [label="param Create(string? assemblyName) 809814"];
601 [label="param Create(CSharpCompilationOptions options) 809815"];
602 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 809816"];
603 [label="param Create(IEnumerable<MetadataReference>? references) 809817"];
604 [label="param Create(CSharpCompilation? previousSubmission) 809818"];
605 [label="param Create(Type? returnType) 809819"];
606 [label="param Create(Type? hostObjectType) 809820"];
607 [label="param Create(bool isSubmission) 809821"];
608 [label="RoslynDebug.Assert(options != null); 809822"];
609 [label="RoslynDebug.Assert(options != null); 809823"];
610 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 809824"];
611 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 809825"];
612 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 809826"];
613 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 809827"];
614 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 809828"];
615 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 809829"];
616 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 809830"];
617 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 809831"];
618 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 809832"];
619 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 809833"];
620 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 809834"];
621 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 809835"];
622 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 809836"];
623 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 809837"];
624 [label="param SyntaxAndDeclarationManager(string scriptClassName) 809838"];
625 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 809839"];
626 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 809840"];
627 [label="param SyntaxAndDeclarationManager(bool isSubmission) 809841"];
628 [label="param SyntaxAndDeclarationManager(State state) 809842"];
629 [label="param SyntaxAndDeclarationManager(this) 809843"];
630 [label="externalSyntaxTrees 809844"];
631 [label="scriptClassName 809845"];
632 [label="resolver 809846"];
633 [label="messageProvider 809847"];
634 [label="isSubmission 809848"];
635 [label="param SyntaxAndDeclarationManager(this) 809849"];
636 [label="param SyntaxAndDeclarationManager(this) 809850"];
637 [label="_lazyState 809851"];
638 [label="_lazyState 809852"];
639 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 809853"];
640 [label="param CSharpCompilation(string? assemblyName) 809854"];
641 [label="param CSharpCompilation(CSharpCompilationOptions options) 809855"];
642 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 809856"];
643 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 809857"];
644 [label="param CSharpCompilation(Type? submissionReturnType) 809858"];
645 [label="param CSharpCompilation(Type? hostObjectType) 809859"];
646 [label="param CSharpCompilation(bool isSubmission) 809860"];
647 [label="param CSharpCompilation(ReferenceManager? referenceManager) 809861"];
648 [label="param CSharpCompilation(bool reuseReferenceManager) 809862"];
649 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 809863"];
650 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 809864"];
651 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 809865"];
652 [label="param CSharpCompilation(this) 809866"];
653 [label="assemblyName 809867"];
654 [label="options 809868"];
655 [label="references 809869"];
656 [label="previousSubmission 809870"];
657 [label="submissionReturnType 809871"];
658 [label="hostObjectType 809872"];
659 [label="isSubmission 809873"];
660 [label="referenceManager 809874"];
661 [label="reuseReferenceManager 809875"];
662 [label="syntaxAndDeclarations 809876"];
663 [label="syntaxAndDeclarations.ExternalSyntaxTrees 809877"];
664 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 809878"];
665 [label="semanticModelProvider 809879"];
666 [label="eventQueue 809880"];
667 [label="param CSharpCompilation(this) 809881"];
668 [label="param CSharpCompilation(string? assemblyName) 809882"];
669 [label="param CSharpCompilation(CSharpCompilationOptions options) 809883"];
670 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 809884"];
671 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 809885"];
672 [label="param CSharpCompilation(Type? submissionReturnType) 809886"];
673 [label="param CSharpCompilation(Type? hostObjectType) 809887"];
674 [label="param CSharpCompilation(bool isSubmission) 809888"];
675 [label="param CSharpCompilation(ReferenceManager? referenceManager) 809889"];
676 [label="param CSharpCompilation(bool reuseReferenceManager) 809890"];
677 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 809891"];
678 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 809892"];
679 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 809893"];
680 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 809894"];
681 [label="param CSharpCompilation(this) 809895"];
682 [label="assemblyName 809896"];
683 [label="references 809897"];
684 [label="features 809898"];
685 [label="isSubmission 809899"];
686 [label="semanticModelProvider 809900"];
687 [label="eventQueue 809901"];
688 [label="param CSharpCompilation(this) 809902"];
689 [label="param CSharpCompilation(this) 809903"];
690 [label="_options 809904"];
691 [label="_globalImports 809905"];
692 [label="_previousSubmissionImports 809906"];
693 [label="_globalNamespaceAlias 809907"];
694 [label="_scriptClass 809908"];
695 [label="_lazyHostObjectTypeSymbol 809909"];
696 [label="_lazyImportInfos 809910"];
697 [label="_conversions 809911"];
698 [label="_anonymousTypeManager 809912"];
699 [label="_lazyGlobalNamespace 809913"];
700 [label="builtInOperators 809914"];
701 [label="_lazyAssemblySymbol 809915"];
702 [label="_referenceManager 809916"];
703 [label="_syntaxAndDeclarations 809917"];
704 [label="_lazyEntryPoint 809918"];
705 [label="_lazyEmitNullablePublicOnly 809919"];
706 [label="_lazyCompilationUnitCompletedTrees 809920"];
707 [label="NullableAnalysisData 809921"];
708 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 809922"];
709 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 809923"];
710 [label="_externAliasTargets 809924"];
711 [label="_moduleInitializerMethods 809925"];
712 [label="_binderFactories 809926"];
713 [label="_ignoreAccessibilityBinderFactories 809927"];
714 [label="_lazyDeclarationDiagnostics 809928"];
715 [label="_declarationDiagnosticsFrozen 809929"];
716 [label="new DiagnosticBag() 809930"];
717 [label="_additionalCodegenWarnings = new DiagnosticBag() 809931"];
718 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 809932"];
719 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 809933"];
720 [label="WellKnownMemberSignatureComparer 809934"];
721 [label="_options 809935"];
722 [label="this.builtInOperators = new BuiltInOperators(this); 809936"];
723 [label="this.builtInOperators = new BuiltInOperators(this); 809937"];
724 [label="new BuiltInOperators(this) 809938"];
725 [label="param BuiltInOperators(CSharpCompilation compilation) 809939"];
726 [label="param BuiltInOperators(this) 809940"];
727 [label="_compilation 809941"];
728 [label="_builtInUnaryOperators 809942"];
729 [label="_builtInOperators 809943"];
730 [label="_compilation 809944"];
731 [label="this.builtInOperators 809945"];
732 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 809946"];
733 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 809947"];
734 [label="_scriptClass 809948"];
735 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 809949"];
736 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 809950"];
737 [label="_globalImports 809951"];
738 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 809952"];
739 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 809953"];
740 [label="_previousSubmissionImports 809954"];
741 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 809955"];
742 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 809956"];
743 [label="_globalNamespaceAlias 809957"];
744 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 809958"];
745 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 809959"];
746 [label="_anonymousTypeManager 809960"];
747 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 809961"];
748 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 809962"];
749 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 809963"];
750 [label="LanguageVersion? result = null; 809964"];
751 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 809965"];
752 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 809966"];
753 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 809967"];
754 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 809968"];
755 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 809969"];
756 [label="this.LanguageVersion 809970"];
757 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 809971"];
758 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 809972"];
759 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 809973"];
760 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 809974"];
761 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 809975"];
762 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 809976"];
763 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 809977"];
764 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 809978"];
765 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 809979"];
766 [label="this.Options 809980"];
767 [label="get\n            {\n                return _options;\n            } 809981"];
768 [label="return _options; 809982"];
769 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 809983"];
770 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 809984"];
771 [label="_referenceManager 809985"];
772 [label="_syntaxAndDeclarations 809986"];
773 [label="Debug.Assert(_lazyAssemblySymbol is null); 809987"];
774 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 809988"];
775 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 809989"];
776 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 809990"];
777 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 809991"];
778 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 809992"];
779 [label="compilation.AddSyntaxTrees(syntaxTrees) 809993"];
780 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 809994"];
781 [label="param AddSyntaxTrees(this) 809995"];
782 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 809996"];
783 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 809997"];
784 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 809998"];
785 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 809999"];
786 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 810000"];
787 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 810001"];
788 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 810002"];
789 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 810003"];
790 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 810004"];
791 [label="bool reuseReferenceManager = true; 810005"];
792 [label="int i = 0; 810006"];
793 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 810007"];
794 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 810008"];
795 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 810009"];
796 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 810010"];
797 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 810011"];
798 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 810012"];
799 [label="externalSyntaxTrees.Add(tree); 810013"];
800 [label="externalSyntaxTrees.Add(tree); 810014"];
801 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 810015"];
802 [label="i++; 810016"];
803 [label="externalSyntaxTrees.Free(); 810017"];
804 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 810018"];
805 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 810019"];
806 [label="syntaxAndDeclarations.AddSyntaxTrees(trees) 810020"];
807 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 810021"];
808 [label="param AddSyntaxTrees(this) 810022"];
809 [label="var scriptClassName = this.ScriptClassName; 810023"];
810 [label="var resolver = this.Resolver; 810024"];
811 [label="var messageProvider = this.MessageProvider; 810025"];
812 [label="var isSubmission = this.IsSubmission; 810026"];
813 [label="var state = _lazyState; 810027"];
814 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 810028"];
815 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 810029"];
816 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 810030"];
817 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 810031"];
818 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 810032"];
819 [label="this.WithExternalSyntaxTrees(newExternalSyntaxTrees) 810033"];
820 [label="param WithExternalSyntaxTrees(ImmutableArray<SyntaxTree> trees) 810034"];
821 [label="param WithExternalSyntaxTrees(this) 810035"];
822 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 810036"];
823 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 810037"];
824 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 810038"];
825 [label="new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null) 810039"];
826 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 810040"];
827 [label="param SyntaxAndDeclarationManager(string scriptClassName) 810041"];
828 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 810042"];
829 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 810043"];
830 [label="param SyntaxAndDeclarationManager(bool isSubmission) 810044"];
831 [label="param SyntaxAndDeclarationManager(State state) 810045"];
832 [label="param SyntaxAndDeclarationManager(this) 810046"];
833 [label="param SyntaxAndDeclarationManager(this) 810047"];
834 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 810048"];
835 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 810049"];
836 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 810050"];
837 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 810051"];
838 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 810052"];
839 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 810053"];
840 [label="param Update(ReferenceManager referenceManager) 810054"];
841 [label="param Update(bool reuseReferenceManager) 810055"];
842 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 810056"];
843 [label="param Update(this) 810057"];
844 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 810058"];
845 [label="this.PreviousSubmission 810059"];
846 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 810060"];
847 [label="ScriptCompilationInfo 810061"];
848 [label="ScriptCompilationInfo?.PreviousScriptCompilation 810062"];
849 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 810063"];
850 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 810064"];
851 [label="this.SubmissionReturnType 810065"];
852 [label="=> ScriptCompilationInfo 810066"];
853 [label="ScriptCompilationInfo 810067"];
854 [label="this.HostObjectType 810068"];
855 [label="=> ScriptCompilationInfo 810069"];
856 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 810070"];
857 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 810071"];
858 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 810072"];
859 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 810073"];
860 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 810074"];
861 [label="param CSharpCompilation(string? assemblyName) 810075"];
862 [label="param CSharpCompilation(CSharpCompilationOptions options) 810076"];
863 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 810077"];
864 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 810078"];
865 [label="param CSharpCompilation(Type? submissionReturnType) 810079"];
866 [label="param CSharpCompilation(Type? hostObjectType) 810080"];
867 [label="param CSharpCompilation(bool isSubmission) 810081"];
868 [label="param CSharpCompilation(ReferenceManager? referenceManager) 810082"];
869 [label="param CSharpCompilation(bool reuseReferenceManager) 810083"];
870 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 810084"];
871 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 810085"];
872 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 810086"];
873 [label="param CSharpCompilation(this) 810087"];
874 [label="previousSubmission 810088"];
875 [label="submissionReturnType 810089"];
876 [label="hostObjectType 810090"];
877 [label="syntaxAndDeclarations.ExternalSyntaxTrees 810091"];
878 [label="eventQueue 810092"];
879 [label="param CSharpCompilation(this) 810093"];
880 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 810094"];
881 [label="param CSharpCompilation(Type? submissionReturnType) 810095"];
882 [label="param CSharpCompilation(Type? hostObjectType) 810096"];
883 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 810097"];
884 [label="param CSharpCompilation(this) 810098"];
885 [label="eventQueue 810099"];
886 [label="param CSharpCompilation(this) 810100"];
887 [label="_options 810101"];
888 [label="_globalImports 810102"];
889 [label="_previousSubmissionImports 810103"];
890 [label="_globalNamespaceAlias 810104"];
891 [label="_scriptClass 810105"];
892 [label="_lazyHostObjectTypeSymbol 810106"];
893 [label="_lazyImportInfos 810107"];
894 [label="_conversions 810108"];
895 [label="_anonymousTypeManager 810109"];
896 [label="_lazyGlobalNamespace 810110"];
897 [label="builtInOperators 810111"];
898 [label="_lazyAssemblySymbol 810112"];
899 [label="_referenceManager 810113"];
900 [label="_syntaxAndDeclarations 810114"];
901 [label="_lazyEntryPoint 810115"];
902 [label="_lazyEmitNullablePublicOnly 810116"];
903 [label="_lazyCompilationUnitCompletedTrees 810117"];
904 [label="NullableAnalysisData 810118"];
905 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 810119"];
906 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 810120"];
907 [label="_externAliasTargets 810121"];
908 [label="_moduleInitializerMethods 810122"];
909 [label="_binderFactories 810123"];
910 [label="_ignoreAccessibilityBinderFactories 810124"];
911 [label="_lazyDeclarationDiagnostics 810125"];
912 [label="_declarationDiagnosticsFrozen 810126"];
913 [label="new DiagnosticBag() 810127"];
914 [label="_additionalCodegenWarnings = new DiagnosticBag() 810128"];
915 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 810129"];
916 [label="this.builtInOperators = new BuiltInOperators(this); 810130"];
917 [label="this.builtInOperators = new BuiltInOperators(this); 810131"];
918 [label="new BuiltInOperators(this) 810132"];
919 [label="param BuiltInOperators(CSharpCompilation compilation) 810133"];
920 [label="param BuiltInOperators(this) 810134"];
921 [label="_compilation 810135"];
922 [label="_builtInUnaryOperators 810136"];
923 [label="_builtInOperators 810137"];
924 [label="_compilation 810138"];
925 [label="this.builtInOperators 810139"];
926 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 810140"];
927 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 810141"];
928 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 810142"];
929 [label="LanguageVersion? result = null; 810143"];
930 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 810144"];
931 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 810145"];
932 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 810146"];
933 [label="result = version; 810147"];
934 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 810148"];
935 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 810149"];
936 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 810150"];
937 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 810151"];
938 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 810152"];
939 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 810153"];
940 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 810154"];
941 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 810155"];
942 [label="referenceManager.AssertCanReuseForCompilation(this); 810156"];
943 [label="referenceManager.AssertCanReuseForCompilation(this); 810157"];
944 [label="_referenceManager 810158"];
945 [label="Debug.Assert(_lazyAssemblySymbol is null); 810159"];
946 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 810160"];
947 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 810161"];
948 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 810162"];
949 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 810163"];
950 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 810164"];
951 [label="return compilation; 810165"];
952 [label="var compilation = createCompilationLambda(); 810166"];
953 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 810167"];
954 [label="IsNullableEnabled(compilation) 810168"];
955 [label="param IsNullableEnabled(CSharpCompilation compilation) 810169"];
956 [label="compilation.SyntaxTrees 810170"];
957 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 810171"];
958 [label="_syntaxAndDeclarations.GetLazyState() 810172"];
959 [label="param GetLazyState(this) 810173"];
960 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 810174"];
961 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 810175"];
962 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 810176"];
963 [label="CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission) 810177"];
964 [label="param CreateState(ImmutableArray<SyntaxTree> externalSyntaxTrees) 810178"];
965 [label="param CreateState(string scriptClassName) 810179"];
966 [label="param CreateState(SourceReferenceResolver resolver) 810180"];
967 [label="param CreateState(CommonMessageProvider messageProvider) 810181"];
968 [label="param CreateState(bool isSubmission) 810182"];
969 [label="var treesBuilder = ArrayBuilder<SyntaxTree>.GetInstance(); 810183"];
970 [label="var ordinalMapBuilder = PooledDictionary<SyntaxTree, int>.GetInstance(); 810184"];
971 [label="var loadDirectiveMapBuilder = PooledDictionary<SyntaxTree, ImmutableArray<LoadDirective>>.GetInstance(); 810185"];
972 [label="var loadedSyntaxTreeMapBuilder = PooledDictionary<string, SyntaxTree>.GetInstance(); 810186"];
973 [label="var declMapBuilder = PooledDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>>.GetInstance(); 810187"];
974 [label="var declTable = DeclarationTable.Empty; 810188"];
975 [label="foreach (var tree in externalSyntaxTrees)\n            {\n                AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable);\n            } 810189"];
976 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 810190"];
977 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 810191"];
978 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 810192"];
979 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 810193"];
980 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 810194"];
981 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 810195"];
982 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 810196"];
983 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 810197"];
984 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 810198"];
985 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 810199"];
986 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 810200"];
987 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable) 810201"];
988 [label="param AppendAllSyntaxTrees(ArrayBuilder<SyntaxTree> treesBuilder) 810202"];
989 [label="param AppendAllSyntaxTrees(SyntaxTree tree) 810203"];
990 [label="param AppendAllSyntaxTrees(string scriptClassName) 810204"];
991 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 810205"];
992 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 810206"];
993 [label="param AppendAllSyntaxTrees(bool isSubmission) 810207"];
994 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, int> ordinalMapBuilder) 810208"];
995 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 810209"];
996 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 810210"];
997 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 810211"];
998 [label="param AppendAllSyntaxTrees(ref DeclarationTable declTable) 810212"];
999 [label="var sourceCodeKind = tree.Options.Kind; 810213"];
1000 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 810214"];
1001 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 810215"];
1002 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 810216"];
1003 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 810217"];
1004 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 810218"];
1005 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 810219"];
1006 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable) 810220"];
1007 [label="param AddSyntaxTreeToDeclarationMapAndTable(SyntaxTree tree) 810221"];
1008 [label="param AddSyntaxTreeToDeclarationMapAndTable(string scriptClassName) 810222"];
1009 [label="param AddSyntaxTreeToDeclarationMapAndTable(bool isSubmission) 810223"];
1010 [label="param AddSyntaxTreeToDeclarationMapAndTable(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 810224"];
1011 [label="param AddSyntaxTreeToDeclarationMapAndTable(ref DeclarationTable declTable) 810225"];
1012 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 810226"];
1013 [label="declMapBuilder.Add(tree, lazyRoot); 810227"];
1014 [label="declMapBuilder.Add(tree, lazyRoot); 810228"];
1015 [label="declMapBuilder.Add(tree, lazyRoot); 810229"];
1016 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 810230"];
1017 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 810231"];
1018 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 810232"];
1019 [label="treesBuilder.Add(tree); 810233"];
1020 [label="treesBuilder.Add(tree); 810234"];
1021 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 810235"];
1022 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 810236"];
1023 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 810237"];
1024 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 810238"];
1025 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 810239"];
1026 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 810240"];
1027 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 810241"];
1028 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 810242"];
1029 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 810243"];
1030 [label="new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable) 810244"];
1031 [label="param State(ImmutableArray<SyntaxTree> syntaxTrees) 810245"];
1032 [label="param State(ImmutableDictionary<SyntaxTree, int> syntaxTreeOrdinalMap) 810246"];
1033 [label="param State(ImmutableDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMap) 810247"];
1034 [label="param State(ImmutableDictionary<string, SyntaxTree> loadedSyntaxTreeMap) 810248"];
1035 [label="param State(ImmutableDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> rootNamespaces) 810249"];
1036 [label="param State(DeclarationTable declarationTable) 810250"];
1037 [label="param State(this) 810251"];
1038 [label="OrdinalMap 810252"];
1039 [label="LoadDirectiveMap 810253"];
1040 [label="LoadedSyntaxTreeMap 810254"];
1041 [label="RootNamespaces 810255"];
1042 [label="DeclarationTable 810256"];
1043 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 810257"];
1044 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 810258"];
1045 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 810259"];
1046 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 810260"];
1047 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 810261"];
1048 [label="this.SyntaxTrees 810262"];
1049 [label="this.OrdinalMap 810263"];
1050 [label="this.LoadDirectiveMap 810264"];
1051 [label="this.LoadedSyntaxTreeMap 810265"];
1052 [label="this.RootNamespaces 810266"];
1053 [label="this.DeclarationTable 810267"];
1054 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 810268"];
1055 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 810269"];
1056 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 810270"];
1057 [label="return _lazyState; 810271"];
1058 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 810272"];
1059 [label="var trees = compilation.SyntaxTrees; 810273"];
1060 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 810274"];
1061 [label="var options = (CSharpParseOptions)trees[0].Options; 810275"];
1062 [label="var options = (CSharpParseOptions)trees[0].Options; 810276"];
1063 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 810277"];
1064 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 810278"];
1065 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 810279"];
1066 [label="return compilation; 810280"];
1067 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810281"];
1068 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810282"];
1069 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810283"];
1070 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810284"];
1071 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810285"];
1072 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810286"];
1073 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810287"];
1074 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810288"];
1075 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810289"];
1076 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810290"];
1077 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810291"];
1078 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810292"];
1079 [label="CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify) 810293"];
1080 [label="param CompileAndVerify(Compilation compilation) 810294"];
1081 [label="param CompileAndVerify(IEnumerable<ResourceDescription> manifestResources = null) 810295"];
1082 [label="param CompileAndVerify(IEnumerable<ModuleData> dependencies = null) 810296"];
1083 [label="param CompileAndVerify(Action<ModuleSymbol> sourceSymbolValidator = null) 810297"];
1084 [label="param CompileAndVerify(Action<PEAssembly> validator = null) 810298"];
1085 [label="param CompileAndVerify(Action<ModuleSymbol> symbolValidator = null) 810299"];
1086 [label="param CompileAndVerify(SignatureDescription[] expectedSignatures = null) 810300"];
1087 [label="param CompileAndVerify(string expectedOutput = null) 810301"];
1088 [label="param CompileAndVerify(int? expectedReturnCode = null) 810302"];
1089 [label="param CompileAndVerify(string[] args = null) 810303"];
1090 [label="param CompileAndVerify(EmitOptions emitOptions = null) 810304"];
1091 [label="param CompileAndVerify(Verification verify = Verification.Passes) 810305"];
1092 [label="param CompileAndVerify(this) 810306"];
1093 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810307"];
1094 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810308"];
1095 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810309"];
1096 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810310"];
1097 [label="translate(sourceSymbolValidator) 810311"];
1098 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 810312"];
1099 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 810313"];
1100 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 810314"];
1101 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 810315"];
1102 [label="return null; 810316"];
1103 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810317"];
1104 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810318"];
1105 [label="translate(symbolValidator) 810319"];
1106 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 810320"];
1107 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 810321"];
1108 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 810322"];
1109 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 810323"];
1110 [label="return null; 810324"];
1111 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810325"];
1112 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810326"];
1113 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810327"];
1114 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810328"];
1115 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810329"];
1116 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 810330"];
1117 [label="CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify) 810331"];
1118 [label="param CompileAndVerifyCommon(Compilation compilation) 810332"];
1119 [label="param CompileAndVerifyCommon(IEnumerable<ResourceDescription> manifestResources = null) 810333"];
1120 [label="param CompileAndVerifyCommon(IEnumerable<ModuleData> dependencies = null) 810334"];
1121 [label="param CompileAndVerifyCommon(Action<IModuleSymbol> sourceSymbolValidator = null) 810335"];
1122 [label="param CompileAndVerifyCommon(Action<PEAssembly> assemblyValidator = null) 810336"];
1123 [label="param CompileAndVerifyCommon(Action<IModuleSymbol> symbolValidator = null) 810337"];
1124 [label="param CompileAndVerifyCommon(SignatureDescription[] expectedSignatures = null) 810338"];
1125 [label="param CompileAndVerifyCommon(string expectedOutput = null) 810339"];
1126 [label="param CompileAndVerifyCommon(int? expectedReturnCode = null) 810340"];
1127 [label="param CompileAndVerifyCommon(string[] args = null) 810341"];
1128 [label="param CompileAndVerifyCommon(EmitOptions emitOptions = null) 810342"];
1129 [label="param CompileAndVerifyCommon(Verification verify = Verification.Passes) 810343"];
1130 [label="param CompileAndVerifyCommon(this) 810344"];
1131 [label="CustomAssert.NotNull(compilation); 810345"];
1132 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 810346"];
1133 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 810347"];
1134 [label="if (sourceSymbolValidator != null)\n            {\n                var module = compilation.Assembly.Modules.First();\n                sourceSymbolValidator(module);\n            } 810348"];
1135 [label="if (sourceSymbolValidator != null)\n            {\n                var module = compilation.Assembly.Modules.First();\n                sourceSymbolValidator(module);\n            } 810349"];
1136 [label="CompilationVerifier result = null; 810350"];
1137 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 810351"];
1138 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 810352"];
1139 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 810353"];
1140 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 810354"];
1141 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 810355"];
1142 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 810356"];
1143 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 810357"];
1144 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 810358"];
1145 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 810359"];
1146 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 810360"];
1147 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 810361"];
1148 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 810362"];
1149 [label="Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify) 810363"];
1150 [label="param Emit(Compilation compilation) 810364"];
1151 [label="param Emit(IEnumerable<ModuleData> dependencies) 810365"];
1152 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 810366"];
1153 [label="param Emit(SignatureDescription[] expectedSignatures) 810367"];
1154 [label="param Emit(string expectedOutput) 810368"];
1155 [label="param Emit(int? expectedReturnCode) 810369"];
1156 [label="param Emit(string[] args) 810370"];
1157 [label="param Emit(Action<PEAssembly> assemblyValidator) 810371"];
1158 [label="param Emit(Action<IModuleSymbol> symbolValidator) 810372"];
1159 [label="param Emit(EmitOptions emitOptions) 810373"];
1160 [label="param Emit(Verification verify) 810374"];
1161 [label="param Emit(this) 810375"];
1162 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 810376"];
1163 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 810377"];
1164 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 810378"];
1165 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 810379"];
1166 [label="new CompilationVerifier(compilation, VisualizeRealIL, dependencies) 810380"];
1167 [label="param CompilationVerifier(Compilation compilation) 810381"];
1168 [label="param CompilationVerifier(Func<IModuleSymbol, CompilationTestData.MethodData, IReadOnlyDictionary<int, string>, bool, string> visualizeRealIL = null) 810382"];
1169 [label="param CompilationVerifier(IEnumerable<ModuleData> dependencies = null) 810383"];
1170 [label="param CompilationVerifier(this) 810384"];
1171 [label="_compilation 810385"];
1172 [label="_testData 810386"];
1173 [label="_dependencies 810387"];
1174 [label="_lazyModuleSymbol 810388"];
1175 [label="_allModuleData 810389"];
1176 [label="_visualizeRealIL 810390"];
1177 [label="_compilation 810391"];
1178 [label="_dependencies 810392"];
1179 [label="_visualizeRealIL 810393"];
1180 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 810394"];
1181 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 810395"];
1182 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 810396"];
1183 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 810397"];
1184 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 810398"];
1185 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 810399"];
1186 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 810400"];
1187 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures) 810401"];
1188 [label="param Emit(string expectedOutput) 810402"];
1189 [label="param Emit(int? expectedReturnCode) 810403"];
1190 [label="param Emit(string[] args) 810404"];
1191 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 810405"];
1192 [label="param Emit(EmitOptions emitOptions) 810406"];
1193 [label="param Emit(Verification peVerify) 810407"];
1194 [label="param Emit(SignatureDescription[] expectedSignatures) 810408"];
1195 [label="param Emit(this) 810409"];
1196 [label="RuntimeUtilities.GetRuntimeEnvironmentFactory 810410"];
1197 [label="new Lazy<IRuntimeEnvironmentFactory>(RuntimeUtilities.GetRuntimeEnvironmentFactory) 810411"];
1198 [label="s_lazyFactory = new Lazy<IRuntimeEnvironmentFactory>(RuntimeUtilities.GetRuntimeEnvironmentFactory) 810412"];
1199 [label="using var testEnvironment = RuntimeEnvironmentFactory.Create(_dependencies); 810413"];
1200 [label="RuntimeEnvironmentFactory.Create(_dependencies) 810414"];
1201 [label="param Create(IEnumerable<ModuleData> additionalDependencies = null) 810415"];
1202 [label="return s_lazyFactory.Value.Create(additionalDependencies); 810416"];
1203 [label="return s_lazyFactory.Value.Create(additionalDependencies); 810417"];
1204 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 810418"];
1205 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 810419"];
1206 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 810420"];
1207 [label="Emit(testEnvironment, manifestResources, emitOptions) 810421"];
1208 [label="param Emit(IRuntimeEnvironment testEnvironment) 810422"];
1209 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 810423"];
1210 [label="param Emit(EmitOptions emitOptions) 810424"];
1211 [label="param Emit(this) 810425"];
1212 [label="s_dumpCount 810426"];
1213 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 810427"];
1214 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 810428"];
1215 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 810429"];
1216 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 810430"];
1217 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 810431"];
1218 [label="param EmitCompilation(Compilation compilation) 810432"];
1219 [label="param EmitCompilation(IEnumerable<ResourceDescription> manifestResources) 810433"];
1220 [label="param EmitCompilation(List<ModuleData> dependencies) 810434"];
1221 [label="param EmitCompilation(DiagnosticBag diagnostics) 810435"];
1222 [label="param EmitCompilation(CompilationTestData testData) 810436"];
1223 [label="param EmitCompilation(EmitOptions emitOptions) 810437"];
1224 [label="var referencedCompilations = FindReferencedCompilations(compilation); 810438"];
1225 [label="FindReferencedCompilations(compilation) 810439"];
1226 [label="param FindReferencedCompilations(Compilation original) 810440"];
1227 [label="var list = new List<Compilation>(); 810441"];
1228 [label="var toVisit = new Queue<Compilation>(FindDirectReferencedCompilations(original)); 810442"];
1229 [label="FindDirectReferencedCompilations(original) 810443"];
1230 [label="param FindDirectReferencedCompilations(Compilation compilation) 810444"];
1231 [label="var list = new List<Compilation>(); 810445"];
1232 [label="var previousCompilation = compilation.ScriptCompilationInfo?.PreviousScriptCompilation; 810446"];
1233 [label="compilation.ScriptCompilationInfo 810447"];
1234 [label="=> ScriptCompilationInfo 810448"];
1235 [label="if (previousCompilation != null)\n            {\n                list.Add(previousCompilation);\n            } 810449"];
1236 [label="if (previousCompilation != null)\n            {\n                list.Add(previousCompilation);\n            } 810450"];
1237 [label="foreach (var reference in compilation.References.OfType<CompilationReference>())\n            {\n                list.Add(reference.Compilation);\n            } 810451"];
1238 [label="foreach (var reference in compilation.References.OfType<CompilationReference>())\n            {\n                list.Add(reference.Compilation);\n            } 810452"];
1239 [label="get\n            {\n                return GetBoundReferenceManager().DirectiveReferences;\n            } 810453"];
1240 [label="GetBoundReferenceManager() 810454"];
1241 [label="param GetBoundReferenceManager(this) 810455"];
1242 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 810456"];
1243 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 810457"];
1244 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 810458"];
1245 [label="get { return this.Declarations.ReferenceDirectives; } 810459"];
1246 [label="this.Declarations 810460"];
1247 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 810461"];
1248 [label="_syntaxAndDeclarations.GetLazyState() 810462"];
1249 [label="param GetLazyState(this) 810463"];
1250 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 810464"];
1251 [label="return this.Declarations.ReferenceDirectives; 810465"];
1252 [label="get { return _options; } 810466"];
1253 [label="return _options; 810467"];
1254 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 810468"];
1255 [label="_syntaxAndDeclarations.GetLazyState() 810469"];
1256 [label="Debug.Assert(_lazyAssemblySymbol is object); 810470"];
1257 [label="return _referenceManager; 810471"];
1258 [label="return GetBoundReferenceManager().DirectiveReferences; 810472"];
1259 [label="return list; 810473"];
1260 [label="var toVisit = new Queue<Compilation>(FindDirectReferencedCompilations(original)); 810474"];
1261 [label="while (toVisit.Count > 0)\n            {\n                var current = toVisit.Dequeue();\n                if (list.Contains(current))\n                {\n                    continue;\n                }\n\n                list.Add(current);\n\n                foreach (var other in FindDirectReferencedCompilations(current))\n                {\n                    toVisit.Enqueue(other);\n                }\n            } 810475"];
1262 [label="while (toVisit.Count > 0)\n            {\n                var current = toVisit.Dequeue();\n                if (list.Contains(current))\n                {\n                    continue;\n                }\n\n                list.Add(current);\n\n                foreach (var other in FindDirectReferencedCompilations(current))\n                {\n                    toVisit.Enqueue(other);\n                }\n            } 810476"];
1263 [label="return list; 810477"];
1264 [label="var referencedCompilations = FindReferencedCompilations(compilation); 810478"];
1265 [label="var fullNameSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase); 810479"];
1266 [label="foreach (var referencedCompilation in referencedCompilations)\n            {\n                var emitData = EmitCompilationCore(referencedCompilation, null, diagnostics, null, emitOptions);\n                if (emitData.HasValue)\n                {\n                    var moduleData = new ModuleData(referencedCompilation.Assembly.Identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    emitData.Value.Assembly,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    fullNameSet.Add(moduleData.Id.FullName);\n                    dependencies.Add(moduleData);\n                }\n            } 810480"];
1267 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 810481"];
1268 [label="new[] { compilation } 810482"];
1269 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 810483"];
1270 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 810484"];
1271 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 810485"];
1272 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 810486"];
1273 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 810487"];
1274 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 810488"];
1275 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics) 810489"];
1276 [label="param EmitReferences(Compilation compilation) 810490"];
1277 [label="param EmitReferences(HashSet<string> fullNameSet) 810491"];
1278 [label="param EmitReferences(List<ModuleData> dependencies) 810492"];
1279 [label="param EmitReferences(DiagnosticBag diagnostics) 810493"];
1280 [label="foreach (var metadataReference in compilation.References)\n            {\n                if (metadataReference is CompilationReference)\n                {\n                    continue;\n                }\n\n                var peRef = (PortableExecutableReference)metadataReference;\n                var metadata = peRef.GetMetadataNoCopy();\n                var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly;\n                var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null;\n\n                // If this is an indirect reference to a Compilation then it is already been emitted \n                // so no more work to be done.\n                if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                }\n\n                foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                }\n            } 810494"];
1281 [label="if (metadataReference is CompilationReference)\n                {\n                    continue;\n                } 810495"];
1282 [label="var peRef = (PortableExecutableReference)metadataReference; 810496"];
1283 [label="var metadata = peRef.GetMetadataNoCopy(); 810497"];
1284 [label="var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly; 810498"];
1285 [label="isManifestModule 810499"];
1286 [label="var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null; 810500"];
1287 [label="((AssemblyMetadata)metadata).GetAssembly().Identity 810501"];
1288 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 810502"];
1289 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 810503"];
1290 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 810504"];
1291 [label="foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                } 810505"];
1292 [label="EnumerateModules(metadata) 810506"];
1293 [label="param EnumerateModules(Metadata metadata) 810507"];
1294 [label="return (metadata.Kind == MetadataImageKind.Assembly) ? ((AssemblyMetadata)metadata).GetModules().AsEnumerable() : SpecializedCollections.SingletonEnumerable((ModuleMetadata)metadata); 810508"];
1295 [label="(metadata.Kind == MetadataImageKind.Assembly) 810509"];
1296 [label="ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent(); 810510"];
1297 [label="ModuleData moduleData; 810511"];
1298 [label="if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    } 810512"];
1299 [label="fullNameSet.Add(identity.GetDisplayName()); 810513"];
1300 [label="fullNameSet.Add(identity.GetDisplayName()); 810514"];
1301 [label="fullNameSet.Add(identity.GetDisplayName()); 810515"];
1302 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 810516"];
1303 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 810517"];
1304 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 810518"];
1305 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 810519"];
1306 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 810520"];
1307 [label="dependencies.Add(moduleData); 810521"];
1308 [label="dependencies.Add(moduleData); 810522"];
1309 [label="isManifestModule = false; 810523"];
1310 [label="if (metadataReference is CompilationReference)\n                {\n                    continue;\n                } 810524"];
1311 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 810525"];
1312 [label="ModuleData moduleData; 810526"];
1313 [label="isManifestModule = false; 810527"];
1314 [label="foreach (var metadataReference in compilation.References)\n            {\n                if (metadataReference is CompilationReference)\n                {\n                    continue;\n                }\n\n                var peRef = (PortableExecutableReference)metadataReference;\n                var metadata = peRef.GetMetadataNoCopy();\n                var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly;\n                var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null;\n\n                // If this is an indirect reference to a Compilation then it is already been emitted \n                // so no more work to be done.\n                if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                }\n\n                foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                }\n            } 810528"];
1315 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 810529"];
1316 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 810530"];
1317 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 810531"];
1318 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 810532"];
1319 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 810533"];
1320 [label="EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions) 810534"];
1321 [label="param EmitCompilationCore(Compilation compilation) 810535"];
1322 [label="param EmitCompilationCore(IEnumerable<ResourceDescription> manifestResources) 810536"];
1323 [label="param EmitCompilationCore(DiagnosticBag diagnostics) 810537"];
1324 [label="param EmitCompilationCore(CompilationTestData testData) 810538"];
1325 [label="param EmitCompilationCore(EmitOptions emitOptions) 810539"];
1326 [label="if (emitOptions == null)\n                emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 810540"];
1327 [label="if (emitOptions == null)\n                emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 810541"];
1328 [label="emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 810542"];
1329 [label="using var executableStream = new MemoryStream(); 810543"];
1330 [label="var pdb = default(ImmutableArray<byte>); 810544"];
1331 [label="var assembly = default(ImmutableArray<byte>); 810545"];
1332 [label="var pdbStream = (emitOptions.DebugInformationFormat != DebugInformationFormat.Embedded) ? new MemoryStream() : null; 810546"];
1333 [label="(emitOptions.DebugInformationFormat != DebugInformationFormat.Embedded) 810547"];
1334 [label="var embeddedTexts = compilation.SyntaxTrees\n                .Select(t => (filePath: t.FilePath, text: t.GetText()))\n                .Where(t => t.text.CanBeEmbedded && !string.IsNullOrEmpty(t.filePath))\n                .Select(t => EmbeddedText.FromSource(t.filePath, t.text))\n                .ToImmutableArray(); 810548"];
1335 [label="compilation.SyntaxTrees 810549"];
1336 [label="get\n            {\n                return this.SyntaxTrees;\n            } 810550"];
1337 [label="this.SyntaxTrees 810551"];
1338 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 810552"];
1339 [label="_syntaxAndDeclarations.GetLazyState() 810553"];
1340 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 810554"];
1341 [label="return this.SyntaxTrees; 810555"];
1342 [label="var embeddedTexts = compilation.SyntaxTrees\n                .Select(t => (filePath: t.FilePath, text: t.GetText()))\n                .Where(t => t.text.CanBeEmbedded && !string.IsNullOrEmpty(t.filePath))\n                .Select(t => EmbeddedText.FromSource(t.filePath, t.text))\n                .ToImmutableArray(); 810556"];
1343 [label="EmitResult result; 810557"];
1344 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 810558"];
1345 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 810559"];
1346 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 810560"];
1347 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 810561"];
1348 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 810562"];
1349 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 810563"];
1350 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 810564"];
1351 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 810565"];
1352 [label="get { return _syntaxAndDeclarations.MessageProvider; } 810566"];
1353 [label="return _syntaxAndDeclarations.MessageProvider; 810567"];
1354 [label="param CreateModuleBuilder(EmitOptions emitOptions) 810568"];
1355 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 810569"];
1356 [label="param CreateModuleBuilder(Stream? sourceLinkStream) 810570"];
1357 [label="param CreateModuleBuilder(IEnumerable<EmbeddedText>? embeddedTexts) 810571"];
1358 [label="param CreateModuleBuilder(IEnumerable<ResourceDescription>? manifestResources) 810572"];
1359 [label="param CreateModuleBuilder(CompilationTestData? testData) 810573"];
1360 [label="param CreateModuleBuilder(DiagnosticBag diagnostics) 810574"];
1361 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 810575"];
1362 [label="param CreateModuleBuilder(this) 810576"];
1363 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 810577"];
1364 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 810578"];
1365 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 810579"];
1366 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 810580"];
1367 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 810581"];
1368 [label="param GetRuntimeMetadataVersion(DiagnosticBag diagnostics) 810582"];
1369 [label="param GetRuntimeMetadataVersion(this) 810583"];
1370 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 810584"];
1371 [label="GetRuntimeMetadataVersion(emitOptions) 810585"];
1372 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 810586"];
1373 [label="param GetRuntimeMetadataVersion(this) 810587"];
1374 [label="Assembly 810588"];
1375 [label="get\n            {\n                return SourceAssembly;\n            } 810589"];
1376 [label="SourceAssembly 810590"];
1377 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 810591"];
1378 [label="GetBoundReferenceManager() 810592"];
1379 [label="param GetBoundReferenceManager(this) 810593"];
1380 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 810594"];
1381 [label="return _referenceManager; 810595"];
1382 [label="GetBoundReferenceManager(); 810596"];
1383 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 810597"];
1384 [label="return _lazyAssemblySymbol; 810598"];
1385 [label="return SourceAssembly; 810599"];
1386 [label="var corAssembly = Assembly.CorLibrary as Symbols.Metadata.PE.PEAssemblySymbol; 810600"];
1387 [label="if (corAssembly is object)\n            {\n                return corAssembly.Assembly.ManifestModule.MetadataVersion;\n            } 810601"];
1388 [label="return corAssembly.Assembly.ManifestModule.MetadataVersion; 810602"];
1389 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 810603"];
1390 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 810604"];
1391 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 810605"];
1392 [label="return runtimeMDVersion; 810606"];
1393 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 810607"];
1394 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 810608"];
1395 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 810609"];
1396 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 810610"];
1397 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 810611"];
1398 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 810612"];
1399 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 810613"];
1400 [label="get { return SourceAssembly.IsDelaySigned; } 810614"];
1401 [label="SourceAssembly 810615"];
1402 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 810616"];
1403 [label="GetBoundReferenceManager() 810617"];
1404 [label="param GetBoundReferenceManager(this) 810618"];
1405 [label="GetBoundReferenceManager(); 810619"];
1406 [label="return SourceAssembly.IsDelaySigned; 810620"];
1407 [label="SourceAssembly.IsDelaySigned 810621"];
1408 [label="get\n            {\n                return _options;\n            } 810622"];
1409 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 810623"];
1410 [label="Declarations 810624"];
1411 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 810625"];
1412 [label="_syntaxAndDeclarations.GetLazyState() 810626"];
1413 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 810627"];
1414 [label="return Declarations.GetMergedRoot(this); 810628"];
1415 [label="return Declarations.GetMergedRoot(this); 810629"];
1416 [label="return Declarations.GetMergedRoot(this); 810630"];
1417 [label="_syntaxAndDeclarations.GetLazyState() 810631"];
1418 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 810632"];
1419 [label="get { return SourceAssembly.StrongNameKeys; } 810633"];
1420 [label="SourceAssembly 810634"];
1421 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 810635"];
1422 [label="GetBoundReferenceManager() 810636"];
1423 [label="param GetBoundReferenceManager(this) 810637"];
1424 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 810638"];
1425 [label="return _referenceManager; 810639"];
1426 [label="GetBoundReferenceManager(); 810640"];
1427 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 810641"];
1428 [label="return SourceAssembly.StrongNameKeys; 810642"];
1429 [label="SourceAssembly.StrongNameKeys 810643"];
1430 [label="get\n            {\n                return _options;\n            } 810644"];
1431 [label="=> 0x30 810645"];
1432 [label="0x30 810646"];
1433 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 810647"];
1434 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 810648"];
1435 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 810649"];
1436 [label="manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>(); 810650"];
1437 [label="PEModuleBuilder moduleBeingBuilt; 810651"];
1438 [label="if (_options.OutputKind.IsNetModule())\n            {\n                moduleBeingBuilt = new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources);\n            }\n            else\n            {\n                var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary;\n                moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources);\n            } 810652"];
1439 [label="var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary; 810653"];
1440 [label="_options.OutputKind.IsValid() 810654"];
1441 [label="_options.OutputKind 810655"];
1442 [label="SourceAssembly 810656"];
1443 [label="GetBoundReferenceManager() 810657"];
1444 [label="GetBoundReferenceManager(); 810658"];
1445 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 810659"];
1446 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 810660"];
1447 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 810661"];
1448 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 810662"];
1449 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 810663"];
1450 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 810664"];
1451 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 810665"];
1452 [label="new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources) 810666"];
1453 [label="param PEAssemblyBuilder(SourceAssemblySymbol sourceAssembly) 810667"];
1454 [label="param PEAssemblyBuilder(EmitOptions emitOptions) 810668"];
1455 [label="param PEAssemblyBuilder(OutputKind outputKind) 810669"];
1456 [label="param PEAssemblyBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 810670"];
1457 [label="param PEAssemblyBuilder(IEnumerable<ResourceDescription> manifestResources) 810671"];
1458 [label="param PEAssemblyBuilder(this) 810672"];
1459 [label="sourceAssembly 810673"];
1460 [label="emitOptions 810674"];
1461 [label="outputKind 810675"];
1462 [label="serializationProperties 810676"];
1463 [label="manifestResources 810677"];
1464 [label="ImmutableArray<NamedTypeSymbol>.Empty 810678"];
1465 [label="param PEAssemblyBuilder(this) 810679"];
1466 [label="param PEAssemblyBuilderBase(SourceAssemblySymbol sourceAssembly) 810680"];
1467 [label="param PEAssemblyBuilderBase(EmitOptions emitOptions) 810681"];
1468 [label="param PEAssemblyBuilderBase(OutputKind outputKind) 810682"];
1469 [label="param PEAssemblyBuilderBase(Cci.ModulePropertiesForSerialization serializationProperties) 810683"];
1470 [label="param PEAssemblyBuilderBase(IEnumerable<ResourceDescription> manifestResources) 810684"];
1471 [label="param PEAssemblyBuilderBase(ImmutableArray<NamedTypeSymbol> additionalTypes) 810685"];
1472 [label="param PEAssemblyBuilderBase(this) 810686"];
1473 [label="0 810687"];
1474 [label="sourceAssembly.Modules[0] 810688"];
1475 [label="emitOptions 810689"];
1476 [label="outputKind 810690"];
1477 [label="serializationProperties 810691"];
1478 [label="manifestResources 810692"];
1479 [label="param PEAssemblyBuilderBase(this) 810693"];
1480 [label="param PEModuleBuilder(SourceModuleSymbol sourceModule) 810694"];
1481 [label="param PEModuleBuilder(EmitOptions emitOptions) 810695"];
1482 [label="param PEModuleBuilder(OutputKind outputKind) 810696"];
1483 [label="param PEModuleBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 810697"];
1484 [label="param PEModuleBuilder(IEnumerable<ResourceDescription> manifestResources) 810698"];
1485 [label="param PEModuleBuilder(this) 810699"];
1486 [label="sourceModule.ContainingSourceAssembly.DeclaringCompilation 810700"];
1487 [label="sourceModule 810701"];
1488 [label="serializationProperties 810702"];
1489 [label="manifestResources 810703"];
1490 [label="outputKind 810704"];
1491 [label="emitOptions 810705"];
1492 [label="new ModuleCompilationState() 810706"];
1493 [label="param ModuleCompilationState(this) 810707"];
1494 [label="param PEModuleBuilder(this) 810708"];
1495 [label="param PEModuleBuilder(this) 810709"];
1496 [label="get\n            {\n                return true;\n            } 810710"];
1497 [label="return true; 810711"];
1498 [label="param PEModuleBuilder(this) 810712"];
1499 [label="new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 810713"];
1500 [label="AssemblyOrModuleSymbolToModuleRefMap = new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 810714"];
1501 [label="Symbols.SymbolEqualityComparer.ConsiderEverything 810715"];
1502 [label="new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 810716"];
1503 [label="_genericInstanceMap = new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 810717"];
1504 [label="new ConcurrentSet<TypeSymbol>() 810718"];
1505 [label="_reportedErrorTypesMap = new ConcurrentSet<TypeSymbol>() 810719"];
1506 [label="_embeddedTypesManagerOpt 810720"];
1507 [label="_metadataName 810721"];
1508 [label="_fixedImplementationTypes 810722"];
1509 [label="_needsGeneratedAttributes 810723"];
1510 [label="_needsGeneratedAttributes_IsFrozen 810724"];
1511 [label="var specifiedName = sourceModule.MetadataName; 810725"];
1512 [label="_metadataName = specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName ?\n                            specifiedName :\n                            emitOptions.OutputNameOverride ?? specifiedName; 810726"];
1513 [label="specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName 810727"];
1514 [label="_metadataName 810728"];
1515 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 810729"];
1516 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 810730"];
1517 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 810731"];
1518 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 810732"];
1519 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 810733"];
1520 [label="_sourceAssembly 810734"];
1521 [label="_lazyEmbeddedAttribute 810735"];
1522 [label="_lazyIsReadOnlyAttribute 810736"];
1523 [label="_lazyIsByRefLikeAttribute 810737"];
1524 [label="_lazyIsUnmanagedAttribute 810738"];
1525 [label="_lazyNullableAttribute 810739"];
1526 [label="_lazyNullableContextAttribute 810740"];
1527 [label="_lazyNullablePublicOnlyAttribute 810741"];
1528 [label="_lazyNativeIntegerAttribute 810742"];
1529 [label="_metadataName 810743"];
1530 [label="Debug.Assert(sourceAssembly is object); 810744"];
1531 [label="_sourceAssembly 810745"];
1532 [label="_additionalTypes = additionalTypes.NullToEmpty(); 810746"];
1533 [label="_additionalTypes 810747"];
1534 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 810748"];
1535 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 810749"];
1536 [label="(emitOptions.OutputNameOverride == null) 810750"];
1537 [label="sourceAssembly.MetadataName 810751"];
1538 [label="_metadataName 810752"];
1539 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 810753"];
1540 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 810754"];
1541 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 810755"];
1542 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 810756"];
1543 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 810757"];
1544 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 810758"];
1545 [label="moduleBeingBuilt.SourceLinkStreamOpt 810759"];
1546 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 810760"];
1547 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 810761"];
1548 [label="moduleBeingBuilt.EmbeddedTexts 810762"];
1549 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 810763"];
1550 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 810764"];
1551 [label="moduleBeingBuilt.SetMethodTestData(testData.Methods); 810765"];
1552 [label="moduleBeingBuilt.SetMethodTestData(testData.Methods); 810766"];
1553 [label="testData.Module 810767"];
1554 [label="return moduleBeingBuilt; 810768"];
1555 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 810769"];
1556 [label="param CompileMethods(CommonPEModuleBuilder moduleBuilder) 810770"];
1557 [label="param CompileMethods(bool emittingPdb) 810771"];
1558 [label="param CompileMethods(bool emitMetadataOnly) 810772"];
1559 [label="param CompileMethods(bool emitTestCoverageData) 810773"];
1560 [label="param CompileMethods(DiagnosticBag diagnostics) 810774"];
1561 [label="param CompileMethods(Predicate<ISymbolInternal>? filterOpt) 810775"];
1562 [label="param CompileMethods(CancellationToken cancellationToken) 810776"];
1563 [label="param CompileMethods(this) 810777"];
1564 [label="PooledHashSet<int>? excludeDiagnostics = null; 810778"];
1565 [label="if (emitMetadataOnly)\n            {\n                excludeDiagnostics = PooledHashSet<int>.GetInstance();\n                excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody);\n            } 810779"];
1566 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 810780"];
1567 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 810781"];
1568 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 810782"];
1569 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 810783"];
1570 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 810784"];
1571 [label="param GetDiagnostics(CompilationStage stage) 810785"];
1572 [label="param GetDiagnostics(bool includeEarlierStages) 810786"];
1573 [label="param GetDiagnostics(CancellationToken cancellationToken) 810787"];
1574 [label="param GetDiagnostics(this) 810788"];
1575 [label="var diagnostics = DiagnosticBag.GetInstance(); 810789"];
1576 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 810790"];
1577 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 810791"];
1578 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 810792"];
1579 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 810793"];
1580 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 810794"];
1581 [label="param GetDiagnostics(CompilationStage stage) 810795"];
1582 [label="param GetDiagnostics(bool includeEarlierStages) 810796"];
1583 [label="param GetDiagnostics(DiagnosticBag diagnostics) 810797"];
1584 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 810798"];
1585 [label="param GetDiagnostics(this) 810799"];
1586 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 810800"];
1587 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 810801"];
1588 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 810802"];
1589 [label="this.SyntaxTrees 810803"];
1590 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 810804"];
1591 [label="_syntaxAndDeclarations.GetLazyState() 810805"];
1592 [label="param GetLazyState(this) 810806"];
1593 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 810807"];
1594 [label="var syntaxTrees = this.SyntaxTrees; 810808"];
1595 [label="this.Options 810809"];
1596 [label="get\n            {\n                return _options;\n            } 810810"];
1597 [label="return _options; 810811"];
1598 [label="if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                } 810812"];
1599 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 810813"];
1600 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 810814"];
1601 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 810815"];
1602 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 810816"];
1603 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 810817"];
1604 [label="param AppendLoadDirectiveDiagnostics(SyntaxAndDeclarationManager syntaxAndDeclarations) 810818"];
1605 [label="param AppendLoadDirectiveDiagnostics(SyntaxTree syntaxTree) 810819"];
1606 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 810820"];
1607 [label="ImmutableArray<LoadDirective> loadDirectives; 810821"];
1608 [label="loadDirectives 810822"];
1609 [label="syntaxAndDeclarations.GetLazyState() 810823"];
1610 [label="param GetLazyState(this) 810824"];
1611 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 810825"];
1612 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 810826"];
1613 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 810827"];
1614 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 810828"];
1615 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 810829"];
1616 [label="foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                } 810830"];
1617 [label="cancellationToken.ThrowIfCancellationRequested(); 810831"];
1618 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 810832"];
1619 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 810833"];
1620 [label="CheckAssemblyName(builder); 810834"];
1621 [label="CheckAssemblyName(builder); 810835"];
1622 [label="CheckAssemblyName(builder); 810836"];
1623 [label="Options 810837"];
1624 [label="get\n            {\n                return _options;\n            } 810838"];
1625 [label="return _options; 810839"];
1626 [label="builder.AddRange(Options.Errors); 810840"];
1627 [label="Options 810841"];
1628 [label="get\n            {\n                return _options;\n            } 810842"];
1629 [label="return _options; 810843"];
1630 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 810844"];
1631 [label="cancellationToken.ThrowIfCancellationRequested(); 810845"];
1632 [label="GetBoundReferenceManager() 810846"];
1633 [label="param GetBoundReferenceManager(this) 810847"];
1634 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 810848"];
1635 [label="return _referenceManager; 810849"];
1636 [label="builder.AddRange(GetBoundReferenceManager().Diagnostics); 810850"];
1637 [label="cancellationToken.ThrowIfCancellationRequested(); 810851"];
1638 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 810852"];
1639 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 810853"];
1640 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 810854"];
1641 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 810855"];
1642 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 810856"];
1643 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 810857"];
1644 [label="param GetSourceDeclarationDiagnostics(CancellationToken cancellationToken = default) 810858"];
1645 [label="param GetSourceDeclarationDiagnostics(this) 810859"];
1646 [label="GlobalImports 810860"];
1647 [label="=> _globalImports.Value 810861"];
1648 [label="_globalImports.Value 810862"];
1649 [label="_globalImports.Value 810863"];
1650 [label="=> Imports.FromGlobalUsings(this) 810864"];
1651 [label="this 810865"];
1652 [label="Imports.FromGlobalUsings(this) 810866"];
1653 [label="Imports.FromGlobalUsings(this) 810867"];
1654 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 810868"];
1655 [label="ScriptCompilationInfo 810869"];
1656 [label="ScriptCompilationInfo?.PreviousScriptCompilation 810870"];
1657 [label="GlobalImports.Complete(cancellationToken); 810871"];
1658 [label="GlobalImports.Complete(cancellationToken); 810872"];
1659 [label="GlobalImports.Complete(cancellationToken); 810873"];
1660 [label="SourceLocation? location = null; 810874"];
1661 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 810875"];
1662 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 810876"];
1663 [label="Assembly 810877"];
1664 [label="get\n            {\n                return SourceAssembly;\n            } 810878"];
1665 [label="SourceAssembly 810879"];
1666 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 810880"];
1667 [label="GetBoundReferenceManager() 810881"];
1668 [label="param GetBoundReferenceManager(this) 810882"];
1669 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 810883"];
1670 [label="return _referenceManager; 810884"];
1671 [label="GetBoundReferenceManager(); 810885"];
1672 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 810886"];
1673 [label="Assembly.ForceComplete(location, cancellationToken); 810887"];
1674 [label="Assembly.ForceComplete(location, cancellationToken); 810888"];
1675 [label="Assembly.ForceComplete(location, cancellationToken); 810889"];
1676 [label="Assembly.ForceComplete(location, cancellationToken); 810890"];
1677 [label="Assembly.ForceComplete(location, cancellationToken); 810891"];
1678 [label="SourceAssembly 810892"];
1679 [label="GetBoundReferenceManager() 810893"];
1680 [label="param GetBoundReferenceManager(this) 810894"];
1681 [label="GetBoundReferenceManager(); 810895"];
1682 [label="Declarations 810896"];
1683 [label="_syntaxAndDeclarations.GetLazyState() 810897"];
1684 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 810898"];
1685 [label="return Declarations.GetMergedRoot(this); 810899"];
1686 [label="_syntaxAndDeclarations.GetLazyState() 810900"];
1687 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 810901"];
1688 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 810902"];
1689 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 810903"];
1690 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 810904"];
1691 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 810905"];
1692 [label="var diagnostics = new DiagnosticBag(); 810906"];
1693 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 810907"];
1694 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 810908"];
1695 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 810909"];
1696 [label="return _lazyDeclarationDiagnostics; 810910"];
1697 [label="param SymbolDeclaredEvent(Symbol symbol) 810911"];
1698 [label="param SymbolDeclaredEvent(this) 810912"];
1699 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 810913"];
1700 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 810914"];
1701 [label="param GetUnaliasedReferencedAssemblies(this) 810915"];
1702 [label="GetBoundReferenceManager() 810916"];
1703 [label="param GetBoundReferenceManager(this) 810917"];
1704 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 810918"];
1705 [label="return _referenceManager; 810919"];
1706 [label="var referenceManager = GetBoundReferenceManager(); 810920"];
1707 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 810921"];
1708 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 810922"];
1709 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                } 810923"];
1710 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 810924"];
1711 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 810925"];
1712 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 810926"];
1713 [label="return _additionalCodegenWarnings; 810927"];
1714 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 810928"];
1715 [label="return _referenceManager; 810929"];
1716 [label="GetBoundReferenceManager(); 810930"];
1717 [label="param GetSpecialType(SpecialType specialType) 810931"];
1718 [label="param GetSpecialType(this) 810932"];
1719 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 810933"];
1720 [label="NamedTypeSymbol result; 810934"];
1721 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 810935"];
1722 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 810936"];
1723 [label="Assembly 810937"];
1724 [label="GetBoundReferenceManager() 810938"];
1725 [label="GetBoundReferenceManager(); 810939"];
1726 [label="result = Assembly.GetSpecialType(specialType); 810940"];
1727 [label="result = Assembly.GetSpecialType(specialType); 810941"];
1728 [label="Debug.Assert(result.SpecialType == specialType); 810942"];
1729 [label="return result; 810943"];
1730 [label="param GetBinder(CSharpSyntaxNode syntax) 810944"];
1731 [label="param GetBinder(this) 810945"];
1732 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 810946"];
1733 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 810947"];
1734 [label="GetBinderFactory(syntax.SyntaxTree) 810948"];
1735 [label="param GetBinderFactory(SyntaxTree syntaxTree) 810949"];
1736 [label="param GetBinderFactory(bool ignoreAccessibility = false) 810950"];
1737 [label="param GetBinderFactory(this) 810951"];
1738 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 810952"];
1739 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 810953"];
1740 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 810954"];
1741 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 810955"];
1742 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 810956"];
1743 [label="param GetBinderFactory(SyntaxTree syntaxTree) 810957"];
1744 [label="param GetBinderFactory(bool ignoreAccessibility) 810958"];
1745 [label="param GetBinderFactory(ref WeakReference<BinderFactory>[]? cachedBinderFactories) 810959"];
1746 [label="param GetBinderFactory(this) 810960"];
1747 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 810961"];
1748 [label="ignoreAccessibility 810962"];
1749 [label="_binderFactories 810963"];
1750 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 810964"];
1751 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 810965"];
1752 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 810966"];
1753 [label="GetSyntaxTreeOrdinal(syntaxTree) 810967"];
1754 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 810968"];
1755 [label="param GetSyntaxTreeOrdinal(this) 810969"];
1756 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 810970"];
1757 [label="this.ContainsSyntaxTree(tree) 810971"];
1758 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 810972"];
1759 [label="param ContainsSyntaxTree(this) 810973"];
1760 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 810974"];
1761 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 810975"];
1762 [label="_syntaxAndDeclarations.GetLazyState() 810976"];
1763 [label="param GetLazyState(this) 810977"];
1764 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 810978"];
1765 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 810979"];
1766 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 810980"];
1767 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 810981"];
1768 [label="_syntaxAndDeclarations.GetLazyState() 810982"];
1769 [label="param GetLazyState(this) 810983"];
1770 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 810984"];
1771 [label="return _syntaxAndDeclarations.GetLazyState().OrdinalMap[tree]; 810985"];
1772 [label="WeakReference<BinderFactory>[]? binderFactories = cachedBinderFactories; 810986"];
1773 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 810987"];
1774 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 810988"];
1775 [label="this.SyntaxTrees 810989"];
1776 [label="param GetLazyState(this) 810990"];
1777 [label="binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length]; 810991"];
1778 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 810992"];
1779 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 810993"];
1780 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 810994"];
1781 [label="BinderFactory? previousFactory; 810995"];
1782 [label="var previousWeakReference = binderFactories[treeNum]; 810996"];
1783 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 810997"];
1784 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 810998"];
1785 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 810999"];
1786 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 811000"];
1787 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 811001"];
1788 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 811002"];
1789 [label="param AddNewFactory(SyntaxTree syntaxTree) 811003"];
1790 [label="param AddNewFactory(bool ignoreAccessibility) 811004"];
1791 [label="param AddNewFactory([NotNull] ref WeakReference<BinderFactory>? slot) 811005"];
1792 [label="param AddNewFactory(this) 811006"];
1793 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 811007"];
1794 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 811008"];
1795 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 811009"];
1796 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 811010"];
1797 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 811011"];
1798 [label="var newWeakReference = new WeakReference<BinderFactory>(newFactory); 811012"];
1799 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 811013"];
1800 [label="BinderFactory? previousFactory; 811014"];
1801 [label="WeakReference<BinderFactory>? previousWeakReference = slot; 811015"];
1802 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 811016"];
1803 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 811017"];
1804 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 811018"];
1805 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 811019"];
1806 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 811020"];
1807 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 811021"];
1808 [label="return newFactory; 811022"];
1809 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 811023"];
1810 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 811024"];
1811 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 811025"];
1812 [label="var modules = ArrayBuilder<ModuleSymbol>.GetInstance(); 811026"];
1813 [label="GetAllUnaliasedModules(modules); 811027"];
1814 [label="GetAllUnaliasedModules(modules) 811028"];
1815 [label="param GetAllUnaliasedModules(ArrayBuilder<ModuleSymbol> modules) 811029"];
1816 [label="param GetAllUnaliasedModules(this) 811030"];
1817 [label="Assembly 811031"];
1818 [label="get\n            {\n                return SourceAssembly;\n            } 811032"];
1819 [label="GetBoundReferenceManager() 811033"];
1820 [label="param GetBoundReferenceManager(this) 811034"];
1821 [label="GetBoundReferenceManager(); 811035"];
1822 [label="modules.AddRange(Assembly.Modules); 811036"];
1823 [label="modules.AddRange(Assembly.Modules); 811037"];
1824 [label="GetBoundReferenceManager() 811038"];
1825 [label="param GetBoundReferenceManager(this) 811039"];
1826 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 811040"];
1827 [label="return _referenceManager; 811041"];
1828 [label="var referenceManager = GetBoundReferenceManager(); 811042"];
1829 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 811043"];
1830 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 811044"];
1831 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                } 811045"];
1832 [label="modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules); 811046"];
1833 [label="GetAllUnaliasedModules(modules); 811047"];
1834 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 811048"];
1835 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 811049"];
1836 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 811050"];
1837 [label="modules.Free(); 811051"];
1838 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 811052"];
1839 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 811053"];
1840 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 811054"];
1841 [label="return _lazyGlobalNamespace; 811055"];
1842 [label="get\n            {\n                return Assembly.Modules[0];\n            } 811056"];
1843 [label="Assembly 811057"];
1844 [label="get\n            {\n                return SourceAssembly;\n            } 811058"];
1845 [label="SourceAssembly 811059"];
1846 [label="GetBoundReferenceManager() 811060"];
1847 [label="param GetBoundReferenceManager(this) 811061"];
1848 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 811062"];
1849 [label="return _referenceManager; 811063"];
1850 [label="GetBoundReferenceManager(); 811064"];
1851 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 811065"];
1852 [label="return Assembly.Modules[0]; 811066"];
1853 [label="return Assembly.Modules[0]; 811067"];
1854 [label="param IsNullableAnalysisEnabledIn(SyntaxNode syntax) 811068"];
1855 [label="param IsNullableAnalysisEnabledIn(this) 811069"];
1856 [label="return IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span); 811070"];
1857 [label="IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span) 811071"];
1858 [label="param IsNullableAnalysisEnabledIn(CSharpSyntaxTree tree) 811072"];
1859 [label="param IsNullableAnalysisEnabledIn(TextSpan span) 811073"];
1860 [label="param IsNullableAnalysisEnabledIn(this) 811074"];
1861 [label="GetNullableAnalysisValue() 811075"];
1862 [label="param GetNullableAnalysisValue(this) 811076"];
1863 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 811077"];
1864 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 811078"];
1865 [label="Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            } 811079"];
1866 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 811080"];
1867 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 811081"];
1868 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 811082"];
1869 [label="Options 811083"];
1870 [label="get\n            {\n                return _options;\n            } 811084"];
1871 [label="return _options; 811085"];
1872 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 811086"];
1873 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 811087"];
1874 [label="param GetBinderFactory(SyntaxTree syntaxTree) 811088"];
1875 [label="param GetBinderFactory(bool ignoreAccessibility = false) 811089"];
1876 [label="param GetBinderFactory(this) 811090"];
1877 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 811091"];
1878 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 811092"];
1879 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 811093"];
1880 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 811094"];
1881 [label="param GetBinderFactory(SyntaxTree syntaxTree) 811095"];
1882 [label="param GetBinderFactory(bool ignoreAccessibility) 811096"];
1883 [label="param GetBinderFactory(this) 811097"];
1884 [label="ignoreAccessibility 811098"];
1885 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 811099"];
1886 [label="GetSyntaxTreeOrdinal(syntaxTree) 811100"];
1887 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 811101"];
1888 [label="param GetSyntaxTreeOrdinal(this) 811102"];
1889 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 811103"];
1890 [label="this.ContainsSyntaxTree(tree) 811104"];
1891 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 811105"];
1892 [label="param ContainsSyntaxTree(this) 811106"];
1893 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 811107"];
1894 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 811108"];
1895 [label="_syntaxAndDeclarations.GetLazyState() 811109"];
1896 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 811110"];
1897 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 811111"];
1898 [label="_syntaxAndDeclarations.GetLazyState() 811112"];
1899 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 811113"];
1900 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 811114"];
1901 [label="BinderFactory? previousFactory; 811115"];
1902 [label="var previousWeakReference = binderFactories[treeNum]; 811116"];
1903 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 811117"];
1904 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 811118"];
1905 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 811119"];
1906 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 811120"];
1907 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 811121"];
1908 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 811122"];
1909 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 811123"];
1910 [label="param AddNewFactory(SyntaxTree syntaxTree) 811124"];
1911 [label="param AddNewFactory(bool ignoreAccessibility) 811125"];
1912 [label="param AddNewFactory(this) 811126"];
1913 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 811127"];
1914 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 811128"];
1915 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 811129"];
1916 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 811130"];
1917 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 811131"];
1918 [label="BinderFactory? previousFactory; 811132"];
1919 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 811133"];
1920 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 811134"];
1921 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 811135"];
1922 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 811136"];
1923 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 811137"];
1924 [label="get\n            {\n                return Assembly.Modules[0];\n            } 811138"];
1925 [label="Assembly 811139"];
1926 [label="get\n            {\n                return SourceAssembly;\n            } 811140"];
1927 [label="SourceAssembly 811141"];
1928 [label="GetBoundReferenceManager() 811142"];
1929 [label="param GetBoundReferenceManager(this) 811143"];
1930 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 811144"];
1931 [label="return _referenceManager; 811145"];
1932 [label="GetBoundReferenceManager(); 811146"];
1933 [label="return Assembly.Modules[0]; 811147"];
1934 [label="param IsFeatureEnabled(this CSharpCompilation compilation) 811148"];
1935 [label="param IsFeatureEnabled(MessageID feature) 811149"];
1936 [label="compilation.SyntaxTrees 811150"];
1937 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 811151"];
1938 [label="_syntaxAndDeclarations.GetLazyState() 811152"];
1939 [label="param GetLazyState(this) 811153"];
1940 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 811154"];
1941 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 811155"];
1942 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 811156"];
1943 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 811157"];
1944 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 811158"];
1945 [label="GetBoundReferenceManager() 811159"];
1946 [label="GetBoundReferenceManager(); 811160"];
1947 [label="Debug.Assert(result.SpecialType == specialType); 811161"];
1948 [label="param ShouldEmitNullableAttributes(Symbol symbol) 811162"];
1949 [label="param ShouldEmitNullableAttributes(this) 811163"];
1950 [label="RoslynDebug.Assert(symbol is object); 811164"];
1951 [label="RoslynDebug.Assert(symbol is object); 811165"];
1952 [label="Debug.Assert(symbol.IsDefinition); 811166"];
1953 [label="SourceModule 811167"];
1954 [label="get\n            {\n                return Assembly.Modules[0];\n            } 811168"];
1955 [label="Assembly 811169"];
1956 [label="get\n            {\n                return SourceAssembly;\n            } 811170"];
1957 [label="SourceAssembly 811171"];
1958 [label="GetBoundReferenceManager() 811172"];
1959 [label="param GetBoundReferenceManager(this) 811173"];
1960 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 811174"];
1961 [label="return _referenceManager; 811175"];
1962 [label="GetBoundReferenceManager(); 811176"];
1963 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 811177"];
1964 [label="return Assembly.Modules[0]; 811178"];
1965 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 811179"];
1966 [label="EmitNullablePublicOnly 811180"];
1967 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 811181"];
1968 [label="if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                } 811182"];
1969 [label="SyntaxTrees 811183"];
1970 [label="var firstSt = SyntaxTrees.FirstOrDefault(); 811184"];
1971 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 811185"];
1972 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 811186"];
1973 [label="_lazyEmitNullablePublicOnly = value.ToThreeState(); 811187"];
1974 [label="_lazyEmitNullablePublicOnly 811188"];
1975 [label="return _lazyEmitNullablePublicOnly.Value(); 811189"];
1976 [label="if (!EmitNullablePublicOnly)\n            {\n                return true;\n            } 811190"];
1977 [label="return true; 811191"];
1978 [label="Debug.Assert(symbol.IsDefinition); 811192"];
1979 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 811193"];
1980 [label="return _referenceManager; 811194"];
1981 [label="GetBoundReferenceManager(); 811195"];
1982 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 811196"];
1983 [label="GetBoundReferenceManager() 811197"];
1984 [label="GetBoundReferenceManager(); 811198"];
1985 [label="Debug.Assert(result.SpecialType == specialType); 811199"];
1986 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 811200"];
1987 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 811201"];
1988 [label="param GetBoundReferenceManager(this) 811202"];
1989 [label="GetBoundReferenceManager(); 811203"];
1990 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 811204"];
1991 [label="return _referenceManager; 811205"];
1992 [label="GetBoundReferenceManager(); 811206"];
1993 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 811207"];
1994 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 811208"];
1995 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 811209"];
1996 [label="_declarationDiagnosticsFrozen = true; 811210"];
1997 [label="_declarationDiagnosticsFrozen 811211"];
1998 [label="_needsGeneratedAttributes_IsFrozen = true; 811212"];
1999 [label="_needsGeneratedAttributes_IsFrozen 811213"];
2000 [label="var result = _lazyDeclarationDiagnostics?.AsEnumerable() ?? Enumerable.Empty<Diagnostic>(); 811214"];
2001 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 811215"];
2002 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 811216"];
2003 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 811217"];
2004 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 811218"];
2005 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 811219"];
2006 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 811220"];
2007 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 811221"];
2008 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 811222"];
2009 [label="param GetClsComplianceDiagnostics(CancellationToken cancellationToken) 811223"];
2010 [label="param GetClsComplianceDiagnostics(this) 811224"];
2011 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 811225"];
2012 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 811226"];
2013 [label="if (_lazyClsComplianceDiagnostics.IsDefault)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken);\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree());\n            } 811227"];
2014 [label="var builder = DiagnosticBag.GetInstance(); 811228"];
2015 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 811229"];
2016 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 811230"];
2017 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 811231"];
2018 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 811232"];
2019 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken) 811233"];
2020 [label="param CheckCompliance(CSharpCompilation compilation) 811234"];
2021 [label="param CheckCompliance(DiagnosticBag diagnostics) 811235"];
2022 [label="param CheckCompliance(CancellationToken cancellationToken) 811236"];
2023 [label="param CheckCompliance(SyntaxTree filterTree = null) 811237"];
2024 [label="param CheckCompliance(TextSpan? filterSpanWithinTree = null) 811238"];
2025 [label="var queue = new ConcurrentQueue<Diagnostic>(); 811239"];
2026 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 811240"];
2027 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 811241"];
2028 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 811242"];
2029 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 811243"];
2030 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 811244"];
2031 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 811245"];
2032 [label="new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken) 811246"];
2033 [label="param ClsComplianceChecker(CSharpCompilation compilation) 811247"];
2034 [label="param ClsComplianceChecker(SyntaxTree filterTree) 811248"];
2035 [label="param ClsComplianceChecker(TextSpan? filterSpanWithinTree) 811249"];
2036 [label="param ClsComplianceChecker(ConcurrentQueue<Diagnostic> diagnostics) 811250"];
2037 [label="param ClsComplianceChecker(CancellationToken cancellationToken) 811251"];
2038 [label="param ClsComplianceChecker(this) 811252"];
2039 [label="param ClsComplianceChecker(this) 811253"];
2040 [label="_compilation 811254"];
2041 [label="_filterTree 811255"];
2042 [label="_filterSpanWithinTree 811256"];
2043 [label="_diagnostics 811257"];
2044 [label="_declaredOrInheritedCompliance 811258"];
2045 [label="_compilerTasks 811259"];
2046 [label="_compilation 811260"];
2047 [label="_filterTree 811261"];
2048 [label="_filterSpanWithinTree 811262"];
2049 [label="_diagnostics 811263"];
2050 [label="_cancellationToken 811264"];
2051 [label="_declaredOrInheritedCompliance = new ConcurrentDictionary<Symbol, Compliance>(Symbols.SymbolEqualityComparer.ConsiderEverything); 811265"];
2052 [label="_declaredOrInheritedCompliance 811266"];
2053 [label="ConcurrentAnalysis 811267"];
2054 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 811268"];
2055 [label="null 811269"];
2056 [label="_filterTree == null 811270"];
2057 [label="_compilation.Options 811271"];
2058 [label="get\n            {\n                return _options;\n            } 811272"];
2059 [label="return _options; 811273"];
2060 [label="_filterTree == null && _compilation.Options.ConcurrentBuild 811274"];
2061 [label="if (ConcurrentAnalysis)\n            {\n                _compilerTasks = new ConcurrentStack<Task>();\n            } 811275"];
2062 [label="_compilerTasks = new ConcurrentStack<Task>(); 811276"];
2063 [label="_compilerTasks 811277"];
2064 [label="compilation.Assembly 811278"];
2065 [label="get\n            {\n                return SourceAssembly;\n            } 811279"];
2066 [label="GetBoundReferenceManager() 811280"];
2067 [label="param GetBoundReferenceManager(this) 811281"];
2068 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 811282"];
2069 [label="return _referenceManager; 811283"];
2070 [label="GetBoundReferenceManager(); 811284"];
2071 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 811285"];
2072 [label="checker.Visit(compilation.Assembly); 811286"];
2073 [label="checker.Visit(compilation.Assembly); 811287"];
2074 [label="checker.Visit(compilation.Assembly); 811288"];
2075 [label="param VisitAssembly(AssemblySymbol symbol) 811289"];
2076 [label="param VisitAssembly(this) 811290"];
2077 [label="_cancellationToken.ThrowIfCancellationRequested(); 811291"];
2078 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 811292"];
2079 [label="Compliance assemblyCompliance = GetDeclaredOrInheritedCompliance(symbol); 811293"];
2080 [label="GetDeclaredOrInheritedCompliance(symbol) 811294"];
2081 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 811295"];
2082 [label="param GetDeclaredOrInheritedCompliance(this) 811296"];
2083 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 811297"];
2084 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 811298"];
2085 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 811299"];
2086 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 811300"];
2087 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 811301"];
2088 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 811302"];
2089 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 811303"];
2090 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 811304"];
2091 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 811305"];
2092 [label="Compliance compliance; 811306"];
2093 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 811307"];
2094 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 811308"];
2095 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 811309"];
2096 [label="Location ignoredLocation; 811310"];
2097 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 811311"];
2098 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 811312"];
2099 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 811313"];
2100 [label="param GetDeclaredCompliance(Symbol symbol) 811314"];
2101 [label="param GetDeclaredCompliance(out Location attributeLocation) 811315"];
2102 [label="param GetDeclaredCompliance(this) 811316"];
2103 [label="attributeLocation = null; 811317"];
2104 [label="foreach (CSharpAttributeData data in symbol.GetAttributes())\n            {\n                // Check signature before HasErrors to avoid realizing symbols for other attributes.\n                if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                }\n            } 811318"];
2105 [label="return null; 811319"];
2106 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 811320"];
2107 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 811321"];
2108 [label="if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 811322"];
2109 [label="compliance = Compliance.ImpliedFalse; 811323"];
2110 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 811324"];
2111 [label="(symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType) 811325"];
2112 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 811326"];
2113 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 811327"];
2114 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 811328"];
2115 [label="IsTrue(assemblyCompliance) 811329"];
2116 [label="param IsTrue(Compliance compliance) 811330"];
2117 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 811331"];
2118 [label="return false; 811332"];
2119 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 811333"];
2120 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 811334"];
2121 [label="ModuleSymbol module = symbol.Modules[i]; 811335"];
2122 [label="Location attributeLocation; 811336"];
2123 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 811337"];
2124 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 811338"];
2125 [label="GetDeclaredCompliance(module, out attributeLocation) 811339"];
2126 [label="param GetDeclaredCompliance(Symbol symbol) 811340"];
2127 [label="param GetDeclaredCompliance(out Location attributeLocation) 811341"];
2128 [label="param GetDeclaredCompliance(this) 811342"];
2129 [label="attributeLocation = null; 811343"];
2130 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 811344"];
2131 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 811345"];
2132 [label="i == 0 811346"];
2133 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 811347"];
2134 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 811348"];
2135 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 811349"];
2136 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 811350"];
2137 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 811351"];
2138 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 811352"];
2139 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 811353"];
2140 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 811354"];
2141 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 811355"];
2142 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)))\n            {\n                CheckForAttributeWithArrayArgument(sourceModule);\n            } 811356"];
2143 [label="GetDeclaredOrInheritedCompliance(sourceModule) 811357"];
2144 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 811358"];
2145 [label="param GetDeclaredOrInheritedCompliance(this) 811359"];
2146 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 811360"];
2147 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 811361"];
2148 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 811362"];
2149 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 811363"];
2150 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 811364"];
2151 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 811365"];
2152 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 811366"];
2153 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 811367"];
2154 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 811368"];
2155 [label="Compliance compliance; 811369"];
2156 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 811370"];
2157 [label="Location ignoredLocation; 811371"];
2158 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 811372"];
2159 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 811373"];
2160 [label="param GetDeclaredCompliance(out Location attributeLocation) 811374"];
2161 [label="param GetDeclaredCompliance(this) 811375"];
2162 [label="attributeLocation = null; 811376"];
2163 [label="return null; 811377"];
2164 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 811378"];
2165 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 811379"];
2166 [label="compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse; 811380"];
2167 [label="GetInheritedCompliance(symbol) 811381"];
2168 [label="param GetInheritedCompliance(Symbol symbol) 811382"];
2169 [label="param GetInheritedCompliance(this) 811383"];
2170 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 811384"];
2171 [label="Symbol containing = (Symbol)symbol.ContainingType ?? symbol.ContainingAssembly; 811385"];
2172 [label="System.Diagnostics.Debug.Assert((object)containing != null); 811386"];
2173 [label="System.Diagnostics.Debug.Assert((object)containing != null); 811387"];
2174 [label="return GetDeclaredOrInheritedCompliance(containing); 811388"];
2175 [label="GetDeclaredOrInheritedCompliance(containing) 811389"];
2176 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 811390"];
2177 [label="param GetDeclaredOrInheritedCompliance(this) 811391"];
2178 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 811392"];
2179 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 811393"];
2180 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 811394"];
2181 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 811395"];
2182 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 811396"];
2183 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 811397"];
2184 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 811398"];
2185 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 811399"];
2186 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 811400"];
2187 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 811401"];
2188 [label="return compliance; 811402"];
2189 [label="IsTrue(GetInheritedCompliance(symbol)) 811403"];
2190 [label="param IsTrue(Compliance compliance) 811404"];
2191 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 811405"];
2192 [label="return false; 811406"];
2193 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 811407"];
2194 [label="param IsTrue(Compliance compliance) 811408"];
2195 [label="Visit(symbol.GlobalNamespace); 811409"];
2196 [label="Visit(symbol.GlobalNamespace); 811410"];
2197 [label="param VisitNamespace(NamespaceSymbol symbol) 811411"];
2198 [label="param VisitNamespace(this) 811412"];
2199 [label="_cancellationToken.ThrowIfCancellationRequested(); 811413"];
2200 [label="if (DoNotVisit(symbol)) return; 811414"];
2201 [label="DoNotVisit(symbol) 811415"];
2202 [label="param DoNotVisit(Symbol symbol) 811416"];
2203 [label="param DoNotVisit(this) 811417"];
2204 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 811418"];
2205 [label="return false; 811419"];
2206 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(symbol)))\n            {\n                CheckName(symbol);\n                CheckMemberDistinctness(symbol);\n            } 811420"];
2207 [label="GetDeclaredOrInheritedCompliance(symbol) 811421"];
2208 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 811422"];
2209 [label="param GetDeclaredOrInheritedCompliance(this) 811423"];
2210 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 811424"];
2211 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 811425"];
2212 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 811426"];
2213 [label="return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly); 811427"];
2214 [label="GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly) 811428"];
2215 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 811429"];
2216 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 811430"];
2217 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 811431"];
2218 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 811432"];
2219 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 811433"];
2220 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 811434"];
2221 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 811435"];
2222 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 811436"];
2223 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 811437"];
2224 [label="return compliance; 811438"];
2225 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 811439"];
2226 [label="param IsTrue(Compliance compliance) 811440"];
2227 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 811441"];
2228 [label="return false; 811442"];
2229 [label="ConcurrentAnalysis 811443"];
2230 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 811444"];
2231 [label="null 811445"];
2232 [label="_filterTree == null 811446"];
2233 [label="_compilation.Options 811447"];
2234 [label="get\n            {\n                return _options;\n            } 811448"];
2235 [label="if (ConcurrentAnalysis)\n            {\n                VisitNamespaceMembersAsTasks(symbol);\n            }\n            else\n            {\n                VisitNamespaceMembers(symbol);\n            } 811449"];
2236 [label="VisitNamespaceMembersAsTasks(symbol); 811450"];
2237 [label="VisitNamespaceMembersAsTasks(symbol) 811451"];
2238 [label="param VisitNamespaceMembersAsTasks(NamespaceSymbol symbol) 811452"];
2239 [label="param VisitNamespaceMembersAsTasks(this) 811453"];
2240 [label="foreach (var m in symbol.GetMembersUnordered())\n            {\n                _compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken));\n            } 811454"];
2241 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 811455"];
2242 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 811456"];
2243 [label="VisitNamespaceMembersAsTasks(symbol); 811457"];
2244 [label="checker.WaitForWorkers() 811458"];
2245 [label="param WaitForWorkers(this) 811459"];
2246 [label="var tasks = _compilerTasks; 811460"];
2247 [label="if (tasks == null)\n            {\n                return;\n            } 811461"];
2248 [label="if (tasks == null)\n            {\n                return;\n            } 811462"];
2249 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 811463"];
2250 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 811464"];
2251 [label="curTask.GetAwaiter().GetResult(); 811465"];
2252 [label="checker.WaitForWorkers(); 811466"];
2253 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 811467"];
2254 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 811468"];
2255 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 811469"];
2256 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 811470"];
2257 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 811471"];
2258 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 811472"];
2259 [label="return _lazyClsComplianceDiagnostics; 811473"];
2260 [label="return result.AsImmutable().Concat(clsDiagnostics); 811474"];
2261 [label="return result.AsImmutable().Concat(clsDiagnostics); 811475"];
2262 [label="return result.AsImmutable().Concat(clsDiagnostics); 811476"];
2263 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 811477"];
2264 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 811478"];
2265 [label="cancellationToken.ThrowIfCancellationRequested(); 811479"];
2266 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 811480"];
2267 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 811481"];
2268 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 811482"];
2269 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 811483"];
2270 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 811484"];
2271 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 811485"];
2272 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 811486"];
2273 [label="return diagnostics.ToReadOnlyAndFree(); 811487"];
2274 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 811488"];
2275 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 811489"];
2276 [label="excludeDiagnostics?.Free(); 811490"];
2277 [label="var moduleBeingBuilt = (PEModuleBuilder)moduleBuilder; 811491"];
2278 [label="if (emitMetadataOnly)\n            {\n                if (hasDeclarationErrors)\n                {\n                    return false;\n                }\n\n                if (moduleBeingBuilt.SourceModule.HasBadAttributes)\n                {\n                    // If there were errors but no declaration diagnostics, explicitly add a 'Failed to emit module' error.\n                    diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuilt).Name,\n                        new LocalizableResourceString(nameof(CodeAnalysisResources.ModuleHasInvalidAttributes), CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n\n                    return false;\n                }\n\n                SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken);\n            }\n            else\n            {\n                if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                }\n\n                // Perform initial bind of method bodies in spite of earlier errors. This is the same\n                // behavior as when calling GetDiagnostics()\n\n                // Use a temporary bag so we don't have to refilter pre-existing diagnostics.\n                DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance();\n\n                MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken);\n\n                if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                }\n\n                bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken);\n\n                if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                }\n            } 811492"];
2279 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 811493"];
2280 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 811494"];
2281 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 811495"];
2282 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 811496"];
2283 [label="param AddDebugSourceDocumentsForChecksumDirectives(DebugDocumentsBuilder documentsBuilder) 811497"];
2284 [label="param AddDebugSourceDocumentsForChecksumDirectives(SyntaxTree tree) 811498"];
2285 [label="param AddDebugSourceDocumentsForChecksumDirectives(DiagnosticBag diagnostics) 811499"];
2286 [label="param AddDebugSourceDocumentsForChecksumDirectives(this) 811500"];
2287 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 811501"];
2288 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 811502"];
2289 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 811503"];
2290 [label="foreach (var directive in checksumDirectives)\n            {\n                var checksumDirective = (PragmaChecksumDirectiveTriviaSyntax)directive;\n                var path = checksumDirective.File.ValueText;\n\n                var checksumText = checksumDirective.Bytes.ValueText;\n                var normalizedPath = documentsBuilder.NormalizeDebugDocumentPath(path, basePath: tree.FilePath);\n                var existingDoc = documentsBuilder.TryGetDebugDocumentForNormalizedPath(normalizedPath);\n\n                // duplicate checksum pragmas are valid as long as values match\n                // if we have seen this document already, check for matching values.\n                if (existingDoc != null)\n                {\n                    // pragma matches a file path on an actual tree.\n                    // Dev12 compiler just ignores the pragma in this case which means that\n                    // checksum of the actual tree always wins and no warning is given.\n                    // We will continue doing the same.\n                    if (existingDoc.IsComputedChecksum)\n                    {\n                        continue;\n                    }\n\n                    var sourceInfo = existingDoc.GetSourceInfo();\n                    if (ChecksumMatches(checksumText, sourceInfo.Checksum))\n                    {\n                        var guid = Guid.Parse(checksumDirective.Guid.ValueText);\n                        if (guid == sourceInfo.ChecksumAlgorithmId)\n                        {\n                            // all parts match, nothing to do\n                            continue;\n                        }\n                    }\n\n                    // did not match to an existing document\n                    // produce a warning and ignore the pragma\n                    diagnostics.Add(ErrorCode.WRN_ConflictingChecksum, new SourceLocation(checksumDirective), path);\n                }\n                else\n                {\n                    var newDocument = new Cci.DebugSourceDocument(\n                        normalizedPath,\n                        Cci.DebugSourceDocument.CorSymLanguageTypeCSharp,\n                        MakeChecksumBytes(checksumText),\n                        Guid.Parse(checksumDirective.Guid.ValueText));\n\n                    documentsBuilder.AddDebugDocument(newDocument);\n                }\n            } 811504"];
2291 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 811505"];
2292 [label="DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance(); 811506"];
2293 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 811507"];
2294 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 811508"];
2295 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 811509"];
2296 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 811510"];
2297 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 811511"];
2298 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 811512"];
2299 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 811513"];
2300 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 811514"];
2301 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken) 811515"];
2302 [label="param CompileMethodBodies(CSharpCompilation compilation) 811516"];
2303 [label="param CompileMethodBodies(PEModuleBuilder moduleBeingBuiltOpt) 811517"];
2304 [label="param CompileMethodBodies(bool emittingPdb) 811518"];
2305 [label="param CompileMethodBodies(bool emitTestCoverageData) 811519"];
2306 [label="param CompileMethodBodies(bool hasDeclarationErrors) 811520"];
2307 [label="param CompileMethodBodies(DiagnosticBag diagnostics) 811521"];
2308 [label="param CompileMethodBodies(Predicate<Symbol> filterOpt) 811522"];
2309 [label="param CompileMethodBodies(CancellationToken cancellationToken) 811523"];
2310 [label="Debug.Assert(compilation != null); 811524"];
2311 [label="Debug.Assert(compilation != null); 811525"];
2312 [label="Debug.Assert(diagnostics != null); 811526"];
2313 [label="Debug.Assert(diagnostics != null); 811527"];
2314 [label="compilation.PreviousSubmission 811528"];
2315 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 811529"];
2316 [label="ScriptCompilationInfo 811530"];
2317 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 811531"];
2318 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 811532"];
2319 [label="MethodSymbol entryPoint = null; 811533"];
2320 [label="if (filterOpt is null)\n            {\n                entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken);\n            } 811534"];
2321 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 811535"];
2322 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 811536"];
2323 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 811537"];
2324 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 811538"];
2325 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 811539"];
2326 [label="GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken) 811540"];
2327 [label="param GetEntryPoint(CSharpCompilation compilation) 811541"];
2328 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 811542"];
2329 [label="param GetEntryPoint(bool hasDeclarationErrors) 811543"];
2330 [label="param GetEntryPoint(DiagnosticBag diagnostics) 811544"];
2331 [label="param GetEntryPoint(CancellationToken cancellationToken) 811545"];
2332 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 811546"];
2333 [label="compilation.GetEntryPointAndDiagnostics(cancellationToken) 811547"];
2334 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 811548"];
2335 [label="param GetEntryPointAndDiagnostics(this) 811549"];
2336 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 811550"];
2337 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 811551"];
2338 [label="EntryPoint? entryPoint; 811552"];
2339 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 811553"];
2340 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 811554"];
2341 [label="GetBoundReferenceManager() 811555"];
2342 [label="GetBoundReferenceManager(); 811556"];
2343 [label="this.Options 811557"];
2344 [label="return _options; 811558"];
2345 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 811559"];
2346 [label="this.ScriptClass 811560"];
2347 [label="get { return _scriptClass.Value; } 811561"];
2348 [label="return _scriptClass.Value; 811562"];
2349 [label="_scriptClass.Value 811563"];
2350 [label="param BindScriptClass(this) 811564"];
2351 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 811565"];
2352 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 811566"];
2353 [label="get { return this.SourceModule.GetPublicSymbol(); } 811567"];
2354 [label="this.SourceModule 811568"];
2355 [label="get\n            {\n                return Assembly.Modules[0];\n            } 811569"];
2356 [label="GetBoundReferenceManager() 811570"];
2357 [label="param GetBoundReferenceManager(this) 811571"];
2358 [label="GetBoundReferenceManager(); 811572"];
2359 [label="return this.SourceModule.GetPublicSymbol(); 811573"];
2360 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 811574"];
2361 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 811575"];
2362 [label="if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    } 811576"];
2363 [label="null 811577"];
2364 [label="ImmutableArray<Diagnostic>.Empty 811578"];
2365 [label="new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 811579"];
2366 [label="param EntryPoint(MethodSymbol? methodSymbol) 811580"];
2367 [label="param EntryPoint(ImmutableArray<Diagnostic> diagnostics) 811581"];
2368 [label="param EntryPoint(this) 811582"];
2369 [label="MethodSymbol 811583"];
2370 [label="this.MethodSymbol 811584"];
2371 [label="this.Diagnostics 811585"];
2372 [label="None = new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 811586"];
2373 [label="entryPoint = EntryPoint.None; 811587"];
2374 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 811588"];
2375 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 811589"];
2376 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 811590"];
2377 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 811591"];
2378 [label="return _lazyEntryPoint; 811592"];
2379 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 811593"];
2380 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 811594"];
2381 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 811595"];
2382 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 811596"];
2383 [label="var entryPoint = entryPointAndDiagnostics.MethodSymbol; 811597"];
2384 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 811598"];
2385 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 811599"];
2386 [label="return null; 811600"];
2387 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 811601"];
2388 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 811602"];
2389 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 811603"];
2390 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 811604"];
2391 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 811605"];
2392 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 811606"];
2393 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 811607"];
2394 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 811608"];
2395 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 811609"];
2396 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 811610"];
2397 [label="new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken) 811611"];
2398 [label="param MethodCompiler(CSharpCompilation compilation) 811612"];
2399 [label="param MethodCompiler(PEModuleBuilder moduleBeingBuiltOpt) 811613"];
2400 [label="param MethodCompiler(bool emittingPdb) 811614"];
2401 [label="param MethodCompiler(bool emitTestCoverageData) 811615"];
2402 [label="param MethodCompiler(bool hasDeclarationErrors) 811616"];
2403 [label="param MethodCompiler(DiagnosticBag diagnostics) 811617"];
2404 [label="param MethodCompiler(Predicate<Symbol> filterOpt) 811618"];
2405 [label="param MethodCompiler(SynthesizedEntryPointSymbol.AsyncForwardEntryPoint entryPointOpt) 811619"];
2406 [label="param MethodCompiler(CancellationToken cancellationToken) 811620"];
2407 [label="param MethodCompiler(this) 811621"];
2408 [label="param MethodCompiler(this) 811622"];
2409 [label="_compilation 811623"];
2410 [label="_emittingPdb 811624"];
2411 [label="_emitTestCoverageData 811625"];
2412 [label="_diagnostics 811626"];
2413 [label="_hasDeclarationErrors 811627"];
2414 [label="_moduleBeingBuiltOpt 811628"];
2415 [label="_filterOpt 811629"];
2416 [label="_debugDocumentProvider 811630"];
2417 [label="_entryPointOpt 811631"];
2418 [label="_compilerTasks 811632"];
2419 [label="_globalHasErrors 811633"];
2420 [label="Debug.Assert(compilation != null); 811634"];
2421 [label="Debug.Assert(compilation != null); 811635"];
2422 [label="Debug.Assert(diagnostics != null); 811636"];
2423 [label="Debug.Assert(diagnostics != null); 811637"];
2424 [label="_compilation 811638"];
2425 [label="_moduleBeingBuiltOpt 811639"];
2426 [label="_emittingPdb 811640"];
2427 [label="_cancellationToken 811641"];
2428 [label="_diagnostics 811642"];
2429 [label="_filterOpt 811643"];
2430 [label="_entryPointOpt 811644"];
2431 [label="_hasDeclarationErrors 811645"];
2432 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 811646"];
2433 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 811647"];
2434 [label="param SetGlobalErrorIfTrue(bool arg) 811648"];
2435 [label="param SetGlobalErrorIfTrue(this) 811649"];
2436 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 811650"];
2437 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 811651"];
2438 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 811652"];
2439 [label="_debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile); 811653"];
2440 [label="_debugDocumentProvider 811654"];
2441 [label="_emitTestCoverageData 811655"];
2442 [label="compilation.Options 811656"];
2443 [label="get\n            {\n                return _options;\n            } 811657"];
2444 [label="return _options; 811658"];
2445 [label="if (compilation.Options.ConcurrentBuild)\n            {\n                methodCompiler._compilerTasks = new ConcurrentStack<Task>();\n            } 811659"];
2446 [label="methodCompiler._compilerTasks = new ConcurrentStack<Task>(); 811660"];
2447 [label="methodCompiler._compilerTasks 811661"];
2448 [label="compilation.SourceModule 811662"];
2449 [label="get\n            {\n                return Assembly.Modules[0];\n            } 811663"];
2450 [label="Assembly 811664"];
2451 [label="get\n            {\n                return SourceAssembly;\n            } 811665"];
2452 [label="SourceAssembly 811666"];
2453 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 811667"];
2454 [label="GetBoundReferenceManager() 811668"];
2455 [label="param GetBoundReferenceManager(this) 811669"];
2456 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 811670"];
2457 [label="return _referenceManager; 811671"];
2458 [label="GetBoundReferenceManager(); 811672"];
2459 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 811673"];
2460 [label="return Assembly.Modules[0]; 811674"];
2461 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 811675"];
2462 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace) 811676"];
2463 [label="param CompileNamespace(NamespaceSymbol symbol) 811677"];
2464 [label="param CompileNamespace(this) 811678"];
2465 [label="foreach (var s in symbol.GetMembersUnordered())\n            {\n                s.Accept(this, null);\n            } 811679"];
2466 [label="s.Accept(this, null); 811680"];
2467 [label="s.Accept(this, null); 811681"];
2468 [label="s.Accept(this, null); 811682"];
2469 [label="param VisitNamedType(NamedTypeSymbol symbol) 811683"];
2470 [label="param VisitNamedType(TypeCompilationState arg) 811684"];
2471 [label="param VisitNamedType(this) 811685"];
2472 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 811686"];
2473 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 811687"];
2474 [label="PassesFilter(_filterOpt, symbol) 811688"];
2475 [label="param PassesFilter(Predicate<Symbol> filterOpt) 811689"];
2476 [label="param PassesFilter(Symbol symbol) 811690"];
2477 [label="return (filterOpt == null) || filterOpt(symbol); 811691"];
2478 [label="return (filterOpt == null) || filterOpt(symbol); 811692"];
2479 [label="arg = null; 811693"];
2480 [label="_cancellationToken.ThrowIfCancellationRequested(); 811694"];
2481 [label="_compilation.Options 811695"];
2482 [label="get\n            {\n                return _options;\n            } 811696"];
2483 [label="if (_compilation.Options.ConcurrentBuild)\n            {\n                Task worker = CompileNamedTypeAsync(symbol);\n                _compilerTasks.Push(worker);\n            }\n            else\n            {\n                CompileNamedType(symbol);\n            } 811697"];
2484 [label="Task worker = CompileNamedTypeAsync(symbol); 811698"];
2485 [label="CompileNamedTypeAsync(symbol) 811699"];
2486 [label="param CompileNamedTypeAsync(NamedTypeSymbol symbol) 811700"];
2487 [label="param CompileNamedTypeAsync(this) 811701"];
2488 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 811702"];
2489 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 811703"];
2490 [label="Task worker = CompileNamedTypeAsync(symbol); 811704"];
2491 [label="_compilerTasks.Push(worker); 811705"];
2492 [label="return null; 811706"];
2493 [label="s.Accept(this, null); 811707"];
2494 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 811708"];
2495 [label="methodCompiler.WaitForWorkers() 811709"];
2496 [label="param WaitForWorkers(this) 811710"];
2497 [label="var tasks = _compilerTasks; 811711"];
2498 [label="if (tasks == null)\n            {\n                return;\n            } 811712"];
2499 [label="if (tasks == null)\n            {\n                return;\n            } 811713"];
2500 [label="Task curTask; 811714"];
2501 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 811715"];
2502 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 811716"];
2503 [label="curTask.GetAwaiter().GetResult(); 811717"];
2504 [label="methodCompiler.WaitForWorkers(); 811718"];
2505 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 811719"];
2506 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 811720"];
2507 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 811721"];
2508 [label="moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics) 811722"];
2509 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 811723"];
2510 [label="=> _additionalTypes 811724"];
2511 [label="_additionalTypes 811725"];
2512 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 811726"];
2513 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 811727"];
2514 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 811728"];
2515 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics) 811729"];
2516 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 811730"];
2517 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 811731"];
2518 [label="param CompileSynthesizedMethods(this) 811732"];
2519 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 811733"];
2520 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 811734"];
2521 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 811735"];
2522 [label="moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics) 811736"];
2523 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 811737"];
2524 [label="param GetEmbeddedTypes(this) 811738"];
2525 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 811739"];
2526 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 811740"];
2527 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 811741"];
2528 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 811742"];
2529 [label="param CreateEmbeddedAttributesIfNeeded(this) 811743"];
2530 [label="GetNeedsGeneratedAttributes() 811744"];
2531 [label="param GetNeedsGeneratedAttributes(this) 811745"];
2532 [label="_needsGeneratedAttributes_IsFrozen = true; 811746"];
2533 [label="_needsGeneratedAttributes_IsFrozen 811747"];
2534 [label="GetNeedsGeneratedAttributesInternal() 811748"];
2535 [label="param GetNeedsGeneratedAttributesInternal(this) 811749"];
2536 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 811750"];
2537 [label="return GetNeedsGeneratedAttributesInternal(); 811751"];
2538 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 811752"];
2539 [label="ShouldEmitNullablePublicOnlyAttribute() 811753"];
2540 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 811754"];
2541 [label="return Compilation.GetUsesNullableAttributes() && Compilation.EmitNullablePublicOnly; 811755"];
2542 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 811756"];
2543 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 811757"];
2544 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 811758"];
2545 [label="return; 811759"];
2546 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 811760"];
2547 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 811761"];
2548 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 811762"];
2549 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 811763"];
2550 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 811764"];
2551 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 811765"];
2552 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 811766"];
2553 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 811767"];
2554 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 811768"];
2555 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 811769"];
2556 [label="builder.AddIfNotNull(_lazyNullableAttribute); 811770"];
2557 [label="builder.AddIfNotNull(_lazyNullableAttribute); 811771"];
2558 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 811772"];
2559 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 811773"];
2560 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 811774"];
2561 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 811775"];
2562 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 811776"];
2563 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 811777"];
2564 [label="return builder.ToImmutableAndFree(); 811778"];
2565 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 811779"];
2566 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 811780"];
2567 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 811781"];
2568 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics) 811782"];
2569 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 811783"];
2570 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 811784"];
2571 [label="param CompileSynthesizedMethods(this) 811785"];
2572 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 811786"];
2573 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 811787"];
2574 [label="compilation.AnonymousTypeManager 811788"];
2575 [label="get\n            {\n                return _anonymousTypeManager;\n            } 811789"];
2576 [label="return _anonymousTypeManager; 811790"];
2577 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 811791"];
2578 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 811792"];
2579 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 811793"];
2580 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 811794"];
2581 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 811795"];
2582 [label="param GetPreviousAnonymousTypes(this) 811796"];
2583 [label="return ImmutableArray<AnonymousTypeKey>.Empty; 811797"];
2584 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 811798"];
2585 [label="param GetNextAnonymousTypeIndex(this) 811799"];
2586 [label="return 0; 811800"];
2587 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 811801"];
2588 [label="methodCompiler.WaitForWorkers() 811802"];
2589 [label="param WaitForWorkers(this) 811803"];
2590 [label="var tasks = _compilerTasks; 811804"];
2591 [label="if (tasks == null)\n            {\n                return;\n            } 811805"];
2592 [label="if (tasks == null)\n            {\n                return;\n            } 811806"];
2593 [label="Task curTask; 811807"];
2594 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 811808"];
2595 [label="methodCompiler.WaitForWorkers(); 811809"];
2596 [label="var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass; 811810"];
2597 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 811811"];
2598 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 811812"];
2599 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 811813"];
2600 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 811814"];
2601 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 811815"];
2602 [label="compilation.AdditionalCodegenWarnings 811816"];
2603 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 811817"];
2604 [label="return _additionalCodegenWarnings; 811818"];
2605 [label="diagnostics.AddRange(compilation.AdditionalCodegenWarnings); 811819"];
2606 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 811820"];
2607 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 811821"];
2608 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 811822"];
2609 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 811823"];
2610 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 811824"];
2611 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken) 811825"];
2612 [label="param WarnUnusedFields(CSharpCompilation compilation) 811826"];
2613 [label="param WarnUnusedFields(DiagnosticBag diagnostics) 811827"];
2614 [label="param WarnUnusedFields(CancellationToken cancellationToken) 811828"];
2615 [label="compilation.Assembly 811829"];
2616 [label="get\n            {\n                return SourceAssembly;\n            } 811830"];
2617 [label="SourceAssembly 811831"];
2618 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 811832"];
2619 [label="GetBoundReferenceManager() 811833"];
2620 [label="param GetBoundReferenceManager(this) 811834"];
2621 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 811835"];
2622 [label="return _referenceManager; 811836"];
2623 [label="GetBoundReferenceManager(); 811837"];
2624 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 811838"];
2625 [label="SourceAssemblySymbol assembly = (SourceAssemblySymbol)compilation.Assembly; 811839"];
2626 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 811840"];
2627 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 811841"];
2628 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 811842"];
2629 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 811843"];
2630 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 811844"];
2631 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 811845"];
2632 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 811846"];
2633 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 811847"];
2634 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 811848"];
2635 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 811849"];
2636 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 811850"];
2637 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 811851"];
2638 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 811852"];
2639 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 811853"];
2640 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag) 811854"];
2641 [label="param GenerateModuleInitializer(PEModuleBuilder moduleBeingBuilt) 811855"];
2642 [label="param GenerateModuleInitializer(DiagnosticBag methodBodyDiagnosticBag) 811856"];
2643 [label="param GenerateModuleInitializer(this) 811857"];
2644 [label="Debug.Assert(_declarationDiagnosticsFrozen); 811858"];
2645 [label="if (_moduleInitializerMethods is object)\n            {\n                var ilBuilder = new ILBuilder(moduleBeingBuilt, new LocalSlotManager(slotAllocator: null), OptimizationLevel.Release, areLocalsZeroed: false);\n\n                foreach (MethodSymbol method in _moduleInitializerMethods.OrderBy<MethodSymbol>(LexicalOrderSymbolComparer.Instance))\n                {\n                    ilBuilder.EmitOpCode(ILOpCode.Call, stackAdjustment: 0);\n\n                    ilBuilder.EmitToken(\n                        moduleBeingBuilt.Translate(method, methodBodyDiagnosticBag, needDeclaration: true),\n                        CSharpSyntaxTree.Dummy.GetRoot(),\n                        methodBodyDiagnosticBag);\n                }\n\n                ilBuilder.EmitRet(isVoid: true);\n                ilBuilder.Realize();\n                moduleBeingBuilt.RootModuleType.SetStaticConstructorBody(ilBuilder.RealizedIL);\n            } 811859"];
2646 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 811860"];
2647 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 811861"];
2648 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 811862"];
2649 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 811863"];
2650 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 811864"];
2651 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 811865"];
2652 [label="if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                } 811866"];
2653 [label="return true; 811867"];
2654 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 811868"];
2655 [label="param GenerateResourcesAndDocumentationComments(CommonPEModuleBuilder moduleBuilder) 811869"];
2656 [label="param GenerateResourcesAndDocumentationComments(Stream? xmlDocStream) 811870"];
2657 [label="param GenerateResourcesAndDocumentationComments(Stream? win32Resources) 811871"];
2658 [label="param GenerateResourcesAndDocumentationComments(string? outputNameOverride) 811872"];
2659 [label="param GenerateResourcesAndDocumentationComments(DiagnosticBag diagnostics) 811873"];
2660 [label="param GenerateResourcesAndDocumentationComments(CancellationToken cancellationToken) 811874"];
2661 [label="param GenerateResourcesAndDocumentationComments(this) 811875"];
2662 [label="DiagnosticBag? resourceDiagnostics = DiagnosticBag.GetInstance(); 811876"];
2663 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 811877"];
2664 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 811878"];
2665 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 811879"];
2666 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 811880"];
2667 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 811881"];
2668 [label="SourceAssembly 811882"];
2669 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 811883"];
2670 [label="GetBoundReferenceManager() 811884"];
2671 [label="param GetBoundReferenceManager(this) 811885"];
2672 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 811886"];
2673 [label="return _referenceManager; 811887"];
2674 [label="GetBoundReferenceManager(); 811888"];
2675 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 811889"];
2676 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 811890"];
2677 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 811891"];
2678 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 811892"];
2679 [label="AddedModulesResourceNames(resourceDiagnostics) 811893"];
2680 [label="param AddedModulesResourceNames(DiagnosticBag diagnostics) 811894"];
2681 [label="param AddedModulesResourceNames(this) 811895"];
2682 [label="SourceAssembly 811896"];
2683 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 811897"];
2684 [label="GetBoundReferenceManager() 811898"];
2685 [label="param GetBoundReferenceManager(this) 811899"];
2686 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 811900"];
2687 [label="return _referenceManager; 811901"];
2688 [label="GetBoundReferenceManager(); 811902"];
2689 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 811903"];
2690 [label="ImmutableArray<ModuleSymbol> modules = SourceAssembly.Modules; 811904"];
2691 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 811905"];
2692 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 811906"];
2693 [label="param AddedModulesResourceNames(this) 811907"];
2694 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 811908"];
2695 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 811909"];
2696 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 811910"];
2697 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 811911"];
2698 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 811912"];
2699 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 811913"];
2700 [label="cancellationToken.ThrowIfCancellationRequested(); 811914"];
2701 [label="DiagnosticBag? xmlDiagnostics = DiagnosticBag.GetInstance(); 811915"];
2702 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 811916"];
2703 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 811917"];
2704 [label="new[] { '\\r\\n', '\\r', '\\n' } 811918"];
2705 [label="'\\r\\n' 811919"];
2706 [label="'\\r' 811920"];
2707 [label="'\\n' 811921"];
2708 [label="new[] { '\\r\\n', '\\r', '\\n' } 811922"];
2709 [label="new[] { '\\r\\n', '\\r', '\\n' } 811923"];
2710 [label="new[] { '\\r\\n', '\\r', '\\n' } 811924"];
2711 [label="s_newLineSequences = new[] { '\\r\\n', '\\r', '\\n' } 811925"];
2712 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 811926"];
2713 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 811927"];
2714 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 811928"];
2715 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 811929"];
2716 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 811930"];
2717 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 811931"];
2718 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken) 811932"];
2719 [label="param WriteDocumentationCommentXml(CSharpCompilation compilation) 811933"];
2720 [label="param WriteDocumentationCommentXml(string? assemblyName) 811934"];
2721 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 811935"];
2722 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 811936"];
2723 [label="param WriteDocumentationCommentXml(CancellationToken cancellationToken) 811937"];
2724 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 811938"];
2725 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 811939"];
2726 [label="StreamWriter writer = null; 811940"];
2727 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 811941"];
2728 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 811942"];
2729 [label="compilation.SourceAssembly 811943"];
2730 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 811944"];
2731 [label="GetBoundReferenceManager() 811945"];
2732 [label="param GetBoundReferenceManager(this) 811946"];
2733 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 811947"];
2734 [label="return _referenceManager; 811948"];
2735 [label="GetBoundReferenceManager(); 811949"];
2736 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 811950"];
2737 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 811951"];
2738 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 811952"];
2739 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 811953"];
2740 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 811954"];
2741 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 811955"];
2742 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 811956"];
2743 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 811957"];
2744 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 811958"];
2745 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 811959"];
2746 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 811960"];
2747 [label="param DocumentationCommentCompiler(string assemblyName) 811961"];
2748 [label="param DocumentationCommentCompiler(CSharpCompilation compilation) 811962"];
2749 [label="param DocumentationCommentCompiler(TextWriter writer) 811963"];
2750 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 811964"];
2751 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 811965"];
2752 [label="param DocumentationCommentCompiler(bool processIncludes) 811966"];
2753 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 811967"];
2754 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 811968"];
2755 [label="param DocumentationCommentCompiler(CancellationToken cancellationToken) 811969"];
2756 [label="param DocumentationCommentCompiler(this) 811970"];
2757 [label="param DocumentationCommentCompiler(this) 811971"];
2758 [label="_assemblyName 811972"];
2759 [label="_compilation 811973"];
2760 [label="_writer 811974"];
2761 [label="_filterTree 811975"];
2762 [label="_filterSpanWithinTree 811976"];
2763 [label="_processIncludes 811977"];
2764 [label="_isForSingleSymbol 811978"];
2765 [label="_diagnostics 811979"];
2766 [label="_lazyComparer 811980"];
2767 [label="_includedFileCache 811981"];
2768 [label="_indentDepth 811982"];
2769 [label="_temporaryStringBuilders 811983"];
2770 [label="_assemblyName 811984"];
2771 [label="_compilation 811985"];
2772 [label="_writer 811986"];
2773 [label="_filterTree 811987"];
2774 [label="_filterSpanWithinTree 811988"];
2775 [label="_processIncludes 811989"];
2776 [label="_isForSingleSymbol 811990"];
2777 [label="_diagnostics 811991"];
2778 [label="_cancellationToken 811992"];
2779 [label="compilation.SourceAssembly 811993"];
2780 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 811994"];
2781 [label="GetBoundReferenceManager() 811995"];
2782 [label="param GetBoundReferenceManager(this) 811996"];
2783 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 811997"];
2784 [label="return _referenceManager; 811998"];
2785 [label="GetBoundReferenceManager(); 811999"];
2786 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 812000"];
2787 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 812001"];
2788 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 812002"];
2789 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 812003"];
2790 [label="param VisitNamespace(NamespaceSymbol symbol) 812004"];
2791 [label="param VisitNamespace(this) 812005"];
2792 [label="_cancellationToken.ThrowIfCancellationRequested(); 812006"];
2793 [label="if (symbol.IsGlobalNamespace)\n            {\n                Debug.Assert(_assemblyName != null);\n\n                WriteLine('<?xml version=\\'1.0\\'?>');\n                WriteLine('<doc>');\n                Indent();\n\n                if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                }\n\n                WriteLine('<members>');\n                Indent();\n            } 812007"];
2794 [label="Debug.Assert(_assemblyName != null); 812008"];
2795 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 812009"];
2796 [label="WriteLine('<?xml version=\\'1.0\\'?>') 812010"];
2797 [label="param WriteLine(string message) 812011"];
2798 [label="param WriteLine(this) 812012"];
2799 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812013"];
2800 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812014"];
2801 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812015"];
2802 [label="WriteLine('<doc>'); 812016"];
2803 [label="WriteLine('<doc>') 812017"];
2804 [label="param WriteLine(string message) 812018"];
2805 [label="param WriteLine(this) 812019"];
2806 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812020"];
2807 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812021"];
2808 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812022"];
2809 [label="Indent() 812023"];
2810 [label="param Indent(this) 812024"];
2811 [label="_indentDepth 812025"];
2812 [label="Indent(); 812026"];
2813 [label="_compilation.Options 812027"];
2814 [label="if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                } 812028"];
2815 [label="WriteLine('<assembly>'); 812029"];
2816 [label="WriteLine('<assembly>') 812030"];
2817 [label="param WriteLine(string message) 812031"];
2818 [label="param WriteLine(this) 812032"];
2819 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812033"];
2820 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812034"];
2821 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812035"];
2822 [label="Indent() 812036"];
2823 [label="param Indent(this) 812037"];
2824 [label="_indentDepth 812038"];
2825 [label="Indent(); 812039"];
2826 [label="WriteLine('<name>{0}</name>', _assemblyName); 812040"];
2827 [label="WriteLine('<name>{0}</name>', _assemblyName) 812041"];
2828 [label="WriteLine('<name>{0}</name>', _assemblyName) 812042"];
2829 [label="param WriteLine(string format) 812043"];
2830 [label="param WriteLine(params object[] args) 812044"];
2831 [label="param WriteLine(this) 812045"];
2832 [label="WriteLine(string.Format(format, args)); 812046"];
2833 [label="WriteLine(string.Format(format, args)); 812047"];
2834 [label="WriteLine(string.Format(format, args)); 812048"];
2835 [label="WriteLine(string.Format(format, args)) 812049"];
2836 [label="param WriteLine(string message) 812050"];
2837 [label="param WriteLine(this) 812051"];
2838 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812052"];
2839 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812053"];
2840 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812054"];
2841 [label="WriteLine(string.Format(format, args)); 812055"];
2842 [label="Unindent() 812056"];
2843 [label="param Unindent(this) 812057"];
2844 [label="_indentDepth 812058"];
2845 [label="Debug.Assert(_indentDepth >= 0); 812059"];
2846 [label="Debug.Assert(_indentDepth >= 0); 812060"];
2847 [label="Unindent(); 812061"];
2848 [label="WriteLine('</assembly>'); 812062"];
2849 [label="WriteLine('</assembly>') 812063"];
2850 [label="param WriteLine(string message) 812064"];
2851 [label="param WriteLine(this) 812065"];
2852 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812066"];
2853 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812067"];
2854 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812068"];
2855 [label="WriteLine('<members>'); 812069"];
2856 [label="WriteLine('<members>') 812070"];
2857 [label="param WriteLine(string message) 812071"];
2858 [label="param WriteLine(this) 812072"];
2859 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812073"];
2860 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812074"];
2861 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812075"];
2862 [label="Indent() 812076"];
2863 [label="param Indent(this) 812077"];
2864 [label="_indentDepth 812078"];
2865 [label="Indent(); 812079"];
2866 [label="Debug.Assert(!_isForSingleSymbol); 812080"];
2867 [label="foreach (var s in symbol.GetMembers())\n            {\n                _cancellationToken.ThrowIfCancellationRequested();\n                s.Accept(this);\n            } 812081"];
2868 [label="_cancellationToken.ThrowIfCancellationRequested(); 812082"];
2869 [label="s.Accept(this); 812083"];
2870 [label="s.Accept(this); 812084"];
2871 [label="s.Accept(this); 812085"];
2872 [label="param VisitNamedType(NamedTypeSymbol symbol) 812086"];
2873 [label="param VisitNamedType(this) 812087"];
2874 [label="_cancellationToken.ThrowIfCancellationRequested(); 812088"];
2875 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 812089"];
2876 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 812090"];
2877 [label="DefaultVisit(symbol); 812091"];
2878 [label="DefaultVisit(symbol) 812092"];
2879 [label="param DefaultVisit(Symbol symbol) 812093"];
2880 [label="param DefaultVisit(this) 812094"];
2881 [label="_cancellationToken.ThrowIfCancellationRequested(); 812095"];
2882 [label="if (ShouldSkip(symbol))\n            {\n                return;\n            } 812096"];
2883 [label="ShouldSkip(symbol) 812097"];
2884 [label="param ShouldSkip(Symbol symbol) 812098"];
2885 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 812099"];
2886 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 812100"];
2887 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 812101"];
2888 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 812102"];
2889 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 812103"];
2890 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 812104"];
2891 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 812105"];
2892 [label="DocumentationMode maxDocumentationMode; 812106"];
2893 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 812107"];
2894 [label="docCommentNodes 812108"];
2895 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 812109"];
2896 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 812110"];
2897 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 812111"];
2898 [label="TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes) 812112"];
2899 [label="param TryGetDocumentationCommentNodes(Symbol symbol) 812113"];
2900 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 812114"];
2901 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 812115"];
2902 [label="param TryGetDocumentationCommentNodes(this) 812116"];
2903 [label="maxDocumentationMode = DocumentationMode.None; 812117"];
2904 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 812118"];
2905 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 812119"];
2906 [label="foreach (SyntaxReference reference in symbol.DeclaringSyntaxReferences)\n            {\n                DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode;\n                maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode;\n\n                ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics);\n                foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                }\n            } 812120"];
2907 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 812121"];
2908 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 812122"];
2909 [label="currDocumentationMode > maxDocumentationMode 812123"];
2910 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 812124"];
2911 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 812125"];
2912 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 812126"];
2913 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 812127"];
2914 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 812128"];
2915 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 812129"];
2916 [label="return true; 812130"];
2917 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 812131"];
2918 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 812132"];
2919 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 812133"];
2920 [label="return; 812134"];
2921 [label="DefaultVisit(symbol); 812135"];
2922 [label="if (!_isForSingleSymbol)\n            {\n                foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                }\n            } 812136"];
2923 [label="foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                } 812137"];
2924 [label="_cancellationToken.ThrowIfCancellationRequested(); 812138"];
2925 [label="member.Accept(this); 812139"];
2926 [label="member.Accept(this); 812140"];
2927 [label="member.Accept(this); 812141"];
2928 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 812142"];
2929 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 812143"];
2930 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 812144"];
2931 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 812145"];
2932 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 812146"];
2933 [label="DocumentationMode maxDocumentationMode; 812147"];
2934 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 812148"];
2935 [label="docCommentNodes 812149"];
2936 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 812150"];
2937 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 812151"];
2938 [label="maxDocumentationMode = DocumentationMode.None; 812152"];
2939 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 812153"];
2940 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 812154"];
2941 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 812155"];
2942 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 812156"];
2943 [label="currDocumentationMode > maxDocumentationMode 812157"];
2944 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 812158"];
2945 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 812159"];
2946 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 812160"];
2947 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 812161"];
2948 [label="return true; 812162"];
2949 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 812163"];
2950 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 812164"];
2951 [label="return; 812165"];
2952 [label="return; 812166"];
2953 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 812167"];
2954 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 812168"];
2955 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 812169"];
2956 [label="DocumentationMode maxDocumentationMode; 812170"];
2957 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 812171"];
2958 [label="docCommentNodes 812172"];
2959 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 812173"];
2960 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 812174"];
2961 [label="maxDocumentationMode = DocumentationMode.None; 812175"];
2962 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 812176"];
2963 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 812177"];
2964 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 812178"];
2965 [label="currDocumentationMode > maxDocumentationMode 812179"];
2966 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 812180"];
2967 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 812181"];
2968 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 812182"];
2969 [label="return true; 812183"];
2970 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 812184"];
2971 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 812185"];
2972 [label="return; 812186"];
2973 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 812187"];
2974 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 812188"];
2975 [label="currDocumentationMode > maxDocumentationMode 812189"];
2976 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 812190"];
2977 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 812191"];
2978 [label="return; 812192"];
2979 [label="if (symbol.IsGlobalNamespace)\n            {\n                Unindent();\n                WriteLine('</members>');\n                Unindent();\n                WriteLine('</doc>');\n            } 812193"];
2980 [label="Unindent() 812194"];
2981 [label="Debug.Assert(_indentDepth >= 0); 812195"];
2982 [label="Unindent(); 812196"];
2983 [label="WriteLine('</members>'); 812197"];
2984 [label="WriteLine('</members>') 812198"];
2985 [label="param WriteLine(string message) 812199"];
2986 [label="param WriteLine(this) 812200"];
2987 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812201"];
2988 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812202"];
2989 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812203"];
2990 [label="Unindent() 812204"];
2991 [label="_indentDepth 812205"];
2992 [label="Debug.Assert(_indentDepth >= 0); 812206"];
2993 [label="Debug.Assert(_indentDepth >= 0); 812207"];
2994 [label="Unindent(); 812208"];
2995 [label="WriteLine('</doc>'); 812209"];
2996 [label="WriteLine('</doc>') 812210"];
2997 [label="param WriteLine(string message) 812211"];
2998 [label="param WriteLine(this) 812212"];
2999 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812213"];
3000 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812214"];
3001 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 812215"];
3002 [label="Debug.Assert(compiler._indentDepth == 0); 812216"];
3003 [label="Debug.Assert(compiler._indentDepth == 0); 812217"];
3004 [label="writer?.Flush(); 812218"];
3005 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 812219"];
3006 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 812220"];
3007 [label="compilation.SyntaxTrees 812221"];
3008 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 812222"];
3009 [label="_syntaxAndDeclarations.GetLazyState() 812223"];
3010 [label="param GetLazyState(this) 812224"];
3011 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 812225"];
3012 [label="foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                } 812226"];
3013 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 812227"];
3014 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 812228"];
3015 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 812229"];
3016 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken) 812230"];
3017 [label="param ReportUnprocessed(SyntaxTree tree) 812231"];
3018 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 812232"];
3019 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 812233"];
3020 [label="param ReportUnprocessed(CancellationToken cancellationToken) 812234"];
3021 [label="if (tree.ReportDocumentationCommentDiagnostics())\n            {\n                UnprocessedDocumentationCommentFinder finder = new UnprocessedDocumentationCommentFinder(diagnostics, filterSpanWithinTree, cancellationToken);\n                finder.Visit(tree.GetRoot(cancellationToken));\n            } 812235"];
3022 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 812236"];
3023 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 812237"];
3024 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 812238"];
3025 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 812239"];
3026 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 812240"];
3027 [label="param ReportUnusedImports(SyntaxTree? filterTree) 812241"];
3028 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 812242"];
3029 [label="param ReportUnusedImports(CancellationToken cancellationToken) 812243"];
3030 [label="param ReportUnusedImports(this) 812244"];
3031 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 812245"];
3032 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 812246"];
3033 [label="CompleteTrees(filterTree); 812247"];
3034 [label="CompleteTrees(filterTree) 812248"];
3035 [label="param CompleteTrees(SyntaxTree? filterTree) 812249"];
3036 [label="param CompleteTrees(this) 812250"];
3037 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 812251"];
3038 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 812252"];
3039 [label="CompleteTrees(filterTree); 812253"];
3040 [label="get { return this.SourceModule.GetPublicSymbol(); } 812254"];
3041 [label="this.SourceModule 812255"];
3042 [label="get\n            {\n                return Assembly.Modules[0];\n            } 812256"];
3043 [label="Assembly 812257"];
3044 [label="get\n            {\n                return SourceAssembly;\n            } 812258"];
3045 [label="SourceAssembly 812259"];
3046 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 812260"];
3047 [label="GetBoundReferenceManager() 812261"];
3048 [label="param GetBoundReferenceManager(this) 812262"];
3049 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 812263"];
3050 [label="return _referenceManager; 812264"];
3051 [label="GetBoundReferenceManager(); 812265"];
3052 [label="return Assembly.Modules[0]; 812266"];
3053 [label="get { return SourceAssembly.IsDelaySigned; } 812267"];
3054 [label="SourceAssembly 812268"];
3055 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 812269"];
3056 [label="GetBoundReferenceManager() 812270"];
3057 [label="param GetBoundReferenceManager(this) 812271"];
3058 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 812272"];
3059 [label="return _referenceManager; 812273"];
3060 [label="GetBoundReferenceManager(); 812274"];
3061 [label="SourceAssembly.IsDelaySigned 812275"];
3062 [label="get { return SourceAssembly.StrongNameKeys; } 812276"];
3063 [label="SourceAssembly 812277"];
3064 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 812278"];
3065 [label="GetBoundReferenceManager() 812279"];
3066 [label="param GetBoundReferenceManager(this) 812280"];
3067 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 812281"];
3068 [label="return _referenceManager; 812282"];
3069 [label="GetBoundReferenceManager(); 812283"];
3070 [label="param GetCorLibraryReferenceToEmit(CodeAnalysis.Emit.EmitContext context) 812284"];
3071 [label="param GetCorLibraryReferenceToEmit(this) 812285"];
3072 [label="CorLibrary 812286"];
3073 [label="get { return SourceModule.ContainingSourceAssembly.CorLibrary; } 812287"];
3074 [label="return SourceModule.ContainingSourceAssembly.CorLibrary; 812288"];
3075 [label="AssemblySymbol corLibrary = CorLibrary; 812289"];
3076 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 812290"];
3077 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 812291"];
3078 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 812292"];
3079 [label="return Translate(corLibrary, context.Diagnostics); 812293"];
3080 [label="return Translate(corLibrary, context.Diagnostics); 812294"];
3081 [label="Translate(corLibrary, context.Diagnostics) 812295"];
3082 [label="param Translate(AssemblySymbol assembly) 812296"];
3083 [label="param Translate(DiagnosticBag diagnostics) 812297"];
3084 [label="param Translate(this) 812298"];
3085 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 812299"];
3086 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 812300"];
3087 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 812301"];
3088 [label="Cci.IModuleReference reference; 812302"];
3089 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 812303"];
3090 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 812304"];
3091 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 812305"];
3092 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 812306"];
3093 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 812307"];
3094 [label="new AssemblyReference(assembly) 812308"];
3095 [label="param AssemblyReference(AssemblySymbol assemblySymbol) 812309"];
3096 [label="param AssemblyReference(this) 812310"];
3097 [label="_targetAssembly 812311"];
3098 [label="Debug.Assert((object)assemblySymbol != null); 812312"];
3099 [label="Debug.Assert((object)assemblySymbol != null); 812313"];
3100 [label="_targetAssembly 812314"];
3101 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 812315"];
3102 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 812316"];
3103 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 812317"];
3104 [label="if (cachedAsmRef == asmRef)\n            {\n                ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics);\n            } 812318"];
3105 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 812319"];
3106 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 812320"];
3107 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 812321"];
3108 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics) 812322"];
3109 [label="param ValidateReferencedAssembly(AssemblySymbol assembly) 812323"];
3110 [label="param ValidateReferencedAssembly(AssemblyReference asmRef) 812324"];
3111 [label="param ValidateReferencedAssembly(DiagnosticBag diagnostics) 812325"];
3112 [label="param ValidateReferencedAssembly(this) 812326"];
3113 [label="AssemblyIdentity asmIdentity = SourceModule.ContainingAssembly.Identity; 812327"];
3114 [label="asmRef.Identity 812328"];
3115 [label="=> _targetAssembly.Identity 812329"];
3116 [label="_targetAssembly.Identity 812330"];
3117 [label="AssemblyIdentity refIdentity = asmRef.Identity; 812331"];
3118 [label="if (asmIdentity.IsStrongName && !refIdentity.IsStrongName &&\n                asmRef.Identity.ContentType != AssemblyContentType.WindowsRuntime)\n            {\n                // Dev12 reported error, we have changed it to a warning to allow referencing libraries \n                // built for platforms that don't support strong names.\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName, assembly), NoLocation.Singleton);\n            } 812332"];
3119 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 812333"];
3120 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 812334"];
3121 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 812335"];
3122 [label="var refMachine = assembly.Machine; 812336"];
3123 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 812337"];
3124 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 812338"];
3125 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 812339"];
3126 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 812340"];
3127 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 812341"];
3128 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 812342"];
3129 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 812343"];
3130 [label="return cachedAsmRef; 812344"];
3131 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 812345"];
3132 [label="=> _targetAssembly.Identity 812346"];
3133 [label="_targetAssembly.Identity 812347"];
3134 [label="param GetAssemblyReferencesFromAddedModules(DiagnosticBag diagnostics) 812348"];
3135 [label="param GetAssemblyReferencesFromAddedModules(this) 812349"];
3136 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 812350"];
3137 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 812351"];
3138 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 812352"];
3139 [label="param GetAssemblyReferencesFromAddedModules(this) 812353"];
3140 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 812354"];
3141 [label="param GetFiles(EmitContext context) 812355"];
3142 [label="param GetFiles(this) 812356"];
3143 [label="if (!context.IsRefAssembly)\n            {\n                return getFiles(ref _lazyFiles, context, _sourceAssembly);\n            } 812357"];
3144 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 812358"];
3145 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 812359"];
3146 [label="getFiles(ref _lazyFiles, context, _sourceAssembly) 812360"];
3147 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 812361"];
3148 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 812362"];
3149 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 812363"];
3150 [label="if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                } 812364"];
3151 [label="var builder = ArrayBuilder<Cci.IFileReference>.GetInstance(); 812365"];
3152 [label="var modules = sourceAssSymbol.Modules; 812366"];
3153 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 812367"];
3154 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 812368"];
3155 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 812369"];
3156 [label="foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            } 812370"];
3157 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 812371"];
3158 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 812372"];
3159 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 812373"];
3160 [label="builder.Free(); 812374"];
3161 [label="return lazyFiles; 812375"];
3162 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 812376"];
3163 [label="=> _embeddedTypesManagerOpt 812377"];
3164 [label="_embeddedTypesManagerOpt 812378"];
3165 [label="param GetAnonymousTypeDefinitions(EmitContext context) 812379"];
3166 [label="param GetAnonymousTypeDefinitions(this) 812380"];
3167 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 812381"];
3168 [label="Compilation.AnonymousTypeManager 812382"];
3169 [label="get\n            {\n                return _anonymousTypeManager;\n            } 812383"];
3170 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 812384"];
3171 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 812385"];
3172 [label="param GetAdditionalTopLevelTypeDefinitions(EmitContext context) 812386"];
3173 [label="param GetAdditionalTopLevelTypeDefinitions(this) 812387"];
3174 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 812388"];
3175 [label="GetAdditionalTopLevelTypes(context.Diagnostics) 812389"];
3176 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 812390"];
3177 [label="=> _additionalTypes 812391"];
3178 [label="_additionalTypes 812392"];
3179 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 812393"];
3180 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 812394"];
3181 [label="param GetEmbeddedTypeDefinitions(EmitContext context) 812395"];
3182 [label="param GetEmbeddedTypeDefinitions(this) 812396"];
3183 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 812397"];
3184 [label="GetEmbeddedTypes(context.Diagnostics) 812398"];
3185 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 812399"];
3186 [label="param GetEmbeddedTypes(this) 812400"];
3187 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 812401"];
3188 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 812402"];
3189 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 812403"];
3190 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 812404"];
3191 [label="param CreateEmbeddedAttributesIfNeeded(this) 812405"];
3192 [label="GetNeedsGeneratedAttributes() 812406"];
3193 [label="param GetNeedsGeneratedAttributes(this) 812407"];
3194 [label="_needsGeneratedAttributes_IsFrozen = true; 812408"];
3195 [label="_needsGeneratedAttributes_IsFrozen 812409"];
3196 [label="GetNeedsGeneratedAttributesInternal() 812410"];
3197 [label="param GetNeedsGeneratedAttributesInternal(this) 812411"];
3198 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 812412"];
3199 [label="return GetNeedsGeneratedAttributesInternal(); 812413"];
3200 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 812414"];
3201 [label="ShouldEmitNullablePublicOnlyAttribute() 812415"];
3202 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 812416"];
3203 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 812417"];
3204 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 812418"];
3205 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 812419"];
3206 [label="return; 812420"];
3207 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 812421"];
3208 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 812422"];
3209 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 812423"];
3210 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 812424"];
3211 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 812425"];
3212 [label="builder.AddIfNotNull(_lazyNullableAttribute); 812426"];
3213 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 812427"];
3214 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 812428"];
3215 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 812429"];
3216 [label="return builder.ToImmutableAndFree(); 812430"];
3217 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 812431"];
3218 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 812432"];
3219 [label="param GetTopLevelSourceTypeDefinitions(EmitContext context) 812433"];
3220 [label="param GetTopLevelSourceTypeDefinitions(this) 812434"];
3221 [label="var namespacesToProcess = new Stack<NamespaceSymbol>(); 812435"];
3222 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 812436"];
3223 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 812437"];
3224 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 812438"];
3225 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 812439"];
3226 [label="var ns = namespacesToProcess.Pop(); 812440"];
3227 [label="foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                } 812441"];
3228 [label="if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    } 812442"];
3229 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 812443"];
3230 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 812444"];
3231 [label="param ShouldEmitNullableAttributes(Symbol symbol) 812445"];
3232 [label="param ShouldEmitNullableAttributes(this) 812446"];
3233 [label="RoslynDebug.Assert(symbol is object); 812447"];
3234 [label="Debug.Assert(symbol.IsDefinition); 812448"];
3235 [label="SourceModule 812449"];
3236 [label="get\n            {\n                return Assembly.Modules[0];\n            } 812450"];
3237 [label="Assembly 812451"];
3238 [label="get\n            {\n                return SourceAssembly;\n            } 812452"];
3239 [label="SourceAssembly 812453"];
3240 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 812454"];
3241 [label="GetBoundReferenceManager() 812455"];
3242 [label="param GetBoundReferenceManager(this) 812456"];
3243 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 812457"];
3244 [label="return _referenceManager; 812458"];
3245 [label="GetBoundReferenceManager(); 812459"];
3246 [label="return Assembly.Modules[0]; 812460"];
3247 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 812461"];
3248 [label="EmitNullablePublicOnly 812462"];
3249 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 812463"];
3250 [label="param SynthesizeNullableAttributeIfNecessary(Symbol symbol) 812464"];
3251 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 812465"];
3252 [label="param SynthesizeNullableAttributeIfNecessary(TypeWithAnnotations type) 812466"];
3253 [label="param SynthesizeNullableAttributeIfNecessary(this) 812467"];
3254 [label="Compilation.SourceModule 812468"];
3255 [label="get\n            {\n                return Assembly.Modules[0];\n            } 812469"];
3256 [label="Assembly 812470"];
3257 [label="SourceAssembly 812471"];
3258 [label="GetBoundReferenceManager() 812472"];
3259 [label="param GetBoundReferenceManager(this) 812473"];
3260 [label="GetBoundReferenceManager(); 812474"];
3261 [label="return Assembly.Modules[0]; 812475"];
3262 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 812476"];
3263 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 812477"];
3264 [label="var flagsBuilder = ArrayBuilder<byte>.GetInstance(); 812478"];
3265 [label="type.AddNullableTransforms(flagsBuilder); 812479"];
3266 [label="type.AddNullableTransforms(flagsBuilder); 812480"];
3267 [label="SynthesizedAttributeData attribute; 812481"];
3268 [label="if (!flagsBuilder.Any())\n            {\n                attribute = null;\n            }\n            else\n            {\n                Debug.Assert(flagsBuilder.All(f => f <= 2));\n                byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder);\n                if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                }\n            } 812482"];
3269 [label="attribute = null; 812483"];
3270 [label="flagsBuilder.Free(); 812484"];
3271 [label="return attribute; 812485"];
3272 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 812486"];
3273 [label="Debug.Assert(symbol.IsDefinition); 812487"];
3274 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 812488"];
3275 [label="return _referenceManager; 812489"];
3276 [label="GetBoundReferenceManager(); 812490"];
3277 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 812491"];
3278 [label="param GetBoundReferenceManager(this) 812492"];
3279 [label="GetBoundReferenceManager(); 812493"];
3280 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 812494"];
3281 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 812495"];
3282 [label="param Compare(Symbol x) 812496"];
3283 [label="param Compare(Symbol y) 812497"];
3284 [label="param Compare(this) 812498"];
3285 [label="int comparison; 812499"];
3286 [label="if (x == y)\n            {\n                return 0;\n            } 812500"];
3287 [label="var xSortKey = x.GetLexicalSortKey(); 812501"];
3288 [label="var ySortKey = y.GetLexicalSortKey(); 812502"];
3289 [label="Debug.Assert((object)x.DeclaringCompilation == y.DeclaringCompilation); 812503"];
3290 [label="comparison = LexicalSortKey.Compare(xSortKey, ySortKey); 812504"];
3291 [label="comparison = LexicalSortKey.Compare(xSortKey, ySortKey); 812505"];
3292 [label="if (comparison != 0)\n            {\n                return comparison;\n            } 812506"];
3293 [label="if (comparison != 0)\n            {\n                return comparison;\n            } 812507"];
3294 [label="return comparison; 812508"];
3295 [label="param GetSynthesizedNestedTypes(NamedTypeSymbol container) 812509"];
3296 [label="param GetSynthesizedNestedTypes(this) 812510"];
3297 [label="return null; 812511"];
3298 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 812512"];
3299 [label="Debug.Assert(symbol.IsDefinition); 812513"];
3300 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 812514"];
3301 [label="return _referenceManager; 812515"];
3302 [label="GetBoundReferenceManager(); 812516"];
3303 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 812517"];
3304 [label="param GetBoundReferenceManager(this) 812518"];
3305 [label="GetBoundReferenceManager(); 812519"];
3306 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 812520"];
3307 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 812521"];
3308 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 812522"];
3309 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 812523"];
3310 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 812524"];
3311 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 812525"];
3312 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 812526"];
3313 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 812527"];
3314 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 812528"];
3315 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 812529"];
3316 [label="SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()) 812530"];
3317 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 812531"];
3318 [label="param SynthesizeNullableAttributeIfNecessary(byte nullableValue) 812532"];
3319 [label="param SynthesizeNullableAttributeIfNecessary(this) 812533"];
3320 [label="if (nullableValue == nullableContextValue ||\n                (nullableContextValue == null && nullableValue == 0))\n            {\n                return null;\n            } 812534"];
3321 [label="return null; 812535"];
3322 [label="Debug.Assert(symbol.IsDefinition); 812536"];
3323 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 812537"];
3324 [label="return _referenceManager; 812538"];
3325 [label="GetBoundReferenceManager(); 812539"];
3326 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 812540"];
3327 [label="param GetBoundReferenceManager(this) 812541"];
3328 [label="GetBoundReferenceManager(); 812542"];
3329 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 812543"];
3330 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 812544"];
3331 [label="param SynthesizeNullableAttributeIfNecessary(this) 812545"];
3332 [label="param GetSourceAssemblyAttributes(bool isRefAssembly) 812546"];
3333 [label="param GetSourceAssemblyAttributes(this) 812547"];
3334 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 812548"];
3335 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 812549"];
3336 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 812550"];
3337 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 812551"];
3338 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 812552"];
3339 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 812553"];
3340 [label="NamedTypeSymbol result; 812554"];
3341 [label="GetBoundReferenceManager() 812555"];
3342 [label="GetBoundReferenceManager(); 812556"];
3343 [label="Debug.Assert(result.SpecialType == specialType); 812557"];
3344 [label="SourceAssembly 812558"];
3345 [label="GetBoundReferenceManager() 812559"];
3346 [label="param GetBoundReferenceManager(this) 812560"];
3347 [label="GetBoundReferenceManager(); 812561"];
3348 [label="GetBoundReferenceManager() 812562"];
3349 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 812563"];
3350 [label="param Translate(MethodSymbol methodSymbol) 812564"];
3351 [label="param Translate(SyntaxNode syntaxNodeOpt) 812565"];
3352 [label="param Translate(DiagnosticBag diagnostics) 812566"];
3353 [label="param Translate(BoundArgListOperator optArgList = null) 812567"];
3354 [label="param Translate(bool needDeclaration = false) 812568"];
3355 [label="param Translate(this) 812569"];
3356 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 812570"];
3357 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 812571"];
3358 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 812572"];
3359 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 812573"];
3360 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 812574"];
3361 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 812575"];
3362 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 812576"];
3363 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 812577"];
3364 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 812578"];
3365 [label="param Translate(MethodSymbol methodSymbol) 812579"];
3366 [label="param Translate(SyntaxNode syntaxNodeOpt) 812580"];
3367 [label="param Translate(DiagnosticBag diagnostics) 812581"];
3368 [label="param Translate(bool needDeclaration) 812582"];
3369 [label="param Translate(this) 812583"];
3370 [label="object reference; 812584"];
3371 [label="Cci.IMethodReference methodRef; 812585"];
3372 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 812586"];
3373 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 812587"];
3374 [label="Debug.Assert(methodSymbol.IsDefinitionOrDistinct()); 812588"];
3375 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 812589"];
3376 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 812590"];
3377 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 812591"];
3378 [label="bool typeIsGeneric = IsGenericType(container); 812592"];
3379 [label="IsGenericType(container) 812593"];
3380 [label="param IsGenericType(NamedTypeSymbol toCheck) 812594"];
3381 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812595"];
3382 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812596"];
3383 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 812597"];
3384 [label="toCheck = toCheck.ContainingType; 812598"];
3385 [label="return false; 812599"];
3386 [label="bool typeIsGeneric = IsGenericType(container); 812600"];
3387 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 812601"];
3388 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 812602"];
3389 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 812603"];
3390 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 812604"];
3391 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 812605"];
3392 [label="return methodSymbol.GetCciAdapter(); 812606"];
3393 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 812607"];
3394 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 812608"];
3395 [label="return unexpandedMethodRef; 812609"];
3396 [label="param Translate(TypeSymbol typeSymbol) 812610"];
3397 [label="param Translate(SyntaxNode syntaxNodeOpt) 812611"];
3398 [label="param Translate(DiagnosticBag diagnostics) 812612"];
3399 [label="param Translate(this) 812613"];
3400 [label="Debug.Assert(diagnostics != null); 812614"];
3401 [label="Debug.Assert(diagnostics != null); 812615"];
3402 [label="switch (typeSymbol.Kind)\n            {\n                case SymbolKind.DynamicType:\n                    return Translate((DynamicTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.ArrayType:\n                    return Translate((ArrayTypeSymbol)typeSymbol);\n\n                case SymbolKind.ErrorType:\n                case SymbolKind.NamedType:\n                    return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.PointerType:\n                    return Translate((PointerTypeSymbol)typeSymbol);\n\n                case SymbolKind.TypeParameter:\n                    return Translate((TypeParameterSymbol)typeSymbol);\n\n                case SymbolKind.FunctionPointerType:\n                    return Translate((FunctionPointerTypeSymbol)typeSymbol);\n            } 812616"];
3403 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 812617"];
3404 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 812618"];
3405 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 812619"];
3406 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 812620"];
3407 [label="Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics) 812621"];
3408 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 812622"];
3409 [label="param Translate(SyntaxNode syntaxNodeOpt) 812623"];
3410 [label="param Translate(DiagnosticBag diagnostics) 812624"];
3411 [label="param Translate(bool fromImplements = false) 812625"];
3412 [label="param Translate(bool needDeclaration = false) 812626"];
3413 [label="param Translate(this) 812627"];
3414 [label="Debug.Assert(namedTypeSymbol.IsDefinitionOrDistinct()); 812628"];
3415 [label="Debug.Assert(diagnostics != null); 812629"];
3416 [label="Debug.Assert(diagnostics != null); 812630"];
3417 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 812631"];
3418 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 812632"];
3419 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 812633"];
3420 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 812634"];
3421 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 812635"];
3422 [label="object reference; 812636"];
3423 [label="Cci.INamedTypeReference typeRef; 812637"];
3424 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 812638"];
3425 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812639"];
3426 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812640"];
3427 [label="IsGenericType(container) 812641"];
3428 [label="param IsGenericType(NamedTypeSymbol toCheck) 812642"];
3429 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812643"];
3430 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812644"];
3431 [label="return false; 812645"];
3432 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812646"];
3433 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812647"];
3434 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 812648"];
3435 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 812649"];
3436 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 812650"];
3437 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 812651"];
3438 [label="param Translate(SyntaxNode syntaxNodeOpt) 812652"];
3439 [label="param Translate(DiagnosticBag diagnostics) 812653"];
3440 [label="param Translate(bool fromImplements = false) 812654"];
3441 [label="param Translate(bool needDeclaration = false) 812655"];
3442 [label="param Translate(this) 812656"];
3443 [label="Debug.Assert(diagnostics != null); 812657"];
3444 [label="Debug.Assert(diagnostics != null); 812658"];
3445 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 812659"];
3446 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 812660"];
3447 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 812661"];
3448 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 812662"];
3449 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 812663"];
3450 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 812664"];
3451 [label="param Translate(ModuleSymbol module) 812665"];
3452 [label="param Translate(DiagnosticBag diagnostics) 812666"];
3453 [label="param Translate(this) 812667"];
3454 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 812668"];
3455 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 812669"];
3456 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 812670"];
3457 [label="if ((object)module == null)\n            {\n                return null;\n            } 812671"];
3458 [label="if ((object)module == null)\n            {\n                return null;\n            } 812672"];
3459 [label="Cci.IModuleReference moduleRef; 812673"];
3460 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 812674"];
3461 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 812675"];
3462 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 812676"];
3463 [label="return moduleRef; 812677"];
3464 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 812678"];
3465 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 812679"];
3466 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 812680"];
3467 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 812681"];
3468 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 812682"];
3469 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 812683"];
3470 [label="param Translate(ImmutableArray<ParameterSymbol> @params) 812684"];
3471 [label="param Translate(this) 812685"];
3472 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 812686"];
3473 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 812687"];
3474 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 812688"];
3475 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 812689"];
3476 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 812690"];
3477 [label="MustBeWrapped(@params.First()) 812691"];
3478 [label="param MustBeWrapped(ParameterSymbol param) 812692"];
3479 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 812693"];
3480 [label="var container = param.ContainingSymbol; 812694"];
3481 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 812695"];
3482 [label="ContainerIsGeneric(container) 812696"];
3483 [label="param ContainerIsGeneric(Symbol container) 812697"];
3484 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 812698"];
3485 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 812699"];
3486 [label="IsGenericType(container.ContainingType) 812700"];
3487 [label="param IsGenericType(NamedTypeSymbol toCheck) 812701"];
3488 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812702"];
3489 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812703"];
3490 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 812704"];
3491 [label="toCheck = toCheck.ContainingType; 812705"];
3492 [label="return false; 812706"];
3493 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 812707"];
3494 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 812708"];
3495 [label="return false; 812709"];
3496 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 812710"];
3497 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 812711"];
3498 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 812712"];
3499 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 812713"];
3500 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 812714"];
3501 [label="param MustBeWrapped(ParameterSymbol param) 812715"];
3502 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 812716"];
3503 [label="var container = param.ContainingSymbol; 812717"];
3504 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 812718"];
3505 [label="ContainerIsGeneric(container) 812719"];
3506 [label="param ContainerIsGeneric(Symbol container) 812720"];
3507 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 812721"];
3508 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 812722"];
3509 [label="IsGenericType(container.ContainingType) 812723"];
3510 [label="param IsGenericType(NamedTypeSymbol toCheck) 812724"];
3511 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812725"];
3512 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812726"];
3513 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 812727"];
3514 [label="toCheck = toCheck.ContainingType; 812728"];
3515 [label="return false; 812729"];
3516 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 812730"];
3517 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 812731"];
3518 [label="return false; 812732"];
3519 [label="if (!mustBeTranslated)\n            {\n#if DEBUG\n                return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter());\n#else\n                return StaticCast<Cci.IParameterTypeInformation>.From(@params);\n#endif\n            } 812733"];
3520 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 812734"];
3521 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 812735"];
3522 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 812736"];
3523 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 812737"];
3524 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 812738"];
3525 [label="param Translate(SyntaxNode syntaxNodeOpt) 812739"];
3526 [label="param Translate(DiagnosticBag diagnostics) 812740"];
3527 [label="param Translate(bool fromImplements = false) 812741"];
3528 [label="param Translate(bool needDeclaration = false) 812742"];
3529 [label="Debug.Assert(diagnostics != null); 812743"];
3530 [label="Debug.Assert(diagnostics != null); 812744"];
3531 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 812745"];
3532 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 812746"];
3533 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 812747"];
3534 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 812748"];
3535 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 812749"];
3536 [label="object reference; 812750"];
3537 [label="Cci.INamedTypeReference typeRef; 812751"];
3538 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 812752"];
3539 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812753"];
3540 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812754"];
3541 [label="IsGenericType(container) 812755"];
3542 [label="param IsGenericType(NamedTypeSymbol toCheck) 812756"];
3543 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812757"];
3544 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812758"];
3545 [label="return false; 812759"];
3546 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812760"];
3547 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812761"];
3548 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 812762"];
3549 [label="param IsPlatformType(Cci.ITypeReference typeRef) 812763"];
3550 [label="param IsPlatformType(Cci.PlatformType platformType) 812764"];
3551 [label="param IsPlatformType(this) 812765"];
3552 [label="var namedType = typeRef.GetInternalSymbol() as NamedTypeSymbol; 812766"];
3553 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 812767"];
3554 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 812768"];
3555 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 812769"];
3556 [label="return namedType.SpecialType == (SpecialType)platformType; 812770"];
3557 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 812771"];
3558 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 812772"];
3559 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 812773"];
3560 [label="param Translate(SyntaxNode syntaxNodeOpt) 812774"];
3561 [label="param Translate(DiagnosticBag diagnostics) 812775"];
3562 [label="param Translate(bool fromImplements = false) 812776"];
3563 [label="param Translate(bool needDeclaration = false) 812777"];
3564 [label="Debug.Assert(diagnostics != null); 812778"];
3565 [label="Debug.Assert(diagnostics != null); 812779"];
3566 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 812780"];
3567 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 812781"];
3568 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 812782"];
3569 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 812783"];
3570 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 812784"];
3571 [label="object reference; 812785"];
3572 [label="Cci.INamedTypeReference typeRef; 812786"];
3573 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 812787"];
3574 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812788"];
3575 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812789"];
3576 [label="IsGenericType(container) 812790"];
3577 [label="param IsGenericType(NamedTypeSymbol toCheck) 812791"];
3578 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812792"];
3579 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812793"];
3580 [label="return false; 812794"];
3581 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812795"];
3582 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812796"];
3583 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 812797"];
3584 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 812798"];
3585 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 812799"];
3586 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 812800"];
3587 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 812801"];
3588 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 812802"];
3589 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 812803"];
3590 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 812804"];
3591 [label="param MustBeWrapped(ParameterSymbol param) 812805"];
3592 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 812806"];
3593 [label="var container = param.ContainingSymbol; 812807"];
3594 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 812808"];
3595 [label="ContainerIsGeneric(container) 812809"];
3596 [label="param ContainerIsGeneric(Symbol container) 812810"];
3597 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 812811"];
3598 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 812812"];
3599 [label="IsGenericType(container.ContainingType) 812813"];
3600 [label="param IsGenericType(NamedTypeSymbol toCheck) 812814"];
3601 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812815"];
3602 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812816"];
3603 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 812817"];
3604 [label="toCheck = toCheck.ContainingType; 812818"];
3605 [label="return false; 812819"];
3606 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 812820"];
3607 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 812821"];
3608 [label="param MustBeWrapped(ParameterSymbol param) 812822"];
3609 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 812823"];
3610 [label="var container = param.ContainingSymbol; 812824"];
3611 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 812825"];
3612 [label="ContainerIsGeneric(container) 812826"];
3613 [label="param ContainerIsGeneric(Symbol container) 812827"];
3614 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 812828"];
3615 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 812829"];
3616 [label="IsGenericType(container.ContainingType) 812830"];
3617 [label="param IsGenericType(NamedTypeSymbol toCheck) 812831"];
3618 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812832"];
3619 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812833"];
3620 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 812834"];
3621 [label="toCheck = toCheck.ContainingType; 812835"];
3622 [label="return false; 812836"];
3623 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 812837"];
3624 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 812838"];
3625 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 812839"];
3626 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 812840"];
3627 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 812841"];
3628 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 812842"];
3629 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 812843"];
3630 [label="bool typeIsGeneric = IsGenericType(container); 812844"];
3631 [label="IsGenericType(container) 812845"];
3632 [label="param IsGenericType(NamedTypeSymbol toCheck) 812846"];
3633 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812847"];
3634 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812848"];
3635 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 812849"];
3636 [label="toCheck = toCheck.ContainingType; 812850"];
3637 [label="return false; 812851"];
3638 [label="bool typeIsGeneric = IsGenericType(container); 812852"];
3639 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 812853"];
3640 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 812854"];
3641 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 812855"];
3642 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 812856"];
3643 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 812857"];
3644 [label="toCheck = toCheck.ContainingType; 812858"];
3645 [label="param GetSourceAssemblySecurityAttributes(this) 812859"];
3646 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 812860"];
3647 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 812861"];
3648 [label="return Translate(corLibrary, context.Diagnostics); 812862"];
3649 [label="param Translate(DiagnosticBag diagnostics) 812863"];
3650 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 812864"];
3651 [label="return (Cci.IAssemblyReference)reference; 812865"];
3652 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 812866"];
3653 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 812867"];
3654 [label="param GetSourceModuleAttributes(this) 812868"];
3655 [label="return SourceModule.GetCustomAttributesToEmit(this); 812869"];
3656 [label="return SourceModule.GetCustomAttributesToEmit(this); 812870"];
3657 [label="return SourceModule.GetCustomAttributesToEmit(this); 812871"];
3658 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 812872"];
3659 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 812873"];
3660 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 812874"];
3661 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 812875"];
3662 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 812876"];
3663 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 812877"];
3664 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 812878"];
3665 [label="return GetNeedsGeneratedAttributesInternal(); 812879"];
3666 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 812880"];
3667 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 812881"];
3668 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 812882"];
3669 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 812883"];
3670 [label="return; 812884"];
3671 [label="Debug.Assert(symbol.IsDefinition); 812885"];
3672 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 812886"];
3673 [label="return _referenceManager; 812887"];
3674 [label="GetBoundReferenceManager(); 812888"];
3675 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 812889"];
3676 [label="param GetBoundReferenceManager(this) 812890"];
3677 [label="GetBoundReferenceManager(); 812891"];
3678 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 812892"];
3679 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 812893"];
3680 [label="param SynthesizeNullableAttributeIfNecessary(this) 812894"];
3681 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 812895"];
3682 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 812896"];
3683 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 812897"];
3684 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 812898"];
3685 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 812899"];
3686 [label="object reference; 812900"];
3687 [label="Cci.INamedTypeReference typeRef; 812901"];
3688 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 812902"];
3689 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812903"];
3690 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812904"];
3691 [label="IsGenericType(container) 812905"];
3692 [label="param IsGenericType(NamedTypeSymbol toCheck) 812906"];
3693 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812907"];
3694 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812908"];
3695 [label="return false; 812909"];
3696 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812910"];
3697 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812911"];
3698 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 812912"];
3699 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 812913"];
3700 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 812914"];
3701 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 812915"];
3702 [label="param Translate(SyntaxNode syntaxNodeOpt) 812916"];
3703 [label="param Translate(DiagnosticBag diagnostics) 812917"];
3704 [label="param Translate(bool fromImplements = false) 812918"];
3705 [label="param Translate(bool needDeclaration = false) 812919"];
3706 [label="Debug.Assert(diagnostics != null); 812920"];
3707 [label="Debug.Assert(diagnostics != null); 812921"];
3708 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 812922"];
3709 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 812923"];
3710 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 812924"];
3711 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 812925"];
3712 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 812926"];
3713 [label="object reference; 812927"];
3714 [label="Cci.INamedTypeReference typeRef; 812928"];
3715 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 812929"];
3716 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812930"];
3717 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812931"];
3718 [label="IsGenericType(container) 812932"];
3719 [label="param IsGenericType(NamedTypeSymbol toCheck) 812933"];
3720 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812934"];
3721 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812935"];
3722 [label="return false; 812936"];
3723 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812937"];
3724 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812938"];
3725 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 812939"];
3726 [label="Debug.Assert((object)x.DeclaringCompilation == y.DeclaringCompilation); 812940"];
3727 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 812941"];
3728 [label="toCheck = toCheck.ContainingType; 812942"];
3729 [label="return this; 812943"];
3730 [label="Debug.Assert(symbol.IsDefinition); 812944"];
3731 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 812945"];
3732 [label="return _referenceManager; 812946"];
3733 [label="GetBoundReferenceManager(); 812947"];
3734 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 812948"];
3735 [label="param GetBoundReferenceManager(this) 812949"];
3736 [label="GetBoundReferenceManager(); 812950"];
3737 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 812951"];
3738 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 812952"];
3739 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 812953"];
3740 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 812954"];
3741 [label="param Translate(SyntaxNode syntaxNodeOpt) 812955"];
3742 [label="param Translate(DiagnosticBag diagnostics) 812956"];
3743 [label="param Translate(bool fromImplements = false) 812957"];
3744 [label="param Translate(bool needDeclaration = false) 812958"];
3745 [label="Debug.Assert(diagnostics != null); 812959"];
3746 [label="Debug.Assert(diagnostics != null); 812960"];
3747 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 812961"];
3748 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 812962"];
3749 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 812963"];
3750 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 812964"];
3751 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 812965"];
3752 [label="object reference; 812966"];
3753 [label="Cci.INamedTypeReference typeRef; 812967"];
3754 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 812968"];
3755 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812969"];
3756 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812970"];
3757 [label="IsGenericType(container) 812971"];
3758 [label="param IsGenericType(NamedTypeSymbol toCheck) 812972"];
3759 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812973"];
3760 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 812974"];
3761 [label="return false; 812975"];
3762 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812976"];
3763 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 812977"];
3764 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 812978"];
3765 [label="param SynthesizeNullableAttributeIfNecessary(this) 812979"];
3766 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 812980"];
3767 [label="toCheck = toCheck.ContainingType; 812981"];
3768 [label="get\n            {\n                return SourceAssembly;\n            } 812982"];
3769 [label="SourceAssembly 812983"];
3770 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 812984"];
3771 [label="GetBoundReferenceManager() 812985"];
3772 [label="param GetBoundReferenceManager(this) 812986"];
3773 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 812987"];
3774 [label="return _referenceManager; 812988"];
3775 [label="GetBoundReferenceManager(); 812989"];
3776 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 812990"];
3777 [label="param GetUnaliasedReferencedAssemblies(this) 812991"];
3778 [label="GetBoundReferenceManager() 812992"];
3779 [label="param GetBoundReferenceManager(this) 812993"];
3780 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 812994"];
3781 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 812995"];
3782 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 812996"];
3783 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 812997"];
3784 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 812998"];
3785 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 812999"];
3786 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 813000"];
3787 [label="bool typeIsGeneric = IsGenericType(container); 813001"];
3788 [label="IsGenericType(container) 813002"];
3789 [label="param IsGenericType(NamedTypeSymbol toCheck) 813003"];
3790 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813004"];
3791 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813005"];
3792 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 813006"];
3793 [label="toCheck = toCheck.ContainingType; 813007"];
3794 [label="return false; 813008"];
3795 [label="bool typeIsGeneric = IsGenericType(container); 813009"];
3796 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 813010"];
3797 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 813011"];
3798 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 813012"];
3799 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 813013"];
3800 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813014"];
3801 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813015"];
3802 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 813016"];
3803 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813017"];
3804 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813018"];
3805 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 813019"];
3806 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 813020"];
3807 [label="object reference; 813021"];
3808 [label="Cci.INamedTypeReference typeRef; 813022"];
3809 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 813023"];
3810 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813024"];
3811 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813025"];
3812 [label="IsGenericType(container) 813026"];
3813 [label="param IsGenericType(NamedTypeSymbol toCheck) 813027"];
3814 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813028"];
3815 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813029"];
3816 [label="return false; 813030"];
3817 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813031"];
3818 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813032"];
3819 [label="param GetExportedTypes(DiagnosticBag diagnostics) 813033"];
3820 [label="param GetExportedTypes(this) 813034"];
3821 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 813035"];
3822 [label="if (_lazyExportedTypes.IsDefault)\n            {\n                _lazyExportedTypes = CalculateExportedTypes();\n\n                if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                }\n            } 813036"];
3823 [label="CalculateExportedTypes() 813037"];
3824 [label="param CalculateExportedTypes(this) 813038"];
3825 [label="SourceAssemblySymbol sourceAssembly = SourceModule.ContainingSourceAssembly; 813039"];
3826 [label="var builder = ArrayBuilder<Cci.ExportedType>.GetInstance(); 813040"];
3827 [label="if (!OutputKind.IsNetModule())\n            {\n                var modules = sourceAssembly.Modules;\n                for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                }\n            } 813041"];
3828 [label="var modules = sourceAssembly.Modules; 813042"];
3829 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 813043"];
3830 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 813044"];
3831 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 813045"];
3832 [label="sourceAssembly.DeclaringCompilation.Options 813046"];
3833 [label="get\n            {\n                return _options;\n            } 813047"];
3834 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 813048"];
3835 [label="GetForwardedTypes(sourceAssembly, builder); 813049"];
3836 [label="GetForwardedTypes(sourceAssembly, builder); 813050"];
3837 [label="GetForwardedTypes(sourceAssembly, builder) 813051"];
3838 [label="param GetForwardedTypes(SourceAssemblySymbol sourceAssembly) 813052"];
3839 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 813053"];
3840 [label="var seenTopLevelForwardedTypes = new HashSet<NamedTypeSymbol>(); 813054"];
3841 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 813055"];
3842 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 813056"];
3843 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 813057"];
3844 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder) 813058"];
3845 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 813059"];
3846 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 813060"];
3847 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 813061"];
3848 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 813062"];
3849 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 813063"];
3850 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 813064"];
3851 [label="sourceAssembly.DeclaringCompilation.Options 813065"];
3852 [label="get\n            {\n                return _options;\n            } 813066"];
3853 [label="if (!sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule())\n            {\n                GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder);\n            } 813067"];
3854 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 813068"];
3855 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 813069"];
3856 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 813070"];
3857 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder) 813071"];
3858 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 813072"];
3859 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 813073"];
3860 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 813074"];
3861 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 813075"];
3862 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 813076"];
3863 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 813077"];
3864 [label="return seenTopLevelForwardedTypes; 813078"];
3865 [label="GetForwardedTypes(sourceAssembly, builder); 813079"];
3866 [label="return builder.ToImmutableAndFree(); 813080"];
3867 [label="_lazyExportedTypes = CalculateExportedTypes(); 813081"];
3868 [label="_lazyExportedTypes 813082"];
3869 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 813083"];
3870 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 813084"];
3871 [label="return _lazyExportedTypes; 813085"];
3872 [label="param AddEmbeddedResourcesFromAddedModules(ArrayBuilder<Cci.ManagedResource> builder) 813086"];
3873 [label="param AddEmbeddedResourcesFromAddedModules(DiagnosticBag diagnostics) 813087"];
3874 [label="param AddEmbeddedResourcesFromAddedModules(this) 813088"];
3875 [label="var modules = _sourceAssembly.Modules; 813089"];
3876 [label="int count = modules.Length; 813090"];
3877 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 813091"];
3878 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 813092"];
3879 [label="=> ImmutableArray<Cci.UsedNamespaceOrType>.Empty 813093"];
3880 [label="ImmutableArray<Cci.UsedNamespaceOrType>.Empty 813094"];
3881 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 813095"];
3882 [label="this.SyntaxTrees 813096"];
3883 [label="_syntaxAndDeclarations.GetLazyState() 813097"];
3884 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 813098"];
3885 [label="=> null 813099"];
3886 [label="null 813100"];
3887 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 813101"];
3888 [label="param CommonGetBoundReferenceManager(this) 813102"];
3889 [label="GetBoundReferenceManager() 813103"];
3890 [label="param GetBoundReferenceManager(this) 813104"];
3891 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 813105"];
3892 [label="return _referenceManager; 813106"];
3893 [label="return GetBoundReferenceManager(); 813107"];
3894 [label="param SerializePdbEmbeddedCompilationOptions(BlobBuilder builder) 813108"];
3895 [label="param SerializePdbEmbeddedCompilationOptions(this) 813109"];
3896 [label="Debug.Assert(LanguageVersion == LanguageVersion.MapSpecifiedToEffectiveVersion()); 813110"];
3897 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 813111"];
3898 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 813112"];
3899 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()) 813113"];
3900 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 813114"];
3901 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 813115"];
3902 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 813116"];
3903 [label="builder.WriteUTF8(key); 813117"];
3904 [label="builder.WriteUTF8(key); 813118"];
3905 [label="builder.WriteUTF8(key); 813119"];
3906 [label="builder.WriteByte(0); 813120"];
3907 [label="builder.WriteByte(0); 813121"];
3908 [label="builder.WriteUTF8(value); 813122"];
3909 [label="builder.WriteUTF8(value); 813123"];
3910 [label="builder.WriteUTF8(value); 813124"];
3911 [label="builder.WriteByte(0); 813125"];
3912 [label="builder.WriteByte(0); 813126"];
3913 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 813127"];
3914 [label="Options 813128"];
3915 [label="get\n            {\n                return _options;\n            } 813129"];
3916 [label="return _options; 813130"];
3917 [label="if (Options.CheckOverflow)\n            {\n                WriteValue(CompilationOptionNames.Checked, Options.CheckOverflow.ToString());\n            } 813131"];
3918 [label="Options 813132"];
3919 [label="get\n            {\n                return _options;\n            } 813133"];
3920 [label="return _options; 813134"];
3921 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable)\n            {\n                WriteValue(CompilationOptionNames.Nullable, Options.NullableContextOptions.ToString());\n            } 813135"];
3922 [label="Options 813136"];
3923 [label="get\n            {\n                return _options;\n            } 813137"];
3924 [label="return _options; 813138"];
3925 [label="if (Options.AllowUnsafe)\n            {\n                WriteValue(CompilationOptionNames.Unsafe, Options.AllowUnsafe.ToString());\n            } 813139"];
3926 [label="GetPreprocessorSymbols() 813140"];
3927 [label="param GetPreprocessorSymbols(this) 813141"];
3928 [label="SyntaxTrees 813142"];
3929 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 813143"];
3930 [label="_syntaxAndDeclarations.GetLazyState() 813144"];
3931 [label="param GetLazyState(this) 813145"];
3932 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 813146"];
3933 [label="CSharpSyntaxTree? firstTree = (CSharpSyntaxTree?)SyntaxTrees.FirstOrDefault(); 813147"];
3934 [label="if (firstTree is null)\n            {\n                return ImmutableArray<string>.Empty;\n            } 813148"];
3935 [label="return firstTree.Options.PreprocessorSymbolNames.ToImmutableArray(); 813149"];
3936 [label="var preprocessorSymbols = GetPreprocessorSymbols(); 813150"];
3937 [label="if (preprocessorSymbols.Any())\n            {\n                WriteValue(CompilationOptionNames.Define, string.Join(',', preprocessorSymbols));\n            } 813151"];
3938 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813152"];
3939 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813153"];
3940 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 813154"];
3941 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813155"];
3942 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813156"];
3943 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 813157"];
3944 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 813158"];
3945 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 813159"];
3946 [label="param Translate(SyntaxNode syntaxNodeOpt) 813160"];
3947 [label="param Translate(DiagnosticBag diagnostics) 813161"];
3948 [label="param Translate(bool fromImplements = false) 813162"];
3949 [label="param Translate(bool needDeclaration = false) 813163"];
3950 [label="Debug.Assert(diagnostics != null); 813164"];
3951 [label="Debug.Assert(diagnostics != null); 813165"];
3952 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813166"];
3953 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813167"];
3954 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 813168"];
3955 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813169"];
3956 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813170"];
3957 [label="object reference; 813171"];
3958 [label="Cci.INamedTypeReference typeRef; 813172"];
3959 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 813173"];
3960 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813174"];
3961 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813175"];
3962 [label="IsGenericType(container) 813176"];
3963 [label="param IsGenericType(NamedTypeSymbol toCheck) 813177"];
3964 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813178"];
3965 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813179"];
3966 [label="return false; 813180"];
3967 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813181"];
3968 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813182"];
3969 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 813183"];
3970 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 813184"];
3971 [label="param MustBeWrapped(ParameterSymbol param) 813185"];
3972 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 813186"];
3973 [label="var container = param.ContainingSymbol; 813187"];
3974 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 813188"];
3975 [label="ContainerIsGeneric(container) 813189"];
3976 [label="param ContainerIsGeneric(Symbol container) 813190"];
3977 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813191"];
3978 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813192"];
3979 [label="IsGenericType(container.ContainingType) 813193"];
3980 [label="param IsGenericType(NamedTypeSymbol toCheck) 813194"];
3981 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813195"];
3982 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813196"];
3983 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 813197"];
3984 [label="toCheck = toCheck.ContainingType; 813198"];
3985 [label="return false; 813199"];
3986 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813200"];
3987 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813201"];
3988 [label="param MustBeWrapped(ParameterSymbol param) 813202"];
3989 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 813203"];
3990 [label="var container = param.ContainingSymbol; 813204"];
3991 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 813205"];
3992 [label="ContainerIsGeneric(container) 813206"];
3993 [label="param ContainerIsGeneric(Symbol container) 813207"];
3994 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813208"];
3995 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813209"];
3996 [label="IsGenericType(container.ContainingType) 813210"];
3997 [label="param IsGenericType(NamedTypeSymbol toCheck) 813211"];
3998 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813212"];
3999 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813213"];
4000 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 813214"];
4001 [label="toCheck = toCheck.ContainingType; 813215"];
4002 [label="return false; 813216"];
4003 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813217"];
4004 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813218"];
4005 [label="=> _sourceAssembly 813219"];
4006 [label="_sourceAssembly 813220"];
4007 [label="=> _metadataName 813221"];
4008 [label="_metadataName 813222"];
4009 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 813223"];
4010 [label="param MemberVisibility(Symbol symbol) 813224"];
4011 [label="switch (symbol.DeclaredAccessibility)\n            {\n                case Accessibility.Public:\n                    return Cci.TypeMemberVisibility.Public;\n\n                case Accessibility.Private:\n                    if (symbol.ContainingType?.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level private member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Private;\n                    }\n\n                case Accessibility.Internal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    }\n\n                case Accessibility.Protected:\n                    if (symbol.ContainingType.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level protected member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Family;\n                    }\n\n                case Accessibility.ProtectedAndInternal:\n                    Debug.Assert(symbol.ContainingType.TypeKind != TypeKind.Submission);\n                    return Cci.TypeMemberVisibility.FamilyAndAssembly;\n\n                case Accessibility.ProtectedOrInternal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested protected internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.FamilyOrAssembly;\n                    }\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n            } 813225"];
4012 [label="return Cci.TypeMemberVisibility.Public; 813226"];
4013 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 813227"];
4014 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 813228"];
4015 [label="param Translate(SyntaxNode syntaxNodeOpt) 813229"];
4016 [label="param Translate(DiagnosticBag diagnostics) 813230"];
4017 [label="param Translate(bool fromImplements = false) 813231"];
4018 [label="param Translate(bool needDeclaration = false) 813232"];
4019 [label="Debug.Assert(diagnostics != null); 813233"];
4020 [label="Debug.Assert(diagnostics != null); 813234"];
4021 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813235"];
4022 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813236"];
4023 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 813237"];
4024 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813238"];
4025 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813239"];
4026 [label="object reference; 813240"];
4027 [label="Cci.INamedTypeReference typeRef; 813241"];
4028 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 813242"];
4029 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813243"];
4030 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813244"];
4031 [label="IsGenericType(container) 813245"];
4032 [label="param IsGenericType(NamedTypeSymbol toCheck) 813246"];
4033 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813247"];
4034 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813248"];
4035 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 813249"];
4036 [label="toCheck = toCheck.ContainingType; 813250"];
4037 [label="return false; 813251"];
4038 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813252"];
4039 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813253"];
4040 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 813254"];
4041 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 813255"];
4042 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813256"];
4043 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813257"];
4044 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 813258"];
4045 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813259"];
4046 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813260"];
4047 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 813261"];
4048 [label="if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    } 813262"];
4049 [label="return Cci.TypeMemberVisibility.Assembly; 813263"];
4050 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 813264"];
4051 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 813265"];
4052 [label="param Translate(SyntaxNode syntaxNodeOpt) 813266"];
4053 [label="param Translate(DiagnosticBag diagnostics) 813267"];
4054 [label="param Translate(bool fromImplements = false) 813268"];
4055 [label="param Translate(bool needDeclaration = false) 813269"];
4056 [label="Debug.Assert(diagnostics != null); 813270"];
4057 [label="Debug.Assert(diagnostics != null); 813271"];
4058 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813272"];
4059 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813273"];
4060 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 813274"];
4061 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813275"];
4062 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813276"];
4063 [label="object reference; 813277"];
4064 [label="Cci.INamedTypeReference typeRef; 813278"];
4065 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 813279"];
4066 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813280"];
4067 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813281"];
4068 [label="IsGenericType(container) 813282"];
4069 [label="param IsGenericType(NamedTypeSymbol toCheck) 813283"];
4070 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813284"];
4071 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813285"];
4072 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 813286"];
4073 [label="toCheck = toCheck.ContainingType; 813287"];
4074 [label="return false; 813288"];
4075 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813289"];
4076 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813290"];
4077 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 813291"];
4078 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 813292"];
4079 [label="if (symbol.ContainingType?.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level private member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Private;\n                    } 813293"];
4080 [label="return Cci.TypeMemberVisibility.Private; 813294"];
4081 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 813295"];
4082 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 813296"];
4083 [label="param Translate(SyntaxNode syntaxNodeOpt) 813297"];
4084 [label="param Translate(DiagnosticBag diagnostics) 813298"];
4085 [label="param Translate(bool fromImplements = false) 813299"];
4086 [label="param Translate(bool needDeclaration = false) 813300"];
4087 [label="Debug.Assert(diagnostics != null); 813301"];
4088 [label="Debug.Assert(diagnostics != null); 813302"];
4089 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813303"];
4090 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813304"];
4091 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 813305"];
4092 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813306"];
4093 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813307"];
4094 [label="object reference; 813308"];
4095 [label="Cci.INamedTypeReference typeRef; 813309"];
4096 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 813310"];
4097 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813311"];
4098 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813312"];
4099 [label="IsGenericType(container) 813313"];
4100 [label="param IsGenericType(NamedTypeSymbol toCheck) 813314"];
4101 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813315"];
4102 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813316"];
4103 [label="return false; 813317"];
4104 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813318"];
4105 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813319"];
4106 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 813320"];
4107 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 813321"];
4108 [label="get { return _metadataName; } 813322"];
4109 [label="return _metadataName; 813323"];
4110 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813324"];
4111 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813325"];
4112 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 813326"];
4113 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813327"];
4114 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813328"];
4115 [label="object reference; 813329"];
4116 [label="Cci.INamedTypeReference typeRef; 813330"];
4117 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 813331"];
4118 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813332"];
4119 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813333"];
4120 [label="IsGenericType(container) 813334"];
4121 [label="param IsGenericType(NamedTypeSymbol toCheck) 813335"];
4122 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813336"];
4123 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813337"];
4124 [label="return false; 813338"];
4125 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813339"];
4126 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813340"];
4127 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 813341"];
4128 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 813342"];
4129 [label="GetBoundReferenceManager() 813343"];
4130 [label="GetBoundReferenceManager(); 813344"];
4131 [label="Debug.Assert(result.SpecialType == specialType); 813345"];
4132 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 813346"];
4133 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 813347"];
4134 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 813348"];
4135 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 813349"];
4136 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 813350"];
4137 [label="bool typeIsGeneric = IsGenericType(container); 813351"];
4138 [label="IsGenericType(container) 813352"];
4139 [label="param IsGenericType(NamedTypeSymbol toCheck) 813353"];
4140 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813354"];
4141 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813355"];
4142 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 813356"];
4143 [label="toCheck = toCheck.ContainingType; 813357"];
4144 [label="return false; 813358"];
4145 [label="bool typeIsGeneric = IsGenericType(container); 813359"];
4146 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 813360"];
4147 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 813361"];
4148 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 813362"];
4149 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 813363"];
4150 [label="param MustBeWrapped(ParameterSymbol param) 813364"];
4151 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 813365"];
4152 [label="var container = param.ContainingSymbol; 813366"];
4153 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 813367"];
4154 [label="ContainerIsGeneric(container) 813368"];
4155 [label="param ContainerIsGeneric(Symbol container) 813369"];
4156 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813370"];
4157 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813371"];
4158 [label="IsGenericType(container.ContainingType) 813372"];
4159 [label="param IsGenericType(NamedTypeSymbol toCheck) 813373"];
4160 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813374"];
4161 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813375"];
4162 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 813376"];
4163 [label="toCheck = toCheck.ContainingType; 813377"];
4164 [label="return false; 813378"];
4165 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813379"];
4166 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813380"];
4167 [label="param MustBeWrapped(ParameterSymbol param) 813381"];
4168 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 813382"];
4169 [label="var container = param.ContainingSymbol; 813383"];
4170 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 813384"];
4171 [label="ContainerIsGeneric(container) 813385"];
4172 [label="param ContainerIsGeneric(Symbol container) 813386"];
4173 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813387"];
4174 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813388"];
4175 [label="IsGenericType(container.ContainingType) 813389"];
4176 [label="param IsGenericType(NamedTypeSymbol toCheck) 813390"];
4177 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813391"];
4178 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813392"];
4179 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 813393"];
4180 [label="toCheck = toCheck.ContainingType; 813394"];
4181 [label="return false; 813395"];
4182 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813396"];
4183 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813397"];
4184 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 813398"];
4185 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 813399"];
4186 [label="param Translate(SyntaxNode syntaxNodeOpt) 813400"];
4187 [label="param Translate(DiagnosticBag diagnostics) 813401"];
4188 [label="param Translate(bool fromImplements = false) 813402"];
4189 [label="param Translate(bool needDeclaration = false) 813403"];
4190 [label="Debug.Assert(diagnostics != null); 813404"];
4191 [label="Debug.Assert(diagnostics != null); 813405"];
4192 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813406"];
4193 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813407"];
4194 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 813408"];
4195 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813409"];
4196 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813410"];
4197 [label="object reference; 813411"];
4198 [label="Cci.INamedTypeReference typeRef; 813412"];
4199 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 813413"];
4200 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813414"];
4201 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813415"];
4202 [label="IsGenericType(container) 813416"];
4203 [label="param IsGenericType(NamedTypeSymbol toCheck) 813417"];
4204 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813418"];
4205 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813419"];
4206 [label="return false; 813420"];
4207 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813421"];
4208 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813422"];
4209 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 813423"];
4210 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 813424"];
4211 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 813425"];
4212 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 813426"];
4213 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 813427"];
4214 [label="GetBoundReferenceManager() 813428"];
4215 [label="param GetBoundReferenceManager(this) 813429"];
4216 [label="GetBoundReferenceManager(); 813430"];
4217 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 813431"];
4218 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 813432"];
4219 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 813433"];
4220 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 813434"];
4221 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 813435"];
4222 [label="bool typeIsGeneric = IsGenericType(container); 813436"];
4223 [label="IsGenericType(container) 813437"];
4224 [label="param IsGenericType(NamedTypeSymbol toCheck) 813438"];
4225 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813439"];
4226 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813440"];
4227 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 813441"];
4228 [label="toCheck = toCheck.ContainingType; 813442"];
4229 [label="return false; 813443"];
4230 [label="bool typeIsGeneric = IsGenericType(container); 813444"];
4231 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 813445"];
4232 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 813446"];
4233 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 813447"];
4234 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 813448"];
4235 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813449"];
4236 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813450"];
4237 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 813451"];
4238 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813452"];
4239 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813453"];
4240 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 813454"];
4241 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 813455"];
4242 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 813456"];
4243 [label="param Translate(SyntaxNode syntaxNodeOpt) 813457"];
4244 [label="param Translate(DiagnosticBag diagnostics) 813458"];
4245 [label="param Translate(bool fromImplements = false) 813459"];
4246 [label="param Translate(bool needDeclaration = false) 813460"];
4247 [label="Debug.Assert(diagnostics != null); 813461"];
4248 [label="Debug.Assert(diagnostics != null); 813462"];
4249 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813463"];
4250 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 813464"];
4251 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 813465"];
4252 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813466"];
4253 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 813467"];
4254 [label="object reference; 813468"];
4255 [label="Cci.INamedTypeReference typeRef; 813469"];
4256 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 813470"];
4257 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813471"];
4258 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813472"];
4259 [label="IsGenericType(container) 813473"];
4260 [label="param IsGenericType(NamedTypeSymbol toCheck) 813474"];
4261 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813475"];
4262 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813476"];
4263 [label="return false; 813477"];
4264 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813478"];
4265 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 813479"];
4266 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 813480"];
4267 [label="param MustBeWrapped(ParameterSymbol param) 813481"];
4268 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 813482"];
4269 [label="var container = param.ContainingSymbol; 813483"];
4270 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 813484"];
4271 [label="ContainerIsGeneric(container) 813485"];
4272 [label="param ContainerIsGeneric(Symbol container) 813486"];
4273 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813487"];
4274 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813488"];
4275 [label="IsGenericType(container.ContainingType) 813489"];
4276 [label="param IsGenericType(NamedTypeSymbol toCheck) 813490"];
4277 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813491"];
4278 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813492"];
4279 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 813493"];
4280 [label="toCheck = toCheck.ContainingType; 813494"];
4281 [label="return false; 813495"];
4282 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813496"];
4283 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813497"];
4284 [label="param MustBeWrapped(ParameterSymbol param) 813498"];
4285 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 813499"];
4286 [label="var container = param.ContainingSymbol; 813500"];
4287 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 813501"];
4288 [label="ContainerIsGeneric(container) 813502"];
4289 [label="param ContainerIsGeneric(Symbol container) 813503"];
4290 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813504"];
4291 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813505"];
4292 [label="IsGenericType(container.ContainingType) 813506"];
4293 [label="param IsGenericType(NamedTypeSymbol toCheck) 813507"];
4294 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813508"];
4295 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 813509"];
4296 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 813510"];
4297 [label="toCheck = toCheck.ContainingType; 813511"];
4298 [label="return false; 813512"];
4299 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813513"];
4300 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 813514"];
4301 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 813515"];
4302 [label="toCheck = toCheck.ContainingType; 813516"];
4303 [label="Debug.Assert(symbol.IsDefinition); 813517"];
4304 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 813518"];
4305 [label="return _referenceManager; 813519"];
4306 [label="GetBoundReferenceManager(); 813520"];
4307 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 813521"];
4308 [label="param GetBoundReferenceManager(this) 813522"];
4309 [label="GetBoundReferenceManager(); 813523"];
4310 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 813524"];
4311 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 813525"];
4312 [label="param SynthesizeNullableAttributeIfNecessary(this) 813526"];
4313 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 813527"];
4314 [label="return _referenceManager; 813528"];
4315 [label="GetBoundReferenceManager(); 813529"];
4316 [label="if (pdbStream != null)\n                {\n                    pdb = pdbStream.ToImmutable();\n                    pdbStream.Dispose();\n                } 813530"];
4317 [label="if (pdbStream != null)\n                {\n                    pdb = pdbStream.ToImmutable();\n                    pdbStream.Dispose();\n                } 813531"];
4318 [label="diagnostics.AddRange(result.Diagnostics); 813532"];
4319 [label="diagnostics.AddRange(result.Diagnostics); 813533"];
4320 [label="assembly = executableStream.ToImmutable(); 813534"];
4321 [label="assembly = executableStream.ToImmutable(); 813535"];
4322 [label="if (result.Success)\n            {\n                return new EmitOutput(assembly, pdb);\n            } 813536"];
4323 [label="return new EmitOutput(assembly, pdb); 813537"];
4324 [label="return new EmitOutput(assembly, pdb); 813538"];
4325 [label="return new EmitOutput(assembly, pdb); 813539"];
4326 [label="new EmitOutput(assembly, pdb) 813540"];
4327 [label="param EmitOutput(ImmutableArray<byte> assembly) 813541"];
4328 [label="param EmitOutput(ImmutableArray<byte> pdb) 813542"];
4329 [label="param EmitOutput(this) 813543"];
4330 [label="Assembly 813544"];
4331 [label="if (pdb.IsDefault)\n            {\n                // We didn't emit a discrete PDB file, so we'll look for an embedded PDB instead.\n                using (var peReader = new PEReader(Assembly))\n                {\n                    DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb);\n                    if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    }\n                }\n            } 813545"];
4332 [label="using (var peReader = new PEReader(Assembly))\n                {\n                    DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb);\n                    if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    }\n                } 813546"];
4333 [label="DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb); 813547"];
4334 [label="DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb); 813548"];
4335 [label="if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    } 813549"];
4336 [label="if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    } 813550"];
4337 [label="using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        } 813551"];
4338 [label="var mdReader = embeddedMetadataProvider.GetMetadataReader(); 813552"];
4339 [label="var mdReader = embeddedMetadataProvider.GetMetadataReader(); 813553"];
4340 [label="pdb = readMetadata(mdReader); 813554"];
4341 [label="readMetadata(mdReader) 813555"];
4342 [label="unsafe ImmutableArray<byte> readMetadata(MetadataReader mdReader)\n            {\n                var length = mdReader.MetadataLength;\n                var bytes = new byte[length];\n                Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length);\n                return ImmutableArray.Create(bytes);\n            } 813556"];
4343 [label="unsafe ImmutableArray<byte> readMetadata(MetadataReader mdReader)\n            {\n                var length = mdReader.MetadataLength;\n                var bytes = new byte[length];\n                Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length);\n                return ImmutableArray.Create(bytes);\n            } 813557"];
4344 [label="var length = mdReader.MetadataLength; 813558"];
4345 [label="var bytes = new byte[length]; 813559"];
4346 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 813560"];
4347 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 813561"];
4348 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 813562"];
4349 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 813563"];
4350 [label="return ImmutableArray.Create(bytes); 813564"];
4351 [label="return ImmutableArray.Create(bytes); 813565"];
4352 [label="Pdb 813566"];
4353 [label="get { return this.Assembly.GetPublicSymbol(); } 813567"];
4354 [label="this.Assembly 813568"];
4355 [label="get\n            {\n                return SourceAssembly;\n            } 813569"];
4356 [label="SourceAssembly 813570"];
4357 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 813571"];
4358 [label="GetBoundReferenceManager() 813572"];
4359 [label="param GetBoundReferenceManager(this) 813573"];
4360 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 813574"];
4361 [label="return _referenceManager; 813575"];
4362 [label="GetBoundReferenceManager(); 813576"];
4363 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 813577"];
4364 [label="return this.Assembly.GetPublicSymbol(); 813578"];
4365 [label="get { return _options; } 813579"];
4366 [label="_diagnostics = testEnvironment.GetDiagnostics(); 813580"];
4367 [label="_diagnostics 813581"];
4368 [label="EmittedAssemblyData = testEnvironment.GetMainImage(); 813582"];
4369 [label="EmittedAssemblyData 813583"];
4370 [label="EmittedAssemblyPdb = testEnvironment.GetMainPdb(); 813584"];
4371 [label="EmittedAssemblyPdb 813585"];
4372 [label="_testData = ((IInternalRuntimeEnvironment)testEnvironment).GetCompilationTestData(); 813586"];
4373 [label="_testData 813587"];
4374 [label="return _compilation.Assembly.Identity.GetDisplayName(); 813588"];
4375 [label="_compilation.Assembly 813589"];
4376 [label="get { return this.Assembly.GetPublicSymbol(); } 813590"];
4377 [label="this.Assembly 813591"];
4378 [label="SourceAssembly 813592"];
4379 [label="GetBoundReferenceManager() 813593"];
4380 [label="param GetBoundReferenceManager(this) 813594"];
4381 [label="GetBoundReferenceManager(); 813595"];
4382 [label="return _compilation.Assembly.Identity.GetDisplayName(); 813596"];
4383 [label="_allModuleData = testEnvironment.GetAllModuleData(); 813597"];
4384 [label="_allModuleData 813598"];
4385 [label="testEnvironment.Verify(peVerify); 813599"];
4386 [label="testEnvironment.Verify(peVerify); 813600"];
4387 [label="if (expectedSignatures != null)\n            {\n                MetadataSignatureUnitTestHelper.VerifyMemberSignatures(testEnvironment, expectedSignatures);\n            } 813601"];
4388 [label="if (expectedSignatures != null)\n            {\n                MetadataSignatureUnitTestHelper.VerifyMemberSignatures(testEnvironment, expectedSignatures);\n            } 813602"];
4389 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 813603"];
4390 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 813604"];
4391 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 813605"];
4392 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 813606"];
4393 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 813607"];
4394 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 813608"];
4395 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 813609"];
4396 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 813610"];
4397 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 813611"];
4398 [label="return verifier; 813612"];
4399 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 813613"];
4400 [label="if (result == null)\n            {\n                result = verifier;\n            }\n            else\n            {\n                // only one emitter should return a verifier\n                CustomAssert.Null(verifier);\n            } 813614"];
4401 [label="if (result == null)\n            {\n                result = verifier;\n            }\n            else\n            {\n                // only one emitter should return a verifier\n                CustomAssert.Null(verifier);\n            } 813615"];
4402 [label="result = verifier; 813616"];
4403 [label="CustomAssert.NotNull(result); 813617"];
4404 [label="return result; 813618"];
4405 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 813619"];
4406 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 813620"];
4407 [label="CompileAndVerify(@'\npublic class C\n{\n    delegate int D(int i);\n    delegate D E(int i);\n\n    public static void Main()\n    {\n        D y = x => x + 1;\n        E e = x => (y += (z => z + 1));\n    }\n}\n'); 813621"];
2 -> 1;
3 -> 1;
4 -> 3;
6 -> 5;
8 -> 7;
10 -> 9;
12 -> 11;
14 -> 13;
16 -> 15;
18 -> 17;
20 -> 19;
22 -> 21;
24 -> 23;
26 -> 25;
28 -> 27;
30 -> 29;
32 -> 31;
34 -> 33;
36 -> 35;
38 -> 37;
40 -> 39;
42 -> 41;
43 -> 0;
44 -> 0;
45 -> 43;
45 -> 44;
45 -> 0;
46 -> 45;
47 -> 0;
48 -> 0;
49 -> 47;
49 -> 48;
49 -> 45;
50 -> 49;
51 -> 0;
52 -> 51;
53 -> 52;
53 -> 51;
54 -> 53;
56 -> 0;
57 -> 55;
57 -> 56;
58 -> 57;
59 -> 0;
60 -> 0;
61 -> 59;
61 -> 60;
61 -> 0;
62 -> 61;
63 -> 0;
64 -> 0;
65 -> 63;
65 -> 64;
65 -> 49;
66 -> 65;
67 -> 0;
68 -> 0;
69 -> 67;
69 -> 68;
69 -> 65;
70 -> 69;
71 -> 0;
72 -> 0;
73 -> 71;
73 -> 72;
73 -> 69;
74 -> 73;
75 -> 0;
76 -> 0;
77 -> 75;
77 -> 76;
77 -> 0;
78 -> 77;
79 -> 0;
80 -> 0;
81 -> 79;
81 -> 80;
81 -> 0;
82 -> 81;
83 -> 0;
84 -> 0;
85 -> 83;
85 -> 84;
85 -> 0;
86 -> 85;
87 -> 0;
88 -> 0;
89 -> 87;
89 -> 88;
89 -> 73;
90 -> 89;
91 -> 0;
92 -> 0;
93 -> 91;
93 -> 92;
93 -> 0;
94 -> 93;
96 -> 0;
97 -> 95;
97 -> 96;
98 -> 97;
99 -> 0;
100 -> 0;
101 -> 99;
101 -> 100;
101 -> 89;
102 -> 101;
103 -> 0;
104 -> 0;
105 -> 103;
105 -> 104;
105 -> 0;
106 -> 105;
107 -> 0;
108 -> 0;
109 -> 107;
109 -> 108;
109 -> 0;
110 -> 109;
111 -> 0;
112 -> 0;
113 -> 111;
113 -> 112;
113 -> 0;
114 -> 113;
115 -> 0;
116 -> 0;
117 -> 115;
117 -> 116;
117 -> 0;
118 -> 117;
119 -> 0;
120 -> 0;
121 -> 119;
121 -> 120;
121 -> 0;
122 -> 121;
123 -> 0;
124 -> 0;
125 -> 123;
125 -> 124;
125 -> 101;
126 -> 125;
127 -> 0;
128 -> 0;
129 -> 127;
129 -> 128;
129 -> 125;
130 -> 129;
131 -> 0;
132 -> 0;
133 -> 131;
133 -> 132;
133 -> 129;
134 -> 133;
135 -> 0;
136 -> 0;
137 -> 135;
137 -> 136;
137 -> 133;
138 -> 137;
139 -> 0;
140 -> 0;
141 -> 139;
141 -> 140;
141 -> 0;
142 -> 141;
143 -> 0;
144 -> 0;
145 -> 143;
145 -> 144;
145 -> 0;
146 -> 145;
147 -> 0;
148 -> 0;
149 -> 147;
149 -> 148;
149 -> 137;
150 -> 149;
151 -> 0;
152 -> 0;
153 -> 151;
153 -> 152;
153 -> 0;
154 -> 153;
155 -> 0;
156 -> 0;
157 -> 155;
157 -> 156;
157 -> 0;
158 -> 157;
159 -> 0;
160 -> 0;
161 -> 159;
161 -> 160;
161 -> 0;
162 -> 161;
163 -> 0;
164 -> 0;
165 -> 163;
165 -> 164;
165 -> 149;
166 -> 165;
167 -> 0;
168 -> 0;
169 -> 167;
169 -> 168;
169 -> 0;
170 -> 169;
171 -> 0;
172 -> 0;
173 -> 171;
173 -> 172;
173 -> 0;
174 -> 173;
176 -> 175;
178 -> 176;
178 -> 177;
179 -> 178;
181 -> 0;
181 -> 180;
182 -> 181;
182 -> 0;
183 -> 182;
185 -> 184;
187 -> 186;
189 -> 188;
191 -> 190;
192 -> 4;
193 -> 192;
194 -> 193;
195 -> 194;
195 -> 193;
196 -> 1;
197 -> 1;
198 -> 1;
199 -> 197;
199 -> 198;
200 -> 199;
200 -> 198;
201 -> 198;
202 -> 200;
202 -> 201;
203 -> 201;
204 -> 202;
204 -> 203;
204 -> 201;
205 -> 201;
205 -> 1;
206 -> 1;
207 -> 205;
207 -> 206;
208 -> 197;
208 -> 206;
209 -> 197;
209 -> 206;
210 -> 197;
210 -> 206;
211 -> 197;
211 -> 206;
212 -> 197;
212 -> 206;
213 -> 197;
213 -> 206;
214 -> 197;
214 -> 206;
215 -> 197;
215 -> 206;
216 -> 197;
216 -> 206;
217 -> 197;
217 -> 206;
218 -> 197;
218 -> 206;
219 -> 197;
219 -> 206;
220 -> 197;
220 -> 206;
221 -> 197;
221 -> 206;
222 -> 197;
222 -> 206;
223 -> 196;
223 -> 206;
224 -> 0;
225 -> 0;
227 -> 224;
227 -> 225;
227 -> 226;
228 -> 227;
229 -> 0;
230 -> 228;
230 -> 227;
230 -> 229;
231 -> 230;
232 -> 0;
233 -> 228;
233 -> 227;
233 -> 232;
234 -> 233;
235 -> 0;
236 -> 228;
236 -> 227;
236 -> 235;
237 -> 236;
238 -> 0;
239 -> 228;
239 -> 227;
239 -> 238;
240 -> 239;
241 -> 0;
242 -> 228;
242 -> 227;
242 -> 241;
243 -> 242;
244 -> 0;
245 -> 228;
245 -> 227;
245 -> 244;
246 -> 245;
247 -> 0;
248 -> 228;
248 -> 227;
248 -> 247;
249 -> 248;
250 -> 0;
251 -> 228;
251 -> 227;
251 -> 250;
252 -> 251;
253 -> 0;
254 -> 228;
254 -> 227;
254 -> 253;
255 -> 254;
256 -> 0;
257 -> 228;
257 -> 227;
257 -> 256;
258 -> 257;
259 -> 0;
260 -> 228;
260 -> 227;
260 -> 259;
261 -> 260;
262 -> 228;
265 -> 262;
265 -> 264;
266 -> 263;
266 -> 264;
267 -> 264;
268 -> 265;
268 -> 227;
268 -> 264;
269 -> 264;
270 -> 266;
270 -> 264;
271 -> 267;
271 -> 264;
272 -> 270;
272 -> 271;
272 -> 264;
273 -> 272;
273 -> 269;
273 -> 264;
274 -> 268;
274 -> 269;
274 -> 227;
274 -> 273;
274 -> 272;
274 -> 264;
275 -> 274;
276 -> 0;
277 -> 276;
279 -> 277;
279 -> 278;
280 -> 228;
280 -> 227;
280 -> 279;
281 -> 280;
282 -> 0;
283 -> 282;
284 -> 228;
284 -> 227;
284 -> 283;
285 -> 284;
286 -> 0;
287 -> 228;
287 -> 227;
287 -> 286;
288 -> 287;
289 -> 252;
291 -> 290;
292 -> 0;
293 -> 0;
294 -> 0;
296 -> 292;
296 -> 293;
296 -> 294;
296 -> 295;
297 -> 291;
298 -> 296;
298 -> 297;
298 -> 290;
299 -> 298;
303 -> 300;
303 -> 301;
303 -> 302;
304 -> 234;
304 -> 227;
304 -> 233;
304 -> 300;
304 -> 303;
305 -> 304;
306 -> 246;
307 -> 255;
308 -> 255;
309 -> 252;
310 -> 0;
311 -> 0;
313 -> 310;
313 -> 312;
314 -> 311;
314 -> 312;
315 -> 312;
316 -> 313;
316 -> 312;
317 -> 314;
317 -> 312;
318 -> 0;
318 -> 312;
319 -> 315;
319 -> 312;
320 -> 312;
321 -> 316;
321 -> 317;
321 -> 318;
321 -> 319;
321 -> 320;
321 -> 312;
322 -> 321;
323 -> 0;
324 -> 0;
326 -> 323;
326 -> 325;
327 -> 324;
327 -> 325;
328 -> 325;
329 -> 326;
329 -> 325;
330 -> 327;
330 -> 325;
331 -> 0;
331 -> 325;
332 -> 328;
332 -> 325;
333 -> 325;
334 -> 329;
334 -> 330;
334 -> 331;
334 -> 332;
334 -> 333;
334 -> 325;
335 -> 334;
337 -> 322;
337 -> 321;
337 -> 336;
338 -> 337;
340 -> 335;
340 -> 334;
340 -> 339;
341 -> 340;
342 -> 0;
343 -> 0;
345 -> 342;
345 -> 344;
346 -> 343;
346 -> 344;
347 -> 344;
348 -> 345;
348 -> 344;
349 -> 346;
349 -> 344;
350 -> 0;
350 -> 344;
351 -> 347;
351 -> 344;
352 -> 344;
353 -> 348;
353 -> 349;
353 -> 350;
353 -> 351;
353 -> 352;
353 -> 344;
354 -> 353;
355 -> 0;
356 -> 0;
358 -> 355;
358 -> 357;
359 -> 356;
359 -> 357;
360 -> 357;
361 -> 358;
361 -> 357;
362 -> 359;
362 -> 357;
363 -> 0;
363 -> 357;
364 -> 360;
364 -> 357;
365 -> 357;
366 -> 361;
366 -> 362;
366 -> 363;
366 -> 364;
366 -> 365;
366 -> 357;
367 -> 366;
368 -> 0;
369 -> 0;
371 -> 368;
371 -> 370;
372 -> 369;
372 -> 370;
373 -> 370;
374 -> 371;
374 -> 370;
375 -> 372;
375 -> 370;
376 -> 0;
376 -> 370;
377 -> 373;
377 -> 370;
378 -> 370;
379 -> 374;
379 -> 375;
379 -> 376;
379 -> 377;
379 -> 378;
379 -> 370;
380 -> 379;
381 -> 0;
382 -> 0;
384 -> 381;
384 -> 383;
385 -> 382;
385 -> 383;
386 -> 383;
387 -> 384;
387 -> 383;
388 -> 385;
388 -> 383;
389 -> 0;
389 -> 383;
390 -> 386;
390 -> 383;
391 -> 383;
392 -> 387;
392 -> 388;
392 -> 389;
392 -> 390;
392 -> 391;
392 -> 383;
393 -> 392;
394 -> 0;
395 -> 0;
397 -> 394;
397 -> 396;
398 -> 395;
398 -> 396;
399 -> 396;
400 -> 397;
400 -> 396;
401 -> 398;
401 -> 396;
402 -> 0;
402 -> 396;
403 -> 399;
403 -> 396;
404 -> 396;
405 -> 400;
405 -> 401;
405 -> 402;
405 -> 403;
405 -> 404;
405 -> 396;
406 -> 405;
407 -> 0;
408 -> 0;
410 -> 407;
410 -> 409;
411 -> 408;
411 -> 409;
412 -> 409;
413 -> 410;
413 -> 409;
414 -> 411;
414 -> 409;
415 -> 0;
415 -> 409;
416 -> 412;
416 -> 409;
417 -> 409;
418 -> 413;
418 -> 414;
418 -> 415;
418 -> 416;
418 -> 417;
418 -> 409;
419 -> 418;
421 -> 322;
421 -> 321;
421 -> 420;
422 -> 421;
424 -> 335;
424 -> 334;
424 -> 423;
425 -> 424;
427 -> 354;
427 -> 353;
427 -> 426;
428 -> 427;
430 -> 367;
430 -> 366;
430 -> 429;
431 -> 430;
432 -> 0;
433 -> 322;
433 -> 321;
433 -> 432;
433 -> 0;
434 -> 433;
435 -> 0;
436 -> 335;
436 -> 334;
436 -> 435;
436 -> 0;
437 -> 436;
438 -> 0;
439 -> 406;
439 -> 405;
439 -> 438;
439 -> 0;
440 -> 439;
441 -> 0;
442 -> 354;
442 -> 353;
442 -> 441;
442 -> 0;
443 -> 442;
444 -> 0;
445 -> 0;
445 -> 444;
446 -> 445;
447 -> 206;
448 -> 215;
448 -> 447;
448 -> 206;
449 -> 448;
449 -> 206;
450 -> 322;
450 -> 449;
450 -> 321;
450 -> 206;
451 -> 450;
451 -> 218;
451 -> 206;
452 -> 207;
452 -> 206;
453 -> 208;
453 -> 206;
454 -> 451;
454 -> 206;
455 -> 219;
455 -> 206;
456 -> 221;
456 -> 206;
457 -> 206;
458 -> 457;
459 -> 458;
459 -> 206;
460 -> 206;
461 -> 206;
462 -> 452;
462 -> 461;
463 -> 453;
463 -> 461;
464 -> 454;
464 -> 461;
465 -> 455;
465 -> 461;
466 -> 456;
466 -> 461;
467 -> 459;
467 -> 461;
468 -> 460;
468 -> 461;
469 -> 460;
469 -> 461;
470 -> 462;
470 -> 461;
471 -> 466;
471 -> 461;
472 -> 463;
472 -> 461;
473 -> 461;
474 -> 471;
474 -> 473;
475 -> 472;
475 -> 473;
476 -> 474;
476 -> 473;
477 -> 473;
478 -> 476;
478 -> 477;
479 -> 478;
479 -> 477;
480 -> 479;
481 -> 0;
481 -> 480;
482 -> 481;
483 -> 482;
484 -> 483;
484 -> 480;
485 -> 473;
486 -> 475;
486 -> 485;
486 -> 473;
487 -> 484;
487 -> 486;
488 -> 464;
488 -> 461;
489 -> 465;
489 -> 461;
490 -> 467;
490 -> 461;
491 -> 468;
491 -> 461;
492 -> 469;
492 -> 461;
493 -> 461;
494 -> 470;
494 -> 493;
495 -> 487;
495 -> 493;
496 -> 488;
496 -> 493;
497 -> 489;
497 -> 493;
498 -> 490;
498 -> 493;
499 -> 491;
499 -> 493;
500 -> 492;
500 -> 493;
501 -> 494;
501 -> 493;
502 -> 495;
502 -> 493;
503 -> 496;
503 -> 493;
504 -> 497;
504 -> 493;
505 -> 498;
505 -> 493;
506 -> 499;
506 -> 493;
507 -> 500;
507 -> 493;
508 -> 493;
509 -> 508;
509 -> 493;
510 -> 493;
511 -> 501;
511 -> 510;
512 -> 502;
512 -> 510;
513 -> 503;
513 -> 510;
514 -> 504;
514 -> 510;
515 -> 505;
515 -> 510;
516 -> 506;
516 -> 510;
517 -> 507;
517 -> 510;
518 -> 509;
518 -> 510;
519 -> 514;
519 -> 510;
520 -> 516;
520 -> 510;
521 -> 510;
522 -> 519;
522 -> 521;
523 -> 520;
523 -> 521;
524 -> 511;
524 -> 521;
525 -> 524;
525 -> 204;
525 -> 521;
526 -> 525;
527 -> 523;
527 -> 525;
528 -> 522;
528 -> 525;
529 -> 525;
530 -> 526;
530 -> 529;
531 -> 527;
531 -> 529;
532 -> 528;
532 -> 529;
533 -> 526;
533 -> 529;
534 -> 529;
535 -> 532;
535 -> 534;
535 -> 529;
536 -> 228;
536 -> 535;
537 -> 530;
537 -> 529;
538 -> 0;
538 -> 529;
539 -> 538;
539 -> 533;
539 -> 529;
540 -> 529;
541 -> 537;
541 -> 539;
541 -> 540;
541 -> 0;
541 -> 529;
542 -> 541;
542 -> 529;
543 -> 536;
543 -> 529;
544 -> 531;
544 -> 529;
545 -> 529;
546 -> 542;
546 -> 543;
546 -> 544;
546 -> 545;
546 -> 541;
546 -> 227;
546 -> 529;
547 -> 529;
548 -> 546;
548 -> 547;
549 -> 547;
550 -> 547;
551 -> 548;
551 -> 546;
551 -> 550;
551 -> 547;
552 -> 549;
552 -> 547;
553 -> 547;
554 -> 551;
554 -> 546;
554 -> 550;
554 -> 552;
554 -> 553;
554 -> 549;
554 -> 547;
555 -> 547;
556 -> 555;
556 -> 549;
556 -> 547;
557 -> 549;
557 -> 547;
558 -> 547;
559 -> 557;
559 -> 558;
559 -> 549;
559 -> 556;
559 -> 547;
560 -> 548;
560 -> 547;
561 -> 560;
561 -> 526;
561 -> 525;
562 -> 526;
562 -> 510;
563 -> 510;
564 -> 513;
564 -> 563;
564 -> 510;
565 -> 0;
565 -> 510;
566 -> 518;
566 -> 510;
567 -> 515;
567 -> 562;
567 -> 512;
567 -> 513;
567 -> 510;
569 -> 568;
570 -> 569;
571 -> 570;
572 -> 567;
572 -> 510;
573 -> 510;
574 -> 572;
574 -> 573;
575 -> 571;
575 -> 573;
576 -> 575;
577 -> 510;
578 -> 0;
580 -> 578;
580 -> 579;
581 -> 580;
582 -> 449;
584 -> 582;
584 -> 583;
586 -> 584;
586 -> 585;
587 -> 586;
588 -> 567;
588 -> 526;
588 -> 561;
588 -> 546;
588 -> 483;
588 -> 0;
588 -> 450;
588 -> 510;
589 -> 510;
590 -> 588;
590 -> 589;
591 -> 588;
591 -> 589;
592 -> 588;
592 -> 589;
593 -> 588;
593 -> 589;
594 -> 590;
594 -> 589;
595 -> 593;
595 -> 589;
596 -> 591;
596 -> 589;
597 -> 592;
597 -> 589;
598 -> 589;
599 -> 589;
600 -> 594;
600 -> 599;
601 -> 595;
601 -> 599;
602 -> 596;
602 -> 599;
603 -> 597;
603 -> 599;
604 -> 598;
604 -> 599;
605 -> 598;
605 -> 599;
606 -> 598;
606 -> 599;
607 -> 598;
607 -> 599;
608 -> 599;
609 -> 601;
609 -> 608;
609 -> 599;
610 -> 607;
610 -> 599;
611 -> 603;
611 -> 599;
612 -> 600;
612 -> 599;
613 -> 601;
613 -> 599;
614 -> 611;
614 -> 599;
615 -> 604;
615 -> 599;
616 -> 605;
616 -> 599;
617 -> 606;
617 -> 599;
618 -> 607;
618 -> 599;
619 -> 599;
620 -> 0;
620 -> 599;
621 -> 601;
621 -> 611;
621 -> 599;
622 -> 599;
623 -> 620;
623 -> 622;
624 -> 621;
624 -> 622;
625 -> 621;
625 -> 622;
626 -> 620;
626 -> 622;
627 -> 618;
627 -> 622;
628 -> 619;
628 -> 622;
629 -> 619;
629 -> 622;
630 -> 623;
630 -> 622;
631 -> 624;
631 -> 622;
632 -> 625;
632 -> 622;
633 -> 626;
633 -> 622;
634 -> 627;
634 -> 622;
635 -> 622;
636 -> 635;
636 -> 630;
636 -> 631;
636 -> 632;
636 -> 633;
636 -> 634;
636 -> 0;
636 -> 611;
636 -> 622;
637 -> 635;
637 -> 622;
638 -> 628;
638 -> 635;
638 -> 622;
639 -> 599;
640 -> 612;
640 -> 639;
641 -> 613;
641 -> 639;
642 -> 614;
642 -> 639;
643 -> 615;
643 -> 639;
644 -> 616;
644 -> 639;
645 -> 617;
645 -> 639;
646 -> 618;
646 -> 639;
647 -> 619;
647 -> 639;
648 -> 619;
648 -> 639;
649 -> 619;
649 -> 639;
650 -> 619;
650 -> 639;
651 -> 619;
651 -> 639;
652 -> 619;
652 -> 639;
653 -> 640;
653 -> 639;
654 -> 641;
654 -> 639;
655 -> 642;
655 -> 639;
656 -> 643;
656 -> 639;
657 -> 644;
657 -> 639;
658 -> 645;
658 -> 639;
659 -> 646;
659 -> 639;
660 -> 647;
660 -> 639;
661 -> 648;
661 -> 639;
662 -> 649;
662 -> 639;
663 -> 649;
663 -> 636;
663 -> 639;
664 -> 663;
664 -> 636;
664 -> 637;
664 -> 638;
664 -> 639;
665 -> 650;
665 -> 639;
666 -> 651;
666 -> 639;
667 -> 639;
668 -> 653;
668 -> 667;
669 -> 654;
669 -> 667;
670 -> 655;
670 -> 667;
671 -> 656;
671 -> 667;
672 -> 657;
672 -> 667;
673 -> 658;
673 -> 667;
674 -> 659;
674 -> 667;
675 -> 660;
675 -> 667;
676 -> 661;
676 -> 667;
677 -> 662;
677 -> 667;
678 -> 664;
678 -> 667;
679 -> 665;
679 -> 667;
680 -> 666;
680 -> 667;
681 -> 652;
681 -> 667;
682 -> 668;
682 -> 667;
683 -> 670;
683 -> 667;
684 -> 678;
684 -> 667;
685 -> 674;
685 -> 667;
686 -> 679;
686 -> 667;
687 -> 680;
687 -> 667;
688 -> 667;
689 -> 688;
689 -> 682;
689 -> 683;
689 -> 684;
689 -> 685;
689 -> 686;
689 -> 687;
689 -> 611;
689 -> 664;
689 -> 667;
690 -> 688;
690 -> 667;
691 -> 688;
691 -> 667;
692 -> 688;
692 -> 667;
693 -> 688;
693 -> 667;
694 -> 688;
694 -> 667;
695 -> 688;
695 -> 667;
696 -> 688;
696 -> 667;
697 -> 688;
697 -> 667;
698 -> 688;
698 -> 667;
699 -> 688;
699 -> 667;
700 -> 688;
700 -> 667;
701 -> 688;
701 -> 667;
702 -> 688;
702 -> 667;
703 -> 688;
703 -> 667;
704 -> 688;
704 -> 667;
705 -> 688;
705 -> 667;
706 -> 688;
706 -> 667;
707 -> 688;
707 -> 667;
708 -> 688;
708 -> 667;
709 -> 688;
709 -> 667;
710 -> 688;
710 -> 667;
711 -> 688;
711 -> 667;
712 -> 688;
712 -> 667;
713 -> 688;
713 -> 667;
714 -> 688;
714 -> 667;
715 -> 688;
715 -> 667;
716 -> 667;
717 -> 716;
717 -> 688;
717 -> 667;
718 -> 688;
718 -> 667;
719 -> 718;
719 -> 689;
719 -> 690;
719 -> 691;
719 -> 692;
719 -> 693;
719 -> 694;
719 -> 695;
719 -> 696;
719 -> 697;
719 -> 698;
719 -> 699;
719 -> 700;
719 -> 701;
719 -> 702;
719 -> 703;
719 -> 704;
719 -> 705;
719 -> 706;
719 -> 707;
719 -> 708;
719 -> 709;
719 -> 710;
719 -> 711;
719 -> 712;
719 -> 713;
719 -> 714;
719 -> 715;
719 -> 717;
719 -> 716;
719 -> 667;
720 -> 719;
720 -> 688;
720 -> 667;
721 -> 669;
721 -> 688;
721 -> 667;
722 -> 688;
722 -> 667;
723 -> 667;
724 -> 667;
725 -> 722;
725 -> 724;
726 -> 723;
726 -> 724;
727 -> 726;
727 -> 724;
728 -> 726;
728 -> 724;
729 -> 726;
729 -> 724;
730 -> 725;
730 -> 726;
730 -> 724;
731 -> 723;
731 -> 688;
731 -> 667;
732 -> 688;
732 -> 719;
732 -> 667;
733 -> 732;
733 -> 719;
733 -> 720;
733 -> 721;
733 -> 731;
733 -> 730;
733 -> 728;
733 -> 729;
733 -> 667;
734 -> 733;
734 -> 688;
734 -> 667;
735 -> 688;
735 -> 733;
735 -> 667;
736 -> 735;
736 -> 733;
736 -> 734;
736 -> 667;
737 -> 736;
737 -> 688;
737 -> 667;
738 -> 688;
738 -> 736;
738 -> 667;
739 -> 738;
739 -> 736;
739 -> 737;
739 -> 667;
740 -> 739;
740 -> 688;
740 -> 667;
741 -> 688;
741 -> 739;
741 -> 667;
742 -> 741;
742 -> 739;
742 -> 740;
742 -> 667;
743 -> 742;
743 -> 688;
743 -> 667;
744 -> 688;
744 -> 667;
745 -> 744;
745 -> 742;
745 -> 743;
745 -> 667;
746 -> 745;
746 -> 688;
746 -> 667;
747 -> 677;
747 -> 745;
747 -> 667;
748 -> 667;
749 -> 747;
749 -> 748;
750 -> 748;
751 -> 749;
751 -> 748;
752 -> 751;
752 -> 745;
752 -> 746;
752 -> 748;
753 -> 0;
753 -> 748;
754 -> 753;
754 -> 750;
754 -> 748;
755 -> 754;
755 -> 667;
756 -> 755;
756 -> 688;
756 -> 667;
757 -> 674;
757 -> 667;
758 -> 757;
759 -> 671;
759 -> 758;
759 -> 757;
760 -> 672;
760 -> 758;
760 -> 757;
761 -> 759;
761 -> 760;
761 -> 757;
762 -> 673;
762 -> 758;
762 -> 757;
763 -> 761;
763 -> 762;
763 -> 757;
764 -> 676;
764 -> 667;
765 -> 688;
765 -> 745;
765 -> 746;
765 -> 756;
765 -> 764;
766 -> 764;
767 -> 688;
767 -> 766;
768 -> 767;
768 -> 765;
768 -> 766;
769 -> 675;
769 -> 764;
770 -> 765;
770 -> 768;
770 -> 769;
770 -> 764;
771 -> 770;
771 -> 688;
771 -> 764;
772 -> 677;
772 -> 688;
772 -> 667;
773 -> 688;
773 -> 770;
773 -> 667;
774 -> 667;
775 -> 688;
775 -> 770;
775 -> 774;
775 -> 667;
776 -> 599;
777 -> 602;
777 -> 776;
777 -> 599;
778 -> 602;
778 -> 777;
779 -> 777;
780 -> 778;
780 -> 779;
781 -> 619;
781 -> 779;
782 -> 779;
783 -> 780;
783 -> 782;
783 -> 779;
784 -> 780;
784 -> 779;
785 -> 784;
785 -> 770;
785 -> 771;
785 -> 772;
785 -> 779;
786 -> 779;
787 -> 781;
787 -> 785;
787 -> 779;
788 -> 786;
788 -> 779;
789 -> 787;
789 -> 785;
789 -> 779;
790 -> 788;
790 -> 789;
790 -> 786;
790 -> 785;
790 -> 779;
791 -> 779;
792 -> 779;
793 -> 780;
793 -> 779;
794 -> 793;
794 -> 790;
794 -> 779;
795 -> 794;
796 -> 794;
797 -> 794;
798 -> 781;
798 -> 797;
798 -> 794;
799 -> 794;
800 -> 786;
800 -> 799;
800 -> 797;
800 -> 794;
801 -> 791;
801 -> 794;
801 -> 800;
802 -> 792;
802 -> 794;
803 -> 786;
803 -> 800;
803 -> 779;
804 -> 781;
804 -> 803;
804 -> 779;
805 -> 780;
805 -> 779;
806 -> 779;
807 -> 805;
807 -> 806;
808 -> 787;
808 -> 806;
809 -> 808;
809 -> 803;
809 -> 806;
810 -> 808;
810 -> 803;
810 -> 806;
811 -> 808;
811 -> 803;
811 -> 806;
812 -> 808;
812 -> 803;
812 -> 806;
813 -> 808;
813 -> 803;
813 -> 806;
814 -> 807;
814 -> 806;
815 -> 808;
815 -> 803;
815 -> 814;
815 -> 806;
816 -> 806;
817 -> 813;
817 -> 816;
817 -> 806;
818 -> 815;
818 -> 817;
819 -> 817;
820 -> 818;
820 -> 819;
821 -> 808;
821 -> 819;
822 -> 820;
822 -> 819;
823 -> 821;
823 -> 815;
823 -> 819;
824 -> 819;
825 -> 819;
826 -> 822;
826 -> 825;
827 -> 823;
827 -> 825;
828 -> 823;
828 -> 825;
829 -> 823;
829 -> 825;
830 -> 823;
830 -> 825;
831 -> 824;
831 -> 825;
832 -> 824;
832 -> 825;
833 -> 825;
833 -> 826;
833 -> 827;
833 -> 828;
833 -> 829;
833 -> 830;
833 -> 815;
834 -> 824;
834 -> 817;
835 -> 834;
835 -> 779;
836 -> 781;
836 -> 833;
836 -> 779;
837 -> 801;
837 -> 779;
838 -> 835;
838 -> 779;
839 -> 779;
840 -> 836;
840 -> 839;
841 -> 837;
841 -> 839;
842 -> 838;
842 -> 839;
843 -> 781;
843 -> 839;
844 -> 843;
844 -> 833;
844 -> 839;
845 -> 839;
846 -> 843;
846 -> 845;
847 -> 846;
847 -> 833;
847 -> 845;
848 -> 847;
848 -> 845;
849 -> 848;
849 -> 839;
850 -> 843;
850 -> 833;
850 -> 825;
850 -> 831;
850 -> 839;
851 -> 839;
852 -> 850;
852 -> 851;
853 -> 852;
853 -> 850;
853 -> 851;
854 -> 839;
855 -> 853;
855 -> 854;
856 -> 840;
856 -> 839;
857 -> 841;
857 -> 839;
858 -> 842;
858 -> 839;
859 -> 839;
860 -> 839;
861 -> 844;
861 -> 860;
862 -> 844;
862 -> 860;
863 -> 844;
863 -> 860;
864 -> 849;
864 -> 860;
865 -> 853;
865 -> 860;
866 -> 855;
866 -> 860;
867 -> 855;
867 -> 860;
868 -> 856;
868 -> 860;
869 -> 857;
869 -> 860;
870 -> 858;
870 -> 860;
871 -> 855;
871 -> 860;
872 -> 859;
872 -> 860;
873 -> 859;
873 -> 860;
874 -> 864;
874 -> 860;
875 -> 865;
875 -> 860;
876 -> 866;
876 -> 860;
877 -> 870;
877 -> 855;
877 -> 860;
878 -> 872;
878 -> 860;
879 -> 860;
880 -> 874;
880 -> 879;
881 -> 875;
881 -> 879;
882 -> 876;
882 -> 879;
883 -> 878;
883 -> 879;
884 -> 873;
884 -> 879;
885 -> 883;
885 -> 879;
886 -> 879;
887 -> 886;
887 -> 879;
888 -> 886;
888 -> 879;
889 -> 886;
889 -> 879;
890 -> 886;
890 -> 879;
891 -> 886;
891 -> 879;
892 -> 886;
892 -> 879;
893 -> 886;
893 -> 879;
894 -> 886;
894 -> 879;
895 -> 886;
895 -> 879;
896 -> 886;
896 -> 879;
897 -> 886;
897 -> 879;
898 -> 886;
898 -> 879;
899 -> 886;
899 -> 879;
900 -> 886;
900 -> 879;
901 -> 886;
901 -> 879;
902 -> 886;
902 -> 879;
903 -> 886;
903 -> 879;
904 -> 886;
904 -> 879;
905 -> 886;
905 -> 879;
906 -> 886;
906 -> 879;
907 -> 886;
907 -> 879;
908 -> 886;
908 -> 879;
909 -> 886;
909 -> 879;
910 -> 886;
910 -> 879;
911 -> 886;
911 -> 879;
912 -> 886;
912 -> 879;
913 -> 879;
914 -> 913;
914 -> 886;
914 -> 879;
915 -> 886;
915 -> 879;
916 -> 886;
916 -> 879;
917 -> 879;
918 -> 879;
919 -> 916;
919 -> 918;
920 -> 917;
920 -> 918;
921 -> 920;
921 -> 918;
922 -> 920;
922 -> 918;
923 -> 920;
923 -> 918;
924 -> 919;
924 -> 920;
924 -> 918;
925 -> 917;
925 -> 886;
925 -> 879;
926 -> 886;
926 -> 879;
927 -> 879;
928 -> 877;
928 -> 927;
929 -> 927;
930 -> 928;
930 -> 927;
931 -> 930;
931 -> 877;
932 -> 930;
933 -> 931;
933 -> 932;
934 -> 867;
934 -> 879;
935 -> 934;
936 -> 880;
936 -> 935;
936 -> 934;
937 -> 881;
937 -> 935;
937 -> 934;
938 -> 936;
938 -> 937;
938 -> 934;
939 -> 882;
939 -> 935;
939 -> 934;
940 -> 938;
940 -> 939;
940 -> 934;
941 -> 868;
941 -> 869;
942 -> 886;
942 -> 869;
943 -> 868;
943 -> 942;
943 -> 877;
943 -> 933;
943 -> 869;
944 -> 868;
944 -> 886;
944 -> 869;
945 -> 886;
945 -> 943;
945 -> 879;
946 -> 879;
947 -> 886;
947 -> 943;
947 -> 946;
947 -> 879;
948 -> 859;
948 -> 779;
949 -> 948;
949 -> 777;
950 -> 949;
950 -> 943;
950 -> 599;
951 -> 949;
951 -> 599;
952 -> 588;
952 -> 951;
952 -> 943;
952 -> 944;
952 -> 870;
952 -> 510;
953 -> 952;
953 -> 510;
954 -> 510;
955 -> 953;
955 -> 954;
956 -> 954;
957 -> 955;
957 -> 956;
958 -> 956;
959 -> 957;
959 -> 952;
959 -> 958;
960 -> 958;
961 -> 959;
961 -> 952;
961 -> 960;
961 -> 958;
962 -> 959;
962 -> 952;
962 -> 961;
963 -> 961;
964 -> 962;
964 -> 963;
965 -> 962;
965 -> 963;
966 -> 962;
966 -> 963;
967 -> 962;
967 -> 963;
968 -> 962;
968 -> 963;
969 -> 963;
970 -> 963;
971 -> 963;
972 -> 963;
973 -> 963;
974 -> 0;
974 -> 963;
975 -> 964;
975 -> 963;
976 -> 969;
976 -> 975;
977 -> 975;
978 -> 965;
978 -> 975;
979 -> 966;
979 -> 975;
980 -> 967;
980 -> 975;
981 -> 968;
981 -> 975;
982 -> 970;
982 -> 975;
983 -> 971;
983 -> 975;
984 -> 972;
984 -> 975;
985 -> 973;
985 -> 975;
986 -> 974;
986 -> 975;
987 -> 975;
988 -> 976;
988 -> 987;
989 -> 977;
989 -> 987;
990 -> 978;
990 -> 987;
991 -> 979;
991 -> 987;
992 -> 980;
992 -> 987;
993 -> 981;
993 -> 987;
994 -> 982;
994 -> 987;
995 -> 983;
995 -> 987;
996 -> 984;
996 -> 987;
997 -> 985;
997 -> 987;
998 -> 986;
998 -> 987;
999 -> 989;
999 -> 952;
999 -> 987;
1000 -> 999;
1000 -> 0;
1000 -> 987;
1001 -> 989;
1001 -> 987;
1002 -> 990;
1002 -> 987;
1003 -> 993;
1003 -> 987;
1004 -> 997;
1004 -> 987;
1005 -> 998;
1005 -> 987;
1006 -> 987;
1007 -> 1001;
1007 -> 1006;
1008 -> 1002;
1008 -> 1006;
1009 -> 1003;
1009 -> 1006;
1010 -> 1004;
1010 -> 1006;
1011 -> 1005;
1011 -> 1006;
1012 -> 1007;
1012 -> 1008;
1012 -> 1009;
1012 -> 1006;
1013 -> 1007;
1013 -> 1006;
1014 -> 1012;
1014 -> 1006;
1015 -> 1010;
1015 -> 1013;
1015 -> 1014;
1015 -> 973;
1015 -> 1012;
1015 -> 1006;
1016 -> 1012;
1016 -> 1006;
1017 -> 1011;
1017 -> 1016;
1017 -> 0;
1017 -> 1015;
1017 -> 1006;
1018 -> 987;
1019 -> 989;
1019 -> 987;
1020 -> 988;
1020 -> 1019;
1020 -> 969;
1020 -> 1017;
1020 -> 987;
1021 -> 989;
1021 -> 987;
1022 -> 994;
1022 -> 970;
1022 -> 987;
1023 -> 994;
1023 -> 1021;
1023 -> 1022;
1023 -> 970;
1023 -> 1020;
1023 -> 987;
1024 -> 969;
1024 -> 1023;
1024 -> 963;
1025 -> 970;
1025 -> 1023;
1025 -> 963;
1026 -> 971;
1026 -> 963;
1027 -> 972;
1027 -> 963;
1028 -> 1017;
1028 -> 963;
1029 -> 963;
1030 -> 963;
1031 -> 1024;
1031 -> 1030;
1032 -> 1025;
1032 -> 1030;
1033 -> 1026;
1033 -> 1030;
1034 -> 1027;
1034 -> 1030;
1035 -> 1025;
1035 -> 1030;
1036 -> 1028;
1036 -> 1030;
1037 -> 1029;
1037 -> 1030;
1038 -> 1037;
1038 -> 1030;
1039 -> 1037;
1039 -> 1030;
1040 -> 1037;
1040 -> 1030;
1041 -> 1037;
1041 -> 1030;
1042 -> 1037;
1042 -> 1030;
1043 -> 1031;
1043 -> 1030;
1044 -> 1031;
1044 -> 1024;
1044 -> 1030;
1045 -> 1031;
1045 -> 1030;
1046 -> 1035;
1046 -> 1043;
1046 -> 1030;
1047 -> 0;
1047 -> 1030;
1048 -> 1031;
1048 -> 1037;
1048 -> 1030;
1049 -> 1032;
1049 -> 1037;
1049 -> 1030;
1050 -> 1033;
1050 -> 1037;
1050 -> 1030;
1051 -> 1034;
1051 -> 1037;
1051 -> 1030;
1052 -> 1035;
1052 -> 1037;
1052 -> 1030;
1053 -> 1036;
1053 -> 1037;
1053 -> 1030;
1054 -> 1029;
1054 -> 961;
1055 -> 961;
1056 -> 962;
1056 -> 1054;
1056 -> 1055;
1056 -> 1049;
1056 -> 1050;
1056 -> 1051;
1056 -> 1052;
1056 -> 1053;
1056 -> 1048;
1056 -> 1046;
1056 -> 1024;
1056 -> 1026;
1056 -> 1027;
1056 -> 961;
1057 -> 959;
1057 -> 1056;
1057 -> 958;
1058 -> 1057;
1058 -> 956;
1059 -> 1058;
1059 -> 954;
1060 -> 1059;
1060 -> 1056;
1060 -> 954;
1061 -> 954;
1062 -> 1059;
1062 -> 1061;
1062 -> 1056;
1062 -> 954;
1063 -> 0;
1063 -> 954;
1064 -> 1062;
1064 -> 1063;
1064 -> 954;
1065 -> 517;
1065 -> 1064;
1065 -> 510;
1066 -> 952;
1066 -> 510;
1067 -> 1066;
1067 -> 206;
1068 -> 209;
1068 -> 206;
1069 -> 210;
1069 -> 206;
1070 -> 211;
1070 -> 206;
1071 -> 212;
1071 -> 206;
1072 -> 213;
1072 -> 206;
1073 -> 214;
1073 -> 206;
1074 -> 215;
1074 -> 206;
1075 -> 216;
1075 -> 206;
1076 -> 217;
1076 -> 206;
1077 -> 220;
1077 -> 206;
1078 -> 222;
1078 -> 206;
1079 -> 206;
1080 -> 1067;
1080 -> 1079;
1081 -> 1068;
1081 -> 1079;
1082 -> 1069;
1082 -> 1079;
1083 -> 1070;
1083 -> 1079;
1084 -> 1071;
1084 -> 1079;
1085 -> 1072;
1085 -> 1079;
1086 -> 1073;
1086 -> 1079;
1087 -> 1074;
1087 -> 1079;
1088 -> 1075;
1088 -> 1079;
1089 -> 1076;
1089 -> 1079;
1090 -> 1077;
1090 -> 1079;
1091 -> 1078;
1091 -> 1079;
1092 -> 223;
1092 -> 1079;
1093 -> 1080;
1093 -> 1079;
1094 -> 1081;
1094 -> 1079;
1095 -> 1082;
1095 -> 1079;
1096 -> 1083;
1096 -> 1079;
1097 -> 1079;
1098 -> 1096;
1098 -> 1097;
1099 -> 1092;
1099 -> 1097;
1100 -> 1097;
1101 -> 1098;
1101 -> 1100;
1101 -> 1097;
1102 -> 1101;
1103 -> 1084;
1103 -> 1079;
1104 -> 1085;
1104 -> 1079;
1105 -> 1079;
1106 -> 1104;
1106 -> 1105;
1107 -> 1092;
1107 -> 1105;
1108 -> 1105;
1109 -> 1106;
1109 -> 1108;
1109 -> 1105;
1110 -> 1109;
1111 -> 1086;
1111 -> 1079;
1112 -> 1087;
1112 -> 1079;
1113 -> 1088;
1113 -> 1079;
1114 -> 1089;
1114 -> 1079;
1115 -> 1090;
1115 -> 1079;
1116 -> 1091;
1116 -> 1079;
1117 -> 1079;
1118 -> 1093;
1118 -> 1117;
1119 -> 1094;
1119 -> 1117;
1120 -> 1095;
1120 -> 1117;
1121 -> 1102;
1121 -> 1117;
1122 -> 1103;
1122 -> 1117;
1123 -> 1110;
1123 -> 1117;
1124 -> 1111;
1124 -> 1117;
1125 -> 1112;
1125 -> 1117;
1126 -> 1113;
1126 -> 1117;
1127 -> 1114;
1127 -> 1117;
1128 -> 1115;
1128 -> 1117;
1129 -> 1116;
1129 -> 1117;
1130 -> 1092;
1130 -> 1117;
1131 -> 1118;
1131 -> 1117;
1132 -> 1117;
1133 -> 1125;
1133 -> 1132;
1133 -> 1117;
1134 -> 1117;
1135 -> 1121;
1135 -> 1134;
1135 -> 1117;
1136 -> 1117;
1137 -> 1118;
1137 -> 1117;
1138 -> 1120;
1138 -> 1117;
1139 -> 1119;
1139 -> 1117;
1140 -> 1124;
1140 -> 1117;
1141 -> 1125;
1141 -> 1117;
1142 -> 1126;
1142 -> 1117;
1143 -> 1117;
1144 -> 1143;
1144 -> 1127;
1144 -> 1117;
1145 -> 1122;
1145 -> 1117;
1146 -> 1123;
1146 -> 1117;
1147 -> 1128;
1147 -> 1117;
1148 -> 1129;
1148 -> 1117;
1149 -> 1117;
1150 -> 1137;
1150 -> 1149;
1151 -> 1138;
1151 -> 1149;
1152 -> 1139;
1152 -> 1149;
1153 -> 1140;
1153 -> 1149;
1154 -> 1141;
1154 -> 1149;
1155 -> 1142;
1155 -> 1149;
1156 -> 1144;
1156 -> 1149;
1157 -> 1145;
1157 -> 1149;
1158 -> 1146;
1158 -> 1149;
1159 -> 1147;
1159 -> 1149;
1160 -> 1148;
1160 -> 1149;
1161 -> 1130;
1161 -> 1149;
1162 -> 1150;
1162 -> 1149;
1163 -> 1161;
1163 -> 195;
1163 -> 1149;
1164 -> 1151;
1164 -> 1149;
1165 -> 1149;
1166 -> 1149;
1167 -> 1162;
1167 -> 1166;
1168 -> 1163;
1168 -> 1166;
1169 -> 1164;
1169 -> 1166;
1170 -> 1165;
1170 -> 1166;
1171 -> 1170;
1171 -> 1166;
1172 -> 1170;
1172 -> 1166;
1173 -> 1170;
1173 -> 1166;
1174 -> 1170;
1174 -> 1166;
1175 -> 1170;
1175 -> 1166;
1176 -> 1170;
1176 -> 1166;
1177 -> 1167;
1177 -> 1170;
1177 -> 1166;
1178 -> 1169;
1178 -> 1170;
1178 -> 1166;
1179 -> 1168;
1179 -> 1170;
1179 -> 1166;
1180 -> 1154;
1180 -> 1149;
1181 -> 1155;
1181 -> 1149;
1182 -> 1156;
1182 -> 1149;
1183 -> 1152;
1183 -> 1149;
1184 -> 1159;
1184 -> 1149;
1185 -> 1160;
1185 -> 1149;
1186 -> 1153;
1186 -> 1149;
1187 -> 1149;
1188 -> 1180;
1188 -> 1187;
1189 -> 1181;
1189 -> 1187;
1190 -> 1182;
1190 -> 1187;
1191 -> 1183;
1191 -> 1187;
1192 -> 1184;
1192 -> 1187;
1193 -> 1185;
1193 -> 1187;
1194 -> 1186;
1194 -> 1187;
1195 -> 1165;
1195 -> 1187;
1196 -> 0;
1197 -> 1196;
1198 -> 1197;
1199 -> 1195;
1199 -> 1178;
1199 -> 1187;
1200 -> 1187;
1201 -> 1199;
1201 -> 1200;
1202 -> 1201;
1202 -> 1200;
1203 -> 1198;
1203 -> 1197;
1203 -> 1202;
1203 -> 1200;
1204 -> 1203;
1204 -> 1187;
1205 -> 1191;
1205 -> 1187;
1206 -> 1192;
1206 -> 1187;
1207 -> 1187;
1208 -> 1204;
1208 -> 1207;
1209 -> 1205;
1209 -> 1207;
1210 -> 1206;
1210 -> 1207;
1211 -> 1195;
1211 -> 1207;
1213 -> 1211;
1213 -> 1177;
1213 -> 1207;
1214 -> 1209;
1214 -> 1207;
1215 -> 1210;
1215 -> 1207;
1216 -> 1207;
1217 -> 1213;
1217 -> 1214;
1217 -> 1215;
1217 -> 1216;
1217 -> 1208;
1217 -> 1064;
1217 -> 1203;
1217 -> 1207;
1218 -> 1217;
1218 -> 1216;
1219 -> 1217;
1219 -> 1216;
1220 -> 1217;
1220 -> 1216;
1221 -> 1217;
1221 -> 1216;
1222 -> 1217;
1222 -> 1216;
1223 -> 1217;
1223 -> 1216;
1224 -> 1218;
1224 -> 1216;
1225 -> 1216;
1226 -> 1224;
1226 -> 1225;
1227 -> 1225;
1228 -> 1226;
1228 -> 1225;
1229 -> 1225;
1230 -> 1228;
1230 -> 1229;
1231 -> 1229;
1232 -> 1230;
1232 -> 1217;
1232 -> 1229;
1233 -> 1229;
1234 -> 1232;
1234 -> 1233;
1235 -> 1229;
1236 -> 1234;
1236 -> 1235;
1236 -> 1229;
1237 -> 1230;
1237 -> 1234;
1237 -> 1229;
1238 -> 1229;
1239 -> 1237;
1239 -> 1238;
1240 -> 1238;
1241 -> 1239;
1241 -> 1240;
1242 -> 1241;
1242 -> 1237;
1242 -> 1240;
1243 -> 1241;
1243 -> 1242;
1244 -> 1242;
1245 -> 1243;
1245 -> 1244;
1246 -> 1244;
1247 -> 1245;
1247 -> 1246;
1248 -> 1246;
1249 -> 1247;
1249 -> 1243;
1249 -> 1248;
1250 -> 1249;
1250 -> 1246;
1251 -> 1250;
1251 -> 1244;
1252 -> 1243;
1252 -> 1244;
1253 -> 1252;
1253 -> 1251;
1253 -> 1244;
1254 -> 1243;
1254 -> 1244;
1255 -> 1244;
1256 -> 1241;
1256 -> 1253;
1256 -> 1242;
1257 -> 1241;
1257 -> 1253;
1257 -> 1240;
1258 -> 1257;
1258 -> 1238;
1259 -> 1231;
1259 -> 1229;
1260 -> 1259;
1260 -> 1225;
1261 -> 1225;
1262 -> 1260;
1262 -> 1261;
1262 -> 1225;
1263 -> 1227;
1263 -> 1225;
1264 -> 1263;
1264 -> 1216;
1265 -> 0;
1265 -> 1216;
1266 -> 1264;
1266 -> 1216;
1267 -> 1216;
1268 -> 1218;
1268 -> 1267;
1268 -> 1216;
1269 -> 1264;
1269 -> 1216;
1270 -> 1267;
1270 -> 1269;
1270 -> 1268;
1270 -> 1227;
1270 -> 1258;
1270 -> 1216;
1271 -> 1270;
1272 -> 1265;
1272 -> 1270;
1273 -> 1220;
1273 -> 1270;
1274 -> 1221;
1274 -> 1270;
1275 -> 1270;
1276 -> 1271;
1276 -> 1275;
1277 -> 1272;
1277 -> 1275;
1278 -> 1273;
1278 -> 1275;
1279 -> 1274;
1279 -> 1275;
1280 -> 1276;
1280 -> 1258;
1280 -> 1227;
1280 -> 1267;
1280 -> 1268;
1280 -> 1270;
1280 -> 1275;
1281 -> 1280;
1282 -> 1280;
1283 -> 1282;
1283 -> 1258;
1283 -> 1270;
1283 -> 1267;
1283 -> 1268;
1283 -> 1227;
1283 -> 1280;
1284 -> 1282;
1284 -> 1283;
1284 -> 0;
1284 -> 1280;
1285 -> 1284;
1285 -> 1280;
1286 -> 1283;
1286 -> 1285;
1287 -> 1286;
1287 -> 1285;
1288 -> 1280;
1289 -> 1287;
1289 -> 1288;
1289 -> 1286;
1289 -> 1280;
1290 -> 1277;
1290 -> 1289;
1290 -> 1265;
1290 -> 0;
1290 -> 1280;
1291 -> 1283;
1291 -> 1280;
1292 -> 1280;
1293 -> 1291;
1293 -> 1292;
1294 -> 1293;
1294 -> 1289;
1294 -> 0;
1294 -> 1292;
1295 -> 1294;
1295 -> 1292;
1296 -> 1295;
1297 -> 1295;
1298 -> 1284;
1298 -> 1295;
1299 -> 1298;
1300 -> 1287;
1300 -> 1299;
1300 -> 1296;
1300 -> 1298;
1301 -> 1277;
1301 -> 1300;
1301 -> 1290;
1301 -> 1298;
1302 -> 1287;
1302 -> 1298;
1303 -> 449;
1303 -> 1298;
1304 -> 1296;
1304 -> 1298;
1305 -> 1298;
1306 -> 1302;
1306 -> 1303;
1306 -> 1304;
1306 -> 1305;
1306 -> 1300;
1306 -> 1296;
1306 -> 1298;
1307 -> 1306;
1307 -> 1295;
1308 -> 1278;
1308 -> 1306;
1308 -> 1307;
1308 -> 1295;
1309 -> 1295;
1310 -> 1308;
1311 -> 1277;
1311 -> 1308;
1311 -> 1301;
1312 -> 1308;
1313 -> 1308;
1314 -> 1275;
1315 -> 1218;
1315 -> 1216;
1316 -> 1219;
1316 -> 1216;
1317 -> 1221;
1317 -> 1216;
1318 -> 1222;
1318 -> 1216;
1319 -> 1223;
1319 -> 1216;
1320 -> 1216;
1321 -> 1315;
1321 -> 1320;
1322 -> 1316;
1322 -> 1320;
1323 -> 1317;
1323 -> 1320;
1324 -> 1318;
1324 -> 1320;
1325 -> 1319;
1325 -> 1320;
1326 -> 1320;
1327 -> 1325;
1327 -> 1326;
1327 -> 1320;
1328 -> 0;
1328 -> 1327;
1329 -> 1320;
1330 -> 1320;
1331 -> 1320;
1332 -> 1328;
1332 -> 0;
1332 -> 1320;
1333 -> 1332;
1333 -> 1320;
1334 -> 1321;
1334 -> 1308;
1334 -> 1320;
1335 -> 1320;
1336 -> 1334;
1336 -> 1335;
1337 -> 1335;
1338 -> 1336;
1338 -> 1337;
1339 -> 1337;
1340 -> 1339;
1341 -> 1338;
1341 -> 1335;
1342 -> 1320;
1343 -> 1320;
1344 -> 1329;
1344 -> 1320;
1345 -> 1320;
1346 -> 1333;
1346 -> 1320;
1347 -> 1322;
1347 -> 1320;
1348 -> 1328;
1348 -> 1320;
1349 -> 1341;
1349 -> 1320;
1350 -> 1324;
1350 -> 1320;
1351 -> 1344;
1351 -> 1345;
1351 -> 1346;
1351 -> 1347;
1351 -> 1348;
1351 -> 1349;
1351 -> 1350;
1351 -> 1321;
1351 -> 1329;
1351 -> 1341;
1351 -> 1328;
1351 -> 0;
1351 -> 1320;
1352 -> 1351;
1352 -> 1345;
1353 -> 1352;
1353 -> 1351;
1353 -> 1345;
1354 -> 1351;
1354 -> 1345;
1355 -> 1351;
1355 -> 1345;
1356 -> 1351;
1356 -> 1345;
1357 -> 1351;
1357 -> 1345;
1358 -> 1351;
1358 -> 1345;
1359 -> 1351;
1359 -> 1345;
1360 -> 1351;
1360 -> 1345;
1361 -> 1351;
1361 -> 1345;
1362 -> 1351;
1362 -> 1345;
1363 -> 1362;
1363 -> 1353;
1363 -> 1345;
1364 -> 1354;
1364 -> 1345;
1365 -> 1360;
1365 -> 1345;
1366 -> 1345;
1367 -> 1364;
1367 -> 1366;
1368 -> 1365;
1368 -> 1366;
1369 -> 1362;
1369 -> 1366;
1370 -> 1367;
1370 -> 1366;
1371 -> 1366;
1372 -> 1370;
1372 -> 1371;
1373 -> 1369;
1373 -> 1371;
1374 -> 1371;
1375 -> 1373;
1375 -> 1374;
1376 -> 1374;
1377 -> 1375;
1377 -> 1376;
1378 -> 1376;
1379 -> 1377;
1379 -> 1378;
1380 -> 1379;
1380 -> 1353;
1380 -> 1378;
1381 -> 1379;
1381 -> 1353;
1381 -> 1378;
1382 -> 1381;
1382 -> 1376;
1383 -> 1377;
1383 -> 1353;
1383 -> 1376;
1384 -> 1377;
1384 -> 1383;
1384 -> 1376;
1385 -> 1384;
1385 -> 1374;
1386 -> 1385;
1386 -> 1371;
1387 -> 1386;
1387 -> 1371;
1388 -> 1386;
1388 -> 1383;
1388 -> 1387;
1389 -> 1388;
1389 -> 1366;
1390 -> 1366;
1391 -> 1389;
1391 -> 1390;
1391 -> 1366;
1392 -> 1389;
1392 -> 1391;
1393 -> 1392;
1393 -> 1345;
1394 -> 1345;
1395 -> 1393;
1395 -> 1394;
1395 -> 1345;
1396 -> 1354;
1396 -> 1345;
1397 -> 1393;
1397 -> 1345;
1398 -> 1345;
1399 -> 1396;
1399 -> 1397;
1399 -> 1398;
1399 -> 1362;
1399 -> 1383;
1399 -> 1345;
1400 -> 1399;
1400 -> 1398;
1401 -> 1398;
1402 -> 1400;
1402 -> 1401;
1403 -> 1401;
1404 -> 1402;
1404 -> 1403;
1405 -> 1404;
1405 -> 1401;
1406 -> 1402;
1406 -> 1398;
1407 -> 1398;
1408 -> 1406;
1408 -> 1407;
1409 -> 1406;
1409 -> 1407;
1410 -> 1407;
1411 -> 1409;
1411 -> 1410;
1412 -> 1410;
1413 -> 1412;
1414 -> 1411;
1414 -> 1407;
1415 -> 1409;
1415 -> 1407;
1416 -> 1407;
1417 -> 1416;
1418 -> 1417;
1419 -> 1399;
1419 -> 1398;
1420 -> 1398;
1421 -> 1419;
1421 -> 1420;
1422 -> 1420;
1423 -> 1421;
1423 -> 1422;
1424 -> 1423;
1424 -> 1414;
1424 -> 1422;
1425 -> 1423;
1425 -> 1414;
1425 -> 1422;
1426 -> 1425;
1426 -> 1420;
1427 -> 1421;
1427 -> 1414;
1427 -> 1420;
1428 -> 1427;
1428 -> 1398;
1429 -> 1398;
1430 -> 1428;
1430 -> 1429;
1431 -> 1399;
1431 -> 1398;
1432 -> 1398;
1433 -> 1399;
1433 -> 1432;
1433 -> 1430;
1433 -> 1345;
1434 -> 1345;
1435 -> 1358;
1435 -> 1434;
1435 -> 1345;
1436 -> 1435;
1437 -> 1345;
1438 -> 1362;
1438 -> 1433;
1438 -> 1345;
1439 -> 1362;
1439 -> 1433;
1439 -> 1438;
1440 -> 1439;
1440 -> 1438;
1441 -> 1362;
1441 -> 1433;
1441 -> 1440;
1442 -> 1438;
1443 -> 1442;
1444 -> 1443;
1444 -> 1442;
1445 -> 1442;
1445 -> 1433;
1445 -> 1441;
1446 -> 1445;
1446 -> 1438;
1447 -> 1354;
1447 -> 1438;
1448 -> 1441;
1448 -> 1438;
1449 -> 1433;
1449 -> 1438;
1450 -> 1436;
1450 -> 1438;
1451 -> 1438;
1452 -> 1438;
1453 -> 1446;
1453 -> 1452;
1454 -> 1447;
1454 -> 1452;
1455 -> 1448;
1455 -> 1452;
1456 -> 1449;
1456 -> 1452;
1457 -> 1450;
1457 -> 1452;
1458 -> 1451;
1458 -> 1452;
1459 -> 1453;
1459 -> 1452;
1460 -> 1454;
1460 -> 1452;
1461 -> 1455;
1461 -> 1452;
1462 -> 1456;
1462 -> 1452;
1463 -> 1457;
1463 -> 1452;
1464 -> 0;
1464 -> 1452;
1465 -> 1452;
1466 -> 1459;
1466 -> 1465;
1467 -> 1460;
1467 -> 1465;
1468 -> 1461;
1468 -> 1465;
1469 -> 1462;
1469 -> 1465;
1470 -> 1463;
1470 -> 1465;
1471 -> 1464;
1471 -> 1465;
1472 -> 1458;
1472 -> 1465;
1473 -> 1465;
1474 -> 1466;
1474 -> 1445;
1474 -> 1473;
1474 -> 1465;
1475 -> 1467;
1475 -> 1465;
1476 -> 1468;
1476 -> 1465;
1477 -> 1469;
1477 -> 1465;
1478 -> 1470;
1478 -> 1465;
1479 -> 1465;
1480 -> 1474;
1480 -> 1479;
1481 -> 1475;
1481 -> 1479;
1482 -> 1476;
1482 -> 1479;
1483 -> 1477;
1483 -> 1479;
1484 -> 1478;
1484 -> 1479;
1485 -> 1472;
1485 -> 1479;
1486 -> 1480;
1486 -> 1474;
1486 -> 1479;
1487 -> 1480;
1487 -> 1479;
1488 -> 1483;
1488 -> 1479;
1489 -> 1484;
1489 -> 1479;
1490 -> 1482;
1490 -> 1479;
1491 -> 1481;
1491 -> 1479;
1492 -> 1479;
1493 -> 1492;
1494 -> 1479;
1495 -> 1494;
1495 -> 1486;
1495 -> 1487;
1495 -> 1488;
1495 -> 1489;
1495 -> 1490;
1495 -> 1491;
1495 -> 1492;
1495 -> 1474;
1495 -> 1436;
1495 -> 1493;
1495 -> 1479;
1496 -> 1495;
1496 -> 1494;
1497 -> 1494;
1498 -> 1495;
1498 -> 1497;
1498 -> 1479;
1499 -> 1479;
1500 -> 1499;
1500 -> 1494;
1500 -> 1479;
1501 -> 0;
1501 -> 1479;
1502 -> 1501;
1502 -> 0;
1502 -> 1479;
1503 -> 1502;
1503 -> 1494;
1503 -> 1479;
1504 -> 1479;
1505 -> 1504;
1505 -> 1494;
1505 -> 1479;
1506 -> 1494;
1506 -> 1479;
1507 -> 1494;
1507 -> 1479;
1508 -> 1494;
1508 -> 1479;
1509 -> 1494;
1509 -> 1479;
1510 -> 1494;
1510 -> 1479;
1511 -> 1480;
1511 -> 1498;
1511 -> 1479;
1512 -> 1511;
1512 -> 0;
1512 -> 1479;
1513 -> 1512;
1513 -> 1479;
1514 -> 1513;
1514 -> 1494;
1514 -> 1479;
1515 -> 1494;
1515 -> 1498;
1515 -> 1500;
1515 -> 1479;
1516 -> 1480;
1516 -> 1479;
1517 -> 1494;
1517 -> 1479;
1518 -> 1515;
1518 -> 1516;
1518 -> 1517;
1518 -> 1498;
1518 -> 1500;
1518 -> 1503;
1518 -> 1505;
1518 -> 1506;
1518 -> 1507;
1518 -> 1514;
1518 -> 1508;
1518 -> 1509;
1518 -> 1510;
1518 -> 1499;
1518 -> 1502;
1518 -> 1504;
1518 -> 1479;
1519 -> 1480;
1519 -> 1518;
1519 -> 1479;
1520 -> 1472;
1520 -> 1465;
1521 -> 1472;
1521 -> 1465;
1522 -> 1472;
1522 -> 1465;
1523 -> 1472;
1523 -> 1465;
1524 -> 1472;
1524 -> 1465;
1525 -> 1472;
1525 -> 1465;
1526 -> 1472;
1526 -> 1465;
1527 -> 1472;
1527 -> 1465;
1528 -> 1472;
1528 -> 1465;
1529 -> 1472;
1529 -> 1465;
1530 -> 1466;
1530 -> 1465;
1531 -> 1466;
1531 -> 1472;
1531 -> 1465;
1532 -> 1471;
1532 -> 1465;
1533 -> 1532;
1533 -> 1472;
1533 -> 1465;
1534 -> 1465;
1535 -> 1467;
1535 -> 1518;
1535 -> 1534;
1535 -> 1465;
1536 -> 1535;
1536 -> 1465;
1537 -> 1466;
1537 -> 1518;
1537 -> 1536;
1538 -> 1466;
1538 -> 1518;
1538 -> 1537;
1538 -> 1472;
1538 -> 1465;
1539 -> 1472;
1539 -> 1518;
1539 -> 1465;
1540 -> 1466;
1540 -> 1465;
1541 -> 1472;
1541 -> 1465;
1542 -> 1539;
1542 -> 1540;
1542 -> 1541;
1542 -> 1518;
1542 -> 1520;
1542 -> 1531;
1542 -> 1521;
1542 -> 1522;
1542 -> 1523;
1542 -> 1524;
1542 -> 1525;
1542 -> 1526;
1542 -> 1527;
1542 -> 1528;
1542 -> 1529;
1542 -> 1538;
1542 -> 1533;
1542 -> 1537;
1542 -> 1532;
1542 -> 1465;
1543 -> 1345;
1544 -> 1355;
1544 -> 1543;
1544 -> 1345;
1545 -> 1356;
1545 -> 1451;
1545 -> 1345;
1546 -> 1345;
1547 -> 1357;
1547 -> 1546;
1547 -> 1345;
1548 -> 1357;
1548 -> 1451;
1548 -> 1547;
1549 -> 1345;
1550 -> 1359;
1550 -> 1549;
1550 -> 1345;
1551 -> 1359;
1551 -> 1542;
1551 -> 1550;
1552 -> 1451;
1552 -> 1551;
1552 -> 1542;
1552 -> 1545;
1552 -> 1548;
1552 -> 1550;
1553 -> 1451;
1553 -> 1359;
1553 -> 1550;
1554 -> 1451;
1554 -> 1345;
1555 -> 1351;
1555 -> 1554;
1555 -> 1552;
1555 -> 1553;
1555 -> 1320;
1556 -> 1351;
1556 -> 1345;
1557 -> 1351;
1557 -> 1345;
1558 -> 1351;
1558 -> 1345;
1559 -> 1351;
1559 -> 1345;
1560 -> 1351;
1560 -> 1345;
1561 -> 1351;
1561 -> 1345;
1562 -> 1351;
1562 -> 1345;
1563 -> 1351;
1563 -> 1345;
1564 -> 1345;
1565 -> 1558;
1565 -> 1345;
1566 -> 1560;
1566 -> 1345;
1567 -> 0;
1567 -> 1345;
1568 -> 1345;
1569 -> 1562;
1569 -> 1345;
1570 -> 1345;
1571 -> 1567;
1571 -> 1570;
1572 -> 1568;
1572 -> 1570;
1573 -> 1569;
1573 -> 1570;
1574 -> 1563;
1574 -> 1570;
1575 -> 1570;
1576 -> 1571;
1576 -> 1570;
1577 -> 1572;
1577 -> 1570;
1578 -> 1575;
1578 -> 1570;
1579 -> 1573;
1579 -> 1570;
1580 -> 1570;
1581 -> 1576;
1581 -> 1580;
1582 -> 1577;
1582 -> 1580;
1583 -> 1578;
1583 -> 1580;
1584 -> 1579;
1584 -> 1580;
1585 -> 1574;
1585 -> 1580;
1586 -> 1580;
1587 -> 1581;
1587 -> 0;
1587 -> 1580;
1588 -> 1587;
1588 -> 1582;
1588 -> 1580;
1589 -> 1588;
1590 -> 1585;
1590 -> 1589;
1591 -> 1589;
1592 -> 1590;
1592 -> 1555;
1592 -> 1591;
1593 -> 1591;
1594 -> 1592;
1594 -> 1588;
1595 -> 1588;
1596 -> 1585;
1596 -> 1595;
1597 -> 1596;
1597 -> 1555;
1597 -> 1595;
1598 -> 1597;
1598 -> 1588;
1599 -> 1598;
1600 -> 1594;
1600 -> 1555;
1600 -> 1598;
1601 -> 1584;
1601 -> 1598;
1602 -> 1599;
1602 -> 1600;
1602 -> 1601;
1602 -> 1555;
1602 -> 1598;
1603 -> 1602;
1603 -> 1599;
1604 -> 1602;
1604 -> 1599;
1605 -> 1602;
1605 -> 1599;
1606 -> 1602;
1606 -> 1599;
1607 -> 1599;
1608 -> 1607;
1608 -> 1599;
1609 -> 1599;
1610 -> 1604;
1610 -> 1609;
1611 -> 1610;
1611 -> 1599;
1612 -> 1605;
1612 -> 1599;
1613 -> 1607;
1613 -> 1599;
1614 -> 1611;
1614 -> 1602;
1614 -> 1612;
1614 -> 1613;
1614 -> 1608;
1614 -> 1599;
1615 -> 1588;
1616 -> 1594;
1616 -> 1588;
1617 -> 1584;
1617 -> 1555;
1617 -> 1614;
1617 -> 1616;
1618 -> 1616;
1618 -> 1555;
1618 -> 1617;
1619 -> 1581;
1619 -> 0;
1619 -> 1580;
1620 -> 1586;
1620 -> 1619;
1621 -> 1620;
1621 -> 1585;
1621 -> 1586;
1621 -> 1617;
1621 -> 1619;
1622 -> 1619;
1623 -> 1619;
1624 -> 1585;
1624 -> 1623;
1625 -> 1624;
1625 -> 1621;
1625 -> 1623;
1626 -> 1625;
1626 -> 1619;
1627 -> 1619;
1628 -> 1585;
1628 -> 1627;
1629 -> 1628;
1629 -> 1626;
1629 -> 1627;
1630 -> 1629;
1630 -> 1619;
1631 -> 1584;
1631 -> 1626;
1631 -> 1619;
1632 -> 1619;
1633 -> 1585;
1633 -> 1632;
1634 -> 1633;
1634 -> 1631;
1634 -> 1632;
1635 -> 1633;
1635 -> 1631;
1635 -> 1632;
1636 -> 1635;
1636 -> 1619;
1637 -> 1584;
1637 -> 1636;
1637 -> 1619;
1638 -> 1584;
1638 -> 1619;
1639 -> 1619;
1640 -> 1619;
1641 -> 1639;
1641 -> 1640;
1642 -> 1639;
1642 -> 1640;
1643 -> 1639;
1643 -> 1640;
1644 -> 1638;
1644 -> 1640;
1645 -> 1585;
1645 -> 1640;
1646 -> 1640;
1647 -> 1645;
1647 -> 1646;
1648 -> 1647;
1648 -> 1637;
1648 -> 1646;
1649 -> 1646;
1650 -> 1648;
1650 -> 1649;
1651 -> 1650;
1651 -> 1649;
1652 -> 1651;
1652 -> 1648;
1652 -> 1649;
1653 -> 1649;
1654 -> 1652;
1654 -> 1653;
1655 -> 1654;
1655 -> 1652;
1655 -> 1653;
1656 -> 1655;
1656 -> 1653;
1657 -> 1656;
1657 -> 1640;
1658 -> 1644;
1658 -> 1640;
1659 -> 1657;
1659 -> 1658;
1659 -> 1656;
1659 -> 1637;
1659 -> 1640;
1660 -> 1640;
1661 -> 1640;
1662 -> 1641;
1662 -> 1661;
1662 -> 1640;
1663 -> 1640;
1664 -> 1645;
1664 -> 1663;
1665 -> 1663;
1666 -> 1664;
1666 -> 1665;
1667 -> 1665;
1668 -> 1666;
1668 -> 1667;
1669 -> 1668;
1669 -> 1659;
1669 -> 1667;
1670 -> 1668;
1670 -> 1659;
1670 -> 1667;
1671 -> 1670;
1671 -> 1665;
1672 -> 1666;
1672 -> 1659;
1672 -> 1665;
1673 -> 1672;
1673 -> 1640;
1674 -> 1660;
1674 -> 1640;
1675 -> 1644;
1675 -> 1640;
1676 -> 1674;
1676 -> 1675;
1676 -> 1673;
1676 -> 1637;
1676 -> 1672;
1676 -> 1640;
1677 -> 1640;
1678 -> 1677;
1679 -> 1678;
1680 -> 1676;
1680 -> 1679;
1681 -> 1680;
1681 -> 1678;
1682 -> 1677;
1683 -> 1682;
1684 -> 1683;
1685 -> 1677;
1686 -> 1685;
1687 -> 1686;
1688 -> 1676;
1688 -> 1677;
1689 -> 1688;
1689 -> 1676;
1689 -> 1677;
1690 -> 1677;
1691 -> 1688;
1691 -> 1676;
1691 -> 1690;
1691 -> 1677;
1692 -> 1691;
1693 -> 1688;
1693 -> 1676;
1693 -> 1691;
1694 -> 1692;
1694 -> 1691;
1695 -> 1691;
1696 -> 1688;
1696 -> 1694;
1696 -> 1677;
1697 -> 1676;
1697 -> 1677;
1698 -> 1676;
1698 -> 1677;
1699 -> 1698;
1699 -> 1696;
1699 -> 1677;
1700 -> 1676;
1700 -> 1677;
1701 -> 1676;
1701 -> 1677;
1702 -> 1677;
1703 -> 1701;
1703 -> 1702;
1704 -> 1703;
1704 -> 1696;
1704 -> 1702;
1705 -> 1703;
1705 -> 1696;
1705 -> 1702;
1706 -> 1705;
1706 -> 1677;
1707 -> 1677;
1708 -> 1707;
1708 -> 1706;
1708 -> 1696;
1708 -> 1677;
1709 -> 1707;
1709 -> 1708;
1710 -> 1706;
1710 -> 1709;
1710 -> 1707;
1711 -> 1700;
1711 -> 1710;
1711 -> 1709;
1712 -> 1676;
1712 -> 1677;
1713 -> 1712;
1713 -> 1711;
1713 -> 1677;
1714 -> 1680;
1714 -> 1713;
1714 -> 1679;
1715 -> 1680;
1715 -> 1713;
1715 -> 1679;
1716 -> 1715;
1716 -> 1678;
1717 -> 1676;
1717 -> 1677;
1718 -> 1676;
1718 -> 1677;
1719 -> 1717;
1719 -> 0;
1719 -> 1677;
1720 -> 1677;
1721 -> 1717;
1721 -> 1677;
1722 -> 1718;
1722 -> 1721;
1722 -> 1713;
1722 -> 1677;
1723 -> 1722;
1724 -> 1723;
1725 -> 1724;
1725 -> 1723;
1726 -> 1723;
1726 -> 1722;
1727 -> 1717;
1727 -> 1722;
1728 -> 1726;
1728 -> 1717;
1728 -> 1677;
1729 -> 1726;
1729 -> 1677;
1730 -> 1676;
1730 -> 1677;
1731 -> 1676;
1731 -> 1677;
1732 -> 1730;
1732 -> 1729;
1732 -> 1677;
1733 -> 1677;
1734 -> 1677;
1735 -> 1732;
1735 -> 1734;
1736 -> 1733;
1736 -> 1734;
1737 -> 1731;
1737 -> 1734;
1738 -> 1736;
1738 -> 1734;
1739 -> 1735;
1739 -> 1734;
1740 -> 1734;
1741 -> 1737;
1741 -> 1729;
1741 -> 1734;
1742 -> 1734;
1743 -> 1739;
1743 -> 1742;
1744 -> 1740;
1744 -> 1742;
1745 -> 1741;
1745 -> 1742;
1746 -> 1737;
1746 -> 1742;
1747 -> 1745;
1747 -> 1742;
1748 -> 1744;
1748 -> 1742;
1749 -> 1746;
1749 -> 1729;
1749 -> 1748;
1750 -> 1746;
1750 -> 1729;
1750 -> 1749;
1750 -> 1742;
1751 -> 1747;
1751 -> 1750;
1751 -> 1729;
1751 -> 1749;
1751 -> 1742;
1752 -> 1743;
1752 -> 1742;
1753 -> 1742;
1754 -> 1752;
1754 -> 1753;
1755 -> 1746;
1755 -> 1753;
1756 -> 1754;
1756 -> 1753;
1757 -> 1753;
1758 -> 1756;
1758 -> 1757;
1759 -> 1755;
1759 -> 1757;
1760 -> 1757;
1761 -> 1758;
1761 -> 1760;
1761 -> 1757;
1762 -> 1757;
1763 -> 1759;
1763 -> 1751;
1763 -> 1762;
1764 -> 1762;
1765 -> 1763;
1765 -> 1757;
1766 -> 1758;
1766 -> 1757;
1767 -> 1765;
1767 -> 1751;
1767 -> 1766;
1767 -> 1757;
1768 -> 1753;
1769 -> 1755;
1769 -> 1767;
1769 -> 1768;
1770 -> 1768;
1771 -> 1769;
1771 -> 1753;
1772 -> 1751;
1772 -> 1742;
1773 -> 1742;
1774 -> 1772;
1774 -> 1773;
1774 -> 1742;
1775 -> 1774;
1776 -> 1775;
1776 -> 1771;
1777 -> 1776;
1777 -> 1774;
1778 -> 1751;
1778 -> 1774;
1779 -> 1777;
1779 -> 1774;
1780 -> 1774;
1781 -> 1742;
1782 -> 1779;
1782 -> 1771;
1782 -> 1742;
1783 -> 1742;
1784 -> 1782;
1784 -> 1783;
1784 -> 1742;
1785 -> 1743;
1785 -> 1742;
1786 -> 1744;
1786 -> 1742;
1787 -> 1779;
1787 -> 1771;
1787 -> 1742;
1788 -> 1742;
1789 -> 1785;
1789 -> 1788;
1790 -> 1786;
1790 -> 1788;
1791 -> 1787;
1791 -> 1788;
1792 -> 1746;
1792 -> 1788;
1793 -> 1792;
1793 -> 1788;
1794 -> 1789;
1794 -> 1788;
1795 -> 1790;
1795 -> 1788;
1796 -> 1793;
1796 -> 1794;
1796 -> 1795;
1796 -> 1779;
1796 -> 1788;
1797 -> 1788;
1798 -> 1796;
1798 -> 1788;
1799 -> 1788;
1800 -> 1799;
1801 -> 1791;
1801 -> 1799;
1802 -> 1799;
1803 -> 1801;
1803 -> 1802;
1803 -> 1799;
1804 -> 1791;
1804 -> 1799;
1805 -> 1798;
1805 -> 1799;
1806 -> 1801;
1806 -> 1799;
1807 -> 1804;
1807 -> 1805;
1807 -> 1806;
1807 -> 1798;
1807 -> 1799;
1808 -> 1796;
1808 -> 1807;
1809 -> 1730;
1809 -> 1677;
1810 -> 1808;
1810 -> 1733;
1811 -> 1810;
1811 -> 1808;
1811 -> 1733;
1812 -> 1811;
1813 -> 1812;
1813 -> 1811;
1814 -> 1811;
1815 -> 1813;
1815 -> 1814;
1816 -> 1810;
1816 -> 1814;
1817 -> 1814;
1818 -> 1816;
1818 -> 1817;
1819 -> 1817;
1820 -> 1818;
1820 -> 1819;
1821 -> 1820;
1821 -> 1817;
1822 -> 1818;
1822 -> 1814;
1823 -> 1815;
1823 -> 1822;
1823 -> 1812;
1823 -> 1818;
1823 -> 1814;
1824 -> 1814;
1825 -> 1816;
1825 -> 1824;
1826 -> 1825;
1826 -> 1823;
1826 -> 1824;
1827 -> 1825;
1827 -> 1823;
1827 -> 1824;
1828 -> 1827;
1828 -> 1814;
1829 -> 1814;
1830 -> 1829;
1830 -> 1828;
1830 -> 1823;
1830 -> 1814;
1831 -> 1829;
1831 -> 1830;
1832 -> 1828;
1832 -> 1831;
1832 -> 1829;
1833 -> 1811;
1834 -> 1810;
1834 -> 1811;
1835 -> 1834;
1835 -> 1832;
1835 -> 1811;
1836 -> 1811;
1837 -> 1812;
1837 -> 1835;
1837 -> 1811;
1838 -> 1810;
1838 -> 1837;
1838 -> 1811;
1839 -> 1835;
1839 -> 1811;
1840 -> 1811;
1841 -> 1810;
1841 -> 1838;
1841 -> 1733;
1842 -> 1808;
1842 -> 1733;
1843 -> 1733;
1844 -> 1842;
1844 -> 1843;
1845 -> 1843;
1846 -> 1845;
1847 -> 1844;
1847 -> 1846;
1848 -> 1847;
1848 -> 1841;
1848 -> 1846;
1849 -> 1847;
1849 -> 1841;
1849 -> 1846;
1850 -> 1849;
1850 -> 1845;
1851 -> 1844;
1851 -> 1841;
1851 -> 1845;
1852 -> 1851;
1852 -> 1733;
1853 -> 1733;
1854 -> 1676;
1854 -> 1677;
1855 -> 1676;
1855 -> 1677;
1856 -> 1854;
1856 -> 1852;
1856 -> 1677;
1857 -> 1677;
1858 -> 1856;
1858 -> 1857;
1859 -> 1856;
1859 -> 1857;
1860 -> 1855;
1860 -> 1857;
1861 -> 1857;
1862 -> 1860;
1862 -> 1861;
1863 -> 1861;
1864 -> 1862;
1864 -> 1863;
1864 -> 1852;
1864 -> 1861;
1865 -> 1864;
1865 -> 1861;
1866 -> 1865;
1866 -> 1857;
1867 -> 1859;
1867 -> 1857;
1868 -> 1858;
1868 -> 1867;
1868 -> 1864;
1868 -> 1852;
1868 -> 1857;
1869 -> 1857;
1870 -> 1860;
1870 -> 1869;
1871 -> 1870;
1871 -> 1868;
1871 -> 1869;
1872 -> 1857;
1873 -> 1871;
1873 -> 1866;
1873 -> 1857;
1874 -> 1676;
1874 -> 1677;
1875 -> 1676;
1875 -> 1677;
1876 -> 1676;
1876 -> 1677;
1877 -> 1875;
1877 -> 1677;
1878 -> 1874;
1878 -> 1677;
1879 -> 1677;
1880 -> 1677;
1881 -> 1878;
1881 -> 1880;
1882 -> 1879;
1882 -> 1880;
1883 -> 1876;
1883 -> 1880;
1884 -> 1882;
1884 -> 1880;
1885 -> 1881;
1885 -> 1880;
1886 -> 1880;
1887 -> 1885;
1887 -> 1886;
1888 -> 1883;
1888 -> 1886;
1889 -> 1887;
1889 -> 1886;
1890 -> 1886;
1891 -> 1889;
1891 -> 1890;
1892 -> 1888;
1892 -> 1890;
1893 -> 1890;
1894 -> 1891;
1894 -> 1893;
1894 -> 1890;
1895 -> 1890;
1896 -> 1895;
1897 -> 1891;
1897 -> 1890;
1898 -> 1886;
1899 -> 1898;
1900 -> 1880;
1901 -> 1880;
1902 -> 1873;
1902 -> 1880;
1903 -> 1880;
1904 -> 1902;
1904 -> 1903;
1904 -> 1880;
1905 -> 1901;
1905 -> 1880;
1906 -> 1902;
1906 -> 1905;
1906 -> 1873;
1906 -> 1880;
1907 -> 1881;
1907 -> 1880;
1908 -> 1882;
1908 -> 1880;
1909 -> 1880;
1910 -> 1907;
1910 -> 1909;
1911 -> 1908;
1911 -> 1909;
1912 -> 1883;
1912 -> 1909;
1913 -> 1912;
1913 -> 1909;
1914 -> 1910;
1914 -> 1909;
1915 -> 1911;
1915 -> 1909;
1916 -> 1909;
1917 -> 1909;
1918 -> 1917;
1919 -> 1917;
1920 -> 1906;
1920 -> 1919;
1920 -> 1917;
1921 -> 1918;
1921 -> 1917;
1922 -> 1906;
1922 -> 1921;
1922 -> 1917;
1923 -> 1676;
1923 -> 1677;
1924 -> 1676;
1924 -> 1677;
1925 -> 1677;
1926 -> 1924;
1926 -> 1925;
1927 -> 1925;
1928 -> 1927;
1929 -> 1926;
1929 -> 1928;
1930 -> 1929;
1930 -> 1922;
1930 -> 1928;
1931 -> 1929;
1931 -> 1922;
1931 -> 1928;
1932 -> 1931;
1932 -> 1927;
1933 -> 1677;
1934 -> 1676;
1934 -> 1677;
1935 -> 1676;
1935 -> 1677;
1936 -> 1677;
1937 -> 1934;
1937 -> 1936;
1938 -> 1936;
1939 -> 1937;
1939 -> 1922;
1939 -> 1938;
1940 -> 1938;
1941 -> 1939;
1941 -> 1677;
1942 -> 1935;
1942 -> 1677;
1943 -> 1941;
1943 -> 1942;
1943 -> 1677;
1944 -> 1677;
1945 -> 1943;
1946 -> 1945;
1946 -> 1943;
1947 -> 1943;
1947 -> 1717;
1947 -> 1677;
1948 -> 1676;
1948 -> 1677;
1949 -> 1676;
1949 -> 1677;
1950 -> 1948;
1950 -> 1677;
1951 -> 1950;
1951 -> 1943;
1951 -> 1677;
1952 -> 1948;
1952 -> 1951;
1952 -> 1677;
1953 -> 1677;
1954 -> 1949;
1954 -> 1953;
1955 -> 1953;
1956 -> 1954;
1956 -> 1955;
1957 -> 1955;
1958 -> 1957;
1959 -> 1956;
1959 -> 1958;
1960 -> 1959;
1960 -> 1951;
1960 -> 1958;
1961 -> 1959;
1961 -> 1951;
1961 -> 1958;
1962 -> 1961;
1962 -> 1957;
1963 -> 1956;
1963 -> 1951;
1963 -> 1957;
1964 -> 1953;
1965 -> 1963;
1965 -> 1677;
1966 -> 1677;
1967 -> 1949;
1967 -> 1966;
1968 -> 1967;
1968 -> 1963;
1968 -> 1966;
1969 -> 1968;
1970 -> 1969;
1970 -> 1968;
1971 -> 1968;
1972 -> 1970;
1972 -> 1971;
1972 -> 1968;
1973 -> 1972;
1973 -> 1968;
1974 -> 1973;
1974 -> 1967;
1974 -> 1968;
1975 -> 1967;
1975 -> 1972;
1975 -> 1974;
1975 -> 1966;
1976 -> 1975;
1976 -> 1677;
1977 -> 1976;
1978 -> 1948;
1978 -> 1977;
1978 -> 1677;
1979 -> 1959;
1979 -> 1977;
1979 -> 1958;
1980 -> 1959;
1980 -> 1977;
1980 -> 1958;
1981 -> 1980;
1981 -> 1957;
1982 -> 1977;
1982 -> 1677;
1983 -> 1977;
1984 -> 1983;
1984 -> 1977;
1985 -> 1977;
1985 -> 1717;
1985 -> 1677;
1986 -> 1781;
1986 -> 1742;
1987 -> 1800;
1987 -> 1799;
1988 -> 1977;
1988 -> 1846;
1989 -> 1988;
1989 -> 1845;
1990 -> 1929;
1990 -> 1977;
1990 -> 1928;
1991 -> 1929;
1991 -> 1977;
1991 -> 1928;
1992 -> 1991;
1992 -> 1927;
1993 -> 1698;
1993 -> 1977;
1993 -> 1677;
1994 -> 1688;
1994 -> 1977;
1994 -> 1677;
1995 -> 1641;
1995 -> 1640;
1996 -> 1995;
1997 -> 1996;
1997 -> 1645;
1997 -> 1995;
1998 -> 1995;
1999 -> 1998;
1999 -> 1645;
1999 -> 1995;
2000 -> 1645;
2000 -> 1977;
2000 -> 1997;
2000 -> 1999;
2000 -> 1640;
2001 -> 1640;
2002 -> 1643;
2002 -> 2001;
2002 -> 1640;
2003 -> 1641;
2003 -> 1640;
2004 -> 1642;
2004 -> 1640;
2005 -> 1644;
2005 -> 1640;
2006 -> 1640;
2007 -> 2003;
2007 -> 2006;
2008 -> 2004;
2008 -> 2006;
2009 -> 2005;
2009 -> 2006;
2010 -> 1645;
2010 -> 2006;
2011 -> 2006;
2012 -> 2007;
2012 -> 2011;
2012 -> 2006;
2013 -> 2010;
2013 -> 2000;
2013 -> 2006;
2014 -> 2013;
2015 -> 2010;
2015 -> 2013;
2016 -> 2014;
2016 -> 2013;
2017 -> 2009;
2017 -> 2013;
2018 -> 2013;
2019 -> 2013;
2020 -> 2015;
2020 -> 2019;
2021 -> 2016;
2021 -> 2019;
2022 -> 2017;
2022 -> 2019;
2023 -> 2018;
2023 -> 2019;
2024 -> 2018;
2024 -> 2019;
2025 -> 2019;
2026 -> 2020;
2026 -> 2019;
2027 -> 2023;
2027 -> 2019;
2028 -> 2024;
2028 -> 2019;
2029 -> 2025;
2029 -> 2019;
2030 -> 2022;
2030 -> 2019;
2031 -> 2019;
2032 -> 2019;
2033 -> 2026;
2033 -> 2032;
2034 -> 2027;
2034 -> 2032;
2035 -> 2028;
2035 -> 2032;
2036 -> 2029;
2036 -> 2032;
2037 -> 2030;
2037 -> 2032;
2038 -> 2031;
2038 -> 2032;
2039 -> 2032;
2040 -> 2039;
2040 -> 2032;
2041 -> 2039;
2041 -> 2032;
2042 -> 2039;
2042 -> 2032;
2043 -> 2039;
2043 -> 2032;
2044 -> 2039;
2044 -> 2032;
2045 -> 2039;
2045 -> 2032;
2046 -> 2033;
2046 -> 2039;
2046 -> 2032;
2047 -> 2034;
2047 -> 2039;
2047 -> 2032;
2048 -> 2035;
2048 -> 2039;
2048 -> 2032;
2049 -> 2036;
2049 -> 2039;
2049 -> 2032;
2050 -> 2037;
2050 -> 2039;
2050 -> 2032;
2051 -> 0;
2051 -> 2032;
2052 -> 2051;
2052 -> 2039;
2052 -> 2032;
2053 -> 2032;
2054 -> 2039;
2054 -> 2053;
2055 -> 2053;
2056 -> 2054;
2056 -> 2039;
2056 -> 2041;
2056 -> 2047;
2056 -> 2055;
2056 -> 2053;
2057 -> 2053;
2058 -> 2054;
2058 -> 2039;
2058 -> 2040;
2058 -> 2046;
2058 -> 2057;
2059 -> 2058;
2059 -> 2039;
2059 -> 2051;
2059 -> 2057;
2060 -> 2056;
2060 -> 2059;
2060 -> 2039;
2060 -> 2051;
2060 -> 2053;
2061 -> 2060;
2061 -> 2032;
2062 -> 2061;
2063 -> 2062;
2063 -> 2039;
2063 -> 2061;
2064 -> 2019;
2065 -> 2020;
2065 -> 2064;
2066 -> 2064;
2067 -> 2065;
2067 -> 2066;
2068 -> 2067;
2068 -> 2051;
2068 -> 2066;
2069 -> 2067;
2069 -> 2051;
2069 -> 2066;
2070 -> 2069;
2070 -> 2064;
2071 -> 2065;
2071 -> 2051;
2071 -> 2064;
2072 -> 2071;
2072 -> 2019;
2073 -> 2072;
2073 -> 2031;
2073 -> 2071;
2073 -> 2039;
2073 -> 2040;
2073 -> 2046;
2073 -> 2041;
2073 -> 2047;
2073 -> 2042;
2073 -> 2048;
2073 -> 2043;
2073 -> 2049;
2073 -> 2044;
2073 -> 2052;
2073 -> 2045;
2073 -> 2063;
2073 -> 2050;
2073 -> 2018;
2073 -> 2025;
2073 -> 1637;
2073 -> 2062;
2073 -> 2019;
2074 -> 2019;
2075 -> 2073;
2075 -> 2074;
2076 -> 2073;
2076 -> 2074;
2077 -> 2076;
2077 -> 2073;
2077 -> 2074;
2078 -> 2075;
2078 -> 2074;
2079 -> 2075;
2079 -> 2074;
2080 -> 2074;
2081 -> 2079;
2081 -> 2080;
2082 -> 2076;
2082 -> 2080;
2083 -> 2081;
2083 -> 2077;
2083 -> 0;
2083 -> 2080;
2084 -> 2080;
2085 -> 2081;
2085 -> 2077;
2085 -> 0;
2085 -> 2080;
2086 -> 2081;
2086 -> 2077;
2086 -> 0;
2086 -> 2085;
2087 -> 2081;
2087 -> 2077;
2087 -> 0;
2087 -> 2080;
2088 -> 2081;
2088 -> 2077;
2088 -> 0;
2088 -> 2080;
2089 -> 2081;
2089 -> 2077;
2089 -> 0;
2089 -> 2080;
2090 -> 2081;
2090 -> 2077;
2090 -> 0;
2090 -> 2080;
2091 -> 2081;
2091 -> 2077;
2091 -> 0;
2091 -> 2080;
2092 -> 2080;
2093 -> 2081;
2093 -> 2080;
2094 -> 2092;
2094 -> 2080;
2095 -> 2082;
2095 -> 2077;
2095 -> 2093;
2095 -> 2094;
2095 -> 2080;
2096 -> 2080;
2097 -> 2081;
2097 -> 2080;
2098 -> 2096;
2098 -> 2080;
2099 -> 2080;
2100 -> 2097;
2100 -> 2099;
2101 -> 2098;
2101 -> 2099;
2102 -> 2082;
2102 -> 2099;
2103 -> 2099;
2104 -> 2100;
2104 -> 2095;
2104 -> 2099;
2105 -> 2099;
2106 -> 2105;
2106 -> 2080;
2107 -> 2106;
2107 -> 2080;
2108 -> 2081;
2108 -> 2104;
2108 -> 0;
2108 -> 2107;
2109 -> 0;
2109 -> 2108;
2110 -> 2081;
2110 -> 2104;
2110 -> 0;
2110 -> 2080;
2111 -> 2110;
2111 -> 2080;
2112 -> 2109;
2112 -> 2111;
2113 -> 2112;
2113 -> 0;
2113 -> 2074;
2114 -> 2112;
2114 -> 2074;
2115 -> 2074;
2116 -> 2114;
2116 -> 2115;
2117 -> 2116;
2117 -> 2115;
2118 -> 2117;
2119 -> 2074;
2120 -> 2119;
2120 -> 2075;
2120 -> 2112;
2120 -> 2074;
2121 -> 2075;
2121 -> 2112;
2121 -> 2119;
2121 -> 2120;
2122 -> 2120;
2123 -> 2121;
2123 -> 2120;
2124 -> 2122;
2124 -> 2120;
2125 -> 2120;
2126 -> 2123;
2126 -> 2125;
2127 -> 2124;
2127 -> 2125;
2128 -> 2076;
2128 -> 2125;
2129 -> 2125;
2130 -> 2125;
2130 -> 2120;
2131 -> 2120;
2132 -> 2131;
2132 -> 2120;
2133 -> 2129;
2133 -> 2132;
2134 -> 2120;
2135 -> 2133;
2135 -> 2134;
2135 -> 2120;
2136 -> 2135;
2136 -> 2130;
2136 -> 2120;
2137 -> 2130;
2137 -> 2120;
2138 -> 2118;
2138 -> 2137;
2139 -> 2118;
2139 -> 2074;
2140 -> 2074;
2141 -> 2075;
2141 -> 2126;
2141 -> 2140;
2141 -> 2074;
2142 -> 2141;
2142 -> 2074;
2143 -> 2074;
2144 -> 2142;
2144 -> 2143;
2145 -> 2076;
2145 -> 2143;
2146 -> 2144;
2146 -> 2141;
2146 -> 0;
2146 -> 2143;
2147 -> 2143;
2148 -> 2144;
2148 -> 2141;
2148 -> 0;
2148 -> 2143;
2149 -> 2144;
2149 -> 2141;
2149 -> 0;
2149 -> 2148;
2150 -> 2144;
2150 -> 2141;
2150 -> 0;
2150 -> 2143;
2151 -> 2144;
2151 -> 2141;
2151 -> 0;
2151 -> 2143;
2152 -> 2144;
2152 -> 2141;
2152 -> 0;
2152 -> 2143;
2153 -> 2144;
2153 -> 2141;
2153 -> 0;
2153 -> 2143;
2154 -> 2144;
2154 -> 2141;
2154 -> 0;
2154 -> 2143;
2155 -> 2143;
2156 -> 2155;
2156 -> 2143;
2157 -> 2143;
2158 -> 2157;
2158 -> 2143;
2159 -> 2143;
2160 -> 2158;
2160 -> 2159;
2161 -> 2145;
2161 -> 2159;
2162 -> 2159;
2163 -> 2159;
2164 -> 2163;
2164 -> 2143;
2165 -> 2164;
2165 -> 2143;
2166 -> 2144;
2167 -> 2144;
2168 -> 2166;
2168 -> 2167;
2169 -> 2145;
2169 -> 2167;
2170 -> 2168;
2170 -> 2144;
2170 -> 0;
2170 -> 2167;
2171 -> 2168;
2171 -> 2144;
2171 -> 2167;
2172 -> 2167;
2173 -> 2171;
2173 -> 2172;
2173 -> 2167;
2174 -> 2171;
2174 -> 2167;
2175 -> 2167;
2176 -> 2174;
2176 -> 2175;
2177 -> 2169;
2177 -> 2175;
2178 -> 2176;
2178 -> 2144;
2178 -> 0;
2178 -> 2175;
2179 -> 2175;
2180 -> 2176;
2180 -> 2144;
2180 -> 0;
2180 -> 2175;
2181 -> 2176;
2181 -> 2144;
2181 -> 0;
2181 -> 2180;
2182 -> 2176;
2182 -> 2144;
2182 -> 0;
2182 -> 2175;
2183 -> 2176;
2183 -> 2144;
2183 -> 0;
2183 -> 2175;
2184 -> 2176;
2184 -> 2144;
2184 -> 0;
2184 -> 2175;
2185 -> 2176;
2185 -> 2144;
2185 -> 0;
2185 -> 2175;
2186 -> 2176;
2186 -> 2144;
2186 -> 0;
2186 -> 2175;
2187 -> 2177;
2187 -> 2144;
2187 -> 2176;
2187 -> 2175;
2188 -> 2187;
2189 -> 2144;
2190 -> 2188;
2190 -> 2189;
2191 -> 2190;
2191 -> 2189;
2192 -> 2191;
2193 -> 2074;
2194 -> 2192;
2194 -> 2193;
2195 -> 2075;
2195 -> 2187;
2195 -> 2074;
2196 -> 2074;
2197 -> 2195;
2197 -> 2196;
2198 -> 2195;
2198 -> 2196;
2199 -> 2198;
2199 -> 2195;
2199 -> 2196;
2200 -> 2197;
2200 -> 2196;
2201 -> 2196;
2202 -> 2200;
2202 -> 2201;
2203 -> 2198;
2203 -> 2201;
2204 -> 2202;
2204 -> 2199;
2204 -> 0;
2204 -> 2201;
2205 -> 2204;
2206 -> 2197;
2206 -> 2196;
2207 -> 2196;
2208 -> 2206;
2208 -> 2207;
2209 -> 2198;
2209 -> 2207;
2210 -> 2208;
2210 -> 2199;
2210 -> 0;
2210 -> 2207;
2211 -> 2207;
2212 -> 2208;
2212 -> 2199;
2212 -> 0;
2212 -> 2207;
2213 -> 2208;
2213 -> 2199;
2213 -> 2212;
2214 -> 2212;
2215 -> 2213;
2215 -> 2214;
2216 -> 2215;
2216 -> 2199;
2216 -> 0;
2216 -> 2214;
2217 -> 2214;
2218 -> 2215;
2218 -> 2199;
2218 -> 0;
2219 -> 2215;
2219 -> 2199;
2219 -> 0;
2219 -> 2214;
2220 -> 2215;
2220 -> 2199;
2220 -> 0;
2220 -> 2214;
2221 -> 2215;
2221 -> 2199;
2221 -> 0;
2221 -> 2214;
2222 -> 2215;
2222 -> 2199;
2222 -> 0;
2222 -> 2214;
2223 -> 2215;
2223 -> 2199;
2223 -> 0;
2223 -> 2214;
2224 -> 2215;
2225 -> 2196;
2226 -> 2224;
2226 -> 2225;
2227 -> 2226;
2227 -> 2225;
2228 -> 2227;
2229 -> 2196;
2230 -> 2198;
2230 -> 2229;
2231 -> 2229;
2232 -> 2230;
2232 -> 2215;
2232 -> 2231;
2232 -> 2229;
2233 -> 2229;
2234 -> 2230;
2234 -> 2215;
2234 -> 2233;
2235 -> 2232;
2235 -> 2196;
2236 -> 2197;
2236 -> 2235;
2237 -> 2235;
2238 -> 2236;
2238 -> 2237;
2239 -> 2198;
2239 -> 2237;
2240 -> 2238;
2240 -> 2215;
2240 -> 2237;
2241 -> 2240;
2242 -> 2239;
2242 -> 2240;
2243 -> 2235;
2244 -> 2019;
2245 -> 2031;
2245 -> 2244;
2246 -> 2245;
2246 -> 2242;
2246 -> 2244;
2247 -> 2244;
2248 -> 2246;
2248 -> 2247;
2248 -> 2244;
2249 -> 2244;
2250 -> 2246;
2250 -> 2249;
2250 -> 2242;
2250 -> 2244;
2251 -> 2250;
2252 -> 2019;
2253 -> 2025;
2253 -> 2019;
2254 -> 2253;
2254 -> 2251;
2254 -> 2019;
2255 -> 2010;
2255 -> 2251;
2255 -> 2013;
2256 -> 2014;
2256 -> 2013;
2257 -> 2255;
2257 -> 2256;
2257 -> 2251;
2257 -> 2013;
2258 -> 2010;
2258 -> 2257;
2258 -> 2006;
2259 -> 2010;
2259 -> 2257;
2259 -> 2006;
2260 -> 2000;
2260 -> 1640;
2261 -> 2260;
2261 -> 2257;
2261 -> 1640;
2262 -> 2259;
2262 -> 1640;
2263 -> 1619;
2264 -> 1585;
2264 -> 2262;
2264 -> 2263;
2264 -> 1619;
2265 -> 1584;
2265 -> 2262;
2265 -> 1580;
2266 -> 1581;
2266 -> 0;
2266 -> 1580;
2267 -> 1583;
2267 -> 1580;
2268 -> 1586;
2268 -> 1580;
2269 -> 1584;
2269 -> 1580;
2270 -> 2267;
2270 -> 2268;
2270 -> 2269;
2270 -> 1585;
2270 -> 1575;
2270 -> 2265;
2270 -> 1580;
2271 -> 1580;
2272 -> 1570;
2273 -> 1575;
2273 -> 2270;
2273 -> 1570;
2274 -> 1564;
2274 -> 1345;
2275 -> 1566;
2275 -> 2273;
2275 -> 2274;
2275 -> 1569;
2275 -> 1563;
2275 -> 1555;
2275 -> 1345;
2276 -> 1564;
2276 -> 1345;
2277 -> 1556;
2277 -> 1345;
2278 -> 1558;
2278 -> 1345;
2279 -> 1557;
2279 -> 2278;
2280 -> 2277;
2280 -> 2275;
2280 -> 2278;
2281 -> 1560;
2281 -> 2278;
2282 -> 2278;
2283 -> 2280;
2283 -> 2282;
2284 -> 2280;
2284 -> 2282;
2285 -> 2280;
2285 -> 2282;
2286 -> 2280;
2286 -> 2282;
2287 -> 2282;
2288 -> 2284;
2288 -> 2280;
2288 -> 2287;
2288 -> 2282;
2289 -> 0;
2289 -> 2282;
2290 -> 2288;
2290 -> 2282;
2291 -> 2279;
2291 -> 2288;
2291 -> 2278;
2292 -> 2278;
2293 -> 1563;
2293 -> 2278;
2294 -> 2277;
2294 -> 2278;
2295 -> 1557;
2295 -> 2278;
2296 -> 1559;
2296 -> 2278;
2297 -> 2275;
2297 -> 2278;
2298 -> 2292;
2298 -> 2278;
2299 -> 1561;
2299 -> 2278;
2300 -> 1562;
2300 -> 2278;
2301 -> 2278;
2302 -> 2293;
2302 -> 2301;
2303 -> 2294;
2303 -> 2301;
2304 -> 2295;
2304 -> 2301;
2305 -> 2296;
2305 -> 2301;
2306 -> 2297;
2306 -> 2301;
2307 -> 2298;
2307 -> 2301;
2308 -> 2299;
2308 -> 2301;
2309 -> 2300;
2309 -> 2301;
2310 -> 2301;
2311 -> 2302;
2311 -> 2310;
2311 -> 2301;
2312 -> 2301;
2313 -> 2307;
2313 -> 2312;
2313 -> 2301;
2314 -> 2301;
2315 -> 2302;
2315 -> 2314;
2316 -> 2315;
2316 -> 2288;
2316 -> 2314;
2317 -> 2316;
2317 -> 2301;
2318 -> 2301;
2319 -> 2301;
2320 -> 2308;
2320 -> 2301;
2321 -> 2302;
2321 -> 2320;
2322 -> 2303;
2322 -> 2320;
2323 -> 2306;
2323 -> 2320;
2324 -> 2307;
2324 -> 2320;
2325 -> 2309;
2325 -> 2320;
2326 -> 2320;
2327 -> 2321;
2327 -> 2326;
2328 -> 2322;
2328 -> 2326;
2329 -> 2323;
2329 -> 2326;
2330 -> 2324;
2330 -> 2326;
2331 -> 2325;
2331 -> 2326;
2332 -> 2331;
2332 -> 2326;
2333 -> 2326;
2334 -> 2332;
2334 -> 2333;
2335 -> 2327;
2335 -> 2333;
2336 -> 2333;
2337 -> 2335;
2337 -> 2288;
2337 -> 2336;
2337 -> 2333;
2338 -> 2337;
2339 -> 2335;
2339 -> 2337;
2340 -> 2337;
2341 -> 2340;
2342 -> 2341;
2342 -> 2340;
2343 -> 2337;
2344 -> 2343;
2344 -> 2339;
2345 -> 2344;
2345 -> 2337;
2346 -> 2337;
2347 -> 2335;
2347 -> 2346;
2348 -> 2347;
2348 -> 2339;
2348 -> 2346;
2349 -> 2346;
2350 -> 2348;
2350 -> 2349;
2351 -> 2350;
2351 -> 2348;
2351 -> 2349;
2352 -> 2349;
2353 -> 2351;
2353 -> 2352;
2354 -> 2352;
2355 -> 2353;
2355 -> 2354;
2356 -> 2354;
2357 -> 2355;
2357 -> 2356;
2358 -> 2357;
2358 -> 2354;
2359 -> 2355;
2359 -> 2352;
2360 -> 2359;
2360 -> 2337;
2361 -> 2345;
2361 -> 2360;
2361 -> 2337;
2362 -> 2339;
2362 -> 2361;
2364 -> 0;
2366 -> 2363;
2366 -> 2365;
2367 -> 2364;
2367 -> 2365;
2368 -> 2365;
2369 -> 2368;
2369 -> 2365;
2370 -> 2366;
2370 -> 2368;
2370 -> 2365;
2371 -> 2367;
2371 -> 2368;
2371 -> 2365;
2372 -> 2365;
2373 -> 2372;
2373 -> 2362;
2374 -> 2335;
2374 -> 2359;
2374 -> 2337;
2375 -> 2373;
2375 -> 2337;
2376 -> 2337;
2377 -> 2374;
2377 -> 2375;
2377 -> 2376;
2377 -> 2370;
2377 -> 2371;
2377 -> 2359;
2377 -> 0;
2377 -> 2337;
2378 -> 2335;
2378 -> 2377;
2378 -> 2333;
2379 -> 2378;
2379 -> 2326;
2380 -> 2379;
2380 -> 2377;
2380 -> 2326;
2381 -> 2379;
2381 -> 2377;
2381 -> 2326;
2382 -> 2330;
2382 -> 2381;
2382 -> 2292;
2382 -> 2377;
2382 -> 2326;
2383 -> 2379;
2383 -> 2382;
2383 -> 2326;
2384 -> 2326;
2385 -> 2383;
2385 -> 2384;
2385 -> 2326;
2386 -> 2385;
2387 -> 2302;
2387 -> 2301;
2388 -> 2303;
2388 -> 2301;
2389 -> 2304;
2389 -> 2301;
2390 -> 2305;
2390 -> 2301;
2391 -> 2306;
2391 -> 2301;
2392 -> 2307;
2392 -> 2301;
2393 -> 2308;
2393 -> 2301;
2394 -> 2386;
2394 -> 2301;
2395 -> 2309;
2395 -> 2301;
2396 -> 2301;
2397 -> 2301;
2398 -> 2387;
2398 -> 2397;
2399 -> 2388;
2399 -> 2397;
2400 -> 2389;
2400 -> 2397;
2401 -> 2390;
2401 -> 2397;
2402 -> 2391;
2402 -> 2397;
2403 -> 2392;
2403 -> 2397;
2404 -> 2393;
2404 -> 2397;
2405 -> 2394;
2405 -> 2397;
2406 -> 2395;
2406 -> 2397;
2407 -> 2396;
2407 -> 2397;
2408 -> 2397;
2409 -> 2408;
2409 -> 2397;
2410 -> 2408;
2410 -> 2397;
2411 -> 2408;
2411 -> 2397;
2412 -> 2408;
2412 -> 2397;
2413 -> 2408;
2413 -> 2397;
2414 -> 2408;
2414 -> 2397;
2415 -> 2408;
2415 -> 2397;
2416 -> 2408;
2416 -> 2397;
2417 -> 2408;
2417 -> 2397;
2418 -> 2408;
2418 -> 2397;
2419 -> 2408;
2419 -> 2397;
2420 -> 2397;
2421 -> 2398;
2421 -> 2420;
2421 -> 2397;
2422 -> 2397;
2423 -> 2403;
2423 -> 2422;
2423 -> 2397;
2424 -> 2398;
2424 -> 2408;
2424 -> 2397;
2425 -> 2399;
2425 -> 2408;
2425 -> 2397;
2426 -> 2400;
2426 -> 2408;
2426 -> 2397;
2427 -> 2406;
2427 -> 2408;
2427 -> 2397;
2428 -> 2403;
2428 -> 2408;
2428 -> 2397;
2429 -> 2404;
2429 -> 2408;
2429 -> 2397;
2430 -> 2405;
2430 -> 2408;
2430 -> 2397;
2431 -> 2402;
2431 -> 2408;
2431 -> 2397;
2432 -> 2402;
2432 -> 2397;
2433 -> 2397;
2434 -> 2432;
2434 -> 2433;
2435 -> 2408;
2435 -> 2433;
2436 -> 2434;
2436 -> 2433;
2437 -> 2397;
2438 -> 2400;
2438 -> 2397;
2439 -> 2399;
2439 -> 2382;
2439 -> 2438;
2440 -> 2439;
2440 -> 2408;
2440 -> 2438;
2441 -> 2401;
2441 -> 2408;
2441 -> 2397;
2442 -> 2301;
2443 -> 2302;
2443 -> 2442;
2444 -> 2443;
2444 -> 2382;
2444 -> 2442;
2445 -> 2444;
2445 -> 2301;
2446 -> 2445;
2447 -> 2446;
2447 -> 2396;
2447 -> 2445;
2448 -> 2301;
2449 -> 2302;
2449 -> 2448;
2450 -> 2448;
2451 -> 2449;
2451 -> 2450;
2452 -> 2450;
2453 -> 2451;
2453 -> 2452;
2454 -> 2452;
2455 -> 2453;
2455 -> 2454;
2456 -> 2455;
2456 -> 2382;
2456 -> 2454;
2457 -> 2455;
2457 -> 2382;
2457 -> 2454;
2458 -> 2457;
2458 -> 2452;
2459 -> 2453;
2459 -> 2382;
2459 -> 2452;
2460 -> 2448;
2461 -> 2459;
2461 -> 2301;
2462 -> 2301;
2463 -> 2461;
2463 -> 2462;
2464 -> 2396;
2464 -> 2462;
2465 -> 2463;
2465 -> 2459;
2465 -> 2462;
2466 -> 2464;
2466 -> 2465;
2467 -> 2465;
2468 -> 2466;
2468 -> 2467;
2468 -> 2465;
2468 -> 2408;
2468 -> 2409;
2468 -> 2424;
2468 -> 2410;
2468 -> 2426;
2468 -> 2411;
2468 -> 2441;
2468 -> 2412;
2468 -> 2428;
2468 -> 2413;
2468 -> 2431;
2468 -> 2414;
2468 -> 2425;
2468 -> 2415;
2468 -> 2429;
2468 -> 2416;
2468 -> 2440;
2468 -> 2417;
2468 -> 2430;
2468 -> 2418;
2468 -> 2447;
2468 -> 2419;
2468 -> 2427;
2468 -> 1555;
2468 -> 2439;
2468 -> 2446;
2469 -> 2468;
2469 -> 2467;
2470 -> 2468;
2470 -> 2467;
2471 -> 2468;
2471 -> 2467;
2472 -> 2471;
2472 -> 2468;
2472 -> 2467;
2473 -> 2469;
2473 -> 2467;
2474 -> 2467;
2475 -> 2472;
2475 -> 2474;
2476 -> 2473;
2476 -> 2474;
2477 -> 2474;
2478 -> 2475;
2478 -> 2477;
2478 -> 2474;
2479 -> 2467;
2480 -> 2471;
2480 -> 2468;
2480 -> 2467;
2481 -> 2467;
2482 -> 2471;
2482 -> 2480;
2482 -> 2481;
2483 -> 2482;
2483 -> 2467;
2484 -> 2469;
2484 -> 2483;
2485 -> 2483;
2486 -> 2484;
2486 -> 2485;
2487 -> 2471;
2487 -> 2485;
2488 -> 2485;
2489 -> 2487;
2489 -> 2480;
2489 -> 2485;
2490 -> 2489;
2490 -> 2483;
2491 -> 2490;
2491 -> 2483;
2492 -> 2467;
2493 -> 2468;
2493 -> 2492;
2493 -> 2491;
2493 -> 2465;
2494 -> 2301;
2495 -> 2301;
2496 -> 2396;
2496 -> 2495;
2497 -> 2496;
2497 -> 2493;
2497 -> 2495;
2498 -> 2495;
2499 -> 2497;
2499 -> 2498;
2499 -> 2495;
2500 -> 2495;
2501 -> 2500;
2501 -> 2495;
2502 -> 2497;
2502 -> 2501;
2502 -> 2493;
2502 -> 2495;
2503 -> 2502;
2504 -> 2301;
2505 -> 2301;
2506 -> 2303;
2506 -> 2505;
2506 -> 2301;
2507 -> 2307;
2507 -> 2506;
2508 -> 2506;
2509 -> 2507;
2509 -> 2508;
2510 -> 2303;
2510 -> 2508;
2511 -> 2510;
2511 -> 2503;
2511 -> 2508;
2512 -> 2511;
2512 -> 2506;
2513 -> 2512;
2513 -> 2506;
2514 -> 2307;
2514 -> 2506;
2515 -> 2506;
2516 -> 2513;
2516 -> 2515;
2517 -> 2514;
2517 -> 2515;
2518 -> 2396;
2518 -> 2515;
2519 -> 2516;
2519 -> 2515;
2520 -> 2506;
2521 -> 2307;
2521 -> 2506;
2522 -> 2506;
2523 -> 2521;
2523 -> 2522;
2524 -> 2303;
2524 -> 2522;
2525 -> 2522;
2526 -> 2523;
2526 -> 2522;
2527 -> 2522;
2528 -> 2526;
2528 -> 2527;
2529 -> 2524;
2529 -> 2527;
2530 -> 2527;
2531 -> 2529;
2531 -> 2530;
2532 -> 2530;
2533 -> 2532;
2533 -> 2531;
2533 -> 2530;
2534 -> 2530;
2535 -> 2531;
2535 -> 2534;
2536 -> 2535;
2536 -> 2503;
2536 -> 2533;
2536 -> 2534;
2537 -> 2536;
2537 -> 2530;
2538 -> 2537;
2538 -> 2527;
2539 -> 2527;
2540 -> 2529;
2540 -> 2539;
2541 -> 2540;
2541 -> 2536;
2541 -> 2539;
2542 -> 2541;
2542 -> 2527;
2543 -> 2542;
2544 -> 2538;
2544 -> 2543;
2544 -> 2542;
2545 -> 2544;
2546 -> 2522;
2547 -> 2525;
2547 -> 2522;
2548 -> 2524;
2548 -> 2541;
2548 -> 2522;
2549 -> 2547;
2549 -> 2548;
2549 -> 2525;
2549 -> 2541;
2549 -> 2522;
2550 -> 2525;
2550 -> 2522;
2551 -> 2524;
2551 -> 2549;
2551 -> 2522;
2552 -> 2525;
2552 -> 2522;
2553 -> 2524;
2553 -> 2551;
2553 -> 2522;
2554 -> 2525;
2554 -> 2522;
2555 -> 2524;
2555 -> 2553;
2555 -> 2522;
2556 -> 2525;
2556 -> 2522;
2557 -> 2524;
2557 -> 2555;
2557 -> 2522;
2558 -> 2525;
2558 -> 2522;
2559 -> 2524;
2559 -> 2557;
2559 -> 2522;
2560 -> 2525;
2560 -> 2522;
2561 -> 2524;
2561 -> 2559;
2561 -> 2522;
2562 -> 2525;
2562 -> 2522;
2563 -> 2524;
2563 -> 2561;
2563 -> 2522;
2564 -> 2525;
2564 -> 2563;
2564 -> 2522;
2565 -> 2564;
2565 -> 2506;
2566 -> 2565;
2566 -> 2506;
2567 -> 2307;
2567 -> 2506;
2568 -> 2506;
2569 -> 2566;
2569 -> 2568;
2570 -> 2567;
2570 -> 2568;
2571 -> 2396;
2571 -> 2568;
2572 -> 2569;
2572 -> 2568;
2573 -> 2506;
2574 -> 2506;
2575 -> 2302;
2575 -> 2574;
2576 -> 2575;
2576 -> 2563;
2576 -> 2574;
2577 -> 2576;
2577 -> 2506;
2578 -> 2396;
2578 -> 2506;
2579 -> 2303;
2579 -> 2506;
2580 -> 2307;
2580 -> 2506;
2581 -> 2506;
2582 -> 2577;
2582 -> 2581;
2583 -> 0;
2583 -> 2581;
2584 -> 2577;
2584 -> 2583;
2584 -> 0;
2584 -> 2506;
2585 -> 2577;
2585 -> 2581;
2586 -> 2581;
2587 -> 2577;
2587 -> 2586;
2587 -> 2584;
2587 -> 2506;
2588 -> 2506;
2589 -> 2396;
2589 -> 2588;
2590 -> 2589;
2590 -> 2587;
2590 -> 2588;
2591 -> 2588;
2592 -> 2590;
2592 -> 2591;
2592 -> 2588;
2593 -> 2588;
2594 -> 2593;
2594 -> 2588;
2595 -> 2506;
2596 -> 2303;
2596 -> 2590;
2596 -> 2506;
2597 -> 2506;
2598 -> 2596;
2598 -> 2597;
2598 -> 2506;
2599 -> 2301;
2600 -> 2303;
2600 -> 2599;
2600 -> 2301;
2601 -> 2396;
2601 -> 2590;
2601 -> 2303;
2601 -> 2301;
2602 -> 2301;
2603 -> 2302;
2603 -> 2602;
2604 -> 2603;
2604 -> 2590;
2604 -> 2602;
2605 -> 2604;
2605 -> 2301;
2606 -> 2301;
2607 -> 2308;
2607 -> 2606;
2607 -> 2301;
2608 -> 2302;
2608 -> 2607;
2609 -> 2307;
2609 -> 2607;
2610 -> 2309;
2610 -> 2607;
2611 -> 2607;
2612 -> 2608;
2612 -> 2611;
2613 -> 2609;
2613 -> 2611;
2614 -> 2610;
2614 -> 2611;
2615 -> 2611;
2616 -> 2612;
2616 -> 2615;
2617 -> 2615;
2618 -> 2616;
2618 -> 2617;
2619 -> 2617;
2620 -> 2618;
2620 -> 2619;
2621 -> 2620;
2621 -> 2605;
2621 -> 2619;
2622 -> 2620;
2622 -> 2605;
2622 -> 2619;
2623 -> 2622;
2623 -> 2617;
2624 -> 2618;
2624 -> 2605;
2624 -> 2617;
2625 -> 2624;
2625 -> 2611;
2626 -> 2614;
2626 -> 2611;
2627 -> 2626;
2627 -> 2625;
2627 -> 1555;
2627 -> 2624;
2627 -> 2611;
2628 -> 2611;
2629 -> 2613;
2629 -> 2627;
2629 -> 2611;
2630 -> 2607;
2631 -> 2607;
2632 -> 2303;
2632 -> 2631;
2632 -> 2607;
2633 -> 2386;
2633 -> 2631;
2633 -> 2607;
2634 -> 2632;
2634 -> 2633;
2634 -> 2607;
2635 -> 2278;
2636 -> 2292;
2636 -> 2278;
2637 -> 2636;
2637 -> 2629;
2637 -> 2278;
2638 -> 2277;
2638 -> 2637;
2639 -> 2292;
2639 -> 2637;
2640 -> 2637;
2641 -> 2638;
2641 -> 2640;
2642 -> 2639;
2642 -> 2640;
2643 -> 1563;
2643 -> 2640;
2644 -> 2643;
2644 -> 2637;
2644 -> 2640;
2645 -> 2643;
2645 -> 2637;
2645 -> 2640;
2646 -> 2637;
2647 -> 1560;
2647 -> 2278;
2648 -> 2292;
2648 -> 2278;
2649 -> 1562;
2649 -> 2278;
2650 -> 2647;
2650 -> 2648;
2650 -> 2649;
2650 -> 1563;
2650 -> 2637;
2650 -> 1555;
2650 -> 2278;
2651 -> 2278;
2652 -> 2275;
2652 -> 2650;
2652 -> 2278;
2653 -> 1345;
2654 -> 1351;
2654 -> 2653;
2654 -> 2650;
2654 -> 1320;
2655 -> 1351;
2655 -> 1345;
2656 -> 1351;
2656 -> 1345;
2657 -> 1351;
2657 -> 1345;
2658 -> 1351;
2658 -> 1345;
2659 -> 1351;
2659 -> 1345;
2660 -> 1351;
2660 -> 1345;
2661 -> 1351;
2661 -> 1345;
2662 -> 1345;
2663 -> 2655;
2663 -> 1345;
2664 -> 2657;
2664 -> 1345;
2665 -> 2662;
2665 -> 1345;
2666 -> 2661;
2666 -> 2663;
2666 -> 2664;
2666 -> 2665;
2666 -> 2654;
2666 -> 2662;
2666 -> 1345;
2667 -> 2655;
2667 -> 2666;
2667 -> 1345;
2668 -> 1345;
2669 -> 2661;
2669 -> 2668;
2670 -> 2668;
2671 -> 2669;
2671 -> 2670;
2672 -> 2671;
2672 -> 2666;
2672 -> 2670;
2673 -> 2671;
2673 -> 2666;
2673 -> 2670;
2674 -> 2673;
2674 -> 2668;
2675 -> 2669;
2675 -> 2666;
2675 -> 2668;
2676 -> 2675;
2676 -> 1345;
2677 -> 1345;
2678 -> 2662;
2678 -> 1345;
2679 -> 1345;
2680 -> 2678;
2680 -> 2679;
2681 -> 2661;
2681 -> 2679;
2682 -> 2679;
2683 -> 2681;
2683 -> 2682;
2684 -> 2682;
2685 -> 2683;
2685 -> 2684;
2686 -> 2685;
2686 -> 2676;
2686 -> 2684;
2687 -> 2685;
2687 -> 2676;
2687 -> 2684;
2688 -> 2687;
2688 -> 2682;
2689 -> 2683;
2689 -> 2676;
2689 -> 2682;
2690 -> 2689;
2690 -> 2679;
2691 -> 2679;
2692 -> 2691;
2692 -> 2690;
2692 -> 2689;
2692 -> 2679;
2693 -> 2679;
2694 -> 2693;
2694 -> 1345;
2695 -> 2659;
2695 -> 1345;
2696 -> 2662;
2696 -> 1345;
2697 -> 2660;
2697 -> 1345;
2698 -> 2695;
2698 -> 2696;
2698 -> 2697;
2698 -> 2661;
2698 -> 2689;
2698 -> 2654;
2698 -> 1345;
2699 -> 1345;
2700 -> 2660;
2700 -> 2654;
2700 -> 2698;
2700 -> 1345;
2701 -> 1345;
2702 -> 2658;
2702 -> 1345;
2703 -> 1345;
2708 -> 2705;
2708 -> 2704;
2709 -> 2706;
2709 -> 2704;
2710 -> 2707;
2710 -> 2704;
2711 -> 2704;
2712 -> 2661;
2712 -> 1345;
2713 -> 2702;
2713 -> 1345;
2714 -> 2656;
2714 -> 1345;
2715 -> 2701;
2715 -> 1345;
2716 -> 2660;
2716 -> 1345;
2717 -> 1345;
2718 -> 1345;
2719 -> 2712;
2719 -> 2718;
2720 -> 2713;
2720 -> 2718;
2721 -> 2714;
2721 -> 2718;
2722 -> 2715;
2722 -> 2718;
2723 -> 2716;
2723 -> 2718;
2724 -> 2717;
2724 -> 2718;
2725 -> 2717;
2725 -> 2718;
2726 -> 2718;
2727 -> 2718;
2728 -> 2721;
2728 -> 2727;
2728 -> 2718;
2729 -> 2718;
2730 -> 2719;
2730 -> 2729;
2731 -> 2729;
2732 -> 2730;
2732 -> 2731;
2733 -> 2732;
2733 -> 2700;
2733 -> 2731;
2734 -> 2732;
2734 -> 2700;
2734 -> 2731;
2735 -> 2734;
2735 -> 2729;
2736 -> 2730;
2736 -> 2700;
2736 -> 2729;
2737 -> 2736;
2737 -> 2718;
2738 -> 2737;
2738 -> 2720;
2738 -> 2718;
2739 -> 2719;
2739 -> 2718;
2740 -> 2726;
2740 -> 2718;
2741 -> 2724;
2741 -> 2718;
2742 -> 2725;
2742 -> 2718;
2743 -> 2718;
2744 -> 2722;
2744 -> 2718;
2745 -> 2723;
2745 -> 2718;
2746 -> 2718;
2747 -> 2738;
2747 -> 2746;
2748 -> 2739;
2748 -> 2746;
2749 -> 2740;
2749 -> 2746;
2750 -> 2741;
2750 -> 2746;
2751 -> 2742;
2751 -> 2746;
2752 -> 2743;
2752 -> 2746;
2753 -> 2743;
2753 -> 2746;
2754 -> 2744;
2754 -> 2746;
2755 -> 2745;
2755 -> 2746;
2756 -> 2743;
2756 -> 2746;
2757 -> 2746;
2758 -> 2757;
2758 -> 2746;
2759 -> 2757;
2759 -> 2746;
2760 -> 2757;
2760 -> 2746;
2761 -> 2757;
2761 -> 2746;
2762 -> 2757;
2762 -> 2746;
2763 -> 2757;
2763 -> 2746;
2764 -> 2757;
2764 -> 2746;
2765 -> 2757;
2765 -> 2746;
2766 -> 2757;
2766 -> 2746;
2767 -> 2757;
2767 -> 2746;
2768 -> 2757;
2768 -> 2746;
2769 -> 2757;
2769 -> 2746;
2770 -> 2747;
2770 -> 2757;
2770 -> 2746;
2771 -> 2748;
2771 -> 2757;
2771 -> 2746;
2772 -> 2749;
2772 -> 2757;
2772 -> 2746;
2773 -> 2750;
2773 -> 2757;
2773 -> 2746;
2774 -> 2751;
2774 -> 2757;
2774 -> 2746;
2775 -> 2752;
2775 -> 2757;
2775 -> 2746;
2776 -> 2753;
2776 -> 2757;
2776 -> 2746;
2777 -> 2754;
2777 -> 2757;
2777 -> 2746;
2778 -> 2755;
2778 -> 2757;
2778 -> 2746;
2779 -> 2718;
2780 -> 2719;
2780 -> 2779;
2781 -> 2779;
2782 -> 2780;
2782 -> 2781;
2783 -> 2782;
2783 -> 2736;
2783 -> 2781;
2784 -> 2782;
2784 -> 2736;
2784 -> 2781;
2785 -> 2784;
2785 -> 2779;
2786 -> 2780;
2786 -> 2736;
2786 -> 2779;
2787 -> 2786;
2787 -> 2718;
2788 -> 2787;
2788 -> 2743;
2788 -> 2786;
2788 -> 2757;
2788 -> 2758;
2788 -> 2770;
2788 -> 2759;
2788 -> 2771;
2788 -> 2760;
2788 -> 2772;
2788 -> 2761;
2788 -> 2773;
2788 -> 2762;
2788 -> 2774;
2788 -> 2763;
2788 -> 2775;
2788 -> 2764;
2788 -> 2776;
2788 -> 2765;
2788 -> 2777;
2788 -> 2766;
2788 -> 2767;
2788 -> 2768;
2788 -> 2769;
2788 -> 2778;
2788 -> 2717;
2788 -> 2701;
2788 -> 2700;
2788 -> 2718;
2789 -> 2718;
2790 -> 2788;
2790 -> 2789;
2791 -> 2788;
2791 -> 2789;
2792 -> 2791;
2792 -> 2788;
2792 -> 2789;
2793 -> 2790;
2793 -> 2792;
2793 -> 2789;
2794 -> 2793;
2795 -> 2793;
2796 -> 2793;
2797 -> 2795;
2797 -> 2796;
2798 -> 2791;
2798 -> 2796;
2799 -> 2798;
2799 -> 2792;
2799 -> 2796;
2800 -> 2796;
2801 -> 2799;
2802 -> 2793;
2803 -> 2793;
2804 -> 2802;
2804 -> 2803;
2805 -> 2791;
2805 -> 2803;
2806 -> 2805;
2806 -> 2792;
2806 -> 2803;
2807 -> 2803;
2808 -> 2806;
2809 -> 2793;
2810 -> 2791;
2810 -> 2809;
2811 -> 2810;
2811 -> 2792;
2811 -> 2809;
2812 -> 2793;
2813 -> 2793;
2814 -> 2813;
2814 -> 2793;
2815 -> 2814;
2816 -> 2814;
2817 -> 2815;
2817 -> 2816;
2818 -> 2791;
2818 -> 2816;
2819 -> 2818;
2819 -> 2792;
2819 -> 2816;
2820 -> 2816;
2821 -> 2819;
2822 -> 2814;
2823 -> 2791;
2823 -> 2822;
2824 -> 2823;
2824 -> 2792;
2824 -> 2811;
2824 -> 2822;
2825 -> 2814;
2826 -> 2814;
2827 -> 2791;
2827 -> 2792;
2827 -> 2826;
2827 -> 2814;
2828 -> 2814;
2829 -> 2826;
2829 -> 2828;
2830 -> 2826;
2830 -> 2828;
2831 -> 2791;
2831 -> 2828;
2832 -> 2829;
2832 -> 2828;
2833 -> 2830;
2833 -> 2828;
2834 -> 2832;
2834 -> 2833;
2834 -> 2828;
2835 -> 2828;
2836 -> 2834;
2836 -> 2835;
2837 -> 2831;
2837 -> 2835;
2838 -> 2837;
2838 -> 2792;
2838 -> 2835;
2839 -> 2835;
2840 -> 2838;
2841 -> 2828;
2842 -> 2814;
2843 -> 2791;
2843 -> 2842;
2844 -> 2843;
2844 -> 2792;
2844 -> 2811;
2844 -> 2824;
2844 -> 2842;
2845 -> 2842;
2846 -> 2843;
2846 -> 2792;
2846 -> 2811;
2846 -> 2824;
2846 -> 2844;
2846 -> 2845;
2846 -> 2842;
2847 -> 2814;
2848 -> 2814;
2849 -> 2814;
2850 -> 2848;
2850 -> 2849;
2851 -> 2791;
2851 -> 2849;
2852 -> 2851;
2852 -> 2792;
2852 -> 2849;
2853 -> 2849;
2854 -> 2852;
2855 -> 2793;
2856 -> 2793;
2857 -> 2855;
2857 -> 2856;
2858 -> 2791;
2858 -> 2856;
2859 -> 2858;
2859 -> 2792;
2859 -> 2856;
2860 -> 2856;
2861 -> 2859;
2862 -> 2793;
2863 -> 2791;
2863 -> 2862;
2864 -> 2863;
2864 -> 2792;
2864 -> 2811;
2864 -> 2824;
2864 -> 2844;
2864 -> 2862;
2865 -> 2793;
2866 -> 2791;
2866 -> 2792;
2866 -> 2789;
2867 -> 2790;
2867 -> 2792;
2867 -> 2811;
2867 -> 2824;
2867 -> 2844;
2867 -> 2864;
2867 -> 2789;
2868 -> 2791;
2868 -> 2792;
2868 -> 2811;
2868 -> 2824;
2868 -> 2844;
2868 -> 2864;
2868 -> 2867;
2869 -> 2791;
2869 -> 2867;
2870 -> 2869;
2870 -> 2867;
2870 -> 2868;
2870 -> 2792;
2870 -> 2811;
2870 -> 2824;
2870 -> 2844;
2870 -> 2864;
2871 -> 2867;
2872 -> 2870;
2872 -> 2871;
2873 -> 2870;
2873 -> 2871;
2874 -> 2873;
2874 -> 2870;
2874 -> 2871;
2875 -> 2871;
2876 -> 2873;
2876 -> 2874;
2876 -> 2875;
2876 -> 2871;
2877 -> 2872;
2877 -> 2871;
2878 -> 2871;
2879 -> 2877;
2879 -> 2878;
2880 -> 2873;
2880 -> 2878;
2881 -> 2880;
2881 -> 2874;
2881 -> 2878;
2882 -> 2879;
2882 -> 2878;
2883 -> 2878;
2884 -> 2882;
2884 -> 2883;
2885 -> 2884;
2885 -> 2883;
2886 -> 2885;
2886 -> 2881;
2886 -> 2883;
2887 -> 2878;
2888 -> 2880;
2888 -> 2886;
2888 -> 2887;
2888 -> 2878;
2889 -> 2879;
2889 -> 2878;
2890 -> 2889;
2890 -> 2886;
2890 -> 2878;
2891 -> 2890;
2891 -> 2878;
2892 -> 2878;
2893 -> 2878;
2894 -> 2893;
2894 -> 2878;
2895 -> 2879;
2895 -> 2878;
2896 -> 2892;
2896 -> 2878;
2897 -> 2893;
2897 -> 2878;
2898 -> 2878;
2899 -> 2895;
2899 -> 2898;
2900 -> 2896;
2900 -> 2898;
2901 -> 2897;
2901 -> 2898;
2902 -> 2880;
2902 -> 2898;
2903 -> 0;
2903 -> 2898;
2904 -> 2898;
2905 -> 2898;
2906 -> 2899;
2906 -> 2890;
2906 -> 2898;
2907 -> 2906;
2907 -> 2890;
2908 -> 2907;
2908 -> 2903;
2908 -> 2906;
2909 -> 2908;
2909 -> 2906;
2910 -> 2906;
2911 -> 2902;
2911 -> 2910;
2911 -> 2906;
2912 -> 2911;
2912 -> 2906;
2913 -> 2898;
2914 -> 2905;
2914 -> 2913;
2914 -> 2898;
2915 -> 0;
2915 -> 2914;
2916 -> 2898;
2917 -> 2916;
2917 -> 2878;
2918 -> 2915;
2918 -> 0;
2918 -> 2878;
2919 -> 2909;
2919 -> 0;
2919 -> 2918;
2920 -> 2918;
2921 -> 2871;
2922 -> 2873;
2922 -> 2911;
2922 -> 2871;
2923 -> 2872;
2923 -> 2911;
2923 -> 2922;
2924 -> 2873;
2924 -> 2923;
2925 -> 2873;
2925 -> 2923;
2926 -> 2925;
2926 -> 2923;
2926 -> 2924;
2927 -> 2923;
2928 -> 2927;
2929 -> 2926;
2929 -> 2928;
2929 -> 2927;
2930 -> 2927;
2931 -> 2926;
2931 -> 2930;
2931 -> 2927;
2932 -> 2926;
2932 -> 2927;
2933 -> 2927;
2934 -> 2927;
2935 -> 2934;
2935 -> 2927;
2936 -> 2933;
2936 -> 2927;
2937 -> 2934;
2937 -> 2927;
2938 -> 0;
2938 -> 2927;
2939 -> 2927;
2940 -> 2927;
2941 -> 2926;
2942 -> 2941;
2942 -> 2938;
2942 -> 2926;
2943 -> 2942;
2943 -> 2926;
2944 -> 2926;
2945 -> 2927;
2946 -> 2940;
2946 -> 2945;
2946 -> 2927;
2947 -> 0;
2947 -> 2946;
2948 -> 2927;
2949 -> 2947;
2949 -> 0;
2949 -> 2927;
2950 -> 2943;
2950 -> 0;
2950 -> 2949;
2951 -> 2949;
2952 -> 2926;
2953 -> 2926;
2954 -> 2926;
2955 -> 2926;
2956 -> 2926;
2957 -> 2926;
2958 -> 2957;
2958 -> 2926;
2959 -> 2956;
2959 -> 2926;
2960 -> 2957;
2960 -> 2926;
2961 -> 0;
2961 -> 2926;
2962 -> 2926;
2963 -> 2926;
2964 -> 2941;
2964 -> 2961;
2964 -> 2926;
2965 -> 2964;
2965 -> 2926;
2966 -> 2926;
2967 -> 2963;
2967 -> 2966;
2967 -> 2926;
2968 -> 0;
2968 -> 2967;
2969 -> 2926;
2970 -> 2968;
2970 -> 0;
2970 -> 2926;
2971 -> 2965;
2971 -> 0;
2971 -> 2970;
2972 -> 2970;
2973 -> 2956;
2973 -> 2926;
2974 -> 2973;
2974 -> 2961;
2974 -> 2956;
2975 -> 2974;
2975 -> 2956;
2976 -> 2956;
2977 -> 2975;
2977 -> 0;
2977 -> 2970;
2978 -> 2956;
2979 -> 2790;
2979 -> 2956;
2979 -> 2789;
2980 -> 2979;
2981 -> 2980;
2982 -> 2979;
2983 -> 2979;
2984 -> 2979;
2985 -> 2983;
2985 -> 2984;
2986 -> 2791;
2986 -> 2984;
2987 -> 2986;
2987 -> 2956;
2987 -> 2984;
2988 -> 2984;
2989 -> 2987;
2990 -> 2979;
2991 -> 2990;
2991 -> 2956;
2991 -> 2980;
2992 -> 2990;
2993 -> 2990;
2993 -> 2956;
2993 -> 2980;
2993 -> 2991;
2993 -> 2992;
2994 -> 2979;
2995 -> 2979;
2996 -> 2979;
2997 -> 2995;
2997 -> 2996;
2998 -> 2791;
2998 -> 2996;
2999 -> 2998;
2999 -> 2956;
2999 -> 2996;
3000 -> 2996;
3001 -> 2999;
3002 -> 2718;
3003 -> 2743;
3003 -> 2991;
3003 -> 3002;
3003 -> 2718;
3004 -> 2726;
3004 -> 2718;
3005 -> 2718;
3006 -> 2724;
3006 -> 3005;
3006 -> 2718;
3007 -> 3006;
3008 -> 2719;
3008 -> 3007;
3009 -> 3007;
3010 -> 3008;
3010 -> 2991;
3010 -> 3009;
3011 -> 3009;
3012 -> 3010;
3012 -> 3006;
3013 -> 3012;
3014 -> 2722;
3014 -> 3012;
3015 -> 2723;
3015 -> 3012;
3016 -> 3012;
3017 -> 3013;
3017 -> 3016;
3018 -> 3013;
3018 -> 3016;
3019 -> 3014;
3019 -> 3016;
3020 -> 3015;
3020 -> 3016;
3021 -> 3017;
3021 -> 3016;
3022 -> 2659;
3022 -> 1345;
3023 -> 2701;
3023 -> 1345;
3024 -> 2660;
3024 -> 1345;
3025 -> 3022;
3025 -> 3023;
3025 -> 3024;
3025 -> 2661;
3025 -> 3021;
3025 -> 1345;
3026 -> 1345;
3027 -> 1351;
3027 -> 1345;
3028 -> 1351;
3028 -> 1345;
3029 -> 1351;
3029 -> 1345;
3030 -> 1351;
3030 -> 1345;
3031 -> 1345;
3032 -> 3030;
3032 -> 3025;
3032 -> 3031;
3032 -> 1345;
3033 -> 3027;
3033 -> 1345;
3034 -> 1345;
3035 -> 3033;
3035 -> 3034;
3036 -> 3030;
3036 -> 3034;
3037 -> 3034;
3038 -> 3036;
3038 -> 3025;
3038 -> 3037;
3038 -> 3034;
3039 -> 1345;
3040 -> 1351;
3040 -> 1345;
3041 -> 1345;
3042 -> 3040;
3042 -> 3041;
3043 -> 3041;
3044 -> 3042;
3044 -> 3043;
3045 -> 3043;
3046 -> 3044;
3046 -> 3045;
3047 -> 3045;
3048 -> 3046;
3048 -> 3047;
3049 -> 3048;
3049 -> 3025;
3049 -> 3047;
3050 -> 3048;
3050 -> 3025;
3050 -> 3047;
3051 -> 3050;
3051 -> 3045;
3052 -> 3041;
3053 -> 1351;
3053 -> 1345;
3054 -> 1345;
3055 -> 3053;
3055 -> 3054;
3056 -> 3054;
3057 -> 3055;
3057 -> 3056;
3058 -> 3057;
3058 -> 3025;
3058 -> 3056;
3059 -> 3057;
3059 -> 3025;
3059 -> 3056;
3060 -> 3059;
3060 -> 3054;
3061 -> 1345;
3062 -> 1351;
3062 -> 1345;
3063 -> 1345;
3064 -> 3062;
3064 -> 3063;
3065 -> 3063;
3066 -> 3064;
3066 -> 3065;
3067 -> 3066;
3067 -> 3025;
3067 -> 3065;
3068 -> 3066;
3068 -> 3025;
3068 -> 3065;
3069 -> 3068;
3069 -> 3063;
3070 -> 1351;
3070 -> 1345;
3071 -> 1351;
3071 -> 1345;
3072 -> 1345;
3073 -> 3071;
3073 -> 3072;
3074 -> 3073;
3074 -> 3025;
3074 -> 3072;
3075 -> 3074;
3075 -> 1345;
3076 -> 3075;
3076 -> 3025;
3076 -> 1345;
3077 -> 3075;
3077 -> 1345;
3078 -> 3071;
3078 -> 3025;
3078 -> 1345;
3079 -> 3075;
3079 -> 3076;
3080 -> 3070;
3080 -> 3025;
3080 -> 3076;
3081 -> 3076;
3082 -> 3079;
3082 -> 3081;
3083 -> 3080;
3083 -> 3081;
3084 -> 3071;
3084 -> 3081;
3085 -> 3084;
3085 -> 3025;
3085 -> 3081;
3086 -> 3082;
3086 -> 3081;
3087 -> 3085;
3087 -> 3086;
3087 -> 3081;
3088 -> 3081;
3089 -> 3082;
3089 -> 3081;
3090 -> 3088;
3090 -> 3081;
3091 -> 3084;
3091 -> 3025;
3091 -> 3089;
3091 -> 3090;
3091 -> 3081;
3092 -> 3082;
3092 -> 3081;
3093 -> 3081;
3094 -> 3081;
3095 -> 3092;
3095 -> 3094;
3096 -> 3093;
3096 -> 3094;
3097 -> 3096;
3097 -> 3094;
3098 -> 3094;
3099 -> 3095;
3099 -> 3098;
3099 -> 3094;
3100 -> 3095;
3100 -> 3096;
3100 -> 3094;
3101 -> 3082;
3101 -> 3081;
3102 -> 3093;
3102 -> 3081;
3103 -> 3084;
3103 -> 3091;
3103 -> 3101;
3103 -> 3102;
3103 -> 3100;
3103 -> 3081;
3104 -> 3103;
3104 -> 3093;
3104 -> 3081;
3105 -> 3082;
3105 -> 3104;
3106 -> 3103;
3106 -> 3104;
3107 -> 3083;
3107 -> 3104;
3108 -> 3104;
3109 -> 3105;
3109 -> 3108;
3110 -> 3106;
3110 -> 3108;
3111 -> 3107;
3111 -> 3108;
3112 -> 3084;
3112 -> 3108;
3113 -> 3112;
3113 -> 3103;
3113 -> 3108;
3114 -> 3108;
3115 -> 3110;
3115 -> 3114;
3116 -> 3115;
3116 -> 3103;
3116 -> 3114;
3117 -> 3116;
3117 -> 3108;
3118 -> 3113;
3118 -> 3103;
3118 -> 3108;
3119 -> 3112;
3119 -> 3103;
3119 -> 0;
3119 -> 3108;
3120 -> 3117;
3120 -> 3103;
3120 -> 3108;
3121 -> 3119;
3121 -> 3120;
3121 -> 3108;
3122 -> 3109;
3122 -> 3103;
3122 -> 3108;
3123 -> 3109;
3123 -> 3103;
3123 -> 3108;
3124 -> 3108;
3125 -> 3112;
3125 -> 3103;
3125 -> 3124;
3125 -> 3108;
3126 -> 3104;
3127 -> 3081;
3128 -> 3082;
3128 -> 3103;
3128 -> 3127;
3128 -> 3081;
3129 -> 3103;
3129 -> 3081;
3130 -> 3103;
3130 -> 3081;
3131 -> 1351;
3131 -> 3130;
3131 -> 3128;
3131 -> 1320;
3132 -> 1351;
3132 -> 1345;
3133 -> 3132;
3133 -> 3131;
3133 -> 1345;
3134 -> 1351;
3134 -> 1345;
3135 -> 1351;
3135 -> 1345;
3136 -> 3135;
3136 -> 3133;
3136 -> 1345;
3137 -> 1345;
3138 -> 3137;
3138 -> 3136;
3138 -> 3133;
3138 -> 1345;
3139 -> 1345;
3140 -> 1351;
3140 -> 3139;
3140 -> 3133;
3140 -> 1320;
3141 -> 1351;
3141 -> 1345;
3142 -> 1351;
3142 -> 1345;
3143 -> 3141;
3143 -> 3140;
3143 -> 1345;
3144 -> 3142;
3144 -> 3140;
3144 -> 3143;
3145 -> 3141;
3145 -> 3143;
3146 -> 3143;
3147 -> 3144;
3147 -> 3146;
3148 -> 3145;
3148 -> 3146;
3149 -> 3142;
3149 -> 3146;
3150 -> 3147;
3150 -> 3140;
3150 -> 3146;
3151 -> 3150;
3152 -> 3147;
3152 -> 3140;
3152 -> 3150;
3153 -> 3150;
3154 -> 3153;
3154 -> 3152;
3154 -> 3140;
3154 -> 3150;
3155 -> 3148;
3155 -> 3140;
3155 -> 3150;
3156 -> 3149;
3156 -> 3140;
3156 -> 3155;
3157 -> 3147;
3157 -> 3150;
3158 -> 3151;
3158 -> 3150;
3159 -> 3150;
3160 -> 3151;
3160 -> 3158;
3160 -> 3150;
3161 -> 3158;
3161 -> 3146;
3162 -> 1351;
3162 -> 3161;
3162 -> 3160;
3162 -> 3158;
3162 -> 1320;
3163 -> 1351;
3163 -> 1345;
3164 -> 3163;
3164 -> 3162;
3164 -> 1345;
3165 -> 1351;
3165 -> 1345;
3166 -> 1351;
3166 -> 1345;
3167 -> 3165;
3167 -> 3164;
3167 -> 1345;
3168 -> 1345;
3169 -> 3166;
3169 -> 3164;
3169 -> 3168;
3170 -> 3169;
3170 -> 1345;
3171 -> 1345;
3172 -> 1351;
3172 -> 1345;
3173 -> 1351;
3173 -> 1345;
3174 -> 3172;
3174 -> 3170;
3174 -> 1345;
3175 -> 1345;
3176 -> 3174;
3176 -> 3175;
3177 -> 3173;
3177 -> 3175;
3178 -> 3177;
3178 -> 3170;
3178 -> 3175;
3179 -> 3178;
3179 -> 1345;
3180 -> 1345;
3181 -> 1351;
3181 -> 1345;
3182 -> 1351;
3182 -> 1345;
3183 -> 3181;
3183 -> 3179;
3183 -> 1345;
3184 -> 1345;
3185 -> 3183;
3185 -> 3184;
3186 -> 3182;
3186 -> 3184;
3187 -> 3184;
3188 -> 3185;
3188 -> 3184;
3189 -> 3184;
3190 -> 3188;
3190 -> 3189;
3191 -> 3186;
3191 -> 3189;
3192 -> 3189;
3193 -> 3191;
3193 -> 3192;
3194 -> 3192;
3195 -> 3194;
3195 -> 3193;
3195 -> 3192;
3196 -> 3192;
3197 -> 3193;
3197 -> 3196;
3198 -> 3197;
3198 -> 3179;
3198 -> 3195;
3198 -> 3196;
3199 -> 3198;
3199 -> 3192;
3200 -> 3199;
3200 -> 3189;
3201 -> 3189;
3202 -> 3191;
3202 -> 3201;
3203 -> 3198;
3203 -> 3189;
3204 -> 3203;
3205 -> 3200;
3205 -> 3204;
3205 -> 3203;
3206 -> 3205;
3207 -> 3184;
3208 -> 3187;
3208 -> 3184;
3209 -> 3187;
3209 -> 3184;
3210 -> 3187;
3210 -> 3184;
3211 -> 3187;
3211 -> 3184;
3212 -> 3187;
3212 -> 3184;
3213 -> 3187;
3213 -> 3184;
3214 -> 3187;
3214 -> 3184;
3215 -> 3187;
3215 -> 3184;
3216 -> 3187;
3216 -> 3198;
3216 -> 3184;
3217 -> 3216;
3217 -> 1345;
3218 -> 1345;
3219 -> 1351;
3219 -> 1345;
3220 -> 1351;
3220 -> 1345;
3221 -> 1345;
3222 -> 3220;
3222 -> 3217;
3222 -> 1345;
3223 -> 3221;
3223 -> 3222;
3223 -> 3217;
3223 -> 1345;
3224 -> 1345;
3225 -> 3221;
3225 -> 3223;
3225 -> 3224;
3225 -> 1345;
3226 -> 3221;
3226 -> 3223;
3226 -> 3225;
3227 -> 3226;
3227 -> 3225;
3228 -> 3227;
3228 -> 3226;
3228 -> 0;
3229 -> 3228;
3230 -> 3227;
3230 -> 3226;
3230 -> 3228;
3231 -> 1351;
3231 -> 1345;
3232 -> 1351;
3232 -> 1345;
3233 -> 3231;
3233 -> 1345;
3234 -> 3231;
3234 -> 3229;
3234 -> 1345;
3235 -> 1345;
3236 -> 3232;
3236 -> 3235;
3237 -> 3235;
3238 -> 3236;
3238 -> 3237;
3239 -> 3237;
3240 -> 3238;
3240 -> 3239;
3241 -> 3239;
3242 -> 3240;
3242 -> 3241;
3243 -> 3242;
3243 -> 3229;
3243 -> 3241;
3244 -> 3242;
3244 -> 3229;
3244 -> 3241;
3245 -> 3244;
3245 -> 3239;
3246 -> 3235;
3247 -> 3229;
3247 -> 1345;
3248 -> 1345;
3249 -> 3232;
3249 -> 3248;
3250 -> 1351;
3250 -> 1345;
3251 -> 1351;
3251 -> 1345;
3252 -> 1351;
3252 -> 1345;
3253 -> 1351;
3253 -> 1345;
3254 -> 1345;
3255 -> 3253;
3255 -> 3229;
3255 -> 3254;
3256 -> 3254;
3257 -> 3256;
3258 -> 3257;
3259 -> 3255;
3259 -> 3258;
3260 -> 3259;
3260 -> 3257;
3261 -> 3254;
3262 -> 3255;
3262 -> 1345;
3263 -> 3262;
3263 -> 3250;
3263 -> 3255;
3263 -> 1345;
3264 -> 1345;
3265 -> 3264;
3265 -> 1345;
3266 -> 3252;
3266 -> 3265;
3266 -> 3229;
3266 -> 3264;
3266 -> 3255;
3266 -> 1345;
3267 -> 1345;
3268 -> 3264;
3268 -> 3266;
3268 -> 1345;
3269 -> 3268;
3270 -> 3264;
3270 -> 3268;
3270 -> 1345;
3271 -> 3269;
3271 -> 1345;
3272 -> 1351;
3272 -> 3271;
3272 -> 3270;
3272 -> 1320;
3273 -> 3231;
3273 -> 3272;
3273 -> 1345;
3274 -> 3242;
3274 -> 3272;
3274 -> 3241;
3275 -> 3242;
3275 -> 3272;
3275 -> 3241;
3276 -> 3275;
3276 -> 3239;
3277 -> 3272;
3277 -> 1345;
3278 -> 3272;
3278 -> 3258;
3279 -> 3278;
3279 -> 3257;
3280 -> 3272;
3280 -> 1345;
3281 -> 3280;
3281 -> 3250;
3281 -> 3272;
3281 -> 1345;
3282 -> 1351;
3282 -> 1345;
3283 -> 1351;
3283 -> 1345;
3284 -> 1351;
3284 -> 1345;
3285 -> 1345;
3286 -> 3282;
3286 -> 3283;
3286 -> 1345;
3287 -> 3282;
3287 -> 3272;
3287 -> 1345;
3288 -> 3283;
3288 -> 3287;
3288 -> 1345;
3289 -> 3282;
3289 -> 3288;
3289 -> 3283;
3289 -> 1345;
3290 -> 3287;
3290 -> 1345;
3291 -> 3288;
3291 -> 1345;
3292 -> 1345;
3293 -> 3291;
3293 -> 3292;
3293 -> 1345;
3294 -> 3291;
3294 -> 3293;
3295 -> 1351;
3295 -> 1345;
3296 -> 1351;
3296 -> 1345;
3297 -> 1345;
3298 -> 1351;
3298 -> 3297;
3298 -> 3294;
3298 -> 1320;
3299 -> 3231;
3299 -> 3298;
3299 -> 1345;
3300 -> 3242;
3300 -> 3298;
3300 -> 3241;
3301 -> 3242;
3301 -> 3298;
3301 -> 3241;
3302 -> 3301;
3302 -> 3239;
3303 -> 3298;
3303 -> 1345;
3304 -> 3298;
3304 -> 3258;
3305 -> 3304;
3305 -> 3257;
3306 -> 3298;
3306 -> 1345;
3307 -> 3306;
3307 -> 3250;
3307 -> 3298;
3307 -> 1345;
3308 -> 3264;
3308 -> 3298;
3309 -> 3298;
3310 -> 3264;
3310 -> 3298;
3311 -> 3310;
3311 -> 3308;
3311 -> 3298;
3312 -> 3298;
3313 -> 3311;
3313 -> 3312;
3313 -> 3298;
3314 -> 3251;
3314 -> 3313;
3315 -> 3311;
3315 -> 3313;
3316 -> 3313;
3317 -> 3314;
3317 -> 3316;
3318 -> 3315;
3318 -> 3316;
3319 -> 3253;
3319 -> 3316;
3320 -> 3318;
3320 -> 3317;
3320 -> 3316;
3321 -> 3320;
3322 -> 3231;
3322 -> 3321;
3322 -> 1345;
3323 -> 3242;
3323 -> 3321;
3323 -> 3241;
3324 -> 3242;
3324 -> 3321;
3324 -> 3241;
3325 -> 3324;
3325 -> 3239;
3326 -> 3321;
3326 -> 1345;
3327 -> 3321;
3327 -> 3258;
3328 -> 3327;
3328 -> 3257;
3329 -> 3321;
3329 -> 1345;
3330 -> 3329;
3330 -> 3250;
3330 -> 3321;
3330 -> 1345;
3331 -> 3253;
3331 -> 3321;
3332 -> 1351;
3332 -> 1345;
3333 -> 1351;
3333 -> 1345;
3334 -> 3333;
3334 -> 1345;
3335 -> 3332;
3335 -> 1345;
3336 -> 3333;
3336 -> 3321;
3336 -> 1345;
3337 -> 3334;
3337 -> 3335;
3337 -> 3336;
3337 -> 3333;
3337 -> 3321;
3337 -> 1345;
3338 -> 1345;
3339 -> 3337;
3339 -> 0;
3339 -> 3338;
3340 -> 3338;
3341 -> 3337;
3342 -> 3341;
3342 -> 3337;
3343 -> 3337;
3343 -> 3338;
3344 -> 3338;
3345 -> 3344;
3346 -> 3337;
3346 -> 3345;
3347 -> 3346;
3347 -> 3344;
3348 -> 3338;
3349 -> 3338;
3350 -> 1351;
3350 -> 1345;
3351 -> 1351;
3351 -> 1345;
3352 -> 1351;
3352 -> 1345;
3353 -> 1351;
3353 -> 1345;
3354 -> 1351;
3354 -> 1345;
3355 -> 1351;
3355 -> 1345;
3356 -> 3350;
3356 -> 1345;
3357 -> 3356;
3357 -> 3337;
3357 -> 1345;
3358 -> 1345;
3359 -> 3353;
3359 -> 3358;
3359 -> 1345;
3360 -> 3350;
3360 -> 1345;
3361 -> 3351;
3361 -> 1345;
3362 -> 3352;
3362 -> 1345;
3363 -> 3354;
3363 -> 1345;
3364 -> 1345;
3365 -> 3360;
3365 -> 3364;
3366 -> 3361;
3366 -> 3364;
3367 -> 3362;
3367 -> 3364;
3368 -> 3363;
3368 -> 3364;
3369 -> 3355;
3369 -> 3364;
3370 -> 3364;
3371 -> 3364;
3372 -> 3365;
3372 -> 3357;
3372 -> 3364;
3373 -> 3372;
3373 -> 3357;
3373 -> 3364;
3374 -> 3365;
3374 -> 3357;
3374 -> 3364;
3375 -> 3365;
3375 -> 3374;
3375 -> 3364;
3376 -> 3368;
3376 -> 3375;
3377 -> 3365;
3377 -> 3374;
3377 -> 3376;
3378 -> 3372;
3378 -> 3376;
3379 -> 3376;
3380 -> 3378;
3380 -> 3379;
3381 -> 3379;
3382 -> 3380;
3382 -> 3381;
3382 -> 3379;
3383 -> 3382;
3384 -> 3380;
3384 -> 3374;
3384 -> 3382;
3385 -> 3379;
3386 -> 3385;
3386 -> 3376;
3387 -> 3377;
3387 -> 3386;
3387 -> 3376;
3388 -> 3365;
3388 -> 3387;
3389 -> 3365;
3389 -> 3374;
3389 -> 3387;
3390 -> 3364;
3391 -> 3369;
3391 -> 3374;
3391 -> 3390;
3391 -> 3364;
3392 -> 3365;
3392 -> 3374;
3392 -> 3364;
3393 -> 1345;
3394 -> 3353;
3394 -> 3393;
3394 -> 1345;
3395 -> 3392;
3395 -> 3394;
3396 -> 1351;
3396 -> 1345;
3397 -> 1351;
3397 -> 1345;
3398 -> 1351;
3398 -> 1345;
3399 -> 1351;
3399 -> 1345;
3400 -> 1345;
3401 -> 3398;
3401 -> 3400;
3401 -> 1345;
3402 -> 3396;
3402 -> 3395;
3402 -> 1345;
3403 -> 3396;
3403 -> 3402;
3404 -> 3397;
3404 -> 3402;
3405 -> 3398;
3405 -> 3402;
3406 -> 3402;
3407 -> 3402;
3408 -> 3403;
3408 -> 3407;
3409 -> 3404;
3409 -> 3407;
3410 -> 3405;
3410 -> 3407;
3411 -> 3406;
3411 -> 3407;
3412 -> 3406;
3412 -> 3407;
3413 -> 3399;
3413 -> 3407;
3414 -> 3408;
3414 -> 3395;
3414 -> 3407;
3415 -> 3407;
3416 -> 3410;
3416 -> 3415;
3416 -> 3407;
3417 -> 3408;
3417 -> 3414;
3417 -> 3407;
3418 -> 3408;
3418 -> 3414;
3418 -> 3417;
3419 -> 3408;
3419 -> 3414;
3419 -> 0;
3419 -> 3407;
3420 -> 3408;
3420 -> 3414;
3420 -> 3407;
3421 -> 3412;
3421 -> 3420;
3422 -> 3421;
3423 -> 3421;
3424 -> 3408;
3424 -> 3414;
3424 -> 3421;
3425 -> 3421;
3426 -> 3424;
3426 -> 3425;
3427 -> 3425;
3428 -> 3426;
3428 -> 3427;
3429 -> 3427;
3430 -> 3428;
3430 -> 3429;
3430 -> 3427;
3431 -> 3427;
3432 -> 3431;
3432 -> 3425;
3433 -> 3408;
3433 -> 3414;
3433 -> 3432;
3434 -> 3408;
3434 -> 3414;
3434 -> 3407;
3435 -> 3413;
3435 -> 3414;
3435 -> 3407;
3436 -> 3408;
3436 -> 3414;
3436 -> 3407;
3437 -> 1351;
3437 -> 1345;
3438 -> 1351;
3438 -> 1345;
3439 -> 1351;
3439 -> 1345;
3440 -> 1351;
3440 -> 1345;
3441 -> 1351;
3441 -> 1345;
3442 -> 1351;
3442 -> 1345;
3443 -> 1345;
3444 -> 3439;
3444 -> 3443;
3444 -> 1345;
3445 -> 3437;
3445 -> 3435;
3445 -> 1345;
3446 -> 3437;
3446 -> 3435;
3446 -> 3445;
3447 -> 3437;
3447 -> 3435;
3447 -> 0;
3447 -> 1345;
3448 -> 3437;
3448 -> 3435;
3448 -> 1345;
3449 -> 3441;
3449 -> 3448;
3450 -> 3437;
3450 -> 3435;
3450 -> 1345;
3451 -> 1351;
3451 -> 1345;
3452 -> 1351;
3452 -> 1345;
3453 -> 1351;
3453 -> 1345;
3454 -> 3453;
3454 -> 3435;
3454 -> 1345;
3455 -> 3451;
3455 -> 1345;
3456 -> 3454;
3456 -> 3455;
3456 -> 1345;
3457 -> 1345;
3458 -> 3451;
3458 -> 3457;
3458 -> 1345;
3459 -> 1345;
3460 -> 3451;
3460 -> 1345;
3461 -> 3459;
3461 -> 1345;
3462 -> 3453;
3462 -> 3435;
3462 -> 3460;
3462 -> 3461;
3462 -> 1345;
3463 -> 3462;
3464 -> 3437;
3464 -> 3463;
3464 -> 1345;
3465 -> 3437;
3465 -> 3463;
3465 -> 3464;
3466 -> 3437;
3466 -> 3463;
3466 -> 0;
3466 -> 1345;
3467 -> 3437;
3467 -> 3463;
3467 -> 1345;
3468 -> 3441;
3468 -> 3467;
3469 -> 3437;
3469 -> 3463;
3469 -> 1345;
3470 -> 1351;
3470 -> 1345;
3471 -> 1351;
3471 -> 1345;
3472 -> 3470;
3472 -> 1345;
3473 -> 1345;
3474 -> 3472;
3474 -> 3473;
3474 -> 3463;
3474 -> 1345;
3475 -> 3470;
3475 -> 1345;
3476 -> 3475;
3476 -> 3463;
3476 -> 3474;
3476 -> 1345;
3477 -> 1345;
3478 -> 3476;
3478 -> 3477;
3479 -> 3478;
3479 -> 3476;
3479 -> 3477;
3480 -> 3478;
3480 -> 3476;
3480 -> 3479;
3481 -> 3480;
3481 -> 3479;
3482 -> 3479;
3483 -> 3481;
3483 -> 3482;
3484 -> 3483;
3484 -> 3476;
3484 -> 0;
3484 -> 3482;
3485 -> 3483;
3485 -> 3476;
3485 -> 3482;
3486 -> 3482;
3487 -> 3485;
3487 -> 3486;
3488 -> 3486;
3489 -> 3487;
3489 -> 3488;
3489 -> 3486;
3490 -> 3489;
3491 -> 3487;
3491 -> 3476;
3491 -> 3489;
3492 -> 3486;
3493 -> 3492;
3493 -> 3482;
3494 -> 3484;
3494 -> 3493;
3494 -> 3482;
3495 -> 3477;
3496 -> 3495;
3496 -> 1345;
3497 -> 3476;
3497 -> 3496;
3497 -> 1345;
3498 -> 3470;
3498 -> 1345;
3499 -> 3497;
3499 -> 1345;
3500 -> 1345;
3501 -> 3499;
3501 -> 3500;
3502 -> 3501;
3502 -> 3499;
3502 -> 3500;
3503 -> 3501;
3503 -> 3499;
3503 -> 3502;
3504 -> 3503;
3504 -> 3502;
3505 -> 3502;
3506 -> 3504;
3506 -> 3505;
3507 -> 3506;
3507 -> 3499;
3507 -> 0;
3507 -> 3505;
3508 -> 3506;
3508 -> 3499;
3508 -> 3505;
3509 -> 3505;
3510 -> 3508;
3510 -> 3509;
3511 -> 3509;
3512 -> 3510;
3512 -> 3511;
3512 -> 3509;
3513 -> 3512;
3514 -> 3510;
3514 -> 3499;
3514 -> 3512;
3515 -> 3509;
3516 -> 3515;
3516 -> 3505;
3517 -> 3507;
3517 -> 3516;
3517 -> 3505;
3518 -> 3500;
3519 -> 3497;
3519 -> 1345;
3520 -> 3470;
3520 -> 3519;
3521 -> 3519;
3522 -> 3520;
3522 -> 3521;
3522 -> 3463;
3522 -> 3499;
3522 -> 3519;
3523 -> 3397;
3523 -> 3522;
3524 -> 3398;
3524 -> 3522;
3525 -> 3523;
3525 -> 3522;
3526 -> 3524;
3526 -> 3522;
3527 -> 3522;
3528 -> 3522;
3529 -> 3522;
3530 -> 3526;
3530 -> 3529;
3530 -> 3522;
3531 -> 3522;
3532 -> 3522;
3532 -> 3531;
3533 -> 3522;
3533 -> 0;
3534 -> 3522;
3535 -> 3528;
3535 -> 3534;
3536 -> 3535;
3537 -> 3535;
3538 -> 3522;
3538 -> 3535;
3539 -> 3535;
3540 -> 3538;
3540 -> 3539;
3541 -> 3539;
3542 -> 3540;
3542 -> 3541;
3543 -> 3541;
3544 -> 3542;
3544 -> 3543;
3544 -> 3541;
3545 -> 3541;
3546 -> 3545;
3546 -> 3539;
3547 -> 3522;
3547 -> 3546;
3548 -> 3522;
3549 -> 1351;
3549 -> 1345;
3550 -> 1351;
3550 -> 1345;
3551 -> 1351;
3551 -> 1345;
3552 -> 3549;
3552 -> 3522;
3552 -> 1345;
3553 -> 1345;
3554 -> 3552;
3554 -> 3553;
3554 -> 1345;
3555 -> 3550;
3555 -> 0;
3555 -> 3554;
3556 -> 3552;
3556 -> 3550;
3556 -> 3554;
3557 -> 3550;
3557 -> 0;
3557 -> 3556;
3558 -> 3397;
3558 -> 3556;
3559 -> 3398;
3559 -> 3556;
3560 -> 3558;
3560 -> 3556;
3561 -> 3559;
3561 -> 3556;
3562 -> 3556;
3563 -> 3556;
3564 -> 3556;
3565 -> 3561;
3565 -> 3564;
3565 -> 3556;
3566 -> 3556;
3567 -> 3556;
3567 -> 3566;
3568 -> 3556;
3568 -> 0;
3569 -> 3556;
3570 -> 3563;
3570 -> 3569;
3571 -> 3570;
3572 -> 3570;
3573 -> 3556;
3573 -> 3570;
3574 -> 3570;
3575 -> 3573;
3575 -> 3574;
3576 -> 3574;
3577 -> 3575;
3577 -> 3576;
3578 -> 3576;
3579 -> 3577;
3579 -> 3578;
3579 -> 3576;
3580 -> 3576;
3581 -> 3580;
3581 -> 3574;
3582 -> 3556;
3582 -> 3581;
3583 -> 3556;
3584 -> 3437;
3584 -> 3556;
3584 -> 1345;
3585 -> 3437;
3585 -> 3556;
3585 -> 3584;
3586 -> 3437;
3586 -> 3556;
3586 -> 0;
3586 -> 1345;
3587 -> 3437;
3587 -> 3556;
3587 -> 1345;
3588 -> 3441;
3588 -> 3587;
3589 -> 3437;
3589 -> 3556;
3589 -> 1345;
3590 -> 3453;
3590 -> 3556;
3590 -> 1345;
3591 -> 3556;
3591 -> 3477;
3592 -> 3591;
3592 -> 3556;
3592 -> 3477;
3593 -> 3591;
3593 -> 3556;
3593 -> 3592;
3594 -> 3593;
3594 -> 3592;
3595 -> 3592;
3596 -> 3594;
3596 -> 3595;
3597 -> 3596;
3597 -> 3556;
3597 -> 0;
3597 -> 3595;
3598 -> 3596;
3598 -> 3556;
3598 -> 3595;
3599 -> 3595;
3600 -> 3598;
3600 -> 3599;
3601 -> 3599;
3602 -> 3600;
3602 -> 3601;
3602 -> 3599;
3603 -> 3602;
3604 -> 3600;
3604 -> 3556;
3604 -> 3602;
3605 -> 3599;
3606 -> 3605;
3606 -> 3595;
3607 -> 3597;
3607 -> 3606;
3607 -> 3595;
3608 -> 3556;
3608 -> 3500;
3609 -> 3608;
3609 -> 3556;
3609 -> 3500;
3610 -> 3608;
3610 -> 3556;
3610 -> 3609;
3611 -> 3610;
3611 -> 3609;
3612 -> 3609;
3613 -> 3611;
3613 -> 3612;
3614 -> 3613;
3614 -> 3556;
3614 -> 0;
3614 -> 3612;
3615 -> 3613;
3615 -> 3556;
3615 -> 3612;
3616 -> 3612;
3617 -> 3615;
3617 -> 3616;
3618 -> 3616;
3619 -> 3617;
3619 -> 3618;
3619 -> 3616;
3620 -> 3619;
3621 -> 3617;
3621 -> 3556;
3621 -> 3619;
3622 -> 3616;
3623 -> 3622;
3623 -> 3612;
3624 -> 3614;
3624 -> 3623;
3624 -> 3612;
3625 -> 3365;
3625 -> 3556;
3625 -> 3364;
3626 -> 3625;
3626 -> 3556;
3626 -> 3364;
3627 -> 3365;
3627 -> 3556;
3627 -> 3364;
3628 -> 3368;
3628 -> 3627;
3629 -> 3365;
3629 -> 3556;
3629 -> 3628;
3630 -> 3625;
3630 -> 3628;
3631 -> 3628;
3632 -> 3630;
3632 -> 3631;
3633 -> 3631;
3634 -> 3632;
3634 -> 3633;
3634 -> 3631;
3635 -> 3634;
3636 -> 3632;
3636 -> 3556;
3636 -> 3634;
3637 -> 3631;
3638 -> 3637;
3638 -> 3628;
3639 -> 3629;
3639 -> 3638;
3639 -> 3628;
3640 -> 3365;
3640 -> 3639;
3641 -> 3365;
3641 -> 3556;
3641 -> 3639;
3642 -> 3369;
3642 -> 3556;
3642 -> 3390;
3642 -> 3364;
3643 -> 3579;
3644 -> 3577;
3644 -> 3556;
3644 -> 3579;
3645 -> 1351;
3645 -> 1345;
3646 -> 3645;
3646 -> 3556;
3646 -> 1345;
3647 -> 1345;
3648 -> 3070;
3648 -> 3646;
3649 -> 3648;
3649 -> 3646;
3650 -> 3646;
3651 -> 3646;
3652 -> 3135;
3652 -> 3651;
3652 -> 1345;
3653 -> 3137;
3653 -> 3652;
3653 -> 3651;
3653 -> 1345;
3654 -> 1351;
3654 -> 1345;
3655 -> 3654;
3655 -> 1345;
3656 -> 3655;
3656 -> 3654;
3656 -> 3651;
3656 -> 1345;
3657 -> 1345;
3658 -> 3165;
3658 -> 3656;
3658 -> 1345;
3659 -> 3172;
3659 -> 3656;
3659 -> 1345;
3660 -> 3659;
3660 -> 3175;
3661 -> 3181;
3661 -> 3656;
3661 -> 1345;
3662 -> 3661;
3662 -> 3184;
3663 -> 3662;
3663 -> 3184;
3664 -> 3663;
3664 -> 3189;
3665 -> 3656;
3665 -> 3192;
3666 -> 3665;
3666 -> 3189;
3667 -> 3656;
3667 -> 3189;
3668 -> 3667;
3669 -> 3666;
3669 -> 3668;
3669 -> 3667;
3670 -> 3669;
3671 -> 3231;
3671 -> 3656;
3671 -> 1345;
3672 -> 3242;
3672 -> 3656;
3672 -> 3241;
3673 -> 3242;
3673 -> 3656;
3673 -> 3241;
3674 -> 3673;
3674 -> 3239;
3675 -> 3656;
3675 -> 1345;
3676 -> 3656;
3676 -> 3258;
3677 -> 3676;
3677 -> 3257;
3678 -> 3656;
3678 -> 1345;
3679 -> 3678;
3679 -> 3250;
3679 -> 3656;
3679 -> 1345;
3680 -> 3253;
3680 -> 3656;
3681 -> 3437;
3681 -> 3656;
3681 -> 1345;
3682 -> 3437;
3682 -> 3656;
3682 -> 3681;
3683 -> 3437;
3683 -> 3656;
3683 -> 0;
3683 -> 1345;
3684 -> 3437;
3684 -> 3656;
3684 -> 1345;
3685 -> 3441;
3685 -> 3684;
3686 -> 3685;
3687 -> 3685;
3688 -> 3437;
3688 -> 3656;
3688 -> 3685;
3689 -> 3685;
3690 -> 3688;
3690 -> 3689;
3691 -> 3689;
3692 -> 3690;
3692 -> 3691;
3693 -> 3691;
3694 -> 3692;
3694 -> 3693;
3694 -> 3691;
3695 -> 3691;
3696 -> 3695;
3696 -> 3689;
3697 -> 3437;
3697 -> 3656;
3697 -> 3696;
3698 -> 3437;
3698 -> 3656;
3698 -> 1345;
3699 -> 3453;
3699 -> 3656;
3699 -> 1345;
3700 -> 3397;
3700 -> 3656;
3701 -> 3398;
3701 -> 3656;
3702 -> 3700;
3702 -> 3656;
3703 -> 3701;
3703 -> 3656;
3704 -> 3656;
3705 -> 3656;
3706 -> 3656;
3707 -> 3703;
3707 -> 3706;
3707 -> 3656;
3708 -> 3656;
3709 -> 3656;
3709 -> 3708;
3710 -> 3656;
3710 -> 0;
3711 -> 3656;
3712 -> 3705;
3712 -> 3711;
3713 -> 3712;
3714 -> 3712;
3715 -> 3656;
3715 -> 3712;
3716 -> 3712;
3717 -> 3715;
3717 -> 3716;
3718 -> 3716;
3719 -> 3717;
3719 -> 3718;
3720 -> 3718;
3721 -> 3719;
3721 -> 3720;
3721 -> 3718;
3722 -> 3718;
3723 -> 3722;
3723 -> 3716;
3724 -> 3656;
3724 -> 3723;
3725 -> 3656;
3726 -> 3282;
3726 -> 3656;
3726 -> 3283;
3726 -> 1345;
3727 -> 3721;
3728 -> 3719;
3728 -> 3656;
3728 -> 3721;
3729 -> 3453;
3729 -> 3699;
3730 -> 3231;
3730 -> 3729;
3730 -> 1345;
3731 -> 3242;
3731 -> 3729;
3731 -> 3241;
3732 -> 3242;
3732 -> 3729;
3732 -> 3241;
3733 -> 3732;
3733 -> 3239;
3734 -> 3729;
3734 -> 1345;
3735 -> 3729;
3735 -> 3258;
3736 -> 3735;
3736 -> 3257;
3737 -> 3729;
3737 -> 1345;
3738 -> 3737;
3738 -> 3250;
3738 -> 3729;
3738 -> 1345;
3739 -> 3397;
3739 -> 3729;
3740 -> 3398;
3740 -> 3729;
3741 -> 3739;
3741 -> 3729;
3742 -> 3740;
3742 -> 3729;
3743 -> 3729;
3744 -> 3729;
3745 -> 3729;
3746 -> 3742;
3746 -> 3745;
3746 -> 3729;
3747 -> 3729;
3748 -> 3729;
3748 -> 3747;
3749 -> 3729;
3749 -> 0;
3750 -> 3729;
3751 -> 3744;
3751 -> 3750;
3752 -> 3751;
3753 -> 3751;
3754 -> 3729;
3754 -> 3751;
3755 -> 3751;
3756 -> 3754;
3756 -> 3755;
3757 -> 3755;
3758 -> 3756;
3758 -> 3757;
3759 -> 3757;
3760 -> 3758;
3760 -> 3759;
3760 -> 3757;
3761 -> 3757;
3762 -> 3761;
3762 -> 3755;
3763 -> 3729;
3763 -> 3762;
3764 -> 3729;
3765 -> 3253;
3765 -> 3729;
3766 -> 3760;
3767 -> 3758;
3767 -> 3729;
3767 -> 3760;
3768 -> 1351;
3768 -> 1345;
3769 -> 1345;
3770 -> 3768;
3770 -> 3769;
3771 -> 3769;
3772 -> 3770;
3772 -> 3771;
3773 -> 3772;
3773 -> 3729;
3773 -> 3771;
3774 -> 3772;
3774 -> 3729;
3774 -> 3771;
3775 -> 3774;
3775 -> 3769;
3776 -> 1351;
3776 -> 1345;
3777 -> 1351;
3777 -> 1345;
3778 -> 1345;
3779 -> 3777;
3779 -> 3778;
3780 -> 1345;
3781 -> 1351;
3781 -> 1345;
3782 -> 3365;
3782 -> 3729;
3782 -> 3364;
3783 -> 3782;
3783 -> 3729;
3783 -> 3364;
3784 -> 3365;
3784 -> 3729;
3784 -> 3364;
3785 -> 3368;
3785 -> 3784;
3786 -> 3365;
3786 -> 3729;
3786 -> 3785;
3787 -> 3782;
3787 -> 3785;
3788 -> 3785;
3789 -> 3787;
3789 -> 3788;
3790 -> 3788;
3791 -> 3789;
3791 -> 3790;
3791 -> 3788;
3792 -> 3791;
3793 -> 3789;
3793 -> 3729;
3793 -> 3791;
3794 -> 3788;
3795 -> 3794;
3795 -> 3785;
3796 -> 3786;
3796 -> 3795;
3796 -> 3785;
3797 -> 3365;
3797 -> 3796;
3798 -> 3365;
3798 -> 3729;
3798 -> 3796;
3799 -> 3369;
3799 -> 3729;
3799 -> 3390;
3799 -> 3364;
3800 -> 3437;
3800 -> 3729;
3800 -> 1345;
3801 -> 3437;
3801 -> 3729;
3801 -> 3800;
3802 -> 3437;
3802 -> 3729;
3802 -> 0;
3802 -> 1345;
3803 -> 3437;
3803 -> 3729;
3803 -> 1345;
3804 -> 3441;
3804 -> 3803;
3805 -> 3437;
3805 -> 3729;
3805 -> 1345;
3806 -> 3550;
3806 -> 0;
3806 -> 3729;
3807 -> 3804;
3808 -> 3804;
3809 -> 3437;
3809 -> 3729;
3809 -> 3804;
3810 -> 3804;
3811 -> 3809;
3811 -> 3810;
3812 -> 3810;
3813 -> 3811;
3813 -> 3812;
3814 -> 3812;
3815 -> 3813;
3815 -> 3814;
3815 -> 3812;
3816 -> 3812;
3817 -> 3816;
3817 -> 3810;
3818 -> 3437;
3818 -> 3729;
3818 -> 3817;
3819 -> 1351;
3819 -> 1345;
3820 -> 1351;
3820 -> 1345;
3821 -> 3820;
3821 -> 3729;
3821 -> 1345;
3822 -> 3820;
3822 -> 3729;
3822 -> 1345;
3823 -> 3822;
3824 -> 3820;
3824 -> 3823;
3825 -> 3824;
3825 -> 3729;
3825 -> 3823;
3826 -> 3823;
3827 -> 3824;
3827 -> 3729;
3827 -> 3823;
3828 -> 3825;
3828 -> 3729;
3828 -> 3827;
3829 -> 3827;
3830 -> 3829;
3830 -> 3828;
3830 -> 3729;
3830 -> 3827;
3831 -> 3824;
3831 -> 3729;
3831 -> 3823;
3832 -> 3823;
3833 -> 3825;
3833 -> 3729;
3833 -> 3832;
3834 -> 3833;
3834 -> 3823;
3835 -> 3825;
3835 -> 3823;
3836 -> 3826;
3836 -> 3823;
3837 -> 3823;
3838 -> 3835;
3838 -> 3837;
3839 -> 3836;
3839 -> 3837;
3840 -> 3837;
3841 -> 3840;
3841 -> 3837;
3842 -> 3838;
3842 -> 3729;
3842 -> 3837;
3843 -> 3839;
3843 -> 3837;
3844 -> 3837;
3845 -> 3841;
3845 -> 3844;
3846 -> 3842;
3846 -> 3844;
3847 -> 3843;
3847 -> 3844;
3848 -> 3844;
3849 -> 3846;
3849 -> 3848;
3849 -> 3844;
3850 -> 3837;
3851 -> 3837;
3852 -> 3838;
3852 -> 3842;
3852 -> 3851;
3853 -> 3852;
3853 -> 3837;
3854 -> 3840;
3854 -> 3853;
3855 -> 3838;
3855 -> 3842;
3855 -> 3853;
3856 -> 3839;
3856 -> 3853;
3857 -> 3853;
3858 -> 3854;
3858 -> 3857;
3859 -> 3855;
3859 -> 3857;
3860 -> 3856;
3860 -> 3857;
3861 -> 3857;
3862 -> 3859;
3862 -> 3861;
3862 -> 3857;
3863 -> 3853;
3864 -> 3840;
3864 -> 3837;
3865 -> 3864;
3865 -> 3823;
3866 -> 3826;
3866 -> 3823;
3867 -> 3866;
3867 -> 3822;
3868 -> 3867;
3868 -> 3820;
3868 -> 3822;
3869 -> 3822;
3870 -> 3820;
3870 -> 3855;
3870 -> 3868;
3870 -> 3866;
3870 -> 3869;
3870 -> 3822;
3871 -> 3820;
3871 -> 3855;
3871 -> 3868;
3871 -> 1345;
3872 -> 1351;
3872 -> 1345;
3873 -> 1351;
3873 -> 1345;
3874 -> 1351;
3874 -> 1345;
3875 -> 3874;
3875 -> 3871;
3875 -> 1345;
3876 -> 3875;
3876 -> 3871;
3876 -> 1345;
3877 -> 1345;
3878 -> 3877;
3878 -> 3876;
3878 -> 1345;
3879 -> 1351;
3879 -> 1345;
3880 -> 0;
3880 -> 1345;
3881 -> 1351;
3881 -> 3880;
3881 -> 3871;
3881 -> 0;
3881 -> 1320;
3882 -> 1345;
3883 -> 3882;
3884 -> 3883;
3885 -> 1351;
3885 -> 1345;
3886 -> 1345;
3887 -> 1351;
3887 -> 3886;
3887 -> 3881;
3887 -> 1320;
3888 -> 1351;
3888 -> 1345;
3889 -> 1345;
3890 -> 3888;
3890 -> 3889;
3891 -> 3890;
3891 -> 3887;
3891 -> 3889;
3892 -> 3890;
3892 -> 3887;
3892 -> 3889;
3893 -> 3892;
3893 -> 1345;
3894 -> 1351;
3894 -> 1345;
3895 -> 1351;
3895 -> 1345;
3896 -> 3895;
3896 -> 3893;
3896 -> 1345;
3897 -> 0;
3897 -> 1345;
3898 -> 3895;
3898 -> 3893;
3898 -> 1345;
3899 -> 1345;
3900 -> 3897;
3900 -> 3899;
3901 -> 3898;
3901 -> 3899;
3902 -> 3895;
3902 -> 3899;
3903 -> 3900;
3903 -> 3899;
3904 -> 3899;
3905 -> 3894;
3905 -> 3903;
3905 -> 3904;
3905 -> 3899;
3906 -> 3899;
3907 -> 3894;
3907 -> 3906;
3907 -> 3899;
3908 -> 3901;
3908 -> 3899;
3909 -> 3899;
3910 -> 3894;
3910 -> 3908;
3910 -> 3909;
3910 -> 3899;
3911 -> 3899;
3912 -> 3894;
3912 -> 3911;
3912 -> 3899;
3913 -> 1345;
3914 -> 1345;
3915 -> 3895;
3915 -> 3914;
3916 -> 3915;
3916 -> 3893;
3916 -> 3914;
3917 -> 3916;
3917 -> 1345;
3918 -> 1345;
3919 -> 3895;
3919 -> 3918;
3920 -> 3919;
3920 -> 3893;
3920 -> 3918;
3921 -> 3920;
3921 -> 1345;
3922 -> 1345;
3923 -> 3895;
3923 -> 3922;
3924 -> 3923;
3924 -> 3893;
3924 -> 3922;
3925 -> 3924;
3925 -> 1345;
3926 -> 1345;
3927 -> 3895;
3927 -> 3926;
3928 -> 3926;
3929 -> 3927;
3929 -> 3928;
3930 -> 3928;
3931 -> 3929;
3931 -> 3893;
3931 -> 3930;
3932 -> 3930;
3933 -> 3931;
3933 -> 3926;
3934 -> 3933;
3934 -> 3926;
3935 -> 3933;
3935 -> 3926;
3936 -> 3935;
3936 -> 1345;
3937 -> 3936;
3937 -> 1345;
3938 -> 3437;
3938 -> 3937;
3938 -> 1345;
3939 -> 3437;
3939 -> 3937;
3939 -> 3938;
3940 -> 3437;
3940 -> 3937;
3940 -> 0;
3940 -> 1345;
3941 -> 3437;
3941 -> 3937;
3941 -> 1345;
3942 -> 3441;
3942 -> 3941;
3943 -> 3437;
3943 -> 3937;
3943 -> 1345;
3944 -> 3397;
3944 -> 3937;
3945 -> 3398;
3945 -> 3937;
3946 -> 3944;
3946 -> 3937;
3947 -> 3945;
3947 -> 3937;
3948 -> 3937;
3949 -> 3937;
3950 -> 3937;
3951 -> 3947;
3951 -> 3950;
3951 -> 3937;
3952 -> 3937;
3953 -> 3937;
3953 -> 3952;
3954 -> 3937;
3954 -> 0;
3955 -> 3937;
3956 -> 3949;
3956 -> 3955;
3957 -> 3956;
3958 -> 3956;
3959 -> 3937;
3959 -> 3956;
3960 -> 3956;
3961 -> 3959;
3961 -> 3960;
3962 -> 3960;
3963 -> 3961;
3963 -> 3962;
3964 -> 3962;
3965 -> 3963;
3965 -> 3964;
3965 -> 3962;
3966 -> 3962;
3967 -> 3966;
3967 -> 3960;
3968 -> 3937;
3968 -> 3967;
3969 -> 3937;
3970 -> 3550;
3970 -> 0;
3970 -> 3937;
3971 -> 3937;
3971 -> 3477;
3972 -> 3971;
3972 -> 3937;
3972 -> 3477;
3973 -> 3971;
3973 -> 3937;
3973 -> 3972;
3974 -> 3973;
3974 -> 3972;
3975 -> 3972;
3976 -> 3974;
3976 -> 3975;
3977 -> 3976;
3977 -> 3937;
3977 -> 0;
3977 -> 3975;
3978 -> 3976;
3978 -> 3937;
3978 -> 3975;
3979 -> 3975;
3980 -> 3978;
3980 -> 3979;
3981 -> 3979;
3982 -> 3980;
3982 -> 3981;
3982 -> 3979;
3983 -> 3982;
3984 -> 3980;
3984 -> 3937;
3984 -> 3982;
3985 -> 3979;
3986 -> 3985;
3986 -> 3975;
3987 -> 3977;
3987 -> 3986;
3987 -> 3975;
3988 -> 3937;
3988 -> 3500;
3989 -> 3988;
3989 -> 3937;
3989 -> 3500;
3990 -> 3988;
3990 -> 3937;
3990 -> 3989;
3991 -> 3990;
3991 -> 3989;
3992 -> 3989;
3993 -> 3991;
3993 -> 3992;
3994 -> 3993;
3994 -> 3937;
3994 -> 0;
3994 -> 3992;
3995 -> 3993;
3995 -> 3937;
3995 -> 3992;
3996 -> 3992;
3997 -> 3995;
3997 -> 3996;
3998 -> 3996;
3999 -> 3997;
3999 -> 3998;
3999 -> 3996;
4000 -> 3999;
4001 -> 3997;
4001 -> 3937;
4001 -> 3999;
4002 -> 3996;
4003 -> 4002;
4003 -> 3992;
4004 -> 3994;
4004 -> 4003;
4004 -> 3992;
4005 -> 1351;
4005 -> 1345;
4006 -> 4005;
4006 -> 3937;
4006 -> 1345;
4007 -> 1351;
4007 -> 1345;
4008 -> 4007;
4008 -> 4006;
4008 -> 1345;
4009 -> 3820;
4009 -> 4008;
4009 -> 1345;
4010 -> 1351;
4010 -> 1345;
4011 -> 4010;
4011 -> 4008;
4011 -> 1345;
4012 -> 0;
4012 -> 4011;
4013 -> 3397;
4013 -> 4012;
4014 -> 3398;
4014 -> 4012;
4015 -> 4013;
4015 -> 4012;
4016 -> 4014;
4016 -> 4012;
4017 -> 4012;
4018 -> 4012;
4019 -> 4012;
4020 -> 4016;
4020 -> 4019;
4020 -> 4012;
4021 -> 4012;
4022 -> 4012;
4022 -> 4021;
4023 -> 4012;
4023 -> 0;
4024 -> 4012;
4025 -> 4018;
4025 -> 4024;
4026 -> 4025;
4027 -> 4025;
4028 -> 4012;
4028 -> 4025;
4029 -> 4025;
4030 -> 4028;
4030 -> 4029;
4031 -> 4029;
4032 -> 4030;
4032 -> 4031;
4033 -> 4031;
4034 -> 4032;
4034 -> 4033;
4034 -> 4031;
4035 -> 4034;
4036 -> 4032;
4036 -> 4012;
4036 -> 4034;
4037 -> 4031;
4038 -> 4037;
4038 -> 4029;
4039 -> 4012;
4039 -> 4038;
4040 -> 4012;
4041 -> 3550;
4041 -> 0;
4041 -> 4012;
4042 -> 3437;
4042 -> 4012;
4042 -> 1345;
4043 -> 3437;
4043 -> 4012;
4043 -> 4042;
4044 -> 3437;
4044 -> 4012;
4044 -> 0;
4044 -> 1345;
4045 -> 3437;
4045 -> 4012;
4045 -> 1345;
4046 -> 3441;
4046 -> 4045;
4047 -> 3437;
4047 -> 4012;
4047 -> 1345;
4048 -> 4010;
4048 -> 4012;
4049 -> 0;
4049 -> 4048;
4050 -> 3397;
4050 -> 4049;
4051 -> 3398;
4051 -> 4049;
4052 -> 4050;
4052 -> 4049;
4053 -> 4051;
4053 -> 4049;
4054 -> 4049;
4055 -> 4049;
4056 -> 4049;
4057 -> 4053;
4057 -> 4056;
4057 -> 4049;
4058 -> 4049;
4059 -> 4049;
4059 -> 4058;
4060 -> 4049;
4060 -> 0;
4061 -> 4049;
4062 -> 4055;
4062 -> 4061;
4063 -> 4062;
4064 -> 4062;
4065 -> 4049;
4065 -> 4062;
4066 -> 4062;
4067 -> 4065;
4067 -> 4066;
4068 -> 4066;
4069 -> 4067;
4069 -> 4068;
4070 -> 4068;
4071 -> 4069;
4071 -> 4070;
4071 -> 4068;
4072 -> 4071;
4073 -> 4069;
4073 -> 4049;
4073 -> 4071;
4074 -> 4068;
4075 -> 4074;
4075 -> 4066;
4076 -> 4049;
4076 -> 4075;
4077 -> 4049;
4078 -> 3550;
4078 -> 0;
4078 -> 4049;
4079 -> 4010;
4079 -> 4049;
4079 -> 0;
4080 -> 0;
4080 -> 4079;
4081 -> 3397;
4081 -> 4080;
4082 -> 3398;
4082 -> 4080;
4083 -> 4081;
4083 -> 4080;
4084 -> 4082;
4084 -> 4080;
4085 -> 4080;
4086 -> 4080;
4087 -> 4080;
4088 -> 4084;
4088 -> 4087;
4088 -> 4080;
4089 -> 4080;
4090 -> 4080;
4090 -> 4089;
4091 -> 4080;
4091 -> 0;
4092 -> 4080;
4093 -> 4086;
4093 -> 4092;
4094 -> 4093;
4095 -> 4093;
4096 -> 4080;
4096 -> 4093;
4097 -> 4093;
4098 -> 4096;
4098 -> 4097;
4099 -> 4097;
4100 -> 4098;
4100 -> 4099;
4101 -> 4099;
4102 -> 4100;
4102 -> 4101;
4102 -> 4099;
4103 -> 4099;
4104 -> 4103;
4104 -> 4097;
4105 -> 4080;
4105 -> 4104;
4106 -> 4080;
4107 -> 3550;
4107 -> 0;
4107 -> 4080;
4108 -> 1351;
4108 -> 1345;
4109 -> 4108;
4109 -> 4080;
4109 -> 1345;
4110 -> 3437;
4110 -> 4109;
4110 -> 1345;
4111 -> 3437;
4111 -> 4109;
4111 -> 4110;
4112 -> 3437;
4112 -> 4109;
4112 -> 0;
4112 -> 1345;
4113 -> 3437;
4113 -> 4109;
4113 -> 1345;
4114 -> 3441;
4114 -> 4113;
4115 -> 4114;
4116 -> 4114;
4117 -> 3437;
4117 -> 4109;
4117 -> 4114;
4118 -> 4114;
4119 -> 4117;
4119 -> 4118;
4120 -> 4118;
4121 -> 4119;
4121 -> 4120;
4122 -> 4120;
4123 -> 4121;
4123 -> 4122;
4123 -> 4120;
4124 -> 4120;
4125 -> 4124;
4125 -> 4118;
4126 -> 3437;
4126 -> 4109;
4126 -> 4125;
4127 -> 3437;
4127 -> 4109;
4127 -> 1345;
4128 -> 4109;
4128 -> 0;
4128 -> 3338;
4129 -> 4109;
4130 -> 4129;
4130 -> 4109;
4131 -> 4109;
4131 -> 3338;
4132 -> 3365;
4132 -> 4109;
4132 -> 3364;
4133 -> 4132;
4133 -> 4109;
4133 -> 3364;
4134 -> 3365;
4134 -> 4109;
4134 -> 3364;
4135 -> 3368;
4135 -> 4134;
4136 -> 3365;
4136 -> 4109;
4136 -> 4135;
4137 -> 4132;
4137 -> 4135;
4138 -> 4135;
4139 -> 4137;
4139 -> 4138;
4140 -> 4138;
4141 -> 4139;
4141 -> 4140;
4141 -> 4138;
4142 -> 4141;
4143 -> 4139;
4143 -> 4109;
4143 -> 4141;
4144 -> 4138;
4145 -> 4144;
4145 -> 4135;
4146 -> 4136;
4146 -> 4145;
4146 -> 4135;
4147 -> 3365;
4147 -> 4146;
4148 -> 3365;
4148 -> 4109;
4148 -> 4146;
4149 -> 3369;
4149 -> 4109;
4149 -> 3390;
4149 -> 3364;
4150 -> 4109;
4150 -> 3477;
4151 -> 4150;
4151 -> 4109;
4151 -> 3477;
4152 -> 4150;
4152 -> 4109;
4152 -> 4151;
4153 -> 4152;
4153 -> 4151;
4154 -> 4151;
4155 -> 4153;
4155 -> 4154;
4156 -> 4155;
4156 -> 4109;
4156 -> 0;
4156 -> 4154;
4157 -> 4155;
4157 -> 4109;
4157 -> 4154;
4158 -> 4154;
4159 -> 4157;
4159 -> 4158;
4160 -> 4158;
4161 -> 4159;
4161 -> 4160;
4161 -> 4158;
4162 -> 4161;
4163 -> 4159;
4163 -> 4109;
4163 -> 4161;
4164 -> 4158;
4165 -> 4164;
4165 -> 4154;
4166 -> 4156;
4166 -> 4165;
4166 -> 4154;
4167 -> 4109;
4167 -> 3500;
4168 -> 4167;
4168 -> 4109;
4168 -> 3500;
4169 -> 4167;
4169 -> 4109;
4169 -> 4168;
4170 -> 4169;
4170 -> 4168;
4171 -> 4168;
4172 -> 4170;
4172 -> 4171;
4173 -> 4172;
4173 -> 4109;
4173 -> 0;
4173 -> 4171;
4174 -> 4172;
4174 -> 4109;
4174 -> 4171;
4175 -> 4171;
4176 -> 4174;
4176 -> 4175;
4177 -> 4175;
4178 -> 4176;
4178 -> 4177;
4178 -> 4175;
4179 -> 4178;
4180 -> 4176;
4180 -> 4109;
4180 -> 4178;
4181 -> 4175;
4182 -> 4181;
4182 -> 4171;
4183 -> 4173;
4183 -> 4182;
4183 -> 4171;
4184 -> 3397;
4184 -> 4109;
4185 -> 3398;
4185 -> 4109;
4186 -> 4184;
4186 -> 4109;
4187 -> 4185;
4187 -> 4109;
4188 -> 4109;
4189 -> 4109;
4190 -> 4109;
4191 -> 4187;
4191 -> 4190;
4191 -> 4109;
4192 -> 4109;
4193 -> 4109;
4193 -> 4192;
4194 -> 4109;
4194 -> 0;
4195 -> 4109;
4196 -> 4189;
4196 -> 4195;
4197 -> 4196;
4198 -> 4196;
4199 -> 4109;
4199 -> 4196;
4200 -> 4196;
4201 -> 4199;
4201 -> 4200;
4202 -> 4200;
4203 -> 4201;
4203 -> 4202;
4204 -> 4202;
4205 -> 4203;
4205 -> 4204;
4205 -> 4202;
4206 -> 4202;
4207 -> 4206;
4207 -> 4200;
4208 -> 4109;
4208 -> 4207;
4209 -> 4109;
4210 -> 3550;
4210 -> 0;
4210 -> 4109;
4211 -> 0;
4211 -> 4210;
4212 -> 4211;
4212 -> 3551;
4212 -> 4109;
4212 -> 4210;
4213 -> 4210;
4214 -> 4213;
4215 -> 4212;
4215 -> 4214;
4216 -> 4215;
4216 -> 4213;
4217 -> 3365;
4217 -> 4212;
4217 -> 3364;
4218 -> 4217;
4218 -> 4212;
4218 -> 3364;
4219 -> 3365;
4219 -> 4212;
4219 -> 3364;
4220 -> 3368;
4220 -> 4219;
4221 -> 3365;
4221 -> 4212;
4221 -> 4220;
4222 -> 4217;
4222 -> 4220;
4223 -> 4220;
4224 -> 4222;
4224 -> 4223;
4225 -> 4223;
4226 -> 4224;
4226 -> 4225;
4226 -> 4223;
4227 -> 4226;
4228 -> 4224;
4228 -> 4212;
4228 -> 4226;
4229 -> 4223;
4230 -> 4229;
4230 -> 4220;
4231 -> 4221;
4231 -> 4230;
4231 -> 4220;
4232 -> 3365;
4232 -> 4231;
4233 -> 3365;
4233 -> 4212;
4233 -> 4231;
4234 -> 3369;
4234 -> 4212;
4234 -> 3390;
4234 -> 3364;
4235 -> 3437;
4235 -> 4212;
4235 -> 1345;
4236 -> 3437;
4236 -> 4212;
4236 -> 4235;
4237 -> 3437;
4237 -> 4212;
4237 -> 0;
4237 -> 1345;
4238 -> 3437;
4238 -> 4212;
4238 -> 1345;
4239 -> 3441;
4239 -> 4238;
4240 -> 3437;
4240 -> 4212;
4240 -> 1345;
4241 -> 3397;
4241 -> 4212;
4242 -> 3398;
4242 -> 4212;
4243 -> 4241;
4243 -> 4212;
4244 -> 4242;
4244 -> 4212;
4245 -> 4212;
4246 -> 4212;
4247 -> 4212;
4248 -> 4244;
4248 -> 4247;
4248 -> 4212;
4249 -> 4212;
4250 -> 4212;
4250 -> 4249;
4251 -> 4212;
4251 -> 0;
4252 -> 4212;
4253 -> 4246;
4253 -> 4252;
4254 -> 4253;
4255 -> 4253;
4256 -> 4212;
4256 -> 4253;
4257 -> 4253;
4258 -> 4256;
4258 -> 4257;
4259 -> 4257;
4260 -> 4258;
4260 -> 4259;
4261 -> 4259;
4262 -> 4260;
4262 -> 4261;
4262 -> 4259;
4263 -> 4259;
4264 -> 4263;
4264 -> 4257;
4265 -> 4212;
4265 -> 4264;
4266 -> 4212;
4267 -> 4212;
4267 -> 3477;
4268 -> 4267;
4268 -> 4212;
4268 -> 3477;
4269 -> 4267;
4269 -> 4212;
4269 -> 4268;
4270 -> 4269;
4270 -> 4268;
4271 -> 4268;
4272 -> 4270;
4272 -> 4271;
4273 -> 4272;
4273 -> 4212;
4273 -> 0;
4273 -> 4271;
4274 -> 4272;
4274 -> 4212;
4274 -> 4271;
4275 -> 4271;
4276 -> 4274;
4276 -> 4275;
4277 -> 4275;
4278 -> 4276;
4278 -> 4277;
4278 -> 4275;
4279 -> 4278;
4280 -> 4276;
4280 -> 4212;
4280 -> 4278;
4281 -> 4275;
4282 -> 4281;
4282 -> 4271;
4283 -> 4273;
4283 -> 4282;
4283 -> 4271;
4284 -> 4212;
4284 -> 3500;
4285 -> 4284;
4285 -> 4212;
4285 -> 3500;
4286 -> 4284;
4286 -> 4212;
4286 -> 4285;
4287 -> 4286;
4287 -> 4285;
4288 -> 4285;
4289 -> 4287;
4289 -> 4288;
4290 -> 4289;
4290 -> 4212;
4290 -> 0;
4290 -> 4288;
4291 -> 4289;
4291 -> 4212;
4291 -> 4288;
4292 -> 4288;
4293 -> 4291;
4293 -> 4292;
4294 -> 4292;
4295 -> 4293;
4295 -> 4294;
4295 -> 4292;
4296 -> 4295;
4297 -> 4293;
4297 -> 4212;
4297 -> 4295;
4298 -> 4292;
4299 -> 4298;
4299 -> 4288;
4300 -> 4290;
4300 -> 4299;
4300 -> 4288;
4301 -> 4262;
4302 -> 4260;
4302 -> 4212;
4302 -> 4262;
4303 -> 3231;
4303 -> 4212;
4303 -> 1345;
4304 -> 3242;
4304 -> 4212;
4304 -> 3241;
4305 -> 3242;
4305 -> 4212;
4305 -> 3241;
4306 -> 4305;
4306 -> 3239;
4307 -> 4212;
4307 -> 1345;
4308 -> 4212;
4308 -> 3258;
4309 -> 4308;
4309 -> 3257;
4310 -> 4212;
4310 -> 1345;
4311 -> 4310;
4311 -> 3250;
4311 -> 4212;
4311 -> 1345;
4312 -> 3253;
4312 -> 4212;
4313 -> 3066;
4313 -> 4212;
4313 -> 3065;
4314 -> 3066;
4314 -> 4212;
4314 -> 3065;
4315 -> 4314;
4315 -> 3063;
4316 -> 1320;
4317 -> 1333;
4317 -> 4316;
4317 -> 1320;
4318 -> 4212;
4318 -> 1320;
4319 -> 1323;
4319 -> 4318;
4319 -> 4212;
4319 -> 1320;
4320 -> 1329;
4320 -> 1320;
4321 -> 4320;
4321 -> 4319;
4321 -> 1320;
4322 -> 4212;
4322 -> 4321;
4322 -> 1320;
4323 -> 4321;
4323 -> 4322;
4324 -> 1330;
4324 -> 4322;
4325 -> 4322;
4326 -> 4322;
4327 -> 4323;
4327 -> 4326;
4328 -> 4324;
4328 -> 4326;
4329 -> 4325;
4329 -> 4326;
4330 -> 4327;
4330 -> 4329;
4330 -> 4326;
4331 -> 4328;
4331 -> 1330;
4331 -> 4326;
4332 -> 4329;
4332 -> 4330;
4332 -> 4331;
4333 -> 4332;
4333 -> 4331;
4334 -> 0;
4334 -> 4331;
4335 -> 4331;
4336 -> 4333;
4336 -> 4335;
4336 -> 4331;
4337 -> 4333;
4337 -> 4336;
4338 -> 4336;
4339 -> 4337;
4339 -> 4338;
4339 -> 4336;
4340 -> 4339;
4340 -> 4336;
4341 -> 4336;
4342 -> 4340;
4342 -> 4341;
4343 -> 4329;
4343 -> 4341;
4344 -> 4342;
4344 -> 4337;
4344 -> 4339;
4344 -> 4341;
4345 -> 4344;
4345 -> 4341;
4346 -> 4342;
4346 -> 4337;
4346 -> 4339;
4346 -> 4341;
4347 -> 4345;
4347 -> 4341;
4348 -> 4341;
4349 -> 4344;
4349 -> 4341;
4350 -> 4345;
4350 -> 4341;
4351 -> 4350;
4351 -> 4347;
4351 -> 4341;
4352 -> 4351;
4352 -> 4329;
4352 -> 4326;
4353 -> 1217;
4353 -> 1216;
4354 -> 1216;
4355 -> 4353;
4355 -> 4354;
4356 -> 4354;
4357 -> 4355;
4357 -> 4356;
4358 -> 4356;
4359 -> 4357;
4359 -> 4358;
4360 -> 4359;
4360 -> 4352;
4360 -> 4358;
4361 -> 4359;
4361 -> 4352;
4361 -> 4358;
4362 -> 4361;
4362 -> 4356;
4363 -> 4357;
4363 -> 4352;
4363 -> 4356;
4364 -> 4363;
4364 -> 1216;
4365 -> 1217;
4365 -> 1216;
4366 -> 1208;
4366 -> 4364;
4366 -> 1207;
4367 -> 4366;
4367 -> 1211;
4367 -> 1207;
4368 -> 1208;
4368 -> 4366;
4368 -> 1207;
4369 -> 4368;
4369 -> 1211;
4369 -> 1207;
4370 -> 1208;
4370 -> 4368;
4370 -> 1207;
4371 -> 4370;
4371 -> 1211;
4371 -> 1207;
4372 -> 1208;
4372 -> 4370;
4372 -> 1207;
4373 -> 4372;
4373 -> 1211;
4373 -> 1207;
4374 -> 1211;
4374 -> 1177;
4374 -> 4372;
4374 -> 1207;
4375 -> 1207;
4376 -> 4374;
4376 -> 4375;
4377 -> 4375;
4378 -> 4377;
4379 -> 4378;
4380 -> 4376;
4380 -> 4379;
4381 -> 4380;
4381 -> 4378;
4382 -> 1207;
4383 -> 1203;
4383 -> 4376;
4383 -> 1187;
4384 -> 4383;
4384 -> 1195;
4384 -> 1187;
4385 -> 1193;
4385 -> 1187;
4386 -> 1203;
4386 -> 4385;
4386 -> 4383;
4386 -> 1187;
4387 -> 1187;
4388 -> 1194;
4388 -> 4387;
4388 -> 1187;
4389 -> 1187;
4390 -> 1188;
4390 -> 4389;
4390 -> 1187;
4391 -> 1189;
4391 -> 4389;
4391 -> 1187;
4392 -> 4390;
4392 -> 4391;
4392 -> 1187;
4393 -> 1149;
4394 -> 1149;
4395 -> 1157;
4395 -> 4394;
4395 -> 1149;
4396 -> 1158;
4396 -> 4394;
4396 -> 1149;
4397 -> 4395;
4397 -> 4396;
4397 -> 1149;
4398 -> 1165;
4398 -> 1149;
4399 -> 4398;
4399 -> 1117;
4400 -> 1117;
4401 -> 1136;
4401 -> 4400;
4401 -> 1117;
4402 -> 4399;
4402 -> 4401;
4403 -> 4402;
4403 -> 1117;
4404 -> 4402;
4404 -> 1117;
4405 -> 4404;
4405 -> 1079;
4406 -> 4405;
4406 -> 206;
4407 -> 4406;
4407 -> 1;
}