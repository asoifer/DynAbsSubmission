digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 753378"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 753379"];
3 [label="@'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 753380"];
4 [label="prefix = @'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 753381"];
5 [label="@'\n}' 753382"];
6 [label="suffix = @'\n}' 753383"];
7 [label="param FlowTests(this) 753384"];
8 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 753385"];
9 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 753386"];
10 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 753387"];
11 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 753388"];
12 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 753389"];
13 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 753390"];
14 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 753391"];
15 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 753392"];
16 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 753393"];
17 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 753394"];
18 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 753395"];
19 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 753396"];
20 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 753397"];
21 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 753398"];
22 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 753399"];
23 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 753400"];
24 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 753401"];
25 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 753402"];
26 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 753403"];
27 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 753404"];
28 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 753405"];
29 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 753406"];
30 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 753407"];
31 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 753408"];
32 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 753409"];
33 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 753410"];
34 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 753411"];
35 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 753412"];
36 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 753413"];
37 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 753414"];
38 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 753415"];
39 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 753416"];
40 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 753417"];
41 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 753418"];
42 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 753419"];
43 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 753420"];
44 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 753421"];
45 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 753422"];
46 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 753423"];
47 [label="LazyThreadSafetyMode.PublicationOnly 753424"];
48 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 753425"];
49 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 753426"];
50 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 753427"];
51 [label="LazyThreadSafetyMode.PublicationOnly 753428"];
52 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 753429"];
53 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 753430"];
54 [label="RuntimeUtilities.IsCoreClrRuntime 753431"];
55 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 753432"];
56 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 753433"];
57 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 753434"];
58 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 753435"];
59 [label="LazyThreadSafetyMode.PublicationOnly 753436"];
60 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 753437"];
61 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 753438"];
62 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 753439"];
63 [label="LazyThreadSafetyMode.PublicationOnly 753440"];
64 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 753441"];
65 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 753442"];
66 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 753443"];
67 [label="LazyThreadSafetyMode.PublicationOnly 753444"];
68 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 753445"];
69 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 753446"];
70 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 753447"];
71 [label="LazyThreadSafetyMode.PublicationOnly 753448"];
72 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753449"];
73 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753450"];
74 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 753451"];
75 [label="LazyThreadSafetyMode.PublicationOnly 753452"];
76 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753453"];
77 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753454"];
78 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 753455"];
79 [label="LazyThreadSafetyMode.PublicationOnly 753456"];
80 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753457"];
81 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753458"];
82 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 753459"];
83 [label="LazyThreadSafetyMode.PublicationOnly 753460"];
84 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753461"];
85 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753462"];
86 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 753463"];
87 [label="LazyThreadSafetyMode.PublicationOnly 753464"];
88 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753465"];
89 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753466"];
90 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 753467"];
91 [label="LazyThreadSafetyMode.PublicationOnly 753468"];
92 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753469"];
93 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753470"];
94 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 753471"];
95 [label="LazyThreadSafetyMode.PublicationOnly 753472"];
96 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753473"];
97 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753474"];
98 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 753475"];
99 [label="LazyThreadSafetyMode.PublicationOnly 753476"];
100 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 753477"];
101 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 753478"];
102 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 753479"];
103 [label="LazyThreadSafetyMode.PublicationOnly 753480"];
104 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 753481"];
105 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 753482"];
106 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 753483"];
107 [label="LazyThreadSafetyMode.PublicationOnly 753484"];
108 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753485"];
109 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753486"];
110 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 753487"];
111 [label="LazyThreadSafetyMode.PublicationOnly 753488"];
112 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753489"];
113 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753490"];
114 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 753491"];
115 [label="LazyThreadSafetyMode.PublicationOnly 753492"];
116 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753493"];
117 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753494"];
118 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 753495"];
119 [label="LazyThreadSafetyMode.PublicationOnly 753496"];
120 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753497"];
121 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753498"];
122 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 753499"];
123 [label="LazyThreadSafetyMode.PublicationOnly 753500"];
124 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 753501"];
125 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 753502"];
126 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 753503"];
127 [label="LazyThreadSafetyMode.PublicationOnly 753504"];
128 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753505"];
129 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753506"];
130 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 753507"];
131 [label="LazyThreadSafetyMode.PublicationOnly 753508"];
132 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753509"];
133 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753510"];
134 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 753511"];
135 [label="LazyThreadSafetyMode.PublicationOnly 753512"];
136 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753513"];
137 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753514"];
138 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 753515"];
139 [label="LazyThreadSafetyMode.PublicationOnly 753516"];
140 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753517"];
141 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753518"];
142 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 753519"];
143 [label="LazyThreadSafetyMode.PublicationOnly 753520"];
144 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753521"];
145 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753522"];
146 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 753523"];
147 [label="LazyThreadSafetyMode.PublicationOnly 753524"];
148 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753525"];
149 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753526"];
150 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 753527"];
151 [label="LazyThreadSafetyMode.PublicationOnly 753528"];
152 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753529"];
153 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753530"];
154 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 753531"];
155 [label="LazyThreadSafetyMode.PublicationOnly 753532"];
156 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753533"];
157 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753534"];
158 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 753535"];
159 [label="LazyThreadSafetyMode.PublicationOnly 753536"];
160 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753537"];
161 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753538"];
162 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 753539"];
163 [label="LazyThreadSafetyMode.PublicationOnly 753540"];
164 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753541"];
165 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753542"];
166 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 753543"];
167 [label="LazyThreadSafetyMode.PublicationOnly 753544"];
168 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753545"];
169 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753546"];
170 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 753547"];
171 [label="LazyThreadSafetyMode.PublicationOnly 753548"];
172 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753549"];
173 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753550"];
174 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 753551"];
175 [label="LazyThreadSafetyMode.PublicationOnly 753552"];
176 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753553"];
177 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 753554"];
178 [label="@'R:\\Invalid.dll' 753555"];
179 [label="fullPath: @'R:\\Invalid.dll' 753556"];
180 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 753557"];
181 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 753558"];
182 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 753559"];
183 [label="MscorlibRef_v4_0_30316_17626 753560"];
184 [label="Net451.mscorlib 753561"];
185 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 753562"];
186 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 753563"];
187 [label="'/*<bind>*/' 753564"];
188 [label="StartString = '/*<bind>*/' 753565"];
189 [label="'/*</bind>*/' 753566"];
190 [label="EndString = '/*</bind>*/' 753567"];
191 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 753568"];
192 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 753569"];
193 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 753570"];
194 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 753571"];
195 [label="param CSharpTestBase(this) 753572"];
196 [label="param CommonTestBase(this) 753573"];
197 [label="param TestBase(this) 753574"];
198 [label="_temp 753575"];
199 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 753576"];
200 [label="param ThrowStatement(this) 753577"];
201 [label="var source = prefix + @'\n    // Throw statement.\n    public void T150() {\n        if (f) { int a; throw new Exception(F(a).ToString()); }\n        if (f) { int a; throw new Exception(''x''); F(a); } // Unreachable\n    }\n' + suffix; 753578"];
202 [label="var source = prefix + @'\n    // Throw statement.\n    public void T150() {\n        if (f) { int a; throw new Exception(F(a).ToString()); }\n        if (f) { int a; throw new Exception(''x''); F(a); } // Unreachable\n    }\n' + suffix; 753579"];
203 [label="var source = prefix + @'\n    // Throw statement.\n    public void T150() {\n        if (f) { int a; throw new Exception(F(a).ToString()); }\n        if (f) { int a; throw new Exception(''x''); F(a); } // Unreachable\n    }\n' + suffix; 753580"];
204 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (52,51): warning CS0162: Unreachable code detected\n                //         if (f) { int a; throw new Exception('x'); F(a); } // Unreachable\n                Diagnostic(ErrorCode.WRN_UnreachableCode, 'F'),\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; throw new Exception(F(a).ToString()); }\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')); 753581"];
205 [label="source 753582"];
206 [label="param operator(string source) 753583"];
207 [label="source 753584"];
208 [label="new CSharpTestSource(source) 753585"];
209 [label="param CSharpTestSource(object value) 753586"];
210 [label="param CSharpTestSource(this) 753587"];
211 [label="Value 753588"];
212 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (52,51): warning CS0162: Unreachable code detected\n                //         if (f) { int a; throw new Exception('x'); F(a); } // Unreachable\n                Diagnostic(ErrorCode.WRN_UnreachableCode, 'F'),\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; throw new Exception(F(a).ToString()); }\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')); 753589"];
213 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (52,51): warning CS0162: Unreachable code detected\n                //         if (f) { int a; throw new Exception('x'); F(a); } // Unreachable\n                Diagnostic(ErrorCode.WRN_UnreachableCode, 'F'),\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; throw new Exception(F(a).ToString()); }\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')); 753590"];
214 [label="CreateCompilation(source) 753591"];
215 [label="param CreateCompilation(CSharpTestSource source) 753592"];
216 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 753593"];
217 [label="param CreateCompilation(CSharpCompilationOptions options = null) 753594"];
218 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 753595"];
219 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 753596"];
220 [label="param CreateCompilation(string assemblyName = '') 753597"];
221 [label="param CreateCompilation(string sourceFileName = '') 753598"];
222 [label="param CreateCompilation(bool skipUsesIsNullable = false) 753599"];
223 [label="source 753600"];
224 [label="targetFramework 753601"];
225 [label="references 753602"];
226 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 753603"];
227 [label="param GetReferences(TargetFramework tf) 753604"];
228 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 753605"];
229 [label="var references = GetReferences(tf); 753606"];
230 [label="GetReferences(tf) 753607"];
231 [label="param GetReferences(TargetFramework targetFramework) 753608"];
232 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 753609"];
233 [label="StandardReferences 753610"];
234 [label="RuntimeUtilities.IsCoreClrRuntime 753611"];
235 [label="Mscorlib46ExtendedReferences 753612"];
236 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 753613"];
237 [label="TestBase.ValueTupleRef 753614"];
238 [label="TestReferences.NetFx.ValueTuple.tuplelib 753615"];
239 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 753616"];
240 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 753617"];
241 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 753618"];
242 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 753619"];
243 [label="return references; 753620"];
244 [label="options 753621"];
245 [label="parseOptions 753622"];
246 [label="assemblyName 753623"];
247 [label="sourceFileName 753624"];
248 [label="skipUsesIsNullable 753625"];
249 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 753626"];
250 [label="param CreateEmptyCompilation(CSharpTestSource source) 753627"];
251 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 753628"];
252 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 753629"];
253 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 753630"];
254 [label="param CreateEmptyCompilation(string assemblyName = '') 753631"];
255 [label="param CreateEmptyCompilation(string sourceFileName = '') 753632"];
256 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 753633"];
257 [label="source 753634"];
258 [label="references 753635"];
259 [label="options 753636"];
260 [label="parseOptions 753637"];
261 [label="assemblyName 753638"];
262 [label="sourceFileName 753639"];
263 [label="skipUsesIsNullable 753640"];
264 [label="null 753641"];
265 [label="experimentalFeature: null 753642"];
266 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 753643"];
267 [label="param CreateCompilationCore(CSharpTestSource source) 753644"];
268 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 753645"];
269 [label="param CreateCompilationCore(CSharpCompilationOptions options) 753646"];
270 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 753647"];
271 [label="param CreateCompilationCore(string assemblyName) 753648"];
272 [label="param CreateCompilationCore(string sourceFileName) 753649"];
273 [label="param CreateCompilationCore(bool skipUsesIsNullable) 753650"];
274 [label="param CreateCompilationCore(MessageID? experimentalFeature) 753651"];
275 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 753652"];
276 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 753653"];
277 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 753654"];
278 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 753655"];
279 [label="param GetSyntaxTrees(string sourceFileName = '') 753656"];
280 [label="param GetSyntaxTrees(this) 753657"];
281 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 753658"];
282 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 753659"];
283 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 753660"];
284 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 753661"];
285 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 753662"];
286 [label="param Parse(string text) 753663"];
287 [label="param Parse(string filename = '') 753664"];
288 [label="param Parse(CSharpParseOptions options = null) 753665"];
289 [label="param Parse(Encoding encoding = null) 753666"];
290 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 753667"];
291 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 753668"];
292 [label="kind: SourceCodeKind.Regular 753669"];
293 [label="documentationMode: DocumentationMode.Parse 753670"];
294 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 753671"];
295 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 753672"];
296 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 753673"];
297 [label="SourceCodeKind.Script 753674"];
298 [label="Regular.WithKind(SourceCodeKind.Script) 753675"];
299 [label="Script = Regular.WithKind(SourceCodeKind.Script) 753676"];
300 [label="LanguageVersion.CSharp6 753677"];
301 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 753678"];
302 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 753679"];
303 [label="LanguageVersion.CSharp7 753680"];
304 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 753681"];
305 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 753682"];
306 [label="LanguageVersion.CSharp7_1 753683"];
307 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 753684"];
308 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 753685"];
309 [label="LanguageVersion.CSharp7_2 753686"];
310 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 753687"];
311 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 753688"];
312 [label="LanguageVersion.CSharp7_3 753689"];
313 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 753690"];
314 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 753691"];
315 [label="LanguageVersion.Default 753692"];
316 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 753693"];
317 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 753694"];
318 [label="LanguageVersion.Preview 753695"];
319 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 753696"];
320 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 753697"];
321 [label="LanguageVersion.CSharp8 753698"];
322 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 753699"];
323 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 753700"];
324 [label="LanguageVersion.CSharp9 753701"];
325 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 753702"];
326 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 753703"];
327 [label="DocumentationMode.Diagnose 753704"];
328 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 753705"];
329 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 753706"];
330 [label="Regular 753707"];
331 [label="'UseLegacyStrongNameProvider' 753708"];
332 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 753709"];
333 [label="param WithFeature(this CSharpParseOptions options) 753710"];
334 [label="param WithFeature(string feature) 753711"];
335 [label="param WithFeature(string value = 'true') 753712"];
336 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 753713"];
337 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 753714"];
338 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 753715"];
339 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 753716"];
340 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 753717"];
341 [label="new[] { new KeyValuePair<string, string>(feature, value) } 753718"];
342 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 753719"];
343 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 753720"];
344 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 753721"];
345 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 753722"];
346 [label="1 753723"];
347 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 753724"];
348 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 753725"];
349 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 753726"];
350 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 753727"];
351 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 753728"];
352 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 753729"];
353 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 753730"];
354 [label="LanguageVersion.CSharp8 753731"];
355 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 753732"];
356 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 753733"];
357 [label="RegularWithExtendedPartialMethods = RegularPreview 753734"];
358 [label="new SmallDictionary<string, string> { } 753735"];
359 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 753736"];
360 [label="kind: SourceCodeKind.Regular 753737"];
361 [label="documentationMode: DocumentationMode.None 753738"];
362 [label="languageVersion: LanguageVersion.Preview 753739"];
363 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 753740"];
364 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 753741"];
365 [label="s_experimentalFeatures 753742"];
366 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 753743"];
367 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 753744"];
368 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 753745"];
369 [label="'testV7SwitchBinder' 753746"];
370 [label="'true' 753747"];
371 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 753748"];
372 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 753749"];
373 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 753750"];
374 [label="RegularWithoutRecursivePatterns = Regular7_3 753751"];
375 [label="RegularWithRecursivePatterns = Regular8 753752"];
376 [label="RegularWithoutPatternCombinators = Regular8 753753"];
377 [label="RegularWithPatternCombinators = RegularPreview 753754"];
378 [label="OutputKind.DynamicallyLinkedLibrary 753755"];
379 [label="OptimizationLevel.Release 753756"];
380 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 753757"];
381 [label="param CreateTestOptions(OutputKind outputKind) 753758"];
382 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 753759"];
383 [label="param CreateTestOptions(bool allowUnsafe = false) 753760"];
384 [label="outputKind 753761"];
385 [label="optimizationLevel: optimizationLevel 753762"];
386 [label="warningLevel: Diagnostic.MaxWarningLevel 753763"];
387 [label="allowUnsafe: allowUnsafe 753764"];
388 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753765"];
389 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753766"];
390 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 753767"];
391 [label="OutputKind.ConsoleApplication 753768"];
392 [label="OptimizationLevel.Release 753769"];
393 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 753770"];
394 [label="param CreateTestOptions(OutputKind outputKind) 753771"];
395 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 753772"];
396 [label="param CreateTestOptions(bool allowUnsafe = false) 753773"];
397 [label="outputKind 753774"];
398 [label="optimizationLevel: optimizationLevel 753775"];
399 [label="warningLevel: Diagnostic.MaxWarningLevel 753776"];
400 [label="allowUnsafe: allowUnsafe 753777"];
401 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753778"];
402 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753779"];
403 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 753780"];
404 [label="true 753781"];
405 [label="ReleaseDll.WithDebugPlusMode(true) 753782"];
406 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 753783"];
407 [label="true 753784"];
408 [label="ReleaseExe.WithDebugPlusMode(true) 753785"];
409 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 753786"];
410 [label="OutputKind.DynamicallyLinkedLibrary 753787"];
411 [label="OptimizationLevel.Debug 753788"];
412 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 753789"];
413 [label="param CreateTestOptions(OutputKind outputKind) 753790"];
414 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 753791"];
415 [label="param CreateTestOptions(bool allowUnsafe = false) 753792"];
416 [label="outputKind 753793"];
417 [label="optimizationLevel: optimizationLevel 753794"];
418 [label="warningLevel: Diagnostic.MaxWarningLevel 753795"];
419 [label="allowUnsafe: allowUnsafe 753796"];
420 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753797"];
421 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753798"];
422 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 753799"];
423 [label="OutputKind.ConsoleApplication 753800"];
424 [label="OptimizationLevel.Debug 753801"];
425 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 753802"];
426 [label="param CreateTestOptions(OutputKind outputKind) 753803"];
427 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 753804"];
428 [label="param CreateTestOptions(bool allowUnsafe = false) 753805"];
429 [label="outputKind 753806"];
430 [label="optimizationLevel: optimizationLevel 753807"];
431 [label="warningLevel: Diagnostic.MaxWarningLevel 753808"];
432 [label="allowUnsafe: allowUnsafe 753809"];
433 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753810"];
434 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753811"];
435 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 753812"];
436 [label="OutputKind.WindowsRuntimeMetadata 753813"];
437 [label="OptimizationLevel.Release 753814"];
438 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 753815"];
439 [label="param CreateTestOptions(OutputKind outputKind) 753816"];
440 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 753817"];
441 [label="param CreateTestOptions(bool allowUnsafe = false) 753818"];
442 [label="outputKind 753819"];
443 [label="optimizationLevel: optimizationLevel 753820"];
444 [label="warningLevel: Diagnostic.MaxWarningLevel 753821"];
445 [label="allowUnsafe: allowUnsafe 753822"];
446 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753823"];
447 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753824"];
448 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 753825"];
449 [label="OutputKind.WindowsRuntimeMetadata 753826"];
450 [label="OptimizationLevel.Debug 753827"];
451 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 753828"];
452 [label="param CreateTestOptions(OutputKind outputKind) 753829"];
453 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 753830"];
454 [label="param CreateTestOptions(bool allowUnsafe = false) 753831"];
455 [label="outputKind 753832"];
456 [label="optimizationLevel: optimizationLevel 753833"];
457 [label="warningLevel: Diagnostic.MaxWarningLevel 753834"];
458 [label="allowUnsafe: allowUnsafe 753835"];
459 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753836"];
460 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753837"];
461 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 753838"];
462 [label="OutputKind.NetModule 753839"];
463 [label="OptimizationLevel.Release 753840"];
464 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 753841"];
465 [label="param CreateTestOptions(OutputKind outputKind) 753842"];
466 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 753843"];
467 [label="param CreateTestOptions(bool allowUnsafe = false) 753844"];
468 [label="outputKind 753845"];
469 [label="optimizationLevel: optimizationLevel 753846"];
470 [label="warningLevel: Diagnostic.MaxWarningLevel 753847"];
471 [label="allowUnsafe: allowUnsafe 753848"];
472 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753849"];
473 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753850"];
474 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 753851"];
475 [label="OutputKind.NetModule 753852"];
476 [label="OptimizationLevel.Debug 753853"];
477 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 753854"];
478 [label="param CreateTestOptions(OutputKind outputKind) 753855"];
479 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 753856"];
480 [label="param CreateTestOptions(bool allowUnsafe = false) 753857"];
481 [label="outputKind 753858"];
482 [label="optimizationLevel: optimizationLevel 753859"];
483 [label="warningLevel: Diagnostic.MaxWarningLevel 753860"];
484 [label="allowUnsafe: allowUnsafe 753861"];
485 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753862"];
486 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753863"];
487 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 753864"];
488 [label="true 753865"];
489 [label="ReleaseDll.WithAllowUnsafe(true) 753866"];
490 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 753867"];
491 [label="true 753868"];
492 [label="ReleaseExe.WithAllowUnsafe(true) 753869"];
493 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 753870"];
494 [label="true 753871"];
495 [label="DebugDll.WithAllowUnsafe(true) 753872"];
496 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 753873"];
497 [label="true 753874"];
498 [label="DebugExe.WithAllowUnsafe(true) 753875"];
499 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 753876"];
500 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 753877"];
501 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 753878"];
502 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 753879"];
503 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 753880"];
504 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 753881"];
505 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 753882"];
506 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 753883"];
507 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 753884"];
508 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 753885"];
509 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 753886"];
510 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 753887"];
511 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 753888"];
512 [label="DebugInformationFormat.Pdb 753889"];
513 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 753890"];
514 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 753891"];
515 [label="options = TestOptions.Regular; 753892"];
516 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 753893"];
517 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 753894"];
518 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 753895"];
519 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 753896"];
520 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 753897"];
521 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 753898"];
522 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 753899"];
523 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 753900"];
524 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 753901"];
525 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 753902"];
526 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 753903"];
527 [label="param CheckSerializable(SyntaxTree tree) 753904"];
528 [label="var stream = new MemoryStream(); 753905"];
529 [label="var root = tree.GetRoot(); 753906"];
530 [label="var root = tree.GetRoot(); 753907"];
531 [label="root.SerializeTo(stream); 753908"];
532 [label="root.SerializeTo(stream); 753909"];
533 [label="root.SerializeTo(stream); 753910"];
534 [label="stream.Position = 0; 753911"];
535 [label="stream.Position 753912"];
536 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 753913"];
537 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 753914"];
538 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 753915"];
539 [label="return tree; 753916"];
540 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 753917"];
541 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 753918"];
542 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 753919"];
543 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 753920"];
544 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 753921"];
545 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 753922"];
546 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 753923"];
547 [label="hasTopLevelStatements 753924"];
548 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 753925"];
549 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 753926"];
550 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 753927"];
551 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 753928"];
552 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 753929"];
553 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 753930"];
554 [label="param ValidateIOperations(Func<Compilation> createCompilation) 753931"];
555 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 753932"];
556 [label="return; 753933"];
557 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 753934"];
558 [label="var compilation = createCompilationLambda(); 753935"];
559 [label="var compilation = createCompilationLambda(); 753936"];
560 [label="return Guid.NewGuid().ToString('D'); 753937"];
561 [label="var compilation = createCompilationLambda(); 753938"];
562 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 753939"];
563 [label="IsNullableEnabled(compilation) 753940"];
564 [label="param IsNullableEnabled(CSharpCompilation compilation) 753941"];
565 [label="var trees = compilation.SyntaxTrees; 753942"];
566 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 753943"];
567 [label="var options = (CSharpParseOptions)trees[0].Options; 753944"];
568 [label="var options = (CSharpParseOptions)trees[0].Options; 753945"];
569 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 753946"];
570 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 753947"];
571 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 753948"];
572 [label="return compilation; 753949"];
573 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (52,51): warning CS0162: Unreachable code detected\n                //         if (f) { int a; throw new Exception('x'); F(a); } // Unreachable\n                Diagnostic(ErrorCode.WRN_UnreachableCode, 'F'),\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; throw new Exception(F(a).ToString()); }\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')); 753950"];
574 [label="Diagnostic(ErrorCode.WRN_UnreachableCode, 'F') 753951"];
575 [label="param Diagnostic(object code) 753952"];
576 [label="param Diagnostic(string squiggledText = null) 753953"];
577 [label="param Diagnostic(object[] arguments = null) 753954"];
578 [label="param Diagnostic(LinePosition? startLocation = null) 753955"];
579 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 753956"];
580 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 753957"];
581 [label="param Diagnostic(bool isSuppressed = false) 753958"];
582 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 753959"];
583 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 753960"];
584 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 753961"];
585 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 753962"];
586 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 753963"];
587 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 753964"];
588 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 753965"];
589 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 753966"];
590 [label="param Diagnostic(object code) 753967"];
591 [label="param Diagnostic(string squiggledText = null) 753968"];
592 [label="param Diagnostic(object[] arguments = null) 753969"];
593 [label="param Diagnostic(LinePosition? startLocation = null) 753970"];
594 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 753971"];
595 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 753972"];
596 [label="param Diagnostic(bool isSuppressed = false) 753973"];
597 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 753974"];
598 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 753975"];
599 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 753976"];
600 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 753977"];
601 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 753978"];
602 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 753979"];
603 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 753980"];
604 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 753981"];
605 [label="{ } 753982"];
606 [label="None = { } 753983"];
607 [label="null 753984"];
608 [label="Any = null 753985"];
609 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 753986"];
610 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 753987"];
611 [label="param DiagnosticDescription(object code) 753988"];
612 [label="param DiagnosticDescription(bool isWarningAsError) 753989"];
613 [label="param DiagnosticDescription(string squiggledText) 753990"];
614 [label="param DiagnosticDescription(object[] arguments) 753991"];
615 [label="param DiagnosticDescription(LinePosition? startLocation) 753992"];
616 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 753993"];
617 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 753994"];
618 [label="param DiagnosticDescription(Type errorCodeType = null) 753995"];
619 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 753996"];
620 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 753997"];
621 [label="param DiagnosticDescription(bool isSuppressed = false) 753998"];
622 [label="param DiagnosticDescription(this) 753999"];
623 [label="_code 754000"];
624 [label="_isWarningAsError 754001"];
625 [label="_isSuppressed 754002"];
626 [label="_squiggledText 754003"];
627 [label="_arguments 754004"];
628 [label="_startPosition 754005"];
629 [label="_argumentOrderDoesNotMatter 754006"];
630 [label="_errorCodeType 754007"];
631 [label="_ignoreArgumentsWhenComparing 754008"];
632 [label="_defaultSeverityOpt 754009"];
633 [label="_effectiveSeverityOpt 754010"];
634 [label="_syntaxPredicate 754011"];
635 [label="_showPredicate 754012"];
636 [label="_location 754013"];
637 [label="_argumentsAsStrings 754014"];
638 [label="_code 754015"];
639 [label="_isWarningAsError 754016"];
640 [label="_squiggledText 754017"];
641 [label="_arguments 754018"];
642 [label="_startPosition 754019"];
643 [label="_syntaxPredicate 754020"];
644 [label="_argumentOrderDoesNotMatter 754021"];
645 [label="_errorCodeType = errorCodeType ?? code.GetType(); 754022"];
646 [label="_errorCodeType 754023"];
647 [label="_defaultSeverityOpt 754024"];
648 [label="_effectiveSeverityOpt 754025"];
649 [label="_isSuppressed 754026"];
650 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 754027"];
651 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (52,51): warning CS0162: Unreachable code detected\n                //         if (f) { int a; throw new Exception('x'); F(a); } // Unreachable\n                Diagnostic(ErrorCode.WRN_UnreachableCode, 'F'),\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; throw new Exception(F(a).ToString()); }\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')); 754028"];
652 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'a') 754029"];
653 [label="param Diagnostic(object code) 754030"];
654 [label="param Diagnostic(string squiggledText = null) 754031"];
655 [label="param Diagnostic(object[] arguments = null) 754032"];
656 [label="param Diagnostic(LinePosition? startLocation = null) 754033"];
657 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 754034"];
658 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 754035"];
659 [label="param Diagnostic(bool isSuppressed = false) 754036"];
660 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 754037"];
661 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 754038"];
662 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 754039"];
663 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 754040"];
664 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 754041"];
665 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 754042"];
666 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 754043"];
667 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 754044"];
668 [label="param Diagnostic(object code) 754045"];
669 [label="param Diagnostic(string squiggledText = null) 754046"];
670 [label="param Diagnostic(object[] arguments = null) 754047"];
671 [label="param Diagnostic(LinePosition? startLocation = null) 754048"];
672 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 754049"];
673 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 754050"];
674 [label="param Diagnostic(bool isSuppressed = false) 754051"];
675 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 754052"];
676 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 754053"];
677 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 754054"];
678 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 754055"];
679 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 754056"];
680 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 754057"];
681 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 754058"];
682 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 754059"];
683 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 754060"];
684 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 754061"];
685 [label="param DiagnosticDescription(object code) 754062"];
686 [label="param DiagnosticDescription(bool isWarningAsError) 754063"];
687 [label="param DiagnosticDescription(string squiggledText) 754064"];
688 [label="param DiagnosticDescription(object[] arguments) 754065"];
689 [label="param DiagnosticDescription(LinePosition? startLocation) 754066"];
690 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 754067"];
691 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 754068"];
692 [label="param DiagnosticDescription(Type errorCodeType = null) 754069"];
693 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 754070"];
694 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 754071"];
695 [label="param DiagnosticDescription(bool isSuppressed = false) 754072"];
696 [label="param DiagnosticDescription(this) 754073"];
697 [label="_code 754074"];
698 [label="_isWarningAsError 754075"];
699 [label="_isSuppressed 754076"];
700 [label="_squiggledText 754077"];
701 [label="_arguments 754078"];
702 [label="_startPosition 754079"];
703 [label="_argumentOrderDoesNotMatter 754080"];
704 [label="_errorCodeType 754081"];
705 [label="_ignoreArgumentsWhenComparing 754082"];
706 [label="_defaultSeverityOpt 754083"];
707 [label="_effectiveSeverityOpt 754084"];
708 [label="_syntaxPredicate 754085"];
709 [label="_showPredicate 754086"];
710 [label="_location 754087"];
711 [label="_argumentsAsStrings 754088"];
712 [label="_code 754089"];
713 [label="_isWarningAsError 754090"];
714 [label="_squiggledText 754091"];
715 [label="_arguments 754092"];
716 [label="_startPosition 754093"];
717 [label="_syntaxPredicate 754094"];
718 [label="_argumentOrderDoesNotMatter 754095"];
719 [label="_errorCodeType = errorCodeType ?? code.GetType(); 754096"];
720 [label="_errorCodeType 754097"];
721 [label="_defaultSeverityOpt 754098"];
722 [label="_effectiveSeverityOpt 754099"];
723 [label="_isSuppressed 754100"];
724 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 754101"];
725 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (52,51): warning CS0162: Unreachable code detected\n                //         if (f) { int a; throw new Exception('x'); F(a); } // Unreachable\n                Diagnostic(ErrorCode.WRN_UnreachableCode, 'F'),\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; throw new Exception(F(a).ToString()); }\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')); 754102"];
726 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a') 754103"];
727 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a') 754104"];
728 [label="param WithArguments(params object[] arguments) 754105"];
729 [label="param WithArguments(this) 754106"];
730 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 754107"];
731 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 754108"];
732 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 754109"];
733 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 754110"];
734 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 754111"];
735 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 754112"];
736 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 754113"];
737 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 754114"];
738 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 754115"];
739 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 754116"];
740 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 754117"];
741 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 754118"];
742 [label="param DiagnosticDescription(object code) 754119"];
743 [label="param DiagnosticDescription(bool isWarningAsError) 754120"];
744 [label="param DiagnosticDescription(string squiggledText) 754121"];
745 [label="param DiagnosticDescription(object[] arguments) 754122"];
746 [label="param DiagnosticDescription(LinePosition? startLocation) 754123"];
747 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 754124"];
748 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 754125"];
749 [label="param DiagnosticDescription(Type errorCodeType = null) 754126"];
750 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 754127"];
751 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 754128"];
752 [label="param DiagnosticDescription(bool isSuppressed = false) 754129"];
753 [label="param DiagnosticDescription(this) 754130"];
754 [label="_code 754131"];
755 [label="_isWarningAsError 754132"];
756 [label="_isSuppressed 754133"];
757 [label="_squiggledText 754134"];
758 [label="_arguments 754135"];
759 [label="_startPosition 754136"];
760 [label="_argumentOrderDoesNotMatter 754137"];
761 [label="_errorCodeType 754138"];
762 [label="_ignoreArgumentsWhenComparing 754139"];
763 [label="_defaultSeverityOpt 754140"];
764 [label="_effectiveSeverityOpt 754141"];
765 [label="_syntaxPredicate 754142"];
766 [label="_showPredicate 754143"];
767 [label="_location 754144"];
768 [label="_argumentsAsStrings 754145"];
769 [label="_arguments 754146"];
770 [label="_argumentOrderDoesNotMatter 754147"];
771 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (52,51): warning CS0162: Unreachable code detected\n                //         if (f) { int a; throw new Exception('x'); F(a); } // Unreachable\n                Diagnostic(ErrorCode.WRN_UnreachableCode, 'F'),\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; throw new Exception(F(a).ToString()); }\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')); 754148"];
772 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (52,51): warning CS0162: Unreachable code detected\n                //         if (f) { int a; throw new Exception('x'); F(a); } // Unreachable\n                Diagnostic(ErrorCode.WRN_UnreachableCode, 'F'),\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; throw new Exception(F(a).ToString()); }\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')) 754149"];
773 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (52,51): warning CS0162: Unreachable code detected\n                //         if (f) { int a; throw new Exception('x'); F(a); } // Unreachable\n                Diagnostic(ErrorCode.WRN_UnreachableCode, 'F'),\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; throw new Exception(F(a).ToString()); }\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')) 754150"];
774 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (52,51): warning CS0162: Unreachable code detected\n                //         if (f) { int a; throw new Exception('x'); F(a); } // Unreachable\n                Diagnostic(ErrorCode.WRN_UnreachableCode, 'F'),\n                // (51,47): error CS0165: Use of unassigned local variable 'a'\n                //         if (f) { int a; throw new Exception(F(a).ToString()); }\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'a').WithArguments('a')) 754151"];
775 [label="param VerifyDiagnostics(this TCompilation c) 754152"];
776 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 754153"];
777 [label="var diagnostics = c.GetDiagnostics(); 754154"];
778 [label="var diagnostics = c.GetDiagnostics(); 754155"];
779 [label="diagnostics.Verify(expected); 754156"];
780 [label="diagnostics.Verify(expected); 754157"];
781 [label="diagnostics.Verify(expected) 754158"];
782 [label="param Verify(this ImmutableArray<Diagnostic> actual) 754159"];
783 [label="param Verify(params DiagnosticDescription[] expected) 754160"];
784 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 754161"];
785 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 754162"];
786 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 754163"];
787 [label="param Verify(this IEnumerable<Diagnostic> actual) 754164"];
788 [label="param Verify(params DiagnosticDescription[] expected) 754165"];
789 [label="Verify(actual, expected, errorCodeOnly: false); 754166"];
790 [label="Verify(actual, expected, errorCodeOnly: false); 754167"];
791 [label="Verify(actual, expected, errorCodeOnly: false); 754168"];
792 [label="Verify(actual, expected, errorCodeOnly: false) 754169"];
793 [label="param Verify(IEnumerable<Diagnostic> actual) 754170"];
794 [label="param Verify(DiagnosticDescription[] expected) 754171"];
795 [label="param Verify(bool errorCodeOnly) 754172"];
796 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 754173"];
797 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 754174"];
798 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 754175"];
799 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 754176"];
800 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 754177"];
801 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 754178"];
802 [label="=> _defaultSeverityOpt 754179"];
803 [label="_defaultSeverityOpt 754180"];
804 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 754181"];
805 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 754182"];
806 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 754183"];
807 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 754184"];
808 [label="=> _effectiveSeverityOpt 754185"];
809 [label="_effectiveSeverityOpt 754186"];
810 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 754187"];
811 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 754188"];
812 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 754189"];
813 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 754190"];
814 [label="param DiagnosticDescription(Diagnostic d) 754191"];
815 [label="param DiagnosticDescription(bool errorCodeOnly) 754192"];
816 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 754193"];
817 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 754194"];
818 [label="param DiagnosticDescription(this) 754195"];
819 [label="_code 754196"];
820 [label="_isWarningAsError 754197"];
821 [label="_isSuppressed 754198"];
822 [label="_squiggledText 754199"];
823 [label="_arguments 754200"];
824 [label="_startPosition 754201"];
825 [label="_argumentOrderDoesNotMatter 754202"];
826 [label="_errorCodeType 754203"];
827 [label="_defaultSeverityOpt 754204"];
828 [label="_effectiveSeverityOpt 754205"];
829 [label="_syntaxPredicate 754206"];
830 [label="_code 754207"];
831 [label="_isWarningAsError 754208"];
832 [label="_isSuppressed 754209"];
833 [label="_location 754210"];
834 [label="includeDefaultSeverity 754211"];
835 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 754212"];
836 [label="_defaultSeverityOpt 754213"];
837 [label="includeEffectiveSeverity 754214"];
838 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 754215"];
839 [label="_effectiveSeverityOpt 754216"];
840 [label="DiagnosticWithInfo dinfo = null; 754217"];
841 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 754218"];
842 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 754219"];
843 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 754220"];
844 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 754221"];
845 [label="dinfo = d as DiagnosticWithInfo; 754222"];
846 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 754223"];
847 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 754224"];
848 [label="_errorCodeType 754225"];
849 [label="_code 754226"];
850 [label="_ignoreArgumentsWhenComparing 754227"];
851 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 754228"];
852 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 754229"];
853 [label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 754230"];
854 [label="_squiggledText 754231"];
855 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 754232"];
856 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 754233"];
857 [label="_arguments 754234"];
858 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 754235"];
859 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 754236"];
860 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 754237"];
861 [label="_arguments = null; 754238"];
862 [label="_arguments 754239"];
863 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 754240"];
864 [label="_startPosition 754241"];
865 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 754242"];
866 [label="_code 754243"];
867 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 754244"];
868 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 754245"];
869 [label="int index = unmatched.IndexOf(d); 754246"];
870 [label="int index = unmatched.IndexOf(d); 754247"];
871 [label="param Equals(object obj) 754248"];
872 [label="param Equals(this) 754249"];
873 [label="var d = obj as DiagnosticDescription; 754250"];
874 [label="if (d == null)\n                return false; 754251"];
875 [label="if (d == null)\n                return false; 754252"];
876 [label="if (!_code.Equals(d._code))\n                return false; 754253"];
877 [label="if (!_code.Equals(d._code))\n                return false; 754254"];
878 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 754255"];
879 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 754256"];
880 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 754257"];
881 [label="if (_squiggledText != d._squiggledText)\n                    return false; 754258"];
882 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 754259"];
883 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 754260"];
884 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 754261"];
885 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 754262"];
886 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 754263"];
887 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 754264"];
888 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 754265"];
889 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 754266"];
890 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 754267"];
891 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 754268"];
892 [label="if (d._arguments != null)\n                    return false; 754269"];
893 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 754270"];
894 [label="return true; 754271"];
895 [label="int index = unmatched.IndexOf(d); 754272"];
896 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 754273"];
897 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 754274"];
898 [label="unmatched.RemoveAt(index); 754275"];
899 [label="if (d == null)\n                return false; 754276"];
900 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 754277"];
901 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 754278"];
902 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 754279"];
903 [label="if (_squiggledText != d._squiggledText)\n                    return false; 754280"];
904 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 754281"];
905 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 754282"];
906 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 754283"];
907 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 754284"];
908 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 754285"];
909 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 754286"];
910 [label="if (d._arguments == null)\n                    return false; 754287"];
911 [label="GetArgumentsAsStrings() 754288"];
912 [label="param GetArgumentsAsStrings(this) 754289"];
913 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 754290"];
914 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 754291"];
915 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 754292"];
916 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 754293"];
917 [label="_argumentsAsStrings 754294"];
918 [label="return _argumentsAsStrings; 754295"];
919 [label="var args1 = GetArgumentsAsStrings(); 754296"];
920 [label="d.GetArgumentsAsStrings() 754297"];
921 [label="param GetArgumentsAsStrings(this) 754298"];
922 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 754299"];
923 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 754300"];
924 [label="return _argumentsAsStrings; 754301"];
925 [label="var args2 = d.GetArgumentsAsStrings(); 754302"];
926 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 754303"];
927 [label="if (!args1.SequenceEqual(args2))\n                        return false; 754304"];
928 [label="if (!args1.SequenceEqual(args2))\n                        return false; 754305"];
929 [label="if (!args1.SequenceEqual(args2))\n                        return false; 754306"];
930 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 754307"];
931 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 754308"];
932 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 754309"];
933 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 754310"];
934 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 754311"];
935 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 754312"];
936 [label="DiagnosticDescription.GetAssertText(expected, actual) 754313"];
937 [label="param GetAssertText(DiagnosticDescription[] expected) 754314"];
938 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 754315"];
939 [label="const int CSharp = 1; 754316"];
940 [label="const int VisualBasic = 2; 754317"];
941 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 754318"];
942 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 754319"];
943 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 754320"];
944 [label="actual.Any() && actual.First() is CSDiagnostic 754321"];
945 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 754322"];
946 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 754323"];
947 [label="int indentDepth = (language == CSharp) ? 4 : 1; 754324"];
948 [label="(language == CSharp) 754325"];
949 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 754326"];
950 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 754327"];
951 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 754328"];
952 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 754329"];
953 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 754330"];
954 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 754331"];
955 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 754332"];
956 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 754333"];
957 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 754334"];
958 [label="IsSortedOrEmpty(expected) 754335"];
959 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 754336"];
960 [label="new LinePositionComparer() 754337"];
961 [label="param LinePositionComparer(this) 754338"];
962 [label="Instance = new LinePositionComparer() 754339"];
963 [label="var comparer = LinePositionComparer.Instance; 754340"];
964 [label="DiagnosticDescription last = null; 754341"];
965 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 754342"];
966 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 754343"];
967 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 754344"];
968 [label="return false; 754345"];
969 [label="var assertText = new StringBuilder(); 754346"];
970 [label="assertText.AppendLine(); 754347"];
971 [label="int i; 754348"];
972 [label="assertText.AppendLine('Expected:'); 754349"];
973 [label="assertText.AppendLine('Expected:'); 754350"];
974 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 754351"];
975 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 754352"];
976 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 754353"];
977 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 754354"];
978 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 754355"];
979 [label="GetDiagnosticDescription(d, indentDepth) 754356"];
980 [label="param GetDiagnosticDescription(DiagnosticDescription d) 754357"];
981 [label="param GetDiagnosticDescription(int indentDepth) 754358"];
982 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754359"];
983 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754360"];
984 [label="d.ToString() 754361"];
985 [label="param ToString(this) 754362"];
986 [label="var sb = new StringBuilder(); 754363"];
987 [label="sb.Append('Diagnostic('); 754364"];
988 [label="sb.Append('Diagnostic('); 754365"];
989 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 754366"];
990 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 754367"];
991 [label="sb.Append(_errorCodeType.Name); 754368"];
992 [label="sb.Append(_errorCodeType.Name); 754369"];
993 [label="sb.Append('.'); 754370"];
994 [label="sb.Append('.'); 754371"];
995 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 754372"];
996 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 754373"];
997 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 754374"];
998 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 754375"];
999 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 754376"];
1000 [label="sb.Append(', \\''); 754377"];
1001 [label="sb.Append(', \\''); 754378"];
1002 [label="sb.Append(_squiggledText); 754379"];
1003 [label="sb.Append(_squiggledText); 754380"];
1004 [label="sb.Append('''); 754381"];
1005 [label="sb.Append('''); 754382"];
1006 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 754383"];
1007 [label="sb.Append(')'); 754384"];
1008 [label="sb.Append(')'); 754385"];
1009 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 754386"];
1010 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 754387"];
1011 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 754388"];
1012 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 754389"];
1013 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 754390"];
1014 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 754391"];
1015 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 754392"];
1016 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 754393"];
1017 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 754394"];
1018 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 754395"];
1019 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 754396"];
1020 [label="return sb.ToString(); 754397"];
1021 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754398"];
1022 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754399"];
1023 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 754400"];
1024 [label="sb.Append('.WithArguments('); 754401"];
1025 [label="sb.Append('.WithArguments('); 754402"];
1026 [label="GetArgumentsAsStrings() 754403"];
1027 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 754404"];
1028 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 754405"];
1029 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 754406"];
1030 [label="sb.Append('\\''); 754407"];
1031 [label="sb.Append('\\''); 754408"];
1032 [label="sb.Append(argumentStrings.Current); 754409"];
1033 [label="sb.Append(argumentStrings.Current); 754410"];
1034 [label="sb.Append('\\''); 754411"];
1035 [label="sb.Append('\\''); 754412"];
1036 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 754413"];
1037 [label="sb.Append(')'); 754414"];
1038 [label="sb.Append(')'); 754415"];
1039 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 754416"];
1040 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 754417"];
1041 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 754418"];
1042 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 754419"];
1043 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 754420"];
1044 [label="return sb.ToString(); 754421"];
1045 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754422"];
1046 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754423"];
1047 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 754424"];
1048 [label="GetCommaSeparatedLines(assertText, expectedText); 754425"];
1049 [label="GetCommaSeparatedLines(assertText, expectedText); 754426"];
1050 [label="GetCommaSeparatedLines(assertText, expectedText) 754427"];
1051 [label="param GetCommaSeparatedLines(StringBuilder sb) 754428"];
1052 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 754429"];
1053 [label="int n = lines.Count; 754430"];
1054 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 754431"];
1055 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 754432"];
1056 [label="sb.Append(lines[i]); 754433"];
1057 [label="sb.Append(lines[i]); 754434"];
1058 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 754435"];
1059 [label="sb.Append(','); 754436"];
1060 [label="sb.Append(','); 754437"];
1061 [label="sb.AppendLine(); 754438"];
1062 [label="GetCommaSeparatedLines(assertText, expectedText); 754439"];
1063 [label="assertText.AppendLine('Actual:'); 754440"];
1064 [label="assertText.AppendLine('Actual:'); 754441"];
1065 [label="var actualText = ArrayBuilder<string>.GetInstance(); 754442"];
1066 [label="var e = actual.GetEnumerator(); 754443"];
1067 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 754444"];
1068 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 754445"];
1069 [label="Diagnostic d = e.Current; 754446"];
1070 [label="string message = d.ToString(); 754447"];
1071 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 754448"];
1072 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 754449"];
1073 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 754450"];
1074 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 754451"];
1075 [label="Indent(assertText, indentDepth); 754452"];
1076 [label="Indent(assertText, indentDepth); 754453"];
1077 [label="Indent(assertText, indentDepth) 754454"];
1078 [label="param Indent(StringBuilder sb) 754455"];
1079 [label="param Indent(int count) 754456"];
1080 [label="sb.Append(' ', 4 * count); 754457"];
1081 [label="sb.Append(' ', 4 * count); 754458"];
1082 [label="sb.Append(' ', 4 * count); 754459"];
1083 [label="Indent(assertText, indentDepth); 754460"];
1084 [label="assertText.Append('// '); 754461"];
1085 [label="assertText.Append('// '); 754462"];
1086 [label="assertText.AppendLine(d.ToString()); 754463"];
1087 [label="assertText.AppendLine(d.ToString()); 754464"];
1088 [label="var l = d.Location; 754465"];
1089 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 754466"];
1090 [label="Indent(assertText, indentDepth); 754467"];
1091 [label="Indent(assertText, indentDepth); 754468"];
1092 [label="Indent(assertText, indentDepth) 754469"];
1093 [label="param Indent(StringBuilder sb) 754470"];
1094 [label="param Indent(int count) 754471"];
1095 [label="sb.Append(' ', 4 * count); 754472"];
1096 [label="sb.Append(' ', 4 * count); 754473"];
1097 [label="sb.Append(' ', 4 * count); 754474"];
1098 [label="Indent(assertText, indentDepth); 754475"];
1099 [label="assertText.Append('// '); 754476"];
1100 [label="assertText.Append('// '); 754477"];
1101 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 754478"];
1102 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 754479"];
1103 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 754480"];
1104 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 754481"];
1105 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 754482"];
1106 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 754483"];
1107 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 754484"];
1108 [label="param DiagnosticDescription(Diagnostic d) 754485"];
1109 [label="param DiagnosticDescription(bool errorCodeOnly) 754486"];
1110 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 754487"];
1111 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 754488"];
1112 [label="param DiagnosticDescription(this) 754489"];
1113 [label="_code 754490"];
1114 [label="_isWarningAsError 754491"];
1115 [label="_isSuppressed 754492"];
1116 [label="_squiggledText 754493"];
1117 [label="_arguments 754494"];
1118 [label="_startPosition 754495"];
1119 [label="_errorCodeType 754496"];
1120 [label="_defaultSeverityOpt 754497"];
1121 [label="_effectiveSeverityOpt 754498"];
1122 [label="_code 754499"];
1123 [label="_isWarningAsError 754500"];
1124 [label="_isSuppressed 754501"];
1125 [label="_location 754502"];
1126 [label="DiagnosticWithInfo dinfo = null; 754503"];
1127 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 754504"];
1128 [label="var diffDescription = description; 754505"];
1129 [label="var idx = Array.IndexOf(expected, description); 754506"];
1130 [label="var idx = Array.IndexOf(expected, description); 754507"];
1131 [label="var idx = Array.IndexOf(expected, description); 754508"];
1132 [label="var idx = Array.IndexOf(expected, description); 754509"];
1133 [label="if (d == null)\n                return false; 754510"];
1134 [label="if (d == null)\n                return false; 754511"];
1135 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 754512"];
1136 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 754513"];
1137 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 754514"];
1138 [label="if (_squiggledText != d._squiggledText)\n                    return false; 754515"];
1139 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 754516"];
1140 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 754517"];
1141 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 754518"];
1142 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 754519"];
1143 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 754520"];
1144 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 754521"];
1145 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 754522"];
1146 [label="if (d._arguments != null)\n                    return false; 754523"];
1147 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 754524"];
1148 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 754525"];
1149 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 754526"];
1150 [label="diffDescription = expected[idx]; 754527"];
1151 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 754528"];
1152 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 754529"];
1153 [label="GetDiagnosticDescription(description, indentDepth) 754530"];
1154 [label="param GetDiagnosticDescription(DiagnosticDescription d) 754531"];
1155 [label="param GetDiagnosticDescription(int indentDepth) 754532"];
1156 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754533"];
1157 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754534"];
1158 [label="var sb = new StringBuilder(); 754535"];
1159 [label="sb.Append('Diagnostic('); 754536"];
1160 [label="sb.Append('Diagnostic('); 754537"];
1161 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 754538"];
1162 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 754539"];
1163 [label="sb.Append(_errorCodeType.Name); 754540"];
1164 [label="sb.Append(_errorCodeType.Name); 754541"];
1165 [label="sb.Append('.'); 754542"];
1166 [label="sb.Append('.'); 754543"];
1167 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 754544"];
1168 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 754545"];
1169 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 754546"];
1170 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 754547"];
1171 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 754548"];
1172 [label="sb.Append(', \\''); 754549"];
1173 [label="sb.Append(', \\''); 754550"];
1174 [label="sb.Append(_squiggledText); 754551"];
1175 [label="sb.Append(_squiggledText); 754552"];
1176 [label="sb.Append('''); 754553"];
1177 [label="sb.Append('''); 754554"];
1178 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 754555"];
1179 [label="sb.Append(')'); 754556"];
1180 [label="sb.Append(')'); 754557"];
1181 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 754558"];
1182 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 754559"];
1183 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 754560"];
1184 [label="sb.Append('.WithLocation('); 754561"];
1185 [label="sb.Append('.WithLocation('); 754562"];
1186 [label="sb.Append(_startPosition.Value.Line + 1); 754563"];
1187 [label="sb.Append(_startPosition.Value.Line + 1); 754564"];
1188 [label="sb.Append(', '); 754565"];
1189 [label="sb.Append(', '); 754566"];
1190 [label="sb.Append(_startPosition.Value.Character + 1); 754567"];
1191 [label="sb.Append(_startPosition.Value.Character + 1); 754568"];
1192 [label="sb.Append(')'); 754569"];
1193 [label="sb.Append(')'); 754570"];
1194 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 754571"];
1195 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 754572"];
1196 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 754573"];
1197 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 754574"];
1198 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 754575"];
1199 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 754576"];
1200 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 754577"];
1201 [label="return sb.ToString(); 754578"];
1202 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754579"];
1203 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754580"];
1204 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 754581"];
1205 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 754582"];
1206 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 754583"];
1207 [label="GetDiagnosticDescription(diffDescription, indentDepth) 754584"];
1208 [label="param GetDiagnosticDescription(DiagnosticDescription d) 754585"];
1209 [label="param GetDiagnosticDescription(int indentDepth) 754586"];
1210 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754587"];
1211 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754588"];
1212 [label="var sb = new StringBuilder(); 754589"];
1213 [label="sb.Append('Diagnostic('); 754590"];
1214 [label="sb.Append('Diagnostic('); 754591"];
1215 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 754592"];
1216 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 754593"];
1217 [label="sb.Append(_errorCodeType.Name); 754594"];
1218 [label="sb.Append(_errorCodeType.Name); 754595"];
1219 [label="sb.Append('.'); 754596"];
1220 [label="sb.Append('.'); 754597"];
1221 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 754598"];
1222 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 754599"];
1223 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 754600"];
1224 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 754601"];
1225 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 754602"];
1226 [label="sb.Append(', \\''); 754603"];
1227 [label="sb.Append(', \\''); 754604"];
1228 [label="sb.Append(_squiggledText); 754605"];
1229 [label="sb.Append(_squiggledText); 754606"];
1230 [label="sb.Append('''); 754607"];
1231 [label="sb.Append('''); 754608"];
1232 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 754609"];
1233 [label="sb.Append(')'); 754610"];
1234 [label="sb.Append(')'); 754611"];
1235 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 754612"];
1236 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 754613"];
1237 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 754614"];
1238 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 754615"];
1239 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 754616"];
1240 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 754617"];
1241 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 754618"];
1242 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 754619"];
1243 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 754620"];
1244 [label="return sb.ToString(); 754621"];
1245 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754622"];
1246 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754623"];
1247 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 754624"];
1248 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 754625"];
1249 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 754626"];
1250 [label="assertText.AppendLine(','); 754627"];
1251 [label="assertText.AppendLine(','); 754628"];
1252 [label="Indent(assertText, indentDepth); 754629"];
1253 [label="Indent(assertText, indentDepth); 754630"];
1254 [label="Indent(assertText, indentDepth) 754631"];
1255 [label="param Indent(StringBuilder sb) 754632"];
1256 [label="param Indent(int count) 754633"];
1257 [label="sb.Append(' ', 4 * count); 754634"];
1258 [label="sb.Append(' ', 4 * count); 754635"];
1259 [label="Indent(assertText, indentDepth); 754636"];
1260 [label="assertText.Append('// '); 754637"];
1261 [label="Indent(assertText, indentDepth); 754638"];
1262 [label="Indent(assertText, indentDepth); 754639"];
1263 [label="Indent(assertText, indentDepth) 754640"];
1264 [label="param Indent(StringBuilder sb) 754641"];
1265 [label="param Indent(int count) 754642"];
1266 [label="sb.Append(' ', 4 * count); 754643"];
1267 [label="sb.Append(' ', 4 * count); 754644"];
1268 [label="Indent(assertText, indentDepth); 754645"];
1269 [label="assertText.Append('// '); 754646"];
1270 [label="_code 754647"];
1271 [label="_isWarningAsError 754648"];
1272 [label="_isSuppressed 754649"];
1273 [label="_squiggledText 754650"];
1274 [label="_arguments 754651"];
1275 [label="_startPosition 754652"];
1276 [label="_errorCodeType 754653"];
1277 [label="_defaultSeverityOpt 754654"];
1278 [label="_effectiveSeverityOpt 754655"];
1279 [label="_code 754656"];
1280 [label="DiagnosticWithInfo dinfo = null; 754657"];
1281 [label="var diffDescription = description; 754658"];
1282 [label="if (d == null)\n                return false; 754659"];
1283 [label="return false; 754660"];
1284 [label="if (d == null)\n                return false; 754661"];
1285 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 754662"];
1286 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 754663"];
1287 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 754664"];
1288 [label="if (_squiggledText != d._squiggledText)\n                    return false; 754665"];
1289 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 754666"];
1290 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 754667"];
1291 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 754668"];
1292 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 754669"];
1293 [label="if (d._arguments == null)\n                    return false; 754670"];
1294 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 754671"];
1295 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 754672"];
1296 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 754673"];
1297 [label="diffDescription = expected[idx]; 754674"];
1298 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 754675"];
1299 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 754676"];
1300 [label="GetDiagnosticDescription(description, indentDepth) 754677"];
1301 [label="param GetDiagnosticDescription(DiagnosticDescription d) 754678"];
1302 [label="param GetDiagnosticDescription(int indentDepth) 754679"];
1303 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754680"];
1304 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754681"];
1305 [label="var sb = new StringBuilder(); 754682"];
1306 [label="sb.Append('Diagnostic('); 754683"];
1307 [label="sb.Append('Diagnostic('); 754684"];
1308 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 754685"];
1309 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 754686"];
1310 [label="sb.Append(_errorCodeType.Name); 754687"];
1311 [label="sb.Append(_errorCodeType.Name); 754688"];
1312 [label="sb.Append('.'); 754689"];
1313 [label="sb.Append('.'); 754690"];
1314 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 754691"];
1315 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 754692"];
1316 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 754693"];
1317 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 754694"];
1318 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 754695"];
1319 [label="sb.Append(', \\''); 754696"];
1320 [label="sb.Append(', \\''); 754697"];
1321 [label="sb.Append(_squiggledText); 754698"];
1322 [label="sb.Append(_squiggledText); 754699"];
1323 [label="sb.Append('''); 754700"];
1324 [label="sb.Append('''); 754701"];
1325 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 754702"];
1326 [label="sb.Append(')'); 754703"];
1327 [label="sb.Append(')'); 754704"];
1328 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 754705"];
1329 [label="sb.Append('.WithArguments('); 754706"];
1330 [label="sb.Append('.WithArguments('); 754707"];
1331 [label="sb.Append('\\''); 754708"];
1332 [label="sb.Append('\\''); 754709"];
1333 [label="sb.Append(argumentStrings.Current); 754710"];
1334 [label="sb.Append(argumentStrings.Current); 754711"];
1335 [label="sb.Append('\\''); 754712"];
1336 [label="sb.Append('\\''); 754713"];
1337 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 754714"];
1338 [label="sb.Append(')'); 754715"];
1339 [label="sb.Append(')'); 754716"];
1340 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 754717"];
1341 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 754718"];
1342 [label="sb.Append('.WithLocation('); 754719"];
1343 [label="sb.Append('.WithLocation('); 754720"];
1344 [label="sb.Append(_startPosition.Value.Line + 1); 754721"];
1345 [label="sb.Append(_startPosition.Value.Line + 1); 754722"];
1346 [label="sb.Append(', '); 754723"];
1347 [label="sb.Append(', '); 754724"];
1348 [label="sb.Append(_startPosition.Value.Character + 1); 754725"];
1349 [label="sb.Append(_startPosition.Value.Character + 1); 754726"];
1350 [label="sb.Append(')'); 754727"];
1351 [label="sb.Append(')'); 754728"];
1352 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 754729"];
1353 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 754730"];
1354 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 754731"];
1355 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 754732"];
1356 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 754733"];
1357 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 754734"];
1358 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 754735"];
1359 [label="return sb.ToString(); 754736"];
1360 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754737"];
1361 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754738"];
1362 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 754739"];
1363 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 754740"];
1364 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 754741"];
1365 [label="GetDiagnosticDescription(diffDescription, indentDepth) 754742"];
1366 [label="param GetDiagnosticDescription(DiagnosticDescription d) 754743"];
1367 [label="param GetDiagnosticDescription(int indentDepth) 754744"];
1368 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754745"];
1369 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754746"];
1370 [label="var sb = new StringBuilder(); 754747"];
1371 [label="sb.Append('Diagnostic('); 754748"];
1372 [label="sb.Append('Diagnostic('); 754749"];
1373 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 754750"];
1374 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 754751"];
1375 [label="sb.Append(_errorCodeType.Name); 754752"];
1376 [label="sb.Append(_errorCodeType.Name); 754753"];
1377 [label="sb.Append('.'); 754754"];
1378 [label="sb.Append('.'); 754755"];
1379 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 754756"];
1380 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 754757"];
1381 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 754758"];
1382 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 754759"];
1383 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 754760"];
1384 [label="sb.Append(', \\''); 754761"];
1385 [label="sb.Append(', \\''); 754762"];
1386 [label="sb.Append(_squiggledText); 754763"];
1387 [label="sb.Append(_squiggledText); 754764"];
1388 [label="sb.Append('''); 754765"];
1389 [label="sb.Append('''); 754766"];
1390 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 754767"];
1391 [label="sb.Append(')'); 754768"];
1392 [label="sb.Append(')'); 754769"];
1393 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 754770"];
1394 [label="sb.Append('.WithArguments('); 754771"];
1395 [label="sb.Append('.WithArguments('); 754772"];
1396 [label="sb.Append('\\''); 754773"];
1397 [label="sb.Append('\\''); 754774"];
1398 [label="sb.Append(argumentStrings.Current); 754775"];
1399 [label="sb.Append(argumentStrings.Current); 754776"];
1400 [label="sb.Append('\\''); 754777"];
1401 [label="sb.Append('\\''); 754778"];
1402 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 754779"];
1403 [label="sb.Append(')'); 754780"];
1404 [label="sb.Append(')'); 754781"];
1405 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 754782"];
1406 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 754783"];
1407 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 754784"];
1408 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 754785"];
1409 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 754786"];
1410 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 754787"];
1411 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 754788"];
1412 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 754789"];
1413 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 754790"];
1414 [label="return sb.ToString(); 754791"];
1415 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754792"];
1416 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 754793"];
1417 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 754794"];
1418 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 754795"];
1419 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 754796"];
1420 [label="assertText.AppendLine(); 754797"];
1421 [label="assertText.AppendLine('Diff:'); 754798"];
1422 [label="assertText.AppendLine('Diff:'); 754799"];
1423 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 754800"];
1424 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 754801"];
1425 [label="new[] { '\\r', '\\n' } 754802"];
1426 [label="'\\r' 754803"];
1427 [label="'\\n' 754804"];
1428 [label="new[] { '\\r', '\\n' } 754805"];
1429 [label="new[] { '\\r', '\\n' } 754806"];
1430 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 754807"];
1431 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 754808"];
1432 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 754809"];
1433 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 754810"];
1434 [label="param DiffReport(IEnumerable<T> expected) 754811"];
1435 [label="param DiffReport(IEnumerable<T> actual) 754812"];
1436 [label="param DiffReport(string separator) 754813"];
1437 [label="param DiffReport(IEqualityComparer<T> comparer = null) 754814"];
1438 [label="param DiffReport(Func<T, string> toString = null) 754815"];
1439 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 754816"];
1440 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 754817"];
1441 [label="(comparer != null) 754818"];
1442 [label="EqualityComparer<T>.Default 754819"];
1443 [label="new LCS<T>(EqualityComparer<T>.Default) 754820"];
1444 [label="param LCS(IEqualityComparer<T> comparer) 754821"];
1445 [label="param LCS(this) 754822"];
1446 [label="1 754823"];
1447 [label="DeleteCost = 1 754824"];
1448 [label="1 754825"];
1449 [label="InsertCost = 1 754826"];
1450 [label="2 754827"];
1451 [label="UpdateCost = 2 754828"];
1452 [label="param LongestCommonSubsequence(this) 754829"];
1453 [label="_comparer 754830"];
1454 [label="_comparer 754831"];
1455 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 754832"];
1456 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 754833"];
1457 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 754834"];
1458 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 754835"];
1459 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 754836"];
1460 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 754837"];
1461 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 754838"];
1462 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 754839"];
1463 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 754840"];
1464 [label="lcs.CalculateDiff(expectedList, actualList, toString) 754841"];
1465 [label="param CalculateDiff(IList<T> sequenceA) 754842"];
1466 [label="param CalculateDiff(IList<T> sequenceB) 754843"];
1467 [label="param CalculateDiff(Func<T, string> toString) 754844"];
1468 [label="param CalculateDiff(this) 754845"];
1469 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 754846"];
1470 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 754847"];
1471 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 754848"];
1472 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 754849"];
1473 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 754850"];
1474 [label="param GetEdits(TSequence sequenceA) 754851"];
1475 [label="param GetEdits(int lengthA) 754852"];
1476 [label="param GetEdits(TSequence sequenceB) 754853"];
1477 [label="param GetEdits(int lengthB) 754854"];
1478 [label="param GetEdits(this) 754855"];
1479 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 754856"];
1480 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 754857"];
1481 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 754858"];
1482 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 754859"];
1483 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 754860"];
1484 [label="param ComputeCostMatrix(TSequence sequenceA) 754861"];
1485 [label="param ComputeCostMatrix(int lengthA) 754862"];
1486 [label="param ComputeCostMatrix(TSequence sequenceB) 754863"];
1487 [label="param ComputeCostMatrix(int lengthB) 754864"];
1488 [label="param ComputeCostMatrix(this) 754865"];
1489 [label="var la = lengthA + 1; 754866"];
1490 [label="var la = lengthA + 1; 754867"];
1491 [label="var lb = lengthB + 1; 754868"];
1492 [label="var lb = lengthB + 1; 754869"];
1493 [label="var d = new int[la, lb]; 754870"];
1494 [label="d[0, 0] = 0; 754871"];
1495 [label="d[0, 0] 754872"];
1496 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 754873"];
1497 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 754874"];
1498 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 754875"];
1499 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 754876"];
1500 [label="d[i, 0] 754877"];
1501 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 754878"];
1502 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 754879"];
1503 [label="d[0, j] = d[0, j - 1] + InsertCost; 754880"];
1504 [label="d[0, j] = d[0, j - 1] + InsertCost; 754881"];
1505 [label="d[0, j] 754882"];
1506 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 754883"];
1507 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 754884"];
1508 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 754885"];
1509 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 754886"];
1510 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 754887"];
1511 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 754888"];
1512 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 754889"];
1513 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 754890"];
1514 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 754891"];
1515 [label="param ItemsEqual(IList<T> sequenceA) 754892"];
1516 [label="param ItemsEqual(int indexA) 754893"];
1517 [label="param ItemsEqual(IList<T> sequenceB) 754894"];
1518 [label="param ItemsEqual(int indexB) 754895"];
1519 [label="param ItemsEqual(this) 754896"];
1520 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 754897"];
1521 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 754898"];
1522 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 754899"];
1523 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 754900"];
1524 [label="int m2 = d[i - 1, j] + DeleteCost; 754901"];
1525 [label="int m2 = d[i - 1, j] + DeleteCost; 754902"];
1526 [label="int m3 = d[i, j - 1] + InsertCost; 754903"];
1527 [label="int m3 = d[i, j - 1] + InsertCost; 754904"];
1528 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 754905"];
1529 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 754906"];
1530 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 754907"];
1531 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 754908"];
1532 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 754909"];
1533 [label="d[i, j] 754910"];
1534 [label="return d; 754911"];
1535 [label="int i = lengthA; 754912"];
1536 [label="int j = lengthB; 754913"];
1537 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 754914"];
1538 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 754915"];
1539 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 754916"];
1540 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 754917"];
1541 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 754918"];
1542 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 754919"];
1543 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 754920"];
1544 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 754921"];
1545 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 754922"];
1546 [label="i--; 754923"];
1547 [label="j--; 754924"];
1548 [label="yield return new Edit(EditKind.Update, i, j); 754925"];
1549 [label="yield return new Edit(EditKind.Update, i, j); 754926"];
1550 [label="yield return new Edit(EditKind.Update, i, j); 754927"];
1551 [label="yield return new Edit(EditKind.Update, i, j); 754928"];
1552 [label="new Edit(EditKind.Update, i, j) 754929"];
1553 [label="param Edit(EditKind kind) 754930"];
1554 [label="param Edit(int indexA) 754931"];
1555 [label="param Edit(int indexB) 754932"];
1556 [label="param Edit(this) 754933"];
1557 [label="this.Kind 754934"];
1558 [label="this.IndexA 754935"];
1559 [label="this.IndexB 754936"];
1560 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 754937"];
1561 [label="yield return new Edit(EditKind.Update, i, j); 754938"];
1562 [label="yield return new Edit(EditKind.Update, i, j); 754939"];
1563 [label="new Edit(EditKind.Update, i, j) 754940"];
1564 [label="param Edit(EditKind kind) 754941"];
1565 [label="param Edit(int indexA) 754942"];
1566 [label="param Edit(int indexB) 754943"];
1567 [label="param Edit(this) 754944"];
1568 [label="this.Kind 754945"];
1569 [label="this.IndexA 754946"];
1570 [label="this.IndexB 754947"];
1571 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 754948"];
1572 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 754949"];
1573 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 754950"];
1574 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 754951"];
1575 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 754952"];
1576 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 754953"];
1577 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 754954"];
1578 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 754955"];
1579 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 754956"];
1580 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 754957"];
1581 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 754958"];
1582 [label="actualText.Free(); 754959"];
1583 [label="expectedText.Free(); 754960"];
1584 [label="return assertText.ToString(); 754961"];
1585 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 754962"];
1586 [label="diagnostics.Verify(expected); 754963"];
1587 [label="VerifyAssemblyIds(c, diagnostics); 754964"];
1588 [label="VerifyAssemblyIds(c, diagnostics); 754965"];
1589 [label="VerifyAssemblyIds(c, diagnostics) 754966"];
1590 [label="param VerifyAssemblyIds(TCompilation c) 754967"];
1591 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 754968"];
1592 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 754969"];
1593 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 754970"];
1594 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 754971"];
1595 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 754972"];
1596 [label="CustomAssert.True(assemblyIds.IsEmpty); 754973"];
1597 [label="CustomAssert.True(assemblyIds.IsEmpty); 754974"];
1598 [label="VerifyAssemblyIds(c, diagnostics); 754975"];
1599 [label="return c; 754976"];
2 -> 0;
2 -> 1;
4 -> 3;
6 -> 5;
7 -> 1;
9 -> 8;
11 -> 10;
13 -> 12;
15 -> 14;
17 -> 16;
19 -> 18;
21 -> 20;
23 -> 22;
25 -> 24;
27 -> 26;
29 -> 28;
31 -> 30;
33 -> 32;
35 -> 34;
37 -> 36;
39 -> 38;
41 -> 40;
43 -> 42;
45 -> 44;
46 -> 0;
47 -> 0;
48 -> 46;
48 -> 47;
48 -> 0;
49 -> 48;
50 -> 0;
51 -> 0;
52 -> 50;
52 -> 51;
52 -> 48;
53 -> 52;
54 -> 0;
55 -> 54;
56 -> 55;
56 -> 54;
57 -> 56;
59 -> 0;
60 -> 58;
60 -> 59;
61 -> 60;
62 -> 0;
63 -> 0;
64 -> 62;
64 -> 63;
64 -> 0;
65 -> 64;
66 -> 0;
67 -> 0;
68 -> 66;
68 -> 67;
68 -> 52;
69 -> 68;
70 -> 0;
71 -> 0;
72 -> 70;
72 -> 71;
72 -> 68;
73 -> 72;
74 -> 0;
75 -> 0;
76 -> 74;
76 -> 75;
76 -> 72;
77 -> 76;
78 -> 0;
79 -> 0;
80 -> 78;
80 -> 79;
80 -> 0;
81 -> 80;
82 -> 0;
83 -> 0;
84 -> 82;
84 -> 83;
84 -> 0;
85 -> 84;
86 -> 0;
87 -> 0;
88 -> 86;
88 -> 87;
88 -> 0;
89 -> 88;
90 -> 0;
91 -> 0;
92 -> 90;
92 -> 91;
92 -> 76;
93 -> 92;
94 -> 0;
95 -> 0;
96 -> 94;
96 -> 95;
96 -> 0;
97 -> 96;
99 -> 0;
100 -> 98;
100 -> 99;
101 -> 100;
102 -> 0;
103 -> 0;
104 -> 102;
104 -> 103;
104 -> 92;
105 -> 104;
106 -> 0;
107 -> 0;
108 -> 106;
108 -> 107;
108 -> 0;
109 -> 108;
110 -> 0;
111 -> 0;
112 -> 110;
112 -> 111;
112 -> 0;
113 -> 112;
114 -> 0;
115 -> 0;
116 -> 114;
116 -> 115;
116 -> 0;
117 -> 116;
118 -> 0;
119 -> 0;
120 -> 118;
120 -> 119;
120 -> 0;
121 -> 120;
122 -> 0;
123 -> 0;
124 -> 122;
124 -> 123;
124 -> 0;
125 -> 124;
126 -> 0;
127 -> 0;
128 -> 126;
128 -> 127;
128 -> 104;
129 -> 128;
130 -> 0;
131 -> 0;
132 -> 130;
132 -> 131;
132 -> 128;
133 -> 132;
134 -> 0;
135 -> 0;
136 -> 134;
136 -> 135;
136 -> 132;
137 -> 136;
138 -> 0;
139 -> 0;
140 -> 138;
140 -> 139;
140 -> 136;
141 -> 140;
142 -> 0;
143 -> 0;
144 -> 142;
144 -> 143;
144 -> 0;
145 -> 144;
146 -> 0;
147 -> 0;
148 -> 146;
148 -> 147;
148 -> 0;
149 -> 148;
150 -> 0;
151 -> 0;
152 -> 150;
152 -> 151;
152 -> 140;
153 -> 152;
154 -> 0;
155 -> 0;
156 -> 154;
156 -> 155;
156 -> 0;
157 -> 156;
158 -> 0;
159 -> 0;
160 -> 158;
160 -> 159;
160 -> 0;
161 -> 160;
162 -> 0;
163 -> 0;
164 -> 162;
164 -> 163;
164 -> 0;
165 -> 164;
166 -> 0;
167 -> 0;
168 -> 166;
168 -> 167;
168 -> 152;
169 -> 168;
170 -> 0;
171 -> 0;
172 -> 170;
172 -> 171;
172 -> 0;
173 -> 172;
174 -> 0;
175 -> 0;
176 -> 174;
176 -> 175;
176 -> 0;
177 -> 176;
179 -> 178;
181 -> 179;
181 -> 180;
182 -> 181;
184 -> 0;
184 -> 183;
185 -> 184;
185 -> 0;
186 -> 185;
188 -> 187;
190 -> 189;
192 -> 191;
194 -> 193;
195 -> 7;
196 -> 195;
197 -> 196;
198 -> 197;
198 -> 196;
199 -> 1;
199 -> 2;
199 -> 198;
200 -> 1;
201 -> 1;
202 -> 4;
202 -> 201;
202 -> 1;
203 -> 202;
203 -> 6;
203 -> 1;
204 -> 203;
204 -> 1;
205 -> 1;
206 -> 204;
206 -> 205;
207 -> 206;
207 -> 205;
208 -> 205;
209 -> 207;
209 -> 208;
210 -> 208;
211 -> 209;
211 -> 210;
211 -> 208;
212 -> 208;
212 -> 1;
213 -> 1;
214 -> 1;
215 -> 212;
215 -> 214;
216 -> 213;
216 -> 214;
217 -> 213;
217 -> 214;
218 -> 213;
218 -> 214;
219 -> 213;
219 -> 214;
220 -> 213;
220 -> 214;
221 -> 213;
221 -> 214;
222 -> 213;
222 -> 214;
223 -> 215;
223 -> 214;
224 -> 219;
224 -> 214;
225 -> 216;
225 -> 214;
226 -> 214;
227 -> 224;
227 -> 226;
228 -> 225;
228 -> 226;
229 -> 227;
229 -> 226;
230 -> 226;
231 -> 229;
231 -> 230;
232 -> 231;
232 -> 230;
233 -> 232;
234 -> 0;
234 -> 233;
235 -> 234;
236 -> 235;
237 -> 235;
238 -> 0;
238 -> 237;
239 -> 238;
239 -> 236;
239 -> 235;
240 -> 239;
240 -> 233;
241 -> 226;
242 -> 228;
242 -> 241;
242 -> 226;
243 -> 240;
243 -> 242;
244 -> 217;
244 -> 214;
245 -> 218;
245 -> 214;
246 -> 220;
246 -> 214;
247 -> 221;
247 -> 214;
248 -> 222;
248 -> 214;
249 -> 214;
250 -> 223;
250 -> 249;
251 -> 243;
251 -> 249;
252 -> 244;
252 -> 249;
253 -> 245;
253 -> 249;
254 -> 246;
254 -> 249;
255 -> 247;
255 -> 249;
256 -> 248;
256 -> 249;
257 -> 250;
257 -> 249;
258 -> 251;
258 -> 249;
259 -> 252;
259 -> 249;
260 -> 253;
260 -> 249;
261 -> 254;
261 -> 249;
262 -> 255;
262 -> 249;
263 -> 256;
263 -> 249;
264 -> 249;
265 -> 264;
265 -> 249;
266 -> 249;
267 -> 257;
267 -> 266;
268 -> 258;
268 -> 266;
269 -> 259;
269 -> 266;
270 -> 260;
270 -> 266;
271 -> 261;
271 -> 266;
272 -> 262;
272 -> 266;
273 -> 263;
273 -> 266;
274 -> 265;
274 -> 266;
275 -> 270;
275 -> 266;
276 -> 272;
276 -> 266;
277 -> 266;
278 -> 275;
278 -> 277;
279 -> 276;
279 -> 277;
280 -> 267;
280 -> 277;
281 -> 280;
281 -> 211;
281 -> 277;
282 -> 281;
283 -> 279;
283 -> 281;
284 -> 278;
284 -> 281;
285 -> 281;
286 -> 282;
286 -> 285;
287 -> 283;
287 -> 285;
288 -> 284;
288 -> 285;
289 -> 282;
289 -> 285;
290 -> 285;
291 -> 288;
291 -> 290;
291 -> 285;
292 -> 0;
293 -> 0;
295 -> 292;
295 -> 293;
295 -> 294;
296 -> 295;
297 -> 0;
298 -> 296;
298 -> 295;
298 -> 297;
299 -> 298;
300 -> 0;
301 -> 296;
301 -> 295;
301 -> 300;
302 -> 301;
303 -> 0;
304 -> 296;
304 -> 295;
304 -> 303;
305 -> 304;
306 -> 0;
307 -> 296;
307 -> 295;
307 -> 306;
308 -> 307;
309 -> 0;
310 -> 296;
310 -> 295;
310 -> 309;
311 -> 310;
312 -> 0;
313 -> 296;
313 -> 295;
313 -> 312;
314 -> 313;
315 -> 0;
316 -> 296;
316 -> 295;
316 -> 315;
317 -> 316;
318 -> 0;
319 -> 296;
319 -> 295;
319 -> 318;
320 -> 319;
321 -> 0;
322 -> 296;
322 -> 295;
322 -> 321;
323 -> 322;
324 -> 0;
325 -> 296;
325 -> 295;
325 -> 324;
326 -> 325;
327 -> 0;
328 -> 296;
328 -> 295;
328 -> 327;
329 -> 328;
330 -> 296;
333 -> 330;
333 -> 332;
334 -> 331;
334 -> 332;
335 -> 332;
336 -> 333;
336 -> 295;
336 -> 332;
337 -> 332;
338 -> 334;
338 -> 332;
339 -> 335;
339 -> 332;
340 -> 338;
340 -> 339;
340 -> 332;
341 -> 340;
341 -> 337;
341 -> 332;
342 -> 336;
342 -> 337;
342 -> 295;
342 -> 341;
342 -> 340;
342 -> 332;
343 -> 342;
344 -> 0;
345 -> 344;
347 -> 345;
347 -> 346;
348 -> 296;
348 -> 295;
348 -> 347;
349 -> 348;
350 -> 0;
351 -> 350;
352 -> 296;
352 -> 295;
352 -> 351;
353 -> 352;
354 -> 0;
355 -> 296;
355 -> 295;
355 -> 354;
356 -> 355;
357 -> 320;
359 -> 358;
360 -> 0;
361 -> 0;
362 -> 0;
364 -> 360;
364 -> 361;
364 -> 362;
364 -> 363;
365 -> 359;
366 -> 364;
366 -> 365;
366 -> 358;
367 -> 366;
371 -> 368;
371 -> 369;
371 -> 370;
372 -> 302;
372 -> 295;
372 -> 301;
372 -> 368;
372 -> 371;
373 -> 372;
374 -> 314;
375 -> 323;
376 -> 323;
377 -> 320;
378 -> 0;
379 -> 0;
381 -> 378;
381 -> 380;
382 -> 379;
382 -> 380;
383 -> 380;
384 -> 381;
384 -> 380;
385 -> 382;
385 -> 380;
386 -> 0;
386 -> 380;
387 -> 383;
387 -> 380;
388 -> 380;
389 -> 384;
389 -> 385;
389 -> 386;
389 -> 387;
389 -> 388;
389 -> 380;
390 -> 389;
391 -> 0;
392 -> 0;
394 -> 391;
394 -> 393;
395 -> 392;
395 -> 393;
396 -> 393;
397 -> 394;
397 -> 393;
398 -> 395;
398 -> 393;
399 -> 0;
399 -> 393;
400 -> 396;
400 -> 393;
401 -> 393;
402 -> 397;
402 -> 398;
402 -> 399;
402 -> 400;
402 -> 401;
402 -> 393;
403 -> 402;
405 -> 390;
405 -> 389;
405 -> 404;
406 -> 405;
408 -> 403;
408 -> 402;
408 -> 407;
409 -> 408;
410 -> 0;
411 -> 0;
413 -> 410;
413 -> 412;
414 -> 411;
414 -> 412;
415 -> 412;
416 -> 413;
416 -> 412;
417 -> 414;
417 -> 412;
418 -> 0;
418 -> 412;
419 -> 415;
419 -> 412;
420 -> 412;
421 -> 416;
421 -> 417;
421 -> 418;
421 -> 419;
421 -> 420;
421 -> 412;
422 -> 421;
423 -> 0;
424 -> 0;
426 -> 423;
426 -> 425;
427 -> 424;
427 -> 425;
428 -> 425;
429 -> 426;
429 -> 425;
430 -> 427;
430 -> 425;
431 -> 0;
431 -> 425;
432 -> 428;
432 -> 425;
433 -> 425;
434 -> 429;
434 -> 430;
434 -> 431;
434 -> 432;
434 -> 433;
434 -> 425;
435 -> 434;
436 -> 0;
437 -> 0;
439 -> 436;
439 -> 438;
440 -> 437;
440 -> 438;
441 -> 438;
442 -> 439;
442 -> 438;
443 -> 440;
443 -> 438;
444 -> 0;
444 -> 438;
445 -> 441;
445 -> 438;
446 -> 438;
447 -> 442;
447 -> 443;
447 -> 444;
447 -> 445;
447 -> 446;
447 -> 438;
448 -> 447;
449 -> 0;
450 -> 0;
452 -> 449;
452 -> 451;
453 -> 450;
453 -> 451;
454 -> 451;
455 -> 452;
455 -> 451;
456 -> 453;
456 -> 451;
457 -> 0;
457 -> 451;
458 -> 454;
458 -> 451;
459 -> 451;
460 -> 455;
460 -> 456;
460 -> 457;
460 -> 458;
460 -> 459;
460 -> 451;
461 -> 460;
462 -> 0;
463 -> 0;
465 -> 462;
465 -> 464;
466 -> 463;
466 -> 464;
467 -> 464;
468 -> 465;
468 -> 464;
469 -> 466;
469 -> 464;
470 -> 0;
470 -> 464;
471 -> 467;
471 -> 464;
472 -> 464;
473 -> 468;
473 -> 469;
473 -> 470;
473 -> 471;
473 -> 472;
473 -> 464;
474 -> 473;
475 -> 0;
476 -> 0;
478 -> 475;
478 -> 477;
479 -> 476;
479 -> 477;
480 -> 477;
481 -> 478;
481 -> 477;
482 -> 479;
482 -> 477;
483 -> 0;
483 -> 477;
484 -> 480;
484 -> 477;
485 -> 477;
486 -> 481;
486 -> 482;
486 -> 483;
486 -> 484;
486 -> 485;
486 -> 477;
487 -> 486;
489 -> 390;
489 -> 389;
489 -> 488;
490 -> 489;
492 -> 403;
492 -> 402;
492 -> 491;
493 -> 492;
495 -> 422;
495 -> 421;
495 -> 494;
496 -> 495;
498 -> 435;
498 -> 434;
498 -> 497;
499 -> 498;
500 -> 0;
501 -> 390;
501 -> 389;
501 -> 500;
501 -> 0;
502 -> 501;
503 -> 0;
504 -> 403;
504 -> 402;
504 -> 503;
504 -> 0;
505 -> 504;
506 -> 0;
507 -> 474;
507 -> 473;
507 -> 506;
507 -> 0;
508 -> 507;
509 -> 0;
510 -> 422;
510 -> 421;
510 -> 509;
510 -> 0;
511 -> 510;
512 -> 0;
513 -> 0;
513 -> 512;
514 -> 513;
515 -> 296;
515 -> 291;
516 -> 286;
516 -> 285;
517 -> 0;
517 -> 285;
518 -> 517;
518 -> 289;
518 -> 285;
519 -> 285;
520 -> 516;
520 -> 518;
520 -> 519;
520 -> 0;
520 -> 285;
521 -> 520;
521 -> 285;
522 -> 515;
522 -> 285;
523 -> 287;
523 -> 285;
524 -> 285;
525 -> 521;
525 -> 522;
525 -> 523;
525 -> 524;
525 -> 520;
525 -> 295;
525 -> 285;
526 -> 285;
527 -> 525;
527 -> 526;
528 -> 526;
529 -> 526;
530 -> 527;
530 -> 525;
530 -> 529;
530 -> 526;
531 -> 528;
531 -> 526;
532 -> 526;
533 -> 530;
533 -> 525;
533 -> 529;
533 -> 531;
533 -> 532;
533 -> 528;
533 -> 526;
534 -> 526;
535 -> 534;
535 -> 528;
535 -> 526;
536 -> 528;
536 -> 526;
537 -> 526;
538 -> 536;
538 -> 537;
538 -> 528;
538 -> 535;
538 -> 526;
539 -> 527;
539 -> 526;
540 -> 539;
540 -> 282;
540 -> 281;
541 -> 282;
541 -> 266;
542 -> 266;
543 -> 269;
543 -> 542;
543 -> 266;
544 -> 541;
544 -> 543;
545 -> 543;
546 -> 544;
546 -> 545;
546 -> 282;
546 -> 540;
546 -> 525;
546 -> 543;
547 -> 546;
547 -> 543;
548 -> 390;
548 -> 547;
549 -> 0;
549 -> 266;
550 -> 274;
550 -> 266;
551 -> 271;
551 -> 541;
551 -> 268;
551 -> 548;
551 -> 266;
552 -> 551;
552 -> 266;
553 -> 266;
554 -> 552;
554 -> 553;
555 -> 0;
555 -> 553;
556 -> 555;
557 -> 266;
558 -> 551;
558 -> 282;
558 -> 540;
558 -> 525;
558 -> 239;
558 -> 0;
558 -> 389;
558 -> 236;
558 -> 266;
559 -> 266;
560 -> 559;
561 -> 558;
561 -> 560;
561 -> 266;
562 -> 561;
562 -> 266;
563 -> 266;
564 -> 562;
564 -> 563;
565 -> 564;
565 -> 561;
565 -> 563;
566 -> 565;
566 -> 561;
566 -> 563;
567 -> 563;
568 -> 565;
568 -> 567;
568 -> 561;
568 -> 563;
569 -> 0;
569 -> 563;
570 -> 568;
570 -> 569;
570 -> 563;
571 -> 273;
571 -> 570;
571 -> 266;
572 -> 561;
572 -> 266;
573 -> 0;
573 -> 1;
574 -> 1;
575 -> 573;
575 -> 574;
576 -> 213;
576 -> 574;
577 -> 213;
577 -> 574;
578 -> 213;
578 -> 574;
579 -> 213;
579 -> 574;
580 -> 213;
580 -> 574;
581 -> 213;
581 -> 574;
582 -> 575;
582 -> 574;
583 -> 576;
583 -> 574;
584 -> 577;
584 -> 574;
585 -> 578;
585 -> 574;
586 -> 579;
586 -> 574;
587 -> 580;
587 -> 574;
588 -> 581;
588 -> 574;
589 -> 574;
590 -> 582;
590 -> 589;
591 -> 583;
591 -> 589;
592 -> 584;
592 -> 589;
593 -> 585;
593 -> 589;
594 -> 586;
594 -> 589;
595 -> 587;
595 -> 589;
596 -> 588;
596 -> 589;
597 -> 590;
597 -> 589;
598 -> 590;
598 -> 589;
599 -> 589;
600 -> 591;
600 -> 589;
601 -> 592;
601 -> 589;
602 -> 593;
602 -> 589;
603 -> 594;
603 -> 589;
604 -> 595;
604 -> 589;
606 -> 605;
608 -> 607;
609 -> 596;
609 -> 589;
610 -> 589;
611 -> 598;
611 -> 610;
612 -> 599;
612 -> 610;
613 -> 600;
613 -> 610;
614 -> 601;
614 -> 610;
615 -> 602;
615 -> 610;
616 -> 603;
616 -> 610;
617 -> 604;
617 -> 610;
618 -> 598;
618 -> 610;
619 -> 609;
619 -> 610;
620 -> 599;
620 -> 610;
621 -> 599;
621 -> 610;
622 -> 599;
622 -> 610;
623 -> 622;
623 -> 610;
624 -> 622;
624 -> 610;
625 -> 622;
625 -> 610;
626 -> 622;
626 -> 610;
627 -> 622;
627 -> 610;
628 -> 622;
628 -> 610;
629 -> 622;
629 -> 610;
630 -> 622;
630 -> 610;
631 -> 622;
631 -> 610;
632 -> 622;
632 -> 610;
633 -> 622;
633 -> 610;
634 -> 622;
634 -> 610;
635 -> 622;
635 -> 610;
636 -> 622;
636 -> 610;
637 -> 622;
637 -> 610;
638 -> 611;
638 -> 622;
638 -> 610;
639 -> 612;
639 -> 622;
639 -> 610;
640 -> 613;
640 -> 622;
640 -> 610;
641 -> 614;
641 -> 622;
641 -> 610;
642 -> 615;
642 -> 622;
642 -> 610;
643 -> 616;
643 -> 622;
643 -> 610;
644 -> 617;
644 -> 622;
644 -> 610;
645 -> 618;
645 -> 610;
646 -> 645;
646 -> 622;
646 -> 610;
647 -> 619;
647 -> 622;
647 -> 610;
648 -> 620;
648 -> 622;
648 -> 610;
649 -> 621;
649 -> 622;
649 -> 610;
650 -> 599;
650 -> 574;
651 -> 650;
651 -> 1;
652 -> 1;
653 -> 573;
653 -> 652;
654 -> 213;
654 -> 652;
655 -> 213;
655 -> 652;
656 -> 213;
656 -> 652;
657 -> 213;
657 -> 652;
658 -> 213;
658 -> 652;
659 -> 213;
659 -> 652;
660 -> 653;
660 -> 652;
661 -> 654;
661 -> 652;
662 -> 655;
662 -> 652;
663 -> 656;
663 -> 652;
664 -> 657;
664 -> 652;
665 -> 658;
665 -> 652;
666 -> 659;
666 -> 652;
667 -> 652;
668 -> 660;
668 -> 667;
669 -> 661;
669 -> 667;
670 -> 662;
670 -> 667;
671 -> 663;
671 -> 667;
672 -> 664;
672 -> 667;
673 -> 665;
673 -> 667;
674 -> 666;
674 -> 667;
675 -> 668;
675 -> 667;
676 -> 668;
676 -> 667;
677 -> 667;
678 -> 669;
678 -> 667;
679 -> 670;
679 -> 667;
680 -> 671;
680 -> 667;
681 -> 672;
681 -> 667;
682 -> 673;
682 -> 667;
683 -> 674;
683 -> 667;
684 -> 667;
685 -> 676;
685 -> 684;
686 -> 677;
686 -> 684;
687 -> 678;
687 -> 684;
688 -> 679;
688 -> 684;
689 -> 680;
689 -> 684;
690 -> 681;
690 -> 684;
691 -> 682;
691 -> 684;
692 -> 676;
692 -> 684;
693 -> 683;
693 -> 684;
694 -> 677;
694 -> 684;
695 -> 677;
695 -> 684;
696 -> 677;
696 -> 684;
697 -> 696;
697 -> 684;
698 -> 696;
698 -> 684;
699 -> 696;
699 -> 684;
700 -> 696;
700 -> 684;
701 -> 696;
701 -> 684;
702 -> 696;
702 -> 684;
703 -> 696;
703 -> 684;
704 -> 696;
704 -> 684;
705 -> 696;
705 -> 684;
706 -> 696;
706 -> 684;
707 -> 696;
707 -> 684;
708 -> 696;
708 -> 684;
709 -> 696;
709 -> 684;
710 -> 696;
710 -> 684;
711 -> 696;
711 -> 684;
712 -> 685;
712 -> 696;
712 -> 684;
713 -> 686;
713 -> 696;
713 -> 684;
714 -> 687;
714 -> 696;
714 -> 684;
715 -> 688;
715 -> 696;
715 -> 684;
716 -> 689;
716 -> 696;
716 -> 684;
717 -> 690;
717 -> 696;
717 -> 684;
718 -> 691;
718 -> 696;
718 -> 684;
719 -> 692;
719 -> 684;
720 -> 719;
720 -> 696;
720 -> 684;
721 -> 693;
721 -> 696;
721 -> 684;
722 -> 694;
722 -> 696;
722 -> 684;
723 -> 695;
723 -> 696;
723 -> 684;
724 -> 677;
724 -> 652;
725 -> 724;
725 -> 1;
726 -> 213;
726 -> 1;
727 -> 1;
728 -> 213;
728 -> 727;
729 -> 725;
729 -> 727;
730 -> 729;
730 -> 712;
730 -> 727;
731 -> 729;
731 -> 713;
731 -> 727;
732 -> 729;
732 -> 714;
732 -> 727;
733 -> 728;
733 -> 727;
734 -> 729;
734 -> 716;
734 -> 727;
735 -> 729;
735 -> 717;
735 -> 727;
736 -> 727;
737 -> 729;
737 -> 720;
737 -> 727;
738 -> 729;
738 -> 721;
738 -> 727;
739 -> 729;
739 -> 722;
739 -> 727;
740 -> 729;
740 -> 723;
740 -> 727;
741 -> 727;
742 -> 730;
742 -> 741;
743 -> 731;
743 -> 741;
744 -> 732;
744 -> 741;
745 -> 733;
745 -> 741;
746 -> 734;
746 -> 741;
747 -> 735;
747 -> 741;
748 -> 736;
748 -> 741;
749 -> 737;
749 -> 741;
750 -> 738;
750 -> 741;
751 -> 739;
751 -> 741;
752 -> 740;
752 -> 741;
753 -> 736;
753 -> 741;
754 -> 753;
754 -> 741;
755 -> 753;
755 -> 741;
756 -> 753;
756 -> 741;
757 -> 753;
757 -> 741;
758 -> 753;
758 -> 741;
759 -> 753;
759 -> 741;
760 -> 753;
760 -> 741;
761 -> 753;
761 -> 741;
762 -> 753;
762 -> 741;
763 -> 753;
763 -> 741;
764 -> 753;
764 -> 741;
765 -> 753;
765 -> 741;
766 -> 753;
766 -> 741;
767 -> 753;
767 -> 741;
768 -> 753;
768 -> 741;
769 -> 745;
769 -> 753;
769 -> 741;
770 -> 748;
770 -> 753;
770 -> 741;
771 -> 736;
771 -> 1;
772 -> 651;
772 -> 213;
772 -> 1;
773 -> 771;
773 -> 213;
773 -> 1;
774 -> 1;
775 -> 572;
775 -> 774;
776 -> 213;
776 -> 774;
777 -> 774;
778 -> 775;
778 -> 777;
778 -> 570;
778 -> 774;
779 -> 778;
779 -> 774;
780 -> 776;
780 -> 774;
781 -> 774;
782 -> 779;
782 -> 781;
783 -> 780;
783 -> 781;
784 -> 782;
784 -> 781;
785 -> 783;
785 -> 781;
786 -> 781;
787 -> 784;
787 -> 786;
788 -> 785;
788 -> 786;
789 -> 787;
789 -> 786;
790 -> 788;
790 -> 786;
791 -> 786;
792 -> 786;
793 -> 789;
793 -> 792;
794 -> 790;
794 -> 792;
795 -> 791;
795 -> 792;
796 -> 792;
797 -> 794;
797 -> 796;
797 -> 792;
798 -> 794;
798 -> 792;
799 -> 798;
799 -> 213;
799 -> 772;
799 -> 773;
799 -> 638;
799 -> 639;
799 -> 649;
799 -> 640;
799 -> 641;
799 -> 642;
799 -> 644;
799 -> 646;
799 -> 631;
799 -> 647;
799 -> 648;
799 -> 643;
799 -> 635;
799 -> 636;
799 -> 637;
799 -> 742;
799 -> 743;
799 -> 752;
799 -> 744;
799 -> 769;
799 -> 746;
799 -> 770;
799 -> 749;
799 -> 762;
799 -> 750;
799 -> 751;
799 -> 747;
799 -> 766;
799 -> 767;
799 -> 768;
799 -> 598;
799 -> 726;
799 -> 676;
799 -> 792;
800 -> 792;
801 -> 798;
801 -> 800;
801 -> 213;
801 -> 772;
801 -> 773;
801 -> 638;
801 -> 639;
801 -> 649;
801 -> 640;
801 -> 641;
801 -> 642;
801 -> 644;
801 -> 646;
801 -> 631;
801 -> 647;
801 -> 648;
801 -> 643;
801 -> 635;
801 -> 636;
801 -> 637;
801 -> 742;
801 -> 743;
801 -> 752;
801 -> 744;
801 -> 769;
801 -> 746;
801 -> 770;
801 -> 749;
801 -> 762;
801 -> 750;
801 -> 751;
801 -> 747;
801 -> 766;
801 -> 767;
801 -> 768;
801 -> 598;
801 -> 726;
801 -> 676;
801 -> 792;
802 -> 801;
802 -> 800;
803 -> 802;
803 -> 801;
803 -> 800;
804 -> 794;
804 -> 792;
805 -> 804;
805 -> 803;
805 -> 792;
806 -> 792;
807 -> 804;
807 -> 806;
807 -> 803;
807 -> 792;
808 -> 807;
808 -> 806;
809 -> 808;
809 -> 807;
809 -> 806;
810 -> 793;
810 -> 792;
811 -> 795;
811 -> 803;
811 -> 809;
811 -> 792;
812 -> 810;
812 -> 811;
812 -> 792;
813 -> 792;
814 -> 812;
814 -> 813;
815 -> 812;
815 -> 813;
816 -> 812;
816 -> 813;
817 -> 812;
817 -> 813;
818 -> 812;
818 -> 813;
819 -> 818;
819 -> 813;
820 -> 818;
820 -> 813;
821 -> 818;
821 -> 813;
822 -> 818;
822 -> 813;
823 -> 818;
823 -> 813;
824 -> 818;
824 -> 813;
825 -> 818;
825 -> 813;
826 -> 818;
826 -> 813;
827 -> 818;
827 -> 813;
828 -> 818;
828 -> 813;
829 -> 818;
829 -> 813;
830 -> 814;
830 -> 812;
830 -> 818;
830 -> 813;
831 -> 814;
831 -> 812;
831 -> 818;
831 -> 813;
832 -> 814;
832 -> 812;
832 -> 818;
832 -> 813;
833 -> 814;
833 -> 812;
833 -> 818;
833 -> 813;
834 -> 816;
834 -> 813;
835 -> 834;
836 -> 835;
836 -> 818;
836 -> 813;
837 -> 817;
837 -> 813;
838 -> 837;
839 -> 838;
839 -> 818;
839 -> 813;
840 -> 813;
841 -> 813;
842 -> 814;
842 -> 812;
842 -> 841;
842 -> 813;
843 -> 814;
843 -> 812;
843 -> 813;
844 -> 0;
844 -> 813;
845 -> 814;
845 -> 842;
846 -> 842;
847 -> 845;
847 -> 846;
847 -> 842;
848 -> 845;
848 -> 843;
848 -> 818;
848 -> 847;
849 -> 814;
849 -> 843;
849 -> 818;
849 -> 847;
850 -> 815;
850 -> 818;
850 -> 813;
851 -> 818;
851 -> 850;
851 -> 813;
852 -> 818;
852 -> 833;
852 -> 843;
852 -> 851;
853 -> 852;
854 -> 853;
854 -> 818;
854 -> 852;
855 -> 851;
856 -> 845;
856 -> 855;
856 -> 851;
857 -> 845;
857 -> 853;
857 -> 818;
857 -> 856;
858 -> 851;
859 -> 818;
859 -> 857;
859 -> 858;
859 -> 851;
860 -> 818;
860 -> 857;
860 -> 853;
860 -> 858;
860 -> 851;
861 -> 859;
862 -> 861;
862 -> 818;
862 -> 859;
863 -> 818;
863 -> 833;
863 -> 853;
863 -> 813;
864 -> 863;
864 -> 818;
864 -> 813;
865 -> 812;
865 -> 863;
865 -> 849;
865 -> 831;
865 -> 832;
865 -> 854;
865 -> 862;
865 -> 864;
865 -> 825;
865 -> 848;
865 -> 850;
865 -> 836;
865 -> 839;
865 -> 829;
865 -> 818;
865 -> 833;
865 -> 792;
866 -> 814;
866 -> 865;
866 -> 818;
866 -> 813;
867 -> 794;
867 -> 792;
868 -> 867;
868 -> 809;
868 -> 792;
869 -> 868;
870 -> 869;
870 -> 865;
870 -> 809;
870 -> 868;
871 -> 870;
871 -> 869;
872 -> 870;
872 -> 869;
873 -> 871;
873 -> 869;
874 -> 869;
875 -> 873;
875 -> 874;
875 -> 869;
876 -> 873;
876 -> 870;
876 -> 869;
877 -> 872;
877 -> 870;
877 -> 876;
877 -> 869;
878 -> 872;
878 -> 877;
878 -> 873;
878 -> 869;
879 -> 872;
879 -> 877;
879 -> 873;
879 -> 869;
880 -> 872;
880 -> 877;
880 -> 869;
881 -> 872;
881 -> 877;
881 -> 873;
881 -> 880;
882 -> 869;
883 -> 872;
883 -> 877;
883 -> 882;
883 -> 869;
884 -> 883;
885 -> 869;
886 -> 872;
886 -> 877;
886 -> 885;
886 -> 869;
887 -> 869;
888 -> 873;
888 -> 877;
888 -> 887;
888 -> 869;
889 -> 872;
889 -> 877;
889 -> 873;
889 -> 869;
890 -> 869;
891 -> 872;
891 -> 877;
891 -> 890;
891 -> 869;
892 -> 891;
893 -> 872;
893 -> 877;
893 -> 873;
893 -> 869;
894 -> 869;
895 -> 870;
895 -> 894;
895 -> 877;
895 -> 868;
896 -> 868;
897 -> 895;
897 -> 896;
897 -> 868;
898 -> 895;
898 -> 897;
899 -> 898;
900 -> 898;
901 -> 898;
902 -> 898;
903 -> 898;
903 -> 902;
904 -> 898;
905 -> 904;
906 -> 898;
907 -> 898;
908 -> 898;
909 -> 898;
910 -> 909;
911 -> 909;
912 -> 898;
912 -> 911;
913 -> 911;
914 -> 912;
914 -> 898;
914 -> 913;
914 -> 911;
915 -> 912;
915 -> 898;
915 -> 914;
916 -> 914;
917 -> 915;
917 -> 912;
917 -> 914;
918 -> 912;
918 -> 898;
918 -> 917;
918 -> 911;
919 -> 918;
919 -> 909;
920 -> 909;
921 -> 898;
921 -> 920;
922 -> 920;
923 -> 921;
923 -> 898;
923 -> 917;
923 -> 922;
923 -> 920;
924 -> 921;
924 -> 898;
924 -> 917;
924 -> 923;
924 -> 920;
925 -> 924;
925 -> 909;
926 -> 898;
926 -> 909;
927 -> 919;
927 -> 926;
928 -> 925;
928 -> 926;
929 -> 927;
929 -> 928;
929 -> 898;
929 -> 917;
929 -> 923;
929 -> 915;
929 -> 916;
929 -> 926;
930 -> 898;
930 -> 929;
931 -> 792;
932 -> 865;
932 -> 929;
932 -> 931;
932 -> 792;
933 -> 792;
934 -> 794;
934 -> 792;
935 -> 793;
935 -> 792;
936 -> 792;
937 -> 934;
937 -> 936;
938 -> 935;
938 -> 936;
939 -> 936;
940 -> 936;
941 -> 938;
941 -> 936;
942 -> 941;
942 -> 929;
942 -> 936;
943 -> 929;
943 -> 936;
944 -> 942;
944 -> 936;
945 -> 939;
945 -> 944;
946 -> 945;
946 -> 936;
947 -> 945;
947 -> 936;
948 -> 947;
948 -> 936;
949 -> 937;
949 -> 936;
950 -> 949;
950 -> 929;
950 -> 936;
951 -> 936;
952 -> 949;
952 -> 951;
952 -> 929;
952 -> 936;
953 -> 937;
953 -> 936;
954 -> 953;
954 -> 952;
954 -> 936;
955 -> 936;
956 -> 953;
956 -> 955;
956 -> 952;
956 -> 936;
957 -> 937;
957 -> 936;
958 -> 936;
959 -> 957;
959 -> 958;
961 -> 960;
962 -> 960;
963 -> 962;
963 -> 958;
964 -> 958;
965 -> 959;
965 -> 958;
966 -> 965;
966 -> 956;
966 -> 958;
967 -> 966;
968 -> 967;
969 -> 936;
970 -> 969;
970 -> 936;
971 -> 936;
972 -> 936;
973 -> 969;
973 -> 972;
973 -> 970;
973 -> 936;
974 -> 936;
975 -> 937;
975 -> 936;
976 -> 975;
976 -> 956;
976 -> 936;
977 -> 976;
978 -> 948;
978 -> 976;
979 -> 976;
980 -> 977;
980 -> 979;
981 -> 978;
981 -> 979;
982 -> 979;
983 -> 982;
983 -> 981;
983 -> 979;
984 -> 979;
985 -> 980;
985 -> 984;
986 -> 984;
987 -> 984;
988 -> 986;
988 -> 987;
988 -> 984;
989 -> 984;
990 -> 985;
990 -> 956;
990 -> 989;
990 -> 984;
991 -> 985;
991 -> 956;
991 -> 990;
992 -> 986;
992 -> 991;
992 -> 988;
992 -> 990;
993 -> 990;
994 -> 986;
994 -> 993;
994 -> 992;
994 -> 990;
995 -> 985;
995 -> 956;
995 -> 990;
996 -> 986;
996 -> 995;
996 -> 994;
996 -> 990;
997 -> 984;
998 -> 985;
998 -> 956;
998 -> 997;
998 -> 984;
999 -> 998;
1000 -> 999;
1001 -> 986;
1001 -> 1000;
1001 -> 996;
1001 -> 999;
1002 -> 985;
1002 -> 956;
1002 -> 999;
1003 -> 986;
1003 -> 1002;
1003 -> 1001;
1003 -> 999;
1004 -> 998;
1005 -> 986;
1005 -> 1004;
1005 -> 1003;
1005 -> 998;
1006 -> 985;
1006 -> 956;
1006 -> 984;
1007 -> 984;
1008 -> 986;
1008 -> 1007;
1008 -> 1005;
1008 -> 984;
1009 -> 984;
1010 -> 985;
1010 -> 956;
1010 -> 1009;
1010 -> 984;
1011 -> 984;
1012 -> 985;
1012 -> 956;
1012 -> 1011;
1012 -> 984;
1013 -> 985;
1013 -> 956;
1013 -> 984;
1014 -> 984;
1015 -> 985;
1015 -> 956;
1015 -> 1014;
1015 -> 984;
1016 -> 984;
1017 -> 985;
1017 -> 956;
1017 -> 1016;
1017 -> 984;
1018 -> 984;
1019 -> 985;
1019 -> 956;
1019 -> 1018;
1019 -> 984;
1020 -> 986;
1020 -> 1008;
1020 -> 984;
1021 -> 1020;
1021 -> 979;
1022 -> 983;
1022 -> 1021;
1022 -> 979;
1023 -> 974;
1023 -> 1022;
1023 -> 976;
1024 -> 1010;
1025 -> 986;
1025 -> 1024;
1025 -> 1008;
1025 -> 1010;
1026 -> 1010;
1027 -> 1026;
1027 -> 1010;
1028 -> 1010;
1029 -> 1027;
1029 -> 1010;
1030 -> 1029;
1031 -> 986;
1031 -> 1030;
1031 -> 1025;
1031 -> 1029;
1032 -> 1027;
1032 -> 1029;
1033 -> 986;
1033 -> 1032;
1033 -> 1031;
1033 -> 1029;
1034 -> 1029;
1035 -> 986;
1035 -> 1034;
1035 -> 1033;
1035 -> 1029;
1036 -> 1029;
1037 -> 1010;
1038 -> 986;
1038 -> 1037;
1038 -> 1035;
1038 -> 1010;
1039 -> 985;
1039 -> 1029;
1039 -> 1011;
1039 -> 984;
1040 -> 985;
1040 -> 1029;
1040 -> 984;
1041 -> 985;
1041 -> 1029;
1041 -> 1014;
1041 -> 984;
1042 -> 985;
1042 -> 1029;
1042 -> 1016;
1042 -> 984;
1043 -> 985;
1043 -> 1029;
1043 -> 1018;
1043 -> 984;
1044 -> 986;
1044 -> 1038;
1044 -> 984;
1045 -> 1044;
1045 -> 979;
1046 -> 983;
1046 -> 1045;
1046 -> 979;
1047 -> 974;
1047 -> 1046;
1047 -> 1023;
1047 -> 976;
1048 -> 969;
1048 -> 936;
1049 -> 974;
1049 -> 936;
1050 -> 936;
1051 -> 1048;
1051 -> 1050;
1052 -> 1049;
1052 -> 1050;
1053 -> 1052;
1053 -> 1047;
1053 -> 1050;
1054 -> 1050;
1055 -> 1054;
1055 -> 1053;
1055 -> 1050;
1056 -> 1052;
1056 -> 1054;
1056 -> 1047;
1056 -> 1055;
1057 -> 1051;
1057 -> 1056;
1057 -> 973;
1057 -> 1055;
1058 -> 1055;
1059 -> 1058;
1060 -> 1051;
1060 -> 1059;
1060 -> 1057;
1060 -> 1058;
1061 -> 1051;
1061 -> 1060;
1061 -> 1055;
1062 -> 936;
1063 -> 936;
1064 -> 969;
1064 -> 1063;
1064 -> 1061;
1064 -> 936;
1065 -> 936;
1066 -> 938;
1066 -> 1029;
1066 -> 936;
1067 -> 936;
1068 -> 1066;
1068 -> 936;
1069 -> 1066;
1069 -> 1068;
1070 -> 1069;
1070 -> 1068;
1071 -> 1070;
1071 -> 1068;
1072 -> 1068;
1073 -> 1068;
1074 -> 946;
1074 -> 1068;
1075 -> 969;
1075 -> 1074;
1076 -> 948;
1076 -> 1074;
1077 -> 1074;
1078 -> 1075;
1078 -> 1077;
1079 -> 1076;
1079 -> 1077;
1080 -> 1077;
1081 -> 1080;
1081 -> 1079;
1081 -> 1077;
1082 -> 1078;
1082 -> 1080;
1082 -> 1081;
1082 -> 1064;
1082 -> 1077;
1083 -> 1074;
1084 -> 1074;
1085 -> 969;
1085 -> 1084;
1085 -> 1082;
1085 -> 1074;
1086 -> 1069;
1086 -> 1070;
1086 -> 1074;
1087 -> 969;
1087 -> 1086;
1087 -> 1085;
1087 -> 1074;
1088 -> 1069;
1088 -> 1086;
1088 -> 1074;
1089 -> 1088;
1089 -> 1086;
1089 -> 1074;
1090 -> 969;
1090 -> 1089;
1091 -> 948;
1091 -> 1089;
1092 -> 1089;
1093 -> 1090;
1093 -> 1092;
1094 -> 1091;
1094 -> 1092;
1095 -> 1092;
1096 -> 1095;
1096 -> 1094;
1096 -> 1092;
1097 -> 1093;
1097 -> 1095;
1097 -> 1096;
1097 -> 1087;
1097 -> 1092;
1098 -> 1089;
1099 -> 1089;
1100 -> 969;
1100 -> 1099;
1100 -> 1097;
1100 -> 1089;
1101 -> 1089;
1102 -> 969;
1102 -> 1101;
1102 -> 1100;
1102 -> 1089;
1103 -> 1069;
1103 -> 1068;
1104 -> 1068;
1105 -> 950;
1105 -> 1068;
1106 -> 954;
1106 -> 1068;
1107 -> 1068;
1108 -> 1103;
1108 -> 1107;
1109 -> 1104;
1109 -> 1107;
1110 -> 1105;
1110 -> 1107;
1111 -> 1106;
1111 -> 1107;
1112 -> 1104;
1112 -> 1107;
1113 -> 1112;
1113 -> 1107;
1114 -> 1112;
1114 -> 1107;
1115 -> 1112;
1115 -> 1107;
1116 -> 1112;
1116 -> 1107;
1117 -> 1112;
1117 -> 1107;
1118 -> 1112;
1118 -> 1107;
1119 -> 1112;
1119 -> 1107;
1120 -> 1112;
1120 -> 1107;
1121 -> 1112;
1121 -> 1107;
1122 -> 1108;
1122 -> 1101;
1122 -> 1112;
1122 -> 1107;
1123 -> 1108;
1123 -> 1101;
1123 -> 1112;
1123 -> 1107;
1124 -> 1108;
1124 -> 1101;
1124 -> 1112;
1124 -> 1107;
1125 -> 1108;
1125 -> 1101;
1125 -> 1112;
1125 -> 1107;
1126 -> 1107;
1127 -> 1108;
1127 -> 1101;
1127 -> 1107;
1128 -> 1104;
1128 -> 1068;
1129 -> 937;
1129 -> 1068;
1130 -> 1104;
1130 -> 1068;
1131 -> 1129;
1131 -> 1130;
1131 -> 1125;
1131 -> 1127;
1131 -> 1123;
1131 -> 1124;
1131 -> 1112;
1131 -> 1109;
1131 -> 1110;
1131 -> 1111;
1131 -> 1068;
1132 -> 1068;
1133 -> 1132;
1134 -> 1131;
1134 -> 1133;
1134 -> 1132;
1135 -> 1131;
1135 -> 1132;
1136 -> 1131;
1136 -> 1132;
1137 -> 1131;
1137 -> 1132;
1138 -> 1131;
1138 -> 1137;
1139 -> 1132;
1140 -> 1131;
1140 -> 1139;
1140 -> 1132;
1141 -> 1132;
1142 -> 1131;
1142 -> 1141;
1142 -> 1132;
1143 -> 1132;
1144 -> 1131;
1144 -> 1143;
1144 -> 1132;
1145 -> 1131;
1145 -> 1132;
1146 -> 1131;
1147 -> 1131;
1147 -> 1132;
1148 -> 1068;
1149 -> 1131;
1149 -> 1148;
1149 -> 1068;
1150 -> 937;
1150 -> 1131;
1150 -> 1149;
1151 -> 1104;
1151 -> 1068;
1152 -> 948;
1152 -> 1068;
1153 -> 1068;
1154 -> 1151;
1154 -> 1153;
1155 -> 1152;
1155 -> 1153;
1156 -> 1153;
1157 -> 1156;
1157 -> 1155;
1157 -> 1153;
1158 -> 1153;
1159 -> 1153;
1160 -> 1158;
1160 -> 1159;
1160 -> 1153;
1161 -> 1153;
1162 -> 1154;
1162 -> 1131;
1162 -> 1161;
1162 -> 1153;
1163 -> 1154;
1163 -> 1131;
1163 -> 1162;
1164 -> 1158;
1164 -> 1163;
1164 -> 1160;
1164 -> 1162;
1165 -> 1162;
1166 -> 1158;
1166 -> 1165;
1166 -> 1164;
1166 -> 1162;
1167 -> 1154;
1167 -> 1131;
1167 -> 1162;
1168 -> 1158;
1168 -> 1167;
1168 -> 1166;
1168 -> 1162;
1169 -> 1153;
1170 -> 1154;
1170 -> 1131;
1170 -> 1169;
1170 -> 1153;
1171 -> 1170;
1172 -> 1171;
1173 -> 1158;
1173 -> 1172;
1173 -> 1168;
1173 -> 1171;
1174 -> 1154;
1174 -> 1131;
1174 -> 1171;
1175 -> 1158;
1175 -> 1174;
1175 -> 1173;
1175 -> 1171;
1176 -> 1170;
1177 -> 1158;
1177 -> 1176;
1177 -> 1175;
1177 -> 1170;
1178 -> 1154;
1178 -> 1131;
1178 -> 1153;
1179 -> 1153;
1180 -> 1158;
1180 -> 1179;
1180 -> 1177;
1180 -> 1153;
1181 -> 1154;
1181 -> 1131;
1181 -> 1153;
1182 -> 1153;
1183 -> 1154;
1183 -> 1131;
1183 -> 1182;
1183 -> 1153;
1184 -> 1183;
1185 -> 1158;
1185 -> 1184;
1185 -> 1180;
1185 -> 1183;
1186 -> 1183;
1187 -> 1158;
1187 -> 1186;
1187 -> 1185;
1187 -> 1183;
1188 -> 1183;
1189 -> 1158;
1189 -> 1188;
1189 -> 1187;
1189 -> 1183;
1190 -> 1183;
1191 -> 1158;
1191 -> 1190;
1191 -> 1189;
1191 -> 1183;
1192 -> 1183;
1193 -> 1158;
1193 -> 1192;
1193 -> 1191;
1193 -> 1183;
1194 -> 1154;
1194 -> 1131;
1194 -> 1153;
1195 -> 1153;
1196 -> 1154;
1196 -> 1131;
1196 -> 1195;
1196 -> 1153;
1197 -> 1153;
1198 -> 1154;
1198 -> 1131;
1198 -> 1197;
1198 -> 1153;
1199 -> 1153;
1200 -> 1154;
1200 -> 1131;
1200 -> 1199;
1200 -> 1153;
1201 -> 1158;
1201 -> 1193;
1201 -> 1153;
1202 -> 1201;
1202 -> 1153;
1203 -> 1157;
1203 -> 1202;
1203 -> 1153;
1204 -> 969;
1204 -> 1203;
1204 -> 1102;
1204 -> 1068;
1205 -> 1150;
1205 -> 1068;
1206 -> 948;
1206 -> 1068;
1207 -> 1068;
1208 -> 1205;
1208 -> 1207;
1209 -> 1206;
1209 -> 1207;
1210 -> 1207;
1211 -> 1210;
1211 -> 1209;
1211 -> 1207;
1212 -> 1207;
1213 -> 1207;
1214 -> 1212;
1214 -> 1213;
1214 -> 1207;
1215 -> 1207;
1216 -> 1208;
1216 -> 1131;
1216 -> 1215;
1216 -> 1207;
1217 -> 1208;
1217 -> 1131;
1217 -> 1216;
1218 -> 1212;
1218 -> 1217;
1218 -> 1214;
1218 -> 1216;
1219 -> 1216;
1220 -> 1212;
1220 -> 1219;
1220 -> 1218;
1220 -> 1216;
1221 -> 1208;
1221 -> 1131;
1221 -> 1216;
1222 -> 1212;
1222 -> 1221;
1222 -> 1220;
1222 -> 1216;
1223 -> 1207;
1224 -> 1208;
1224 -> 1131;
1224 -> 1223;
1224 -> 1207;
1225 -> 1224;
1226 -> 1225;
1227 -> 1212;
1227 -> 1226;
1227 -> 1222;
1227 -> 1225;
1228 -> 1208;
1228 -> 1131;
1228 -> 1225;
1229 -> 1212;
1229 -> 1228;
1229 -> 1227;
1229 -> 1225;
1230 -> 1224;
1231 -> 1212;
1231 -> 1230;
1231 -> 1229;
1231 -> 1224;
1232 -> 1208;
1232 -> 1131;
1232 -> 1207;
1233 -> 1207;
1234 -> 1212;
1234 -> 1233;
1234 -> 1231;
1234 -> 1207;
1235 -> 1207;
1236 -> 1208;
1236 -> 1131;
1236 -> 1235;
1236 -> 1207;
1237 -> 1208;
1237 -> 1131;
1237 -> 1207;
1238 -> 1207;
1239 -> 1208;
1239 -> 1131;
1239 -> 1238;
1239 -> 1207;
1240 -> 1207;
1241 -> 1208;
1241 -> 1131;
1241 -> 1240;
1241 -> 1207;
1242 -> 1207;
1243 -> 1208;
1243 -> 1131;
1243 -> 1242;
1243 -> 1207;
1244 -> 1212;
1244 -> 1234;
1244 -> 1207;
1245 -> 1244;
1245 -> 1207;
1246 -> 1211;
1246 -> 1245;
1246 -> 1207;
1247 -> 1065;
1247 -> 1246;
1247 -> 1068;
1248 -> 1131;
1249 -> 1131;
1250 -> 1249;
1251 -> 969;
1251 -> 1250;
1251 -> 1204;
1251 -> 1249;
1252 -> 969;
1252 -> 1131;
1253 -> 948;
1253 -> 1131;
1254 -> 1131;
1255 -> 1252;
1255 -> 1254;
1256 -> 1253;
1256 -> 1254;
1257 -> 1254;
1258 -> 1257;
1258 -> 1256;
1258 -> 1254;
1259 -> 1131;
1260 -> 1131;
1261 -> 969;
1261 -> 1131;
1262 -> 948;
1262 -> 1131;
1263 -> 1131;
1264 -> 1261;
1264 -> 1263;
1265 -> 1262;
1265 -> 1263;
1266 -> 1263;
1267 -> 1266;
1267 -> 1265;
1267 -> 1263;
1268 -> 1131;
1269 -> 1131;
1270 -> 1131;
1271 -> 1131;
1272 -> 1131;
1273 -> 1131;
1274 -> 1131;
1275 -> 1131;
1276 -> 1131;
1277 -> 1131;
1278 -> 1131;
1279 -> 1131;
1280 -> 1131;
1281 -> 1131;
1282 -> 1131;
1283 -> 1131;
1284 -> 1283;
1285 -> 1283;
1286 -> 1283;
1287 -> 1283;
1288 -> 1283;
1288 -> 1287;
1289 -> 1283;
1290 -> 1283;
1291 -> 1283;
1292 -> 1283;
1293 -> 1283;
1294 -> 1283;
1295 -> 1131;
1296 -> 1283;
1296 -> 1295;
1296 -> 1131;
1297 -> 937;
1297 -> 1283;
1297 -> 1296;
1298 -> 1131;
1299 -> 948;
1299 -> 1131;
1300 -> 1131;
1301 -> 1298;
1301 -> 1300;
1302 -> 1299;
1302 -> 1300;
1303 -> 1300;
1304 -> 1303;
1304 -> 1302;
1304 -> 1300;
1305 -> 1300;
1306 -> 1300;
1307 -> 1305;
1307 -> 1306;
1307 -> 1300;
1308 -> 1300;
1309 -> 1301;
1309 -> 1283;
1309 -> 1308;
1309 -> 1300;
1310 -> 1301;
1310 -> 1283;
1310 -> 1309;
1311 -> 1305;
1311 -> 1310;
1311 -> 1307;
1311 -> 1309;
1312 -> 1309;
1313 -> 1305;
1313 -> 1312;
1313 -> 1311;
1313 -> 1309;
1314 -> 1301;
1314 -> 1283;
1314 -> 1309;
1315 -> 1305;
1315 -> 1314;
1315 -> 1313;
1315 -> 1309;
1316 -> 1300;
1317 -> 1301;
1317 -> 1283;
1317 -> 1316;
1317 -> 1300;
1318 -> 1317;
1319 -> 1318;
1320 -> 1305;
1320 -> 1319;
1320 -> 1315;
1320 -> 1318;
1321 -> 1301;
1321 -> 1283;
1321 -> 1318;
1322 -> 1305;
1322 -> 1321;
1322 -> 1320;
1322 -> 1318;
1323 -> 1317;
1324 -> 1305;
1324 -> 1323;
1324 -> 1322;
1324 -> 1317;
1325 -> 1301;
1325 -> 1283;
1325 -> 1300;
1326 -> 1300;
1327 -> 1305;
1327 -> 1326;
1327 -> 1324;
1327 -> 1300;
1328 -> 1301;
1328 -> 1283;
1328 -> 1300;
1329 -> 1328;
1330 -> 1305;
1330 -> 1329;
1330 -> 1327;
1330 -> 1328;
1331 -> 1328;
1332 -> 1305;
1332 -> 1331;
1332 -> 1330;
1332 -> 1328;
1333 -> 1328;
1334 -> 1305;
1334 -> 1333;
1334 -> 1332;
1334 -> 1328;
1335 -> 1328;
1336 -> 1305;
1336 -> 1335;
1336 -> 1334;
1336 -> 1328;
1337 -> 1328;
1338 -> 1328;
1339 -> 1305;
1339 -> 1338;
1339 -> 1336;
1339 -> 1328;
1340 -> 1300;
1341 -> 1301;
1341 -> 1328;
1341 -> 1340;
1341 -> 1300;
1342 -> 1341;
1343 -> 1305;
1343 -> 1342;
1343 -> 1339;
1343 -> 1341;
1344 -> 1341;
1345 -> 1305;
1345 -> 1344;
1345 -> 1343;
1345 -> 1341;
1346 -> 1341;
1347 -> 1305;
1347 -> 1346;
1347 -> 1345;
1347 -> 1341;
1348 -> 1341;
1349 -> 1305;
1349 -> 1348;
1349 -> 1347;
1349 -> 1341;
1350 -> 1341;
1351 -> 1305;
1351 -> 1350;
1351 -> 1349;
1351 -> 1341;
1352 -> 1301;
1352 -> 1328;
1352 -> 1300;
1353 -> 1300;
1354 -> 1301;
1354 -> 1328;
1354 -> 1353;
1354 -> 1300;
1355 -> 1300;
1356 -> 1301;
1356 -> 1328;
1356 -> 1355;
1356 -> 1300;
1357 -> 1300;
1358 -> 1301;
1358 -> 1328;
1358 -> 1357;
1358 -> 1300;
1359 -> 1305;
1359 -> 1351;
1359 -> 1300;
1360 -> 1359;
1360 -> 1300;
1361 -> 1304;
1361 -> 1360;
1361 -> 1300;
1362 -> 969;
1362 -> 1361;
1362 -> 1251;
1362 -> 1131;
1363 -> 1297;
1363 -> 1131;
1364 -> 948;
1364 -> 1131;
1365 -> 1131;
1366 -> 1363;
1366 -> 1365;
1367 -> 1364;
1367 -> 1365;
1368 -> 1365;
1369 -> 1368;
1369 -> 1367;
1369 -> 1365;
1370 -> 1365;
1371 -> 1365;
1372 -> 1370;
1372 -> 1371;
1372 -> 1365;
1373 -> 1365;
1374 -> 1366;
1374 -> 1328;
1374 -> 1373;
1374 -> 1365;
1375 -> 1366;
1375 -> 1328;
1375 -> 1374;
1376 -> 1370;
1376 -> 1375;
1376 -> 1372;
1376 -> 1374;
1377 -> 1374;
1378 -> 1370;
1378 -> 1377;
1378 -> 1376;
1378 -> 1374;
1379 -> 1366;
1379 -> 1328;
1379 -> 1374;
1380 -> 1370;
1380 -> 1379;
1380 -> 1378;
1380 -> 1374;
1381 -> 1365;
1382 -> 1366;
1382 -> 1328;
1382 -> 1381;
1382 -> 1365;
1383 -> 1382;
1384 -> 1383;
1385 -> 1370;
1385 -> 1384;
1385 -> 1380;
1385 -> 1383;
1386 -> 1366;
1386 -> 1328;
1386 -> 1383;
1387 -> 1370;
1387 -> 1386;
1387 -> 1385;
1387 -> 1383;
1388 -> 1382;
1389 -> 1370;
1389 -> 1388;
1389 -> 1387;
1389 -> 1382;
1390 -> 1366;
1390 -> 1328;
1390 -> 1365;
1391 -> 1365;
1392 -> 1370;
1392 -> 1391;
1392 -> 1389;
1392 -> 1365;
1393 -> 1366;
1393 -> 1328;
1393 -> 1365;
1394 -> 1393;
1395 -> 1370;
1395 -> 1394;
1395 -> 1392;
1395 -> 1393;
1396 -> 1393;
1397 -> 1370;
1397 -> 1396;
1397 -> 1395;
1397 -> 1393;
1398 -> 1393;
1399 -> 1370;
1399 -> 1398;
1399 -> 1397;
1399 -> 1393;
1400 -> 1393;
1401 -> 1370;
1401 -> 1400;
1401 -> 1399;
1401 -> 1393;
1402 -> 1393;
1403 -> 1393;
1404 -> 1370;
1404 -> 1403;
1404 -> 1401;
1404 -> 1393;
1405 -> 1365;
1406 -> 1366;
1406 -> 1393;
1406 -> 1405;
1406 -> 1365;
1407 -> 1366;
1407 -> 1393;
1407 -> 1365;
1408 -> 1365;
1409 -> 1366;
1409 -> 1393;
1409 -> 1408;
1409 -> 1365;
1410 -> 1365;
1411 -> 1366;
1411 -> 1393;
1411 -> 1410;
1411 -> 1365;
1412 -> 1365;
1413 -> 1366;
1413 -> 1393;
1413 -> 1412;
1413 -> 1365;
1414 -> 1370;
1414 -> 1404;
1414 -> 1365;
1415 -> 1414;
1415 -> 1365;
1416 -> 1369;
1416 -> 1415;
1416 -> 1365;
1417 -> 1065;
1417 -> 1416;
1417 -> 1247;
1417 -> 1131;
1418 -> 936;
1419 -> 1131;
1419 -> 1418;
1419 -> 936;
1420 -> 969;
1420 -> 1362;
1420 -> 1419;
1421 -> 936;
1422 -> 969;
1422 -> 1421;
1422 -> 1420;
1422 -> 936;
1423 -> 974;
1423 -> 936;
1424 -> 1065;
1424 -> 936;
1428 -> 1426;
1428 -> 1425;
1429 -> 1427;
1429 -> 1425;
1430 -> 1425;
1431 -> 0;
1431 -> 936;
1432 -> 936;
1433 -> 936;
1434 -> 1423;
1434 -> 1433;
1435 -> 1424;
1435 -> 1433;
1436 -> 1431;
1436 -> 1433;
1437 -> 1432;
1437 -> 1433;
1438 -> 1432;
1438 -> 1433;
1439 -> 1433;
1440 -> 1437;
1440 -> 1439;
1440 -> 1433;
1441 -> 1440;
1441 -> 1433;
1442 -> 0;
1444 -> 1442;
1444 -> 1443;
1445 -> 1443;
1447 -> 1446;
1449 -> 1448;
1451 -> 1450;
1452 -> 1445;
1453 -> 1445;
1453 -> 1443;
1454 -> 1444;
1454 -> 1445;
1454 -> 1443;
1455 -> 1443;
1456 -> 1433;
1457 -> 1456;
1457 -> 1438;
1457 -> 1433;
1458 -> 1434;
1458 -> 1433;
1459 -> 1435;
1459 -> 1433;
1460 -> 1436;
1460 -> 1433;
1461 -> 1458;
1461 -> 1433;
1462 -> 1459;
1462 -> 1433;
1463 -> 1457;
1463 -> 1433;
1464 -> 1433;
1465 -> 1461;
1465 -> 1464;
1466 -> 1462;
1466 -> 1464;
1467 -> 1463;
1467 -> 1464;
1468 -> 1441;
1468 -> 1464;
1469 -> 1465;
1469 -> 1464;
1470 -> 1465;
1470 -> 1458;
1470 -> 1464;
1471 -> 1466;
1471 -> 1464;
1472 -> 1466;
1472 -> 1459;
1472 -> 1464;
1473 -> 1464;
1474 -> 1469;
1474 -> 1473;
1475 -> 1470;
1475 -> 1473;
1476 -> 1471;
1476 -> 1473;
1477 -> 1472;
1477 -> 1473;
1478 -> 1468;
1478 -> 1473;
1479 -> 1474;
1479 -> 1473;
1480 -> 1475;
1480 -> 1473;
1481 -> 1476;
1481 -> 1473;
1482 -> 1477;
1482 -> 1473;
1483 -> 1473;
1484 -> 1479;
1484 -> 1483;
1485 -> 1480;
1485 -> 1483;
1486 -> 1481;
1486 -> 1483;
1487 -> 1482;
1487 -> 1483;
1488 -> 1478;
1488 -> 1483;
1489 -> 1483;
1490 -> 1485;
1490 -> 1489;
1490 -> 1483;
1491 -> 1483;
1492 -> 1487;
1492 -> 1491;
1492 -> 1483;
1493 -> 1490;
1493 -> 1492;
1493 -> 1483;
1494 -> 1483;
1495 -> 1494;
1495 -> 1493;
1495 -> 1483;
1496 -> 1483;
1497 -> 1496;
1497 -> 1485;
1497 -> 1483;
1498 -> 1497;
1499 -> 1493;
1499 -> 1495;
1499 -> 1498;
1499 -> 1497;
1500 -> 1499;
1500 -> 1496;
1500 -> 1498;
1500 -> 1493;
1500 -> 1497;
1501 -> 1483;
1502 -> 1501;
1502 -> 1487;
1502 -> 1483;
1503 -> 1502;
1504 -> 1493;
1504 -> 1495;
1504 -> 1500;
1504 -> 1503;
1504 -> 1502;
1505 -> 1504;
1505 -> 1503;
1505 -> 1501;
1505 -> 1493;
1505 -> 1502;
1506 -> 1483;
1507 -> 1506;
1507 -> 1485;
1507 -> 1483;
1508 -> 1507;
1509 -> 1508;
1509 -> 1487;
1509 -> 1507;
1510 -> 1509;
1511 -> 1493;
1511 -> 1495;
1511 -> 1500;
1511 -> 1505;
1511 -> 1510;
1511 -> 1509;
1512 -> 1484;
1512 -> 1509;
1513 -> 1486;
1513 -> 1509;
1514 -> 1509;
1515 -> 1512;
1515 -> 1514;
1516 -> 1510;
1516 -> 1514;
1517 -> 1513;
1517 -> 1514;
1518 -> 1510;
1518 -> 1514;
1519 -> 1488;
1519 -> 1514;
1520 -> 1515;
1520 -> 1458;
1520 -> 1516;
1520 -> 1514;
1521 -> 1517;
1521 -> 1459;
1521 -> 1518;
1521 -> 1514;
1522 -> 1519;
1522 -> 0;
1522 -> 1520;
1522 -> 1521;
1522 -> 1458;
1522 -> 1459;
1522 -> 1514;
1523 -> 1511;
1523 -> 1522;
1523 -> 1509;
1524 -> 1509;
1525 -> 1493;
1525 -> 1495;
1525 -> 1500;
1525 -> 1505;
1525 -> 1524;
1525 -> 1508;
1525 -> 1509;
1526 -> 1509;
1527 -> 1493;
1527 -> 1495;
1527 -> 1500;
1527 -> 1505;
1527 -> 1506;
1527 -> 1526;
1527 -> 1509;
1528 -> 1523;
1528 -> 1509;
1529 -> 1525;
1529 -> 1509;
1530 -> 1528;
1530 -> 1529;
1530 -> 1509;
1531 -> 1527;
1531 -> 1509;
1532 -> 1530;
1532 -> 1531;
1532 -> 1509;
1533 -> 1532;
1533 -> 1506;
1533 -> 1508;
1533 -> 1493;
1533 -> 1509;
1534 -> 1493;
1534 -> 1483;
1535 -> 1475;
1535 -> 1473;
1536 -> 1477;
1536 -> 1473;
1537 -> 1473;
1538 -> 1535;
1538 -> 1537;
1538 -> 1473;
1539 -> 1536;
1539 -> 1537;
1539 -> 1473;
1540 -> 1538;
1540 -> 1539;
1540 -> 1473;
1541 -> 1534;
1541 -> 1493;
1541 -> 1495;
1541 -> 1500;
1541 -> 1505;
1541 -> 1533;
1541 -> 1535;
1541 -> 1536;
1541 -> 1540;
1542 -> 1540;
1543 -> 1534;
1543 -> 1493;
1543 -> 1495;
1543 -> 1500;
1543 -> 1505;
1543 -> 1533;
1543 -> 1542;
1543 -> 1536;
1543 -> 1540;
1544 -> 1534;
1544 -> 1493;
1544 -> 1495;
1544 -> 1500;
1544 -> 1505;
1544 -> 1533;
1544 -> 1535;
1544 -> 1536;
1544 -> 1543;
1545 -> 1543;
1546 -> 1535;
1546 -> 1545;
1547 -> 1536;
1547 -> 1545;
1548 -> 1545;
1549 -> 0;
1549 -> 1545;
1550 -> 1546;
1550 -> 1545;
1551 -> 1547;
1551 -> 1545;
1552 -> 1545;
1553 -> 1549;
1553 -> 1552;
1554 -> 1550;
1554 -> 1552;
1555 -> 1551;
1555 -> 1552;
1556 -> 1548;
1556 -> 1552;
1557 -> 1553;
1557 -> 1556;
1557 -> 1552;
1558 -> 1554;
1558 -> 1556;
1558 -> 1552;
1559 -> 1555;
1559 -> 1556;
1559 -> 1552;
1560 -> 1546;
1560 -> 1547;
1560 -> 1473;
1561 -> 0;
1561 -> 1560;
1562 -> 1560;
1563 -> 1560;
1564 -> 1561;
1564 -> 1563;
1565 -> 1562;
1565 -> 1563;
1566 -> 1562;
1566 -> 1563;
1567 -> 1562;
1567 -> 1563;
1568 -> 1564;
1568 -> 1567;
1568 -> 1563;
1569 -> 1565;
1569 -> 1567;
1569 -> 1563;
1570 -> 1566;
1570 -> 1567;
1570 -> 1563;
1571 -> 1473;
1572 -> 1560;
1572 -> 1571;
1572 -> 1473;
1573 -> 1473;
1574 -> 1560;
1574 -> 1573;
1574 -> 1473;
1575 -> 1548;
1575 -> 1562;
1575 -> 1557;
1575 -> 1558;
1575 -> 1559;
1575 -> 1568;
1575 -> 1569;
1575 -> 1570;
1575 -> 1464;
1576 -> 1575;
1577 -> 1576;
1578 -> 1466;
1578 -> 1459;
1578 -> 1522;
1578 -> 1575;
1578 -> 1576;
1579 -> 1467;
1579 -> 1578;
1579 -> 1456;
1579 -> 1576;
1580 -> 1460;
1580 -> 1577;
1580 -> 1433;
1581 -> 969;
1581 -> 1580;
1581 -> 1422;
1581 -> 936;
1582 -> 1065;
1582 -> 1417;
1582 -> 936;
1583 -> 974;
1583 -> 1056;
1583 -> 936;
1584 -> 969;
1584 -> 1581;
1584 -> 936;
1585 -> 781;
1586 -> 774;
1587 -> 775;
1587 -> 774;
1588 -> 778;
1588 -> 774;
1589 -> 774;
1590 -> 1587;
1590 -> 1589;
1591 -> 1588;
1591 -> 1589;
1592 -> 1591;
1592 -> 1589;
1593 -> 1592;
1593 -> 778;
1593 -> 1393;
1594 -> 1590;
1594 -> 1593;
1594 -> 1393;
1594 -> 1592;
1595 -> 1592;
1595 -> 1594;
1596 -> 1595;
1596 -> 1594;
1597 -> 1595;
1598 -> 774;
1599 -> 775;
1599 -> 774;
}