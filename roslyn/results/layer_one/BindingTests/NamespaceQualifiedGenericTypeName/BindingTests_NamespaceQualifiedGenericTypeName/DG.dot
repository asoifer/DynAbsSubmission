digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 695050"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 695051"];
3 [label="param BindingTests(this) 695052"];
4 [label="'C' 695053"];
5 [label="DefaultTypeName = 'C' 695054"];
6 [label="'M' 695055"];
7 [label="DefaultMethodName = 'M' 695056"];
8 [label="@'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 695057"];
9 [label="LINQ =\n        #region the string LINQ defines a complete LINQ API called List1<T> (for instance method) and List2<T> (for extension methods)\n @'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 695058"];
10 [label="param CompilingTestBase(this) 695059"];
11 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 695060"];
12 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 695061"];
13 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 695062"];
14 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 695063"];
15 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 695064"];
16 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 695065"];
17 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 695066"];
18 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 695067"];
19 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 695068"];
20 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 695069"];
21 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 695070"];
22 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 695071"];
23 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 695072"];
24 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 695073"];
25 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 695074"];
26 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 695075"];
27 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 695076"];
28 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 695077"];
29 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 695078"];
30 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 695079"];
31 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 695080"];
32 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 695081"];
33 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 695082"];
34 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 695083"];
35 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 695084"];
36 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 695085"];
37 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 695086"];
38 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 695087"];
39 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 695088"];
40 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 695089"];
41 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 695090"];
42 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 695091"];
43 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 695092"];
44 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 695093"];
45 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 695094"];
46 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 695095"];
47 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 695096"];
48 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 695097"];
49 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 695098"];
50 [label="LazyThreadSafetyMode.PublicationOnly 695099"];
51 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 695100"];
52 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 695101"];
53 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 695102"];
54 [label="LazyThreadSafetyMode.PublicationOnly 695103"];
55 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 695104"];
56 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 695105"];
57 [label="RuntimeUtilities.IsCoreClrRuntime 695106"];
58 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 695107"];
59 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 695108"];
60 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 695109"];
61 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 695110"];
62 [label="LazyThreadSafetyMode.PublicationOnly 695111"];
63 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 695112"];
64 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 695113"];
65 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 695114"];
66 [label="LazyThreadSafetyMode.PublicationOnly 695115"];
67 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 695116"];
68 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 695117"];
69 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 695118"];
70 [label="LazyThreadSafetyMode.PublicationOnly 695119"];
71 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 695120"];
72 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 695121"];
73 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 695122"];
74 [label="LazyThreadSafetyMode.PublicationOnly 695123"];
75 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695124"];
76 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695125"];
77 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 695126"];
78 [label="LazyThreadSafetyMode.PublicationOnly 695127"];
79 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695128"];
80 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695129"];
81 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 695130"];
82 [label="LazyThreadSafetyMode.PublicationOnly 695131"];
83 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695132"];
84 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695133"];
85 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 695134"];
86 [label="LazyThreadSafetyMode.PublicationOnly 695135"];
87 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695136"];
88 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695137"];
89 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 695138"];
90 [label="LazyThreadSafetyMode.PublicationOnly 695139"];
91 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695140"];
92 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695141"];
93 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 695142"];
94 [label="LazyThreadSafetyMode.PublicationOnly 695143"];
95 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695144"];
96 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695145"];
97 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 695146"];
98 [label="LazyThreadSafetyMode.PublicationOnly 695147"];
99 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695148"];
100 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695149"];
101 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 695150"];
102 [label="LazyThreadSafetyMode.PublicationOnly 695151"];
103 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 695152"];
104 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 695153"];
105 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 695154"];
106 [label="LazyThreadSafetyMode.PublicationOnly 695155"];
107 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 695156"];
108 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 695157"];
109 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 695158"];
110 [label="LazyThreadSafetyMode.PublicationOnly 695159"];
111 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695160"];
112 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695161"];
113 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 695162"];
114 [label="LazyThreadSafetyMode.PublicationOnly 695163"];
115 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695164"];
116 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695165"];
117 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 695166"];
118 [label="LazyThreadSafetyMode.PublicationOnly 695167"];
119 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695168"];
120 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695169"];
121 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 695170"];
122 [label="LazyThreadSafetyMode.PublicationOnly 695171"];
123 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695172"];
124 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695173"];
125 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 695174"];
126 [label="LazyThreadSafetyMode.PublicationOnly 695175"];
127 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 695176"];
128 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 695177"];
129 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 695178"];
130 [label="LazyThreadSafetyMode.PublicationOnly 695179"];
131 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695180"];
132 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695181"];
133 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 695182"];
134 [label="LazyThreadSafetyMode.PublicationOnly 695183"];
135 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695184"];
136 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695185"];
137 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 695186"];
138 [label="LazyThreadSafetyMode.PublicationOnly 695187"];
139 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695188"];
140 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695189"];
141 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 695190"];
142 [label="LazyThreadSafetyMode.PublicationOnly 695191"];
143 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695192"];
144 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695193"];
145 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 695194"];
146 [label="LazyThreadSafetyMode.PublicationOnly 695195"];
147 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695196"];
148 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695197"];
149 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 695198"];
150 [label="LazyThreadSafetyMode.PublicationOnly 695199"];
151 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695200"];
152 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695201"];
153 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 695202"];
154 [label="LazyThreadSafetyMode.PublicationOnly 695203"];
155 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695204"];
156 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695205"];
157 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 695206"];
158 [label="LazyThreadSafetyMode.PublicationOnly 695207"];
159 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695208"];
160 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695209"];
161 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 695210"];
162 [label="LazyThreadSafetyMode.PublicationOnly 695211"];
163 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695212"];
164 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695213"];
165 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 695214"];
166 [label="LazyThreadSafetyMode.PublicationOnly 695215"];
167 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695216"];
168 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695217"];
169 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 695218"];
170 [label="LazyThreadSafetyMode.PublicationOnly 695219"];
171 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695220"];
172 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695221"];
173 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 695222"];
174 [label="LazyThreadSafetyMode.PublicationOnly 695223"];
175 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695224"];
176 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695225"];
177 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 695226"];
178 [label="LazyThreadSafetyMode.PublicationOnly 695227"];
179 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695228"];
180 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 695229"];
181 [label="@'R:\\Invalid.dll' 695230"];
182 [label="fullPath: @'R:\\Invalid.dll' 695231"];
183 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 695232"];
184 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 695233"];
185 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 695234"];
186 [label="MscorlibRef_v4_0_30316_17626 695235"];
187 [label="Net451.mscorlib 695236"];
188 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 695237"];
189 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 695238"];
190 [label="'/*<bind>*/' 695239"];
191 [label="StartString = '/*<bind>*/' 695240"];
192 [label="'/*</bind>*/' 695241"];
193 [label="EndString = '/*</bind>*/' 695242"];
194 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 695243"];
195 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 695244"];
196 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 695245"];
197 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 695246"];
198 [label="param CSharpTestBase(this) 695247"];
199 [label="param CommonTestBase(this) 695248"];
200 [label="param TestBase(this) 695249"];
201 [label="_temp 695250"];
202 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 695251"];
203 [label="param NamespaceQualifiedGenericTypeName(this) 695252"];
204 [label="var source =\n@'namespace N\n{\n    public class A<T>\n    {\n        public static T F;\n    }\n}\nclass B\n{\n    static int G = N.A<int>.F;\n}'; 695253"];
205 [label="CreateCompilation(source).VerifyDiagnostics(); 695254"];
206 [label="source 695255"];
207 [label="param operator(string source) 695256"];
208 [label="source 695257"];
209 [label="new CSharpTestSource(source) 695258"];
210 [label="param CSharpTestSource(object value) 695259"];
211 [label="param CSharpTestSource(this) 695260"];
212 [label="Value 695261"];
213 [label="CreateCompilation(source).VerifyDiagnostics(); 695262"];
214 [label="CreateCompilation(source).VerifyDiagnostics(); 695263"];
215 [label="CreateCompilation(source) 695264"];
216 [label="param CreateCompilation(CSharpTestSource source) 695265"];
217 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 695266"];
218 [label="param CreateCompilation(CSharpCompilationOptions options = null) 695267"];
219 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 695268"];
220 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 695269"];
221 [label="param CreateCompilation(string assemblyName = '') 695270"];
222 [label="param CreateCompilation(string sourceFileName = '') 695271"];
223 [label="param CreateCompilation(bool skipUsesIsNullable = false) 695272"];
224 [label="source 695273"];
225 [label="targetFramework 695274"];
226 [label="references 695275"];
227 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 695276"];
228 [label="param GetReferences(TargetFramework tf) 695277"];
229 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 695278"];
230 [label="var references = GetReferences(tf); 695279"];
231 [label="GetReferences(tf) 695280"];
232 [label="param GetReferences(TargetFramework targetFramework) 695281"];
233 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 695282"];
234 [label="StandardReferences 695283"];
235 [label="RuntimeUtilities.IsCoreClrRuntime 695284"];
236 [label="Mscorlib46ExtendedReferences 695285"];
237 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 695286"];
238 [label="TestBase.ValueTupleRef 695287"];
239 [label="TestReferences.NetFx.ValueTuple.tuplelib 695288"];
240 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 695289"];
241 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 695290"];
242 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 695291"];
243 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 695292"];
244 [label="return references; 695293"];
245 [label="options 695294"];
246 [label="parseOptions 695295"];
247 [label="assemblyName 695296"];
248 [label="sourceFileName 695297"];
249 [label="skipUsesIsNullable 695298"];
250 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 695299"];
251 [label="param CreateEmptyCompilation(CSharpTestSource source) 695300"];
252 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 695301"];
253 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 695302"];
254 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 695303"];
255 [label="param CreateEmptyCompilation(string assemblyName = '') 695304"];
256 [label="param CreateEmptyCompilation(string sourceFileName = '') 695305"];
257 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 695306"];
258 [label="source 695307"];
259 [label="references 695308"];
260 [label="options 695309"];
261 [label="parseOptions 695310"];
262 [label="assemblyName 695311"];
263 [label="sourceFileName 695312"];
264 [label="skipUsesIsNullable 695313"];
265 [label="null 695314"];
266 [label="experimentalFeature: null 695315"];
267 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 695316"];
268 [label="param CreateCompilationCore(CSharpTestSource source) 695317"];
269 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 695318"];
270 [label="param CreateCompilationCore(CSharpCompilationOptions options) 695319"];
271 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 695320"];
272 [label="param CreateCompilationCore(string assemblyName) 695321"];
273 [label="param CreateCompilationCore(string sourceFileName) 695322"];
274 [label="param CreateCompilationCore(bool skipUsesIsNullable) 695323"];
275 [label="param CreateCompilationCore(MessageID? experimentalFeature) 695324"];
276 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 695325"];
277 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 695326"];
278 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 695327"];
279 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 695328"];
280 [label="param GetSyntaxTrees(string sourceFileName = '') 695329"];
281 [label="param GetSyntaxTrees(this) 695330"];
282 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 695331"];
283 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 695332"];
284 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 695333"];
285 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 695334"];
286 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 695335"];
287 [label="param Parse(string text) 695336"];
288 [label="param Parse(string filename = '') 695337"];
289 [label="param Parse(CSharpParseOptions options = null) 695338"];
290 [label="param Parse(Encoding encoding = null) 695339"];
291 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 695340"];
292 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 695341"];
293 [label="kind: SourceCodeKind.Regular 695342"];
294 [label="documentationMode: DocumentationMode.Parse 695343"];
295 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 695344"];
296 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 695345"];
297 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 695346"];
298 [label="SourceCodeKind.Script 695347"];
299 [label="Regular.WithKind(SourceCodeKind.Script) 695348"];
300 [label="Script = Regular.WithKind(SourceCodeKind.Script) 695349"];
301 [label="LanguageVersion.CSharp6 695350"];
302 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 695351"];
303 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 695352"];
304 [label="LanguageVersion.CSharp7 695353"];
305 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 695354"];
306 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 695355"];
307 [label="LanguageVersion.CSharp7_1 695356"];
308 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 695357"];
309 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 695358"];
310 [label="LanguageVersion.CSharp7_2 695359"];
311 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 695360"];
312 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 695361"];
313 [label="LanguageVersion.CSharp7_3 695362"];
314 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 695363"];
315 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 695364"];
316 [label="LanguageVersion.Default 695365"];
317 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 695366"];
318 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 695367"];
319 [label="LanguageVersion.Preview 695368"];
320 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 695369"];
321 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 695370"];
322 [label="LanguageVersion.CSharp8 695371"];
323 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 695372"];
324 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 695373"];
325 [label="LanguageVersion.CSharp9 695374"];
326 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 695375"];
327 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 695376"];
328 [label="DocumentationMode.Diagnose 695377"];
329 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 695378"];
330 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 695379"];
331 [label="Regular 695380"];
332 [label="'UseLegacyStrongNameProvider' 695381"];
333 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 695382"];
334 [label="param WithFeature(this CSharpParseOptions options) 695383"];
335 [label="param WithFeature(string feature) 695384"];
336 [label="param WithFeature(string value = 'true') 695385"];
337 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 695386"];
338 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 695387"];
339 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 695388"];
340 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 695389"];
341 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 695390"];
342 [label="new[] { new KeyValuePair<string, string>(feature, value) } 695391"];
343 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 695392"];
344 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 695393"];
345 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 695394"];
346 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 695395"];
347 [label="1 695396"];
348 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 695397"];
349 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 695398"];
350 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 695399"];
351 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 695400"];
352 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 695401"];
353 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 695402"];
354 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 695403"];
355 [label="LanguageVersion.CSharp8 695404"];
356 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 695405"];
357 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 695406"];
358 [label="RegularWithExtendedPartialMethods = RegularPreview 695407"];
359 [label="new SmallDictionary<string, string> { } 695408"];
360 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 695409"];
361 [label="kind: SourceCodeKind.Regular 695410"];
362 [label="documentationMode: DocumentationMode.None 695411"];
363 [label="languageVersion: LanguageVersion.Preview 695412"];
364 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 695413"];
365 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 695414"];
366 [label="s_experimentalFeatures 695415"];
367 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 695416"];
368 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 695417"];
369 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 695418"];
370 [label="'testV7SwitchBinder' 695419"];
371 [label="'true' 695420"];
372 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 695421"];
373 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 695422"];
374 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 695423"];
375 [label="RegularWithoutRecursivePatterns = Regular7_3 695424"];
376 [label="RegularWithRecursivePatterns = Regular8 695425"];
377 [label="RegularWithoutPatternCombinators = Regular8 695426"];
378 [label="RegularWithPatternCombinators = RegularPreview 695427"];
379 [label="OutputKind.DynamicallyLinkedLibrary 695428"];
380 [label="OptimizationLevel.Release 695429"];
381 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 695430"];
382 [label="param CreateTestOptions(OutputKind outputKind) 695431"];
383 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 695432"];
384 [label="param CreateTestOptions(bool allowUnsafe = false) 695433"];
385 [label="outputKind 695434"];
386 [label="optimizationLevel: optimizationLevel 695435"];
387 [label="warningLevel: Diagnostic.MaxWarningLevel 695436"];
388 [label="allowUnsafe: allowUnsafe 695437"];
389 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695438"];
390 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695439"];
391 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 695440"];
392 [label="OutputKind.ConsoleApplication 695441"];
393 [label="OptimizationLevel.Release 695442"];
394 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 695443"];
395 [label="param CreateTestOptions(OutputKind outputKind) 695444"];
396 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 695445"];
397 [label="param CreateTestOptions(bool allowUnsafe = false) 695446"];
398 [label="outputKind 695447"];
399 [label="optimizationLevel: optimizationLevel 695448"];
400 [label="warningLevel: Diagnostic.MaxWarningLevel 695449"];
401 [label="allowUnsafe: allowUnsafe 695450"];
402 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695451"];
403 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695452"];
404 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 695453"];
405 [label="true 695454"];
406 [label="ReleaseDll.WithDebugPlusMode(true) 695455"];
407 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 695456"];
408 [label="true 695457"];
409 [label="ReleaseExe.WithDebugPlusMode(true) 695458"];
410 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 695459"];
411 [label="OutputKind.DynamicallyLinkedLibrary 695460"];
412 [label="OptimizationLevel.Debug 695461"];
413 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 695462"];
414 [label="param CreateTestOptions(OutputKind outputKind) 695463"];
415 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 695464"];
416 [label="param CreateTestOptions(bool allowUnsafe = false) 695465"];
417 [label="outputKind 695466"];
418 [label="optimizationLevel: optimizationLevel 695467"];
419 [label="warningLevel: Diagnostic.MaxWarningLevel 695468"];
420 [label="allowUnsafe: allowUnsafe 695469"];
421 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695470"];
422 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695471"];
423 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 695472"];
424 [label="OutputKind.ConsoleApplication 695473"];
425 [label="OptimizationLevel.Debug 695474"];
426 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 695475"];
427 [label="param CreateTestOptions(OutputKind outputKind) 695476"];
428 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 695477"];
429 [label="param CreateTestOptions(bool allowUnsafe = false) 695478"];
430 [label="outputKind 695479"];
431 [label="optimizationLevel: optimizationLevel 695480"];
432 [label="warningLevel: Diagnostic.MaxWarningLevel 695481"];
433 [label="allowUnsafe: allowUnsafe 695482"];
434 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695483"];
435 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695484"];
436 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 695485"];
437 [label="OutputKind.WindowsRuntimeMetadata 695486"];
438 [label="OptimizationLevel.Release 695487"];
439 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 695488"];
440 [label="param CreateTestOptions(OutputKind outputKind) 695489"];
441 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 695490"];
442 [label="param CreateTestOptions(bool allowUnsafe = false) 695491"];
443 [label="outputKind 695492"];
444 [label="optimizationLevel: optimizationLevel 695493"];
445 [label="warningLevel: Diagnostic.MaxWarningLevel 695494"];
446 [label="allowUnsafe: allowUnsafe 695495"];
447 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695496"];
448 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695497"];
449 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 695498"];
450 [label="OutputKind.WindowsRuntimeMetadata 695499"];
451 [label="OptimizationLevel.Debug 695500"];
452 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 695501"];
453 [label="param CreateTestOptions(OutputKind outputKind) 695502"];
454 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 695503"];
455 [label="param CreateTestOptions(bool allowUnsafe = false) 695504"];
456 [label="outputKind 695505"];
457 [label="optimizationLevel: optimizationLevel 695506"];
458 [label="warningLevel: Diagnostic.MaxWarningLevel 695507"];
459 [label="allowUnsafe: allowUnsafe 695508"];
460 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695509"];
461 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695510"];
462 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 695511"];
463 [label="OutputKind.NetModule 695512"];
464 [label="OptimizationLevel.Release 695513"];
465 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 695514"];
466 [label="param CreateTestOptions(OutputKind outputKind) 695515"];
467 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 695516"];
468 [label="param CreateTestOptions(bool allowUnsafe = false) 695517"];
469 [label="outputKind 695518"];
470 [label="optimizationLevel: optimizationLevel 695519"];
471 [label="warningLevel: Diagnostic.MaxWarningLevel 695520"];
472 [label="allowUnsafe: allowUnsafe 695521"];
473 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695522"];
474 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695523"];
475 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 695524"];
476 [label="OutputKind.NetModule 695525"];
477 [label="OptimizationLevel.Debug 695526"];
478 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 695527"];
479 [label="param CreateTestOptions(OutputKind outputKind) 695528"];
480 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 695529"];
481 [label="param CreateTestOptions(bool allowUnsafe = false) 695530"];
482 [label="outputKind 695531"];
483 [label="optimizationLevel: optimizationLevel 695532"];
484 [label="warningLevel: Diagnostic.MaxWarningLevel 695533"];
485 [label="allowUnsafe: allowUnsafe 695534"];
486 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695535"];
487 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695536"];
488 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 695537"];
489 [label="true 695538"];
490 [label="ReleaseDll.WithAllowUnsafe(true) 695539"];
491 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 695540"];
492 [label="true 695541"];
493 [label="ReleaseExe.WithAllowUnsafe(true) 695542"];
494 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 695543"];
495 [label="true 695544"];
496 [label="DebugDll.WithAllowUnsafe(true) 695545"];
497 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 695546"];
498 [label="true 695547"];
499 [label="DebugExe.WithAllowUnsafe(true) 695548"];
500 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 695549"];
501 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 695550"];
502 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 695551"];
503 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 695552"];
504 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 695553"];
505 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 695554"];
506 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 695555"];
507 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 695556"];
508 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 695557"];
509 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 695558"];
510 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 695559"];
511 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 695560"];
512 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 695561"];
513 [label="DebugInformationFormat.Pdb 695562"];
514 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 695563"];
515 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 695564"];
516 [label="options = TestOptions.Regular; 695565"];
517 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 695566"];
518 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 695567"];
519 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 695568"];
520 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 695569"];
521 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 695570"];
522 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 695571"];
523 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 695572"];
524 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 695573"];
525 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 695574"];
526 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 695575"];
527 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 695576"];
528 [label="param CheckSerializable(SyntaxTree tree) 695577"];
529 [label="var stream = new MemoryStream(); 695578"];
530 [label="var root = tree.GetRoot(); 695579"];
531 [label="var root = tree.GetRoot(); 695580"];
532 [label="root.SerializeTo(stream); 695581"];
533 [label="root.SerializeTo(stream); 695582"];
534 [label="root.SerializeTo(stream); 695583"];
535 [label="stream.Position = 0; 695584"];
536 [label="stream.Position 695585"];
537 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 695586"];
538 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 695587"];
539 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 695588"];
540 [label="return tree; 695589"];
541 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 695590"];
542 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 695591"];
543 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 695592"];
544 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 695593"];
545 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 695594"];
546 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 695595"];
547 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 695596"];
548 [label="hasTopLevelStatements 695597"];
549 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 695598"];
550 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 695599"];
551 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 695600"];
552 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 695601"];
553 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 695602"];
554 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 695603"];
555 [label="param ValidateIOperations(Func<Compilation> createCompilation) 695604"];
556 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 695605"];
557 [label="return; 695606"];
558 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 695607"];
559 [label="var compilation = createCompilationLambda(); 695608"];
560 [label="var compilation = createCompilationLambda(); 695609"];
561 [label="return Guid.NewGuid().ToString('D'); 695610"];
562 [label="var compilation = createCompilationLambda(); 695611"];
563 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 695612"];
564 [label="IsNullableEnabled(compilation) 695613"];
565 [label="param IsNullableEnabled(CSharpCompilation compilation) 695614"];
566 [label="var trees = compilation.SyntaxTrees; 695615"];
567 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 695616"];
568 [label="var options = (CSharpParseOptions)trees[0].Options; 695617"];
569 [label="var options = (CSharpParseOptions)trees[0].Options; 695618"];
570 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 695619"];
571 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 695620"];
572 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 695621"];
573 [label="return compilation; 695622"];
574 [label="CreateCompilation(source).VerifyDiagnostics() 695623"];
575 [label="param VerifyDiagnostics(this TCompilation c) 695624"];
576 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 695625"];
577 [label="var diagnostics = c.GetDiagnostics(); 695626"];
578 [label="null 695627"];
579 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Empty 695628"];
580 [label="ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty 695629"];
581 [label="ImmutableArray<AliasAndExternAliasDirective>.Empty 695630"];
582 [label="null 695631"];
583 [label="new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 695632"];
584 [label="param Imports(CSharpCompilation compilation) 695633"];
585 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 695634"];
586 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 695635"];
587 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 695636"];
588 [label="param Imports(DiagnosticBag diagnostics) 695637"];
589 [label="param Imports(this) 695638"];
590 [label="_compilation 695639"];
591 [label="_diagnostics 695640"];
592 [label="UsingAliases 695641"];
593 [label="Debug.Assert(usingAliases != null); 695642"];
594 [label="Debug.Assert(usingAliases != null); 695643"];
595 [label="Debug.Assert(!usings.IsDefault); 695644"];
596 [label="Debug.Assert(!externs.IsDefault); 695645"];
597 [label="_compilation 695646"];
598 [label="this.UsingAliases 695647"];
599 [label="this.Usings 695648"];
600 [label="_diagnostics 695649"];
601 [label="this.ExternAliases 695650"];
602 [label="Empty = new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 695651"];
603 [label="var diagnostics = c.GetDiagnostics(); 695652"];
604 [label="param FromGlobalUsings(CSharpCompilation compilation) 695653"];
605 [label="var usings = compilation.Options.Usings; 695654"];
606 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 695655"];
607 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 695656"];
608 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 695657"];
609 [label="return Empty; 695658"];
610 [label="var diagnostics = c.GetDiagnostics(); 695659"];
611 [label="param Complete(CancellationToken cancellationToken) 695660"];
612 [label="param Complete(this) 695661"];
613 [label="while (true)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                var incompletePart = _state.NextIncompletePart;\n                switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                }\n\n                _state.SpinWaitComplete(incompletePart, cancellationToken);\n            } 695662"];
614 [label="cancellationToken.ThrowIfCancellationRequested(); 695663"];
615 [label="var incompletePart = _state.NextIncompletePart; 695664"];
616 [label="switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                } 695665"];
617 [label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 695666"];
618 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 695667"];
619 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 695668"];
620 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 695669"];
621 [label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            } 695670"];
622 [label="Validate() 695671"];
623 [label="param Validate(this) 695672"];
624 [label="if (this == Empty)\n            {\n                return;\n            } 695673"];
625 [label="return; 695674"];
626 [label="Validate(); 695675"];
627 [label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 695676"];
628 [label="return; 695677"];
629 [label="param Includes(this BinderFlags self) 695678"];
630 [label="param Includes(BinderFlags other) 695679"];
631 [label="return (self & other) == other; 695680"];
632 [label="var diagnostics = c.GetDiagnostics(); 695681"];
633 [label="0 695682"];
634 [label="ExternalScope = 0 695683"];
635 [label="1 695684"];
636 [label="TopLevelScope = 1 695685"];
637 [label="2 695686"];
638 [label="ValueKindInsignificantBits = 2 695687"];
639 [label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 << ValueKindInsignificantBits) - 1)) 695688"];
640 [label="property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 695689"];
641 [label="s_isIndexedPropertyWithNonOptionalArguments = property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 695690"];
642 [label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 695691"];
643 [label="memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType 695692"];
644 [label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 695693"];
645 [label="miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 695694"];
646 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 695695"];
647 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 695696"];
648 [label="s_propertyGroupFormat =\n            new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 695697"];
649 [label="10 695698"];
650 [label="MaxParameterListsForErrorRecovery = 10 695699"];
651 [label="'<>h__TransparentIdentifier' 695700"];
652 [label="transparentIdentifierPrefix = '<>h__TransparentIdentifier' 695701"];
653 [label="s => (MethodSymbol)s 695702"];
654 [label="s_toMethodSymbolFunc = s => (MethodSymbol)s 695703"];
655 [label="s => (PropertySymbol)s 695704"];
656 [label="s_toPropertySymbolFunc = s => (PropertySymbol)s 695705"];
657 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 695706"];
658 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 695707"];
659 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 695708"];
660 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 695709"];
661 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 695710"];
662 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 695711"];
663 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 695712"];
664 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 695713"];
665 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 695714"];
666 [label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 695715"];
667 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 695716"];
668 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 695717"];
669 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 695718"];
670 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 695719"];
671 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 695720"];
672 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 695721"];
673 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 695722"];
674 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 695723"];
675 [label="param GetWellKnownTypeMember(WellKnownMember member) 695724"];
676 [label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 695725"];
677 [label="param GetWellKnownTypeMember(Location location = null) 695726"];
678 [label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 695727"];
679 [label="param GetWellKnownTypeMember(bool isOptional = false) 695728"];
680 [label="Debug.Assert((syntax != null) ^ (location != null)); 695729"];
681 [label="Debug.Assert((syntax != null) ^ (location != null)); 695730"];
682 [label="Debug.Assert((syntax != null) ^ (location != null)); 695731"];
683 [label="Debug.Assert((syntax != null) ^ (location != null)); 695732"];
684 [label="DiagnosticInfo useSiteDiagnostic; 695733"];
685 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 695734"];
686 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 695735"];
687 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 695736"];
688 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 695737"];
689 [label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 695738"];
690 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 695739"];
691 [label="param GetWellKnownTypeMember(WellKnownMember member) 695740"];
692 [label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 695741"];
693 [label="param GetWellKnownTypeMember(bool isOptional = false) 695742"];
694 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 695743"];
695 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 695744"];
696 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 695745"];
697 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 695746"];
698 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 695747"];
699 [label="Debug.Assert(symbol is object); 695748"];
700 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 695749"];
701 [label="isInternal = false; 695750"];
702 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 695751"];
703 [label="symbol = symbol.ContainingType; 695752"];
704 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 695753"];
705 [label="return true; 695754"];
706 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 695755"];
707 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 695756"];
708 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 695757"];
709 [label="Debug.Assert(symbol is object); 695758"];
710 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 695759"];
711 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 695760"];
712 [label="symbol = symbol.ContainingType; 695761"];
713 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 695762"];
714 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 695763"];
715 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 695764"];
716 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 695765"];
717 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 695766"];
718 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 695767"];
719 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 695768"];
720 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 695769"];
721 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 695770"];
722 [label="Debug.Assert(symbol is object); 695771"];
723 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 695772"];
724 [label="isInternal = false; 695773"];
725 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 695774"];
726 [label="symbol = symbol.ContainingType; 695775"];
727 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 695776"];
728 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 695777"];
729 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 695778"];
730 [label="Debug.Assert(symbol is object); 695779"];
731 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 695780"];
732 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 695781"];
733 [label="symbol = symbol.ContainingType; 695782"];
734 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 695783"];
735 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 695784"];
736 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 695785"];
737 [label="return memberSymbol; 695786"];
738 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 695787"];
739 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 695788"];
740 [label="return memberSymbol; 695789"];
741 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 695790"];
742 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 695791"];
743 [label="Debug.Assert(symbol is object); 695792"];
744 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 695793"];
745 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 695794"];
746 [label="symbol = symbol.ContainingType; 695795"];
747 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 695796"];
748 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 695797"];
749 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 695798"];
750 [label="Debug.Assert(symbol is object); 695799"];
751 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 695800"];
752 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 695801"];
753 [label="symbol = symbol.ContainingType; 695802"];
754 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 695803"];
755 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 695804"];
756 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 695805"];
757 [label="return memberSymbol; 695806"];
758 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 695807"];
759 [label="return memberSymbol; 695808"];
760 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 695809"];
761 [label="return memberSymbol; 695810"];
762 [label="return memberSymbol; 695811"];
763 [label="param GetBinder(SyntaxNode node) 695812"];
764 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 695813"];
765 [label="param GetBinder(Symbol memberOpt = null) 695814"];
766 [label="param GetBinder(this) 695815"];
767 [label="int position = node.SpanStart; 695816"];
768 [label="InScript 695817"];
769 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 695818"];
770 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 695819"];
771 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 695820"];
772 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 695821"];
773 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 695822"];
774 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 695823"];
775 [label="node = node.Parent; 695824"];
776 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 695825"];
777 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 695826"];
778 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 695827"];
779 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 695828"];
780 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 695829"];
781 [label="param GetBinder(SyntaxNode node) 695830"];
782 [label="param GetBinder(int position) 695831"];
783 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 695832"];
784 [label="param GetBinder(Symbol memberOpt = null) 695833"];
785 [label="param GetBinder(this) 695834"];
786 [label="Debug.Assert(node != null); 695835"];
787 [label="Debug.Assert(node != null); 695836"];
788 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 695837"];
789 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 695838"];
790 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 695839"];
791 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 695840"];
792 [label="param BinderFactoryVisitor(BinderFactory factory) 695841"];
793 [label="param BinderFactoryVisitor(this) 695842"];
794 [label="param BinderFactoryVisitor(this) 695843"];
795 [label="_position 695844"];
796 [label="_memberDeclarationOpt 695845"];
797 [label="_memberOpt 695846"];
798 [label="_factory 695847"];
799 [label="_factory 695848"];
800 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 695849"];
801 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 695850"];
802 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 695851"];
803 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 695852"];
804 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 695853"];
805 [label="param Initialize(int position) 695854"];
806 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 695855"];
807 [label="param Initialize(Symbol memberOpt) 695856"];
808 [label="param Initialize(this) 695857"];
809 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 695858"];
810 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 695859"];
811 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 695860"];
812 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 695861"];
813 [label="_position 695862"];
814 [label="_memberDeclarationOpt 695863"];
815 [label="_memberOpt 695864"];
816 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 695865"];
817 [label="Binder result = visitor.Visit(node); 695866"];
818 [label="visitor.Visit(node) 695867"];
819 [label="param Visit(SyntaxNode node) 695868"];
820 [label="param Visit(this) 695869"];
821 [label="return VisitCore(node); 695870"];
822 [label="VisitCore(node) 695871"];
823 [label="param VisitCore(SyntaxNode node) 695872"];
824 [label="param VisitCore(this) 695873"];
825 [label="return ((CSharpSyntaxNode)node).Accept(this); 695874"];
826 [label="return ((CSharpSyntaxNode)node).Accept(this); 695875"];
827 [label="return ((CSharpSyntaxNode)node).Accept(this); 695876"];
828 [label="param DefaultVisit(SyntaxNode parent) 695877"];
829 [label="param DefaultVisit(this) 695878"];
830 [label="return VisitCore(parent.Parent); 695879"];
831 [label="VisitCore(parent.Parent) 695880"];
832 [label="param VisitCore(SyntaxNode node) 695881"];
833 [label="param VisitCore(this) 695882"];
834 [label="return ((CSharpSyntaxNode)node).Accept(this); 695883"];
835 [label="param VisitClassDeclaration(ClassDeclarationSyntax node) 695884"];
836 [label="param VisitClassDeclaration(this) 695885"];
837 [label="return VisitTypeDeclarationCore(node); 695886"];
838 [label="VisitTypeDeclarationCore(node) 695887"];
839 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 695888"];
840 [label="param VisitTypeDeclarationCore(this) 695889"];
841 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 695890"];
842 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 695891"];
843 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 695892"];
844 [label="NodeUsage extraInfo = NodeUsage.Normal; 695893"];
845 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 695894"];
846 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 695895"];
847 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 695896"];
848 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 695897"];
849 [label="if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 695898"];
850 [label="if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 695899"];
851 [label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 695900"];
852 [label="return VisitTypeDeclarationCore(parent, extraInfo); 695901"];
853 [label="return VisitTypeDeclarationCore(parent, extraInfo); 695902"];
854 [label="VisitTypeDeclarationCore(parent, extraInfo) 695903"];
855 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 695904"];
856 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 695905"];
857 [label="param VisitTypeDeclarationCore(this) 695906"];
858 [label="var key = CreateBinderCacheKey(parent, extraInfo); 695907"];
859 [label="var key = CreateBinderCacheKey(parent, extraInfo); 695908"];
860 [label="CreateBinderCacheKey(parent, extraInfo) 695909"];
861 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 695910"];
862 [label="param CreateBinderCacheKey(NodeUsage usage) 695911"];
863 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 695912"];
864 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 695913"];
865 [label="return new BinderCacheKey(node, usage); 695914"];
866 [label="return new BinderCacheKey(node, usage); 695915"];
867 [label="return new BinderCacheKey(node, usage); 695916"];
868 [label="new BinderCacheKey(node, usage) 695917"];
869 [label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 695918"];
870 [label="param BinderCacheKey(NodeUsage usage) 695919"];
871 [label="param BinderCacheKey(this) 695920"];
872 [label="this.syntaxNode 695921"];
873 [label="this.usage 695922"];
874 [label="var key = CreateBinderCacheKey(parent, extraInfo); 695923"];
875 [label="Binder resultBinder; 695924"];
876 [label="binderCache 695925"];
877 [label="get\n                {\n                    return _factory._binderCache;\n                } 695926"];
878 [label="return _factory._binderCache; 695927"];
879 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 695928"];
880 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 695929"];
881 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 695930"];
882 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 695931"];
883 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 695932"];
884 [label="param GetHashCode(this) 695933"];
885 [label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 695934"];
886 [label="resultBinder = VisitCore(parent.Parent); 695935"];
887 [label="VisitCore(parent.Parent) 695936"];
888 [label="param VisitCore(SyntaxNode node) 695937"];
889 [label="param VisitNamespaceDeclaration(NamespaceDeclarationSyntax parent) 695938"];
890 [label="param VisitNamespaceDeclaration(this) 695939"];
891 [label="if (!LookupPosition.IsInNamespaceDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 695940"];
892 [label="if (!LookupPosition.IsInNamespaceDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 695941"];
893 [label="if (!LookupPosition.IsInNamespaceDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 695942"];
894 [label="bool inBody = LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken); 695943"];
895 [label="bool inBody = LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken); 695944"];
896 [label="bool inUsing = IsInUsing(parent); 695945"];
897 [label="IsInUsing(parent) 695946"];
898 [label="param IsInUsing(CSharpSyntaxNode containingNode) 695947"];
899 [label="param IsInUsing(this) 695948"];
900 [label="TextSpan containingSpan = containingNode.Span; 695949"];
901 [label="SyntaxToken token; 695950"];
902 [label="token 695951"];
903 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 695952"];
904 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 695953"];
905 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 695954"];
906 [label="token = containingNode.FindToken(_position); 695955"];
907 [label="token = containingNode.FindToken(_position); 695956"];
908 [label="var node = token.Parent; 695957"];
909 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 695958"];
910 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 695959"];
911 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 695960"];
912 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 695961"];
913 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 695962"];
914 [label="node = node.Parent; 695963"];
915 [label="return false; 695964"];
916 [label="bool inUsing = IsInUsing(parent); 695965"];
917 [label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 695966"];
918 [label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 695967"];
919 [label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 695968"];
920 [label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 695969"];
921 [label="VisitNamespaceDeclaration(parent, _position, inBody, inUsing) 695970"];
922 [label="param VisitNamespaceDeclaration(NamespaceDeclarationSyntax parent) 695971"];
923 [label="param VisitNamespaceDeclaration(int position) 695972"];
924 [label="param VisitNamespaceDeclaration(bool inBody) 695973"];
925 [label="param VisitNamespaceDeclaration(bool inUsing) 695974"];
926 [label="param VisitNamespaceDeclaration(this) 695975"];
927 [label="Debug.Assert(!inUsing || inBody, 'inUsing => inBody'); 695976"];
928 [label="Debug.Assert(!inUsing || inBody, 'inUsing => inBody'); 695977"];
929 [label="inUsing 695978"];
930 [label="inBody 695979"];
931 [label="var extraInfo = inUsing ? NodeUsage.NamespaceUsings : (inBody ? NodeUsage.NamespaceBody : NodeUsage.Normal); 695980"];
932 [label="var key = CreateBinderCacheKey(parent, extraInfo); 695981"];
933 [label="var key = CreateBinderCacheKey(parent, extraInfo); 695982"];
934 [label="CreateBinderCacheKey(parent, extraInfo) 695983"];
935 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 695984"];
936 [label="param CreateBinderCacheKey(NodeUsage usage) 695985"];
937 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 695986"];
938 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 695987"];
939 [label="var key = CreateBinderCacheKey(parent, extraInfo); 695988"];
940 [label="Binder result; 695989"];
941 [label="binderCache 695990"];
942 [label="get\n                {\n                    return _factory._binderCache;\n                } 695991"];
943 [label="return _factory._binderCache; 695992"];
944 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    Binder outer;\n                    var container = parent.Parent;\n\n                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    }\n\n                    if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 695993"];
945 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    Binder outer;\n                    var container = parent.Parent;\n\n                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    }\n\n                    if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 695994"];
946 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    Binder outer;\n                    var container = parent.Parent;\n\n                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    }\n\n                    if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 695995"];
947 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    Binder outer;\n                    var container = parent.Parent;\n\n                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    }\n\n                    if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 695996"];
948 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    Binder outer;\n                    var container = parent.Parent;\n\n                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    }\n\n                    if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 695997"];
949 [label="Binder outer; 695998"];
950 [label="var container = parent.Parent; 695999"];
951 [label="InScript 696000"];
952 [label="get\n                {\n                    return _factory.InScript;\n                } 696001"];
953 [label="_factory.InScript 696002"];
954 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 696003"];
955 [label="return _factory.InScript; 696004"];
956 [label="if (InScript && container.Kind() == SyntaxKind.CompilationUnit)\n                    {\n                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.\n                        // A namespace in script code is not bound within the scope of a Script class, \n                        // but still within scope of compilation unit extern aliases and usings.\n                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);\n                    }\n                    else\n                    {\n                        outer = _factory.GetBinder(parent.Parent, position);\n                    } 696005"];
957 [label="outer = _factory.GetBinder(parent.Parent, position); 696006"];
958 [label="outer = _factory.GetBinder(parent.Parent, position); 696007"];
959 [label="outer = _factory.GetBinder(parent.Parent, position); 696008"];
960 [label="_factory.GetBinder(parent.Parent, position) 696009"];
961 [label="param GetBinder(SyntaxNode node) 696010"];
962 [label="param GetBinder(int position) 696011"];
963 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 696012"];
964 [label="param GetBinder(Symbol memberOpt = null) 696013"];
965 [label="Debug.Assert(node != null); 696014"];
966 [label="Debug.Assert(node != null); 696015"];
967 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 696016"];
968 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 696017"];
969 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 696018"];
970 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 696019"];
971 [label="param VisitCompilationUnit(CompilationUnitSyntax parent) 696020"];
972 [label="param VisitCompilationUnit(this) 696021"];
973 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 696022"];
974 [label="IsInUsing(parent) 696023"];
975 [label="param IsInUsing(CSharpSyntaxNode containingNode) 696024"];
976 [label="param IsInUsing(this) 696025"];
977 [label="SyntaxToken token; 696026"];
978 [label="token 696027"];
979 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 696028"];
980 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 696029"];
981 [label="InScript 696030"];
982 [label="get\n                {\n                    return _factory.InScript;\n                } 696031"];
983 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 696032"];
984 [label="VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript) 696033"];
985 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 696034"];
986 [label="param VisitCompilationUnit(bool inUsing) 696035"];
987 [label="param VisitCompilationUnit(bool inScript) 696036"];
988 [label="param VisitCompilationUnit(this) 696037"];
989 [label="syntaxTree 696038"];
990 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 696039"];
991 [label="return _factory._syntaxTree; 696040"];
992 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 696041"];
993 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 696042"];
994 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 696043"];
995 [label="inUsing 696044"];
996 [label="inScript 696045"];
997 [label="var extraInfo = inUsing\n                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)\n                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 696046"];
998 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 696047"];
999 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 696048"];
1000 [label="CreateBinderCacheKey(compilationUnit, extraInfo) 696049"];
1001 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 696050"];
1002 [label="param CreateBinderCacheKey(NodeUsage usage) 696051"];
1003 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 696052"];
1004 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 696053"];
1005 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 696054"];
1006 [label="Binder result; 696055"];
1007 [label="binderCache 696056"];
1008 [label="get\n                {\n                    return _factory._binderCache;\n                } 696057"];
1009 [label="return _factory._binderCache; 696058"];
1010 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 696059"];
1011 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 696060"];
1012 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 696061"];
1013 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 696062"];
1014 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 696063"];
1015 [label="this.buckStopsHereBinder 696064"];
1016 [label="get\n                {\n                    return _factory._buckStopsHereBinder;\n                } 696065"];
1017 [label="return _factory._buckStopsHereBinder; 696066"];
1018 [label="result = this.buckStopsHereBinder; 696067"];
1019 [label="if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    } 696068"];
1020 [label="compilation 696069"];
1021 [label="get\n                {\n                    return _factory._compilation;\n                } 696070"];
1022 [label="return _factory._compilation; 696071"];
1023 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 696072"];
1024 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 696073"];
1025 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 696074"];
1026 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 696075"];
1027 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 696076"];
1028 [label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 696077"];
1029 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 696078"];
1030 [label="param InContainerBinder(Binder next) 696079"];
1031 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 696080"];
1032 [label="param InContainerBinder(bool inUsing) 696081"];
1033 [label="param InContainerBinder(this) 696082"];
1034 [label="next 696083"];
1035 [label="param InContainerBinder(this) 696084"];
1036 [label="param Binder(Binder next) 696085"];
1037 [label="param Binder(this) 696086"];
1038 [label="param Binder(Conversions? conversions = null) 696087"];
1039 [label="internal CSharpCompilation Compilation { get; } 696088"];
1040 [label="Flags 696089"];
1041 [label="protected internal Binder? Next { get; } 696090"];
1042 [label="_lazyConversions 696091"];
1043 [label="_lazyOverloadResolution 696092"];
1044 [label="RoslynDebug.Assert(next != null); 696093"];
1045 [label="RoslynDebug.Assert(next != null); 696094"];
1046 [label="Next 696095"];
1047 [label="this.Flags 696096"];
1048 [label="this.Compilation 696097"];
1049 [label="_lazyConversions 696098"];
1050 [label="_container 696099"];
1051 [label="_computeImports 696100"];
1052 [label="_lazyImports 696101"];
1053 [label="_lazyImportChain 696102"];
1054 [label="_lazyQuickAttributeChecker 696103"];
1055 [label="Debug.Assert((object)container != null); 696104"];
1056 [label="Debug.Assert((object)container != null); 696105"];
1057 [label="Debug.Assert(declarationSyntax != null); 696106"];
1058 [label="Debug.Assert(declarationSyntax != null); 696107"];
1059 [label="_container 696108"];
1060 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 696109"];
1061 [label="_computeImports 696110"];
1062 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 696111"];
1063 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 696112"];
1064 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 696113"];
1065 [label="_usingsSyntax 696114"];
1066 [label="compilation 696115"];
1067 [label="get\n                {\n                    return _factory._compilation;\n                } 696116"];
1068 [label="return _factory._compilation; 696117"];
1069 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 696118"];
1070 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 696119"];
1071 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 696120"];
1072 [label="binderCache 696121"];
1073 [label="return _factory._binderCache; 696122"];
1074 [label="binderCache.TryAdd(key, result); 696123"];
1075 [label="binderCache.TryAdd(key, result); 696124"];
1076 [label="binderCache.TryAdd(key, result); 696125"];
1077 [label="binderCache.TryAdd(key, result); 696126"];
1078 [label="binderCache.TryAdd(key, result); 696127"];
1079 [label="param Equals(BinderCacheKey other) 696128"];
1080 [label="param Equals(this) 696129"];
1081 [label="return syntaxNode == other.syntaxNode && this.usage == other.usage; 696130"];
1082 [label="return result; 696131"];
1083 [label="return ((CSharpSyntaxNode)node).Accept(this); 696132"];
1084 [label="_binderFactoryVisitorPool.Free(visitor); 696133"];
1085 [label="_binderFactoryVisitorPool.Free(visitor); 696134"];
1086 [label="return result; 696135"];
1087 [label="if (!inBody)\n                    {\n                        // not between the curlies\n                        result = outer;\n                    }\n                    else\n                    {\n                        // if between the curlies, members are in scope\n                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);\n                    } 696136"];
1088 [label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 696137"];
1089 [label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 696138"];
1090 [label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 696139"];
1091 [label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 696140"];
1092 [label="MakeNamespaceBinder(parent, parent.Name, outer, inUsing) 696141"];
1093 [label="param MakeNamespaceBinder(CSharpSyntaxNode node) 696142"];
1094 [label="param MakeNamespaceBinder(NameSyntax name) 696143"];
1095 [label="param MakeNamespaceBinder(Binder outer) 696144"];
1096 [label="param MakeNamespaceBinder(bool inUsing) 696145"];
1097 [label="param MakeNamespaceBinder(this) 696146"];
1098 [label="QualifiedNameSyntax dotted; 696147"];
1099 [label="while ((dotted = name as QualifiedNameSyntax) != null)\n                {\n                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);\n                    name = dotted.Right;\n                } 696148"];
1100 [label="while ((dotted = name as QualifiedNameSyntax) != null)\n                {\n                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);\n                    name = dotted.Right;\n                } 696149"];
1101 [label="while ((dotted = name as QualifiedNameSyntax) != null)\n                {\n                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);\n                    name = dotted.Right;\n                } 696150"];
1102 [label="NamespaceOrTypeSymbol container; 696151"];
1103 [label="if (outer is InContainerBinder inContainerBinder)\n                {\n                    container = inContainerBinder.Container;\n                }\n                else\n                {\n                    Debug.Assert(outer is SimpleProgramUnitBinder);\n                    container = outer.Compilation.GlobalNamespace;\n                } 696152"];
1104 [label="inContainerBinder.Container 696153"];
1105 [label="get\n            {\n                return _container;\n            } 696154"];
1106 [label="return _container; 696155"];
1107 [label="container = inContainerBinder.Container; 696156"];
1108 [label="NamespaceSymbol ns = ((NamespaceSymbol)container).GetNestedNamespace(name); 696157"];
1109 [label="NamespaceSymbol ns = ((NamespaceSymbol)container).GetNestedNamespace(name); 696158"];
1110 [label="if ((object)ns == null) return outer; 696159"];
1111 [label="if ((object)ns == null) return outer; 696160"];
1112 [label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 696161"];
1113 [label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 696162"];
1114 [label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 696163"];
1115 [label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 696164"];
1116 [label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 696165"];
1117 [label="new InContainerBinder(ns, outer, node, inUsing: inUsing) 696166"];
1118 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 696167"];
1119 [label="param InContainerBinder(Binder next) 696168"];
1120 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 696169"];
1121 [label="param InContainerBinder(bool inUsing) 696170"];
1122 [label="param InContainerBinder(this) 696171"];
1123 [label="param InContainerBinder(this) 696172"];
1124 [label="param Binder(this) 696173"];
1125 [label="param Binder(Conversions? conversions = null) 696174"];
1126 [label="internal CSharpCompilation Compilation { get; } 696175"];
1127 [label="Flags 696176"];
1128 [label="protected internal Binder? Next { get; } 696177"];
1129 [label="_lazyConversions 696178"];
1130 [label="_lazyOverloadResolution 696179"];
1131 [label="RoslynDebug.Assert(next != null); 696180"];
1132 [label="RoslynDebug.Assert(next != null); 696181"];
1133 [label="this.Flags 696182"];
1134 [label="this.Compilation 696183"];
1135 [label="_lazyConversions 696184"];
1136 [label="_container 696185"];
1137 [label="_computeImports 696186"];
1138 [label="_lazyImports 696187"];
1139 [label="_lazyImportChain 696188"];
1140 [label="_lazyQuickAttributeChecker 696189"];
1141 [label="Debug.Assert((object)container != null); 696190"];
1142 [label="Debug.Assert((object)container != null); 696191"];
1143 [label="Debug.Assert(declarationSyntax != null); 696192"];
1144 [label="Debug.Assert(declarationSyntax != null); 696193"];
1145 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 696194"];
1146 [label="_computeImports 696195"];
1147 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 696196"];
1148 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 696197"];
1149 [label="if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 696198"];
1150 [label="var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax; 696199"];
1151 [label="_usingsSyntax 696200"];
1152 [label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 696201"];
1153 [label="binderCache 696202"];
1154 [label="return _factory._binderCache; 696203"];
1155 [label="binderCache.TryAdd(key, result); 696204"];
1156 [label="binderCache.TryAdd(key, result); 696205"];
1157 [label="binderCache.TryAdd(key, result); 696206"];
1158 [label="binderCache.TryAdd(key, result); 696207"];
1159 [label="binderCache.TryAdd(key, result); 696208"];
1160 [label="return result; 696209"];
1161 [label="return ((CSharpSyntaxNode)node).Accept(this); 696210"];
1162 [label="if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    } 696211"];
1163 [label="resultBinder.ContainingMemberOrLambda 696212"];
1164 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 696213"];
1165 [label="var merged = _container as MergedNamespaceSymbol; 696214"];
1166 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 696215"];
1167 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 696216"];
1168 [label="((object)merged != null) 696217"];
1169 [label="_container 696218"];
1170 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 696219"];
1171 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 696220"];
1172 [label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        } 696221"];
1173 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 696222"];
1174 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 696223"];
1175 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 696224"];
1176 [label="new InContainerBinder(typeSymbol, resultBinder) 696225"];
1177 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 696226"];
1178 [label="param InContainerBinder(Binder next) 696227"];
1179 [label="param InContainerBinder(Imports imports = null) 696228"];
1180 [label="param InContainerBinder(this) 696229"];
1181 [label="next 696230"];
1182 [label="param InContainerBinder(this) 696231"];
1183 [label="param Binder(Binder next) 696232"];
1184 [label="param Binder(this) 696233"];
1185 [label="param Binder(Conversions? conversions = null) 696234"];
1186 [label="internal CSharpCompilation Compilation { get; } 696235"];
1187 [label="Flags 696236"];
1188 [label="protected internal Binder? Next { get; } 696237"];
1189 [label="_lazyConversions 696238"];
1190 [label="_lazyOverloadResolution 696239"];
1191 [label="RoslynDebug.Assert(next != null); 696240"];
1192 [label="RoslynDebug.Assert(next != null); 696241"];
1193 [label="this.Flags 696242"];
1194 [label="this.Compilation 696243"];
1195 [label="_lazyConversions 696244"];
1196 [label="_container 696245"];
1197 [label="_computeImports 696246"];
1198 [label="_lazyImports 696247"];
1199 [label="_lazyImportChain 696248"];
1200 [label="_lazyQuickAttributeChecker 696249"];
1201 [label="Debug.Assert((object)container != null || imports != null); 696250"];
1202 [label="Debug.Assert((object)container != null || imports != null); 696251"];
1203 [label="_container 696252"];
1204 [label="_lazyImports = imports ?? Imports.Empty; 696253"];
1205 [label="_lazyImports = imports ?? Imports.Empty; 696254"];
1206 [label="_lazyImports 696255"];
1207 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 696256"];
1208 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 696257"];
1209 [label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 696258"];
1210 [label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 696259"];
1211 [label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 696260"];
1212 [label="new WithClassTypeParametersBinder(typeSymbol, resultBinder) 696261"];
1213 [label="param WithClassTypeParametersBinder(NamedTypeSymbol container) 696262"];
1214 [label="param WithClassTypeParametersBinder(Binder next) 696263"];
1215 [label="param WithClassTypeParametersBinder(this) 696264"];
1216 [label="next 696265"];
1217 [label="param WithClassTypeParametersBinder(this) 696266"];
1218 [label="param WithTypeParametersBinder(Binder next) 696267"];
1219 [label="param WithTypeParametersBinder(this) 696268"];
1220 [label="next 696269"];
1221 [label="param WithTypeParametersBinder(this) 696270"];
1222 [label="param Binder(Binder next) 696271"];
1223 [label="internal CSharpCompilation Compilation { get; } 696272"];
1224 [label="Flags 696273"];
1225 [label="protected internal Binder? Next { get; } 696274"];
1226 [label="_lazyConversions 696275"];
1227 [label="RoslynDebug.Assert(next != null); 696276"];
1228 [label="RoslynDebug.Assert(next != null); 696277"];
1229 [label="this.Flags 696278"];
1230 [label="this.Compilation 696279"];
1231 [label="_namedType 696280"];
1232 [label="_lazyTypeParameterMap 696281"];
1233 [label="Debug.Assert((object)container != null); 696282"];
1234 [label="Debug.Assert((object)container != null); 696283"];
1235 [label="_namedType 696284"];
1236 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 696285"];
1237 [label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 696286"];
1238 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 696287"];
1239 [label="param WithUnsafeRegionIfNecessary(this) 696288"];
1240 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 696289"];
1241 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 696290"];
1242 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 696291"];
1243 [label="param Includes(this BinderFlags self) 696292"];
1244 [label="param Includes(BinderFlags other) 696293"];
1245 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 696294"];
1246 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 696295"];
1247 [label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 696296"];
1248 [label="binderCache 696297"];
1249 [label="return _factory._binderCache; 696298"];
1250 [label="binderCache.TryAdd(key, resultBinder); 696299"];
1251 [label="binderCache.TryAdd(key, resultBinder); 696300"];
1252 [label="binderCache.TryAdd(key, resultBinder); 696301"];
1253 [label="binderCache.TryAdd(key, resultBinder); 696302"];
1254 [label="binderCache.TryAdd(key, resultBinder); 696303"];
1255 [label="return resultBinder; 696304"];
1256 [label="return ((CSharpSyntaxNode)node).Accept(this); 696305"];
1257 [label="_binderFactoryVisitorPool.Free(visitor); 696306"];
1258 [label="param GetDefaultTypeParameterConstraintClauses(TypeParameterListSyntax typeParameterList) 696307"];
1259 [label="param GetDefaultTypeParameterConstraintClauses(this) 696308"];
1260 [label="var builder = ArrayBuilder<TypeParameterConstraintClause>.GetInstance(typeParameterList.Parameters.Count); 696309"];
1261 [label="foreach (TypeParameterSyntax typeParameterSyntax in typeParameterList.Parameters)\n            {\n                builder.Add(GetDefaultTypeParameterConstraintClause(typeParameterSyntax));\n            } 696310"];
1262 [label="builder.Add(GetDefaultTypeParameterConstraintClause(typeParameterSyntax)); 696311"];
1263 [label="GetDefaultTypeParameterConstraintClause(typeParameterSyntax) 696312"];
1264 [label="param GetDefaultTypeParameterConstraintClause(TypeParameterSyntax typeParameterSyntax) 696313"];
1265 [label="param GetDefaultTypeParameterConstraintClause(bool isForOverride = false) 696314"];
1266 [label="param GetDefaultTypeParameterConstraintClause(this) 696315"];
1267 [label="return isForOverride || AreNullableAnnotationsEnabled(typeParameterSyntax.Identifier) ? TypeParameterConstraintClause.Empty : TypeParameterConstraintClause.ObliviousNullabilityIfReferenceType; 696316"];
1268 [label="AreNullableAnnotationsEnabled(typeParameterSyntax.Identifier) 696317"];
1269 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 696318"];
1270 [label="param AreNullableAnnotationsEnabled(this) 696319"];
1271 [label="RoslynDebug.Assert(token.SyntaxTree is object); 696320"];
1272 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 696321"];
1273 [label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 696322"];
1274 [label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 696323"];
1275 [label="param AreNullableAnnotationsEnabled(int position) 696324"];
1276 [label="param AreNullableAnnotationsEnabled(this) 696325"];
1277 [label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 696326"];
1278 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 696327"];
1279 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 696328"];
1280 [label="context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            } 696329"];
1281 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 696330"];
1282 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 696331"];
1283 [label="AreNullableAnnotationsGloballyEnabled() 696332"];
1284 [label="param AreNullableAnnotationsGloballyEnabled(this) 696333"];
1285 [label="RoslynDebug.Assert(Next is object); 696334"];
1286 [label="Next.AreNullableAnnotationsGloballyEnabled() 696335"];
1287 [label="param AreNullableAnnotationsGloballyEnabled(this) 696336"];
1288 [label="param AreNullableAnnotationsGloballyEnabled(this) 696337"];
1289 [label="GetGlobalAnnotationState() 696338"];
1290 [label="param GetGlobalAnnotationState(this) 696339"];
1291 [label="switch (Compilation.Options.NullableContextOptions)\n            {\n                case NullableContextOptions.Enable:\n                case NullableContextOptions.Annotations:\n                    return true;\n\n                case NullableContextOptions.Disable:\n                case NullableContextOptions.Warnings:\n                    return false;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);\n            } 696340"];
1292 [label="return false; 696341"];
1293 [label="return GetGlobalAnnotationState(); 696342"];
1294 [label="return Next.AreNullableAnnotationsGloballyEnabled(); 696343"];
1295 [label="return isForOverride || AreNullableAnnotationsEnabled(typeParameterSyntax.Identifier) ? TypeParameterConstraintClause.Empty : TypeParameterConstraintClause.ObliviousNullabilityIfReferenceType; 696344"];
1296 [label="isForOverride || AreNullableAnnotationsEnabled(typeParameterSyntax.Identifier) 696345"];
1297 [label="builder.Add(GetDefaultTypeParameterConstraintClause(typeParameterSyntax)); 696346"];
1298 [label="return builder.ToImmutableAndFree(); 696347"];
1299 [label="Debug.Assert(node != null); 696348"];
1300 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 696349"];
1301 [label="NodeUsage extraInfo = NodeUsage.Normal; 696350"];
1302 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 696351"];
1303 [label="VisitTypeDeclarationCore(node) 696352"];
1304 [label="NodeUsage extraInfo = NodeUsage.Normal; 696353"];
1305 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 696354"];
1306 [label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 696355"];
1307 [label="VisitTypeDeclarationCore(parent, extraInfo) 696356"];
1308 [label="CreateBinderCacheKey(parent, extraInfo) 696357"];
1309 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 696358"];
1310 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 696359"];
1311 [label="return new BinderCacheKey(node, usage); 696360"];
1312 [label="new BinderCacheKey(node, usage) 696361"];
1313 [label="param BinderCacheKey(this) 696362"];
1314 [label="var key = CreateBinderCacheKey(parent, extraInfo); 696363"];
1315 [label="Binder resultBinder; 696364"];
1316 [label="binderCache 696365"];
1317 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 696366"];
1318 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 696367"];
1319 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 696368"];
1320 [label="param TypeConversions(AssemblySymbol corLibrary) 696369"];
1321 [label="param TypeConversions(bool includeNullability = false) 696370"];
1322 [label="param TypeConversions(this) 696371"];
1323 [label="corLibrary 696372"];
1324 [label="0 696373"];
1325 [label="includeNullability 696374"];
1326 [label="null 696375"];
1327 [label="param TypeConversions(this) 696376"];
1328 [label="param TypeConversions(AssemblySymbol corLibrary) 696377"];
1329 [label="param TypeConversions(int currentRecursionDepth) 696378"];
1330 [label="param TypeConversions(bool includeNullability) 696379"];
1331 [label="param TypeConversions(TypeConversions otherNullabilityOpt) 696380"];
1332 [label="param TypeConversions(this) 696381"];
1333 [label="corLibrary 696382"];
1334 [label="currentRecursionDepth 696383"];
1335 [label="includeNullability 696384"];
1336 [label="otherNullabilityOpt 696385"];
1337 [label="param TypeConversions(this) 696386"];
1338 [label="param ConversionsBase(AssemblySymbol corLibrary) 696387"];
1339 [label="param ConversionsBase(int currentRecursionDepth) 696388"];
1340 [label="param ConversionsBase(bool includeNullability) 696389"];
1341 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 696390"];
1342 [label="param ConversionsBase(this) 696391"];
1343 [label="corLibrary 696392"];
1344 [label="currentRecursionDepth 696393"];
1345 [label="IncludeNullability 696394"];
1346 [label="_lazyOtherNullability 696395"];
1347 [label="Debug.Assert((object)corLibrary != null); 696396"];
1348 [label="Debug.Assert((object)corLibrary != null); 696397"];
1349 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 696398"];
1350 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 696399"];
1351 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 696400"];
1352 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 696401"];
1353 [label="this.corLibrary 696402"];
1354 [label="this.currentRecursionDepth 696403"];
1355 [label="IncludeNullability 696404"];
1356 [label="_lazyOtherNullability 696405"];
1357 [label="var diagnostics = c.GetDiagnostics(); 696406"];
1358 [label="Debug.Assert(node != null); 696407"];
1359 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 696408"];
1360 [label="param VisitFieldDeclaration(FieldDeclarationSyntax parent) 696409"];
1361 [label="param VisitFieldDeclaration(this) 696410"];
1362 [label="return VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers); 696411"];
1363 [label="VisitCore(parent.Parent) 696412"];
1364 [label="param VisitCore(SyntaxNode node) 696413"];
1365 [label="param VisitCore(this) 696414"];
1366 [label="return ((CSharpSyntaxNode)node).Accept(this); 696415"];
1367 [label="VisitTypeDeclarationCore(node) 696416"];
1368 [label="NodeUsage extraInfo = NodeUsage.Normal; 696417"];
1369 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 696418"];
1370 [label="VisitTypeDeclarationCore(parent, extraInfo) 696419"];
1371 [label="CreateBinderCacheKey(parent, extraInfo) 696420"];
1372 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 696421"];
1373 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 696422"];
1374 [label="return new BinderCacheKey(node, usage); 696423"];
1375 [label="new BinderCacheKey(node, usage) 696424"];
1376 [label="param BinderCacheKey(this) 696425"];
1377 [label="var key = CreateBinderCacheKey(parent, extraInfo); 696426"];
1378 [label="Binder resultBinder; 696427"];
1379 [label="binderCache 696428"];
1380 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 696429"];
1381 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 696430"];
1382 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 696431"];
1383 [label="VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers) 696432"];
1384 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 696433"];
1385 [label="param WithUnsafeRegionIfNecessary(this) 696434"];
1386 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 696435"];
1387 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 696436"];
1388 [label="param Includes(BinderFlags other) 696437"];
1389 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 696438"];
1390 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 696439"];
1391 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 696440"];
1392 [label="Debug.Assert((object)containing != null); 696441"];
1393 [label="Debug.Assert((object)containing != null); 696442"];
1394 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 696443"];
1395 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 696444"];
1396 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 696445"];
1397 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 696446"];
1398 [label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 696447"];
1399 [label="param BinderWithContainingMemberOrLambda(Binder next) 696448"];
1400 [label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 696449"];
1401 [label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 696450"];
1402 [label="param BinderWithContainingMemberOrLambda(this) 696451"];
1403 [label="next 696452"];
1404 [label="flags 696453"];
1405 [label="param BinderWithContainingMemberOrLambda(this) 696454"];
1406 [label="param Binder(Binder next) 696455"];
1407 [label="param Binder(BinderFlags flags) 696456"];
1408 [label="param Binder(this) 696457"];
1409 [label="internal CSharpCompilation Compilation { get; } 696458"];
1410 [label="Flags 696459"];
1411 [label="protected internal Binder? Next { get; } 696460"];
1412 [label="_lazyConversions 696461"];
1413 [label="_lazyOverloadResolution 696462"];
1414 [label="RoslynDebug.Assert(next != null); 696463"];
1415 [label="RoslynDebug.Assert(next != null); 696464"];
1416 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 696465"];
1417 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 696466"];
1418 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 696467"];
1419 [label="param Includes(this BinderFlags self) 696468"];
1420 [label="param Includes(BinderFlags other) 696469"];
1421 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 696470"];
1422 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 696471"];
1423 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 696472"];
1424 [label="param Includes(this BinderFlags self) 696473"];
1425 [label="param Includes(BinderFlags other) 696474"];
1426 [label="Next 696475"];
1427 [label="this.Flags 696476"];
1428 [label="this.Compilation 696477"];
1429 [label="_containingMemberOrLambda 696478"];
1430 [label="Debug.Assert(containingMemberOrLambda != null); 696479"];
1431 [label="Debug.Assert(containingMemberOrLambda != null); 696480"];
1432 [label="_containingMemberOrLambda 696481"];
1433 [label="var diagnostics = c.GetDiagnostics(); 696482"];
1434 [label="param BindType(ExpressionSyntax syntax) 696483"];
1435 [label="param BindType(DiagnosticBag diagnostics) 696484"];
1436 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 696485"];
1437 [label="param BindType(bool suppressUseSiteDiagnostics = false) 696486"];
1438 [label="param BindType(this) 696487"];
1439 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 696488"];
1440 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 696489"];
1441 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 696490"];
1442 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 696491"];
1443 [label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 696492"];
1444 [label="param BindTypeOrAlias(ExpressionSyntax syntax) 696493"];
1445 [label="param BindTypeOrAlias(DiagnosticBag diagnostics) 696494"];
1446 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 696495"];
1447 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 696496"];
1448 [label="param BindTypeOrAlias(this) 696497"];
1449 [label="Debug.Assert(diagnostics != null); 696498"];
1450 [label="Debug.Assert(diagnostics != null); 696499"];
1451 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 696500"];
1452 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 696501"];
1453 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 696502"];
1454 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 696503"];
1455 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 696504"];
1456 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 696505"];
1457 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 696506"];
1458 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 696507"];
1459 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 696508"];
1460 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 696509"];
1461 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 696510"];
1462 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 696511"];
1463 [label="switch (syntax.Kind())\n            {\n                case SyntaxKind.NullableType:\n                    return bindNullable(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.PredefinedType:\n                    return bindPredefined(syntax, diagnostics);\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);\n\n                case SyntaxKind.AliasQualifiedName:\n                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n\n                case SyntaxKind.QualifiedName:\n                    {\n                        var node = (QualifiedNameSyntax)syntax;\n                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.SimpleMemberAccessExpression:\n                    {\n                        var node = (MemberAccessExpressionSyntax)syntax;\n                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.ArrayType:\n                    {\n                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);\n                    }\n\n                case SyntaxKind.PointerType:\n                    return bindPointer(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.FunctionPointerType:\n                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;\n                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)\n                    {\n                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;\n                        var asterisk = functionPointerTypeSyntax.AsteriskToken;\n                        RoslynDebug.Assert(@delegate.SyntaxTree is object);\n                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));\n                    }\n\n                    return TypeWithAnnotations.Create(\n                        FunctionPointerTypeSymbol.CreateFromSource(\n                            functionPointerTypeSyntax,\n                            this,\n                            diagnostics,\n                            basesBeingResolved,\n                            suppressUseSiteDiagnostics));\n\n                case SyntaxKind.OmittedTypeArgument:\n                    {\n                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);\n                    }\n\n                case SyntaxKind.TupleType:\n                    {\n                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;\n                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));\n                    }\n\n                case SyntaxKind.RefType:\n                    {\n                        // ref needs to be handled by the caller\n                        var refTypeSyntax = (RefTypeSyntax)syntax;\n                        var refToken = refTypeSyntax.RefKeyword;\n                        if (!syntax.HasErrors)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());\n                        }\n\n                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                default:\n                    {\n                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind\n                        // is attempted to be bound as a type pattern.\n                        return createErrorType(syntax);\n                    }\n            } 696512"];
1464 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 696513"];
1465 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 696514"];
1466 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 696515"];
1467 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 696516"];
1468 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 696517"];
1469 [label="BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null) 696518"];
1470 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(IdentifierNameSyntax node) 696519"];
1471 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 696520"];
1472 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 696521"];
1473 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 696522"];
1474 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 696523"];
1475 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 696524"];
1476 [label="var identifierValueText = node.Identifier.ValueText; 696525"];
1477 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 696526"];
1478 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 696527"];
1479 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 696528"];
1480 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 696529"];
1481 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 696530"];
1482 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 696531"];
1483 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 696532"];
1484 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 696533"];
1485 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 696534"];
1486 [label="param CreateErrorIfLookupOnTypeParameter(string name) 696535"];
1487 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 696536"];
1488 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 696537"];
1489 [label="param CreateErrorIfLookupOnTypeParameter(this) 696538"];
1490 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 696539"];
1491 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 696540"];
1492 [label="return null; 696541"];
1493 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 696542"];
1494 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 696543"];
1495 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 696544"];
1496 [label="CreatePool() 696545"];
1497 [label="ObjectPool<LookupResult> pool = null; 696546"];
1498 [label="pool = new ObjectPool<LookupResult>(() => new LookupResult(pool), 128); 696547"];
1499 [label="pool = new ObjectPool<LookupResult>(() => new LookupResult(pool), 128); 696548"];
1500 [label="return pool; 696549"];
1501 [label="s_poolInstance = CreatePool() 696550"];
1502 [label="LookupResult.GetInstance() 696551"];
1503 [label="var instance = s_poolInstance.Allocate(); 696552"];
1504 [label="var instance = s_poolInstance.Allocate(); 696553"];
1505 [label="var instance = s_poolInstance.Allocate(); 696554"];
1506 [label="param LookupResult(ObjectPool<LookupResult> pool) 696555"];
1507 [label="param LookupResult(this) 696556"];
1508 [label="_kind 696557"];
1509 [label="_symbolList 696558"];
1510 [label="_error 696559"];
1511 [label="_pool 696560"];
1512 [label="_pool 696561"];
1513 [label="_kind 696562"];
1514 [label="_symbolList = new ArrayBuilder<Symbol>(); 696563"];
1515 [label="_symbolList 696564"];
1516 [label="_error = null; 696565"];
1517 [label="_error 696566"];
1518 [label="var instance = s_poolInstance.Allocate(); 696567"];
1519 [label="instance.IsClear 696568"];
1520 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 696569"];
1521 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696570"];
1522 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696571"];
1523 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696572"];
1524 [label="Debug.Assert(instance.IsClear); 696573"];
1525 [label="return instance; 696574"];
1526 [label="var result = LookupResult.GetInstance(); 696575"];
1527 [label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 696576"];
1528 [label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 696577"];
1529 [label="GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()) 696578"];
1530 [label="param GetSimpleNameLookupOptions(NameSyntax node) 696579"];
1531 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 696580"];
1532 [label="if (SyntaxFacts.IsAttributeName(node))\n            {\n                //  SPEC:   By convention, attribute classes are named with a suffix of Attribute.\n                //  SPEC:   An attribute-name of the form type-name may either include or omit this suffix.\n                //  SPEC:   If an attribute class is found both with and without this suffix, an ambiguity\n                //  SPEC:   is present, and a compile-time error results. If the attribute-name is spelled\n                //  SPEC:   such that its right-most identifier is a verbatim identifier (§2.4.2), then only\n                //  SPEC:   an attribute without a suffix is matched, thus enabling such an ambiguity to be resolved.\n\n                return isVerbatimIdentifier ? LookupOptions.VerbatimNameAttributeTypeOnly : LookupOptions.AttributeTypeOnly;\n            }\n            else\n            {\n                return LookupOptions.NamespacesOrTypesOnly;\n            } 696581"];
1533 [label="return LookupOptions.NamespacesOrTypesOnly; 696582"];
1534 [label="HashSet<DiagnosticInfo> useSiteDiagnostics = null; 696583"];
1535 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 696584"];
1536 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 696585"];
1537 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 696586"];
1538 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 696587"];
1539 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 696588"];
1540 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 696589"];
1541 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 696590"];
1542 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 696591"];
1543 [label="param LookupSymbolsSimpleName(LookupResult result) 696592"];
1544 [label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 696593"];
1545 [label="param LookupSymbolsSimpleName(string plainName) 696594"];
1546 [label="param LookupSymbolsSimpleName(int arity) 696595"];
1547 [label="param LookupSymbolsSimpleName(ConsList<TypeSymbol> basesBeingResolved) 696596"];
1548 [label="param LookupSymbolsSimpleName(LookupOptions options) 696597"];
1549 [label="param LookupSymbolsSimpleName(bool diagnose) 696598"];
1550 [label="param LookupSymbolsSimpleName(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 696599"];
1551 [label="param LookupSymbolsSimpleName(this) 696600"];
1552 [label="if (options.IsAttributeTypeLookup())\n            {\n                this.LookupAttributeType(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 696601"];
1553 [label="options.IsAttributeTypeLookup() 696602"];
1554 [label="param IsAttributeTypeLookup(this LookupOptions options) 696603"];
1555 [label="return (options & LookupOptions.AttributeTypeOnly) == LookupOptions.AttributeTypeOnly; 696604"];
1556 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696605"];
1557 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696606"];
1558 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696607"];
1559 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696608"];
1560 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696609"];
1561 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696610"];
1562 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696611"];
1563 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696612"];
1564 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 696613"];
1565 [label="param LookupSymbolsOrMembersInternal(LookupResult result) 696614"];
1566 [label="param LookupSymbolsOrMembersInternal(NamespaceOrTypeSymbol qualifierOpt) 696615"];
1567 [label="param LookupSymbolsOrMembersInternal(string name) 696616"];
1568 [label="param LookupSymbolsOrMembersInternal(int arity) 696617"];
1569 [label="param LookupSymbolsOrMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 696618"];
1570 [label="param LookupSymbolsOrMembersInternal(LookupOptions options) 696619"];
1571 [label="param LookupSymbolsOrMembersInternal(bool diagnose) 696620"];
1572 [label="param LookupSymbolsOrMembersInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 696621"];
1573 [label="param LookupSymbolsOrMembersInternal(this) 696622"];
1574 [label="if ((object)qualifierOpt == null)\n            {\n                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n            } 696623"];
1575 [label="if ((object)qualifierOpt == null)\n            {\n                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n            } 696624"];
1576 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696625"];
1577 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696626"];
1578 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696627"];
1579 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696628"];
1580 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696629"];
1581 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696630"];
1582 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696631"];
1583 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 696632"];
1584 [label="param LookupSymbolsInternal(LookupResult result) 696633"];
1585 [label="param LookupSymbolsInternal(string name) 696634"];
1586 [label="param LookupSymbolsInternal(int arity) 696635"];
1587 [label="param LookupSymbolsInternal(ConsList<TypeSymbol> basesBeingResolved) 696636"];
1588 [label="param LookupSymbolsInternal(LookupOptions options) 696637"];
1589 [label="param LookupSymbolsInternal(bool diagnose) 696638"];
1590 [label="param LookupSymbolsInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 696639"];
1591 [label="param LookupSymbolsInternal(this) 696640"];
1592 [label="result.IsClear 696641"];
1593 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 696642"];
1594 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696643"];
1595 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696644"];
1596 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696645"];
1597 [label="Debug.Assert(result.IsClear); 696646"];
1598 [label="Debug.Assert(options.AreValid()); 696647"];
1599 [label="options.AreValid() 696648"];
1600 [label="param AreValid(this LookupOptions options) 696649"];
1601 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 696650"];
1602 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 696651"];
1603 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 696652"];
1604 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 696653"];
1605 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 696654"];
1606 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 696655"];
1607 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 696656"];
1608 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 696657"];
1609 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 696658"];
1610 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 696659"];
1611 [label="return OnlyOneBitSet(onlyOptions); 696660"];
1612 [label="OnlyOneBitSet(onlyOptions) 696661"];
1613 [label="param OnlyOneBitSet(LookupOptions o) 696662"];
1614 [label="return (o & (o - 1)) == 0; 696663"];
1615 [label="return (o & (o - 1)) == 0; 696664"];
1616 [label="Binder binder = null; 696665"];
1617 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 696666"];
1618 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 696667"];
1619 [label="result.IsMultiViable 696668"];
1620 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 696669"];
1621 [label="Kind 696670"];
1622 [label="get\n            {\n                return _kind;\n            } 696671"];
1623 [label="return _kind; 696672"];
1624 [label="return Kind == LookupResultKind.Viable; 696673"];
1625 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 696674"];
1626 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 696675"];
1627 [label="if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                } 696676"];
1628 [label="if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                } 696677"];
1629 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 696678"];
1630 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 696679"];
1631 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 696680"];
1632 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 696681"];
1633 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 696682"];
1634 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 696683"];
1635 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 696684"];
1636 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 696685"];
1637 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 696686"];
1638 [label="param LookupSymbolsInSingleBinder(LookupResult result) 696687"];
1639 [label="param LookupSymbolsInSingleBinder(string name) 696688"];
1640 [label="param LookupSymbolsInSingleBinder(int arity) 696689"];
1641 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 696690"];
1642 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 696691"];
1643 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 696692"];
1644 [label="param LookupSymbolsInSingleBinder(bool diagnose) 696693"];
1645 [label="param LookupSymbolsInSingleBinder(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 696694"];
1646 [label="param LookupSymbolsInSingleBinder(this) 696695"];
1647 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 696696"];
1648 [label="result.IsClear 696697"];
1649 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 696698"];
1650 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696699"];
1651 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696700"];
1652 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696701"];
1653 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 696702"];
1654 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 696703"];
1655 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 696704"];
1656 [label="param LookupSymbolsInSingleBinder(LookupResult result) 696705"];
1657 [label="param LookupSymbolsInSingleBinder(string name) 696706"];
1658 [label="param LookupSymbolsInSingleBinder(int arity) 696707"];
1659 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 696708"];
1660 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 696709"];
1661 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 696710"];
1662 [label="param LookupSymbolsInSingleBinder(bool diagnose) 696711"];
1663 [label="param LookupSymbolsInSingleBinder(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 696712"];
1664 [label="param LookupSymbolsInSingleBinder(this) 696713"];
1665 [label="result.IsClear 696714"];
1666 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 696715"];
1667 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696716"];
1668 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696717"];
1669 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696718"];
1670 [label="Debug.Assert(result.IsClear); 696719"];
1671 [label="LookupMask 696720"];
1672 [label="get\n            {\n                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;\n            } 696721"];
1673 [label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 696722"];
1674 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 696723"];
1675 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 696724"];
1676 [label="if ((options & LookupMask) != 0)\n            {\n                return;\n            } 696725"];
1677 [label="TypeParameterMap 696726"];
1678 [label="get\n            {\n                if (_lazyTypeParameterMap == null)\n                {\n                    var result = new MultiDictionary<string, TypeParameterSymbol>();\n                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)\n                    {\n                        result.Add(tps.Name, tps);\n                    }\n                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);\n                }\n                return _lazyTypeParameterMap;\n            } 696727"];
1679 [label="if (_lazyTypeParameterMap == null)\n                {\n                    var result = new MultiDictionary<string, TypeParameterSymbol>();\n                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)\n                    {\n                        result.Add(tps.Name, tps);\n                    }\n                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);\n                } 696728"];
1680 [label="if (_lazyTypeParameterMap == null)\n                {\n                    var result = new MultiDictionary<string, TypeParameterSymbol>();\n                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)\n                    {\n                        result.Add(tps.Name, tps);\n                    }\n                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);\n                } 696729"];
1681 [label="var result = new MultiDictionary<string, TypeParameterSymbol>(); 696730"];
1682 [label="foreach (TypeParameterSymbol tps in _namedType.TypeParameters)\n                    {\n                        result.Add(tps.Name, tps);\n                    } 696731"];
1683 [label="result.Add(tps.Name, tps); 696732"];
1684 [label="result.Add(tps.Name, tps); 696733"];
1685 [label="result.Add(tps.Name, tps); 696734"];
1686 [label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 696735"];
1687 [label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 696736"];
1688 [label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 696737"];
1689 [label="return _lazyTypeParameterMap; 696738"];
1690 [label="foreach (var typeParameter in TypeParameterMap[name])\n            {\n                result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics));\n            } 696739"];
1691 [label="foreach (var typeParameter in TypeParameterMap[name])\n            {\n                result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics));\n            } 696740"];
1692 [label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)); 696741"];
1693 [label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)); 696742"];
1694 [label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)); 696743"];
1695 [label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)); 696744"];
1696 [label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)); 696745"];
1697 [label="originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics) 696746"];
1698 [label="param CheckViability(Symbol symbol) 696747"];
1699 [label="param CheckViability(int arity) 696748"];
1700 [label="param CheckViability(LookupOptions options) 696749"];
1701 [label="param CheckViability(TypeSymbol accessThroughType) 696750"];
1702 [label="param CheckViability(bool diagnose) 696751"];
1703 [label="param CheckViability(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 696752"];
1704 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 696753"];
1705 [label="param CheckViability(this) 696754"];
1706 [label="bool inaccessibleViaQualifier; 696755"];
1707 [label="DiagnosticInfo diagInfo; 696756"];
1708 [label="var unwrappedSymbol = symbol.Kind == SymbolKind.Alias\n                ? ((AliasSymbol)symbol).GetAliasTarget(basesBeingResolved)\n                : symbol; 696757"];
1709 [label="symbol.Kind == SymbolKind.Alias 696758"];
1710 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696759"];
1711 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696760"];
1712 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696761"];
1713 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696762"];
1714 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696763"];
1715 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696764"];
1716 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696765"];
1717 [label="WrongArity(symbol, arity, diagnose, options, out diagInfo) 696766"];
1718 [label="param WrongArity(Symbol symbol) 696767"];
1719 [label="param WrongArity(int arity) 696768"];
1720 [label="param WrongArity(bool diagnose) 696769"];
1721 [label="param WrongArity(LookupOptions options) 696770"];
1722 [label="param WrongArity(out DiagnosticInfo diagInfo) 696771"];
1723 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 696772"];
1724 [label="if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    } 696773"];
1725 [label="if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    } 696774"];
1726 [label="diagInfo = null; 696775"];
1727 [label="return false; 696776"];
1728 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696777"];
1729 [label="InCref 696778"];
1730 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 696779"];
1731 [label="return this.Flags.Includes(BinderFlags.Cref); 696780"];
1732 [label="return this.Flags.Includes(BinderFlags.Cref); 696781"];
1733 [label="this.Flags.Includes(BinderFlags.Cref) 696782"];
1734 [label="param Includes(this BinderFlags self) 696783"];
1735 [label="param Includes(BinderFlags other) 696784"];
1736 [label="if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696785"];
1737 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696786"];
1738 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696787"];
1739 [label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696788"];
1740 [label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696789"];
1741 [label="InCref 696790"];
1742 [label="if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696791"];
1743 [label="InCref 696792"];
1744 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696793"];
1745 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696794"];
1746 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696795"];
1747 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696796"];
1748 [label="RefineAccessThroughType(options, accessThroughType) 696797"];
1749 [label="param RefineAccessThroughType(LookupOptions options) 696798"];
1750 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 696799"];
1751 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 696800"];
1752 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 696801"];
1753 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 696802"];
1754 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 696803"];
1755 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696804"];
1756 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696805"];
1757 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696806"];
1758 [label="this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved) 696807"];
1759 [label="param IsAccessible(Symbol symbol) 696808"];
1760 [label="param IsAccessible(TypeSymbol accessThroughType) 696809"];
1761 [label="param IsAccessible(out bool failedThroughTypeCheck) 696810"];
1762 [label="param IsAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 696811"];
1763 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 696812"];
1764 [label="param IsAccessible(this) 696813"];
1765 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 696814"];
1766 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 696815"];
1767 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 696816"];
1768 [label="param Includes(this BinderFlags self) 696817"];
1769 [label="param Includes(BinderFlags other) 696818"];
1770 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696819"];
1771 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696820"];
1772 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696821"];
1773 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696822"];
1774 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696823"];
1775 [label="IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 696824"];
1776 [label="param IsAccessibleHelper(Symbol symbol) 696825"];
1777 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 696826"];
1778 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 696827"];
1779 [label="param IsAccessibleHelper(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 696828"];
1780 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 696829"];
1781 [label="param IsAccessibleHelper(this) 696830"];
1782 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696831"];
1783 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696832"];
1784 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696833"];
1785 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696834"];
1786 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696835"];
1787 [label="Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 696836"];
1788 [label="param IsAccessibleHelper(Symbol symbol) 696837"];
1789 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 696838"];
1790 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 696839"];
1791 [label="param IsAccessibleHelper(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 696840"];
1792 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 696841"];
1793 [label="param IsAccessibleHelper(this) 696842"];
1794 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696843"];
1795 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696844"];
1796 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696845"];
1797 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696846"];
1798 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696847"];
1799 [label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696848"];
1800 [label="this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 696849"];
1801 [label="param IsSymbolAccessibleConditional(Symbol symbol) 696850"];
1802 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 696851"];
1803 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 696852"];
1804 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 696853"];
1805 [label="param IsSymbolAccessibleConditional(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 696854"];
1806 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 696855"];
1807 [label="param IsSymbolAccessibleConditional(this) 696856"];
1808 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 696857"];
1809 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 696858"];
1810 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 696859"];
1811 [label="param Includes(this BinderFlags self) 696860"];
1812 [label="param Includes(BinderFlags other) 696861"];
1813 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696862"];
1814 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696863"];
1815 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696864"];
1816 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696865"];
1817 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696866"];
1818 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696867"];
1819 [label="AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 696868"];
1820 [label="param IsSymbolAccessible(Symbol symbol) 696869"];
1821 [label="param IsSymbolAccessible(NamedTypeSymbol within) 696870"];
1822 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 696871"];
1823 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 696872"];
1824 [label="param IsSymbolAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 696873"];
1825 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 696874"];
1826 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 696875"];
1827 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 696876"];
1828 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 696877"];
1829 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 696878"];
1830 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 696879"];
1831 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 696880"];
1832 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 696881"];
1833 [label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved) 696882"];
1834 [label="param IsSymbolAccessibleCore(Symbol symbol) 696883"];
1835 [label="param IsSymbolAccessibleCore(Symbol within) 696884"];
1836 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 696885"];
1837 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 696886"];
1838 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 696887"];
1839 [label="param IsSymbolAccessibleCore(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 696888"];
1840 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 696889"];
1841 [label="Debug.Assert((object)symbol != null); 696890"];
1842 [label="Debug.Assert((object)symbol != null); 696891"];
1843 [label="Debug.Assert((object)within != null); 696892"];
1844 [label="Debug.Assert((object)within != null); 696893"];
1845 [label="Debug.Assert(within.IsDefinition); 696894"];
1846 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 696895"];
1847 [label="failedThroughTypeCheck = false; 696896"];
1848 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.ArrayType:\n                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.PointerType:\n                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.NamedType:\n                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Alias:\n                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Discard:\n                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.FunctionPointerType:\n                    var funcPtr = (FunctionPointerTypeSymbol)symbol;\n                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n\n                    foreach (var param in funcPtr.Signature.Parameters)\n                    {\n                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                        {\n                            return false;\n                        }\n                    }\n\n                    return true;\n\n                case SymbolKind.ErrorType:\n                    // Always assume that error types are accessible.\n                    return true;\n\n                case SymbolKind.TypeParameter:\n                case SymbolKind.Parameter:\n                case SymbolKind.Local:\n                case SymbolKind.Label:\n                case SymbolKind.Namespace:\n                case SymbolKind.DynamicType:\n                case SymbolKind.Assembly:\n                case SymbolKind.NetModule:\n                case SymbolKind.RangeVariable:\n                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:\n                    // These types of symbols are always accessible (if visible).\n                    return true;\n\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                    if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    }\n\n                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 696897"];
1849 [label="return true; 696898"];
1850 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696899"];
1851 [label="InCref 696900"];
1852 [label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696901"];
1853 [label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696902"];
1854 [label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696903"];
1855 [label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696904"];
1856 [label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696905"];
1857 [label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696906"];
1858 [label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696907"];
1859 [label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696908"];
1860 [label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696909"];
1861 [label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 696910"];
1862 [label="return LookupResult.Good(symbol); 696911"];
1863 [label="LookupResult.Good(symbol) 696912"];
1864 [label="param Good(Symbol symbol) 696913"];
1865 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 696914"];
1866 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 696915"];
1867 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 696916"];
1868 [label="new SingleLookupResult(LookupResultKind.Viable, symbol, null) 696917"];
1869 [label="param SingleLookupResult(LookupResultKind kind) 696918"];
1870 [label="param SingleLookupResult(Symbol symbol) 696919"];
1871 [label="param SingleLookupResult(DiagnosticInfo error) 696920"];
1872 [label="param SingleLookupResult(this) 696921"];
1873 [label="this.Kind 696922"];
1874 [label="this.Symbol 696923"];
1875 [label="this.Error 696924"];
1876 [label="return LookupResult.Good(symbol); 696925"];
1877 [label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)) 696926"];
1878 [label="param MergeEqual(SingleLookupResult result) 696927"];
1879 [label="param MergeEqual(this) 696928"];
1880 [label="Kind 696929"];
1881 [label="get\n            {\n                return _kind;\n            } 696930"];
1882 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 696931"];
1883 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 696932"];
1884 [label="Kind 696933"];
1885 [label="if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 696934"];
1886 [label="this.SetFrom(result); 696935"];
1887 [label="this.SetFrom(result) 696936"];
1888 [label="param SetFrom(SingleLookupResult other) 696937"];
1889 [label="param SetFrom(this) 696938"];
1890 [label="_kind 696939"];
1891 [label="_symbolList.Clear(); 696940"];
1892 [label="_symbolList.Add(other.Symbol); 696941"];
1893 [label="_symbolList.Add(other.Symbol); 696942"];
1894 [label="_error 696943"];
1895 [label="this.SetFrom(result); 696944"];
1896 [label="foreach (var typeParameter in TypeParameterMap[name])\n            {\n                result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics));\n            } 696945"];
1897 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696946"];
1898 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 696947"];
1899 [label="binder = scope; 696948"];
1900 [label="return binder; 696949"];
1901 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696950"];
1902 [label="diagnostics.Add(node, useSiteDiagnostics); 696951"];
1903 [label="diagnostics.Add(node, useSiteDiagnostics); 696952"];
1904 [label="diagnostics.Add(node, useSiteDiagnostics); 696953"];
1905 [label="diagnostics.Add(node, useSiteDiagnostics); 696954"];
1906 [label="Symbol bindingResult = null; 696955"];
1907 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 696956"];
1908 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 696957"];
1909 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 696958"];
1910 [label="IsViableType(result) 696959"];
1911 [label="param IsViableType(LookupResult result) 696960"];
1912 [label="result.IsMultiViable 696961"];
1913 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 696962"];
1914 [label="Kind 696963"];
1915 [label="get\n            {\n                return _kind;\n            } 696964"];
1916 [label="return _kind; 696965"];
1917 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 696966"];
1918 [label="result.Symbols 696967"];
1919 [label="get\n            {\n                return _symbolList;\n            } 696968"];
1920 [label="return _symbolList; 696969"];
1921 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 696970"];
1922 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 696971"];
1923 [label="return true; 696972"];
1924 [label="if (bindingResult is null)\n            {\n                bool wasError;\n\n                bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options);\n                if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n            } 696973"];
1925 [label="bool wasError; 696974"];
1926 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696975"];
1927 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696976"];
1928 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696977"];
1929 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696978"];
1930 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696979"];
1931 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696980"];
1932 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696981"];
1933 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696982"];
1934 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696983"];
1935 [label="ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 696984"];
1936 [label="param ResultSymbol(LookupResult result) 696985"];
1937 [label="param ResultSymbol(string simpleName) 696986"];
1938 [label="param ResultSymbol(int arity) 696987"];
1939 [label="param ResultSymbol(SyntaxNode where) 696988"];
1940 [label="param ResultSymbol(DiagnosticBag diagnostics) 696989"];
1941 [label="param ResultSymbol(bool suppressUseSiteDiagnostics) 696990"];
1942 [label="param ResultSymbol(out bool wasError) 696991"];
1943 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 696992"];
1944 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 696993"];
1945 [label="param ResultSymbol(this) 696994"];
1946 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696995"];
1947 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696996"];
1948 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696997"];
1949 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696998"];
1950 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696999"];
1951 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 697000"];
1952 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 697001"];
1953 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 697002"];
1954 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 697003"];
1955 [label="resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 697004"];
1956 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 697005"];
1957 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 697006"];
1958 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 697007"];
1959 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 697008"];
1960 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 697009"];
1961 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 697010"];
1962 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 697011"];
1963 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 697012"];
1964 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 697013"];
1965 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 697014"];
1966 [label="Debug.Assert(where != null); 697015"];
1967 [label="Debug.Assert(where != null); 697016"];
1968 [label="Debug.Assert(diagnostics != null); 697017"];
1969 [label="Debug.Assert(diagnostics != null); 697018"];
1970 [label="result.Symbols 697019"];
1971 [label="get\n            {\n                return _symbolList;\n            } 697020"];
1972 [label="return _symbolList; 697021"];
1973 [label="var symbols = result.Symbols; 697022"];
1974 [label="wasError = false; 697023"];
1975 [label="result.IsMultiViable 697024"];
1976 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 697025"];
1977 [label="Kind 697026"];
1978 [label="get\n            {\n                return _kind;\n            } 697027"];
1979 [label="return _kind; 697028"];
1980 [label="if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                } 697029"];
1981 [label="if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    } 697030"];
1982 [label="if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    } 697031"];
1983 [label="var singleResult = symbols[0]; 697032"];
1984 [label="var singleType = singleResult as TypeSymbol; 697033"];
1985 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 697034"];
1986 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 697035"];
1987 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 697036"];
1988 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 697037"];
1989 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 697038"];
1990 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 697039"];
1991 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 697040"];
1992 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 697041"];
1993 [label="ReportUseSiteDiagnostics(singleResult, diagnostics, where) 697042"];
1994 [label="param ReportUseSiteDiagnostics(Symbol symbol) 697043"];
1995 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 697044"];
1996 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 697045"];
1997 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 697046"];
1998 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 697047"];
1999 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 697048"];
2000 [label="return singleResult; 697049"];
2001 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 697050"];
2002 [label="return symbol; 697051"];
2003 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 697052"];
2004 [label="result.Free() 697053"];
2005 [label="param Free(this) 697054"];
2006 [label="this.Clear() 697055"];
2007 [label="param Clear(this) 697056"];
2008 [label="_kind 697057"];
2009 [label="_symbolList.Clear(); 697058"];
2010 [label="_error = null; 697059"];
2011 [label="_error 697060"];
2012 [label="this.Clear(); 697061"];
2013 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 697062"];
2014 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 697063"];
2015 [label="_pool.Free(this); 697064"];
2016 [label="_pool.Free(this); 697065"];
2017 [label="result.Free(); 697066"];
2018 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 697067"];
2019 [label="AreNullableAnnotationsEnabled(node.Identifier) 697068"];
2020 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 697069"];
2021 [label="param AreNullableAnnotationsEnabled(this) 697070"];
2022 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 697071"];
2023 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult) 697072"];
2024 [label="param CreateUnannotated(bool isNullableEnabled) 697073"];
2025 [label="param CreateUnannotated(Symbol symbol) 697074"];
2026 [label="if (symbol is null)\n                {\n                    return default;\n                } 697075"];
2027 [label="var type = symbol as TypeSymbol; 697076"];
2028 [label="return type is null ?\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 697077"];
2029 [label="type is null 697078"];
2030 [label="return type is null ?\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 697079"];
2031 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)) 697080"];
2032 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 697081"];
2033 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 697082"];
2034 [label="Debug.Assert(typeWithAnnotations.HasType); 697083"];
2035 [label="_typeWithAnnotations 697084"];
2036 [label="_symbol = null; 697085"];
2037 [label="_symbol 697086"];
2038 [label="_isNullableEnabled = false; 697087"];
2039 [label="_isNullableEnabled 697088"];
2040 [label="symbol.IsType 697089"];
2041 [label="=> !_typeWithAnnotations.IsDefault 697090"];
2042 [label="!_typeWithAnnotations.IsDefault 697091"];
2043 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 697092"];
2044 [label="symbol.IsType 697093"];
2045 [label="if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                } 697094"];
2046 [label="symbol.TypeWithAnnotations 697095"];
2047 [label="=> _typeWithAnnotations 697096"];
2048 [label="_typeWithAnnotations 697097"];
2049 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 697098"];
2050 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 697099"];
2051 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 697100"];
2052 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 697101"];
2053 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 697102"];
2054 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 697103"];
2055 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 697104"];
2056 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 697105"];
2057 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 697106"];
2058 [label="param ReportDiagnosticsIfObsolete(this) 697107"];
2059 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 697108"];
2060 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 697109"];
2061 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 697110"];
2062 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 697111"];
2063 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 697112"];
2064 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 697113"];
2065 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 697114"];
2066 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 697115"];
2067 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 697116"];
2068 [label="param ReportDiagnosticsIfObsolete(this) 697117"];
2069 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Event:\n                case SymbolKind.Property:\n                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);\n                    break;\n            } 697118"];
2070 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 697119"];
2071 [label="return symbol; 697120"];
2072 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 697121"];
2073 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 697122"];
2074 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 697123"];
2075 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 697124"];
2076 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 697125"];
2077 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 697126"];
2078 [label="param UnwrapAlias(DiagnosticBag diagnostics) 697127"];
2079 [label="param UnwrapAlias(SyntaxNode syntax) 697128"];
2080 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 697129"];
2081 [label="param UnwrapAlias(this) 697130"];
2082 [label="symbol.IsAlias 697131"];
2083 [label="=> _symbol?.Kind == SymbolKind.Alias 697132"];
2084 [label="_symbol 697133"];
2085 [label="_symbol?.Kind == SymbolKind.Alias 697134"];
2086 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 697135"];
2087 [label="return symbol; 697136"];
2088 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 697137"];
2089 [label="=> _typeWithAnnotations 697138"];
2090 [label="_typeWithAnnotations 697139"];
2091 [label="var diagnostics = c.GetDiagnostics(); 697140"];
2092 [label="null 697141"];
2093 [label="null 697142"];
2094 [label="new ConstantFieldsInProgress(null, null) 697143"];
2095 [label="param ConstantFieldsInProgress(SourceFieldSymbol fieldOpt) 697144"];
2096 [label="param ConstantFieldsInProgress(HashSet<SourceFieldSymbolWithSyntaxReference> dependencies) 697145"];
2097 [label="param ConstantFieldsInProgress(this) 697146"];
2098 [label="_fieldOpt 697147"];
2099 [label="_dependencies 697148"];
2100 [label="_fieldOpt 697149"];
2101 [label="_dependencies 697150"];
2102 [label="Empty = new ConstantFieldsInProgress(null, null) 697151"];
2103 [label="get { return (object)_fieldOpt == null; } 697152"];
2104 [label="return (object)_fieldOpt == null; 697153"];
2105 [label="return (object)_fieldOpt == null; 697154"];
2106 [label="diagnostics.Verify(expected); 697155"];
2107 [label="diagnostics.Verify(expected); 697156"];
2108 [label="diagnostics.Verify(expected) 697157"];
2109 [label="param Verify(this ImmutableArray<Diagnostic> actual) 697158"];
2110 [label="param Verify(params DiagnosticDescription[] expected) 697159"];
2111 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 697160"];
2112 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 697161"];
2113 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 697162"];
2114 [label="param Verify(this IEnumerable<Diagnostic> actual) 697163"];
2115 [label="param Verify(params DiagnosticDescription[] expected) 697164"];
2116 [label="Verify(actual, expected, errorCodeOnly: false); 697165"];
2117 [label="Verify(actual, expected, errorCodeOnly: false); 697166"];
2118 [label="Verify(actual, expected, errorCodeOnly: false); 697167"];
2119 [label="Verify(actual, expected, errorCodeOnly: false) 697168"];
2120 [label="param Verify(IEnumerable<Diagnostic> actual) 697169"];
2121 [label="param Verify(DiagnosticDescription[] expected) 697170"];
2122 [label="param Verify(bool errorCodeOnly) 697171"];
2123 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 697172"];
2124 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 697173"];
2125 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 697174"];
2126 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 697175"];
2127 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 697176"];
2128 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 697177"];
2129 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 697178"];
2130 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 697179"];
2131 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 697180"];
2132 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 697181"];
2133 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 697182"];
2134 [label="{ } 697183"];
2135 [label="None = { } 697184"];
2136 [label="null 697185"];
2137 [label="Any = null 697186"];
2138 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 697187"];
2139 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 697188"];
2140 [label="DiagnosticDescription.GetAssertText(expected, actual) 697189"];
2141 [label="param GetAssertText(DiagnosticDescription[] expected) 697190"];
2142 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 697191"];
2143 [label="const int CSharp = 1; 697192"];
2144 [label="const int VisualBasic = 2; 697193"];
2145 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 697194"];
2146 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 697195"];
2147 [label="actual.Any() && actual.First() is CSDiagnostic 697196"];
2148 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 697197"];
2149 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 697198"];
2150 [label="int indentDepth = (language == CSharp) ? 4 : 1; 697199"];
2151 [label="(language == CSharp) 697200"];
2152 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 697201"];
2153 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 697202"];
2154 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 697203"];
2155 [label="IsSortedOrEmpty(expected) 697204"];
2156 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 697205"];
2157 [label="new LinePositionComparer() 697206"];
2158 [label="param LinePositionComparer(this) 697207"];
2159 [label="Instance = new LinePositionComparer() 697208"];
2160 [label="var comparer = LinePositionComparer.Instance; 697209"];
2161 [label="DiagnosticDescription last = null; 697210"];
2162 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 697211"];
2163 [label="return true; 697212"];
2164 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 697213"];
2165 [label="actual = Sort(actual); 697214"];
2166 [label="Sort(actual) 697215"];
2167 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 697216"];
2168 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 697217"];
2169 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 697218"];
2170 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 697219"];
2171 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 697220"];
2172 [label="var assertText = new StringBuilder(); 697221"];
2173 [label="assertText.AppendLine(); 697222"];
2174 [label="int i; 697223"];
2175 [label="assertText.AppendLine('Expected:'); 697224"];
2176 [label="assertText.AppendLine('Expected:'); 697225"];
2177 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 697226"];
2178 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 697227"];
2179 [label="GetCommaSeparatedLines(assertText, expectedText); 697228"];
2180 [label="GetCommaSeparatedLines(assertText, expectedText); 697229"];
2181 [label="GetCommaSeparatedLines(assertText, expectedText) 697230"];
2182 [label="param GetCommaSeparatedLines(StringBuilder sb) 697231"];
2183 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 697232"];
2184 [label="int n = lines.Count; 697233"];
2185 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 697234"];
2186 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 697235"];
2187 [label="GetCommaSeparatedLines(assertText, expectedText); 697236"];
2188 [label="assertText.AppendLine('Actual:'); 697237"];
2189 [label="assertText.AppendLine('Actual:'); 697238"];
2190 [label="var actualText = ArrayBuilder<string>.GetInstance(); 697239"];
2191 [label="var e = actual.GetEnumerator(); 697240"];
2192 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 697241"];
2193 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 697242"];
2194 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 697243"];
2195 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 697244"];
2196 [label="assertText.AppendLine('Diff:'); 697245"];
2197 [label="assertText.AppendLine('Diff:'); 697246"];
2198 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 697247"];
2199 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 697248"];
2200 [label="new[] { '\\r', '\\n' } 697249"];
2201 [label="'\\r' 697250"];
2202 [label="'\\n' 697251"];
2203 [label="new[] { '\\r', '\\n' } 697252"];
2204 [label="new[] { '\\r', '\\n' } 697253"];
2205 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 697254"];
2206 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 697255"];
2207 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 697256"];
2208 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 697257"];
2209 [label="param DiffReport(IEnumerable<T> expected) 697258"];
2210 [label="param DiffReport(IEnumerable<T> actual) 697259"];
2211 [label="param DiffReport(string separator) 697260"];
2212 [label="param DiffReport(IEqualityComparer<T> comparer = null) 697261"];
2213 [label="param DiffReport(Func<T, string> toString = null) 697262"];
2214 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 697263"];
2215 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 697264"];
2216 [label="(comparer != null) 697265"];
2217 [label="EqualityComparer<T>.Default 697266"];
2218 [label="new LCS<T>(EqualityComparer<T>.Default) 697267"];
2219 [label="param LCS(IEqualityComparer<T> comparer) 697268"];
2220 [label="param LCS(this) 697269"];
2221 [label="1 697270"];
2222 [label="DeleteCost = 1 697271"];
2223 [label="1 697272"];
2224 [label="InsertCost = 1 697273"];
2225 [label="2 697274"];
2226 [label="UpdateCost = 2 697275"];
2227 [label="param LongestCommonSubsequence(this) 697276"];
2228 [label="_comparer 697277"];
2229 [label="_comparer 697278"];
2230 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 697279"];
2231 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 697280"];
2232 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 697281"];
2233 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 697282"];
2234 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 697283"];
2235 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 697284"];
2236 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 697285"];
2237 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 697286"];
2238 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 697287"];
2239 [label="lcs.CalculateDiff(expectedList, actualList, toString) 697288"];
2240 [label="param CalculateDiff(IList<T> sequenceA) 697289"];
2241 [label="param CalculateDiff(IList<T> sequenceB) 697290"];
2242 [label="param CalculateDiff(Func<T, string> toString) 697291"];
2243 [label="param CalculateDiff(this) 697292"];
2244 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 697293"];
2245 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 697294"];
2246 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 697295"];
2247 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 697296"];
2248 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 697297"];
2249 [label="param GetEdits(TSequence sequenceA) 697298"];
2250 [label="param GetEdits(int lengthA) 697299"];
2251 [label="param GetEdits(TSequence sequenceB) 697300"];
2252 [label="param GetEdits(int lengthB) 697301"];
2253 [label="param GetEdits(this) 697302"];
2254 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 697303"];
2255 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 697304"];
2256 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 697305"];
2257 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 697306"];
2258 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 697307"];
2259 [label="param ComputeCostMatrix(TSequence sequenceA) 697308"];
2260 [label="param ComputeCostMatrix(int lengthA) 697309"];
2261 [label="param ComputeCostMatrix(TSequence sequenceB) 697310"];
2262 [label="param ComputeCostMatrix(int lengthB) 697311"];
2263 [label="param ComputeCostMatrix(this) 697312"];
2264 [label="var la = lengthA + 1; 697313"];
2265 [label="var la = lengthA + 1; 697314"];
2266 [label="var lb = lengthB + 1; 697315"];
2267 [label="var lb = lengthB + 1; 697316"];
2268 [label="var d = new int[la, lb]; 697317"];
2269 [label="d[0, 0] = 0; 697318"];
2270 [label="d[0, 0] 697319"];
2271 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 697320"];
2272 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 697321"];
2273 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 697322"];
2274 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 697323"];
2275 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 697324"];
2276 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 697325"];
2277 [label="return d; 697326"];
2278 [label="int i = lengthA; 697327"];
2279 [label="int j = lengthB; 697328"];
2280 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 697329"];
2281 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 697330"];
2282 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 697331"];
2283 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 697332"];
2284 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 697333"];
2285 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 697334"];
2286 [label="param GetEdits(this) 697335"];
2287 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 697336"];
2288 [label="param CalculateDiff(this) 697337"];
2289 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 697338"];
2290 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 697339"];
2291 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 697340"];
2292 [label="actualText.Free(); 697341"];
2293 [label="expectedText.Free(); 697342"];
2294 [label="return assertText.ToString(); 697343"];
2295 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 697344"];
2296 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 697345"];
2297 [label="diagnostics.Verify(expected); 697346"];
2298 [label="VerifyAssemblyIds(c, diagnostics); 697347"];
2299 [label="VerifyAssemblyIds(c, diagnostics); 697348"];
2300 [label="VerifyAssemblyIds(c, diagnostics) 697349"];
2301 [label="param VerifyAssemblyIds(TCompilation c) 697350"];
2302 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 697351"];
2303 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 697352"];
2304 [label="VerifyAssemblyIds(c, diagnostics); 697353"];
2305 [label="return c; 697354"];
2 -> 0;
2 -> 1;
3 -> 1;
5 -> 4;
7 -> 6;
9 -> 8;
10 -> 3;
12 -> 11;
14 -> 13;
16 -> 15;
18 -> 17;
20 -> 19;
22 -> 21;
24 -> 23;
26 -> 25;
28 -> 27;
30 -> 29;
32 -> 31;
34 -> 33;
36 -> 35;
38 -> 37;
40 -> 39;
42 -> 41;
44 -> 43;
46 -> 45;
48 -> 47;
49 -> 0;
50 -> 0;
51 -> 49;
51 -> 50;
51 -> 0;
52 -> 51;
53 -> 0;
54 -> 0;
55 -> 53;
55 -> 54;
55 -> 51;
56 -> 55;
57 -> 0;
58 -> 57;
59 -> 58;
59 -> 57;
60 -> 59;
62 -> 0;
63 -> 61;
63 -> 62;
64 -> 63;
65 -> 0;
66 -> 0;
67 -> 65;
67 -> 66;
67 -> 0;
68 -> 67;
69 -> 0;
70 -> 0;
71 -> 69;
71 -> 70;
71 -> 55;
72 -> 71;
73 -> 0;
74 -> 0;
75 -> 73;
75 -> 74;
75 -> 71;
76 -> 75;
77 -> 0;
78 -> 0;
79 -> 77;
79 -> 78;
79 -> 75;
80 -> 79;
81 -> 0;
82 -> 0;
83 -> 81;
83 -> 82;
83 -> 0;
84 -> 83;
85 -> 0;
86 -> 0;
87 -> 85;
87 -> 86;
87 -> 0;
88 -> 87;
89 -> 0;
90 -> 0;
91 -> 89;
91 -> 90;
91 -> 0;
92 -> 91;
93 -> 0;
94 -> 0;
95 -> 93;
95 -> 94;
95 -> 79;
96 -> 95;
97 -> 0;
98 -> 0;
99 -> 97;
99 -> 98;
99 -> 0;
100 -> 99;
102 -> 0;
103 -> 101;
103 -> 102;
104 -> 103;
105 -> 0;
106 -> 0;
107 -> 105;
107 -> 106;
107 -> 95;
108 -> 107;
109 -> 0;
110 -> 0;
111 -> 109;
111 -> 110;
111 -> 0;
112 -> 111;
113 -> 0;
114 -> 0;
115 -> 113;
115 -> 114;
115 -> 0;
116 -> 115;
117 -> 0;
118 -> 0;
119 -> 117;
119 -> 118;
119 -> 0;
120 -> 119;
121 -> 0;
122 -> 0;
123 -> 121;
123 -> 122;
123 -> 0;
124 -> 123;
125 -> 0;
126 -> 0;
127 -> 125;
127 -> 126;
127 -> 0;
128 -> 127;
129 -> 0;
130 -> 0;
131 -> 129;
131 -> 130;
131 -> 107;
132 -> 131;
133 -> 0;
134 -> 0;
135 -> 133;
135 -> 134;
135 -> 131;
136 -> 135;
137 -> 0;
138 -> 0;
139 -> 137;
139 -> 138;
139 -> 135;
140 -> 139;
141 -> 0;
142 -> 0;
143 -> 141;
143 -> 142;
143 -> 139;
144 -> 143;
145 -> 0;
146 -> 0;
147 -> 145;
147 -> 146;
147 -> 0;
148 -> 147;
149 -> 0;
150 -> 0;
151 -> 149;
151 -> 150;
151 -> 0;
152 -> 151;
153 -> 0;
154 -> 0;
155 -> 153;
155 -> 154;
155 -> 143;
156 -> 155;
157 -> 0;
158 -> 0;
159 -> 157;
159 -> 158;
159 -> 0;
160 -> 159;
161 -> 0;
162 -> 0;
163 -> 161;
163 -> 162;
163 -> 0;
164 -> 163;
165 -> 0;
166 -> 0;
167 -> 165;
167 -> 166;
167 -> 0;
168 -> 167;
169 -> 0;
170 -> 0;
171 -> 169;
171 -> 170;
171 -> 155;
172 -> 171;
173 -> 0;
174 -> 0;
175 -> 173;
175 -> 174;
175 -> 0;
176 -> 175;
177 -> 0;
178 -> 0;
179 -> 177;
179 -> 178;
179 -> 0;
180 -> 179;
182 -> 181;
184 -> 182;
184 -> 183;
185 -> 184;
187 -> 0;
187 -> 186;
188 -> 187;
188 -> 0;
189 -> 188;
191 -> 190;
193 -> 192;
195 -> 194;
197 -> 196;
198 -> 10;
199 -> 198;
200 -> 199;
201 -> 200;
201 -> 199;
202 -> 1;
202 -> 2;
202 -> 201;
203 -> 1;
204 -> 1;
205 -> 204;
205 -> 1;
206 -> 1;
207 -> 205;
207 -> 206;
208 -> 207;
208 -> 206;
209 -> 206;
210 -> 208;
210 -> 209;
211 -> 209;
212 -> 210;
212 -> 211;
212 -> 209;
213 -> 209;
213 -> 1;
214 -> 1;
215 -> 1;
216 -> 213;
216 -> 215;
217 -> 214;
217 -> 215;
218 -> 214;
218 -> 215;
219 -> 214;
219 -> 215;
220 -> 214;
220 -> 215;
221 -> 214;
221 -> 215;
222 -> 214;
222 -> 215;
223 -> 214;
223 -> 215;
224 -> 216;
224 -> 215;
225 -> 220;
225 -> 215;
226 -> 217;
226 -> 215;
227 -> 215;
228 -> 225;
228 -> 227;
229 -> 226;
229 -> 227;
230 -> 228;
230 -> 227;
231 -> 227;
232 -> 230;
232 -> 231;
233 -> 232;
233 -> 231;
234 -> 233;
235 -> 0;
235 -> 234;
236 -> 235;
237 -> 236;
238 -> 236;
239 -> 0;
239 -> 238;
240 -> 239;
240 -> 237;
240 -> 236;
241 -> 240;
241 -> 234;
242 -> 227;
243 -> 229;
243 -> 242;
243 -> 227;
244 -> 241;
244 -> 243;
245 -> 218;
245 -> 215;
246 -> 219;
246 -> 215;
247 -> 221;
247 -> 215;
248 -> 222;
248 -> 215;
249 -> 223;
249 -> 215;
250 -> 215;
251 -> 224;
251 -> 250;
252 -> 244;
252 -> 250;
253 -> 245;
253 -> 250;
254 -> 246;
254 -> 250;
255 -> 247;
255 -> 250;
256 -> 248;
256 -> 250;
257 -> 249;
257 -> 250;
258 -> 251;
258 -> 250;
259 -> 252;
259 -> 250;
260 -> 253;
260 -> 250;
261 -> 254;
261 -> 250;
262 -> 255;
262 -> 250;
263 -> 256;
263 -> 250;
264 -> 257;
264 -> 250;
265 -> 250;
266 -> 265;
266 -> 250;
267 -> 250;
268 -> 258;
268 -> 267;
269 -> 259;
269 -> 267;
270 -> 260;
270 -> 267;
271 -> 261;
271 -> 267;
272 -> 262;
272 -> 267;
273 -> 263;
273 -> 267;
274 -> 264;
274 -> 267;
275 -> 266;
275 -> 267;
276 -> 271;
276 -> 267;
277 -> 273;
277 -> 267;
278 -> 267;
279 -> 276;
279 -> 278;
280 -> 277;
280 -> 278;
281 -> 268;
281 -> 278;
282 -> 281;
282 -> 212;
282 -> 278;
283 -> 282;
284 -> 280;
284 -> 282;
285 -> 279;
285 -> 282;
286 -> 282;
287 -> 283;
287 -> 286;
288 -> 284;
288 -> 286;
289 -> 285;
289 -> 286;
290 -> 283;
290 -> 286;
291 -> 286;
292 -> 289;
292 -> 291;
292 -> 286;
293 -> 0;
294 -> 0;
296 -> 293;
296 -> 294;
296 -> 295;
297 -> 296;
298 -> 0;
299 -> 297;
299 -> 296;
299 -> 298;
300 -> 299;
301 -> 0;
302 -> 297;
302 -> 296;
302 -> 301;
303 -> 302;
304 -> 0;
305 -> 297;
305 -> 296;
305 -> 304;
306 -> 305;
307 -> 0;
308 -> 297;
308 -> 296;
308 -> 307;
309 -> 308;
310 -> 0;
311 -> 297;
311 -> 296;
311 -> 310;
312 -> 311;
313 -> 0;
314 -> 297;
314 -> 296;
314 -> 313;
315 -> 314;
316 -> 0;
317 -> 297;
317 -> 296;
317 -> 316;
318 -> 317;
319 -> 0;
320 -> 297;
320 -> 296;
320 -> 319;
321 -> 320;
322 -> 0;
323 -> 297;
323 -> 296;
323 -> 322;
324 -> 323;
325 -> 0;
326 -> 297;
326 -> 296;
326 -> 325;
327 -> 326;
328 -> 0;
329 -> 297;
329 -> 296;
329 -> 328;
330 -> 329;
331 -> 297;
334 -> 331;
334 -> 333;
335 -> 332;
335 -> 333;
336 -> 333;
337 -> 334;
337 -> 296;
337 -> 333;
338 -> 333;
339 -> 335;
339 -> 333;
340 -> 336;
340 -> 333;
341 -> 339;
341 -> 340;
341 -> 333;
342 -> 341;
342 -> 338;
342 -> 333;
343 -> 337;
343 -> 338;
343 -> 296;
343 -> 342;
343 -> 341;
343 -> 333;
344 -> 343;
345 -> 0;
346 -> 345;
348 -> 346;
348 -> 347;
349 -> 297;
349 -> 296;
349 -> 348;
350 -> 349;
351 -> 0;
352 -> 351;
353 -> 297;
353 -> 296;
353 -> 352;
354 -> 353;
355 -> 0;
356 -> 297;
356 -> 296;
356 -> 355;
357 -> 356;
358 -> 321;
360 -> 359;
361 -> 0;
362 -> 0;
363 -> 0;
365 -> 361;
365 -> 362;
365 -> 363;
365 -> 364;
366 -> 360;
367 -> 365;
367 -> 366;
367 -> 359;
368 -> 367;
372 -> 369;
372 -> 370;
372 -> 371;
373 -> 303;
373 -> 296;
373 -> 302;
373 -> 369;
373 -> 372;
374 -> 373;
375 -> 315;
376 -> 324;
377 -> 324;
378 -> 321;
379 -> 0;
380 -> 0;
382 -> 379;
382 -> 381;
383 -> 380;
383 -> 381;
384 -> 381;
385 -> 382;
385 -> 381;
386 -> 383;
386 -> 381;
387 -> 0;
387 -> 381;
388 -> 384;
388 -> 381;
389 -> 381;
390 -> 385;
390 -> 386;
390 -> 387;
390 -> 388;
390 -> 389;
390 -> 381;
391 -> 390;
392 -> 0;
393 -> 0;
395 -> 392;
395 -> 394;
396 -> 393;
396 -> 394;
397 -> 394;
398 -> 395;
398 -> 394;
399 -> 396;
399 -> 394;
400 -> 0;
400 -> 394;
401 -> 397;
401 -> 394;
402 -> 394;
403 -> 398;
403 -> 399;
403 -> 400;
403 -> 401;
403 -> 402;
403 -> 394;
404 -> 403;
406 -> 391;
406 -> 390;
406 -> 405;
407 -> 406;
409 -> 404;
409 -> 403;
409 -> 408;
410 -> 409;
411 -> 0;
412 -> 0;
414 -> 411;
414 -> 413;
415 -> 412;
415 -> 413;
416 -> 413;
417 -> 414;
417 -> 413;
418 -> 415;
418 -> 413;
419 -> 0;
419 -> 413;
420 -> 416;
420 -> 413;
421 -> 413;
422 -> 417;
422 -> 418;
422 -> 419;
422 -> 420;
422 -> 421;
422 -> 413;
423 -> 422;
424 -> 0;
425 -> 0;
427 -> 424;
427 -> 426;
428 -> 425;
428 -> 426;
429 -> 426;
430 -> 427;
430 -> 426;
431 -> 428;
431 -> 426;
432 -> 0;
432 -> 426;
433 -> 429;
433 -> 426;
434 -> 426;
435 -> 430;
435 -> 431;
435 -> 432;
435 -> 433;
435 -> 434;
435 -> 426;
436 -> 435;
437 -> 0;
438 -> 0;
440 -> 437;
440 -> 439;
441 -> 438;
441 -> 439;
442 -> 439;
443 -> 440;
443 -> 439;
444 -> 441;
444 -> 439;
445 -> 0;
445 -> 439;
446 -> 442;
446 -> 439;
447 -> 439;
448 -> 443;
448 -> 444;
448 -> 445;
448 -> 446;
448 -> 447;
448 -> 439;
449 -> 448;
450 -> 0;
451 -> 0;
453 -> 450;
453 -> 452;
454 -> 451;
454 -> 452;
455 -> 452;
456 -> 453;
456 -> 452;
457 -> 454;
457 -> 452;
458 -> 0;
458 -> 452;
459 -> 455;
459 -> 452;
460 -> 452;
461 -> 456;
461 -> 457;
461 -> 458;
461 -> 459;
461 -> 460;
461 -> 452;
462 -> 461;
463 -> 0;
464 -> 0;
466 -> 463;
466 -> 465;
467 -> 464;
467 -> 465;
468 -> 465;
469 -> 466;
469 -> 465;
470 -> 467;
470 -> 465;
471 -> 0;
471 -> 465;
472 -> 468;
472 -> 465;
473 -> 465;
474 -> 469;
474 -> 470;
474 -> 471;
474 -> 472;
474 -> 473;
474 -> 465;
475 -> 474;
476 -> 0;
477 -> 0;
479 -> 476;
479 -> 478;
480 -> 477;
480 -> 478;
481 -> 478;
482 -> 479;
482 -> 478;
483 -> 480;
483 -> 478;
484 -> 0;
484 -> 478;
485 -> 481;
485 -> 478;
486 -> 478;
487 -> 482;
487 -> 483;
487 -> 484;
487 -> 485;
487 -> 486;
487 -> 478;
488 -> 487;
490 -> 391;
490 -> 390;
490 -> 489;
491 -> 490;
493 -> 404;
493 -> 403;
493 -> 492;
494 -> 493;
496 -> 423;
496 -> 422;
496 -> 495;
497 -> 496;
499 -> 436;
499 -> 435;
499 -> 498;
500 -> 499;
501 -> 0;
502 -> 391;
502 -> 390;
502 -> 501;
502 -> 0;
503 -> 502;
504 -> 0;
505 -> 404;
505 -> 403;
505 -> 504;
505 -> 0;
506 -> 505;
507 -> 0;
508 -> 475;
508 -> 474;
508 -> 507;
508 -> 0;
509 -> 508;
510 -> 0;
511 -> 423;
511 -> 422;
511 -> 510;
511 -> 0;
512 -> 511;
513 -> 0;
514 -> 0;
514 -> 513;
515 -> 514;
516 -> 297;
516 -> 292;
517 -> 287;
517 -> 286;
518 -> 0;
518 -> 286;
519 -> 518;
519 -> 290;
519 -> 286;
520 -> 286;
521 -> 517;
521 -> 519;
521 -> 520;
521 -> 0;
521 -> 286;
522 -> 521;
522 -> 286;
523 -> 516;
523 -> 286;
524 -> 288;
524 -> 286;
525 -> 286;
526 -> 522;
526 -> 523;
526 -> 524;
526 -> 525;
526 -> 521;
526 -> 296;
526 -> 286;
527 -> 286;
528 -> 526;
528 -> 527;
529 -> 527;
530 -> 527;
531 -> 528;
531 -> 526;
531 -> 530;
531 -> 527;
532 -> 529;
532 -> 527;
533 -> 527;
534 -> 531;
534 -> 526;
534 -> 530;
534 -> 532;
534 -> 533;
534 -> 529;
534 -> 527;
535 -> 527;
536 -> 535;
536 -> 529;
536 -> 527;
537 -> 529;
537 -> 527;
538 -> 527;
539 -> 537;
539 -> 538;
539 -> 529;
539 -> 536;
539 -> 527;
540 -> 528;
540 -> 527;
541 -> 540;
541 -> 283;
541 -> 282;
542 -> 283;
542 -> 267;
543 -> 267;
544 -> 270;
544 -> 543;
544 -> 267;
545 -> 542;
545 -> 544;
546 -> 544;
547 -> 545;
547 -> 546;
547 -> 283;
547 -> 541;
547 -> 526;
547 -> 544;
548 -> 547;
548 -> 544;
549 -> 391;
549 -> 548;
550 -> 0;
550 -> 267;
551 -> 275;
551 -> 267;
552 -> 272;
552 -> 542;
552 -> 269;
552 -> 549;
552 -> 267;
553 -> 552;
553 -> 267;
554 -> 267;
555 -> 553;
555 -> 554;
556 -> 0;
556 -> 554;
557 -> 556;
558 -> 267;
559 -> 552;
559 -> 283;
559 -> 541;
559 -> 526;
559 -> 240;
559 -> 0;
559 -> 390;
559 -> 237;
559 -> 267;
560 -> 267;
561 -> 560;
562 -> 559;
562 -> 561;
562 -> 267;
563 -> 562;
563 -> 267;
564 -> 267;
565 -> 563;
565 -> 564;
566 -> 565;
566 -> 562;
566 -> 564;
567 -> 566;
567 -> 562;
567 -> 564;
568 -> 564;
569 -> 566;
569 -> 568;
569 -> 562;
569 -> 564;
570 -> 0;
570 -> 564;
571 -> 569;
571 -> 570;
571 -> 564;
572 -> 274;
572 -> 571;
572 -> 267;
573 -> 562;
573 -> 267;
574 -> 1;
575 -> 573;
575 -> 574;
576 -> 214;
576 -> 574;
577 -> 574;
579 -> 0;
580 -> 0;
581 -> 0;
584 -> 578;
584 -> 583;
585 -> 579;
585 -> 583;
586 -> 580;
586 -> 583;
587 -> 581;
587 -> 583;
588 -> 582;
588 -> 583;
589 -> 583;
590 -> 589;
590 -> 583;
591 -> 589;
591 -> 583;
592 -> 589;
592 -> 583;
593 -> 583;
594 -> 585;
594 -> 593;
594 -> 583;
595 -> 586;
595 -> 0;
595 -> 583;
596 -> 587;
596 -> 0;
596 -> 583;
597 -> 584;
597 -> 589;
597 -> 583;
598 -> 585;
598 -> 589;
598 -> 583;
599 -> 586;
599 -> 589;
599 -> 583;
600 -> 588;
600 -> 589;
600 -> 583;
601 -> 587;
601 -> 589;
601 -> 583;
602 -> 583;
603 -> 577;
603 -> 575;
603 -> 571;
603 -> 574;
604 -> 603;
604 -> 577;
605 -> 604;
605 -> 603;
605 -> 577;
606 -> 577;
607 -> 605;
607 -> 603;
607 -> 606;
607 -> 577;
608 -> 604;
608 -> 603;
608 -> 606;
608 -> 577;
609 -> 602;
609 -> 607;
610 -> 603;
610 -> 609;
610 -> 597;
610 -> 600;
610 -> 598;
610 -> 599;
610 -> 601;
610 -> 0;
610 -> 574;
611 -> 603;
611 -> 577;
612 -> 603;
612 -> 577;
613 -> 577;
614 -> 611;
614 -> 610;
614 -> 613;
615 -> 612;
615 -> 614;
615 -> 613;
616 -> 615;
616 -> 613;
617 -> 0;
617 -> 616;
618 -> 615;
618 -> 613;
619 -> 611;
619 -> 613;
620 -> 612;
620 -> 617;
620 -> 618;
620 -> 619;
620 -> 613;
621 -> 0;
621 -> 620;
622 -> 621;
623 -> 612;
623 -> 622;
624 -> 623;
624 -> 602;
624 -> 622;
625 -> 624;
626 -> 621;
627 -> 0;
627 -> 621;
628 -> 627;
629 -> 603;
629 -> 577;
630 -> 603;
630 -> 577;
631 -> 629;
631 -> 630;
631 -> 577;
632 -> 603;
632 -> 631;
632 -> 627;
632 -> 574;
634 -> 633;
636 -> 635;
638 -> 637;
641 -> 640;
642 -> 0;
643 -> 0;
644 -> 0;
645 -> 644;
647 -> 642;
647 -> 643;
647 -> 645;
647 -> 646;
648 -> 647;
650 -> 649;
652 -> 651;
654 -> 653;
656 -> 655;
657 -> 603;
657 -> 577;
658 -> 603;
658 -> 577;
659 -> 603;
659 -> 577;
660 -> 603;
660 -> 577;
661 -> 603;
661 -> 577;
662 -> 577;
663 -> 660;
663 -> 662;
663 -> 577;
664 -> 661;
664 -> 662;
664 -> 577;
665 -> 663;
665 -> 664;
665 -> 577;
666 -> 658;
666 -> 577;
667 -> 657;
667 -> 577;
668 -> 658;
668 -> 577;
669 -> 659;
669 -> 577;
670 -> 660;
670 -> 577;
671 -> 661;
671 -> 577;
672 -> 666;
672 -> 577;
673 -> 577;
674 -> 667;
674 -> 673;
675 -> 668;
675 -> 673;
676 -> 669;
676 -> 673;
677 -> 670;
677 -> 673;
678 -> 671;
678 -> 673;
679 -> 672;
679 -> 673;
680 -> 673;
681 -> 678;
681 -> 680;
681 -> 673;
682 -> 677;
682 -> 680;
682 -> 673;
683 -> 681;
683 -> 682;
683 -> 673;
684 -> 673;
685 -> 674;
685 -> 673;
686 -> 675;
686 -> 673;
687 -> 684;
687 -> 673;
688 -> 679;
688 -> 673;
689 -> 673;
690 -> 685;
690 -> 689;
691 -> 686;
691 -> 689;
692 -> 687;
692 -> 689;
693 -> 688;
693 -> 689;
694 -> 691;
694 -> 689;
695 -> 694;
695 -> 690;
695 -> 632;
695 -> 689;
696 -> 689;
697 -> 695;
697 -> 696;
698 -> 695;
698 -> 696;
699 -> 697;
699 -> 696;
700 -> 697;
700 -> 695;
700 -> 696;
701 -> 696;
702 -> 697;
702 -> 695;
702 -> 696;
703 -> 697;
703 -> 695;
703 -> 696;
704 -> 703;
704 -> 696;
705 -> 696;
706 -> 701;
706 -> 705;
706 -> 689;
707 -> 701;
707 -> 696;
708 -> 701;
708 -> 696;
709 -> 707;
709 -> 696;
710 -> 707;
710 -> 696;
711 -> 707;
711 -> 696;
712 -> 707;
712 -> 696;
713 -> 712;
713 -> 696;
714 -> 712;
714 -> 713;
715 -> 690;
715 -> 694;
715 -> 695;
715 -> 705;
715 -> 689;
716 -> 689;
717 -> 715;
717 -> 716;
717 -> 689;
718 -> 715;
718 -> 717;
719 -> 717;
720 -> 718;
720 -> 719;
721 -> 718;
721 -> 719;
722 -> 720;
722 -> 719;
723 -> 720;
723 -> 718;
723 -> 719;
724 -> 719;
725 -> 720;
725 -> 718;
725 -> 719;
726 -> 720;
726 -> 718;
726 -> 719;
727 -> 726;
727 -> 719;
728 -> 724;
728 -> 719;
729 -> 724;
729 -> 719;
730 -> 728;
730 -> 719;
731 -> 728;
731 -> 719;
732 -> 728;
732 -> 719;
733 -> 728;
733 -> 719;
734 -> 733;
734 -> 719;
735 -> 717;
736 -> 719;
736 -> 735;
736 -> 717;
737 -> 715;
737 -> 689;
738 -> 673;
739 -> 719;
739 -> 738;
739 -> 673;
740 -> 737;
740 -> 673;
741 -> 719;
741 -> 696;
742 -> 719;
742 -> 696;
743 -> 741;
743 -> 696;
744 -> 741;
744 -> 719;
744 -> 696;
745 -> 741;
745 -> 719;
745 -> 696;
746 -> 741;
746 -> 719;
746 -> 696;
747 -> 746;
747 -> 696;
748 -> 724;
749 -> 724;
750 -> 748;
750 -> 724;
751 -> 748;
751 -> 724;
752 -> 748;
752 -> 724;
753 -> 748;
753 -> 724;
754 -> 753;
754 -> 724;
755 -> 719;
756 -> 724;
756 -> 755;
756 -> 719;
757 -> 719;
757 -> 689;
758 -> 724;
758 -> 738;
758 -> 673;
759 -> 757;
759 -> 673;
760 -> 724;
761 -> 724;
761 -> 689;
762 -> 761;
762 -> 673;
763 -> 603;
763 -> 577;
764 -> 603;
764 -> 577;
765 -> 603;
765 -> 577;
766 -> 603;
766 -> 577;
767 -> 763;
767 -> 724;
767 -> 577;
768 -> 577;
769 -> 766;
769 -> 768;
770 -> 769;
770 -> 724;
770 -> 0;
770 -> 768;
771 -> 770;
771 -> 577;
772 -> 577;
773 -> 763;
773 -> 724;
773 -> 772;
773 -> 577;
774 -> 771;
774 -> 773;
774 -> 577;
775 -> 763;
775 -> 724;
775 -> 774;
776 -> 775;
776 -> 577;
777 -> 767;
777 -> 577;
778 -> 764;
778 -> 577;
779 -> 765;
779 -> 577;
780 -> 577;
781 -> 776;
781 -> 780;
782 -> 777;
782 -> 780;
783 -> 778;
783 -> 780;
784 -> 779;
784 -> 780;
785 -> 766;
785 -> 780;
786 -> 780;
787 -> 781;
787 -> 786;
787 -> 780;
788 -> 784;
788 -> 780;
789 -> 784;
789 -> 724;
789 -> 780;
790 -> 785;
790 -> 724;
790 -> 780;
791 -> 780;
792 -> 790;
792 -> 791;
793 -> 790;
793 -> 791;
794 -> 791;
795 -> 794;
795 -> 791;
796 -> 794;
796 -> 791;
797 -> 794;
797 -> 791;
798 -> 794;
798 -> 791;
799 -> 792;
799 -> 794;
799 -> 791;
800 -> 790;
800 -> 794;
800 -> 795;
800 -> 796;
800 -> 797;
800 -> 798;
800 -> 799;
800 -> 780;
801 -> 782;
801 -> 780;
802 -> 783;
802 -> 780;
803 -> 784;
803 -> 780;
804 -> 780;
805 -> 801;
805 -> 804;
806 -> 802;
806 -> 804;
807 -> 803;
807 -> 804;
808 -> 800;
808 -> 804;
809 -> 804;
810 -> 806;
810 -> 809;
810 -> 804;
811 -> 807;
811 -> 809;
811 -> 804;
812 -> 810;
812 -> 811;
812 -> 804;
813 -> 805;
813 -> 808;
813 -> 804;
814 -> 806;
814 -> 808;
814 -> 804;
815 -> 807;
815 -> 808;
815 -> 804;
816 -> 780;
817 -> 781;
817 -> 780;
818 -> 780;
819 -> 817;
819 -> 818;
820 -> 800;
820 -> 818;
821 -> 819;
821 -> 818;
822 -> 818;
823 -> 821;
823 -> 822;
824 -> 820;
824 -> 822;
825 -> 824;
825 -> 822;
826 -> 825;
826 -> 823;
826 -> 800;
826 -> 813;
826 -> 814;
826 -> 815;
826 -> 822;
827 -> 822;
828 -> 826;
828 -> 827;
829 -> 826;
829 -> 827;
830 -> 828;
830 -> 826;
830 -> 827;
831 -> 827;
832 -> 830;
832 -> 831;
833 -> 829;
833 -> 831;
834 -> 833;
834 -> 832;
834 -> 826;
834 -> 831;
835 -> 834;
835 -> 831;
836 -> 834;
836 -> 831;
837 -> 835;
837 -> 831;
838 -> 831;
839 -> 837;
839 -> 838;
840 -> 836;
840 -> 838;
841 -> 840;
841 -> 834;
841 -> 838;
842 -> 839;
842 -> 838;
843 -> 841;
843 -> 842;
843 -> 834;
843 -> 838;
844 -> 0;
844 -> 838;
845 -> 838;
846 -> 839;
846 -> 843;
846 -> 845;
846 -> 838;
847 -> 840;
847 -> 843;
847 -> 838;
848 -> 839;
848 -> 843;
848 -> 838;
849 -> 840;
849 -> 847;
849 -> 846;
850 -> 839;
850 -> 846;
851 -> 0;
851 -> 849;
852 -> 839;
852 -> 838;
853 -> 851;
853 -> 838;
854 -> 838;
855 -> 852;
855 -> 854;
856 -> 853;
856 -> 854;
857 -> 840;
857 -> 854;
858 -> 855;
858 -> 854;
859 -> 856;
859 -> 854;
860 -> 854;
861 -> 858;
861 -> 860;
862 -> 859;
862 -> 860;
863 -> 862;
863 -> 860;
864 -> 860;
865 -> 861;
865 -> 860;
866 -> 862;
866 -> 860;
867 -> 860;
868 -> 860;
869 -> 865;
869 -> 868;
870 -> 866;
870 -> 868;
871 -> 867;
871 -> 868;
872 -> 869;
872 -> 871;
872 -> 868;
873 -> 870;
873 -> 871;
873 -> 868;
874 -> 867;
874 -> 854;
875 -> 854;
876 -> 854;
877 -> 857;
877 -> 876;
878 -> 877;
878 -> 849;
878 -> 876;
879 -> 878;
879 -> 854;
880 -> 874;
880 -> 854;
881 -> 875;
881 -> 854;
882 -> 880;
882 -> 881;
882 -> 879;
882 -> 872;
882 -> 873;
882 -> 849;
882 -> 854;
883 -> 854;
884 -> 882;
884 -> 883;
885 -> 884;
885 -> 882;
885 -> 883;
886 -> 855;
886 -> 885;
887 -> 885;
888 -> 886;
888 -> 887;
889 -> 888;
889 -> 887;
890 -> 888;
890 -> 887;
891 -> 890;
891 -> 888;
891 -> 887;
892 -> 889;
892 -> 887;
893 -> 891;
893 -> 892;
893 -> 888;
893 -> 887;
894 -> 890;
894 -> 893;
894 -> 887;
895 -> 889;
895 -> 893;
895 -> 887;
896 -> 889;
896 -> 887;
897 -> 887;
898 -> 896;
898 -> 897;
899 -> 890;
899 -> 897;
900 -> 898;
900 -> 894;
900 -> 897;
901 -> 897;
902 -> 901;
902 -> 897;
903 -> 898;
903 -> 894;
903 -> 897;
904 -> 899;
904 -> 903;
904 -> 900;
904 -> 894;
904 -> 897;
905 -> 899;
905 -> 903;
905 -> 900;
905 -> 894;
905 -> 904;
906 -> 899;
906 -> 903;
906 -> 905;
907 -> 905;
908 -> 906;
908 -> 897;
909 -> 897;
910 -> 908;
910 -> 909;
910 -> 897;
911 -> 908;
911 -> 898;
911 -> 897;
912 -> 908;
912 -> 910;
913 -> 0;
913 -> 910;
914 -> 908;
914 -> 912;
914 -> 910;
915 -> 897;
916 -> 915;
916 -> 887;
917 -> 889;
917 -> 887;
918 -> 890;
918 -> 914;
918 -> 887;
919 -> 894;
919 -> 887;
920 -> 916;
920 -> 887;
921 -> 887;
922 -> 917;
922 -> 921;
923 -> 918;
923 -> 921;
924 -> 919;
924 -> 921;
925 -> 920;
925 -> 921;
926 -> 890;
926 -> 921;
927 -> 925;
927 -> 921;
928 -> 921;
929 -> 925;
929 -> 921;
930 -> 924;
930 -> 929;
931 -> 0;
931 -> 930;
932 -> 922;
932 -> 921;
933 -> 931;
933 -> 921;
934 -> 921;
935 -> 932;
935 -> 934;
936 -> 933;
936 -> 934;
937 -> 936;
937 -> 934;
938 -> 934;
939 -> 934;
939 -> 921;
940 -> 921;
941 -> 921;
942 -> 926;
942 -> 941;
943 -> 942;
943 -> 914;
943 -> 941;
944 -> 943;
944 -> 921;
945 -> 939;
945 -> 921;
946 -> 940;
946 -> 921;
947 -> 945;
947 -> 946;
947 -> 944;
947 -> 935;
947 -> 936;
947 -> 914;
947 -> 921;
948 -> 921;
949 -> 947;
950 -> 922;
950 -> 947;
951 -> 947;
952 -> 926;
952 -> 951;
953 -> 951;
954 -> 952;
954 -> 947;
954 -> 953;
955 -> 954;
955 -> 951;
956 -> 955;
956 -> 947;
957 -> 922;
957 -> 947;
957 -> 956;
958 -> 923;
958 -> 956;
959 -> 956;
960 -> 956;
961 -> 957;
961 -> 960;
962 -> 958;
962 -> 960;
963 -> 959;
963 -> 960;
964 -> 959;
964 -> 960;
965 -> 960;
966 -> 961;
966 -> 965;
966 -> 960;
967 -> 964;
967 -> 960;
968 -> 960;
969 -> 963;
969 -> 968;
969 -> 960;
970 -> 964;
970 -> 968;
970 -> 960;
971 -> 962;
971 -> 960;
972 -> 962;
972 -> 960;
973 -> 971;
973 -> 960;
974 -> 960;
975 -> 973;
975 -> 974;
976 -> 972;
976 -> 974;
977 -> 974;
978 -> 977;
978 -> 974;
979 -> 976;
979 -> 975;
979 -> 962;
980 -> 974;
980 -> 960;
981 -> 960;
982 -> 972;
982 -> 981;
983 -> 982;
983 -> 979;
983 -> 981;
984 -> 960;
985 -> 973;
985 -> 984;
986 -> 980;
986 -> 984;
987 -> 983;
987 -> 984;
988 -> 972;
988 -> 984;
989 -> 984;
990 -> 988;
990 -> 989;
991 -> 990;
991 -> 979;
991 -> 989;
992 -> 991;
992 -> 984;
993 -> 984;
994 -> 985;
994 -> 992;
994 -> 984;
995 -> 986;
995 -> 984;
996 -> 987;
996 -> 995;
997 -> 0;
997 -> 996;
998 -> 985;
998 -> 984;
999 -> 997;
999 -> 984;
1000 -> 984;
1001 -> 998;
1001 -> 1000;
1002 -> 999;
1002 -> 1000;
1003 -> 1002;
1003 -> 1000;
1004 -> 1000;
1005 -> 1000;
1005 -> 984;
1006 -> 984;
1007 -> 984;
1008 -> 988;
1008 -> 1007;
1009 -> 1008;
1009 -> 979;
1009 -> 1007;
1010 -> 1009;
1010 -> 984;
1011 -> 1005;
1011 -> 984;
1012 -> 1006;
1012 -> 984;
1013 -> 1011;
1013 -> 1012;
1013 -> 1010;
1013 -> 1001;
1013 -> 1002;
1013 -> 979;
1013 -> 984;
1014 -> 984;
1015 -> 1013;
1016 -> 988;
1016 -> 1015;
1017 -> 1016;
1017 -> 1013;
1017 -> 1015;
1018 -> 1017;
1018 -> 1013;
1019 -> 987;
1019 -> 1013;
1020 -> 1019;
1021 -> 988;
1021 -> 1020;
1022 -> 1021;
1022 -> 1013;
1022 -> 1020;
1023 -> 1022;
1023 -> 1019;
1024 -> 1018;
1024 -> 1019;
1025 -> 985;
1025 -> 1019;
1026 -> 986;
1026 -> 1019;
1027 -> 1019;
1028 -> 1019;
1029 -> 1023;
1029 -> 1028;
1030 -> 1024;
1030 -> 1028;
1031 -> 1025;
1031 -> 1028;
1032 -> 1026;
1032 -> 1028;
1033 -> 1027;
1033 -> 1028;
1034 -> 1030;
1034 -> 1028;
1035 -> 1028;
1036 -> 1034;
1036 -> 1035;
1037 -> 1033;
1037 -> 1035;
1038 -> 1035;
1039 -> 1037;
1039 -> 1035;
1040 -> 1037;
1040 -> 1035;
1041 -> 1037;
1041 -> 1035;
1042 -> 1037;
1042 -> 1035;
1043 -> 1037;
1043 -> 1035;
1044 -> 1035;
1045 -> 1036;
1045 -> 1044;
1045 -> 1035;
1046 -> 1036;
1046 -> 1037;
1046 -> 1035;
1047 -> 1036;
1047 -> 1013;
1047 -> 1037;
1047 -> 1035;
1048 -> 1036;
1048 -> 1013;
1048 -> 1037;
1048 -> 1035;
1049 -> 1038;
1049 -> 1037;
1049 -> 1035;
1050 -> 1033;
1050 -> 1028;
1051 -> 1033;
1051 -> 1028;
1052 -> 1033;
1052 -> 1028;
1053 -> 1033;
1053 -> 1028;
1054 -> 1033;
1054 -> 1028;
1055 -> 1028;
1056 -> 1029;
1056 -> 1055;
1056 -> 1028;
1057 -> 1028;
1058 -> 1031;
1058 -> 1057;
1058 -> 1028;
1059 -> 1029;
1059 -> 1033;
1059 -> 1028;
1060 -> 1031;
1060 -> 1033;
1060 -> 1032;
1060 -> 1028;
1061 -> 1060;
1061 -> 1033;
1061 -> 1028;
1062 -> 1032;
1062 -> 1028;
1063 -> 1031;
1063 -> 1013;
1063 -> 1062;
1064 -> 1031;
1064 -> 1063;
1065 -> 1064;
1065 -> 1063;
1065 -> 1033;
1066 -> 1019;
1067 -> 988;
1067 -> 1066;
1068 -> 1067;
1068 -> 1063;
1068 -> 1066;
1069 -> 1068;
1069 -> 1019;
1070 -> 985;
1070 -> 1019;
1071 -> 1019;
1072 -> 1013;
1073 -> 1072;
1073 -> 1069;
1074 -> 1073;
1074 -> 1013;
1075 -> 1005;
1075 -> 1013;
1076 -> 1027;
1076 -> 1013;
1077 -> 1075;
1077 -> 1076;
1077 -> 1074;
1077 -> 1001;
1077 -> 1002;
1077 -> 1048;
1077 -> 1047;
1077 -> 1046;
1077 -> 1049;
1077 -> 1043;
1077 -> 1059;
1077 -> 1061;
1077 -> 1052;
1077 -> 1053;
1077 -> 1054;
1077 -> 1065;
1077 -> 1069;
1077 -> 1060;
1077 -> 1063;
1077 -> 1013;
1078 -> 1013;
1079 -> 1077;
1079 -> 1078;
1080 -> 1077;
1080 -> 1078;
1081 -> 1080;
1081 -> 1077;
1081 -> 1079;
1081 -> 1078;
1082 -> 1027;
1082 -> 984;
1083 -> 962;
1083 -> 1082;
1083 -> 1081;
1083 -> 960;
1084 -> 960;
1085 -> 960;
1085 -> 1083;
1085 -> 1084;
1086 -> 1083;
1086 -> 960;
1087 -> 924;
1087 -> 947;
1088 -> 922;
1088 -> 1087;
1089 -> 922;
1089 -> 1085;
1089 -> 1087;
1090 -> 1086;
1090 -> 1087;
1091 -> 925;
1091 -> 1087;
1092 -> 1087;
1093 -> 1088;
1093 -> 1092;
1094 -> 1089;
1094 -> 1092;
1095 -> 1090;
1095 -> 1092;
1096 -> 1091;
1096 -> 1092;
1097 -> 926;
1097 -> 1092;
1098 -> 1092;
1099 -> 1094;
1099 -> 1092;
1100 -> 1092;
1101 -> 1094;
1101 -> 1100;
1101 -> 1092;
1102 -> 1092;
1103 -> 1095;
1103 -> 1092;
1104 -> 1103;
1105 -> 1103;
1105 -> 1104;
1106 -> 1105;
1106 -> 1085;
1106 -> 1104;
1107 -> 1106;
1107 -> 1103;
1108 -> 1094;
1108 -> 1092;
1109 -> 1107;
1109 -> 1108;
1109 -> 1085;
1109 -> 1092;
1110 -> 1092;
1111 -> 1109;
1111 -> 1110;
1111 -> 1092;
1112 -> 1109;
1112 -> 1092;
1113 -> 1095;
1113 -> 1092;
1114 -> 1093;
1114 -> 1092;
1115 -> 1096;
1115 -> 1092;
1116 -> 1092;
1117 -> 1092;
1118 -> 1112;
1118 -> 1117;
1119 -> 1113;
1119 -> 1117;
1120 -> 1114;
1120 -> 1117;
1121 -> 1115;
1121 -> 1117;
1122 -> 1116;
1122 -> 1117;
1123 -> 1117;
1124 -> 1122;
1124 -> 1123;
1125 -> 1123;
1126 -> 1124;
1126 -> 1123;
1127 -> 1124;
1127 -> 1123;
1128 -> 1124;
1128 -> 1123;
1129 -> 1124;
1129 -> 1123;
1130 -> 1124;
1130 -> 1123;
1131 -> 1123;
1132 -> 1119;
1132 -> 1131;
1132 -> 1123;
1133 -> 1119;
1133 -> 1109;
1133 -> 1124;
1133 -> 1123;
1134 -> 1119;
1134 -> 1109;
1134 -> 1124;
1134 -> 1123;
1135 -> 1125;
1135 -> 1124;
1135 -> 1123;
1136 -> 1122;
1136 -> 1117;
1137 -> 1122;
1137 -> 1117;
1138 -> 1122;
1138 -> 1117;
1139 -> 1122;
1139 -> 1117;
1140 -> 1122;
1140 -> 1117;
1141 -> 1117;
1142 -> 1118;
1142 -> 1141;
1142 -> 1117;
1143 -> 1117;
1144 -> 1120;
1144 -> 1143;
1144 -> 1117;
1145 -> 1120;
1145 -> 1122;
1145 -> 1121;
1145 -> 1117;
1146 -> 1145;
1146 -> 1122;
1146 -> 1117;
1147 -> 1121;
1147 -> 1117;
1148 -> 1120;
1148 -> 1109;
1148 -> 1147;
1149 -> 1120;
1149 -> 1148;
1150 -> 1120;
1150 -> 1149;
1151 -> 1150;
1151 -> 1149;
1151 -> 1122;
1152 -> 1116;
1152 -> 1087;
1153 -> 947;
1154 -> 1153;
1154 -> 1149;
1155 -> 1154;
1155 -> 947;
1156 -> 939;
1156 -> 947;
1157 -> 1152;
1157 -> 947;
1158 -> 1156;
1158 -> 1157;
1158 -> 1155;
1158 -> 935;
1158 -> 936;
1158 -> 1134;
1158 -> 1133;
1158 -> 1119;
1158 -> 1135;
1158 -> 1130;
1158 -> 1118;
1158 -> 1146;
1158 -> 1138;
1158 -> 1139;
1158 -> 1140;
1158 -> 1151;
1158 -> 1149;
1158 -> 1145;
1158 -> 947;
1159 -> 947;
1160 -> 1152;
1160 -> 921;
1161 -> 888;
1161 -> 1160;
1161 -> 1158;
1161 -> 887;
1162 -> 856;
1162 -> 997;
1162 -> 885;
1163 -> 1162;
1164 -> 1161;
1164 -> 1163;
1165 -> 1164;
1165 -> 1161;
1165 -> 1163;
1166 -> 1163;
1167 -> 1165;
1167 -> 1166;
1167 -> 1163;
1168 -> 1167;
1168 -> 1163;
1169 -> 1164;
1169 -> 1161;
1169 -> 1168;
1170 -> 1169;
1170 -> 1162;
1171 -> 855;
1171 -> 1162;
1172 -> 856;
1172 -> 0;
1172 -> 1162;
1173 -> 1170;
1173 -> 1172;
1174 -> 1161;
1174 -> 1172;
1175 -> 1172;
1176 -> 1172;
1177 -> 1173;
1177 -> 1176;
1178 -> 1174;
1178 -> 1176;
1179 -> 1175;
1179 -> 1176;
1180 -> 1175;
1180 -> 1176;
1181 -> 1178;
1181 -> 1176;
1182 -> 1176;
1183 -> 1181;
1183 -> 1182;
1184 -> 1180;
1184 -> 1182;
1185 -> 1182;
1186 -> 1184;
1186 -> 1182;
1187 -> 1184;
1187 -> 1182;
1188 -> 1184;
1188 -> 1182;
1189 -> 1184;
1189 -> 1182;
1190 -> 1184;
1190 -> 1182;
1191 -> 1182;
1192 -> 1183;
1192 -> 1191;
1192 -> 1182;
1193 -> 1183;
1193 -> 1170;
1193 -> 1184;
1193 -> 1182;
1194 -> 1183;
1194 -> 1170;
1194 -> 1184;
1194 -> 1182;
1195 -> 1185;
1195 -> 1184;
1195 -> 1182;
1196 -> 1180;
1196 -> 1176;
1197 -> 1180;
1197 -> 1176;
1198 -> 1180;
1198 -> 1176;
1199 -> 1180;
1199 -> 1176;
1200 -> 1180;
1200 -> 1176;
1201 -> 1176;
1202 -> 1177;
1202 -> 1201;
1202 -> 1176;
1203 -> 1177;
1203 -> 1180;
1203 -> 1176;
1204 -> 602;
1204 -> 1176;
1205 -> 1204;
1205 -> 1179;
1205 -> 1176;
1206 -> 1205;
1206 -> 1180;
1206 -> 1176;
1207 -> 1172;
1208 -> 855;
1208 -> 1170;
1208 -> 1207;
1208 -> 1172;
1209 -> 1170;
1209 -> 1208;
1210 -> 1175;
1210 -> 1208;
1211 -> 1208;
1212 -> 1208;
1213 -> 1209;
1213 -> 1212;
1214 -> 1210;
1214 -> 1212;
1215 -> 1211;
1215 -> 1212;
1216 -> 1214;
1216 -> 1212;
1217 -> 1212;
1218 -> 1216;
1218 -> 1217;
1219 -> 1215;
1219 -> 1217;
1220 -> 1218;
1220 -> 1217;
1221 -> 1217;
1222 -> 1220;
1222 -> 1221;
1223 -> 1219;
1223 -> 1221;
1224 -> 1219;
1224 -> 1221;
1225 -> 1219;
1225 -> 1221;
1226 -> 1219;
1226 -> 1221;
1227 -> 1221;
1228 -> 1222;
1228 -> 1227;
1228 -> 1221;
1229 -> 1222;
1229 -> 1193;
1229 -> 1219;
1229 -> 1221;
1230 -> 1222;
1230 -> 1194;
1230 -> 1219;
1230 -> 1221;
1231 -> 1215;
1231 -> 1212;
1232 -> 1215;
1232 -> 1212;
1233 -> 1212;
1234 -> 1213;
1234 -> 1233;
1234 -> 1212;
1235 -> 1213;
1235 -> 1215;
1235 -> 1212;
1236 -> 855;
1236 -> 1170;
1236 -> 885;
1237 -> 885;
1238 -> 1236;
1238 -> 1237;
1239 -> 1211;
1239 -> 1237;
1240 -> 1239;
1240 -> 1229;
1240 -> 1237;
1241 -> 0;
1241 -> 1237;
1242 -> 1237;
1243 -> 1240;
1243 -> 1242;
1244 -> 1241;
1244 -> 1242;
1245 -> 1238;
1245 -> 1237;
1246 -> 1243;
1246 -> 1245;
1246 -> 1237;
1247 -> 1246;
1247 -> 1237;
1248 -> 885;
1249 -> 1248;
1249 -> 1245;
1250 -> 1249;
1250 -> 885;
1251 -> 874;
1251 -> 885;
1252 -> 1247;
1252 -> 885;
1253 -> 1251;
1253 -> 1252;
1253 -> 1250;
1253 -> 872;
1253 -> 873;
1253 -> 1230;
1253 -> 1229;
1253 -> 1222;
1253 -> 1219;
1253 -> 1235;
1253 -> 1232;
1253 -> 1245;
1253 -> 1194;
1253 -> 1193;
1253 -> 1183;
1253 -> 1195;
1253 -> 1190;
1253 -> 1203;
1253 -> 1197;
1253 -> 1206;
1253 -> 1199;
1253 -> 1200;
1253 -> 885;
1254 -> 885;
1255 -> 1247;
1255 -> 854;
1256 -> 834;
1256 -> 1255;
1256 -> 1253;
1256 -> 831;
1257 -> 800;
1257 -> 780;
1258 -> 603;
1258 -> 577;
1259 -> 603;
1259 -> 577;
1260 -> 1258;
1260 -> 1256;
1260 -> 577;
1261 -> 1258;
1261 -> 1256;
1261 -> 577;
1262 -> 1261;
1263 -> 1261;
1264 -> 1262;
1264 -> 1263;
1265 -> 1262;
1265 -> 1263;
1266 -> 1259;
1266 -> 1263;
1267 -> 1264;
1267 -> 1256;
1267 -> 1263;
1268 -> 1263;
1269 -> 1267;
1269 -> 1268;
1270 -> 1266;
1270 -> 1268;
1271 -> 1269;
1271 -> 1256;
1271 -> 1268;
1272 -> 1269;
1272 -> 1256;
1272 -> 1268;
1273 -> 1268;
1274 -> 1272;
1274 -> 1273;
1275 -> 1272;
1275 -> 1273;
1276 -> 1270;
1276 -> 1273;
1277 -> 1274;
1277 -> 1273;
1278 -> 1275;
1278 -> 1273;
1279 -> 1277;
1279 -> 1278;
1279 -> 1271;
1279 -> 1273;
1280 -> 1279;
1280 -> 1273;
1281 -> 1276;
1281 -> 1279;
1281 -> 1280;
1282 -> 0;
1282 -> 1280;
1283 -> 1280;
1284 -> 1276;
1284 -> 1283;
1285 -> 1284;
1285 -> 1281;
1285 -> 1283;
1286 -> 1283;
1287 -> 1284;
1287 -> 1285;
1287 -> 1286;
1288 -> 1287;
1288 -> 1286;
1289 -> 1286;
1290 -> 1288;
1290 -> 1289;
1291 -> 1290;
1291 -> 1287;
1291 -> 1289;
1292 -> 1291;
1293 -> 1292;
1293 -> 1286;
1294 -> 1293;
1294 -> 1286;
1295 -> 1265;
1295 -> 1294;
1295 -> 1263;
1296 -> 1295;
1296 -> 1263;
1297 -> 1260;
1297 -> 1296;
1297 -> 0;
1297 -> 1261;
1298 -> 1260;
1298 -> 1297;
1298 -> 577;
1299 -> 1298;
1299 -> 786;
1299 -> 780;
1300 -> 784;
1300 -> 1298;
1300 -> 780;
1301 -> 997;
1301 -> 838;
1302 -> 1298;
1302 -> 860;
1303 -> 827;
1304 -> 997;
1304 -> 1303;
1305 -> 1303;
1306 -> 0;
1306 -> 1298;
1307 -> 1303;
1308 -> 1307;
1309 -> 1306;
1309 -> 1308;
1310 -> 1308;
1311 -> 1308;
1312 -> 1308;
1313 -> 1311;
1313 -> 1312;
1314 -> 1311;
1314 -> 1307;
1315 -> 1307;
1316 -> 1307;
1317 -> 1314;
1317 -> 1307;
1318 -> 1315;
1318 -> 1307;
1319 -> 1307;
1320 -> 603;
1320 -> 577;
1321 -> 603;
1321 -> 577;
1322 -> 603;
1322 -> 577;
1323 -> 1320;
1323 -> 577;
1324 -> 577;
1325 -> 1321;
1325 -> 577;
1326 -> 577;
1327 -> 577;
1328 -> 1323;
1328 -> 1327;
1329 -> 1324;
1329 -> 1327;
1330 -> 1325;
1330 -> 1327;
1331 -> 1326;
1331 -> 1327;
1332 -> 1322;
1332 -> 1327;
1333 -> 1328;
1333 -> 1327;
1334 -> 1329;
1334 -> 1327;
1335 -> 1330;
1335 -> 1327;
1336 -> 1331;
1336 -> 1327;
1337 -> 1327;
1338 -> 1333;
1338 -> 1337;
1339 -> 1334;
1339 -> 1337;
1340 -> 1335;
1340 -> 1337;
1341 -> 1336;
1341 -> 1337;
1342 -> 1332;
1342 -> 1337;
1343 -> 1342;
1343 -> 1337;
1344 -> 1342;
1344 -> 1337;
1345 -> 1342;
1345 -> 1337;
1346 -> 1342;
1346 -> 1337;
1347 -> 1337;
1348 -> 1338;
1348 -> 1347;
1348 -> 1337;
1349 -> 1337;
1350 -> 1341;
1350 -> 1349;
1350 -> 1337;
1351 -> 1337;
1352 -> 1341;
1352 -> 1351;
1352 -> 1337;
1353 -> 1338;
1353 -> 1342;
1353 -> 1337;
1354 -> 1339;
1354 -> 1342;
1354 -> 1337;
1355 -> 1340;
1355 -> 1342;
1355 -> 1337;
1356 -> 1341;
1356 -> 1342;
1356 -> 1337;
1357 -> 603;
1357 -> 1306;
1357 -> 1353;
1357 -> 1354;
1357 -> 1355;
1357 -> 1356;
1357 -> 574;
1358 -> 1357;
1358 -> 786;
1358 -> 780;
1359 -> 784;
1359 -> 1357;
1359 -> 780;
1360 -> 1357;
1360 -> 831;
1361 -> 1357;
1361 -> 831;
1362 -> 1360;
1362 -> 1357;
1362 -> 831;
1363 -> 831;
1364 -> 1362;
1364 -> 1363;
1365 -> 1361;
1365 -> 1363;
1366 -> 1365;
1366 -> 1364;
1366 -> 1357;
1366 -> 1363;
1367 -> 1363;
1368 -> 997;
1368 -> 1367;
1369 -> 1367;
1370 -> 1367;
1371 -> 1370;
1372 -> 1366;
1372 -> 1371;
1373 -> 1371;
1374 -> 1371;
1375 -> 1371;
1376 -> 1374;
1376 -> 1375;
1377 -> 1374;
1377 -> 1370;
1378 -> 1370;
1379 -> 1370;
1380 -> 1377;
1380 -> 1370;
1381 -> 1378;
1381 -> 1370;
1382 -> 1370;
1383 -> 831;
1384 -> 1366;
1384 -> 1383;
1385 -> 1366;
1385 -> 1383;
1386 -> 0;
1386 -> 1383;
1387 -> 1383;
1388 -> 1386;
1388 -> 1387;
1389 -> 603;
1389 -> 577;
1390 -> 603;
1390 -> 577;
1391 -> 603;
1391 -> 577;
1392 -> 577;
1393 -> 1390;
1393 -> 1392;
1393 -> 577;
1394 -> 1391;
1394 -> 577;
1395 -> 1391;
1395 -> 1385;
1395 -> 1389;
1395 -> 577;
1396 -> 1390;
1396 -> 577;
1397 -> 577;
1398 -> 577;
1399 -> 1394;
1399 -> 1398;
1400 -> 1395;
1400 -> 1398;
1401 -> 1396;
1401 -> 1398;
1402 -> 1397;
1402 -> 1398;
1403 -> 1399;
1403 -> 1398;
1404 -> 1400;
1404 -> 1398;
1405 -> 1398;
1406 -> 1403;
1406 -> 1405;
1407 -> 1404;
1407 -> 1405;
1408 -> 1402;
1408 -> 1405;
1409 -> 1408;
1409 -> 1405;
1410 -> 1408;
1410 -> 1405;
1411 -> 1408;
1411 -> 1405;
1412 -> 1408;
1412 -> 1405;
1413 -> 1408;
1413 -> 1405;
1414 -> 1405;
1415 -> 1406;
1415 -> 1414;
1415 -> 1405;
1416 -> 1407;
1416 -> 1405;
1417 -> 0;
1417 -> 1405;
1418 -> 1405;
1419 -> 1416;
1419 -> 1418;
1420 -> 1417;
1420 -> 1418;
1421 -> 1407;
1421 -> 1405;
1422 -> 0;
1422 -> 1405;
1423 -> 1405;
1424 -> 1421;
1424 -> 1423;
1425 -> 1422;
1425 -> 1423;
1426 -> 1406;
1426 -> 1408;
1426 -> 1405;
1427 -> 1407;
1427 -> 1408;
1427 -> 1405;
1428 -> 1406;
1428 -> 1385;
1428 -> 1408;
1428 -> 1405;
1429 -> 1402;
1429 -> 1398;
1430 -> 1398;
1431 -> 1401;
1431 -> 1430;
1431 -> 1398;
1432 -> 1401;
1432 -> 1402;
1432 -> 1398;
1433 -> 603;
1433 -> 1397;
1433 -> 1385;
1433 -> 1428;
1433 -> 1427;
1433 -> 1426;
1433 -> 1412;
1433 -> 1413;
1433 -> 1432;
1433 -> 574;
1434 -> 603;
1434 -> 577;
1435 -> 603;
1435 -> 577;
1436 -> 603;
1436 -> 577;
1437 -> 603;
1437 -> 577;
1438 -> 603;
1438 -> 577;
1439 -> 1434;
1439 -> 577;
1440 -> 1435;
1440 -> 577;
1441 -> 1436;
1441 -> 577;
1442 -> 1437;
1442 -> 577;
1443 -> 577;
1444 -> 1439;
1444 -> 1443;
1445 -> 1440;
1445 -> 1443;
1446 -> 1441;
1446 -> 1443;
1447 -> 1442;
1447 -> 1443;
1448 -> 1438;
1448 -> 1443;
1449 -> 1443;
1450 -> 1445;
1450 -> 1449;
1450 -> 1443;
1451 -> 1444;
1451 -> 1443;
1452 -> 1445;
1452 -> 1443;
1453 -> 1446;
1453 -> 1443;
1454 -> 1443;
1455 -> 1446;
1455 -> 1454;
1455 -> 1443;
1456 -> 1455;
1456 -> 1447;
1456 -> 1443;
1457 -> 1443;
1458 -> 1451;
1458 -> 1457;
1459 -> 1452;
1459 -> 1457;
1460 -> 1453;
1460 -> 1457;
1461 -> 1456;
1461 -> 1457;
1462 -> 1448;
1462 -> 1457;
1463 -> 1458;
1463 -> 1433;
1463 -> 1457;
1464 -> 1458;
1464 -> 1463;
1465 -> 1459;
1465 -> 1463;
1466 -> 1460;
1466 -> 1463;
1467 -> 1461;
1467 -> 1463;
1468 -> 1463;
1469 -> 1463;
1470 -> 1464;
1470 -> 1469;
1471 -> 1465;
1471 -> 1469;
1472 -> 1466;
1472 -> 1469;
1473 -> 1467;
1473 -> 1469;
1474 -> 1468;
1474 -> 1469;
1475 -> 1462;
1475 -> 1469;
1476 -> 1470;
1476 -> 1463;
1476 -> 1469;
1477 -> 1476;
1477 -> 1469;
1478 -> 1470;
1478 -> 1463;
1478 -> 1469;
1479 -> 1474;
1479 -> 1469;
1480 -> 1476;
1480 -> 1469;
1481 -> 1469;
1482 -> 1471;
1482 -> 1469;
1483 -> 1469;
1484 -> 1478;
1484 -> 1483;
1485 -> 1479;
1485 -> 1483;
1486 -> 1480;
1486 -> 1483;
1487 -> 1481;
1487 -> 1483;
1488 -> 1482;
1488 -> 1483;
1489 -> 1475;
1489 -> 1483;
1490 -> 1483;
1491 -> 1485;
1491 -> 1490;
1491 -> 1483;
1492 -> 1483;
1493 -> 1492;
1493 -> 1469;
1494 -> 1469;
1495 -> 1493;
1495 -> 1494;
1495 -> 1469;
1497 -> 1496;
1498 -> 1497;
1498 -> 1496;
1499 -> 1496;
1500 -> 1498;
1500 -> 1496;
1501 -> 1500;
1502 -> 1469;
1503 -> 1501;
1503 -> 1502;
1504 -> 1501;
1504 -> 1498;
1504 -> 1502;
1505 -> 1502;
1506 -> 1504;
1506 -> 1505;
1507 -> 1503;
1507 -> 1505;
1508 -> 1507;
1508 -> 1505;
1509 -> 1507;
1509 -> 1505;
1510 -> 1507;
1510 -> 1505;
1511 -> 1507;
1511 -> 1505;
1512 -> 1506;
1512 -> 1507;
1512 -> 1505;
1513 -> 0;
1513 -> 1507;
1513 -> 1505;
1514 -> 1505;
1515 -> 1514;
1515 -> 1507;
1515 -> 1505;
1516 -> 1505;
1517 -> 1516;
1517 -> 1507;
1517 -> 1505;
1518 -> 1504;
1518 -> 1503;
1518 -> 1513;
1518 -> 1515;
1518 -> 1517;
1518 -> 1512;
1518 -> 1514;
1518 -> 1502;
1519 -> 1502;
1520 -> 1518;
1520 -> 1519;
1521 -> 1520;
1521 -> 1518;
1521 -> 0;
1521 -> 1519;
1522 -> 1519;
1523 -> 1520;
1523 -> 1518;
1523 -> 1522;
1523 -> 1519;
1524 -> 1521;
1524 -> 1502;
1525 -> 1518;
1525 -> 1502;
1526 -> 1525;
1526 -> 1469;
1527 -> 1470;
1527 -> 1469;
1528 -> 1470;
1528 -> 1463;
1528 -> 1469;
1529 -> 1469;
1530 -> 1527;
1530 -> 1529;
1531 -> 1528;
1531 -> 1529;
1532 -> 1530;
1532 -> 1529;
1533 -> 0;
1533 -> 1532;
1534 -> 1469;
1535 -> 1526;
1535 -> 1469;
1536 -> 1474;
1536 -> 1469;
1537 -> 1476;
1537 -> 1469;
1538 -> 1469;
1539 -> 1472;
1539 -> 1469;
1540 -> 1533;
1540 -> 1469;
1541 -> 1534;
1541 -> 1469;
1542 -> 1469;
1543 -> 1535;
1543 -> 1542;
1544 -> 1536;
1544 -> 1542;
1545 -> 1537;
1545 -> 1542;
1546 -> 1538;
1546 -> 1542;
1547 -> 1539;
1547 -> 1542;
1548 -> 1540;
1548 -> 1542;
1549 -> 1538;
1549 -> 1542;
1550 -> 1541;
1550 -> 1542;
1551 -> 1475;
1551 -> 1542;
1552 -> 1548;
1552 -> 1542;
1553 -> 1542;
1554 -> 1552;
1554 -> 1553;
1555 -> 1554;
1555 -> 0;
1555 -> 1553;
1556 -> 1543;
1556 -> 1555;
1557 -> 1544;
1557 -> 1555;
1558 -> 1545;
1558 -> 1555;
1559 -> 1546;
1559 -> 1555;
1560 -> 1547;
1560 -> 1555;
1561 -> 1548;
1561 -> 1555;
1562 -> 1549;
1562 -> 1555;
1563 -> 1550;
1563 -> 1555;
1564 -> 1555;
1565 -> 1556;
1565 -> 1564;
1566 -> 1557;
1566 -> 1564;
1567 -> 1558;
1567 -> 1564;
1568 -> 1559;
1568 -> 1564;
1569 -> 1560;
1569 -> 1564;
1570 -> 1561;
1570 -> 1564;
1571 -> 1562;
1571 -> 1564;
1572 -> 1563;
1572 -> 1564;
1573 -> 1551;
1573 -> 1564;
1574 -> 1564;
1575 -> 1566;
1575 -> 1574;
1575 -> 1564;
1576 -> 1565;
1576 -> 1575;
1577 -> 1567;
1577 -> 1575;
1578 -> 1568;
1578 -> 1575;
1579 -> 1569;
1579 -> 1575;
1580 -> 1570;
1580 -> 1575;
1581 -> 1571;
1581 -> 1575;
1582 -> 1572;
1582 -> 1575;
1583 -> 1575;
1584 -> 1576;
1584 -> 1583;
1585 -> 1577;
1585 -> 1583;
1586 -> 1578;
1586 -> 1583;
1587 -> 1579;
1587 -> 1583;
1588 -> 1580;
1588 -> 1583;
1589 -> 1581;
1589 -> 1583;
1590 -> 1582;
1590 -> 1583;
1591 -> 1573;
1591 -> 1583;
1592 -> 1583;
1593 -> 1584;
1593 -> 1592;
1594 -> 1593;
1594 -> 1518;
1594 -> 0;
1594 -> 1592;
1595 -> 1592;
1596 -> 1593;
1596 -> 1518;
1596 -> 1595;
1596 -> 1592;
1597 -> 1594;
1597 -> 1583;
1598 -> 1588;
1598 -> 1583;
1599 -> 1583;
1600 -> 1598;
1600 -> 1599;
1601 -> 1600;
1601 -> 0;
1601 -> 1599;
1602 -> 1600;
1602 -> 0;
1602 -> 1599;
1603 -> 1599;
1604 -> 0;
1604 -> 1599;
1605 -> 1600;
1605 -> 1604;
1605 -> 1599;
1606 -> 0;
1606 -> 1599;
1607 -> 1600;
1607 -> 1606;
1607 -> 1599;
1608 -> 1599;
1609 -> 0;
1609 -> 1599;
1610 -> 1600;
1610 -> 1609;
1610 -> 1599;
1611 -> 1610;
1611 -> 1599;
1612 -> 1599;
1613 -> 1611;
1613 -> 1612;
1614 -> 1612;
1615 -> 1613;
1615 -> 1614;
1615 -> 1612;
1616 -> 1583;
1617 -> 1591;
1617 -> 1583;
1618 -> 1583;
1619 -> 1583;
1620 -> 1584;
1620 -> 1619;
1621 -> 1619;
1622 -> 1620;
1622 -> 1621;
1623 -> 1622;
1623 -> 1518;
1623 -> 1621;
1624 -> 1623;
1624 -> 1619;
1625 -> 1624;
1625 -> 1583;
1626 -> 1617;
1626 -> 1625;
1626 -> 1583;
1627 -> 1626;
1628 -> 1616;
1628 -> 1627;
1628 -> 1626;
1629 -> 1584;
1629 -> 1628;
1630 -> 1585;
1630 -> 1628;
1631 -> 1586;
1631 -> 1628;
1632 -> 1587;
1632 -> 1628;
1633 -> 1588;
1633 -> 1628;
1634 -> 1591;
1634 -> 1628;
1635 -> 1589;
1635 -> 1628;
1636 -> 1590;
1636 -> 1628;
1637 -> 1628;
1638 -> 1629;
1638 -> 1637;
1639 -> 1630;
1639 -> 1637;
1640 -> 1631;
1640 -> 1637;
1641 -> 1632;
1641 -> 1637;
1642 -> 1633;
1642 -> 1637;
1643 -> 1634;
1643 -> 1637;
1644 -> 1635;
1644 -> 1637;
1645 -> 1636;
1645 -> 1637;
1646 -> 1617;
1646 -> 1637;
1647 -> 1628;
1648 -> 1628;
1649 -> 1584;
1649 -> 1648;
1650 -> 1649;
1650 -> 1518;
1650 -> 0;
1650 -> 1648;
1651 -> 1648;
1652 -> 1649;
1652 -> 1518;
1652 -> 1651;
1652 -> 1648;
1653 -> 1650;
1653 -> 1628;
1654 -> 1588;
1654 -> 0;
1654 -> 1626;
1655 -> 1626;
1656 -> 1629;
1656 -> 1637;
1657 -> 1630;
1657 -> 1637;
1658 -> 1631;
1658 -> 1637;
1659 -> 1632;
1659 -> 1637;
1660 -> 1633;
1660 -> 1637;
1661 -> 1634;
1661 -> 1637;
1662 -> 1635;
1662 -> 1637;
1663 -> 1645;
1663 -> 1637;
1664 -> 1626;
1664 -> 1637;
1665 -> 1637;
1666 -> 1656;
1666 -> 1665;
1667 -> 1666;
1667 -> 1518;
1667 -> 0;
1667 -> 1665;
1668 -> 1665;
1669 -> 1666;
1669 -> 1518;
1669 -> 1668;
1669 -> 1665;
1670 -> 1667;
1670 -> 1637;
1671 -> 1637;
1672 -> 1664;
1672 -> 1671;
1673 -> 0;
1673 -> 1671;
1674 -> 1673;
1674 -> 1637;
1675 -> 1660;
1675 -> 1674;
1675 -> 1637;
1676 -> 1637;
1677 -> 1637;
1678 -> 1664;
1678 -> 1677;
1679 -> 1677;
1680 -> 1678;
1680 -> 1532;
1680 -> 1679;
1680 -> 1677;
1681 -> 1680;
1682 -> 1678;
1682 -> 1532;
1682 -> 1680;
1683 -> 1682;
1683 -> 1532;
1684 -> 1682;
1685 -> 1681;
1685 -> 1683;
1685 -> 1684;
1685 -> 1532;
1685 -> 1682;
1686 -> 1678;
1686 -> 1685;
1686 -> 1680;
1687 -> 1681;
1687 -> 1680;
1688 -> 1680;
1689 -> 1678;
1689 -> 1686;
1689 -> 1677;
1690 -> 1689;
1690 -> 1637;
1691 -> 1690;
1691 -> 1657;
1691 -> 1686;
1691 -> 1637;
1692 -> 1691;
1693 -> 1658;
1693 -> 1691;
1694 -> 1660;
1694 -> 1691;
1695 -> 1662;
1695 -> 1691;
1696 -> 1663;
1696 -> 1691;
1697 -> 1691;
1698 -> 1692;
1698 -> 1697;
1699 -> 1693;
1699 -> 1697;
1700 -> 1694;
1700 -> 1697;
1701 -> 1692;
1701 -> 1697;
1702 -> 1695;
1702 -> 1697;
1703 -> 1696;
1703 -> 1697;
1704 -> 1692;
1704 -> 1697;
1705 -> 1661;
1705 -> 1697;
1706 -> 1697;
1707 -> 1697;
1708 -> 1698;
1708 -> 1691;
1708 -> 0;
1708 -> 1697;
1709 -> 1708;
1709 -> 1697;
1710 -> 1709;
1710 -> 1691;
1710 -> 1697;
1711 -> 1705;
1711 -> 1691;
1711 -> 1710;
1711 -> 1697;
1712 -> 1709;
1712 -> 1711;
1713 -> 1699;
1713 -> 1711;
1714 -> 1702;
1714 -> 1711;
1715 -> 1700;
1715 -> 1711;
1716 -> 1707;
1716 -> 1711;
1717 -> 1711;
1718 -> 1712;
1718 -> 1717;
1719 -> 1713;
1719 -> 1717;
1720 -> 1714;
1720 -> 1717;
1721 -> 1715;
1721 -> 1717;
1722 -> 1716;
1722 -> 1717;
1723 -> 1718;
1723 -> 1711;
1723 -> 1717;
1724 -> 1723;
1725 -> 1719;
1725 -> 1724;
1725 -> 1723;
1726 -> 1717;
1727 -> 1717;
1728 -> 1727;
1728 -> 1711;
1729 -> 1728;
1730 -> 1705;
1730 -> 1729;
1731 -> 1730;
1731 -> 1711;
1731 -> 1729;
1732 -> 0;
1732 -> 1729;
1733 -> 1729;
1734 -> 1731;
1734 -> 1733;
1735 -> 1732;
1735 -> 1733;
1736 -> 1734;
1736 -> 1728;
1737 -> 1700;
1737 -> 0;
1737 -> 1736;
1738 -> 1736;
1739 -> 1700;
1739 -> 0;
1739 -> 1737;
1740 -> 1737;
1741 -> 1739;
1742 -> 1741;
1742 -> 1739;
1743 -> 1742;
1744 -> 1743;
1744 -> 1742;
1745 -> 1709;
1745 -> 1742;
1746 -> 1700;
1746 -> 1742;
1747 -> 1701;
1747 -> 1742;
1748 -> 1742;
1749 -> 1746;
1749 -> 1748;
1750 -> 1747;
1750 -> 1748;
1751 -> 1749;
1751 -> 0;
1751 -> 1748;
1752 -> 1748;
1753 -> 1751;
1753 -> 1748;
1754 -> 1750;
1754 -> 1753;
1755 -> 1706;
1755 -> 1742;
1756 -> 1703;
1756 -> 1742;
1757 -> 1704;
1757 -> 1742;
1758 -> 1742;
1759 -> 1745;
1759 -> 1758;
1760 -> 1754;
1760 -> 1758;
1761 -> 1755;
1761 -> 1758;
1762 -> 1756;
1762 -> 1758;
1763 -> 1757;
1763 -> 1758;
1764 -> 1705;
1764 -> 1758;
1765 -> 1764;
1765 -> 1711;
1765 -> 1758;
1766 -> 0;
1766 -> 1758;
1767 -> 1758;
1768 -> 1765;
1768 -> 1767;
1769 -> 1766;
1769 -> 1767;
1770 -> 1759;
1770 -> 1758;
1771 -> 1760;
1771 -> 1758;
1772 -> 1761;
1772 -> 1758;
1773 -> 1762;
1773 -> 1758;
1774 -> 1763;
1774 -> 1758;
1775 -> 1758;
1776 -> 1770;
1776 -> 1775;
1777 -> 1771;
1777 -> 1775;
1778 -> 1772;
1778 -> 1775;
1779 -> 1773;
1779 -> 1775;
1780 -> 1774;
1780 -> 1775;
1781 -> 1764;
1781 -> 1775;
1782 -> 1776;
1782 -> 1775;
1783 -> 1777;
1783 -> 1775;
1784 -> 1778;
1784 -> 1775;
1785 -> 1779;
1785 -> 1775;
1786 -> 1780;
1786 -> 1775;
1787 -> 1775;
1788 -> 1782;
1788 -> 1787;
1789 -> 1783;
1789 -> 1787;
1790 -> 1784;
1790 -> 1787;
1791 -> 1785;
1791 -> 1787;
1792 -> 1786;
1792 -> 1787;
1793 -> 1781;
1793 -> 1711;
1793 -> 1787;
1794 -> 1788;
1794 -> 1787;
1795 -> 1793;
1795 -> 1711;
1795 -> 1787;
1796 -> 1789;
1796 -> 1787;
1797 -> 1790;
1797 -> 1787;
1798 -> 1791;
1798 -> 1787;
1799 -> 1792;
1799 -> 1787;
1800 -> 1787;
1801 -> 1794;
1801 -> 1800;
1802 -> 1795;
1802 -> 1800;
1803 -> 1796;
1803 -> 1800;
1804 -> 1797;
1804 -> 1800;
1805 -> 1798;
1805 -> 1800;
1806 -> 1799;
1806 -> 1800;
1807 -> 1793;
1807 -> 1800;
1808 -> 1807;
1808 -> 1711;
1808 -> 1800;
1809 -> 0;
1809 -> 1800;
1810 -> 1800;
1811 -> 1808;
1811 -> 1810;
1812 -> 1809;
1812 -> 1810;
1813 -> 1801;
1813 -> 1800;
1814 -> 1802;
1814 -> 1800;
1815 -> 1803;
1815 -> 1800;
1816 -> 1804;
1816 -> 1800;
1817 -> 1805;
1817 -> 1800;
1818 -> 1806;
1818 -> 1800;
1819 -> 1800;
1820 -> 1813;
1820 -> 1819;
1821 -> 1814;
1821 -> 1819;
1822 -> 1815;
1822 -> 1819;
1823 -> 1816;
1823 -> 1819;
1824 -> 1817;
1824 -> 1819;
1825 -> 1818;
1825 -> 1819;
1826 -> 1820;
1826 -> 1819;
1827 -> 1821;
1827 -> 1819;
1828 -> 1822;
1828 -> 1819;
1829 -> 1823;
1829 -> 1819;
1830 -> 1821;
1830 -> 1711;
1830 -> 1819;
1831 -> 1824;
1831 -> 1819;
1832 -> 1825;
1832 -> 1819;
1833 -> 1819;
1834 -> 1826;
1834 -> 1833;
1835 -> 1827;
1835 -> 1833;
1836 -> 1828;
1836 -> 1833;
1837 -> 1829;
1837 -> 1833;
1838 -> 1830;
1838 -> 1833;
1839 -> 1831;
1839 -> 1833;
1840 -> 1832;
1840 -> 1833;
1841 -> 1833;
1842 -> 1834;
1842 -> 1841;
1842 -> 1833;
1843 -> 1833;
1844 -> 1835;
1844 -> 1843;
1844 -> 1833;
1845 -> 1835;
1845 -> 1711;
1845 -> 1833;
1846 -> 1835;
1846 -> 1833;
1847 -> 1833;
1848 -> 1834;
1848 -> 1711;
1848 -> 1833;
1849 -> 1848;
1850 -> 1744;
1850 -> 1849;
1850 -> 1742;
1851 -> 1850;
1852 -> 1851;
1852 -> 1850;
1853 -> 1709;
1853 -> 1850;
1854 -> 1700;
1854 -> 0;
1854 -> 1852;
1855 -> 1852;
1856 -> 1700;
1856 -> 0;
1856 -> 1854;
1857 -> 1854;
1858 -> 1700;
1858 -> 0;
1858 -> 1856;
1859 -> 1856;
1860 -> 1700;
1860 -> 0;
1860 -> 1858;
1861 -> 1858;
1862 -> 1709;
1862 -> 1860;
1863 -> 1860;
1864 -> 1862;
1864 -> 1863;
1865 -> 0;
1865 -> 1863;
1866 -> 1864;
1866 -> 1863;
1867 -> 1863;
1868 -> 1863;
1869 -> 1865;
1869 -> 1868;
1870 -> 1866;
1870 -> 1868;
1871 -> 1867;
1871 -> 1868;
1872 -> 1867;
1872 -> 1868;
1873 -> 1869;
1873 -> 1872;
1873 -> 1868;
1874 -> 1870;
1874 -> 1872;
1874 -> 1868;
1875 -> 1871;
1875 -> 1872;
1875 -> 1868;
1876 -> 1867;
1876 -> 1860;
1877 -> 1691;
1878 -> 1876;
1878 -> 1877;
1879 -> 1656;
1879 -> 1877;
1880 -> 1877;
1881 -> 1879;
1881 -> 1880;
1882 -> 1881;
1882 -> 1877;
1883 -> 1882;
1883 -> 1878;
1883 -> 1873;
1883 -> 1877;
1884 -> 1883;
1885 -> 1884;
1885 -> 1883;
1886 -> 1878;
1886 -> 1885;
1887 -> 1885;
1888 -> 1886;
1888 -> 1887;
1889 -> 1879;
1889 -> 1887;
1890 -> 1888;
1890 -> 1873;
1890 -> 1889;
1890 -> 1887;
1891 -> 1889;
1891 -> 1518;
1891 -> 1890;
1891 -> 1887;
1892 -> 1888;
1892 -> 1874;
1892 -> 1887;
1893 -> 1889;
1893 -> 1891;
1893 -> 1892;
1893 -> 1853;
1893 -> 1887;
1894 -> 1888;
1894 -> 1875;
1894 -> 1889;
1894 -> 1887;
1895 -> 1885;
1896 -> 1691;
1896 -> 1893;
1896 -> 1894;
1896 -> 1637;
1897 -> 1649;
1897 -> 1893;
1897 -> 0;
1897 -> 1648;
1898 -> 1897;
1898 -> 1628;
1899 -> 1626;
1899 -> 1898;
1900 -> 1899;
1900 -> 1583;
1901 -> 1555;
1902 -> 1471;
1902 -> 1469;
1903 -> 1470;
1903 -> 1469;
1904 -> 1839;
1904 -> 1469;
1905 -> 1902;
1905 -> 1903;
1905 -> 1904;
1905 -> 1893;
1905 -> 1894;
1905 -> 1469;
1906 -> 1469;
1907 -> 1469;
1908 -> 1474;
1908 -> 1907;
1908 -> 1469;
1909 -> 1526;
1909 -> 1469;
1910 -> 1469;
1911 -> 1909;
1911 -> 1910;
1912 -> 1910;
1913 -> 1911;
1913 -> 1912;
1914 -> 1912;
1915 -> 1913;
1915 -> 1914;
1916 -> 1915;
1916 -> 1905;
1916 -> 1914;
1917 -> 1916;
1917 -> 1910;
1918 -> 1910;
1919 -> 1911;
1919 -> 1918;
1920 -> 1919;
1920 -> 1905;
1920 -> 1918;
1921 -> 1920;
1921 -> 1910;
1922 -> 1921;
1922 -> 1905;
1923 -> 1922;
1924 -> 1906;
1924 -> 1469;
1925 -> 1924;
1926 -> 1526;
1926 -> 1924;
1927 -> 1476;
1927 -> 1924;
1928 -> 1924;
1929 -> 1470;
1929 -> 1924;
1930 -> 1471;
1930 -> 1924;
1931 -> 1473;
1931 -> 1924;
1932 -> 1925;
1932 -> 1924;
1933 -> 1474;
1933 -> 1924;
1934 -> 1533;
1934 -> 1924;
1935 -> 1924;
1936 -> 1926;
1936 -> 1935;
1937 -> 1927;
1937 -> 1935;
1938 -> 1928;
1938 -> 1935;
1939 -> 1929;
1939 -> 1935;
1940 -> 1930;
1940 -> 1935;
1941 -> 1931;
1941 -> 1935;
1942 -> 1932;
1942 -> 1935;
1943 -> 1933;
1943 -> 1935;
1944 -> 1934;
1944 -> 1935;
1945 -> 1475;
1945 -> 1935;
1946 -> 1936;
1946 -> 1935;
1947 -> 1937;
1947 -> 1935;
1948 -> 1938;
1948 -> 1935;
1949 -> 1939;
1949 -> 1935;
1950 -> 1940;
1950 -> 1935;
1951 -> 1941;
1951 -> 1935;
1952 -> 1942;
1952 -> 1935;
1953 -> 1943;
1953 -> 1935;
1954 -> 1944;
1954 -> 1935;
1955 -> 1935;
1956 -> 1946;
1956 -> 1955;
1957 -> 1947;
1957 -> 1955;
1958 -> 1948;
1958 -> 1955;
1959 -> 1949;
1959 -> 1955;
1960 -> 1950;
1960 -> 1955;
1961 -> 1951;
1961 -> 1955;
1962 -> 1952;
1962 -> 1955;
1963 -> 1953;
1963 -> 1955;
1964 -> 1954;
1964 -> 1955;
1965 -> 1945;
1965 -> 1955;
1966 -> 1955;
1967 -> 1959;
1967 -> 1966;
1967 -> 1955;
1968 -> 1955;
1969 -> 1960;
1969 -> 1968;
1969 -> 1955;
1970 -> 1955;
1971 -> 1956;
1971 -> 1970;
1972 -> 1971;
1972 -> 1905;
1972 -> 1970;
1973 -> 1972;
1973 -> 1955;
1974 -> 1955;
1975 -> 1955;
1976 -> 1956;
1976 -> 1975;
1977 -> 1975;
1978 -> 1976;
1978 -> 1977;
1979 -> 1978;
1979 -> 1905;
1979 -> 1977;
1980 -> 1979;
1980 -> 1955;
1981 -> 1980;
1982 -> 1973;
1982 -> 1905;
1982 -> 1981;
1982 -> 1980;
1983 -> 1982;
1984 -> 1983;
1984 -> 1982;
1985 -> 1982;
1986 -> 1984;
1986 -> 1985;
1986 -> 1982;
1987 -> 1984;
1987 -> 1983;
1987 -> 0;
1987 -> 1982;
1988 -> 1983;
1988 -> 0;
1988 -> 1986;
1989 -> 1961;
1989 -> 1986;
1990 -> 1983;
1990 -> 1989;
1991 -> 1960;
1991 -> 1989;
1992 -> 1959;
1992 -> 1989;
1993 -> 1989;
1994 -> 1990;
1994 -> 1993;
1995 -> 1991;
1995 -> 1993;
1996 -> 1992;
1996 -> 1993;
1997 -> 1994;
1997 -> 1983;
1997 -> 1993;
1998 -> 1993;
1999 -> 1997;
1999 -> 1998;
1999 -> 1993;
2000 -> 1983;
2000 -> 1982;
2001 -> 2000;
2001 -> 1997;
2001 -> 0;
2001 -> 1935;
2002 -> 2000;
2002 -> 1935;
2003 -> 2002;
2003 -> 1997;
2003 -> 0;
2003 -> 1924;
2004 -> 1469;
2005 -> 1526;
2005 -> 2004;
2006 -> 2004;
2007 -> 2005;
2007 -> 2006;
2008 -> 0;
2008 -> 2007;
2008 -> 2006;
2009 -> 2007;
2009 -> 1997;
2009 -> 2008;
2009 -> 2006;
2010 -> 2006;
2011 -> 2010;
2011 -> 2007;
2011 -> 2006;
2012 -> 2004;
2013 -> 2004;
2014 -> 2005;
2014 -> 2009;
2014 -> 2013;
2014 -> 2004;
2015 -> 2005;
2015 -> 2014;
2016 -> 2005;
2016 -> 2009;
2016 -> 2015;
2016 -> 2011;
2016 -> 2014;
2017 -> 1469;
2018 -> 1470;
2018 -> 2016;
2018 -> 1469;
2019 -> 1469;
2020 -> 2018;
2020 -> 2019;
2021 -> 1475;
2021 -> 2019;
2022 -> 2002;
2022 -> 1469;
2023 -> 1469;
2024 -> 2020;
2024 -> 2023;
2025 -> 2022;
2025 -> 2023;
2026 -> 2025;
2026 -> 2023;
2027 -> 2025;
2027 -> 2023;
2028 -> 2027;
2028 -> 2023;
2029 -> 2028;
2029 -> 2023;
2030 -> 2024;
2030 -> 2029;
2031 -> 2029;
2032 -> 2030;
2032 -> 2031;
2033 -> 2029;
2033 -> 2031;
2034 -> 2032;
2034 -> 2030;
2034 -> 2031;
2035 -> 2032;
2035 -> 2033;
2035 -> 2031;
2036 -> 2031;
2037 -> 2036;
2037 -> 2033;
2037 -> 2031;
2038 -> 2031;
2039 -> 2038;
2039 -> 2033;
2039 -> 2031;
2040 -> 1443;
2041 -> 2029;
2041 -> 2040;
2042 -> 2041;
2042 -> 2035;
2042 -> 2030;
2042 -> 2040;
2043 -> 2042;
2043 -> 1443;
2044 -> 2043;
2045 -> 2044;
2045 -> 2043;
2046 -> 2045;
2047 -> 2029;
2047 -> 2046;
2048 -> 2047;
2048 -> 2035;
2048 -> 2046;
2049 -> 2048;
2049 -> 2045;
2050 -> 1448;
2050 -> 2045;
2051 -> 1444;
2051 -> 2045;
2052 -> 1445;
2052 -> 2045;
2053 -> 2045;
2054 -> 2049;
2054 -> 2053;
2055 -> 2049;
2055 -> 2053;
2056 -> 2049;
2056 -> 2053;
2057 -> 2049;
2057 -> 2053;
2058 -> 2049;
2058 -> 2053;
2059 -> 2054;
2059 -> 2053;
2060 -> 2055;
2060 -> 2053;
2061 -> 2056;
2061 -> 2053;
2062 -> 2057;
2062 -> 2053;
2063 -> 2053;
2064 -> 2059;
2064 -> 2063;
2065 -> 2060;
2065 -> 2063;
2066 -> 2061;
2066 -> 2063;
2067 -> 2062;
2067 -> 2063;
2068 -> 2058;
2068 -> 2063;
2069 -> 2065;
2069 -> 2049;
2069 -> 2063;
2070 -> 2053;
2071 -> 2029;
2071 -> 2043;
2072 -> 2071;
2072 -> 577;
2073 -> 1435;
2073 -> 577;
2074 -> 1434;
2074 -> 577;
2075 -> 1436;
2075 -> 577;
2076 -> 577;
2077 -> 2072;
2077 -> 2076;
2078 -> 2073;
2078 -> 2076;
2079 -> 2074;
2079 -> 2076;
2080 -> 2075;
2080 -> 2076;
2081 -> 1438;
2081 -> 2076;
2082 -> 2076;
2083 -> 2077;
2083 -> 2082;
2084 -> 2083;
2084 -> 2037;
2084 -> 2082;
2085 -> 2084;
2085 -> 0;
2085 -> 2082;
2086 -> 2085;
2086 -> 2076;
2087 -> 2077;
2087 -> 2076;
2088 -> 577;
2089 -> 2087;
2089 -> 2088;
2090 -> 2089;
2090 -> 2035;
2090 -> 2088;
2091 -> 603;
2091 -> 2090;
2091 -> 2049;
2091 -> 2030;
2091 -> 574;
2095 -> 2092;
2095 -> 2094;
2096 -> 2093;
2096 -> 2094;
2097 -> 2094;
2098 -> 2097;
2098 -> 2094;
2099 -> 2097;
2099 -> 2094;
2100 -> 2095;
2100 -> 2097;
2100 -> 2094;
2101 -> 2096;
2101 -> 2097;
2101 -> 2094;
2102 -> 2094;
2103 -> 603;
2103 -> 577;
2104 -> 577;
2105 -> 2103;
2105 -> 2091;
2105 -> 2104;
2105 -> 577;
2106 -> 2105;
2106 -> 574;
2107 -> 576;
2107 -> 574;
2108 -> 574;
2109 -> 2106;
2109 -> 2108;
2110 -> 2107;
2110 -> 2108;
2111 -> 2109;
2111 -> 2108;
2112 -> 2110;
2112 -> 2108;
2113 -> 2108;
2114 -> 2111;
2114 -> 2113;
2115 -> 2112;
2115 -> 2113;
2116 -> 2114;
2116 -> 2113;
2117 -> 2115;
2117 -> 2113;
2118 -> 2113;
2119 -> 2113;
2120 -> 2116;
2120 -> 2119;
2121 -> 2117;
2121 -> 2119;
2122 -> 2118;
2122 -> 2119;
2123 -> 2119;
2124 -> 2121;
2124 -> 2123;
2124 -> 2119;
2125 -> 2121;
2125 -> 2119;
2126 -> 2121;
2126 -> 2119;
2127 -> 2120;
2127 -> 2119;
2128 -> 2122;
2128 -> 2125;
2128 -> 2126;
2128 -> 2119;
2129 -> 2127;
2129 -> 2128;
2129 -> 2119;
2130 -> 2121;
2130 -> 2119;
2131 -> 2119;
2132 -> 2129;
2132 -> 2131;
2132 -> 2119;
2133 -> 2119;
2135 -> 2134;
2137 -> 2136;
2138 -> 2121;
2138 -> 2119;
2139 -> 2120;
2139 -> 2119;
2140 -> 2119;
2141 -> 2138;
2141 -> 2140;
2142 -> 2139;
2142 -> 2140;
2143 -> 2140;
2144 -> 2140;
2145 -> 2142;
2145 -> 2140;
2146 -> 2145;
2146 -> 2129;
2146 -> 2140;
2147 -> 2146;
2147 -> 2140;
2148 -> 2144;
2148 -> 2147;
2149 -> 2148;
2149 -> 2143;
2149 -> 2140;
2150 -> 2148;
2150 -> 2143;
2150 -> 2140;
2151 -> 2150;
2151 -> 2140;
2152 -> 2141;
2152 -> 2140;
2153 -> 2141;
2153 -> 2140;
2154 -> 2141;
2154 -> 2140;
2155 -> 2140;
2156 -> 2154;
2156 -> 2155;
2158 -> 2157;
2159 -> 2157;
2160 -> 2159;
2160 -> 2155;
2161 -> 2155;
2162 -> 2156;
2162 -> 2155;
2163 -> 2155;
2164 -> 2163;
2164 -> 2140;
2165 -> 2142;
2165 -> 2164;
2166 -> 2164;
2167 -> 2165;
2167 -> 2166;
2168 -> 2167;
2168 -> 2166;
2169 -> 2166;
2170 -> 2159;
2170 -> 2166;
2171 -> 2168;
2171 -> 2169;
2171 -> 2170;
2171 -> 2129;
2171 -> 2166;
2172 -> 2140;
2173 -> 2172;
2173 -> 2140;
2174 -> 2140;
2175 -> 2140;
2176 -> 2172;
2176 -> 2175;
2176 -> 2173;
2176 -> 2140;
2177 -> 2140;
2178 -> 2141;
2178 -> 2140;
2179 -> 2172;
2179 -> 2140;
2180 -> 2177;
2180 -> 2140;
2181 -> 2140;
2182 -> 2179;
2182 -> 2181;
2183 -> 2180;
2183 -> 2181;
2184 -> 2183;
2184 -> 2177;
2184 -> 2181;
2185 -> 2181;
2186 -> 2185;
2186 -> 2184;
2186 -> 2181;
2187 -> 2140;
2188 -> 2140;
2189 -> 2172;
2189 -> 2188;
2189 -> 2176;
2189 -> 2140;
2190 -> 2140;
2191 -> 2171;
2191 -> 2140;
2192 -> 2140;
2193 -> 2191;
2193 -> 2140;
2194 -> 2140;
2195 -> 2192;
2195 -> 2194;
2195 -> 2140;
2196 -> 2140;
2197 -> 2172;
2197 -> 2196;
2197 -> 2189;
2197 -> 2140;
2198 -> 2177;
2198 -> 2140;
2199 -> 2190;
2199 -> 2140;
2203 -> 2201;
2203 -> 2200;
2204 -> 2202;
2204 -> 2200;
2205 -> 2200;
2206 -> 0;
2206 -> 2140;
2207 -> 2140;
2208 -> 2140;
2209 -> 2198;
2209 -> 2208;
2210 -> 2199;
2210 -> 2208;
2211 -> 2206;
2211 -> 2208;
2212 -> 2207;
2212 -> 2208;
2213 -> 2207;
2213 -> 2208;
2214 -> 2208;
2215 -> 2212;
2215 -> 2214;
2215 -> 2208;
2216 -> 2215;
2216 -> 2208;
2217 -> 0;
2219 -> 2217;
2219 -> 2218;
2220 -> 2218;
2222 -> 2221;
2224 -> 2223;
2226 -> 2225;
2227 -> 2220;
2228 -> 2220;
2228 -> 2218;
2229 -> 2219;
2229 -> 2220;
2229 -> 2218;
2230 -> 2218;
2231 -> 2208;
2232 -> 2231;
2232 -> 2213;
2232 -> 2208;
2233 -> 2209;
2233 -> 2208;
2234 -> 2210;
2234 -> 2208;
2235 -> 2211;
2235 -> 2208;
2236 -> 2233;
2236 -> 2208;
2237 -> 2234;
2237 -> 2208;
2238 -> 2232;
2238 -> 2208;
2239 -> 2208;
2240 -> 2236;
2240 -> 2239;
2241 -> 2237;
2241 -> 2239;
2242 -> 2238;
2242 -> 2239;
2243 -> 2216;
2243 -> 2239;
2244 -> 2240;
2244 -> 2239;
2245 -> 2240;
2245 -> 2233;
2245 -> 2239;
2246 -> 2241;
2246 -> 2239;
2247 -> 2241;
2247 -> 2234;
2247 -> 2239;
2248 -> 2239;
2249 -> 2244;
2249 -> 2248;
2250 -> 2245;
2250 -> 2248;
2251 -> 2246;
2251 -> 2248;
2252 -> 2247;
2252 -> 2248;
2253 -> 2243;
2253 -> 2248;
2254 -> 2249;
2254 -> 2248;
2255 -> 2250;
2255 -> 2248;
2256 -> 2251;
2256 -> 2248;
2257 -> 2252;
2257 -> 2248;
2258 -> 2248;
2259 -> 2254;
2259 -> 2258;
2260 -> 2255;
2260 -> 2258;
2261 -> 2256;
2261 -> 2258;
2262 -> 2257;
2262 -> 2258;
2263 -> 2253;
2263 -> 2258;
2264 -> 2258;
2265 -> 2260;
2265 -> 2264;
2265 -> 2258;
2266 -> 2258;
2267 -> 2262;
2267 -> 2266;
2267 -> 2258;
2268 -> 2265;
2268 -> 2267;
2268 -> 2258;
2269 -> 2258;
2270 -> 2269;
2270 -> 2268;
2270 -> 2258;
2271 -> 2258;
2272 -> 2271;
2272 -> 2260;
2272 -> 2258;
2273 -> 2258;
2274 -> 2273;
2274 -> 2262;
2274 -> 2258;
2275 -> 2258;
2276 -> 2275;
2276 -> 2260;
2276 -> 2258;
2277 -> 2268;
2277 -> 2258;
2278 -> 2250;
2278 -> 2248;
2279 -> 2252;
2279 -> 2248;
2280 -> 2248;
2281 -> 2278;
2281 -> 2280;
2281 -> 2248;
2282 -> 2248;
2283 -> 2278;
2283 -> 2282;
2283 -> 2248;
2284 -> 2248;
2285 -> 2279;
2285 -> 2284;
2285 -> 2248;
2286 -> 2248;
2287 -> 2286;
2287 -> 2239;
2288 -> 2239;
2289 -> 2288;
2289 -> 2208;
2290 -> 2235;
2290 -> 2289;
2290 -> 2208;
2291 -> 2172;
2291 -> 2290;
2291 -> 2197;
2291 -> 2140;
2292 -> 2190;
2292 -> 2140;
2293 -> 2177;
2293 -> 2140;
2294 -> 2172;
2294 -> 2291;
2294 -> 2140;
2295 -> 2294;
2295 -> 2119;
2296 -> 2108;
2297 -> 574;
2298 -> 575;
2298 -> 574;
2299 -> 2105;
2299 -> 574;
2300 -> 574;
2301 -> 2298;
2301 -> 2300;
2302 -> 2299;
2302 -> 2300;
2303 -> 2302;
2303 -> 2300;
2304 -> 574;
2305 -> 575;
2305 -> 574;
}