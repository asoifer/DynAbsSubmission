digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 752604"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 752605"];
3 [label="@'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 752606"];
4 [label="prefix = @'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 752607"];
5 [label="@'\n}' 752608"];
6 [label="suffix = @'\n}' 752609"];
7 [label="param FlowTests(this) 752610"];
8 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 752611"];
9 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 752612"];
10 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 752613"];
11 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 752614"];
12 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 752615"];
13 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 752616"];
14 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 752617"];
15 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 752618"];
16 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 752619"];
17 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 752620"];
18 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 752621"];
19 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 752622"];
20 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 752623"];
21 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 752624"];
22 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 752625"];
23 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 752626"];
24 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 752627"];
25 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 752628"];
26 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 752629"];
27 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 752630"];
28 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 752631"];
29 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 752632"];
30 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 752633"];
31 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 752634"];
32 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 752635"];
33 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 752636"];
34 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 752637"];
35 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 752638"];
36 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 752639"];
37 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 752640"];
38 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 752641"];
39 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 752642"];
40 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 752643"];
41 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 752644"];
42 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 752645"];
43 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 752646"];
44 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 752647"];
45 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 752648"];
46 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 752649"];
47 [label="LazyThreadSafetyMode.PublicationOnly 752650"];
48 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 752651"];
49 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 752652"];
50 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 752653"];
51 [label="LazyThreadSafetyMode.PublicationOnly 752654"];
52 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 752655"];
53 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 752656"];
54 [label="RuntimeUtilities.IsCoreClrRuntime 752657"];
55 [label="'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' 752658"];
56 [label="new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51') 752659"];
57 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 752660"];
58 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 752661"];
59 [label="LazyThreadSafetyMode.PublicationOnly 752662"];
60 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 752663"];
61 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 752664"];
62 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 752665"];
63 [label="LazyThreadSafetyMode.PublicationOnly 752666"];
64 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 752667"];
65 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 752668"];
66 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 752669"];
67 [label="LazyThreadSafetyMode.PublicationOnly 752670"];
68 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 752671"];
69 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 752672"];
70 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 752673"];
71 [label="LazyThreadSafetyMode.PublicationOnly 752674"];
72 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752675"];
73 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752676"];
74 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 752677"];
75 [label="LazyThreadSafetyMode.PublicationOnly 752678"];
76 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752679"];
77 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752680"];
78 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 752681"];
79 [label="LazyThreadSafetyMode.PublicationOnly 752682"];
80 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752683"];
81 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752684"];
82 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 752685"];
83 [label="LazyThreadSafetyMode.PublicationOnly 752686"];
84 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752687"];
85 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752688"];
86 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 752689"];
87 [label="LazyThreadSafetyMode.PublicationOnly 752690"];
88 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752691"];
89 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752692"];
90 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 752693"];
91 [label="LazyThreadSafetyMode.PublicationOnly 752694"];
92 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752695"];
93 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752696"];
94 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 752697"];
95 [label="LazyThreadSafetyMode.PublicationOnly 752698"];
96 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752699"];
97 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752700"];
98 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 752701"];
99 [label="LazyThreadSafetyMode.PublicationOnly 752702"];
100 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 752703"];
101 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 752704"];
102 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 752705"];
103 [label="LazyThreadSafetyMode.PublicationOnly 752706"];
104 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 752707"];
105 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 752708"];
106 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 752709"];
107 [label="LazyThreadSafetyMode.PublicationOnly 752710"];
108 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752711"];
109 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752712"];
110 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 752713"];
111 [label="LazyThreadSafetyMode.PublicationOnly 752714"];
112 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752715"];
113 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752716"];
114 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 752717"];
115 [label="LazyThreadSafetyMode.PublicationOnly 752718"];
116 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752719"];
117 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752720"];
118 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 752721"];
119 [label="LazyThreadSafetyMode.PublicationOnly 752722"];
120 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752723"];
121 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752724"];
122 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 752725"];
123 [label="LazyThreadSafetyMode.PublicationOnly 752726"];
124 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 752727"];
125 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 752728"];
126 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 752729"];
127 [label="LazyThreadSafetyMode.PublicationOnly 752730"];
128 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752731"];
129 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752732"];
130 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 752733"];
131 [label="LazyThreadSafetyMode.PublicationOnly 752734"];
132 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752735"];
133 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752736"];
134 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 752737"];
135 [label="LazyThreadSafetyMode.PublicationOnly 752738"];
136 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752739"];
137 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752740"];
138 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 752741"];
139 [label="LazyThreadSafetyMode.PublicationOnly 752742"];
140 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752743"];
141 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752744"];
142 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 752745"];
143 [label="LazyThreadSafetyMode.PublicationOnly 752746"];
144 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752747"];
145 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752748"];
146 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 752749"];
147 [label="LazyThreadSafetyMode.PublicationOnly 752750"];
148 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752751"];
149 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752752"];
150 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 752753"];
151 [label="LazyThreadSafetyMode.PublicationOnly 752754"];
152 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752755"];
153 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752756"];
154 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 752757"];
155 [label="LazyThreadSafetyMode.PublicationOnly 752758"];
156 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752759"];
157 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752760"];
158 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 752761"];
159 [label="LazyThreadSafetyMode.PublicationOnly 752762"];
160 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752763"];
161 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752764"];
162 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 752765"];
163 [label="LazyThreadSafetyMode.PublicationOnly 752766"];
164 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752767"];
165 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752768"];
166 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 752769"];
167 [label="LazyThreadSafetyMode.PublicationOnly 752770"];
168 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752771"];
169 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752772"];
170 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 752773"];
171 [label="LazyThreadSafetyMode.PublicationOnly 752774"];
172 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752775"];
173 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752776"];
174 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 752777"];
175 [label="LazyThreadSafetyMode.PublicationOnly 752778"];
176 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752779"];
177 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 752780"];
178 [label="@'R:\\Invalid.dll' 752781"];
179 [label="fullPath: @'R:\\Invalid.dll' 752782"];
180 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 752783"];
181 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 752784"];
182 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 752785"];
183 [label="MscorlibRef_v4_0_30316_17626 752786"];
184 [label="Net451.mscorlib 752787"];
185 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 752788"];
186 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 752789"];
187 [label="'/*<bind>*/' 752790"];
188 [label="StartString = '/*<bind>*/' 752791"];
189 [label="'/*</bind>*/' 752792"];
190 [label="EndString = '/*</bind>*/' 752793"];
191 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 752794"];
192 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 752795"];
193 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 752796"];
194 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 752797"];
195 [label="param CSharpTestBase(this) 752798"];
196 [label="param CommonTestBase(this) 752799"];
197 [label="param TestBase(this) 752800"];
198 [label="_temp 752801"];
199 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 752802"];
200 [label="param OutVarConversion(this) 752803"];
201 [label="var source =\n@'class C\n{\n    static object F(bool b)\n    {\n        return ((bool)(b && G(out var o))) ? o : null;\n    }\n    static bool G(out object o)\n    {\n        o = null;\n        return true;\n    }\n}'; 752804"];
202 [label="var comp = CreateCompilation(source); 752805"];
203 [label="source 752806"];
204 [label="param operator(string source) 752807"];
205 [label="source 752808"];
206 [label="new CSharpTestSource(source) 752809"];
207 [label="param CSharpTestSource(object value) 752810"];
208 [label="param CSharpTestSource(this) 752811"];
209 [label="Value 752812"];
210 [label="var comp = CreateCompilation(source); 752813"];
211 [label="var comp = CreateCompilation(source); 752814"];
212 [label="CreateCompilation(source) 752815"];
213 [label="param CreateCompilation(CSharpTestSource source) 752816"];
214 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 752817"];
215 [label="param CreateCompilation(CSharpCompilationOptions options = null) 752818"];
216 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 752819"];
217 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 752820"];
218 [label="param CreateCompilation(string assemblyName = '') 752821"];
219 [label="param CreateCompilation(string sourceFileName = '') 752822"];
220 [label="param CreateCompilation(bool skipUsesIsNullable = false) 752823"];
221 [label="source 752824"];
222 [label="targetFramework 752825"];
223 [label="references 752826"];
224 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 752827"];
225 [label="param GetReferences(TargetFramework tf) 752828"];
226 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 752829"];
227 [label="var references = GetReferences(tf); 752830"];
228 [label="GetReferences(tf) 752831"];
229 [label="param GetReferences(TargetFramework targetFramework) 752832"];
230 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 752833"];
231 [label="StandardReferences 752834"];
232 [label="RuntimeUtilities.IsCoreClrRuntime 752835"];
233 [label="NetStandard20References 752836"];
234 [label="ImmutableArray.Create<MetadataReference>(NetStandard20.netstandard, NetStandard20.mscorlib, NetStandard20.SystemRuntime, NetStandard20.SystemCore, NetStandard20.SystemDynamicRuntime, NetStandard20.SystemLinq, NetStandard20.SystemLinqExpressions) 752837"];
235 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 752838"];
236 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 752839"];
237 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 752840"];
238 [label="return references; 752841"];
239 [label="options 752842"];
240 [label="parseOptions 752843"];
241 [label="assemblyName 752844"];
242 [label="sourceFileName 752845"];
243 [label="skipUsesIsNullable 752846"];
244 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 752847"];
245 [label="param CreateEmptyCompilation(CSharpTestSource source) 752848"];
246 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 752849"];
247 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 752850"];
248 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 752851"];
249 [label="param CreateEmptyCompilation(string assemblyName = '') 752852"];
250 [label="param CreateEmptyCompilation(string sourceFileName = '') 752853"];
251 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 752854"];
252 [label="source 752855"];
253 [label="references 752856"];
254 [label="options 752857"];
255 [label="parseOptions 752858"];
256 [label="assemblyName 752859"];
257 [label="sourceFileName 752860"];
258 [label="skipUsesIsNullable 752861"];
259 [label="null 752862"];
260 [label="experimentalFeature: null 752863"];
261 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 752864"];
262 [label="param CreateCompilationCore(CSharpTestSource source) 752865"];
263 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 752866"];
264 [label="param CreateCompilationCore(CSharpCompilationOptions options) 752867"];
265 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 752868"];
266 [label="param CreateCompilationCore(string assemblyName) 752869"];
267 [label="param CreateCompilationCore(string sourceFileName) 752870"];
268 [label="param CreateCompilationCore(bool skipUsesIsNullable) 752871"];
269 [label="param CreateCompilationCore(MessageID? experimentalFeature) 752872"];
270 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 752873"];
271 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 752874"];
272 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 752875"];
273 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 752876"];
274 [label="param GetSyntaxTrees(string sourceFileName = '') 752877"];
275 [label="param GetSyntaxTrees(this) 752878"];
276 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 752879"];
277 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 752880"];
278 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 752881"];
279 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 752882"];
280 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 752883"];
281 [label="param Parse(string text) 752884"];
282 [label="param Parse(string filename = '') 752885"];
283 [label="param Parse(CSharpParseOptions options = null) 752886"];
284 [label="param Parse(Encoding encoding = null) 752887"];
285 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 752888"];
286 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 752889"];
287 [label="kind: SourceCodeKind.Regular 752890"];
288 [label="documentationMode: DocumentationMode.Parse 752891"];
289 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 752892"];
290 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 752893"];
291 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 752894"];
292 [label="SourceCodeKind.Script 752895"];
293 [label="Regular.WithKind(SourceCodeKind.Script) 752896"];
294 [label="Script = Regular.WithKind(SourceCodeKind.Script) 752897"];
295 [label="LanguageVersion.CSharp6 752898"];
296 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 752899"];
297 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 752900"];
298 [label="LanguageVersion.CSharp7 752901"];
299 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 752902"];
300 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 752903"];
301 [label="LanguageVersion.CSharp7_1 752904"];
302 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 752905"];
303 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 752906"];
304 [label="LanguageVersion.CSharp7_2 752907"];
305 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 752908"];
306 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 752909"];
307 [label="LanguageVersion.CSharp7_3 752910"];
308 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 752911"];
309 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 752912"];
310 [label="LanguageVersion.Default 752913"];
311 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 752914"];
312 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 752915"];
313 [label="LanguageVersion.Preview 752916"];
314 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 752917"];
315 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 752918"];
316 [label="LanguageVersion.CSharp8 752919"];
317 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 752920"];
318 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 752921"];
319 [label="LanguageVersion.CSharp9 752922"];
320 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 752923"];
321 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 752924"];
322 [label="DocumentationMode.Diagnose 752925"];
323 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 752926"];
324 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 752927"];
325 [label="Regular 752928"];
326 [label="'UseLegacyStrongNameProvider' 752929"];
327 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 752930"];
328 [label="param WithFeature(this CSharpParseOptions options) 752931"];
329 [label="param WithFeature(string feature) 752932"];
330 [label="param WithFeature(string value = 'true') 752933"];
331 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 752934"];
332 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 752935"];
333 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 752936"];
334 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 752937"];
335 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 752938"];
336 [label="new[] { new KeyValuePair<string, string>(feature, value) } 752939"];
337 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 752940"];
338 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 752941"];
339 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 752942"];
340 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 752943"];
341 [label="1 752944"];
342 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 752945"];
343 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 752946"];
344 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 752947"];
345 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 752948"];
346 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 752949"];
347 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 752950"];
348 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 752951"];
349 [label="LanguageVersion.CSharp8 752952"];
350 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 752953"];
351 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 752954"];
352 [label="RegularWithExtendedPartialMethods = RegularPreview 752955"];
353 [label="new SmallDictionary<string, string> { } 752956"];
354 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 752957"];
355 [label="kind: SourceCodeKind.Regular 752958"];
356 [label="documentationMode: DocumentationMode.None 752959"];
357 [label="languageVersion: LanguageVersion.Preview 752960"];
358 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 752961"];
359 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 752962"];
360 [label="s_experimentalFeatures 752963"];
361 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 752964"];
362 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 752965"];
363 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 752966"];
364 [label="'testV7SwitchBinder' 752967"];
365 [label="'true' 752968"];
366 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 752969"];
367 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 752970"];
368 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 752971"];
369 [label="RegularWithoutRecursivePatterns = Regular7_3 752972"];
370 [label="RegularWithRecursivePatterns = Regular8 752973"];
371 [label="RegularWithoutPatternCombinators = Regular8 752974"];
372 [label="RegularWithPatternCombinators = RegularPreview 752975"];
373 [label="OutputKind.DynamicallyLinkedLibrary 752976"];
374 [label="OptimizationLevel.Release 752977"];
375 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 752978"];
376 [label="param CreateTestOptions(OutputKind outputKind) 752979"];
377 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 752980"];
378 [label="param CreateTestOptions(bool allowUnsafe = false) 752981"];
379 [label="outputKind 752982"];
380 [label="optimizationLevel: optimizationLevel 752983"];
381 [label="warningLevel: Diagnostic.MaxWarningLevel 752984"];
382 [label="allowUnsafe: allowUnsafe 752985"];
383 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 752986"];
384 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 752987"];
385 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 752988"];
386 [label="OutputKind.ConsoleApplication 752989"];
387 [label="OptimizationLevel.Release 752990"];
388 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 752991"];
389 [label="param CreateTestOptions(OutputKind outputKind) 752992"];
390 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 752993"];
391 [label="param CreateTestOptions(bool allowUnsafe = false) 752994"];
392 [label="outputKind 752995"];
393 [label="optimizationLevel: optimizationLevel 752996"];
394 [label="warningLevel: Diagnostic.MaxWarningLevel 752997"];
395 [label="allowUnsafe: allowUnsafe 752998"];
396 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 752999"];
397 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753000"];
398 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 753001"];
399 [label="true 753002"];
400 [label="ReleaseDll.WithDebugPlusMode(true) 753003"];
401 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 753004"];
402 [label="true 753005"];
403 [label="ReleaseExe.WithDebugPlusMode(true) 753006"];
404 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 753007"];
405 [label="OutputKind.DynamicallyLinkedLibrary 753008"];
406 [label="OptimizationLevel.Debug 753009"];
407 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 753010"];
408 [label="param CreateTestOptions(OutputKind outputKind) 753011"];
409 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 753012"];
410 [label="param CreateTestOptions(bool allowUnsafe = false) 753013"];
411 [label="outputKind 753014"];
412 [label="optimizationLevel: optimizationLevel 753015"];
413 [label="warningLevel: Diagnostic.MaxWarningLevel 753016"];
414 [label="allowUnsafe: allowUnsafe 753017"];
415 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753018"];
416 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753019"];
417 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 753020"];
418 [label="OutputKind.ConsoleApplication 753021"];
419 [label="OptimizationLevel.Debug 753022"];
420 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 753023"];
421 [label="param CreateTestOptions(OutputKind outputKind) 753024"];
422 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 753025"];
423 [label="param CreateTestOptions(bool allowUnsafe = false) 753026"];
424 [label="outputKind 753027"];
425 [label="optimizationLevel: optimizationLevel 753028"];
426 [label="warningLevel: Diagnostic.MaxWarningLevel 753029"];
427 [label="allowUnsafe: allowUnsafe 753030"];
428 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753031"];
429 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753032"];
430 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 753033"];
431 [label="OutputKind.WindowsRuntimeMetadata 753034"];
432 [label="OptimizationLevel.Release 753035"];
433 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 753036"];
434 [label="param CreateTestOptions(OutputKind outputKind) 753037"];
435 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 753038"];
436 [label="param CreateTestOptions(bool allowUnsafe = false) 753039"];
437 [label="outputKind 753040"];
438 [label="optimizationLevel: optimizationLevel 753041"];
439 [label="warningLevel: Diagnostic.MaxWarningLevel 753042"];
440 [label="allowUnsafe: allowUnsafe 753043"];
441 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753044"];
442 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753045"];
443 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 753046"];
444 [label="OutputKind.WindowsRuntimeMetadata 753047"];
445 [label="OptimizationLevel.Debug 753048"];
446 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 753049"];
447 [label="param CreateTestOptions(OutputKind outputKind) 753050"];
448 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 753051"];
449 [label="param CreateTestOptions(bool allowUnsafe = false) 753052"];
450 [label="outputKind 753053"];
451 [label="optimizationLevel: optimizationLevel 753054"];
452 [label="warningLevel: Diagnostic.MaxWarningLevel 753055"];
453 [label="allowUnsafe: allowUnsafe 753056"];
454 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753057"];
455 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753058"];
456 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 753059"];
457 [label="OutputKind.NetModule 753060"];
458 [label="OptimizationLevel.Release 753061"];
459 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 753062"];
460 [label="param CreateTestOptions(OutputKind outputKind) 753063"];
461 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 753064"];
462 [label="param CreateTestOptions(bool allowUnsafe = false) 753065"];
463 [label="outputKind 753066"];
464 [label="optimizationLevel: optimizationLevel 753067"];
465 [label="warningLevel: Diagnostic.MaxWarningLevel 753068"];
466 [label="allowUnsafe: allowUnsafe 753069"];
467 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753070"];
468 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753071"];
469 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 753072"];
470 [label="OutputKind.NetModule 753073"];
471 [label="OptimizationLevel.Debug 753074"];
472 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 753075"];
473 [label="param CreateTestOptions(OutputKind outputKind) 753076"];
474 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 753077"];
475 [label="param CreateTestOptions(bool allowUnsafe = false) 753078"];
476 [label="outputKind 753079"];
477 [label="optimizationLevel: optimizationLevel 753080"];
478 [label="warningLevel: Diagnostic.MaxWarningLevel 753081"];
479 [label="allowUnsafe: allowUnsafe 753082"];
480 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753083"];
481 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 753084"];
482 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 753085"];
483 [label="true 753086"];
484 [label="ReleaseDll.WithAllowUnsafe(true) 753087"];
485 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 753088"];
486 [label="true 753089"];
487 [label="ReleaseExe.WithAllowUnsafe(true) 753090"];
488 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 753091"];
489 [label="true 753092"];
490 [label="DebugDll.WithAllowUnsafe(true) 753093"];
491 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 753094"];
492 [label="true 753095"];
493 [label="DebugExe.WithAllowUnsafe(true) 753096"];
494 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 753097"];
495 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 753098"];
496 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 753099"];
497 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 753100"];
498 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 753101"];
499 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 753102"];
500 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 753103"];
501 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 753104"];
502 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 753105"];
503 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 753106"];
504 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 753107"];
505 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 753108"];
506 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 753109"];
507 [label="DebugInformationFormat.Pdb 753110"];
508 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 753111"];
509 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 753112"];
510 [label="options = TestOptions.Regular; 753113"];
511 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 753114"];
512 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 753115"];
513 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 753116"];
514 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 753117"];
515 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 753118"];
516 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 753119"];
517 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 753120"];
518 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 753121"];
519 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 753122"];
520 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 753123"];
521 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 753124"];
522 [label="param CheckSerializable(SyntaxTree tree) 753125"];
523 [label="var stream = new MemoryStream(); 753126"];
524 [label="var root = tree.GetRoot(); 753127"];
525 [label="var root = tree.GetRoot(); 753128"];
526 [label="root.SerializeTo(stream); 753129"];
527 [label="root.SerializeTo(stream); 753130"];
528 [label="root.SerializeTo(stream); 753131"];
529 [label="stream.Position = 0; 753132"];
530 [label="stream.Position 753133"];
531 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 753134"];
532 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 753135"];
533 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 753136"];
534 [label="return tree; 753137"];
535 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 753138"];
536 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 753139"];
537 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 753140"];
538 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 753141"];
539 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 753142"];
540 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 753143"];
541 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 753144"];
542 [label="hasTopLevelStatements 753145"];
543 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 753146"];
544 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 753147"];
545 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 753148"];
546 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 753149"];
547 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 753150"];
548 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 753151"];
549 [label="param ValidateIOperations(Func<Compilation> createCompilation) 753152"];
550 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 753153"];
551 [label="return; 753154"];
552 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 753155"];
553 [label="var compilation = createCompilationLambda(); 753156"];
554 [label="var compilation = createCompilationLambda(); 753157"];
555 [label="return Guid.NewGuid().ToString('D'); 753158"];
556 [label="var compilation = createCompilationLambda(); 753159"];
557 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 753160"];
558 [label="IsNullableEnabled(compilation) 753161"];
559 [label="param IsNullableEnabled(CSharpCompilation compilation) 753162"];
560 [label="var trees = compilation.SyntaxTrees; 753163"];
561 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 753164"];
562 [label="var options = (CSharpParseOptions)trees[0].Options; 753165"];
563 [label="var options = (CSharpParseOptions)trees[0].Options; 753166"];
564 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 753167"];
565 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 753168"];
566 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 753169"];
567 [label="return compilation; 753170"];
568 [label="comp.VerifyDiagnostics(); 753171"];
569 [label="comp.VerifyDiagnostics(); 753172"];
570 [label="comp.VerifyDiagnostics() 753173"];
571 [label="param VerifyDiagnostics(this TCompilation c) 753174"];
572 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 753175"];
573 [label="var diagnostics = c.GetDiagnostics(); 753176"];
574 [label="var diagnostics = c.GetDiagnostics(); 753177"];
575 [label="diagnostics.Verify(expected); 753178"];
576 [label="diagnostics.Verify(expected); 753179"];
577 [label="diagnostics.Verify(expected) 753180"];
578 [label="param Verify(this ImmutableArray<Diagnostic> actual) 753181"];
579 [label="param Verify(params DiagnosticDescription[] expected) 753182"];
580 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 753183"];
581 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 753184"];
582 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 753185"];
583 [label="param Verify(this IEnumerable<Diagnostic> actual) 753186"];
584 [label="param Verify(params DiagnosticDescription[] expected) 753187"];
585 [label="Verify(actual, expected, errorCodeOnly: false); 753188"];
586 [label="Verify(actual, expected, errorCodeOnly: false); 753189"];
587 [label="Verify(actual, expected, errorCodeOnly: false); 753190"];
588 [label="Verify(actual, expected, errorCodeOnly: false) 753191"];
589 [label="param Verify(IEnumerable<Diagnostic> actual) 753192"];
590 [label="param Verify(DiagnosticDescription[] expected) 753193"];
591 [label="param Verify(bool errorCodeOnly) 753194"];
592 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 753195"];
593 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 753196"];
594 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 753197"];
595 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 753198"];
596 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 753199"];
597 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 753200"];
598 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 753201"];
599 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 753202"];
600 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 753203"];
601 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 753204"];
602 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 753205"];
603 [label="{ } 753206"];
604 [label="None = { } 753207"];
605 [label="null 753208"];
606 [label="Any = null 753209"];
607 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 753210"];
608 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 753211"];
609 [label="DiagnosticDescription.GetAssertText(expected, actual) 753212"];
610 [label="param GetAssertText(DiagnosticDescription[] expected) 753213"];
611 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 753214"];
612 [label="const int CSharp = 1; 753215"];
613 [label="const int VisualBasic = 2; 753216"];
614 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 753217"];
615 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 753218"];
616 [label="actual.Any() && actual.First() is CSDiagnostic 753219"];
617 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 753220"];
618 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 753221"];
619 [label="int indentDepth = (language == CSharp) ? 4 : 1; 753222"];
620 [label="(language == CSharp) 753223"];
621 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 753224"];
622 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 753225"];
623 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 753226"];
624 [label="IsSortedOrEmpty(expected) 753227"];
625 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 753228"];
626 [label="new LinePositionComparer() 753229"];
627 [label="param LinePositionComparer(this) 753230"];
628 [label="Instance = new LinePositionComparer() 753231"];
629 [label="var comparer = LinePositionComparer.Instance; 753232"];
630 [label="DiagnosticDescription last = null; 753233"];
631 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 753234"];
632 [label="return true; 753235"];
633 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 753236"];
634 [label="actual = Sort(actual); 753237"];
635 [label="Sort(actual) 753238"];
636 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 753239"];
637 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 753240"];
638 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 753241"];
639 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 753242"];
640 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 753243"];
641 [label="var assertText = new StringBuilder(); 753244"];
642 [label="assertText.AppendLine(); 753245"];
643 [label="int i; 753246"];
644 [label="assertText.AppendLine('Expected:'); 753247"];
645 [label="assertText.AppendLine('Expected:'); 753248"];
646 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 753249"];
647 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 753250"];
648 [label="GetCommaSeparatedLines(assertText, expectedText); 753251"];
649 [label="GetCommaSeparatedLines(assertText, expectedText); 753252"];
650 [label="GetCommaSeparatedLines(assertText, expectedText) 753253"];
651 [label="param GetCommaSeparatedLines(StringBuilder sb) 753254"];
652 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 753255"];
653 [label="int n = lines.Count; 753256"];
654 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 753257"];
655 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 753258"];
656 [label="GetCommaSeparatedLines(assertText, expectedText); 753259"];
657 [label="assertText.AppendLine('Actual:'); 753260"];
658 [label="assertText.AppendLine('Actual:'); 753261"];
659 [label="var actualText = ArrayBuilder<string>.GetInstance(); 753262"];
660 [label="var e = actual.GetEnumerator(); 753263"];
661 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 753264"];
662 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 753265"];
663 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 753266"];
664 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 753267"];
665 [label="assertText.AppendLine('Diff:'); 753268"];
666 [label="assertText.AppendLine('Diff:'); 753269"];
667 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 753270"];
668 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 753271"];
669 [label="new[] { '\\r', '\\n' } 753272"];
670 [label="'\\r' 753273"];
671 [label="'\\n' 753274"];
672 [label="new[] { '\\r', '\\n' } 753275"];
673 [label="new[] { '\\r', '\\n' } 753276"];
674 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 753277"];
675 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 753278"];
676 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 753279"];
677 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 753280"];
678 [label="param DiffReport(IEnumerable<T> expected) 753281"];
679 [label="param DiffReport(IEnumerable<T> actual) 753282"];
680 [label="param DiffReport(string separator) 753283"];
681 [label="param DiffReport(IEqualityComparer<T> comparer = null) 753284"];
682 [label="param DiffReport(Func<T, string> toString = null) 753285"];
683 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 753286"];
684 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 753287"];
685 [label="(comparer != null) 753288"];
686 [label="EqualityComparer<T>.Default 753289"];
687 [label="new LCS<T>(EqualityComparer<T>.Default) 753290"];
688 [label="param LCS(IEqualityComparer<T> comparer) 753291"];
689 [label="param LCS(this) 753292"];
690 [label="1 753293"];
691 [label="DeleteCost = 1 753294"];
692 [label="1 753295"];
693 [label="InsertCost = 1 753296"];
694 [label="2 753297"];
695 [label="UpdateCost = 2 753298"];
696 [label="param LongestCommonSubsequence(this) 753299"];
697 [label="_comparer 753300"];
698 [label="_comparer 753301"];
699 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 753302"];
700 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 753303"];
701 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 753304"];
702 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 753305"];
703 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 753306"];
704 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 753307"];
705 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 753308"];
706 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 753309"];
707 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 753310"];
708 [label="lcs.CalculateDiff(expectedList, actualList, toString) 753311"];
709 [label="param CalculateDiff(IList<T> sequenceA) 753312"];
710 [label="param CalculateDiff(IList<T> sequenceB) 753313"];
711 [label="param CalculateDiff(Func<T, string> toString) 753314"];
712 [label="param CalculateDiff(this) 753315"];
713 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 753316"];
714 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 753317"];
715 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 753318"];
716 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 753319"];
717 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 753320"];
718 [label="param GetEdits(TSequence sequenceA) 753321"];
719 [label="param GetEdits(int lengthA) 753322"];
720 [label="param GetEdits(TSequence sequenceB) 753323"];
721 [label="param GetEdits(int lengthB) 753324"];
722 [label="param GetEdits(this) 753325"];
723 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 753326"];
724 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 753327"];
725 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 753328"];
726 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 753329"];
727 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 753330"];
728 [label="param ComputeCostMatrix(TSequence sequenceA) 753331"];
729 [label="param ComputeCostMatrix(int lengthA) 753332"];
730 [label="param ComputeCostMatrix(TSequence sequenceB) 753333"];
731 [label="param ComputeCostMatrix(int lengthB) 753334"];
732 [label="param ComputeCostMatrix(this) 753335"];
733 [label="var la = lengthA + 1; 753336"];
734 [label="var la = lengthA + 1; 753337"];
735 [label="var lb = lengthB + 1; 753338"];
736 [label="var lb = lengthB + 1; 753339"];
737 [label="var d = new int[la, lb]; 753340"];
738 [label="d[0, 0] = 0; 753341"];
739 [label="d[0, 0] 753342"];
740 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 753343"];
741 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 753344"];
742 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 753345"];
743 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 753346"];
744 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 753347"];
745 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 753348"];
746 [label="return d; 753349"];
747 [label="int i = lengthA; 753350"];
748 [label="int j = lengthB; 753351"];
749 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 753352"];
750 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 753353"];
751 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 753354"];
752 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 753355"];
753 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 753356"];
754 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 753357"];
755 [label="param GetEdits(this) 753358"];
756 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 753359"];
757 [label="param CalculateDiff(this) 753360"];
758 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 753361"];
759 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 753362"];
760 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 753363"];
761 [label="actualText.Free(); 753364"];
762 [label="expectedText.Free(); 753365"];
763 [label="return assertText.ToString(); 753366"];
764 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 753367"];
765 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 753368"];
766 [label="diagnostics.Verify(expected); 753369"];
767 [label="VerifyAssemblyIds(c, diagnostics); 753370"];
768 [label="VerifyAssemblyIds(c, diagnostics); 753371"];
769 [label="VerifyAssemblyIds(c, diagnostics) 753372"];
770 [label="param VerifyAssemblyIds(TCompilation c) 753373"];
771 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 753374"];
772 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 753375"];
773 [label="VerifyAssemblyIds(c, diagnostics); 753376"];
774 [label="return c; 753377"];
2 -> 0;
2 -> 1;
4 -> 3;
6 -> 5;
7 -> 1;
9 -> 8;
11 -> 10;
13 -> 12;
15 -> 14;
17 -> 16;
19 -> 18;
21 -> 20;
23 -> 22;
25 -> 24;
27 -> 26;
29 -> 28;
31 -> 30;
33 -> 32;
35 -> 34;
37 -> 36;
39 -> 38;
41 -> 40;
43 -> 42;
45 -> 44;
46 -> 0;
47 -> 0;
48 -> 46;
48 -> 47;
48 -> 0;
49 -> 48;
50 -> 0;
51 -> 0;
52 -> 50;
52 -> 51;
52 -> 48;
53 -> 52;
54 -> 0;
55 -> 54;
56 -> 55;
56 -> 54;
57 -> 56;
59 -> 0;
60 -> 58;
60 -> 59;
61 -> 60;
62 -> 0;
63 -> 0;
64 -> 62;
64 -> 63;
64 -> 0;
65 -> 64;
66 -> 0;
67 -> 0;
68 -> 66;
68 -> 67;
68 -> 52;
69 -> 68;
70 -> 0;
71 -> 0;
72 -> 70;
72 -> 71;
72 -> 68;
73 -> 72;
74 -> 0;
75 -> 0;
76 -> 74;
76 -> 75;
76 -> 72;
77 -> 76;
78 -> 0;
79 -> 0;
80 -> 78;
80 -> 79;
80 -> 0;
81 -> 80;
82 -> 0;
83 -> 0;
84 -> 82;
84 -> 83;
84 -> 0;
85 -> 84;
86 -> 0;
87 -> 0;
88 -> 86;
88 -> 87;
88 -> 0;
89 -> 88;
90 -> 0;
91 -> 0;
92 -> 90;
92 -> 91;
92 -> 76;
93 -> 92;
94 -> 0;
95 -> 0;
96 -> 94;
96 -> 95;
96 -> 0;
97 -> 96;
99 -> 0;
100 -> 98;
100 -> 99;
101 -> 100;
102 -> 0;
103 -> 0;
104 -> 102;
104 -> 103;
104 -> 92;
105 -> 104;
106 -> 0;
107 -> 0;
108 -> 106;
108 -> 107;
108 -> 0;
109 -> 108;
110 -> 0;
111 -> 0;
112 -> 110;
112 -> 111;
112 -> 0;
113 -> 112;
114 -> 0;
115 -> 0;
116 -> 114;
116 -> 115;
116 -> 0;
117 -> 116;
118 -> 0;
119 -> 0;
120 -> 118;
120 -> 119;
120 -> 0;
121 -> 120;
122 -> 0;
123 -> 0;
124 -> 122;
124 -> 123;
124 -> 0;
125 -> 124;
126 -> 0;
127 -> 0;
128 -> 126;
128 -> 127;
128 -> 104;
129 -> 128;
130 -> 0;
131 -> 0;
132 -> 130;
132 -> 131;
132 -> 128;
133 -> 132;
134 -> 0;
135 -> 0;
136 -> 134;
136 -> 135;
136 -> 132;
137 -> 136;
138 -> 0;
139 -> 0;
140 -> 138;
140 -> 139;
140 -> 136;
141 -> 140;
142 -> 0;
143 -> 0;
144 -> 142;
144 -> 143;
144 -> 0;
145 -> 144;
146 -> 0;
147 -> 0;
148 -> 146;
148 -> 147;
148 -> 0;
149 -> 148;
150 -> 0;
151 -> 0;
152 -> 150;
152 -> 151;
152 -> 140;
153 -> 152;
154 -> 0;
155 -> 0;
156 -> 154;
156 -> 155;
156 -> 0;
157 -> 156;
158 -> 0;
159 -> 0;
160 -> 158;
160 -> 159;
160 -> 0;
161 -> 160;
162 -> 0;
163 -> 0;
164 -> 162;
164 -> 163;
164 -> 0;
165 -> 164;
166 -> 0;
167 -> 0;
168 -> 166;
168 -> 167;
168 -> 152;
169 -> 168;
170 -> 0;
171 -> 0;
172 -> 170;
172 -> 171;
172 -> 0;
173 -> 172;
174 -> 0;
175 -> 0;
176 -> 174;
176 -> 175;
176 -> 0;
177 -> 176;
179 -> 178;
181 -> 179;
181 -> 180;
182 -> 181;
184 -> 0;
184 -> 183;
185 -> 184;
185 -> 0;
186 -> 185;
188 -> 187;
190 -> 189;
192 -> 191;
194 -> 193;
195 -> 7;
196 -> 195;
197 -> 196;
198 -> 197;
198 -> 196;
199 -> 1;
199 -> 2;
199 -> 198;
200 -> 1;
201 -> 1;
202 -> 201;
202 -> 1;
203 -> 1;
204 -> 202;
204 -> 203;
205 -> 204;
205 -> 203;
206 -> 203;
207 -> 205;
207 -> 206;
208 -> 206;
209 -> 207;
209 -> 208;
209 -> 206;
210 -> 206;
210 -> 1;
211 -> 1;
212 -> 1;
213 -> 210;
213 -> 212;
214 -> 211;
214 -> 212;
215 -> 211;
215 -> 212;
216 -> 211;
216 -> 212;
217 -> 211;
217 -> 212;
218 -> 211;
218 -> 212;
219 -> 211;
219 -> 212;
220 -> 211;
220 -> 212;
221 -> 213;
221 -> 212;
222 -> 217;
222 -> 212;
223 -> 214;
223 -> 212;
224 -> 212;
225 -> 222;
225 -> 224;
226 -> 223;
226 -> 224;
227 -> 225;
227 -> 224;
228 -> 224;
229 -> 227;
229 -> 228;
230 -> 229;
230 -> 228;
231 -> 230;
232 -> 0;
232 -> 231;
233 -> 232;
234 -> 233;
235 -> 234;
235 -> 231;
236 -> 224;
237 -> 226;
237 -> 236;
237 -> 224;
238 -> 235;
238 -> 237;
239 -> 215;
239 -> 212;
240 -> 216;
240 -> 212;
241 -> 218;
241 -> 212;
242 -> 219;
242 -> 212;
243 -> 220;
243 -> 212;
244 -> 212;
245 -> 221;
245 -> 244;
246 -> 238;
246 -> 244;
247 -> 239;
247 -> 244;
248 -> 240;
248 -> 244;
249 -> 241;
249 -> 244;
250 -> 242;
250 -> 244;
251 -> 243;
251 -> 244;
252 -> 245;
252 -> 244;
253 -> 246;
253 -> 244;
254 -> 247;
254 -> 244;
255 -> 248;
255 -> 244;
256 -> 249;
256 -> 244;
257 -> 250;
257 -> 244;
258 -> 251;
258 -> 244;
259 -> 244;
260 -> 259;
260 -> 244;
261 -> 244;
262 -> 252;
262 -> 261;
263 -> 253;
263 -> 261;
264 -> 254;
264 -> 261;
265 -> 255;
265 -> 261;
266 -> 256;
266 -> 261;
267 -> 257;
267 -> 261;
268 -> 258;
268 -> 261;
269 -> 260;
269 -> 261;
270 -> 265;
270 -> 261;
271 -> 267;
271 -> 261;
272 -> 261;
273 -> 270;
273 -> 272;
274 -> 271;
274 -> 272;
275 -> 262;
275 -> 272;
276 -> 275;
276 -> 209;
276 -> 272;
277 -> 276;
278 -> 274;
278 -> 276;
279 -> 273;
279 -> 276;
280 -> 276;
281 -> 277;
281 -> 280;
282 -> 278;
282 -> 280;
283 -> 279;
283 -> 280;
284 -> 277;
284 -> 280;
285 -> 280;
286 -> 283;
286 -> 285;
286 -> 280;
287 -> 0;
288 -> 0;
290 -> 287;
290 -> 288;
290 -> 289;
291 -> 290;
292 -> 0;
293 -> 291;
293 -> 290;
293 -> 292;
294 -> 293;
295 -> 0;
296 -> 291;
296 -> 290;
296 -> 295;
297 -> 296;
298 -> 0;
299 -> 291;
299 -> 290;
299 -> 298;
300 -> 299;
301 -> 0;
302 -> 291;
302 -> 290;
302 -> 301;
303 -> 302;
304 -> 0;
305 -> 291;
305 -> 290;
305 -> 304;
306 -> 305;
307 -> 0;
308 -> 291;
308 -> 290;
308 -> 307;
309 -> 308;
310 -> 0;
311 -> 291;
311 -> 290;
311 -> 310;
312 -> 311;
313 -> 0;
314 -> 291;
314 -> 290;
314 -> 313;
315 -> 314;
316 -> 0;
317 -> 291;
317 -> 290;
317 -> 316;
318 -> 317;
319 -> 0;
320 -> 291;
320 -> 290;
320 -> 319;
321 -> 320;
322 -> 0;
323 -> 291;
323 -> 290;
323 -> 322;
324 -> 323;
325 -> 291;
328 -> 325;
328 -> 327;
329 -> 326;
329 -> 327;
330 -> 327;
331 -> 328;
331 -> 290;
331 -> 327;
332 -> 327;
333 -> 329;
333 -> 327;
334 -> 330;
334 -> 327;
335 -> 333;
335 -> 334;
335 -> 327;
336 -> 335;
336 -> 332;
336 -> 327;
337 -> 331;
337 -> 332;
337 -> 290;
337 -> 336;
337 -> 335;
337 -> 327;
338 -> 337;
339 -> 0;
340 -> 339;
342 -> 340;
342 -> 341;
343 -> 291;
343 -> 290;
343 -> 342;
344 -> 343;
345 -> 0;
346 -> 345;
347 -> 291;
347 -> 290;
347 -> 346;
348 -> 347;
349 -> 0;
350 -> 291;
350 -> 290;
350 -> 349;
351 -> 350;
352 -> 315;
354 -> 353;
355 -> 0;
356 -> 0;
357 -> 0;
359 -> 355;
359 -> 356;
359 -> 357;
359 -> 358;
360 -> 354;
361 -> 359;
361 -> 360;
361 -> 353;
362 -> 361;
366 -> 363;
366 -> 364;
366 -> 365;
367 -> 297;
367 -> 290;
367 -> 296;
367 -> 363;
367 -> 366;
368 -> 367;
369 -> 309;
370 -> 318;
371 -> 318;
372 -> 315;
373 -> 0;
374 -> 0;
376 -> 373;
376 -> 375;
377 -> 374;
377 -> 375;
378 -> 375;
379 -> 376;
379 -> 375;
380 -> 377;
380 -> 375;
381 -> 0;
381 -> 375;
382 -> 378;
382 -> 375;
383 -> 375;
384 -> 379;
384 -> 380;
384 -> 381;
384 -> 382;
384 -> 383;
384 -> 375;
385 -> 384;
386 -> 0;
387 -> 0;
389 -> 386;
389 -> 388;
390 -> 387;
390 -> 388;
391 -> 388;
392 -> 389;
392 -> 388;
393 -> 390;
393 -> 388;
394 -> 0;
394 -> 388;
395 -> 391;
395 -> 388;
396 -> 388;
397 -> 392;
397 -> 393;
397 -> 394;
397 -> 395;
397 -> 396;
397 -> 388;
398 -> 397;
400 -> 385;
400 -> 384;
400 -> 399;
401 -> 400;
403 -> 398;
403 -> 397;
403 -> 402;
404 -> 403;
405 -> 0;
406 -> 0;
408 -> 405;
408 -> 407;
409 -> 406;
409 -> 407;
410 -> 407;
411 -> 408;
411 -> 407;
412 -> 409;
412 -> 407;
413 -> 0;
413 -> 407;
414 -> 410;
414 -> 407;
415 -> 407;
416 -> 411;
416 -> 412;
416 -> 413;
416 -> 414;
416 -> 415;
416 -> 407;
417 -> 416;
418 -> 0;
419 -> 0;
421 -> 418;
421 -> 420;
422 -> 419;
422 -> 420;
423 -> 420;
424 -> 421;
424 -> 420;
425 -> 422;
425 -> 420;
426 -> 0;
426 -> 420;
427 -> 423;
427 -> 420;
428 -> 420;
429 -> 424;
429 -> 425;
429 -> 426;
429 -> 427;
429 -> 428;
429 -> 420;
430 -> 429;
431 -> 0;
432 -> 0;
434 -> 431;
434 -> 433;
435 -> 432;
435 -> 433;
436 -> 433;
437 -> 434;
437 -> 433;
438 -> 435;
438 -> 433;
439 -> 0;
439 -> 433;
440 -> 436;
440 -> 433;
441 -> 433;
442 -> 437;
442 -> 438;
442 -> 439;
442 -> 440;
442 -> 441;
442 -> 433;
443 -> 442;
444 -> 0;
445 -> 0;
447 -> 444;
447 -> 446;
448 -> 445;
448 -> 446;
449 -> 446;
450 -> 447;
450 -> 446;
451 -> 448;
451 -> 446;
452 -> 0;
452 -> 446;
453 -> 449;
453 -> 446;
454 -> 446;
455 -> 450;
455 -> 451;
455 -> 452;
455 -> 453;
455 -> 454;
455 -> 446;
456 -> 455;
457 -> 0;
458 -> 0;
460 -> 457;
460 -> 459;
461 -> 458;
461 -> 459;
462 -> 459;
463 -> 460;
463 -> 459;
464 -> 461;
464 -> 459;
465 -> 0;
465 -> 459;
466 -> 462;
466 -> 459;
467 -> 459;
468 -> 463;
468 -> 464;
468 -> 465;
468 -> 466;
468 -> 467;
468 -> 459;
469 -> 468;
470 -> 0;
471 -> 0;
473 -> 470;
473 -> 472;
474 -> 471;
474 -> 472;
475 -> 472;
476 -> 473;
476 -> 472;
477 -> 474;
477 -> 472;
478 -> 0;
478 -> 472;
479 -> 475;
479 -> 472;
480 -> 472;
481 -> 476;
481 -> 477;
481 -> 478;
481 -> 479;
481 -> 480;
481 -> 472;
482 -> 481;
484 -> 385;
484 -> 384;
484 -> 483;
485 -> 484;
487 -> 398;
487 -> 397;
487 -> 486;
488 -> 487;
490 -> 417;
490 -> 416;
490 -> 489;
491 -> 490;
493 -> 430;
493 -> 429;
493 -> 492;
494 -> 493;
495 -> 0;
496 -> 385;
496 -> 384;
496 -> 495;
496 -> 0;
497 -> 496;
498 -> 0;
499 -> 398;
499 -> 397;
499 -> 498;
499 -> 0;
500 -> 499;
501 -> 0;
502 -> 469;
502 -> 468;
502 -> 501;
502 -> 0;
503 -> 502;
504 -> 0;
505 -> 417;
505 -> 416;
505 -> 504;
505 -> 0;
506 -> 505;
507 -> 0;
508 -> 0;
508 -> 507;
509 -> 508;
510 -> 291;
510 -> 286;
511 -> 281;
511 -> 280;
512 -> 0;
512 -> 280;
513 -> 512;
513 -> 284;
513 -> 280;
514 -> 280;
515 -> 511;
515 -> 513;
515 -> 514;
515 -> 0;
515 -> 280;
516 -> 515;
516 -> 280;
517 -> 510;
517 -> 280;
518 -> 282;
518 -> 280;
519 -> 280;
520 -> 516;
520 -> 517;
520 -> 518;
520 -> 519;
520 -> 515;
520 -> 290;
520 -> 280;
521 -> 280;
522 -> 520;
522 -> 521;
523 -> 521;
524 -> 521;
525 -> 522;
525 -> 520;
525 -> 524;
525 -> 521;
526 -> 523;
526 -> 521;
527 -> 521;
528 -> 525;
528 -> 520;
528 -> 524;
528 -> 526;
528 -> 527;
528 -> 523;
528 -> 521;
529 -> 521;
530 -> 529;
530 -> 523;
530 -> 521;
531 -> 523;
531 -> 521;
532 -> 521;
533 -> 531;
533 -> 532;
533 -> 523;
533 -> 530;
533 -> 521;
534 -> 522;
534 -> 521;
535 -> 534;
535 -> 277;
535 -> 276;
536 -> 277;
536 -> 261;
537 -> 261;
538 -> 264;
538 -> 537;
538 -> 261;
539 -> 536;
539 -> 538;
540 -> 538;
541 -> 539;
541 -> 540;
541 -> 277;
541 -> 535;
541 -> 520;
541 -> 538;
542 -> 541;
542 -> 538;
543 -> 385;
543 -> 542;
544 -> 0;
544 -> 261;
545 -> 269;
545 -> 261;
546 -> 266;
546 -> 536;
546 -> 263;
546 -> 543;
546 -> 261;
547 -> 546;
547 -> 261;
548 -> 261;
549 -> 547;
549 -> 548;
550 -> 0;
550 -> 548;
551 -> 550;
552 -> 261;
553 -> 546;
553 -> 277;
553 -> 535;
553 -> 520;
553 -> 234;
553 -> 0;
553 -> 384;
553 -> 261;
554 -> 261;
555 -> 554;
556 -> 553;
556 -> 555;
556 -> 261;
557 -> 556;
557 -> 261;
558 -> 261;
559 -> 557;
559 -> 558;
560 -> 559;
560 -> 556;
560 -> 558;
561 -> 560;
561 -> 556;
561 -> 558;
562 -> 558;
563 -> 560;
563 -> 562;
563 -> 556;
563 -> 558;
564 -> 0;
564 -> 558;
565 -> 563;
565 -> 564;
565 -> 558;
566 -> 268;
566 -> 565;
566 -> 261;
567 -> 556;
567 -> 261;
568 -> 567;
568 -> 1;
569 -> 1;
570 -> 1;
571 -> 568;
571 -> 570;
572 -> 569;
572 -> 570;
573 -> 570;
574 -> 571;
574 -> 573;
574 -> 565;
574 -> 570;
575 -> 574;
575 -> 570;
576 -> 572;
576 -> 570;
577 -> 570;
578 -> 575;
578 -> 577;
579 -> 576;
579 -> 577;
580 -> 578;
580 -> 577;
581 -> 579;
581 -> 577;
582 -> 577;
583 -> 580;
583 -> 582;
584 -> 581;
584 -> 582;
585 -> 583;
585 -> 582;
586 -> 584;
586 -> 582;
587 -> 582;
588 -> 582;
589 -> 585;
589 -> 588;
590 -> 586;
590 -> 588;
591 -> 587;
591 -> 588;
592 -> 588;
593 -> 590;
593 -> 592;
593 -> 588;
594 -> 590;
594 -> 588;
595 -> 590;
595 -> 588;
596 -> 589;
596 -> 588;
597 -> 591;
597 -> 594;
597 -> 595;
597 -> 588;
598 -> 596;
598 -> 597;
598 -> 588;
599 -> 590;
599 -> 588;
600 -> 588;
601 -> 598;
601 -> 600;
601 -> 588;
602 -> 588;
604 -> 603;
606 -> 605;
607 -> 590;
607 -> 588;
608 -> 589;
608 -> 588;
609 -> 588;
610 -> 607;
610 -> 609;
611 -> 608;
611 -> 609;
612 -> 609;
613 -> 609;
614 -> 611;
614 -> 609;
615 -> 614;
615 -> 598;
615 -> 609;
616 -> 615;
616 -> 609;
617 -> 613;
617 -> 616;
618 -> 617;
618 -> 612;
618 -> 609;
619 -> 617;
619 -> 612;
619 -> 609;
620 -> 619;
620 -> 609;
621 -> 610;
621 -> 609;
622 -> 610;
622 -> 609;
623 -> 610;
623 -> 609;
624 -> 609;
625 -> 623;
625 -> 624;
627 -> 626;
628 -> 626;
629 -> 628;
629 -> 624;
630 -> 624;
631 -> 625;
631 -> 624;
632 -> 624;
633 -> 632;
633 -> 609;
634 -> 611;
634 -> 633;
635 -> 633;
636 -> 634;
636 -> 635;
637 -> 636;
637 -> 635;
638 -> 635;
639 -> 628;
639 -> 635;
640 -> 637;
640 -> 638;
640 -> 639;
640 -> 598;
640 -> 635;
641 -> 609;
642 -> 641;
642 -> 609;
643 -> 609;
644 -> 609;
645 -> 641;
645 -> 644;
645 -> 642;
645 -> 609;
646 -> 609;
647 -> 610;
647 -> 609;
648 -> 641;
648 -> 609;
649 -> 646;
649 -> 609;
650 -> 609;
651 -> 648;
651 -> 650;
652 -> 649;
652 -> 650;
653 -> 652;
653 -> 646;
653 -> 650;
654 -> 650;
655 -> 654;
655 -> 653;
655 -> 650;
656 -> 609;
657 -> 609;
658 -> 641;
658 -> 657;
658 -> 645;
658 -> 609;
659 -> 609;
660 -> 640;
660 -> 609;
661 -> 609;
662 -> 660;
662 -> 609;
663 -> 609;
664 -> 661;
664 -> 663;
664 -> 609;
665 -> 609;
666 -> 641;
666 -> 665;
666 -> 658;
666 -> 609;
667 -> 646;
667 -> 609;
668 -> 659;
668 -> 609;
672 -> 670;
672 -> 669;
673 -> 671;
673 -> 669;
674 -> 669;
675 -> 0;
675 -> 609;
676 -> 609;
677 -> 609;
678 -> 667;
678 -> 677;
679 -> 668;
679 -> 677;
680 -> 675;
680 -> 677;
681 -> 676;
681 -> 677;
682 -> 676;
682 -> 677;
683 -> 677;
684 -> 681;
684 -> 683;
684 -> 677;
685 -> 684;
685 -> 677;
686 -> 0;
688 -> 686;
688 -> 687;
689 -> 687;
691 -> 690;
693 -> 692;
695 -> 694;
696 -> 689;
697 -> 689;
697 -> 687;
698 -> 688;
698 -> 689;
698 -> 687;
699 -> 687;
700 -> 677;
701 -> 700;
701 -> 682;
701 -> 677;
702 -> 678;
702 -> 677;
703 -> 679;
703 -> 677;
704 -> 680;
704 -> 677;
705 -> 702;
705 -> 677;
706 -> 703;
706 -> 677;
707 -> 701;
707 -> 677;
708 -> 677;
709 -> 705;
709 -> 708;
710 -> 706;
710 -> 708;
711 -> 707;
711 -> 708;
712 -> 685;
712 -> 708;
713 -> 709;
713 -> 708;
714 -> 709;
714 -> 702;
714 -> 708;
715 -> 710;
715 -> 708;
716 -> 710;
716 -> 703;
716 -> 708;
717 -> 708;
718 -> 713;
718 -> 717;
719 -> 714;
719 -> 717;
720 -> 715;
720 -> 717;
721 -> 716;
721 -> 717;
722 -> 712;
722 -> 717;
723 -> 718;
723 -> 717;
724 -> 719;
724 -> 717;
725 -> 720;
725 -> 717;
726 -> 721;
726 -> 717;
727 -> 717;
728 -> 723;
728 -> 727;
729 -> 724;
729 -> 727;
730 -> 725;
730 -> 727;
731 -> 726;
731 -> 727;
732 -> 722;
732 -> 727;
733 -> 727;
734 -> 729;
734 -> 733;
734 -> 727;
735 -> 727;
736 -> 731;
736 -> 735;
736 -> 727;
737 -> 734;
737 -> 736;
737 -> 727;
738 -> 727;
739 -> 738;
739 -> 737;
739 -> 727;
740 -> 727;
741 -> 740;
741 -> 729;
741 -> 727;
742 -> 727;
743 -> 742;
743 -> 731;
743 -> 727;
744 -> 727;
745 -> 744;
745 -> 729;
745 -> 727;
746 -> 737;
746 -> 727;
747 -> 719;
747 -> 717;
748 -> 721;
748 -> 717;
749 -> 717;
750 -> 747;
750 -> 749;
750 -> 717;
751 -> 717;
752 -> 747;
752 -> 751;
752 -> 717;
753 -> 717;
754 -> 748;
754 -> 753;
754 -> 717;
755 -> 717;
756 -> 755;
756 -> 708;
757 -> 708;
758 -> 757;
758 -> 677;
759 -> 704;
759 -> 758;
759 -> 677;
760 -> 641;
760 -> 759;
760 -> 666;
760 -> 609;
761 -> 659;
761 -> 609;
762 -> 646;
762 -> 609;
763 -> 641;
763 -> 760;
763 -> 609;
764 -> 763;
764 -> 588;
765 -> 577;
766 -> 570;
767 -> 571;
767 -> 570;
768 -> 574;
768 -> 570;
769 -> 570;
770 -> 767;
770 -> 769;
771 -> 768;
771 -> 769;
772 -> 771;
772 -> 769;
773 -> 570;
774 -> 571;
774 -> 570;
}