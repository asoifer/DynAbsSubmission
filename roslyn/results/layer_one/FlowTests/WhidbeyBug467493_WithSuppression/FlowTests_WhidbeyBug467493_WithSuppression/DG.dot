digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 767629"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 767630"];
3 [label="@'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 767631"];
4 [label="prefix = @'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 767632"];
5 [label="@'\n}' 767633"];
6 [label="suffix = @'\n}' 767634"];
7 [label="param FlowTests(this) 767635"];
8 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 767636"];
9 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 767637"];
10 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 767638"];
11 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 767639"];
12 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 767640"];
13 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 767641"];
14 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 767642"];
15 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 767643"];
16 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 767644"];
17 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 767645"];
18 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 767646"];
19 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 767647"];
20 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 767648"];
21 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 767649"];
22 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 767650"];
23 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 767651"];
24 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 767652"];
25 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 767653"];
26 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 767654"];
27 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 767655"];
28 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 767656"];
29 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 767657"];
30 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 767658"];
31 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 767659"];
32 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 767660"];
33 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 767661"];
34 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 767662"];
35 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 767663"];
36 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 767664"];
37 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 767665"];
38 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 767666"];
39 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 767667"];
40 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 767668"];
41 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 767669"];
42 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 767670"];
43 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 767671"];
44 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 767672"];
45 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 767673"];
46 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 767674"];
47 [label="LazyThreadSafetyMode.PublicationOnly 767675"];
48 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 767676"];
49 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 767677"];
50 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 767678"];
51 [label="LazyThreadSafetyMode.PublicationOnly 767679"];
52 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 767680"];
53 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 767681"];
54 [label="RuntimeUtilities.IsCoreClrRuntime 767682"];
55 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 767683"];
56 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 767684"];
57 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 767685"];
58 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 767686"];
59 [label="LazyThreadSafetyMode.PublicationOnly 767687"];
60 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 767688"];
61 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 767689"];
62 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 767690"];
63 [label="LazyThreadSafetyMode.PublicationOnly 767691"];
64 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 767692"];
65 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 767693"];
66 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 767694"];
67 [label="LazyThreadSafetyMode.PublicationOnly 767695"];
68 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 767696"];
69 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 767697"];
70 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 767698"];
71 [label="LazyThreadSafetyMode.PublicationOnly 767699"];
72 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767700"];
73 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767701"];
74 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 767702"];
75 [label="LazyThreadSafetyMode.PublicationOnly 767703"];
76 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767704"];
77 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767705"];
78 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 767706"];
79 [label="LazyThreadSafetyMode.PublicationOnly 767707"];
80 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767708"];
81 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767709"];
82 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 767710"];
83 [label="LazyThreadSafetyMode.PublicationOnly 767711"];
84 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767712"];
85 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767713"];
86 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 767714"];
87 [label="LazyThreadSafetyMode.PublicationOnly 767715"];
88 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767716"];
89 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767717"];
90 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 767718"];
91 [label="LazyThreadSafetyMode.PublicationOnly 767719"];
92 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767720"];
93 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767721"];
94 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 767722"];
95 [label="LazyThreadSafetyMode.PublicationOnly 767723"];
96 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767724"];
97 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767725"];
98 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 767726"];
99 [label="LazyThreadSafetyMode.PublicationOnly 767727"];
100 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 767728"];
101 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 767729"];
102 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 767730"];
103 [label="LazyThreadSafetyMode.PublicationOnly 767731"];
104 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 767732"];
105 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 767733"];
106 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 767734"];
107 [label="LazyThreadSafetyMode.PublicationOnly 767735"];
108 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767736"];
109 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767737"];
110 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 767738"];
111 [label="LazyThreadSafetyMode.PublicationOnly 767739"];
112 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767740"];
113 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767741"];
114 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 767742"];
115 [label="LazyThreadSafetyMode.PublicationOnly 767743"];
116 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767744"];
117 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767745"];
118 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 767746"];
119 [label="LazyThreadSafetyMode.PublicationOnly 767747"];
120 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767748"];
121 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767749"];
122 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 767750"];
123 [label="LazyThreadSafetyMode.PublicationOnly 767751"];
124 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 767752"];
125 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 767753"];
126 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 767754"];
127 [label="LazyThreadSafetyMode.PublicationOnly 767755"];
128 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767756"];
129 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767757"];
130 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 767758"];
131 [label="LazyThreadSafetyMode.PublicationOnly 767759"];
132 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767760"];
133 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767761"];
134 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 767762"];
135 [label="LazyThreadSafetyMode.PublicationOnly 767763"];
136 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767764"];
137 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767765"];
138 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 767766"];
139 [label="LazyThreadSafetyMode.PublicationOnly 767767"];
140 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767768"];
141 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767769"];
142 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 767770"];
143 [label="LazyThreadSafetyMode.PublicationOnly 767771"];
144 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767772"];
145 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767773"];
146 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 767774"];
147 [label="LazyThreadSafetyMode.PublicationOnly 767775"];
148 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767776"];
149 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767777"];
150 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 767778"];
151 [label="LazyThreadSafetyMode.PublicationOnly 767779"];
152 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767780"];
153 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767781"];
154 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 767782"];
155 [label="LazyThreadSafetyMode.PublicationOnly 767783"];
156 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767784"];
157 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767785"];
158 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 767786"];
159 [label="LazyThreadSafetyMode.PublicationOnly 767787"];
160 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767788"];
161 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767789"];
162 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 767790"];
163 [label="LazyThreadSafetyMode.PublicationOnly 767791"];
164 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767792"];
165 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767793"];
166 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 767794"];
167 [label="LazyThreadSafetyMode.PublicationOnly 767795"];
168 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767796"];
169 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767797"];
170 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 767798"];
171 [label="LazyThreadSafetyMode.PublicationOnly 767799"];
172 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767800"];
173 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767801"];
174 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 767802"];
175 [label="LazyThreadSafetyMode.PublicationOnly 767803"];
176 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767804"];
177 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 767805"];
178 [label="@'R:\\Invalid.dll' 767806"];
179 [label="fullPath: @'R:\\Invalid.dll' 767807"];
180 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 767808"];
181 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 767809"];
182 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 767810"];
183 [label="MscorlibRef_v4_0_30316_17626 767811"];
184 [label="Net451.mscorlib 767812"];
185 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 767813"];
186 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 767814"];
187 [label="'/*<bind>*/' 767815"];
188 [label="StartString = '/*<bind>*/' 767816"];
189 [label="'/*</bind>*/' 767817"];
190 [label="EndString = '/*</bind>*/' 767818"];
191 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 767819"];
192 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 767820"];
193 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 767821"];
194 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 767822"];
195 [label="param CSharpTestBase(this) 767823"];
196 [label="param CommonTestBase(this) 767824"];
197 [label="param TestBase(this) 767825"];
198 [label="_temp 767826"];
199 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 767827"];
200 [label="param WhidbeyBug467493_WithSuppression(this) 767828"];
201 [label="var source = prefix + @'\n    // Whidbey bug #467493\n    public static void M4() {\n        int x;\n        throw new Exception();\n        ((DI)(delegate { if (x == 1) return 1; Console.WriteLine(''Bug''); } !))();\n    }\n' + suffix; 767829"];
202 [label="var source = prefix + @'\n    // Whidbey bug #467493\n    public static void M4() {\n        int x;\n        throw new Exception();\n        ((DI)(delegate { if (x == 1) return 1; Console.WriteLine(''Bug''); } !))();\n    }\n' + suffix; 767830"];
203 [label="var source = prefix + @'\n    // Whidbey bug #467493\n    public static void M4() {\n        int x;\n        throw new Exception();\n        ((DI)(delegate { if (x == 1) return 1; Console.WriteLine(''Bug''); } !))();\n    }\n' + suffix; 767831"];
204 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (78,15): error CS1643: Not all code paths return a value in anonymous method of type 'DI'\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.ERR_AnonymousReturnExpected, 'delegate').WithArguments('anonymous method', 'DI').WithLocation(78, 15),\n                // (78,9): warning CS0162: Unreachable code detected\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.WRN_UnreachableCode, '(').WithLocation(78, 9)\n                ); 767832"];
205 [label="source 767833"];
206 [label="param operator(string source) 767834"];
207 [label="source 767835"];
208 [label="new CSharpTestSource(source) 767836"];
209 [label="param CSharpTestSource(object value) 767837"];
210 [label="param CSharpTestSource(this) 767838"];
211 [label="Value 767839"];
212 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (78,15): error CS1643: Not all code paths return a value in anonymous method of type 'DI'\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.ERR_AnonymousReturnExpected, 'delegate').WithArguments('anonymous method', 'DI').WithLocation(78, 15),\n                // (78,9): warning CS0162: Unreachable code detected\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.WRN_UnreachableCode, '(').WithLocation(78, 9)\n                ); 767840"];
213 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (78,15): error CS1643: Not all code paths return a value in anonymous method of type 'DI'\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.ERR_AnonymousReturnExpected, 'delegate').WithArguments('anonymous method', 'DI').WithLocation(78, 15),\n                // (78,9): warning CS0162: Unreachable code detected\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.WRN_UnreachableCode, '(').WithLocation(78, 9)\n                ); 767841"];
214 [label="CreateCompilation(source) 767842"];
215 [label="param CreateCompilation(CSharpTestSource source) 767843"];
216 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 767844"];
217 [label="param CreateCompilation(CSharpCompilationOptions options = null) 767845"];
218 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 767846"];
219 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 767847"];
220 [label="param CreateCompilation(string assemblyName = '') 767848"];
221 [label="param CreateCompilation(string sourceFileName = '') 767849"];
222 [label="param CreateCompilation(bool skipUsesIsNullable = false) 767850"];
223 [label="source 767851"];
224 [label="targetFramework 767852"];
225 [label="references 767853"];
226 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 767854"];
227 [label="param GetReferences(TargetFramework tf) 767855"];
228 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 767856"];
229 [label="var references = GetReferences(tf); 767857"];
230 [label="GetReferences(tf) 767858"];
231 [label="param GetReferences(TargetFramework targetFramework) 767859"];
232 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 767860"];
233 [label="StandardReferences 767861"];
234 [label="RuntimeUtilities.IsCoreClrRuntime 767862"];
235 [label="Mscorlib46ExtendedReferences 767863"];
236 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 767864"];
237 [label="TestBase.ValueTupleRef 767865"];
238 [label="TestReferences.NetFx.ValueTuple.tuplelib 767866"];
239 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 767867"];
240 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 767868"];
241 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 767869"];
242 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 767870"];
243 [label="return references; 767871"];
244 [label="options 767872"];
245 [label="parseOptions 767873"];
246 [label="assemblyName 767874"];
247 [label="sourceFileName 767875"];
248 [label="skipUsesIsNullable 767876"];
249 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 767877"];
250 [label="param CreateEmptyCompilation(CSharpTestSource source) 767878"];
251 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 767879"];
252 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 767880"];
253 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 767881"];
254 [label="param CreateEmptyCompilation(string assemblyName = '') 767882"];
255 [label="param CreateEmptyCompilation(string sourceFileName = '') 767883"];
256 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 767884"];
257 [label="source 767885"];
258 [label="references 767886"];
259 [label="options 767887"];
260 [label="parseOptions 767888"];
261 [label="assemblyName 767889"];
262 [label="sourceFileName 767890"];
263 [label="skipUsesIsNullable 767891"];
264 [label="null 767892"];
265 [label="experimentalFeature: null 767893"];
266 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 767894"];
267 [label="param CreateCompilationCore(CSharpTestSource source) 767895"];
268 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 767896"];
269 [label="param CreateCompilationCore(CSharpCompilationOptions options) 767897"];
270 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 767898"];
271 [label="param CreateCompilationCore(string assemblyName) 767899"];
272 [label="param CreateCompilationCore(string sourceFileName) 767900"];
273 [label="param CreateCompilationCore(bool skipUsesIsNullable) 767901"];
274 [label="param CreateCompilationCore(MessageID? experimentalFeature) 767902"];
275 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 767903"];
276 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 767904"];
277 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 767905"];
278 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 767906"];
279 [label="param GetSyntaxTrees(string sourceFileName = '') 767907"];
280 [label="param GetSyntaxTrees(this) 767908"];
281 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 767909"];
282 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 767910"];
283 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 767911"];
284 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 767912"];
285 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 767913"];
286 [label="param Parse(string text) 767914"];
287 [label="param Parse(string filename = '') 767915"];
288 [label="param Parse(CSharpParseOptions options = null) 767916"];
289 [label="param Parse(Encoding encoding = null) 767917"];
290 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 767918"];
291 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 767919"];
292 [label="kind: SourceCodeKind.Regular 767920"];
293 [label="documentationMode: DocumentationMode.Parse 767921"];
294 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 767922"];
295 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 767923"];
296 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 767924"];
297 [label="SourceCodeKind.Script 767925"];
298 [label="Regular.WithKind(SourceCodeKind.Script) 767926"];
299 [label="Script = Regular.WithKind(SourceCodeKind.Script) 767927"];
300 [label="LanguageVersion.CSharp6 767928"];
301 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 767929"];
302 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 767930"];
303 [label="LanguageVersion.CSharp7 767931"];
304 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 767932"];
305 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 767933"];
306 [label="LanguageVersion.CSharp7_1 767934"];
307 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 767935"];
308 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 767936"];
309 [label="LanguageVersion.CSharp7_2 767937"];
310 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 767938"];
311 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 767939"];
312 [label="LanguageVersion.CSharp7_3 767940"];
313 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 767941"];
314 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 767942"];
315 [label="LanguageVersion.Default 767943"];
316 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 767944"];
317 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 767945"];
318 [label="LanguageVersion.Preview 767946"];
319 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 767947"];
320 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 767948"];
321 [label="LanguageVersion.CSharp8 767949"];
322 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 767950"];
323 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 767951"];
324 [label="LanguageVersion.CSharp9 767952"];
325 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 767953"];
326 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 767954"];
327 [label="DocumentationMode.Diagnose 767955"];
328 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 767956"];
329 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 767957"];
330 [label="Regular 767958"];
331 [label="'UseLegacyStrongNameProvider' 767959"];
332 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 767960"];
333 [label="param WithFeature(this CSharpParseOptions options) 767961"];
334 [label="param WithFeature(string feature) 767962"];
335 [label="param WithFeature(string value = 'true') 767963"];
336 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 767964"];
337 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 767965"];
338 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 767966"];
339 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 767967"];
340 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 767968"];
341 [label="new[] { new KeyValuePair<string, string>(feature, value) } 767969"];
342 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 767970"];
343 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 767971"];
344 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 767972"];
345 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 767973"];
346 [label="1 767974"];
347 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 767975"];
348 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 767976"];
349 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 767977"];
350 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 767978"];
351 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 767979"];
352 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 767980"];
353 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 767981"];
354 [label="LanguageVersion.CSharp8 767982"];
355 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 767983"];
356 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 767984"];
357 [label="RegularWithExtendedPartialMethods = RegularPreview 767985"];
358 [label="new SmallDictionary<string, string> { } 767986"];
359 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 767987"];
360 [label="kind: SourceCodeKind.Regular 767988"];
361 [label="documentationMode: DocumentationMode.None 767989"];
362 [label="languageVersion: LanguageVersion.Preview 767990"];
363 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 767991"];
364 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 767992"];
365 [label="s_experimentalFeatures 767993"];
366 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 767994"];
367 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 767995"];
368 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 767996"];
369 [label="'testV7SwitchBinder' 767997"];
370 [label="'true' 767998"];
371 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 767999"];
372 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 768000"];
373 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 768001"];
374 [label="RegularWithoutRecursivePatterns = Regular7_3 768002"];
375 [label="RegularWithRecursivePatterns = Regular8 768003"];
376 [label="RegularWithoutPatternCombinators = Regular8 768004"];
377 [label="RegularWithPatternCombinators = RegularPreview 768005"];
378 [label="OutputKind.DynamicallyLinkedLibrary 768006"];
379 [label="OptimizationLevel.Release 768007"];
380 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 768008"];
381 [label="param CreateTestOptions(OutputKind outputKind) 768009"];
382 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 768010"];
383 [label="param CreateTestOptions(bool allowUnsafe = false) 768011"];
384 [label="outputKind 768012"];
385 [label="optimizationLevel: optimizationLevel 768013"];
386 [label="warningLevel: Diagnostic.MaxWarningLevel 768014"];
387 [label="allowUnsafe: allowUnsafe 768015"];
388 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 768016"];
389 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 768017"];
390 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 768018"];
391 [label="OutputKind.ConsoleApplication 768019"];
392 [label="OptimizationLevel.Release 768020"];
393 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 768021"];
394 [label="param CreateTestOptions(OutputKind outputKind) 768022"];
395 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 768023"];
396 [label="param CreateTestOptions(bool allowUnsafe = false) 768024"];
397 [label="outputKind 768025"];
398 [label="optimizationLevel: optimizationLevel 768026"];
399 [label="warningLevel: Diagnostic.MaxWarningLevel 768027"];
400 [label="allowUnsafe: allowUnsafe 768028"];
401 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 768029"];
402 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 768030"];
403 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 768031"];
404 [label="true 768032"];
405 [label="ReleaseDll.WithDebugPlusMode(true) 768033"];
406 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 768034"];
407 [label="true 768035"];
408 [label="ReleaseExe.WithDebugPlusMode(true) 768036"];
409 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 768037"];
410 [label="OutputKind.DynamicallyLinkedLibrary 768038"];
411 [label="OptimizationLevel.Debug 768039"];
412 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 768040"];
413 [label="param CreateTestOptions(OutputKind outputKind) 768041"];
414 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 768042"];
415 [label="param CreateTestOptions(bool allowUnsafe = false) 768043"];
416 [label="outputKind 768044"];
417 [label="optimizationLevel: optimizationLevel 768045"];
418 [label="warningLevel: Diagnostic.MaxWarningLevel 768046"];
419 [label="allowUnsafe: allowUnsafe 768047"];
420 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 768048"];
421 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 768049"];
422 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 768050"];
423 [label="OutputKind.ConsoleApplication 768051"];
424 [label="OptimizationLevel.Debug 768052"];
425 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 768053"];
426 [label="param CreateTestOptions(OutputKind outputKind) 768054"];
427 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 768055"];
428 [label="param CreateTestOptions(bool allowUnsafe = false) 768056"];
429 [label="outputKind 768057"];
430 [label="optimizationLevel: optimizationLevel 768058"];
431 [label="warningLevel: Diagnostic.MaxWarningLevel 768059"];
432 [label="allowUnsafe: allowUnsafe 768060"];
433 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 768061"];
434 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 768062"];
435 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 768063"];
436 [label="OutputKind.WindowsRuntimeMetadata 768064"];
437 [label="OptimizationLevel.Release 768065"];
438 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 768066"];
439 [label="param CreateTestOptions(OutputKind outputKind) 768067"];
440 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 768068"];
441 [label="param CreateTestOptions(bool allowUnsafe = false) 768069"];
442 [label="outputKind 768070"];
443 [label="optimizationLevel: optimizationLevel 768071"];
444 [label="warningLevel: Diagnostic.MaxWarningLevel 768072"];
445 [label="allowUnsafe: allowUnsafe 768073"];
446 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 768074"];
447 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 768075"];
448 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 768076"];
449 [label="OutputKind.WindowsRuntimeMetadata 768077"];
450 [label="OptimizationLevel.Debug 768078"];
451 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 768079"];
452 [label="param CreateTestOptions(OutputKind outputKind) 768080"];
453 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 768081"];
454 [label="param CreateTestOptions(bool allowUnsafe = false) 768082"];
455 [label="outputKind 768083"];
456 [label="optimizationLevel: optimizationLevel 768084"];
457 [label="warningLevel: Diagnostic.MaxWarningLevel 768085"];
458 [label="allowUnsafe: allowUnsafe 768086"];
459 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 768087"];
460 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 768088"];
461 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 768089"];
462 [label="OutputKind.NetModule 768090"];
463 [label="OptimizationLevel.Release 768091"];
464 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 768092"];
465 [label="param CreateTestOptions(OutputKind outputKind) 768093"];
466 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 768094"];
467 [label="param CreateTestOptions(bool allowUnsafe = false) 768095"];
468 [label="outputKind 768096"];
469 [label="optimizationLevel: optimizationLevel 768097"];
470 [label="warningLevel: Diagnostic.MaxWarningLevel 768098"];
471 [label="allowUnsafe: allowUnsafe 768099"];
472 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 768100"];
473 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 768101"];
474 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 768102"];
475 [label="OutputKind.NetModule 768103"];
476 [label="OptimizationLevel.Debug 768104"];
477 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 768105"];
478 [label="param CreateTestOptions(OutputKind outputKind) 768106"];
479 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 768107"];
480 [label="param CreateTestOptions(bool allowUnsafe = false) 768108"];
481 [label="outputKind 768109"];
482 [label="optimizationLevel: optimizationLevel 768110"];
483 [label="warningLevel: Diagnostic.MaxWarningLevel 768111"];
484 [label="allowUnsafe: allowUnsafe 768112"];
485 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 768113"];
486 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 768114"];
487 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 768115"];
488 [label="true 768116"];
489 [label="ReleaseDll.WithAllowUnsafe(true) 768117"];
490 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 768118"];
491 [label="true 768119"];
492 [label="ReleaseExe.WithAllowUnsafe(true) 768120"];
493 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 768121"];
494 [label="true 768122"];
495 [label="DebugDll.WithAllowUnsafe(true) 768123"];
496 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 768124"];
497 [label="true 768125"];
498 [label="DebugExe.WithAllowUnsafe(true) 768126"];
499 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 768127"];
500 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 768128"];
501 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 768129"];
502 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 768130"];
503 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 768131"];
504 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 768132"];
505 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 768133"];
506 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 768134"];
507 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 768135"];
508 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 768136"];
509 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 768137"];
510 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 768138"];
511 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 768139"];
512 [label="DebugInformationFormat.Pdb 768140"];
513 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 768141"];
514 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 768142"];
515 [label="options = TestOptions.Regular; 768143"];
516 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 768144"];
517 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 768145"];
518 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 768146"];
519 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 768147"];
520 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 768148"];
521 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 768149"];
522 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 768150"];
523 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 768151"];
524 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 768152"];
525 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 768153"];
526 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 768154"];
527 [label="param CheckSerializable(SyntaxTree tree) 768155"];
528 [label="var stream = new MemoryStream(); 768156"];
529 [label="var root = tree.GetRoot(); 768157"];
530 [label="var root = tree.GetRoot(); 768158"];
531 [label="root.SerializeTo(stream); 768159"];
532 [label="root.SerializeTo(stream); 768160"];
533 [label="root.SerializeTo(stream); 768161"];
534 [label="stream.Position = 0; 768162"];
535 [label="stream.Position 768163"];
536 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 768164"];
537 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 768165"];
538 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 768166"];
539 [label="return tree; 768167"];
540 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 768168"];
541 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 768169"];
542 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 768170"];
543 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 768171"];
544 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 768172"];
545 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 768173"];
546 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 768174"];
547 [label="hasTopLevelStatements 768175"];
548 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 768176"];
549 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 768177"];
550 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 768178"];
551 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 768179"];
552 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 768180"];
553 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 768181"];
554 [label="param ValidateIOperations(Func<Compilation> createCompilation) 768182"];
555 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 768183"];
556 [label="return; 768184"];
557 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 768185"];
558 [label="var compilation = createCompilationLambda(); 768186"];
559 [label="var compilation = createCompilationLambda(); 768187"];
560 [label="return Guid.NewGuid().ToString('D'); 768188"];
561 [label="var compilation = createCompilationLambda(); 768189"];
562 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 768190"];
563 [label="IsNullableEnabled(compilation) 768191"];
564 [label="param IsNullableEnabled(CSharpCompilation compilation) 768192"];
565 [label="var trees = compilation.SyntaxTrees; 768193"];
566 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 768194"];
567 [label="var options = (CSharpParseOptions)trees[0].Options; 768195"];
568 [label="var options = (CSharpParseOptions)trees[0].Options; 768196"];
569 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 768197"];
570 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 768198"];
571 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 768199"];
572 [label="return compilation; 768200"];
573 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (78,15): error CS1643: Not all code paths return a value in anonymous method of type 'DI'\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.ERR_AnonymousReturnExpected, 'delegate').WithArguments('anonymous method', 'DI').WithLocation(78, 15),\n                // (78,9): warning CS0162: Unreachable code detected\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.WRN_UnreachableCode, '(').WithLocation(78, 9)\n                ); 768201"];
574 [label="Diagnostic(ErrorCode.ERR_AnonymousReturnExpected, 'delegate') 768202"];
575 [label="param Diagnostic(object code) 768203"];
576 [label="param Diagnostic(string squiggledText = null) 768204"];
577 [label="param Diagnostic(object[] arguments = null) 768205"];
578 [label="param Diagnostic(LinePosition? startLocation = null) 768206"];
579 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 768207"];
580 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 768208"];
581 [label="param Diagnostic(bool isSuppressed = false) 768209"];
582 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 768210"];
583 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 768211"];
584 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 768212"];
585 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 768213"];
586 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 768214"];
587 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 768215"];
588 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 768216"];
589 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 768217"];
590 [label="param Diagnostic(object code) 768218"];
591 [label="param Diagnostic(string squiggledText = null) 768219"];
592 [label="param Diagnostic(object[] arguments = null) 768220"];
593 [label="param Diagnostic(LinePosition? startLocation = null) 768221"];
594 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 768222"];
595 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 768223"];
596 [label="param Diagnostic(bool isSuppressed = false) 768224"];
597 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 768225"];
598 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 768226"];
599 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 768227"];
600 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 768228"];
601 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 768229"];
602 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 768230"];
603 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 768231"];
604 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 768232"];
605 [label="{ } 768233"];
606 [label="None = { } 768234"];
607 [label="null 768235"];
608 [label="Any = null 768236"];
609 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 768237"];
610 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 768238"];
611 [label="param DiagnosticDescription(object code) 768239"];
612 [label="param DiagnosticDescription(bool isWarningAsError) 768240"];
613 [label="param DiagnosticDescription(string squiggledText) 768241"];
614 [label="param DiagnosticDescription(object[] arguments) 768242"];
615 [label="param DiagnosticDescription(LinePosition? startLocation) 768243"];
616 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 768244"];
617 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 768245"];
618 [label="param DiagnosticDescription(Type errorCodeType = null) 768246"];
619 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 768247"];
620 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 768248"];
621 [label="param DiagnosticDescription(bool isSuppressed = false) 768249"];
622 [label="param DiagnosticDescription(this) 768250"];
623 [label="_code 768251"];
624 [label="_isWarningAsError 768252"];
625 [label="_isSuppressed 768253"];
626 [label="_squiggledText 768254"];
627 [label="_arguments 768255"];
628 [label="_startPosition 768256"];
629 [label="_argumentOrderDoesNotMatter 768257"];
630 [label="_errorCodeType 768258"];
631 [label="_ignoreArgumentsWhenComparing 768259"];
632 [label="_defaultSeverityOpt 768260"];
633 [label="_effectiveSeverityOpt 768261"];
634 [label="_syntaxPredicate 768262"];
635 [label="_showPredicate 768263"];
636 [label="_location 768264"];
637 [label="_argumentsAsStrings 768265"];
638 [label="_code 768266"];
639 [label="_isWarningAsError 768267"];
640 [label="_squiggledText 768268"];
641 [label="_arguments 768269"];
642 [label="_startPosition 768270"];
643 [label="_syntaxPredicate 768271"];
644 [label="_argumentOrderDoesNotMatter 768272"];
645 [label="_errorCodeType = errorCodeType ?? code.GetType(); 768273"];
646 [label="_errorCodeType 768274"];
647 [label="_defaultSeverityOpt 768275"];
648 [label="_effectiveSeverityOpt 768276"];
649 [label="_isSuppressed 768277"];
650 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 768278"];
651 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (78,15): error CS1643: Not all code paths return a value in anonymous method of type 'DI'\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.ERR_AnonymousReturnExpected, 'delegate').WithArguments('anonymous method', 'DI').WithLocation(78, 15),\n                // (78,9): warning CS0162: Unreachable code detected\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.WRN_UnreachableCode, '(').WithLocation(78, 9)\n                ); 768279"];
652 [label="Diagnostic(ErrorCode.ERR_AnonymousReturnExpected, 'delegate').WithArguments('anonymous method', 'DI') 768280"];
653 [label="Diagnostic(ErrorCode.ERR_AnonymousReturnExpected, 'delegate').WithArguments('anonymous method', 'DI') 768281"];
654 [label="param WithArguments(params object[] arguments) 768282"];
655 [label="param WithArguments(this) 768283"];
656 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768284"];
657 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768285"];
658 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768286"];
659 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768287"];
660 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768288"];
661 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768289"];
662 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768290"];
663 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768291"];
664 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768292"];
665 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768293"];
666 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768294"];
667 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 768295"];
668 [label="param DiagnosticDescription(object code) 768296"];
669 [label="param DiagnosticDescription(bool isWarningAsError) 768297"];
670 [label="param DiagnosticDescription(string squiggledText) 768298"];
671 [label="param DiagnosticDescription(object[] arguments) 768299"];
672 [label="param DiagnosticDescription(LinePosition? startLocation) 768300"];
673 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 768301"];
674 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 768302"];
675 [label="param DiagnosticDescription(Type errorCodeType = null) 768303"];
676 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 768304"];
677 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 768305"];
678 [label="param DiagnosticDescription(bool isSuppressed = false) 768306"];
679 [label="param DiagnosticDescription(this) 768307"];
680 [label="_code 768308"];
681 [label="_isWarningAsError 768309"];
682 [label="_isSuppressed 768310"];
683 [label="_squiggledText 768311"];
684 [label="_arguments 768312"];
685 [label="_startPosition 768313"];
686 [label="_argumentOrderDoesNotMatter 768314"];
687 [label="_errorCodeType 768315"];
688 [label="_ignoreArgumentsWhenComparing 768316"];
689 [label="_defaultSeverityOpt 768317"];
690 [label="_effectiveSeverityOpt 768318"];
691 [label="_syntaxPredicate 768319"];
692 [label="_showPredicate 768320"];
693 [label="_location 768321"];
694 [label="_argumentsAsStrings 768322"];
695 [label="_arguments 768323"];
696 [label="_argumentOrderDoesNotMatter 768324"];
697 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (78,15): error CS1643: Not all code paths return a value in anonymous method of type 'DI'\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.ERR_AnonymousReturnExpected, 'delegate').WithArguments('anonymous method', 'DI').WithLocation(78, 15),\n                // (78,9): warning CS0162: Unreachable code detected\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.WRN_UnreachableCode, '(').WithLocation(78, 9)\n                ); 768325"];
698 [label="Diagnostic(ErrorCode.ERR_AnonymousReturnExpected, 'delegate').WithArguments('anonymous method', 'DI').WithLocation(78, 15) 768326"];
699 [label="param WithLocation(int line) 768327"];
700 [label="param WithLocation(int column) 768328"];
701 [label="param WithLocation(this) 768329"];
702 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768330"];
703 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768331"];
704 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768332"];
705 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768333"];
706 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768334"];
707 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768335"];
708 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768336"];
709 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768337"];
710 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768338"];
711 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768339"];
712 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768340"];
713 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768341"];
714 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768342"];
715 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768343"];
716 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 768344"];
717 [label="param DiagnosticDescription(object code) 768345"];
718 [label="param DiagnosticDescription(bool isWarningAsError) 768346"];
719 [label="param DiagnosticDescription(string squiggledText) 768347"];
720 [label="param DiagnosticDescription(object[] arguments) 768348"];
721 [label="param DiagnosticDescription(LinePosition? startLocation) 768349"];
722 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 768350"];
723 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 768351"];
724 [label="param DiagnosticDescription(Type errorCodeType = null) 768352"];
725 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 768353"];
726 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 768354"];
727 [label="param DiagnosticDescription(bool isSuppressed = false) 768355"];
728 [label="param DiagnosticDescription(this) 768356"];
729 [label="_code 768357"];
730 [label="_isWarningAsError 768358"];
731 [label="_isSuppressed 768359"];
732 [label="_squiggledText 768360"];
733 [label="_arguments 768361"];
734 [label="_startPosition 768362"];
735 [label="_argumentOrderDoesNotMatter 768363"];
736 [label="_errorCodeType 768364"];
737 [label="_ignoreArgumentsWhenComparing 768365"];
738 [label="_defaultSeverityOpt 768366"];
739 [label="_effectiveSeverityOpt 768367"];
740 [label="_syntaxPredicate 768368"];
741 [label="_showPredicate 768369"];
742 [label="_location 768370"];
743 [label="_argumentsAsStrings 768371"];
744 [label="_startPosition 768372"];
745 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (78,15): error CS1643: Not all code paths return a value in anonymous method of type 'DI'\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.ERR_AnonymousReturnExpected, 'delegate').WithArguments('anonymous method', 'DI').WithLocation(78, 15),\n                // (78,9): warning CS0162: Unreachable code detected\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.WRN_UnreachableCode, '(').WithLocation(78, 9)\n                ); 768373"];
746 [label="Diagnostic(ErrorCode.WRN_UnreachableCode, '(') 768374"];
747 [label="param Diagnostic(object code) 768375"];
748 [label="param Diagnostic(string squiggledText = null) 768376"];
749 [label="param Diagnostic(object[] arguments = null) 768377"];
750 [label="param Diagnostic(LinePosition? startLocation = null) 768378"];
751 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 768379"];
752 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 768380"];
753 [label="param Diagnostic(bool isSuppressed = false) 768381"];
754 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 768382"];
755 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 768383"];
756 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 768384"];
757 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 768385"];
758 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 768386"];
759 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 768387"];
760 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 768388"];
761 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 768389"];
762 [label="param Diagnostic(object code) 768390"];
763 [label="param Diagnostic(string squiggledText = null) 768391"];
764 [label="param Diagnostic(object[] arguments = null) 768392"];
765 [label="param Diagnostic(LinePosition? startLocation = null) 768393"];
766 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 768394"];
767 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 768395"];
768 [label="param Diagnostic(bool isSuppressed = false) 768396"];
769 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 768397"];
770 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 768398"];
771 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 768399"];
772 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 768400"];
773 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 768401"];
774 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 768402"];
775 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 768403"];
776 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 768404"];
777 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 768405"];
778 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 768406"];
779 [label="param DiagnosticDescription(object code) 768407"];
780 [label="param DiagnosticDescription(bool isWarningAsError) 768408"];
781 [label="param DiagnosticDescription(string squiggledText) 768409"];
782 [label="param DiagnosticDescription(object[] arguments) 768410"];
783 [label="param DiagnosticDescription(LinePosition? startLocation) 768411"];
784 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 768412"];
785 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 768413"];
786 [label="param DiagnosticDescription(Type errorCodeType = null) 768414"];
787 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 768415"];
788 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 768416"];
789 [label="param DiagnosticDescription(bool isSuppressed = false) 768417"];
790 [label="param DiagnosticDescription(this) 768418"];
791 [label="_code 768419"];
792 [label="_isWarningAsError 768420"];
793 [label="_isSuppressed 768421"];
794 [label="_squiggledText 768422"];
795 [label="_arguments 768423"];
796 [label="_startPosition 768424"];
797 [label="_argumentOrderDoesNotMatter 768425"];
798 [label="_errorCodeType 768426"];
799 [label="_ignoreArgumentsWhenComparing 768427"];
800 [label="_defaultSeverityOpt 768428"];
801 [label="_effectiveSeverityOpt 768429"];
802 [label="_syntaxPredicate 768430"];
803 [label="_showPredicate 768431"];
804 [label="_location 768432"];
805 [label="_argumentsAsStrings 768433"];
806 [label="_code 768434"];
807 [label="_isWarningAsError 768435"];
808 [label="_squiggledText 768436"];
809 [label="_arguments 768437"];
810 [label="_startPosition 768438"];
811 [label="_syntaxPredicate 768439"];
812 [label="_argumentOrderDoesNotMatter 768440"];
813 [label="_errorCodeType = errorCodeType ?? code.GetType(); 768441"];
814 [label="_errorCodeType 768442"];
815 [label="_defaultSeverityOpt 768443"];
816 [label="_effectiveSeverityOpt 768444"];
817 [label="_isSuppressed 768445"];
818 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 768446"];
819 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (78,15): error CS1643: Not all code paths return a value in anonymous method of type 'DI'\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.ERR_AnonymousReturnExpected, 'delegate').WithArguments('anonymous method', 'DI').WithLocation(78, 15),\n                // (78,9): warning CS0162: Unreachable code detected\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.WRN_UnreachableCode, '(').WithLocation(78, 9)\n                ); 768447"];
820 [label="Diagnostic(ErrorCode.WRN_UnreachableCode, '(').WithLocation(78, 9) 768448"];
821 [label="param WithLocation(int line) 768449"];
822 [label="param WithLocation(int column) 768450"];
823 [label="param WithLocation(this) 768451"];
824 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768452"];
825 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768453"];
826 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768454"];
827 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768455"];
828 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768456"];
829 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768457"];
830 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768458"];
831 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768459"];
832 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768460"];
833 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768461"];
834 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768462"];
835 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768463"];
836 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768464"];
837 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 768465"];
838 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 768466"];
839 [label="param DiagnosticDescription(object code) 768467"];
840 [label="param DiagnosticDescription(bool isWarningAsError) 768468"];
841 [label="param DiagnosticDescription(string squiggledText) 768469"];
842 [label="param DiagnosticDescription(object[] arguments) 768470"];
843 [label="param DiagnosticDescription(LinePosition? startLocation) 768471"];
844 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 768472"];
845 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 768473"];
846 [label="param DiagnosticDescription(Type errorCodeType = null) 768474"];
847 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 768475"];
848 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 768476"];
849 [label="param DiagnosticDescription(bool isSuppressed = false) 768477"];
850 [label="param DiagnosticDescription(this) 768478"];
851 [label="_code 768479"];
852 [label="_isWarningAsError 768480"];
853 [label="_isSuppressed 768481"];
854 [label="_squiggledText 768482"];
855 [label="_arguments 768483"];
856 [label="_startPosition 768484"];
857 [label="_argumentOrderDoesNotMatter 768485"];
858 [label="_errorCodeType 768486"];
859 [label="_ignoreArgumentsWhenComparing 768487"];
860 [label="_defaultSeverityOpt 768488"];
861 [label="_effectiveSeverityOpt 768489"];
862 [label="_syntaxPredicate 768490"];
863 [label="_showPredicate 768491"];
864 [label="_location 768492"];
865 [label="_argumentsAsStrings 768493"];
866 [label="_startPosition 768494"];
867 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (78,15): error CS1643: Not all code paths return a value in anonymous method of type 'DI'\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.ERR_AnonymousReturnExpected, 'delegate').WithArguments('anonymous method', 'DI').WithLocation(78, 15),\n                // (78,9): warning CS0162: Unreachable code detected\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.WRN_UnreachableCode, '(').WithLocation(78, 9)\n                ); 768495"];
868 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (78,15): error CS1643: Not all code paths return a value in anonymous method of type 'DI'\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.ERR_AnonymousReturnExpected, 'delegate').WithArguments('anonymous method', 'DI').WithLocation(78, 15),\n                // (78,9): warning CS0162: Unreachable code detected\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.WRN_UnreachableCode, '(').WithLocation(78, 9)\n                ) 768496"];
869 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (78,15): error CS1643: Not all code paths return a value in anonymous method of type 'DI'\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.ERR_AnonymousReturnExpected, 'delegate').WithArguments('anonymous method', 'DI').WithLocation(78, 15),\n                // (78,9): warning CS0162: Unreachable code detected\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.WRN_UnreachableCode, '(').WithLocation(78, 9)\n                ) 768497"];
870 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (78,15): error CS1643: Not all code paths return a value in anonymous method of type 'DI'\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.ERR_AnonymousReturnExpected, 'delegate').WithArguments('anonymous method', 'DI').WithLocation(78, 15),\n                // (78,9): warning CS0162: Unreachable code detected\n                //         ((DI)(delegate { if (x == 1) return 1; Console.WriteLine('Bug'); }))();\n                Diagnostic(ErrorCode.WRN_UnreachableCode, '(').WithLocation(78, 9)\n                ) 768498"];
871 [label="param VerifyDiagnostics(this TCompilation c) 768499"];
872 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 768500"];
873 [label="var diagnostics = c.GetDiagnostics(); 768501"];
874 [label="var diagnostics = c.GetDiagnostics(); 768502"];
875 [label="diagnostics.Verify(expected); 768503"];
876 [label="diagnostics.Verify(expected); 768504"];
877 [label="diagnostics.Verify(expected) 768505"];
878 [label="param Verify(this ImmutableArray<Diagnostic> actual) 768506"];
879 [label="param Verify(params DiagnosticDescription[] expected) 768507"];
880 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 768508"];
881 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 768509"];
882 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 768510"];
883 [label="param Verify(this IEnumerable<Diagnostic> actual) 768511"];
884 [label="param Verify(params DiagnosticDescription[] expected) 768512"];
885 [label="Verify(actual, expected, errorCodeOnly: false); 768513"];
886 [label="Verify(actual, expected, errorCodeOnly: false); 768514"];
887 [label="Verify(actual, expected, errorCodeOnly: false); 768515"];
888 [label="Verify(actual, expected, errorCodeOnly: false) 768516"];
889 [label="param Verify(IEnumerable<Diagnostic> actual) 768517"];
890 [label="param Verify(DiagnosticDescription[] expected) 768518"];
891 [label="param Verify(bool errorCodeOnly) 768519"];
892 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 768520"];
893 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 768521"];
894 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 768522"];
895 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 768523"];
896 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 768524"];
897 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 768525"];
898 [label="=> _defaultSeverityOpt 768526"];
899 [label="_defaultSeverityOpt 768527"];
900 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 768528"];
901 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 768529"];
902 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 768530"];
903 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 768531"];
904 [label="=> _effectiveSeverityOpt 768532"];
905 [label="_effectiveSeverityOpt 768533"];
906 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 768534"];
907 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 768535"];
908 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 768536"];
909 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 768537"];
910 [label="param DiagnosticDescription(Diagnostic d) 768538"];
911 [label="param DiagnosticDescription(bool errorCodeOnly) 768539"];
912 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 768540"];
913 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 768541"];
914 [label="param DiagnosticDescription(this) 768542"];
915 [label="_code 768543"];
916 [label="_isWarningAsError 768544"];
917 [label="_isSuppressed 768545"];
918 [label="_squiggledText 768546"];
919 [label="_arguments 768547"];
920 [label="_startPosition 768548"];
921 [label="_argumentOrderDoesNotMatter 768549"];
922 [label="_errorCodeType 768550"];
923 [label="_defaultSeverityOpt 768551"];
924 [label="_effectiveSeverityOpt 768552"];
925 [label="_syntaxPredicate 768553"];
926 [label="_code 768554"];
927 [label="_isWarningAsError 768555"];
928 [label="_isSuppressed 768556"];
929 [label="_location 768557"];
930 [label="includeDefaultSeverity 768558"];
931 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 768559"];
932 [label="_defaultSeverityOpt 768560"];
933 [label="includeEffectiveSeverity 768561"];
934 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 768562"];
935 [label="_effectiveSeverityOpt 768563"];
936 [label="DiagnosticWithInfo dinfo = null; 768564"];
937 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 768565"];
938 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 768566"];
939 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 768567"];
940 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 768568"];
941 [label="dinfo = d as DiagnosticWithInfo; 768569"];
942 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 768570"];
943 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 768571"];
944 [label="_errorCodeType 768572"];
945 [label="_code 768573"];
946 [label="_ignoreArgumentsWhenComparing 768574"];
947 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 768575"];
948 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 768576"];
949 [label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 768577"];
950 [label="_squiggledText 768578"];
951 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 768579"];
952 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 768580"];
953 [label="_arguments 768581"];
954 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 768582"];
955 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 768583"];
956 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 768584"];
957 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 768585"];
958 [label="_startPosition 768586"];
959 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 768587"];
960 [label="_code 768588"];
961 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 768589"];
962 [label="_arguments = null; 768590"];
963 [label="_arguments 768591"];
964 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 768592"];
965 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 768593"];
966 [label="int index = unmatched.IndexOf(d); 768594"];
967 [label="int index = unmatched.IndexOf(d); 768595"];
968 [label="param Equals(object obj) 768596"];
969 [label="param Equals(this) 768597"];
970 [label="var d = obj as DiagnosticDescription; 768598"];
971 [label="if (d == null)\n                return false; 768599"];
972 [label="if (d == null)\n                return false; 768600"];
973 [label="if (!_code.Equals(d._code))\n                return false; 768601"];
974 [label="if (!_code.Equals(d._code))\n                return false; 768602"];
975 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 768603"];
976 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 768604"];
977 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 768605"];
978 [label="if (_squiggledText != d._squiggledText)\n                    return false; 768606"];
979 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 768607"];
980 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 768608"];
981 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 768609"];
982 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 768610"];
983 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 768611"];
984 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 768612"];
985 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 768613"];
986 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 768614"];
987 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 768615"];
988 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 768616"];
989 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 768617"];
990 [label="if (d._arguments == null)\n                    return false; 768618"];
991 [label="GetArgumentsAsStrings() 768619"];
992 [label="param GetArgumentsAsStrings(this) 768620"];
993 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 768621"];
994 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 768622"];
995 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 768623"];
996 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 768624"];
997 [label="_argumentsAsStrings 768625"];
998 [label="return _argumentsAsStrings; 768626"];
999 [label="var args1 = GetArgumentsAsStrings(); 768627"];
1000 [label="d.GetArgumentsAsStrings() 768628"];
1001 [label="param GetArgumentsAsStrings(this) 768629"];
1002 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 768630"];
1003 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 768631"];
1004 [label="return _argumentsAsStrings; 768632"];
1005 [label="var args2 = d.GetArgumentsAsStrings(); 768633"];
1006 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 768634"];
1007 [label="if (!args1.SequenceEqual(args2))\n                        return false; 768635"];
1008 [label="if (!args1.SequenceEqual(args2))\n                        return false; 768636"];
1009 [label="if (!args1.SequenceEqual(args2))\n                        return false; 768637"];
1010 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 768638"];
1011 [label="return true; 768639"];
1012 [label="int index = unmatched.IndexOf(d); 768640"];
1013 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 768641"];
1014 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 768642"];
1015 [label="unmatched.RemoveAt(index); 768643"];
1016 [label="if (d == null)\n                return false; 768644"];
1017 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 768645"];
1018 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 768646"];
1019 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 768647"];
1020 [label="if (_squiggledText != d._squiggledText)\n                    return false; 768648"];
1021 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 768649"];
1022 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 768650"];
1023 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 768651"];
1024 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 768652"];
1025 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 768653"];
1026 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 768654"];
1027 [label="if (d._arguments != null)\n                    return false; 768655"];
1028 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 768656"];
1029 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 768657"];
1030 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 768658"];
1031 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 768659"];
1032 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 768660"];
1033 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 768661"];
1034 [label="DiagnosticDescription.GetAssertText(expected, actual) 768662"];
1035 [label="param GetAssertText(DiagnosticDescription[] expected) 768663"];
1036 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 768664"];
1037 [label="const int CSharp = 1; 768665"];
1038 [label="const int VisualBasic = 2; 768666"];
1039 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 768667"];
1040 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 768668"];
1041 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 768669"];
1042 [label="actual.Any() && actual.First() is CSDiagnostic 768670"];
1043 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 768671"];
1044 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 768672"];
1045 [label="int indentDepth = (language == CSharp) ? 4 : 1; 768673"];
1046 [label="(language == CSharp) 768674"];
1047 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 768675"];
1048 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 768676"];
1049 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 768677"];
1050 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 768678"];
1051 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 768679"];
1052 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 768680"];
1053 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 768681"];
1054 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 768682"];
1055 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 768683"];
1056 [label="IsSortedOrEmpty(expected) 768684"];
1057 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 768685"];
1058 [label="new LinePositionComparer() 768686"];
1059 [label="param LinePositionComparer(this) 768687"];
1060 [label="Instance = new LinePositionComparer() 768688"];
1061 [label="var comparer = LinePositionComparer.Instance; 768689"];
1062 [label="DiagnosticDescription last = null; 768690"];
1063 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 768691"];
1064 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 768692"];
1065 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 768693"];
1066 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 768694"];
1067 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 768695"];
1068 [label="last = diagnostic; 768696"];
1069 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 768697"];
1070 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 768698"];
1071 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 768699"];
1072 [label="comparer.Compare(last._startPosition, diagnostic._startPosition) 768700"];
1073 [label="param Compare(LinePosition? x) 768701"];
1074 [label="param Compare(LinePosition? y) 768702"];
1075 [label="param Compare(this) 768703"];
1076 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 768704"];
1077 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 768705"];
1078 [label="if (y == null)\n                {\n                    return 1;\n                } 768706"];
1079 [label="if (y == null)\n                {\n                    return 1;\n                } 768707"];
1080 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 768708"];
1081 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 768709"];
1082 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 768710"];
1083 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 768711"];
1084 [label="return x.Value.Character.CompareTo(y.Value.Character); 768712"];
1085 [label="return x.Value.Character.CompareTo(y.Value.Character); 768713"];
1086 [label="return false; 768714"];
1087 [label="var assertText = new StringBuilder(); 768715"];
1088 [label="assertText.AppendLine(); 768716"];
1089 [label="int i; 768717"];
1090 [label="assertText.AppendLine('Expected:'); 768718"];
1091 [label="assertText.AppendLine('Expected:'); 768719"];
1092 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 768720"];
1093 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 768721"];
1094 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 768722"];
1095 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 768723"];
1096 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 768724"];
1097 [label="GetDiagnosticDescription(d, indentDepth) 768725"];
1098 [label="param GetDiagnosticDescription(DiagnosticDescription d) 768726"];
1099 [label="param GetDiagnosticDescription(int indentDepth) 768727"];
1100 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 768728"];
1101 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 768729"];
1102 [label="d.ToString() 768730"];
1103 [label="param ToString(this) 768731"];
1104 [label="var sb = new StringBuilder(); 768732"];
1105 [label="sb.Append('Diagnostic('); 768733"];
1106 [label="sb.Append('Diagnostic('); 768734"];
1107 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 768735"];
1108 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 768736"];
1109 [label="sb.Append(_errorCodeType.Name); 768737"];
1110 [label="sb.Append(_errorCodeType.Name); 768738"];
1111 [label="sb.Append('.'); 768739"];
1112 [label="sb.Append('.'); 768740"];
1113 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 768741"];
1114 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 768742"];
1115 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 768743"];
1116 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 768744"];
1117 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 768745"];
1118 [label="sb.Append(', \\''); 768746"];
1119 [label="sb.Append(', \\''); 768747"];
1120 [label="sb.Append(_squiggledText); 768748"];
1121 [label="sb.Append(_squiggledText); 768749"];
1122 [label="sb.Append('''); 768750"];
1123 [label="sb.Append('''); 768751"];
1124 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 768752"];
1125 [label="sb.Append(')'); 768753"];
1126 [label="sb.Append(')'); 768754"];
1127 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 768755"];
1128 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 768756"];
1129 [label="sb.Append('.WithArguments('); 768757"];
1130 [label="sb.Append('.WithArguments('); 768758"];
1131 [label="GetArgumentsAsStrings() 768759"];
1132 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 768760"];
1133 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 768761"];
1134 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 768762"];
1135 [label="sb.Append('\\''); 768763"];
1136 [label="sb.Append('\\''); 768764"];
1137 [label="sb.Append(argumentStrings.Current); 768765"];
1138 [label="sb.Append(argumentStrings.Current); 768766"];
1139 [label="sb.Append('\\''); 768767"];
1140 [label="sb.Append('\\''); 768768"];
1141 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 768769"];
1142 [label="sb.Append(', '); 768770"];
1143 [label="sb.Append(', '); 768771"];
1144 [label="sb.Append(')'); 768772"];
1145 [label="sb.Append(')'); 768773"];
1146 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 768774"];
1147 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 768775"];
1148 [label="sb.Append('.WithLocation('); 768776"];
1149 [label="sb.Append('.WithLocation('); 768777"];
1150 [label="sb.Append(_startPosition.Value.Line + 1); 768778"];
1151 [label="sb.Append(_startPosition.Value.Line + 1); 768779"];
1152 [label="sb.Append(', '); 768780"];
1153 [label="sb.Append(', '); 768781"];
1154 [label="sb.Append(_startPosition.Value.Character + 1); 768782"];
1155 [label="sb.Append(_startPosition.Value.Character + 1); 768783"];
1156 [label="sb.Append(')'); 768784"];
1157 [label="sb.Append(')'); 768785"];
1158 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 768786"];
1159 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 768787"];
1160 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 768788"];
1161 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 768789"];
1162 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 768790"];
1163 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 768791"];
1164 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 768792"];
1165 [label="return sb.ToString(); 768793"];
1166 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 768794"];
1167 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 768795"];
1168 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 768796"];
1169 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 768797"];
1170 [label="param GetDiagnosticDescription(int indentDepth) 768798"];
1171 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 768799"];
1172 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 768800"];
1173 [label="var sb = new StringBuilder(); 768801"];
1174 [label="sb.Append('Diagnostic('); 768802"];
1175 [label="sb.Append('Diagnostic('); 768803"];
1176 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 768804"];
1177 [label="sb.Append(_errorCodeType.Name); 768805"];
1178 [label="sb.Append(_errorCodeType.Name); 768806"];
1179 [label="sb.Append('.'); 768807"];
1180 [label="sb.Append('.'); 768808"];
1181 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 768809"];
1182 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 768810"];
1183 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 768811"];
1184 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 768812"];
1185 [label="sb.Append(', \\''); 768813"];
1186 [label="sb.Append(', \\''); 768814"];
1187 [label="sb.Append(_squiggledText); 768815"];
1188 [label="sb.Append(_squiggledText); 768816"];
1189 [label="sb.Append('''); 768817"];
1190 [label="sb.Append('''); 768818"];
1191 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 768819"];
1192 [label="sb.Append(')'); 768820"];
1193 [label="sb.Append(')'); 768821"];
1194 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 768822"];
1195 [label="sb.Append('.WithLocation('); 768823"];
1196 [label="sb.Append('.WithLocation('); 768824"];
1197 [label="sb.Append(_startPosition.Value.Line + 1); 768825"];
1198 [label="sb.Append(_startPosition.Value.Line + 1); 768826"];
1199 [label="sb.Append(', '); 768827"];
1200 [label="sb.Append(', '); 768828"];
1201 [label="sb.Append(_startPosition.Value.Character + 1); 768829"];
1202 [label="sb.Append(_startPosition.Value.Character + 1); 768830"];
1203 [label="sb.Append(')'); 768831"];
1204 [label="sb.Append(')'); 768832"];
1205 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 768833"];
1206 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 768834"];
1207 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 768835"];
1208 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 768836"];
1209 [label="return sb.ToString(); 768837"];
1210 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 768838"];
1211 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 768839"];
1212 [label="GetCommaSeparatedLines(assertText, expectedText); 768840"];
1213 [label="GetCommaSeparatedLines(assertText, expectedText); 768841"];
1214 [label="GetCommaSeparatedLines(assertText, expectedText) 768842"];
1215 [label="param GetCommaSeparatedLines(StringBuilder sb) 768843"];
1216 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 768844"];
1217 [label="int n = lines.Count; 768845"];
1218 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 768846"];
1219 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 768847"];
1220 [label="sb.Append(lines[i]); 768848"];
1221 [label="sb.Append(lines[i]); 768849"];
1222 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 768850"];
1223 [label="sb.Append(','); 768851"];
1224 [label="sb.Append(','); 768852"];
1225 [label="sb.AppendLine(); 768853"];
1226 [label="GetCommaSeparatedLines(assertText, expectedText); 768854"];
1227 [label="assertText.AppendLine('Actual:'); 768855"];
1228 [label="assertText.AppendLine('Actual:'); 768856"];
1229 [label="var actualText = ArrayBuilder<string>.GetInstance(); 768857"];
1230 [label="var e = actual.GetEnumerator(); 768858"];
1231 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 768859"];
1232 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 768860"];
1233 [label="Diagnostic d = e.Current; 768861"];
1234 [label="string message = d.ToString(); 768862"];
1235 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 768863"];
1236 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 768864"];
1237 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 768865"];
1238 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 768866"];
1239 [label="Indent(assertText, indentDepth); 768867"];
1240 [label="Indent(assertText, indentDepth); 768868"];
1241 [label="Indent(assertText, indentDepth) 768869"];
1242 [label="param Indent(StringBuilder sb) 768870"];
1243 [label="param Indent(int count) 768871"];
1244 [label="sb.Append(' ', 4 * count); 768872"];
1245 [label="sb.Append(' ', 4 * count); 768873"];
1246 [label="sb.Append(' ', 4 * count); 768874"];
1247 [label="Indent(assertText, indentDepth); 768875"];
1248 [label="assertText.Append('// '); 768876"];
1249 [label="assertText.Append('// '); 768877"];
1250 [label="assertText.AppendLine(d.ToString()); 768878"];
1251 [label="assertText.AppendLine(d.ToString()); 768879"];
1252 [label="var l = d.Location; 768880"];
1253 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 768881"];
1254 [label="Indent(assertText, indentDepth); 768882"];
1255 [label="Indent(assertText, indentDepth); 768883"];
1256 [label="Indent(assertText, indentDepth) 768884"];
1257 [label="param Indent(StringBuilder sb) 768885"];
1258 [label="param Indent(int count) 768886"];
1259 [label="sb.Append(' ', 4 * count); 768887"];
1260 [label="sb.Append(' ', 4 * count); 768888"];
1261 [label="sb.Append(' ', 4 * count); 768889"];
1262 [label="Indent(assertText, indentDepth); 768890"];
1263 [label="assertText.Append('// '); 768891"];
1264 [label="assertText.Append('// '); 768892"];
1265 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 768893"];
1266 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 768894"];
1267 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 768895"];
1268 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 768896"];
1269 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 768897"];
1270 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 768898"];
1271 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 768899"];
1272 [label="param DiagnosticDescription(Diagnostic d) 768900"];
1273 [label="param DiagnosticDescription(bool errorCodeOnly) 768901"];
1274 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 768902"];
1275 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 768903"];
1276 [label="param DiagnosticDescription(this) 768904"];
1277 [label="_code 768905"];
1278 [label="_isWarningAsError 768906"];
1279 [label="_isSuppressed 768907"];
1280 [label="_squiggledText 768908"];
1281 [label="_arguments 768909"];
1282 [label="_startPosition 768910"];
1283 [label="_errorCodeType 768911"];
1284 [label="_defaultSeverityOpt 768912"];
1285 [label="_effectiveSeverityOpt 768913"];
1286 [label="_code 768914"];
1287 [label="_isWarningAsError 768915"];
1288 [label="_isSuppressed 768916"];
1289 [label="_location 768917"];
1290 [label="DiagnosticWithInfo dinfo = null; 768918"];
1291 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 768919"];
1292 [label="var diffDescription = description; 768920"];
1293 [label="var idx = Array.IndexOf(expected, description); 768921"];
1294 [label="var idx = Array.IndexOf(expected, description); 768922"];
1295 [label="var idx = Array.IndexOf(expected, description); 768923"];
1296 [label="var idx = Array.IndexOf(expected, description); 768924"];
1297 [label="if (d == null)\n                return false; 768925"];
1298 [label="if (d == null)\n                return false; 768926"];
1299 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 768927"];
1300 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 768928"];
1301 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 768929"];
1302 [label="if (_squiggledText != d._squiggledText)\n                    return false; 768930"];
1303 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 768931"];
1304 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 768932"];
1305 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 768933"];
1306 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 768934"];
1307 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 768935"];
1308 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 768936"];
1309 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 768937"];
1310 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 768938"];
1311 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 768939"];
1312 [label="if (d._arguments == null)\n                    return false; 768940"];
1313 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 768941"];
1314 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 768942"];
1315 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 768943"];
1316 [label="diffDescription = expected[idx]; 768944"];
1317 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 768945"];
1318 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 768946"];
1319 [label="GetDiagnosticDescription(description, indentDepth) 768947"];
1320 [label="param GetDiagnosticDescription(DiagnosticDescription d) 768948"];
1321 [label="param GetDiagnosticDescription(int indentDepth) 768949"];
1322 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 768950"];
1323 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 768951"];
1324 [label="var sb = new StringBuilder(); 768952"];
1325 [label="sb.Append('Diagnostic('); 768953"];
1326 [label="sb.Append('Diagnostic('); 768954"];
1327 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 768955"];
1328 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 768956"];
1329 [label="sb.Append(_errorCodeType.Name); 768957"];
1330 [label="sb.Append(_errorCodeType.Name); 768958"];
1331 [label="sb.Append('.'); 768959"];
1332 [label="sb.Append('.'); 768960"];
1333 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 768961"];
1334 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 768962"];
1335 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 768963"];
1336 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 768964"];
1337 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 768965"];
1338 [label="sb.Append(', \\''); 768966"];
1339 [label="sb.Append(', \\''); 768967"];
1340 [label="sb.Append(_squiggledText); 768968"];
1341 [label="sb.Append(_squiggledText); 768969"];
1342 [label="sb.Append('''); 768970"];
1343 [label="sb.Append('''); 768971"];
1344 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 768972"];
1345 [label="sb.Append(')'); 768973"];
1346 [label="sb.Append(')'); 768974"];
1347 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 768975"];
1348 [label="sb.Append('.WithArguments('); 768976"];
1349 [label="sb.Append('.WithArguments('); 768977"];
1350 [label="sb.Append('\\''); 768978"];
1351 [label="sb.Append('\\''); 768979"];
1352 [label="sb.Append(argumentStrings.Current); 768980"];
1353 [label="sb.Append(argumentStrings.Current); 768981"];
1354 [label="sb.Append('\\''); 768982"];
1355 [label="sb.Append('\\''); 768983"];
1356 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 768984"];
1357 [label="sb.Append(', '); 768985"];
1358 [label="sb.Append(', '); 768986"];
1359 [label="sb.Append(')'); 768987"];
1360 [label="sb.Append(')'); 768988"];
1361 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 768989"];
1362 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 768990"];
1363 [label="sb.Append('.WithLocation('); 768991"];
1364 [label="sb.Append('.WithLocation('); 768992"];
1365 [label="sb.Append(_startPosition.Value.Line + 1); 768993"];
1366 [label="sb.Append(_startPosition.Value.Line + 1); 768994"];
1367 [label="sb.Append(', '); 768995"];
1368 [label="sb.Append(', '); 768996"];
1369 [label="sb.Append(_startPosition.Value.Character + 1); 768997"];
1370 [label="sb.Append(_startPosition.Value.Character + 1); 768998"];
1371 [label="sb.Append(')'); 768999"];
1372 [label="sb.Append(')'); 769000"];
1373 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 769001"];
1374 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 769002"];
1375 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 769003"];
1376 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 769004"];
1377 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 769005"];
1378 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 769006"];
1379 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 769007"];
1380 [label="return sb.ToString(); 769008"];
1381 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 769009"];
1382 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 769010"];
1383 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 769011"];
1384 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 769012"];
1385 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 769013"];
1386 [label="GetDiagnosticDescription(diffDescription, indentDepth) 769014"];
1387 [label="param GetDiagnosticDescription(DiagnosticDescription d) 769015"];
1388 [label="param GetDiagnosticDescription(int indentDepth) 769016"];
1389 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 769017"];
1390 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 769018"];
1391 [label="var sb = new StringBuilder(); 769019"];
1392 [label="sb.Append('Diagnostic('); 769020"];
1393 [label="sb.Append('Diagnostic('); 769021"];
1394 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 769022"];
1395 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 769023"];
1396 [label="sb.Append(_errorCodeType.Name); 769024"];
1397 [label="sb.Append(_errorCodeType.Name); 769025"];
1398 [label="sb.Append('.'); 769026"];
1399 [label="sb.Append('.'); 769027"];
1400 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 769028"];
1401 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 769029"];
1402 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 769030"];
1403 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 769031"];
1404 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 769032"];
1405 [label="sb.Append(', \\''); 769033"];
1406 [label="sb.Append(', \\''); 769034"];
1407 [label="sb.Append(_squiggledText); 769035"];
1408 [label="sb.Append(_squiggledText); 769036"];
1409 [label="sb.Append('''); 769037"];
1410 [label="sb.Append('''); 769038"];
1411 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 769039"];
1412 [label="sb.Append(')'); 769040"];
1413 [label="sb.Append(')'); 769041"];
1414 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 769042"];
1415 [label="sb.Append('.WithArguments('); 769043"];
1416 [label="sb.Append('.WithArguments('); 769044"];
1417 [label="sb.Append('\\''); 769045"];
1418 [label="sb.Append('\\''); 769046"];
1419 [label="sb.Append(argumentStrings.Current); 769047"];
1420 [label="sb.Append(argumentStrings.Current); 769048"];
1421 [label="sb.Append('\\''); 769049"];
1422 [label="sb.Append('\\''); 769050"];
1423 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 769051"];
1424 [label="sb.Append(', '); 769052"];
1425 [label="sb.Append(', '); 769053"];
1426 [label="sb.Append(')'); 769054"];
1427 [label="sb.Append(')'); 769055"];
1428 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 769056"];
1429 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 769057"];
1430 [label="sb.Append('.WithLocation('); 769058"];
1431 [label="sb.Append('.WithLocation('); 769059"];
1432 [label="sb.Append(_startPosition.Value.Line + 1); 769060"];
1433 [label="sb.Append(_startPosition.Value.Line + 1); 769061"];
1434 [label="sb.Append(', '); 769062"];
1435 [label="sb.Append(', '); 769063"];
1436 [label="sb.Append(_startPosition.Value.Character + 1); 769064"];
1437 [label="sb.Append(_startPosition.Value.Character + 1); 769065"];
1438 [label="sb.Append(')'); 769066"];
1439 [label="sb.Append(')'); 769067"];
1440 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 769068"];
1441 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 769069"];
1442 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 769070"];
1443 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 769071"];
1444 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 769072"];
1445 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 769073"];
1446 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 769074"];
1447 [label="return sb.ToString(); 769075"];
1448 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 769076"];
1449 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 769077"];
1450 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 769078"];
1451 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 769079"];
1452 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 769080"];
1453 [label="assertText.AppendLine(','); 769081"];
1454 [label="assertText.AppendLine(','); 769082"];
1455 [label="Indent(assertText, indentDepth); 769083"];
1456 [label="Indent(assertText, indentDepth); 769084"];
1457 [label="Indent(assertText, indentDepth) 769085"];
1458 [label="param Indent(StringBuilder sb) 769086"];
1459 [label="param Indent(int count) 769087"];
1460 [label="sb.Append(' ', 4 * count); 769088"];
1461 [label="sb.Append(' ', 4 * count); 769089"];
1462 [label="Indent(assertText, indentDepth); 769090"];
1463 [label="assertText.Append('// '); 769091"];
1464 [label="Indent(assertText, indentDepth); 769092"];
1465 [label="Indent(assertText, indentDepth); 769093"];
1466 [label="Indent(assertText, indentDepth) 769094"];
1467 [label="param Indent(StringBuilder sb) 769095"];
1468 [label="param Indent(int count) 769096"];
1469 [label="sb.Append(' ', 4 * count); 769097"];
1470 [label="sb.Append(' ', 4 * count); 769098"];
1471 [label="Indent(assertText, indentDepth); 769099"];
1472 [label="assertText.Append('// '); 769100"];
1473 [label="_code 769101"];
1474 [label="_isWarningAsError 769102"];
1475 [label="_isSuppressed 769103"];
1476 [label="_squiggledText 769104"];
1477 [label="_arguments 769105"];
1478 [label="_startPosition 769106"];
1479 [label="_errorCodeType 769107"];
1480 [label="_defaultSeverityOpt 769108"];
1481 [label="_effectiveSeverityOpt 769109"];
1482 [label="_code 769110"];
1483 [label="DiagnosticWithInfo dinfo = null; 769111"];
1484 [label="var diffDescription = description; 769112"];
1485 [label="if (d == null)\n                return false; 769113"];
1486 [label="return false; 769114"];
1487 [label="if (d == null)\n                return false; 769115"];
1488 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 769116"];
1489 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 769117"];
1490 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 769118"];
1491 [label="if (_squiggledText != d._squiggledText)\n                    return false; 769119"];
1492 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 769120"];
1493 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 769121"];
1494 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 769122"];
1495 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 769123"];
1496 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 769124"];
1497 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 769125"];
1498 [label="if (d._arguments != null)\n                    return false; 769126"];
1499 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 769127"];
1500 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 769128"];
1501 [label="param GetDiagnosticDescription(int indentDepth) 769129"];
1502 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 769130"];
1503 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 769131"];
1504 [label="var sb = new StringBuilder(); 769132"];
1505 [label="sb.Append('Diagnostic('); 769133"];
1506 [label="sb.Append('Diagnostic('); 769134"];
1507 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 769135"];
1508 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 769136"];
1509 [label="sb.Append(_errorCodeType.Name); 769137"];
1510 [label="sb.Append(_errorCodeType.Name); 769138"];
1511 [label="sb.Append('.'); 769139"];
1512 [label="sb.Append('.'); 769140"];
1513 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 769141"];
1514 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 769142"];
1515 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 769143"];
1516 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 769144"];
1517 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 769145"];
1518 [label="sb.Append(', \\''); 769146"];
1519 [label="sb.Append(', \\''); 769147"];
1520 [label="sb.Append(_squiggledText); 769148"];
1521 [label="sb.Append(_squiggledText); 769149"];
1522 [label="sb.Append('''); 769150"];
1523 [label="sb.Append('''); 769151"];
1524 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 769152"];
1525 [label="sb.Append(')'); 769153"];
1526 [label="sb.Append(')'); 769154"];
1527 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 769155"];
1528 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 769156"];
1529 [label="sb.Append('.WithLocation('); 769157"];
1530 [label="sb.Append('.WithLocation('); 769158"];
1531 [label="sb.Append(_startPosition.Value.Line + 1); 769159"];
1532 [label="sb.Append(_startPosition.Value.Line + 1); 769160"];
1533 [label="sb.Append(', '); 769161"];
1534 [label="sb.Append(', '); 769162"];
1535 [label="sb.Append(_startPosition.Value.Character + 1); 769163"];
1536 [label="sb.Append(_startPosition.Value.Character + 1); 769164"];
1537 [label="sb.Append(')'); 769165"];
1538 [label="sb.Append(')'); 769166"];
1539 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 769167"];
1540 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 769168"];
1541 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 769169"];
1542 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 769170"];
1543 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 769171"];
1544 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 769172"];
1545 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 769173"];
1546 [label="return sb.ToString(); 769174"];
1547 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 769175"];
1548 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 769176"];
1549 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 769177"];
1550 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 769178"];
1551 [label="param GetDiagnosticDescription(int indentDepth) 769179"];
1552 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 769180"];
1553 [label="sb.Append(_errorCodeType.Name); 769181"];
1554 [label="sb.Append(_errorCodeType.Name); 769182"];
1555 [label="sb.Append('.'); 769183"];
1556 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 769184"];
1557 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 769185"];
1558 [label="sb.Append(', \\''); 769186"];
1559 [label="sb.Append(_squiggledText); 769187"];
1560 [label="sb.Append(_squiggledText); 769188"];
1561 [label="sb.Append('''); 769189"];
1562 [label="sb.Append(')'); 769190"];
1563 [label="sb.Append('.WithLocation('); 769191"];
1564 [label="sb.Append(_startPosition.Value.Line + 1); 769192"];
1565 [label="sb.Append(', '); 769193"];
1566 [label="sb.Append(_startPosition.Value.Character + 1); 769194"];
1567 [label="sb.Append(')'); 769195"];
1568 [label="return sb.ToString(); 769196"];
1569 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 769197"];
1570 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 769198"];
1571 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 769199"];
1572 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 769200"];
1573 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 769201"];
1574 [label="assertText.AppendLine(); 769202"];
1575 [label="assertText.AppendLine('Diff:'); 769203"];
1576 [label="assertText.AppendLine('Diff:'); 769204"];
1577 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 769205"];
1578 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 769206"];
1579 [label="new[] { '\\r', '\\n' } 769207"];
1580 [label="'\\r' 769208"];
1581 [label="'\\n' 769209"];
1582 [label="new[] { '\\r', '\\n' } 769210"];
1583 [label="new[] { '\\r', '\\n' } 769211"];
1584 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 769212"];
1585 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 769213"];
1586 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 769214"];
1587 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 769215"];
1588 [label="param DiffReport(IEnumerable<T> expected) 769216"];
1589 [label="param DiffReport(IEnumerable<T> actual) 769217"];
1590 [label="param DiffReport(string separator) 769218"];
1591 [label="param DiffReport(IEqualityComparer<T> comparer = null) 769219"];
1592 [label="param DiffReport(Func<T, string> toString = null) 769220"];
1593 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 769221"];
1594 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 769222"];
1595 [label="(comparer != null) 769223"];
1596 [label="EqualityComparer<T>.Default 769224"];
1597 [label="new LCS<T>(EqualityComparer<T>.Default) 769225"];
1598 [label="param LCS(IEqualityComparer<T> comparer) 769226"];
1599 [label="param LCS(this) 769227"];
1600 [label="1 769228"];
1601 [label="DeleteCost = 1 769229"];
1602 [label="1 769230"];
1603 [label="InsertCost = 1 769231"];
1604 [label="2 769232"];
1605 [label="UpdateCost = 2 769233"];
1606 [label="param LongestCommonSubsequence(this) 769234"];
1607 [label="_comparer 769235"];
1608 [label="_comparer 769236"];
1609 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 769237"];
1610 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 769238"];
1611 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 769239"];
1612 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 769240"];
1613 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 769241"];
1614 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 769242"];
1615 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 769243"];
1616 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 769244"];
1617 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 769245"];
1618 [label="lcs.CalculateDiff(expectedList, actualList, toString) 769246"];
1619 [label="param CalculateDiff(IList<T> sequenceA) 769247"];
1620 [label="param CalculateDiff(IList<T> sequenceB) 769248"];
1621 [label="param CalculateDiff(Func<T, string> toString) 769249"];
1622 [label="param CalculateDiff(this) 769250"];
1623 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 769251"];
1624 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 769252"];
1625 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 769253"];
1626 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 769254"];
1627 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 769255"];
1628 [label="param GetEdits(TSequence sequenceA) 769256"];
1629 [label="param GetEdits(int lengthA) 769257"];
1630 [label="param GetEdits(TSequence sequenceB) 769258"];
1631 [label="param GetEdits(int lengthB) 769259"];
1632 [label="param GetEdits(this) 769260"];
1633 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 769261"];
1634 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 769262"];
1635 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 769263"];
1636 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 769264"];
1637 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 769265"];
1638 [label="param ComputeCostMatrix(TSequence sequenceA) 769266"];
1639 [label="param ComputeCostMatrix(int lengthA) 769267"];
1640 [label="param ComputeCostMatrix(TSequence sequenceB) 769268"];
1641 [label="param ComputeCostMatrix(int lengthB) 769269"];
1642 [label="param ComputeCostMatrix(this) 769270"];
1643 [label="var la = lengthA + 1; 769271"];
1644 [label="var la = lengthA + 1; 769272"];
1645 [label="var lb = lengthB + 1; 769273"];
1646 [label="var lb = lengthB + 1; 769274"];
1647 [label="var d = new int[la, lb]; 769275"];
1648 [label="d[0, 0] = 0; 769276"];
1649 [label="d[0, 0] 769277"];
1650 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 769278"];
1651 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 769279"];
1652 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 769280"];
1653 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 769281"];
1654 [label="d[i, 0] 769282"];
1655 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 769283"];
1656 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 769284"];
1657 [label="d[0, j] = d[0, j - 1] + InsertCost; 769285"];
1658 [label="d[0, j] = d[0, j - 1] + InsertCost; 769286"];
1659 [label="d[0, j] 769287"];
1660 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 769288"];
1661 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 769289"];
1662 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 769290"];
1663 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 769291"];
1664 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 769292"];
1665 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 769293"];
1666 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 769294"];
1667 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 769295"];
1668 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 769296"];
1669 [label="param ItemsEqual(IList<T> sequenceA) 769297"];
1670 [label="param ItemsEqual(int indexA) 769298"];
1671 [label="param ItemsEqual(IList<T> sequenceB) 769299"];
1672 [label="param ItemsEqual(int indexB) 769300"];
1673 [label="param ItemsEqual(this) 769301"];
1674 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 769302"];
1675 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 769303"];
1676 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 769304"];
1677 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 769305"];
1678 [label="int m2 = d[i - 1, j] + DeleteCost; 769306"];
1679 [label="int m2 = d[i - 1, j] + DeleteCost; 769307"];
1680 [label="int m3 = d[i, j - 1] + InsertCost; 769308"];
1681 [label="int m3 = d[i, j - 1] + InsertCost; 769309"];
1682 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 769310"];
1683 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 769311"];
1684 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 769312"];
1685 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 769313"];
1686 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 769314"];
1687 [label="d[i, j] 769315"];
1688 [label="return d; 769316"];
1689 [label="int i = lengthA; 769317"];
1690 [label="int j = lengthB; 769318"];
1691 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 769319"];
1692 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 769320"];
1693 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 769321"];
1694 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 769322"];
1695 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 769323"];
1696 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 769324"];
1697 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 769325"];
1698 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 769326"];
1699 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 769327"];
1700 [label="i--; 769328"];
1701 [label="j--; 769329"];
1702 [label="yield return new Edit(EditKind.Update, i, j); 769330"];
1703 [label="yield return new Edit(EditKind.Update, i, j); 769331"];
1704 [label="yield return new Edit(EditKind.Update, i, j); 769332"];
1705 [label="yield return new Edit(EditKind.Update, i, j); 769333"];
1706 [label="new Edit(EditKind.Update, i, j) 769334"];
1707 [label="param Edit(EditKind kind) 769335"];
1708 [label="param Edit(int indexA) 769336"];
1709 [label="param Edit(int indexB) 769337"];
1710 [label="param Edit(this) 769338"];
1711 [label="this.Kind 769339"];
1712 [label="this.IndexA 769340"];
1713 [label="this.IndexB 769341"];
1714 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 769342"];
1715 [label="yield return new Edit(EditKind.Update, i, j); 769343"];
1716 [label="yield return new Edit(EditKind.Update, i, j); 769344"];
1717 [label="new Edit(EditKind.Update, i, j) 769345"];
1718 [label="param Edit(EditKind kind) 769346"];
1719 [label="param Edit(int indexA) 769347"];
1720 [label="param Edit(int indexB) 769348"];
1721 [label="param Edit(this) 769349"];
1722 [label="this.Kind 769350"];
1723 [label="this.IndexA 769351"];
1724 [label="this.IndexB 769352"];
1725 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 769353"];
1726 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 769354"];
1727 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 769355"];
1728 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 769356"];
1729 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 769357"];
1730 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 769358"];
1731 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 769359"];
1732 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 769360"];
1733 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 769361"];
1734 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 769362"];
1735 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 769363"];
1736 [label="actualText.Free(); 769364"];
1737 [label="expectedText.Free(); 769365"];
1738 [label="return assertText.ToString(); 769366"];
1739 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 769367"];
1740 [label="diagnostics.Verify(expected); 769368"];
1741 [label="VerifyAssemblyIds(c, diagnostics); 769369"];
1742 [label="VerifyAssemblyIds(c, diagnostics); 769370"];
1743 [label="VerifyAssemblyIds(c, diagnostics) 769371"];
1744 [label="param VerifyAssemblyIds(TCompilation c) 769372"];
1745 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 769373"];
1746 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 769374"];
1747 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 769375"];
1748 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 769376"];
1749 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 769377"];
1750 [label="CustomAssert.True(assemblyIds.IsEmpty); 769378"];
1751 [label="CustomAssert.True(assemblyIds.IsEmpty); 769379"];
1752 [label="VerifyAssemblyIds(c, diagnostics); 769380"];
1753 [label="return c; 769381"];
2 -> 0;
2 -> 1;
4 -> 3;
6 -> 5;
7 -> 1;
9 -> 8;
11 -> 10;
13 -> 12;
15 -> 14;
17 -> 16;
19 -> 18;
21 -> 20;
23 -> 22;
25 -> 24;
27 -> 26;
29 -> 28;
31 -> 30;
33 -> 32;
35 -> 34;
37 -> 36;
39 -> 38;
41 -> 40;
43 -> 42;
45 -> 44;
46 -> 0;
47 -> 0;
48 -> 46;
48 -> 47;
48 -> 0;
49 -> 48;
50 -> 0;
51 -> 0;
52 -> 50;
52 -> 51;
52 -> 48;
53 -> 52;
54 -> 0;
55 -> 54;
56 -> 55;
56 -> 54;
57 -> 56;
59 -> 0;
60 -> 58;
60 -> 59;
61 -> 60;
62 -> 0;
63 -> 0;
64 -> 62;
64 -> 63;
64 -> 0;
65 -> 64;
66 -> 0;
67 -> 0;
68 -> 66;
68 -> 67;
68 -> 52;
69 -> 68;
70 -> 0;
71 -> 0;
72 -> 70;
72 -> 71;
72 -> 68;
73 -> 72;
74 -> 0;
75 -> 0;
76 -> 74;
76 -> 75;
76 -> 72;
77 -> 76;
78 -> 0;
79 -> 0;
80 -> 78;
80 -> 79;
80 -> 0;
81 -> 80;
82 -> 0;
83 -> 0;
84 -> 82;
84 -> 83;
84 -> 0;
85 -> 84;
86 -> 0;
87 -> 0;
88 -> 86;
88 -> 87;
88 -> 0;
89 -> 88;
90 -> 0;
91 -> 0;
92 -> 90;
92 -> 91;
92 -> 76;
93 -> 92;
94 -> 0;
95 -> 0;
96 -> 94;
96 -> 95;
96 -> 0;
97 -> 96;
99 -> 0;
100 -> 98;
100 -> 99;
101 -> 100;
102 -> 0;
103 -> 0;
104 -> 102;
104 -> 103;
104 -> 92;
105 -> 104;
106 -> 0;
107 -> 0;
108 -> 106;
108 -> 107;
108 -> 0;
109 -> 108;
110 -> 0;
111 -> 0;
112 -> 110;
112 -> 111;
112 -> 0;
113 -> 112;
114 -> 0;
115 -> 0;
116 -> 114;
116 -> 115;
116 -> 0;
117 -> 116;
118 -> 0;
119 -> 0;
120 -> 118;
120 -> 119;
120 -> 0;
121 -> 120;
122 -> 0;
123 -> 0;
124 -> 122;
124 -> 123;
124 -> 0;
125 -> 124;
126 -> 0;
127 -> 0;
128 -> 126;
128 -> 127;
128 -> 104;
129 -> 128;
130 -> 0;
131 -> 0;
132 -> 130;
132 -> 131;
132 -> 128;
133 -> 132;
134 -> 0;
135 -> 0;
136 -> 134;
136 -> 135;
136 -> 132;
137 -> 136;
138 -> 0;
139 -> 0;
140 -> 138;
140 -> 139;
140 -> 136;
141 -> 140;
142 -> 0;
143 -> 0;
144 -> 142;
144 -> 143;
144 -> 0;
145 -> 144;
146 -> 0;
147 -> 0;
148 -> 146;
148 -> 147;
148 -> 0;
149 -> 148;
150 -> 0;
151 -> 0;
152 -> 150;
152 -> 151;
152 -> 140;
153 -> 152;
154 -> 0;
155 -> 0;
156 -> 154;
156 -> 155;
156 -> 0;
157 -> 156;
158 -> 0;
159 -> 0;
160 -> 158;
160 -> 159;
160 -> 0;
161 -> 160;
162 -> 0;
163 -> 0;
164 -> 162;
164 -> 163;
164 -> 0;
165 -> 164;
166 -> 0;
167 -> 0;
168 -> 166;
168 -> 167;
168 -> 152;
169 -> 168;
170 -> 0;
171 -> 0;
172 -> 170;
172 -> 171;
172 -> 0;
173 -> 172;
174 -> 0;
175 -> 0;
176 -> 174;
176 -> 175;
176 -> 0;
177 -> 176;
179 -> 178;
181 -> 179;
181 -> 180;
182 -> 181;
184 -> 0;
184 -> 183;
185 -> 184;
185 -> 0;
186 -> 185;
188 -> 187;
190 -> 189;
192 -> 191;
194 -> 193;
195 -> 7;
196 -> 195;
197 -> 196;
198 -> 197;
198 -> 196;
199 -> 1;
199 -> 2;
199 -> 198;
200 -> 1;
201 -> 1;
202 -> 4;
202 -> 201;
202 -> 1;
203 -> 202;
203 -> 6;
203 -> 1;
204 -> 203;
204 -> 1;
205 -> 1;
206 -> 204;
206 -> 205;
207 -> 206;
207 -> 205;
208 -> 205;
209 -> 207;
209 -> 208;
210 -> 208;
211 -> 209;
211 -> 210;
211 -> 208;
212 -> 208;
212 -> 1;
213 -> 1;
214 -> 1;
215 -> 212;
215 -> 214;
216 -> 213;
216 -> 214;
217 -> 213;
217 -> 214;
218 -> 213;
218 -> 214;
219 -> 213;
219 -> 214;
220 -> 213;
220 -> 214;
221 -> 213;
221 -> 214;
222 -> 213;
222 -> 214;
223 -> 215;
223 -> 214;
224 -> 219;
224 -> 214;
225 -> 216;
225 -> 214;
226 -> 214;
227 -> 224;
227 -> 226;
228 -> 225;
228 -> 226;
229 -> 227;
229 -> 226;
230 -> 226;
231 -> 229;
231 -> 230;
232 -> 231;
232 -> 230;
233 -> 232;
234 -> 0;
234 -> 233;
235 -> 234;
236 -> 235;
237 -> 235;
238 -> 0;
238 -> 237;
239 -> 238;
239 -> 236;
239 -> 235;
240 -> 239;
240 -> 233;
241 -> 226;
242 -> 228;
242 -> 241;
242 -> 226;
243 -> 240;
243 -> 242;
244 -> 217;
244 -> 214;
245 -> 218;
245 -> 214;
246 -> 220;
246 -> 214;
247 -> 221;
247 -> 214;
248 -> 222;
248 -> 214;
249 -> 214;
250 -> 223;
250 -> 249;
251 -> 243;
251 -> 249;
252 -> 244;
252 -> 249;
253 -> 245;
253 -> 249;
254 -> 246;
254 -> 249;
255 -> 247;
255 -> 249;
256 -> 248;
256 -> 249;
257 -> 250;
257 -> 249;
258 -> 251;
258 -> 249;
259 -> 252;
259 -> 249;
260 -> 253;
260 -> 249;
261 -> 254;
261 -> 249;
262 -> 255;
262 -> 249;
263 -> 256;
263 -> 249;
264 -> 249;
265 -> 264;
265 -> 249;
266 -> 249;
267 -> 257;
267 -> 266;
268 -> 258;
268 -> 266;
269 -> 259;
269 -> 266;
270 -> 260;
270 -> 266;
271 -> 261;
271 -> 266;
272 -> 262;
272 -> 266;
273 -> 263;
273 -> 266;
274 -> 265;
274 -> 266;
275 -> 270;
275 -> 266;
276 -> 272;
276 -> 266;
277 -> 266;
278 -> 275;
278 -> 277;
279 -> 276;
279 -> 277;
280 -> 267;
280 -> 277;
281 -> 280;
281 -> 211;
281 -> 277;
282 -> 281;
283 -> 279;
283 -> 281;
284 -> 278;
284 -> 281;
285 -> 281;
286 -> 282;
286 -> 285;
287 -> 283;
287 -> 285;
288 -> 284;
288 -> 285;
289 -> 282;
289 -> 285;
290 -> 285;
291 -> 288;
291 -> 290;
291 -> 285;
292 -> 0;
293 -> 0;
295 -> 292;
295 -> 293;
295 -> 294;
296 -> 295;
297 -> 0;
298 -> 296;
298 -> 295;
298 -> 297;
299 -> 298;
300 -> 0;
301 -> 296;
301 -> 295;
301 -> 300;
302 -> 301;
303 -> 0;
304 -> 296;
304 -> 295;
304 -> 303;
305 -> 304;
306 -> 0;
307 -> 296;
307 -> 295;
307 -> 306;
308 -> 307;
309 -> 0;
310 -> 296;
310 -> 295;
310 -> 309;
311 -> 310;
312 -> 0;
313 -> 296;
313 -> 295;
313 -> 312;
314 -> 313;
315 -> 0;
316 -> 296;
316 -> 295;
316 -> 315;
317 -> 316;
318 -> 0;
319 -> 296;
319 -> 295;
319 -> 318;
320 -> 319;
321 -> 0;
322 -> 296;
322 -> 295;
322 -> 321;
323 -> 322;
324 -> 0;
325 -> 296;
325 -> 295;
325 -> 324;
326 -> 325;
327 -> 0;
328 -> 296;
328 -> 295;
328 -> 327;
329 -> 328;
330 -> 296;
333 -> 330;
333 -> 332;
334 -> 331;
334 -> 332;
335 -> 332;
336 -> 333;
336 -> 295;
336 -> 332;
337 -> 332;
338 -> 334;
338 -> 332;
339 -> 335;
339 -> 332;
340 -> 338;
340 -> 339;
340 -> 332;
341 -> 340;
341 -> 337;
341 -> 332;
342 -> 336;
342 -> 337;
342 -> 295;
342 -> 341;
342 -> 340;
342 -> 332;
343 -> 342;
344 -> 0;
345 -> 344;
347 -> 345;
347 -> 346;
348 -> 296;
348 -> 295;
348 -> 347;
349 -> 348;
350 -> 0;
351 -> 350;
352 -> 296;
352 -> 295;
352 -> 351;
353 -> 352;
354 -> 0;
355 -> 296;
355 -> 295;
355 -> 354;
356 -> 355;
357 -> 320;
359 -> 358;
360 -> 0;
361 -> 0;
362 -> 0;
364 -> 360;
364 -> 361;
364 -> 362;
364 -> 363;
365 -> 359;
366 -> 364;
366 -> 365;
366 -> 358;
367 -> 366;
371 -> 368;
371 -> 369;
371 -> 370;
372 -> 302;
372 -> 295;
372 -> 301;
372 -> 368;
372 -> 371;
373 -> 372;
374 -> 314;
375 -> 323;
376 -> 323;
377 -> 320;
378 -> 0;
379 -> 0;
381 -> 378;
381 -> 380;
382 -> 379;
382 -> 380;
383 -> 380;
384 -> 381;
384 -> 380;
385 -> 382;
385 -> 380;
386 -> 0;
386 -> 380;
387 -> 383;
387 -> 380;
388 -> 380;
389 -> 384;
389 -> 385;
389 -> 386;
389 -> 387;
389 -> 388;
389 -> 380;
390 -> 389;
391 -> 0;
392 -> 0;
394 -> 391;
394 -> 393;
395 -> 392;
395 -> 393;
396 -> 393;
397 -> 394;
397 -> 393;
398 -> 395;
398 -> 393;
399 -> 0;
399 -> 393;
400 -> 396;
400 -> 393;
401 -> 393;
402 -> 397;
402 -> 398;
402 -> 399;
402 -> 400;
402 -> 401;
402 -> 393;
403 -> 402;
405 -> 390;
405 -> 389;
405 -> 404;
406 -> 405;
408 -> 403;
408 -> 402;
408 -> 407;
409 -> 408;
410 -> 0;
411 -> 0;
413 -> 410;
413 -> 412;
414 -> 411;
414 -> 412;
415 -> 412;
416 -> 413;
416 -> 412;
417 -> 414;
417 -> 412;
418 -> 0;
418 -> 412;
419 -> 415;
419 -> 412;
420 -> 412;
421 -> 416;
421 -> 417;
421 -> 418;
421 -> 419;
421 -> 420;
421 -> 412;
422 -> 421;
423 -> 0;
424 -> 0;
426 -> 423;
426 -> 425;
427 -> 424;
427 -> 425;
428 -> 425;
429 -> 426;
429 -> 425;
430 -> 427;
430 -> 425;
431 -> 0;
431 -> 425;
432 -> 428;
432 -> 425;
433 -> 425;
434 -> 429;
434 -> 430;
434 -> 431;
434 -> 432;
434 -> 433;
434 -> 425;
435 -> 434;
436 -> 0;
437 -> 0;
439 -> 436;
439 -> 438;
440 -> 437;
440 -> 438;
441 -> 438;
442 -> 439;
442 -> 438;
443 -> 440;
443 -> 438;
444 -> 0;
444 -> 438;
445 -> 441;
445 -> 438;
446 -> 438;
447 -> 442;
447 -> 443;
447 -> 444;
447 -> 445;
447 -> 446;
447 -> 438;
448 -> 447;
449 -> 0;
450 -> 0;
452 -> 449;
452 -> 451;
453 -> 450;
453 -> 451;
454 -> 451;
455 -> 452;
455 -> 451;
456 -> 453;
456 -> 451;
457 -> 0;
457 -> 451;
458 -> 454;
458 -> 451;
459 -> 451;
460 -> 455;
460 -> 456;
460 -> 457;
460 -> 458;
460 -> 459;
460 -> 451;
461 -> 460;
462 -> 0;
463 -> 0;
465 -> 462;
465 -> 464;
466 -> 463;
466 -> 464;
467 -> 464;
468 -> 465;
468 -> 464;
469 -> 466;
469 -> 464;
470 -> 0;
470 -> 464;
471 -> 467;
471 -> 464;
472 -> 464;
473 -> 468;
473 -> 469;
473 -> 470;
473 -> 471;
473 -> 472;
473 -> 464;
474 -> 473;
475 -> 0;
476 -> 0;
478 -> 475;
478 -> 477;
479 -> 476;
479 -> 477;
480 -> 477;
481 -> 478;
481 -> 477;
482 -> 479;
482 -> 477;
483 -> 0;
483 -> 477;
484 -> 480;
484 -> 477;
485 -> 477;
486 -> 481;
486 -> 482;
486 -> 483;
486 -> 484;
486 -> 485;
486 -> 477;
487 -> 486;
489 -> 390;
489 -> 389;
489 -> 488;
490 -> 489;
492 -> 403;
492 -> 402;
492 -> 491;
493 -> 492;
495 -> 422;
495 -> 421;
495 -> 494;
496 -> 495;
498 -> 435;
498 -> 434;
498 -> 497;
499 -> 498;
500 -> 0;
501 -> 390;
501 -> 389;
501 -> 500;
501 -> 0;
502 -> 501;
503 -> 0;
504 -> 403;
504 -> 402;
504 -> 503;
504 -> 0;
505 -> 504;
506 -> 0;
507 -> 474;
507 -> 473;
507 -> 506;
507 -> 0;
508 -> 507;
509 -> 0;
510 -> 422;
510 -> 421;
510 -> 509;
510 -> 0;
511 -> 510;
512 -> 0;
513 -> 0;
513 -> 512;
514 -> 513;
515 -> 296;
515 -> 291;
516 -> 286;
516 -> 285;
517 -> 0;
517 -> 285;
518 -> 517;
518 -> 289;
518 -> 285;
519 -> 285;
520 -> 516;
520 -> 518;
520 -> 519;
520 -> 0;
520 -> 285;
521 -> 520;
521 -> 285;
522 -> 515;
522 -> 285;
523 -> 287;
523 -> 285;
524 -> 285;
525 -> 521;
525 -> 522;
525 -> 523;
525 -> 524;
525 -> 520;
525 -> 295;
525 -> 285;
526 -> 285;
527 -> 525;
527 -> 526;
528 -> 526;
529 -> 526;
530 -> 527;
530 -> 525;
530 -> 529;
530 -> 526;
531 -> 528;
531 -> 526;
532 -> 526;
533 -> 530;
533 -> 525;
533 -> 529;
533 -> 531;
533 -> 532;
533 -> 528;
533 -> 526;
534 -> 526;
535 -> 534;
535 -> 528;
535 -> 526;
536 -> 528;
536 -> 526;
537 -> 526;
538 -> 536;
538 -> 537;
538 -> 528;
538 -> 535;
538 -> 526;
539 -> 527;
539 -> 526;
540 -> 539;
540 -> 282;
540 -> 281;
541 -> 282;
541 -> 266;
542 -> 266;
543 -> 269;
543 -> 542;
543 -> 266;
544 -> 541;
544 -> 543;
545 -> 543;
546 -> 544;
546 -> 545;
546 -> 282;
546 -> 540;
546 -> 525;
546 -> 543;
547 -> 546;
547 -> 543;
548 -> 390;
548 -> 547;
549 -> 0;
549 -> 266;
550 -> 274;
550 -> 266;
551 -> 271;
551 -> 541;
551 -> 268;
551 -> 548;
551 -> 266;
552 -> 551;
552 -> 266;
553 -> 266;
554 -> 552;
554 -> 553;
555 -> 0;
555 -> 553;
556 -> 555;
557 -> 266;
558 -> 551;
558 -> 282;
558 -> 540;
558 -> 525;
558 -> 239;
558 -> 0;
558 -> 389;
558 -> 236;
558 -> 266;
559 -> 266;
560 -> 559;
561 -> 558;
561 -> 560;
561 -> 266;
562 -> 561;
562 -> 266;
563 -> 266;
564 -> 562;
564 -> 563;
565 -> 564;
565 -> 561;
565 -> 563;
566 -> 565;
566 -> 561;
566 -> 563;
567 -> 563;
568 -> 565;
568 -> 567;
568 -> 561;
568 -> 563;
569 -> 0;
569 -> 563;
570 -> 568;
570 -> 569;
570 -> 563;
571 -> 273;
571 -> 570;
571 -> 266;
572 -> 561;
572 -> 266;
573 -> 0;
573 -> 1;
574 -> 1;
575 -> 573;
575 -> 574;
576 -> 213;
576 -> 574;
577 -> 213;
577 -> 574;
578 -> 213;
578 -> 574;
579 -> 213;
579 -> 574;
580 -> 213;
580 -> 574;
581 -> 213;
581 -> 574;
582 -> 575;
582 -> 574;
583 -> 576;
583 -> 574;
584 -> 577;
584 -> 574;
585 -> 578;
585 -> 574;
586 -> 579;
586 -> 574;
587 -> 580;
587 -> 574;
588 -> 581;
588 -> 574;
589 -> 574;
590 -> 582;
590 -> 589;
591 -> 583;
591 -> 589;
592 -> 584;
592 -> 589;
593 -> 585;
593 -> 589;
594 -> 586;
594 -> 589;
595 -> 587;
595 -> 589;
596 -> 588;
596 -> 589;
597 -> 590;
597 -> 589;
598 -> 590;
598 -> 589;
599 -> 589;
600 -> 591;
600 -> 589;
601 -> 592;
601 -> 589;
602 -> 593;
602 -> 589;
603 -> 594;
603 -> 589;
604 -> 595;
604 -> 589;
606 -> 605;
608 -> 607;
609 -> 596;
609 -> 589;
610 -> 589;
611 -> 598;
611 -> 610;
612 -> 599;
612 -> 610;
613 -> 600;
613 -> 610;
614 -> 601;
614 -> 610;
615 -> 602;
615 -> 610;
616 -> 603;
616 -> 610;
617 -> 604;
617 -> 610;
618 -> 598;
618 -> 610;
619 -> 609;
619 -> 610;
620 -> 599;
620 -> 610;
621 -> 599;
621 -> 610;
622 -> 599;
622 -> 610;
623 -> 622;
623 -> 610;
624 -> 622;
624 -> 610;
625 -> 622;
625 -> 610;
626 -> 622;
626 -> 610;
627 -> 622;
627 -> 610;
628 -> 622;
628 -> 610;
629 -> 622;
629 -> 610;
630 -> 622;
630 -> 610;
631 -> 622;
631 -> 610;
632 -> 622;
632 -> 610;
633 -> 622;
633 -> 610;
634 -> 622;
634 -> 610;
635 -> 622;
635 -> 610;
636 -> 622;
636 -> 610;
637 -> 622;
637 -> 610;
638 -> 611;
638 -> 622;
638 -> 610;
639 -> 612;
639 -> 622;
639 -> 610;
640 -> 613;
640 -> 622;
640 -> 610;
641 -> 614;
641 -> 622;
641 -> 610;
642 -> 615;
642 -> 622;
642 -> 610;
643 -> 616;
643 -> 622;
643 -> 610;
644 -> 617;
644 -> 622;
644 -> 610;
645 -> 618;
645 -> 610;
646 -> 645;
646 -> 622;
646 -> 610;
647 -> 619;
647 -> 622;
647 -> 610;
648 -> 620;
648 -> 622;
648 -> 610;
649 -> 621;
649 -> 622;
649 -> 610;
650 -> 599;
650 -> 574;
651 -> 650;
651 -> 1;
652 -> 213;
652 -> 1;
653 -> 1;
654 -> 213;
654 -> 653;
655 -> 651;
655 -> 653;
656 -> 655;
656 -> 638;
656 -> 653;
657 -> 655;
657 -> 639;
657 -> 653;
658 -> 655;
658 -> 640;
658 -> 653;
659 -> 654;
659 -> 653;
660 -> 655;
660 -> 642;
660 -> 653;
661 -> 655;
661 -> 643;
661 -> 653;
662 -> 653;
663 -> 655;
663 -> 646;
663 -> 653;
664 -> 655;
664 -> 647;
664 -> 653;
665 -> 655;
665 -> 648;
665 -> 653;
666 -> 655;
666 -> 649;
666 -> 653;
667 -> 653;
668 -> 656;
668 -> 667;
669 -> 657;
669 -> 667;
670 -> 658;
670 -> 667;
671 -> 659;
671 -> 667;
672 -> 660;
672 -> 667;
673 -> 661;
673 -> 667;
674 -> 662;
674 -> 667;
675 -> 663;
675 -> 667;
676 -> 664;
676 -> 667;
677 -> 665;
677 -> 667;
678 -> 666;
678 -> 667;
679 -> 662;
679 -> 667;
680 -> 679;
680 -> 667;
681 -> 679;
681 -> 667;
682 -> 679;
682 -> 667;
683 -> 679;
683 -> 667;
684 -> 679;
684 -> 667;
685 -> 679;
685 -> 667;
686 -> 679;
686 -> 667;
687 -> 679;
687 -> 667;
688 -> 679;
688 -> 667;
689 -> 679;
689 -> 667;
690 -> 679;
690 -> 667;
691 -> 679;
691 -> 667;
692 -> 679;
692 -> 667;
693 -> 679;
693 -> 667;
694 -> 679;
694 -> 667;
695 -> 671;
695 -> 679;
695 -> 667;
696 -> 674;
696 -> 679;
696 -> 667;
697 -> 662;
697 -> 1;
698 -> 1;
699 -> 213;
699 -> 698;
700 -> 213;
700 -> 698;
701 -> 697;
701 -> 698;
702 -> 701;
702 -> 668;
702 -> 698;
703 -> 701;
703 -> 669;
703 -> 698;
704 -> 701;
704 -> 670;
704 -> 698;
705 -> 701;
705 -> 695;
705 -> 698;
706 -> 698;
707 -> 699;
707 -> 706;
707 -> 698;
708 -> 700;
708 -> 706;
708 -> 698;
709 -> 707;
709 -> 708;
709 -> 698;
710 -> 701;
710 -> 673;
710 -> 698;
711 -> 701;
711 -> 696;
711 -> 698;
712 -> 701;
712 -> 675;
712 -> 698;
713 -> 701;
713 -> 676;
713 -> 698;
714 -> 701;
714 -> 677;
714 -> 698;
715 -> 701;
715 -> 678;
715 -> 698;
716 -> 698;
717 -> 702;
717 -> 716;
718 -> 703;
718 -> 716;
719 -> 704;
719 -> 716;
720 -> 705;
720 -> 716;
721 -> 709;
721 -> 716;
722 -> 710;
722 -> 716;
723 -> 711;
723 -> 716;
724 -> 712;
724 -> 716;
725 -> 713;
725 -> 716;
726 -> 714;
726 -> 716;
727 -> 715;
727 -> 716;
728 -> 706;
728 -> 716;
729 -> 728;
729 -> 716;
730 -> 728;
730 -> 716;
731 -> 728;
731 -> 716;
732 -> 728;
732 -> 716;
733 -> 728;
733 -> 716;
734 -> 728;
734 -> 716;
735 -> 728;
735 -> 716;
736 -> 728;
736 -> 716;
737 -> 728;
737 -> 716;
738 -> 728;
738 -> 716;
739 -> 728;
739 -> 716;
740 -> 728;
740 -> 716;
741 -> 728;
741 -> 716;
742 -> 728;
742 -> 716;
743 -> 728;
743 -> 716;
744 -> 721;
744 -> 728;
744 -> 716;
745 -> 706;
745 -> 1;
746 -> 1;
747 -> 573;
747 -> 746;
748 -> 213;
748 -> 746;
749 -> 213;
749 -> 746;
750 -> 213;
750 -> 746;
751 -> 213;
751 -> 746;
752 -> 213;
752 -> 746;
753 -> 213;
753 -> 746;
754 -> 747;
754 -> 746;
755 -> 748;
755 -> 746;
756 -> 749;
756 -> 746;
757 -> 750;
757 -> 746;
758 -> 751;
758 -> 746;
759 -> 752;
759 -> 746;
760 -> 753;
760 -> 746;
761 -> 746;
762 -> 754;
762 -> 761;
763 -> 755;
763 -> 761;
764 -> 756;
764 -> 761;
765 -> 757;
765 -> 761;
766 -> 758;
766 -> 761;
767 -> 759;
767 -> 761;
768 -> 760;
768 -> 761;
769 -> 762;
769 -> 761;
770 -> 762;
770 -> 761;
771 -> 761;
772 -> 763;
772 -> 761;
773 -> 764;
773 -> 761;
774 -> 765;
774 -> 761;
775 -> 766;
775 -> 761;
776 -> 767;
776 -> 761;
777 -> 768;
777 -> 761;
778 -> 761;
779 -> 770;
779 -> 778;
780 -> 771;
780 -> 778;
781 -> 772;
781 -> 778;
782 -> 773;
782 -> 778;
783 -> 774;
783 -> 778;
784 -> 775;
784 -> 778;
785 -> 776;
785 -> 778;
786 -> 770;
786 -> 778;
787 -> 777;
787 -> 778;
788 -> 771;
788 -> 778;
789 -> 771;
789 -> 778;
790 -> 771;
790 -> 778;
791 -> 790;
791 -> 778;
792 -> 790;
792 -> 778;
793 -> 790;
793 -> 778;
794 -> 790;
794 -> 778;
795 -> 790;
795 -> 778;
796 -> 790;
796 -> 778;
797 -> 790;
797 -> 778;
798 -> 790;
798 -> 778;
799 -> 790;
799 -> 778;
800 -> 790;
800 -> 778;
801 -> 790;
801 -> 778;
802 -> 790;
802 -> 778;
803 -> 790;
803 -> 778;
804 -> 790;
804 -> 778;
805 -> 790;
805 -> 778;
806 -> 779;
806 -> 790;
806 -> 778;
807 -> 780;
807 -> 790;
807 -> 778;
808 -> 781;
808 -> 790;
808 -> 778;
809 -> 782;
809 -> 790;
809 -> 778;
810 -> 783;
810 -> 790;
810 -> 778;
811 -> 784;
811 -> 790;
811 -> 778;
812 -> 785;
812 -> 790;
812 -> 778;
813 -> 786;
813 -> 778;
814 -> 813;
814 -> 790;
814 -> 778;
815 -> 787;
815 -> 790;
815 -> 778;
816 -> 788;
816 -> 790;
816 -> 778;
817 -> 789;
817 -> 790;
817 -> 778;
818 -> 771;
818 -> 746;
819 -> 818;
819 -> 1;
820 -> 1;
821 -> 213;
821 -> 820;
822 -> 213;
822 -> 820;
823 -> 819;
823 -> 820;
824 -> 823;
824 -> 806;
824 -> 820;
825 -> 823;
825 -> 807;
825 -> 820;
826 -> 823;
826 -> 808;
826 -> 820;
827 -> 823;
827 -> 809;
827 -> 820;
828 -> 820;
829 -> 821;
829 -> 828;
829 -> 820;
830 -> 822;
830 -> 828;
830 -> 820;
831 -> 829;
831 -> 830;
831 -> 820;
832 -> 823;
832 -> 811;
832 -> 820;
833 -> 823;
833 -> 812;
833 -> 820;
834 -> 823;
834 -> 814;
834 -> 820;
835 -> 823;
835 -> 815;
835 -> 820;
836 -> 823;
836 -> 816;
836 -> 820;
837 -> 823;
837 -> 817;
837 -> 820;
838 -> 820;
839 -> 824;
839 -> 838;
840 -> 825;
840 -> 838;
841 -> 826;
841 -> 838;
842 -> 827;
842 -> 838;
843 -> 831;
843 -> 838;
844 -> 832;
844 -> 838;
845 -> 833;
845 -> 838;
846 -> 834;
846 -> 838;
847 -> 835;
847 -> 838;
848 -> 836;
848 -> 838;
849 -> 837;
849 -> 838;
850 -> 828;
850 -> 838;
851 -> 850;
851 -> 838;
852 -> 850;
852 -> 838;
853 -> 850;
853 -> 838;
854 -> 850;
854 -> 838;
855 -> 850;
855 -> 838;
856 -> 850;
856 -> 838;
857 -> 850;
857 -> 838;
858 -> 850;
858 -> 838;
859 -> 850;
859 -> 838;
860 -> 850;
860 -> 838;
861 -> 850;
861 -> 838;
862 -> 850;
862 -> 838;
863 -> 850;
863 -> 838;
864 -> 850;
864 -> 838;
865 -> 850;
865 -> 838;
866 -> 843;
866 -> 850;
866 -> 838;
867 -> 828;
867 -> 1;
868 -> 745;
868 -> 213;
868 -> 1;
869 -> 867;
869 -> 213;
869 -> 1;
870 -> 1;
871 -> 572;
871 -> 870;
872 -> 213;
872 -> 870;
873 -> 870;
874 -> 871;
874 -> 873;
874 -> 570;
874 -> 870;
875 -> 874;
875 -> 870;
876 -> 872;
876 -> 870;
877 -> 870;
878 -> 875;
878 -> 877;
879 -> 876;
879 -> 877;
880 -> 878;
880 -> 877;
881 -> 879;
881 -> 877;
882 -> 877;
883 -> 880;
883 -> 882;
884 -> 881;
884 -> 882;
885 -> 883;
885 -> 882;
886 -> 884;
886 -> 882;
887 -> 882;
888 -> 882;
889 -> 885;
889 -> 888;
890 -> 886;
890 -> 888;
891 -> 887;
891 -> 888;
892 -> 888;
893 -> 890;
893 -> 892;
893 -> 888;
894 -> 890;
894 -> 888;
895 -> 894;
895 -> 213;
895 -> 868;
895 -> 869;
895 -> 717;
895 -> 718;
895 -> 727;
895 -> 719;
895 -> 720;
895 -> 744;
895 -> 723;
895 -> 724;
895 -> 737;
895 -> 725;
895 -> 726;
895 -> 722;
895 -> 741;
895 -> 742;
895 -> 743;
895 -> 709;
895 -> 839;
895 -> 840;
895 -> 849;
895 -> 841;
895 -> 842;
895 -> 866;
895 -> 845;
895 -> 846;
895 -> 859;
895 -> 847;
895 -> 848;
895 -> 844;
895 -> 863;
895 -> 864;
895 -> 865;
895 -> 831;
895 -> 652;
895 -> 598;
895 -> 770;
895 -> 888;
896 -> 888;
897 -> 894;
897 -> 896;
897 -> 213;
897 -> 868;
897 -> 869;
897 -> 717;
897 -> 718;
897 -> 727;
897 -> 719;
897 -> 720;
897 -> 744;
897 -> 723;
897 -> 724;
897 -> 737;
897 -> 725;
897 -> 726;
897 -> 722;
897 -> 741;
897 -> 742;
897 -> 743;
897 -> 709;
897 -> 839;
897 -> 840;
897 -> 849;
897 -> 841;
897 -> 842;
897 -> 866;
897 -> 845;
897 -> 846;
897 -> 859;
897 -> 847;
897 -> 848;
897 -> 844;
897 -> 863;
897 -> 864;
897 -> 865;
897 -> 831;
897 -> 652;
897 -> 598;
897 -> 770;
897 -> 888;
898 -> 897;
898 -> 896;
899 -> 898;
899 -> 897;
899 -> 896;
900 -> 890;
900 -> 888;
901 -> 900;
901 -> 899;
901 -> 888;
902 -> 888;
903 -> 900;
903 -> 902;
903 -> 899;
903 -> 888;
904 -> 903;
904 -> 902;
905 -> 904;
905 -> 903;
905 -> 902;
906 -> 889;
906 -> 888;
907 -> 891;
907 -> 899;
907 -> 905;
907 -> 888;
908 -> 906;
908 -> 907;
908 -> 888;
909 -> 888;
910 -> 908;
910 -> 909;
911 -> 908;
911 -> 909;
912 -> 908;
912 -> 909;
913 -> 908;
913 -> 909;
914 -> 908;
914 -> 909;
915 -> 914;
915 -> 909;
916 -> 914;
916 -> 909;
917 -> 914;
917 -> 909;
918 -> 914;
918 -> 909;
919 -> 914;
919 -> 909;
920 -> 914;
920 -> 909;
921 -> 914;
921 -> 909;
922 -> 914;
922 -> 909;
923 -> 914;
923 -> 909;
924 -> 914;
924 -> 909;
925 -> 914;
925 -> 909;
926 -> 910;
926 -> 908;
926 -> 914;
926 -> 909;
927 -> 910;
927 -> 908;
927 -> 914;
927 -> 909;
928 -> 910;
928 -> 908;
928 -> 914;
928 -> 909;
929 -> 910;
929 -> 908;
929 -> 914;
929 -> 909;
930 -> 912;
930 -> 909;
931 -> 930;
932 -> 931;
932 -> 914;
932 -> 909;
933 -> 913;
933 -> 909;
934 -> 933;
935 -> 934;
935 -> 914;
935 -> 909;
936 -> 909;
937 -> 909;
938 -> 910;
938 -> 908;
938 -> 937;
938 -> 909;
939 -> 910;
939 -> 908;
939 -> 909;
940 -> 0;
940 -> 909;
941 -> 910;
941 -> 938;
942 -> 938;
943 -> 941;
943 -> 942;
943 -> 938;
944 -> 941;
944 -> 939;
944 -> 914;
944 -> 943;
945 -> 910;
945 -> 939;
945 -> 914;
945 -> 943;
946 -> 911;
946 -> 914;
946 -> 909;
947 -> 914;
947 -> 946;
947 -> 909;
948 -> 914;
948 -> 929;
948 -> 939;
948 -> 947;
949 -> 948;
950 -> 949;
950 -> 914;
950 -> 948;
951 -> 947;
952 -> 941;
952 -> 951;
952 -> 947;
953 -> 941;
953 -> 949;
953 -> 914;
953 -> 952;
954 -> 947;
955 -> 914;
955 -> 953;
955 -> 954;
955 -> 947;
956 -> 914;
956 -> 953;
956 -> 949;
956 -> 954;
956 -> 947;
957 -> 914;
957 -> 929;
957 -> 949;
957 -> 909;
958 -> 957;
958 -> 914;
958 -> 909;
959 -> 908;
959 -> 957;
959 -> 945;
959 -> 927;
959 -> 928;
959 -> 950;
959 -> 953;
959 -> 958;
959 -> 921;
959 -> 944;
959 -> 946;
959 -> 932;
959 -> 935;
959 -> 925;
959 -> 914;
959 -> 929;
959 -> 888;
960 -> 910;
960 -> 959;
960 -> 914;
960 -> 909;
961 -> 914;
961 -> 959;
961 -> 954;
961 -> 947;
962 -> 961;
963 -> 962;
963 -> 914;
963 -> 961;
964 -> 890;
964 -> 888;
965 -> 964;
965 -> 905;
965 -> 888;
966 -> 965;
967 -> 966;
967 -> 963;
967 -> 905;
967 -> 965;
968 -> 967;
968 -> 966;
969 -> 967;
969 -> 966;
970 -> 968;
970 -> 966;
971 -> 966;
972 -> 970;
972 -> 971;
972 -> 966;
973 -> 970;
973 -> 967;
973 -> 966;
974 -> 969;
974 -> 967;
974 -> 973;
974 -> 966;
975 -> 969;
975 -> 974;
975 -> 970;
975 -> 966;
976 -> 969;
976 -> 974;
976 -> 970;
976 -> 966;
977 -> 969;
977 -> 974;
977 -> 966;
978 -> 969;
978 -> 974;
978 -> 970;
978 -> 977;
979 -> 966;
980 -> 969;
980 -> 974;
980 -> 979;
980 -> 966;
981 -> 980;
982 -> 969;
982 -> 974;
982 -> 970;
982 -> 981;
983 -> 966;
984 -> 969;
984 -> 974;
984 -> 983;
984 -> 966;
985 -> 966;
986 -> 970;
986 -> 974;
986 -> 985;
986 -> 966;
987 -> 969;
987 -> 974;
987 -> 970;
987 -> 966;
988 -> 966;
989 -> 969;
989 -> 974;
989 -> 988;
989 -> 966;
990 -> 989;
991 -> 989;
992 -> 969;
992 -> 991;
993 -> 991;
994 -> 992;
994 -> 974;
994 -> 993;
994 -> 991;
995 -> 992;
995 -> 974;
995 -> 994;
996 -> 994;
997 -> 995;
997 -> 992;
997 -> 994;
998 -> 992;
998 -> 974;
998 -> 997;
998 -> 991;
999 -> 998;
999 -> 989;
1000 -> 989;
1001 -> 970;
1001 -> 1000;
1002 -> 1000;
1003 -> 1001;
1003 -> 974;
1003 -> 997;
1003 -> 1002;
1003 -> 1000;
1004 -> 1001;
1004 -> 974;
1004 -> 997;
1004 -> 1003;
1004 -> 1000;
1005 -> 1004;
1005 -> 989;
1006 -> 969;
1006 -> 974;
1006 -> 970;
1006 -> 989;
1007 -> 999;
1007 -> 1006;
1008 -> 1005;
1008 -> 1006;
1009 -> 1007;
1009 -> 1008;
1009 -> 974;
1009 -> 997;
1009 -> 1003;
1009 -> 995;
1009 -> 996;
1009 -> 1006;
1010 -> 969;
1010 -> 1009;
1010 -> 970;
1010 -> 966;
1011 -> 966;
1012 -> 967;
1012 -> 1011;
1012 -> 1009;
1012 -> 965;
1013 -> 965;
1014 -> 1012;
1014 -> 1013;
1014 -> 965;
1015 -> 1012;
1015 -> 1014;
1016 -> 1015;
1017 -> 1015;
1018 -> 1015;
1019 -> 1015;
1020 -> 1015;
1020 -> 1019;
1021 -> 1015;
1022 -> 1021;
1023 -> 1015;
1023 -> 1022;
1024 -> 1015;
1025 -> 1015;
1026 -> 1015;
1027 -> 1015;
1028 -> 1015;
1029 -> 888;
1030 -> 963;
1030 -> 1015;
1030 -> 1029;
1030 -> 888;
1031 -> 888;
1032 -> 890;
1032 -> 888;
1033 -> 889;
1033 -> 888;
1034 -> 888;
1035 -> 1032;
1035 -> 1034;
1036 -> 1033;
1036 -> 1034;
1037 -> 1034;
1038 -> 1034;
1039 -> 1036;
1039 -> 1034;
1040 -> 1039;
1040 -> 1015;
1040 -> 1034;
1041 -> 1015;
1041 -> 1034;
1042 -> 1040;
1042 -> 1034;
1043 -> 1037;
1043 -> 1042;
1044 -> 1043;
1044 -> 1034;
1045 -> 1043;
1045 -> 1034;
1046 -> 1045;
1046 -> 1034;
1047 -> 1035;
1047 -> 1034;
1048 -> 1047;
1048 -> 1015;
1048 -> 1034;
1049 -> 1034;
1050 -> 1047;
1050 -> 1049;
1050 -> 1015;
1050 -> 1034;
1051 -> 1035;
1051 -> 1034;
1052 -> 1051;
1052 -> 1050;
1052 -> 1034;
1053 -> 1034;
1054 -> 1051;
1054 -> 1053;
1054 -> 1050;
1054 -> 1034;
1055 -> 1035;
1055 -> 1034;
1056 -> 1034;
1057 -> 1055;
1057 -> 1056;
1059 -> 1058;
1060 -> 1058;
1061 -> 1060;
1061 -> 1056;
1062 -> 1056;
1063 -> 1057;
1063 -> 1056;
1064 -> 1063;
1064 -> 1054;
1064 -> 1056;
1065 -> 1064;
1066 -> 1064;
1067 -> 1062;
1067 -> 1066;
1067 -> 1064;
1068 -> 1064;
1069 -> 1068;
1069 -> 1066;
1069 -> 1064;
1070 -> 1068;
1070 -> 1054;
1070 -> 1064;
1071 -> 1064;
1071 -> 1054;
1072 -> 1064;
1073 -> 1070;
1073 -> 1072;
1074 -> 1071;
1074 -> 1072;
1075 -> 1061;
1075 -> 1072;
1076 -> 1072;
1077 -> 1073;
1077 -> 1076;
1077 -> 1072;
1078 -> 1072;
1079 -> 1074;
1079 -> 1078;
1079 -> 1072;
1080 -> 1074;
1080 -> 1054;
1080 -> 1072;
1081 -> 1073;
1081 -> 1054;
1081 -> 1080;
1081 -> 1072;
1082 -> 1072;
1083 -> 1081;
1083 -> 1082;
1083 -> 1072;
1084 -> 1074;
1084 -> 1054;
1084 -> 1072;
1085 -> 1073;
1085 -> 1054;
1085 -> 1084;
1085 -> 1072;
1086 -> 1085;
1087 -> 1034;
1088 -> 1087;
1088 -> 1034;
1089 -> 1034;
1090 -> 1034;
1091 -> 1087;
1091 -> 1090;
1091 -> 1088;
1091 -> 1034;
1092 -> 1034;
1093 -> 1035;
1093 -> 1034;
1094 -> 1093;
1094 -> 1054;
1094 -> 1034;
1095 -> 1094;
1096 -> 1046;
1096 -> 1094;
1097 -> 1094;
1098 -> 1095;
1098 -> 1097;
1099 -> 1096;
1099 -> 1097;
1100 -> 1097;
1101 -> 1100;
1101 -> 1099;
1101 -> 1097;
1102 -> 1097;
1103 -> 1098;
1103 -> 1102;
1104 -> 1102;
1105 -> 1102;
1106 -> 1104;
1106 -> 1105;
1106 -> 1102;
1107 -> 1102;
1108 -> 1103;
1108 -> 1054;
1108 -> 1107;
1108 -> 1102;
1109 -> 1103;
1109 -> 1054;
1109 -> 1108;
1110 -> 1104;
1110 -> 1109;
1110 -> 1106;
1110 -> 1108;
1111 -> 1108;
1112 -> 1104;
1112 -> 1111;
1112 -> 1110;
1112 -> 1108;
1113 -> 1103;
1113 -> 1054;
1113 -> 1108;
1114 -> 1104;
1114 -> 1113;
1114 -> 1112;
1114 -> 1108;
1115 -> 1102;
1116 -> 1103;
1116 -> 1054;
1116 -> 1115;
1116 -> 1102;
1117 -> 1116;
1118 -> 1117;
1119 -> 1104;
1119 -> 1118;
1119 -> 1114;
1119 -> 1117;
1120 -> 1103;
1120 -> 1054;
1120 -> 1117;
1121 -> 1104;
1121 -> 1120;
1121 -> 1119;
1121 -> 1117;
1122 -> 1116;
1123 -> 1104;
1123 -> 1122;
1123 -> 1121;
1123 -> 1116;
1124 -> 1103;
1124 -> 1054;
1124 -> 1102;
1125 -> 1102;
1126 -> 1104;
1126 -> 1125;
1126 -> 1123;
1126 -> 1102;
1127 -> 1102;
1128 -> 1103;
1128 -> 1054;
1128 -> 1127;
1128 -> 1102;
1129 -> 1128;
1130 -> 1104;
1130 -> 1129;
1130 -> 1126;
1130 -> 1128;
1131 -> 1128;
1132 -> 1131;
1132 -> 1128;
1133 -> 1128;
1134 -> 1132;
1134 -> 1128;
1135 -> 1134;
1136 -> 1104;
1136 -> 1135;
1136 -> 1130;
1136 -> 1134;
1137 -> 1132;
1137 -> 1134;
1138 -> 1104;
1138 -> 1137;
1138 -> 1136;
1138 -> 1134;
1139 -> 1134;
1140 -> 1104;
1140 -> 1139;
1140 -> 1138;
1140 -> 1134;
1141 -> 1134;
1142 -> 1141;
1143 -> 1104;
1143 -> 1142;
1143 -> 1140;
1143 -> 1141;
1144 -> 1128;
1145 -> 1104;
1145 -> 1144;
1145 -> 1143;
1145 -> 1128;
1146 -> 1102;
1147 -> 1103;
1147 -> 1134;
1147 -> 1146;
1147 -> 1102;
1148 -> 1147;
1149 -> 1104;
1149 -> 1148;
1149 -> 1145;
1149 -> 1147;
1150 -> 1147;
1151 -> 1104;
1151 -> 1150;
1151 -> 1149;
1151 -> 1147;
1152 -> 1147;
1153 -> 1104;
1153 -> 1152;
1153 -> 1151;
1153 -> 1147;
1154 -> 1147;
1155 -> 1104;
1155 -> 1154;
1155 -> 1153;
1155 -> 1147;
1156 -> 1147;
1157 -> 1104;
1157 -> 1156;
1157 -> 1155;
1157 -> 1147;
1158 -> 1103;
1158 -> 1134;
1158 -> 1102;
1159 -> 1102;
1160 -> 1103;
1160 -> 1134;
1160 -> 1159;
1160 -> 1102;
1161 -> 1102;
1162 -> 1103;
1162 -> 1134;
1162 -> 1161;
1162 -> 1102;
1163 -> 1102;
1164 -> 1103;
1164 -> 1134;
1164 -> 1163;
1164 -> 1102;
1165 -> 1104;
1165 -> 1157;
1165 -> 1102;
1166 -> 1165;
1166 -> 1097;
1167 -> 1101;
1167 -> 1166;
1167 -> 1097;
1168 -> 1092;
1168 -> 1167;
1168 -> 1094;
1169 -> 1046;
1169 -> 1134;
1170 -> 1169;
1170 -> 1134;
1171 -> 1134;
1172 -> 1171;
1172 -> 1170;
1172 -> 1134;
1173 -> 1134;
1174 -> 1134;
1175 -> 1173;
1175 -> 1174;
1175 -> 1134;
1176 -> 1134;
1177 -> 1134;
1177 -> 1176;
1178 -> 1173;
1178 -> 1177;
1178 -> 1175;
1178 -> 1176;
1179 -> 1176;
1180 -> 1173;
1180 -> 1179;
1180 -> 1178;
1180 -> 1176;
1181 -> 1134;
1181 -> 1176;
1182 -> 1173;
1182 -> 1181;
1182 -> 1180;
1182 -> 1176;
1183 -> 1134;
1184 -> 1183;
1185 -> 1184;
1186 -> 1173;
1186 -> 1185;
1186 -> 1182;
1186 -> 1184;
1187 -> 1134;
1187 -> 1184;
1188 -> 1173;
1188 -> 1187;
1188 -> 1186;
1188 -> 1184;
1189 -> 1183;
1190 -> 1173;
1190 -> 1189;
1190 -> 1188;
1190 -> 1183;
1191 -> 1134;
1192 -> 1134;
1193 -> 1173;
1193 -> 1192;
1193 -> 1190;
1193 -> 1134;
1194 -> 1134;
1195 -> 1194;
1196 -> 1173;
1196 -> 1195;
1196 -> 1193;
1196 -> 1194;
1197 -> 1194;
1198 -> 1173;
1198 -> 1197;
1198 -> 1196;
1198 -> 1194;
1199 -> 1194;
1200 -> 1173;
1200 -> 1199;
1200 -> 1198;
1200 -> 1194;
1201 -> 1194;
1202 -> 1173;
1202 -> 1201;
1202 -> 1200;
1202 -> 1194;
1203 -> 1194;
1204 -> 1173;
1204 -> 1203;
1204 -> 1202;
1204 -> 1194;
1205 -> 1134;
1206 -> 1134;
1207 -> 1134;
1208 -> 1134;
1209 -> 1173;
1209 -> 1204;
1209 -> 1134;
1210 -> 1209;
1210 -> 1134;
1211 -> 1172;
1211 -> 1210;
1211 -> 1134;
1212 -> 1087;
1212 -> 1034;
1213 -> 1092;
1213 -> 1034;
1214 -> 1034;
1215 -> 1212;
1215 -> 1214;
1216 -> 1213;
1216 -> 1214;
1217 -> 1216;
1217 -> 1168;
1217 -> 1214;
1218 -> 1214;
1219 -> 1218;
1219 -> 1217;
1219 -> 1214;
1220 -> 1216;
1220 -> 1218;
1220 -> 1168;
1220 -> 1219;
1221 -> 1215;
1221 -> 1220;
1221 -> 1091;
1221 -> 1219;
1222 -> 1219;
1223 -> 1222;
1224 -> 1215;
1224 -> 1223;
1224 -> 1221;
1224 -> 1222;
1225 -> 1215;
1225 -> 1224;
1225 -> 1219;
1226 -> 1034;
1227 -> 1034;
1228 -> 1087;
1228 -> 1227;
1228 -> 1225;
1228 -> 1034;
1229 -> 1034;
1230 -> 1036;
1230 -> 1134;
1230 -> 1034;
1231 -> 1034;
1232 -> 1230;
1232 -> 1034;
1233 -> 1230;
1233 -> 1232;
1234 -> 1233;
1234 -> 1232;
1235 -> 1234;
1235 -> 1232;
1236 -> 1232;
1237 -> 1232;
1238 -> 1044;
1238 -> 1232;
1239 -> 1087;
1239 -> 1238;
1240 -> 1046;
1240 -> 1238;
1241 -> 1238;
1242 -> 1239;
1242 -> 1241;
1243 -> 1240;
1243 -> 1241;
1244 -> 1241;
1245 -> 1244;
1245 -> 1243;
1245 -> 1241;
1246 -> 1242;
1246 -> 1244;
1246 -> 1245;
1246 -> 1228;
1246 -> 1241;
1247 -> 1238;
1248 -> 1238;
1249 -> 1087;
1249 -> 1248;
1249 -> 1246;
1249 -> 1238;
1250 -> 1233;
1250 -> 1234;
1250 -> 1238;
1251 -> 1087;
1251 -> 1250;
1251 -> 1249;
1251 -> 1238;
1252 -> 1233;
1252 -> 1250;
1252 -> 1238;
1253 -> 1252;
1253 -> 1250;
1253 -> 1238;
1254 -> 1087;
1254 -> 1253;
1255 -> 1046;
1255 -> 1253;
1256 -> 1253;
1257 -> 1254;
1257 -> 1256;
1258 -> 1255;
1258 -> 1256;
1259 -> 1256;
1260 -> 1259;
1260 -> 1258;
1260 -> 1256;
1261 -> 1257;
1261 -> 1259;
1261 -> 1260;
1261 -> 1251;
1261 -> 1256;
1262 -> 1253;
1263 -> 1253;
1264 -> 1087;
1264 -> 1263;
1264 -> 1261;
1264 -> 1253;
1265 -> 1253;
1266 -> 1087;
1266 -> 1265;
1266 -> 1264;
1266 -> 1253;
1267 -> 1233;
1267 -> 1232;
1268 -> 1232;
1269 -> 1048;
1269 -> 1232;
1270 -> 1052;
1270 -> 1232;
1271 -> 1232;
1272 -> 1267;
1272 -> 1271;
1273 -> 1268;
1273 -> 1271;
1274 -> 1269;
1274 -> 1271;
1275 -> 1270;
1275 -> 1271;
1276 -> 1268;
1276 -> 1271;
1277 -> 1276;
1277 -> 1271;
1278 -> 1276;
1278 -> 1271;
1279 -> 1276;
1279 -> 1271;
1280 -> 1276;
1280 -> 1271;
1281 -> 1276;
1281 -> 1271;
1282 -> 1276;
1282 -> 1271;
1283 -> 1276;
1283 -> 1271;
1284 -> 1276;
1284 -> 1271;
1285 -> 1276;
1285 -> 1271;
1286 -> 1272;
1286 -> 1265;
1286 -> 1276;
1286 -> 1271;
1287 -> 1272;
1287 -> 1265;
1287 -> 1276;
1287 -> 1271;
1288 -> 1272;
1288 -> 1265;
1288 -> 1276;
1288 -> 1271;
1289 -> 1272;
1289 -> 1265;
1289 -> 1276;
1289 -> 1271;
1290 -> 1271;
1291 -> 1272;
1291 -> 1265;
1291 -> 1271;
1292 -> 1268;
1292 -> 1232;
1293 -> 1035;
1293 -> 1232;
1294 -> 1268;
1294 -> 1232;
1295 -> 1293;
1295 -> 1294;
1295 -> 1289;
1295 -> 1291;
1295 -> 1287;
1295 -> 1288;
1295 -> 1276;
1295 -> 1273;
1295 -> 1274;
1295 -> 1275;
1295 -> 1232;
1296 -> 1232;
1297 -> 1296;
1298 -> 1295;
1298 -> 1297;
1298 -> 1296;
1299 -> 1295;
1299 -> 1296;
1300 -> 1295;
1300 -> 1296;
1301 -> 1295;
1301 -> 1296;
1302 -> 1295;
1302 -> 1301;
1303 -> 1296;
1304 -> 1295;
1304 -> 1303;
1304 -> 1296;
1305 -> 1304;
1306 -> 1295;
1306 -> 1305;
1307 -> 1296;
1308 -> 1295;
1308 -> 1307;
1308 -> 1296;
1309 -> 1296;
1310 -> 1295;
1310 -> 1309;
1310 -> 1296;
1311 -> 1295;
1311 -> 1296;
1312 -> 1295;
1313 -> 1295;
1313 -> 1296;
1314 -> 1232;
1315 -> 1295;
1315 -> 1314;
1315 -> 1232;
1316 -> 1035;
1316 -> 1295;
1316 -> 1315;
1317 -> 1268;
1317 -> 1232;
1318 -> 1046;
1318 -> 1232;
1319 -> 1232;
1320 -> 1317;
1320 -> 1319;
1321 -> 1318;
1321 -> 1319;
1322 -> 1319;
1323 -> 1322;
1323 -> 1321;
1323 -> 1319;
1324 -> 1319;
1325 -> 1319;
1326 -> 1324;
1326 -> 1325;
1326 -> 1319;
1327 -> 1319;
1328 -> 1320;
1328 -> 1295;
1328 -> 1327;
1328 -> 1319;
1329 -> 1320;
1329 -> 1295;
1329 -> 1328;
1330 -> 1324;
1330 -> 1329;
1330 -> 1326;
1330 -> 1328;
1331 -> 1328;
1332 -> 1324;
1332 -> 1331;
1332 -> 1330;
1332 -> 1328;
1333 -> 1320;
1333 -> 1295;
1333 -> 1328;
1334 -> 1324;
1334 -> 1333;
1334 -> 1332;
1334 -> 1328;
1335 -> 1319;
1336 -> 1320;
1336 -> 1295;
1336 -> 1335;
1336 -> 1319;
1337 -> 1336;
1338 -> 1337;
1339 -> 1324;
1339 -> 1338;
1339 -> 1334;
1339 -> 1337;
1340 -> 1320;
1340 -> 1295;
1340 -> 1337;
1341 -> 1324;
1341 -> 1340;
1341 -> 1339;
1341 -> 1337;
1342 -> 1336;
1343 -> 1324;
1343 -> 1342;
1343 -> 1341;
1343 -> 1336;
1344 -> 1320;
1344 -> 1295;
1344 -> 1319;
1345 -> 1319;
1346 -> 1324;
1346 -> 1345;
1346 -> 1343;
1346 -> 1319;
1347 -> 1320;
1347 -> 1295;
1347 -> 1319;
1348 -> 1347;
1349 -> 1324;
1349 -> 1348;
1349 -> 1346;
1349 -> 1347;
1350 -> 1347;
1351 -> 1324;
1351 -> 1350;
1351 -> 1349;
1351 -> 1347;
1352 -> 1347;
1353 -> 1324;
1353 -> 1352;
1353 -> 1351;
1353 -> 1347;
1354 -> 1347;
1355 -> 1324;
1355 -> 1354;
1355 -> 1353;
1355 -> 1347;
1356 -> 1347;
1357 -> 1356;
1358 -> 1324;
1358 -> 1357;
1358 -> 1355;
1358 -> 1356;
1359 -> 1347;
1360 -> 1324;
1360 -> 1359;
1360 -> 1358;
1360 -> 1347;
1361 -> 1319;
1362 -> 1320;
1362 -> 1347;
1362 -> 1361;
1362 -> 1319;
1363 -> 1362;
1364 -> 1324;
1364 -> 1363;
1364 -> 1360;
1364 -> 1362;
1365 -> 1362;
1366 -> 1324;
1366 -> 1365;
1366 -> 1364;
1366 -> 1362;
1367 -> 1362;
1368 -> 1324;
1368 -> 1367;
1368 -> 1366;
1368 -> 1362;
1369 -> 1362;
1370 -> 1324;
1370 -> 1369;
1370 -> 1368;
1370 -> 1362;
1371 -> 1362;
1372 -> 1324;
1372 -> 1371;
1372 -> 1370;
1372 -> 1362;
1373 -> 1320;
1373 -> 1347;
1373 -> 1319;
1374 -> 1319;
1375 -> 1320;
1375 -> 1347;
1375 -> 1374;
1375 -> 1319;
1376 -> 1319;
1377 -> 1320;
1377 -> 1347;
1377 -> 1376;
1377 -> 1319;
1378 -> 1319;
1379 -> 1320;
1379 -> 1347;
1379 -> 1378;
1379 -> 1319;
1380 -> 1324;
1380 -> 1372;
1380 -> 1319;
1381 -> 1380;
1381 -> 1319;
1382 -> 1323;
1382 -> 1381;
1382 -> 1319;
1383 -> 1087;
1383 -> 1382;
1383 -> 1266;
1383 -> 1232;
1384 -> 1316;
1384 -> 1232;
1385 -> 1046;
1385 -> 1232;
1386 -> 1232;
1387 -> 1384;
1387 -> 1386;
1388 -> 1385;
1388 -> 1386;
1389 -> 1386;
1390 -> 1389;
1390 -> 1388;
1390 -> 1386;
1391 -> 1386;
1392 -> 1386;
1393 -> 1391;
1393 -> 1392;
1393 -> 1386;
1394 -> 1386;
1395 -> 1387;
1395 -> 1347;
1395 -> 1394;
1395 -> 1386;
1396 -> 1387;
1396 -> 1347;
1396 -> 1395;
1397 -> 1391;
1397 -> 1396;
1397 -> 1393;
1397 -> 1395;
1398 -> 1395;
1399 -> 1391;
1399 -> 1398;
1399 -> 1397;
1399 -> 1395;
1400 -> 1387;
1400 -> 1347;
1400 -> 1395;
1401 -> 1391;
1401 -> 1400;
1401 -> 1399;
1401 -> 1395;
1402 -> 1386;
1403 -> 1387;
1403 -> 1347;
1403 -> 1402;
1403 -> 1386;
1404 -> 1403;
1405 -> 1404;
1406 -> 1391;
1406 -> 1405;
1406 -> 1401;
1406 -> 1404;
1407 -> 1387;
1407 -> 1347;
1407 -> 1404;
1408 -> 1391;
1408 -> 1407;
1408 -> 1406;
1408 -> 1404;
1409 -> 1403;
1410 -> 1391;
1410 -> 1409;
1410 -> 1408;
1410 -> 1403;
1411 -> 1387;
1411 -> 1347;
1411 -> 1386;
1412 -> 1386;
1413 -> 1391;
1413 -> 1412;
1413 -> 1410;
1413 -> 1386;
1414 -> 1387;
1414 -> 1347;
1414 -> 1386;
1415 -> 1414;
1416 -> 1391;
1416 -> 1415;
1416 -> 1413;
1416 -> 1414;
1417 -> 1414;
1418 -> 1391;
1418 -> 1417;
1418 -> 1416;
1418 -> 1414;
1419 -> 1414;
1420 -> 1391;
1420 -> 1419;
1420 -> 1418;
1420 -> 1414;
1421 -> 1414;
1422 -> 1391;
1422 -> 1421;
1422 -> 1420;
1422 -> 1414;
1423 -> 1414;
1424 -> 1423;
1425 -> 1391;
1425 -> 1424;
1425 -> 1422;
1425 -> 1423;
1426 -> 1414;
1427 -> 1391;
1427 -> 1426;
1427 -> 1425;
1427 -> 1414;
1428 -> 1386;
1429 -> 1387;
1429 -> 1414;
1429 -> 1428;
1429 -> 1386;
1430 -> 1429;
1431 -> 1391;
1431 -> 1430;
1431 -> 1427;
1431 -> 1429;
1432 -> 1429;
1433 -> 1391;
1433 -> 1432;
1433 -> 1431;
1433 -> 1429;
1434 -> 1429;
1435 -> 1391;
1435 -> 1434;
1435 -> 1433;
1435 -> 1429;
1436 -> 1429;
1437 -> 1391;
1437 -> 1436;
1437 -> 1435;
1437 -> 1429;
1438 -> 1429;
1439 -> 1391;
1439 -> 1438;
1439 -> 1437;
1439 -> 1429;
1440 -> 1387;
1440 -> 1414;
1440 -> 1386;
1441 -> 1386;
1442 -> 1387;
1442 -> 1414;
1442 -> 1441;
1442 -> 1386;
1443 -> 1386;
1444 -> 1387;
1444 -> 1414;
1444 -> 1443;
1444 -> 1386;
1445 -> 1386;
1446 -> 1387;
1446 -> 1414;
1446 -> 1445;
1446 -> 1386;
1447 -> 1391;
1447 -> 1439;
1447 -> 1386;
1448 -> 1447;
1448 -> 1386;
1449 -> 1390;
1449 -> 1448;
1449 -> 1386;
1450 -> 1229;
1450 -> 1449;
1450 -> 1232;
1451 -> 1414;
1452 -> 1414;
1453 -> 1452;
1454 -> 1087;
1454 -> 1453;
1454 -> 1383;
1454 -> 1452;
1455 -> 1087;
1455 -> 1414;
1456 -> 1046;
1456 -> 1414;
1457 -> 1414;
1458 -> 1455;
1458 -> 1457;
1459 -> 1456;
1459 -> 1457;
1460 -> 1457;
1461 -> 1460;
1461 -> 1459;
1461 -> 1457;
1462 -> 1414;
1463 -> 1414;
1464 -> 1087;
1464 -> 1414;
1465 -> 1046;
1465 -> 1414;
1466 -> 1414;
1467 -> 1464;
1467 -> 1466;
1468 -> 1465;
1468 -> 1466;
1469 -> 1466;
1470 -> 1469;
1470 -> 1468;
1470 -> 1466;
1471 -> 1414;
1472 -> 1414;
1473 -> 1414;
1474 -> 1414;
1475 -> 1414;
1476 -> 1414;
1477 -> 1414;
1478 -> 1414;
1479 -> 1414;
1480 -> 1414;
1481 -> 1414;
1482 -> 1414;
1483 -> 1414;
1484 -> 1414;
1485 -> 1414;
1486 -> 1414;
1487 -> 1486;
1488 -> 1486;
1489 -> 1486;
1490 -> 1486;
1491 -> 1486;
1491 -> 1490;
1492 -> 1486;
1493 -> 1492;
1494 -> 1486;
1494 -> 1493;
1495 -> 1486;
1496 -> 1486;
1497 -> 1486;
1498 -> 1486;
1499 -> 1486;
1500 -> 1046;
1500 -> 1414;
1501 -> 1500;
1501 -> 1414;
1502 -> 1414;
1503 -> 1502;
1503 -> 1501;
1503 -> 1414;
1504 -> 1414;
1505 -> 1414;
1506 -> 1504;
1506 -> 1505;
1506 -> 1414;
1507 -> 1414;
1508 -> 1414;
1508 -> 1486;
1508 -> 1507;
1509 -> 1414;
1509 -> 1486;
1509 -> 1508;
1510 -> 1504;
1510 -> 1509;
1510 -> 1506;
1510 -> 1508;
1511 -> 1508;
1512 -> 1504;
1512 -> 1511;
1512 -> 1510;
1512 -> 1508;
1513 -> 1414;
1513 -> 1486;
1513 -> 1508;
1514 -> 1504;
1514 -> 1513;
1514 -> 1512;
1514 -> 1508;
1515 -> 1414;
1516 -> 1414;
1516 -> 1486;
1516 -> 1515;
1517 -> 1516;
1518 -> 1517;
1519 -> 1504;
1519 -> 1518;
1519 -> 1514;
1519 -> 1517;
1520 -> 1414;
1520 -> 1486;
1520 -> 1517;
1521 -> 1504;
1521 -> 1520;
1521 -> 1519;
1521 -> 1517;
1522 -> 1516;
1523 -> 1504;
1523 -> 1522;
1523 -> 1521;
1523 -> 1516;
1524 -> 1414;
1524 -> 1486;
1525 -> 1414;
1526 -> 1504;
1526 -> 1525;
1526 -> 1523;
1526 -> 1414;
1527 -> 1414;
1528 -> 1414;
1528 -> 1486;
1528 -> 1527;
1529 -> 1528;
1530 -> 1504;
1530 -> 1529;
1530 -> 1526;
1530 -> 1528;
1531 -> 1528;
1532 -> 1504;
1532 -> 1531;
1532 -> 1530;
1532 -> 1528;
1533 -> 1528;
1534 -> 1504;
1534 -> 1533;
1534 -> 1532;
1534 -> 1528;
1535 -> 1528;
1536 -> 1504;
1536 -> 1535;
1536 -> 1534;
1536 -> 1528;
1537 -> 1528;
1538 -> 1504;
1538 -> 1537;
1538 -> 1536;
1538 -> 1528;
1539 -> 1414;
1539 -> 1486;
1540 -> 1414;
1541 -> 1414;
1541 -> 1486;
1541 -> 1540;
1542 -> 1414;
1543 -> 1414;
1543 -> 1486;
1543 -> 1542;
1544 -> 1414;
1545 -> 1414;
1545 -> 1486;
1545 -> 1544;
1546 -> 1504;
1546 -> 1538;
1546 -> 1414;
1547 -> 1546;
1547 -> 1414;
1548 -> 1503;
1548 -> 1547;
1548 -> 1414;
1549 -> 1087;
1549 -> 1548;
1549 -> 1454;
1549 -> 1414;
1550 -> 1046;
1550 -> 1414;
1551 -> 1550;
1551 -> 1414;
1552 -> 1502;
1552 -> 1551;
1552 -> 1414;
1553 -> 1486;
1553 -> 1508;
1554 -> 1504;
1554 -> 1553;
1554 -> 1506;
1554 -> 1508;
1555 -> 1504;
1555 -> 1511;
1555 -> 1554;
1555 -> 1508;
1556 -> 1486;
1556 -> 1508;
1557 -> 1504;
1557 -> 1556;
1557 -> 1555;
1557 -> 1508;
1558 -> 1504;
1558 -> 1518;
1558 -> 1557;
1558 -> 1517;
1559 -> 1486;
1559 -> 1517;
1560 -> 1504;
1560 -> 1559;
1560 -> 1558;
1560 -> 1517;
1561 -> 1504;
1561 -> 1522;
1561 -> 1560;
1561 -> 1516;
1562 -> 1504;
1562 -> 1525;
1562 -> 1561;
1562 -> 1414;
1563 -> 1504;
1563 -> 1529;
1563 -> 1562;
1563 -> 1528;
1564 -> 1504;
1564 -> 1531;
1564 -> 1563;
1564 -> 1528;
1565 -> 1504;
1565 -> 1533;
1565 -> 1564;
1565 -> 1528;
1566 -> 1504;
1566 -> 1535;
1566 -> 1565;
1566 -> 1528;
1567 -> 1504;
1567 -> 1537;
1567 -> 1566;
1567 -> 1528;
1568 -> 1504;
1568 -> 1567;
1568 -> 1414;
1569 -> 1568;
1569 -> 1414;
1570 -> 1552;
1570 -> 1569;
1570 -> 1414;
1571 -> 1229;
1571 -> 1570;
1571 -> 1450;
1571 -> 1414;
1572 -> 1034;
1573 -> 1414;
1573 -> 1572;
1573 -> 1034;
1574 -> 1087;
1574 -> 1549;
1574 -> 1573;
1575 -> 1034;
1576 -> 1087;
1576 -> 1575;
1576 -> 1574;
1576 -> 1034;
1577 -> 1092;
1577 -> 1034;
1578 -> 1229;
1578 -> 1034;
1582 -> 1580;
1582 -> 1579;
1583 -> 1581;
1583 -> 1579;
1584 -> 1579;
1585 -> 0;
1585 -> 1034;
1586 -> 1034;
1587 -> 1034;
1588 -> 1577;
1588 -> 1587;
1589 -> 1578;
1589 -> 1587;
1590 -> 1585;
1590 -> 1587;
1591 -> 1586;
1591 -> 1587;
1592 -> 1586;
1592 -> 1587;
1593 -> 1587;
1594 -> 1591;
1594 -> 1593;
1594 -> 1587;
1595 -> 1594;
1595 -> 1587;
1596 -> 0;
1598 -> 1596;
1598 -> 1597;
1599 -> 1597;
1601 -> 1600;
1603 -> 1602;
1605 -> 1604;
1606 -> 1599;
1607 -> 1599;
1607 -> 1597;
1608 -> 1598;
1608 -> 1599;
1608 -> 1597;
1609 -> 1597;
1610 -> 1587;
1611 -> 1610;
1611 -> 1592;
1611 -> 1587;
1612 -> 1588;
1612 -> 1587;
1613 -> 1589;
1613 -> 1587;
1614 -> 1590;
1614 -> 1587;
1615 -> 1612;
1615 -> 1587;
1616 -> 1613;
1616 -> 1587;
1617 -> 1611;
1617 -> 1587;
1618 -> 1587;
1619 -> 1615;
1619 -> 1618;
1620 -> 1616;
1620 -> 1618;
1621 -> 1617;
1621 -> 1618;
1622 -> 1595;
1622 -> 1618;
1623 -> 1619;
1623 -> 1618;
1624 -> 1619;
1624 -> 1612;
1624 -> 1618;
1625 -> 1620;
1625 -> 1618;
1626 -> 1620;
1626 -> 1613;
1626 -> 1618;
1627 -> 1618;
1628 -> 1623;
1628 -> 1627;
1629 -> 1624;
1629 -> 1627;
1630 -> 1625;
1630 -> 1627;
1631 -> 1626;
1631 -> 1627;
1632 -> 1622;
1632 -> 1627;
1633 -> 1628;
1633 -> 1627;
1634 -> 1629;
1634 -> 1627;
1635 -> 1630;
1635 -> 1627;
1636 -> 1631;
1636 -> 1627;
1637 -> 1627;
1638 -> 1633;
1638 -> 1637;
1639 -> 1634;
1639 -> 1637;
1640 -> 1635;
1640 -> 1637;
1641 -> 1636;
1641 -> 1637;
1642 -> 1632;
1642 -> 1637;
1643 -> 1637;
1644 -> 1639;
1644 -> 1643;
1644 -> 1637;
1645 -> 1637;
1646 -> 1641;
1646 -> 1645;
1646 -> 1637;
1647 -> 1644;
1647 -> 1646;
1647 -> 1637;
1648 -> 1637;
1649 -> 1648;
1649 -> 1647;
1649 -> 1637;
1650 -> 1637;
1651 -> 1650;
1651 -> 1639;
1651 -> 1637;
1652 -> 1651;
1653 -> 1647;
1653 -> 1649;
1653 -> 1652;
1653 -> 1651;
1654 -> 1653;
1654 -> 1650;
1654 -> 1652;
1654 -> 1647;
1654 -> 1651;
1655 -> 1637;
1656 -> 1655;
1656 -> 1641;
1656 -> 1637;
1657 -> 1656;
1658 -> 1647;
1658 -> 1649;
1658 -> 1654;
1658 -> 1657;
1658 -> 1656;
1659 -> 1658;
1659 -> 1657;
1659 -> 1655;
1659 -> 1647;
1659 -> 1656;
1660 -> 1637;
1661 -> 1660;
1661 -> 1639;
1661 -> 1637;
1662 -> 1661;
1663 -> 1662;
1663 -> 1641;
1663 -> 1661;
1664 -> 1663;
1665 -> 1647;
1665 -> 1649;
1665 -> 1654;
1665 -> 1659;
1665 -> 1664;
1665 -> 1663;
1666 -> 1638;
1666 -> 1663;
1667 -> 1640;
1667 -> 1663;
1668 -> 1663;
1669 -> 1666;
1669 -> 1668;
1670 -> 1664;
1670 -> 1668;
1671 -> 1667;
1671 -> 1668;
1672 -> 1664;
1672 -> 1668;
1673 -> 1642;
1673 -> 1668;
1674 -> 1669;
1674 -> 1612;
1674 -> 1670;
1674 -> 1668;
1675 -> 1671;
1675 -> 1613;
1675 -> 1672;
1675 -> 1668;
1676 -> 1673;
1676 -> 0;
1676 -> 1674;
1676 -> 1675;
1676 -> 1612;
1676 -> 1613;
1676 -> 1668;
1677 -> 1665;
1677 -> 1676;
1677 -> 1663;
1678 -> 1663;
1679 -> 1647;
1679 -> 1649;
1679 -> 1654;
1679 -> 1659;
1679 -> 1678;
1679 -> 1662;
1679 -> 1663;
1680 -> 1663;
1681 -> 1647;
1681 -> 1649;
1681 -> 1654;
1681 -> 1659;
1681 -> 1660;
1681 -> 1680;
1681 -> 1663;
1682 -> 1677;
1682 -> 1663;
1683 -> 1679;
1683 -> 1663;
1684 -> 1682;
1684 -> 1683;
1684 -> 1663;
1685 -> 1681;
1685 -> 1663;
1686 -> 1684;
1686 -> 1685;
1686 -> 1663;
1687 -> 1686;
1687 -> 1660;
1687 -> 1662;
1687 -> 1647;
1687 -> 1663;
1688 -> 1647;
1688 -> 1637;
1689 -> 1629;
1689 -> 1627;
1690 -> 1631;
1690 -> 1627;
1691 -> 1627;
1692 -> 1689;
1692 -> 1691;
1692 -> 1627;
1693 -> 1690;
1693 -> 1691;
1693 -> 1627;
1694 -> 1692;
1694 -> 1693;
1694 -> 1627;
1695 -> 1688;
1695 -> 1647;
1695 -> 1649;
1695 -> 1654;
1695 -> 1659;
1695 -> 1687;
1695 -> 1689;
1695 -> 1690;
1695 -> 1694;
1696 -> 1694;
1697 -> 1688;
1697 -> 1647;
1697 -> 1649;
1697 -> 1654;
1697 -> 1659;
1697 -> 1687;
1697 -> 1696;
1697 -> 1690;
1697 -> 1694;
1698 -> 1688;
1698 -> 1647;
1698 -> 1649;
1698 -> 1654;
1698 -> 1659;
1698 -> 1687;
1698 -> 1689;
1698 -> 1690;
1698 -> 1697;
1699 -> 1697;
1700 -> 1689;
1700 -> 1699;
1701 -> 1690;
1701 -> 1699;
1702 -> 1699;
1703 -> 0;
1703 -> 1699;
1704 -> 1700;
1704 -> 1699;
1705 -> 1701;
1705 -> 1699;
1706 -> 1699;
1707 -> 1703;
1707 -> 1706;
1708 -> 1704;
1708 -> 1706;
1709 -> 1705;
1709 -> 1706;
1710 -> 1702;
1710 -> 1706;
1711 -> 1707;
1711 -> 1710;
1711 -> 1706;
1712 -> 1708;
1712 -> 1710;
1712 -> 1706;
1713 -> 1709;
1713 -> 1710;
1713 -> 1706;
1714 -> 1700;
1714 -> 1701;
1714 -> 1627;
1715 -> 0;
1715 -> 1714;
1716 -> 1714;
1717 -> 1714;
1718 -> 1715;
1718 -> 1717;
1719 -> 1716;
1719 -> 1717;
1720 -> 1716;
1720 -> 1717;
1721 -> 1716;
1721 -> 1717;
1722 -> 1718;
1722 -> 1721;
1722 -> 1717;
1723 -> 1719;
1723 -> 1721;
1723 -> 1717;
1724 -> 1720;
1724 -> 1721;
1724 -> 1717;
1725 -> 1627;
1726 -> 1714;
1726 -> 1725;
1726 -> 1627;
1727 -> 1627;
1728 -> 1714;
1728 -> 1727;
1728 -> 1627;
1729 -> 1702;
1729 -> 1716;
1729 -> 1711;
1729 -> 1712;
1729 -> 1713;
1729 -> 1722;
1729 -> 1723;
1729 -> 1724;
1729 -> 1618;
1730 -> 1729;
1731 -> 1730;
1732 -> 1620;
1732 -> 1613;
1732 -> 1676;
1732 -> 1729;
1732 -> 1730;
1733 -> 1621;
1733 -> 1732;
1733 -> 1610;
1733 -> 1730;
1734 -> 1614;
1734 -> 1731;
1734 -> 1587;
1735 -> 1087;
1735 -> 1734;
1735 -> 1576;
1735 -> 1034;
1736 -> 1229;
1736 -> 1571;
1736 -> 1034;
1737 -> 1092;
1737 -> 1220;
1737 -> 1034;
1738 -> 1087;
1738 -> 1735;
1738 -> 1034;
1739 -> 877;
1740 -> 870;
1741 -> 871;
1741 -> 870;
1742 -> 874;
1742 -> 870;
1743 -> 870;
1744 -> 1741;
1744 -> 1743;
1745 -> 1742;
1745 -> 1743;
1746 -> 1745;
1746 -> 1743;
1747 -> 1746;
1747 -> 874;
1747 -> 1486;
1748 -> 1744;
1748 -> 1747;
1748 -> 1486;
1748 -> 1746;
1749 -> 1746;
1749 -> 1748;
1750 -> 1749;
1750 -> 1748;
1751 -> 1749;
1752 -> 870;
1753 -> 871;
1753 -> 870;
}