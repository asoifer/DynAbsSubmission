digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 733315"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 733316"];
3 [label="param BindingTests(this) 733317"];
4 [label="'C' 733318"];
5 [label="DefaultTypeName = 'C' 733319"];
6 [label="'M' 733320"];
7 [label="DefaultMethodName = 'M' 733321"];
8 [label="@'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 733322"];
9 [label="LINQ =\n        #region the string LINQ defines a complete LINQ API called List1<T> (for instance method) and List2<T> (for extension methods)\n @'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 733323"];
10 [label="param CompilingTestBase(this) 733324"];
11 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 733325"];
12 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 733326"];
13 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 733327"];
14 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 733328"];
15 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 733329"];
16 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 733330"];
17 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 733331"];
18 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 733332"];
19 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 733333"];
20 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 733334"];
21 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 733335"];
22 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 733336"];
23 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 733337"];
24 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 733338"];
25 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 733339"];
26 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 733340"];
27 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 733341"];
28 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 733342"];
29 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 733343"];
30 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 733344"];
31 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 733345"];
32 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 733346"];
33 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 733347"];
34 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 733348"];
35 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 733349"];
36 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 733350"];
37 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 733351"];
38 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 733352"];
39 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 733353"];
40 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 733354"];
41 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 733355"];
42 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 733356"];
43 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 733357"];
44 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 733358"];
45 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 733359"];
46 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 733360"];
47 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 733361"];
48 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 733362"];
49 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 733363"];
50 [label="LazyThreadSafetyMode.PublicationOnly 733364"];
51 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 733365"];
52 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 733366"];
53 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 733367"];
54 [label="LazyThreadSafetyMode.PublicationOnly 733368"];
55 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 733369"];
56 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 733370"];
57 [label="RuntimeUtilities.IsCoreClrRuntime 733371"];
58 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 733372"];
59 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 733373"];
60 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 733374"];
61 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 733375"];
62 [label="LazyThreadSafetyMode.PublicationOnly 733376"];
63 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 733377"];
64 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 733378"];
65 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 733379"];
66 [label="LazyThreadSafetyMode.PublicationOnly 733380"];
67 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 733381"];
68 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 733382"];
69 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 733383"];
70 [label="LazyThreadSafetyMode.PublicationOnly 733384"];
71 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 733385"];
72 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 733386"];
73 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 733387"];
74 [label="LazyThreadSafetyMode.PublicationOnly 733388"];
75 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733389"];
76 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733390"];
77 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 733391"];
78 [label="LazyThreadSafetyMode.PublicationOnly 733392"];
79 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733393"];
80 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733394"];
81 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 733395"];
82 [label="LazyThreadSafetyMode.PublicationOnly 733396"];
83 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733397"];
84 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733398"];
85 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 733399"];
86 [label="LazyThreadSafetyMode.PublicationOnly 733400"];
87 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733401"];
88 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733402"];
89 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 733403"];
90 [label="LazyThreadSafetyMode.PublicationOnly 733404"];
91 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733405"];
92 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733406"];
93 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 733407"];
94 [label="LazyThreadSafetyMode.PublicationOnly 733408"];
95 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733409"];
96 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733410"];
97 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 733411"];
98 [label="LazyThreadSafetyMode.PublicationOnly 733412"];
99 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733413"];
100 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733414"];
101 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 733415"];
102 [label="LazyThreadSafetyMode.PublicationOnly 733416"];
103 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 733417"];
104 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 733418"];
105 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 733419"];
106 [label="LazyThreadSafetyMode.PublicationOnly 733420"];
107 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 733421"];
108 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 733422"];
109 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 733423"];
110 [label="LazyThreadSafetyMode.PublicationOnly 733424"];
111 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733425"];
112 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733426"];
113 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 733427"];
114 [label="LazyThreadSafetyMode.PublicationOnly 733428"];
115 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733429"];
116 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733430"];
117 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 733431"];
118 [label="LazyThreadSafetyMode.PublicationOnly 733432"];
119 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733433"];
120 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733434"];
121 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 733435"];
122 [label="LazyThreadSafetyMode.PublicationOnly 733436"];
123 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733437"];
124 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733438"];
125 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 733439"];
126 [label="LazyThreadSafetyMode.PublicationOnly 733440"];
127 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 733441"];
128 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 733442"];
129 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 733443"];
130 [label="LazyThreadSafetyMode.PublicationOnly 733444"];
131 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733445"];
132 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733446"];
133 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 733447"];
134 [label="LazyThreadSafetyMode.PublicationOnly 733448"];
135 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733449"];
136 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733450"];
137 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 733451"];
138 [label="LazyThreadSafetyMode.PublicationOnly 733452"];
139 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733453"];
140 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733454"];
141 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 733455"];
142 [label="LazyThreadSafetyMode.PublicationOnly 733456"];
143 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733457"];
144 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733458"];
145 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 733459"];
146 [label="LazyThreadSafetyMode.PublicationOnly 733460"];
147 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733461"];
148 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733462"];
149 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 733463"];
150 [label="LazyThreadSafetyMode.PublicationOnly 733464"];
151 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733465"];
152 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733466"];
153 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 733467"];
154 [label="LazyThreadSafetyMode.PublicationOnly 733468"];
155 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733469"];
156 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733470"];
157 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 733471"];
158 [label="LazyThreadSafetyMode.PublicationOnly 733472"];
159 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733473"];
160 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733474"];
161 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 733475"];
162 [label="LazyThreadSafetyMode.PublicationOnly 733476"];
163 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733477"];
164 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733478"];
165 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 733479"];
166 [label="LazyThreadSafetyMode.PublicationOnly 733480"];
167 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733481"];
168 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733482"];
169 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 733483"];
170 [label="LazyThreadSafetyMode.PublicationOnly 733484"];
171 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733485"];
172 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733486"];
173 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 733487"];
174 [label="LazyThreadSafetyMode.PublicationOnly 733488"];
175 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733489"];
176 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733490"];
177 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 733491"];
178 [label="LazyThreadSafetyMode.PublicationOnly 733492"];
179 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733493"];
180 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 733494"];
181 [label="@'R:\\Invalid.dll' 733495"];
182 [label="fullPath: @'R:\\Invalid.dll' 733496"];
183 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 733497"];
184 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 733498"];
185 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 733499"];
186 [label="MscorlibRef_v4_0_30316_17626 733500"];
187 [label="Net451.mscorlib 733501"];
188 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 733502"];
189 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 733503"];
190 [label="'/*<bind>*/' 733504"];
191 [label="StartString = '/*<bind>*/' 733505"];
192 [label="'/*</bind>*/' 733506"];
193 [label="EndString = '/*</bind>*/' 733507"];
194 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 733508"];
195 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 733509"];
196 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 733510"];
197 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 733511"];
198 [label="param CSharpTestBase(this) 733512"];
199 [label="param CommonTestBase(this) 733513"];
200 [label="param TestBase(this) 733514"];
201 [label="_temp 733515"];
202 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 733516"];
203 [label="param UnimplementedInterfaceSquiggleLocation_InterfaceInheritanceScenario05(this) 733517"];
204 [label="string scenarioCode = @'\npublic class ITT: IDerived\n{ }\n\ninterface IInterfaceBase\n{\n    void xyzb();\n}\n\ninterface IDerived : IInterfaceBase\n{\n    void xyzd();\n}'; 733518"];
205 [label="var testAssembly = CreateCompilation(scenarioCode); 733519"];
206 [label="scenarioCode 733520"];
207 [label="param operator(string source) 733521"];
208 [label="source 733522"];
209 [label="new CSharpTestSource(source) 733523"];
210 [label="param CSharpTestSource(object value) 733524"];
211 [label="param CSharpTestSource(this) 733525"];
212 [label="Value 733526"];
213 [label="var testAssembly = CreateCompilation(scenarioCode); 733527"];
214 [label="var testAssembly = CreateCompilation(scenarioCode); 733528"];
215 [label="CreateCompilation(scenarioCode) 733529"];
216 [label="param CreateCompilation(CSharpTestSource source) 733530"];
217 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 733531"];
218 [label="param CreateCompilation(CSharpCompilationOptions options = null) 733532"];
219 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 733533"];
220 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 733534"];
221 [label="param CreateCompilation(string assemblyName = '') 733535"];
222 [label="param CreateCompilation(string sourceFileName = '') 733536"];
223 [label="param CreateCompilation(bool skipUsesIsNullable = false) 733537"];
224 [label="source 733538"];
225 [label="targetFramework 733539"];
226 [label="references 733540"];
227 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 733541"];
228 [label="param GetReferences(TargetFramework tf) 733542"];
229 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 733543"];
230 [label="var references = GetReferences(tf); 733544"];
231 [label="GetReferences(tf) 733545"];
232 [label="param GetReferences(TargetFramework targetFramework) 733546"];
233 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 733547"];
234 [label="StandardReferences 733548"];
235 [label="RuntimeUtilities.IsCoreClrRuntime 733549"];
236 [label="Mscorlib46ExtendedReferences 733550"];
237 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 733551"];
238 [label="TestBase.ValueTupleRef 733552"];
239 [label="TestReferences.NetFx.ValueTuple.tuplelib 733553"];
240 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 733554"];
241 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 733555"];
242 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 733556"];
243 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 733557"];
244 [label="return references; 733558"];
245 [label="options 733559"];
246 [label="parseOptions 733560"];
247 [label="assemblyName 733561"];
248 [label="sourceFileName 733562"];
249 [label="skipUsesIsNullable 733563"];
250 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 733564"];
251 [label="param CreateEmptyCompilation(CSharpTestSource source) 733565"];
252 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 733566"];
253 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 733567"];
254 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 733568"];
255 [label="param CreateEmptyCompilation(string assemblyName = '') 733569"];
256 [label="param CreateEmptyCompilation(string sourceFileName = '') 733570"];
257 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 733571"];
258 [label="source 733572"];
259 [label="references 733573"];
260 [label="options 733574"];
261 [label="parseOptions 733575"];
262 [label="assemblyName 733576"];
263 [label="sourceFileName 733577"];
264 [label="skipUsesIsNullable 733578"];
265 [label="null 733579"];
266 [label="experimentalFeature: null 733580"];
267 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 733581"];
268 [label="param CreateCompilationCore(CSharpTestSource source) 733582"];
269 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 733583"];
270 [label="param CreateCompilationCore(CSharpCompilationOptions options) 733584"];
271 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 733585"];
272 [label="param CreateCompilationCore(string assemblyName) 733586"];
273 [label="param CreateCompilationCore(string sourceFileName) 733587"];
274 [label="param CreateCompilationCore(bool skipUsesIsNullable) 733588"];
275 [label="param CreateCompilationCore(MessageID? experimentalFeature) 733589"];
276 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 733590"];
277 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 733591"];
278 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 733592"];
279 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 733593"];
280 [label="param GetSyntaxTrees(string sourceFileName = '') 733594"];
281 [label="param GetSyntaxTrees(this) 733595"];
282 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 733596"];
283 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 733597"];
284 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 733598"];
285 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 733599"];
286 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 733600"];
287 [label="param Parse(string text) 733601"];
288 [label="param Parse(string filename = '') 733602"];
289 [label="param Parse(CSharpParseOptions options = null) 733603"];
290 [label="param Parse(Encoding encoding = null) 733604"];
291 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 733605"];
292 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 733606"];
293 [label="kind: SourceCodeKind.Regular 733607"];
294 [label="documentationMode: DocumentationMode.Parse 733608"];
295 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 733609"];
296 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 733610"];
297 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 733611"];
298 [label="SourceCodeKind.Script 733612"];
299 [label="Regular.WithKind(SourceCodeKind.Script) 733613"];
300 [label="Script = Regular.WithKind(SourceCodeKind.Script) 733614"];
301 [label="LanguageVersion.CSharp6 733615"];
302 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 733616"];
303 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 733617"];
304 [label="LanguageVersion.CSharp7 733618"];
305 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 733619"];
306 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 733620"];
307 [label="LanguageVersion.CSharp7_1 733621"];
308 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 733622"];
309 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 733623"];
310 [label="LanguageVersion.CSharp7_2 733624"];
311 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 733625"];
312 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 733626"];
313 [label="LanguageVersion.CSharp7_3 733627"];
314 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 733628"];
315 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 733629"];
316 [label="LanguageVersion.Default 733630"];
317 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 733631"];
318 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 733632"];
319 [label="LanguageVersion.Preview 733633"];
320 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 733634"];
321 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 733635"];
322 [label="LanguageVersion.CSharp8 733636"];
323 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 733637"];
324 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 733638"];
325 [label="LanguageVersion.CSharp9 733639"];
326 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 733640"];
327 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 733641"];
328 [label="DocumentationMode.Diagnose 733642"];
329 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 733643"];
330 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 733644"];
331 [label="Regular 733645"];
332 [label="'UseLegacyStrongNameProvider' 733646"];
333 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 733647"];
334 [label="param WithFeature(this CSharpParseOptions options) 733648"];
335 [label="param WithFeature(string feature) 733649"];
336 [label="param WithFeature(string value = 'true') 733650"];
337 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 733651"];
338 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 733652"];
339 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 733653"];
340 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 733654"];
341 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 733655"];
342 [label="new[] { new KeyValuePair<string, string>(feature, value) } 733656"];
343 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 733657"];
344 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 733658"];
345 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 733659"];
346 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 733660"];
347 [label="1 733661"];
348 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 733662"];
349 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 733663"];
350 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 733664"];
351 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 733665"];
352 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 733666"];
353 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 733667"];
354 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 733668"];
355 [label="LanguageVersion.CSharp8 733669"];
356 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 733670"];
357 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 733671"];
358 [label="RegularWithExtendedPartialMethods = RegularPreview 733672"];
359 [label="new SmallDictionary<string, string> { } 733673"];
360 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 733674"];
361 [label="kind: SourceCodeKind.Regular 733675"];
362 [label="documentationMode: DocumentationMode.None 733676"];
363 [label="languageVersion: LanguageVersion.Preview 733677"];
364 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 733678"];
365 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 733679"];
366 [label="s_experimentalFeatures 733680"];
367 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 733681"];
368 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 733682"];
369 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 733683"];
370 [label="'testV7SwitchBinder' 733684"];
371 [label="'true' 733685"];
372 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 733686"];
373 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 733687"];
374 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 733688"];
375 [label="RegularWithoutRecursivePatterns = Regular7_3 733689"];
376 [label="RegularWithRecursivePatterns = Regular8 733690"];
377 [label="RegularWithoutPatternCombinators = Regular8 733691"];
378 [label="RegularWithPatternCombinators = RegularPreview 733692"];
379 [label="OutputKind.DynamicallyLinkedLibrary 733693"];
380 [label="OptimizationLevel.Release 733694"];
381 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 733695"];
382 [label="param CreateTestOptions(OutputKind outputKind) 733696"];
383 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 733697"];
384 [label="param CreateTestOptions(bool allowUnsafe = false) 733698"];
385 [label="outputKind 733699"];
386 [label="optimizationLevel: optimizationLevel 733700"];
387 [label="warningLevel: Diagnostic.MaxWarningLevel 733701"];
388 [label="allowUnsafe: allowUnsafe 733702"];
389 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 733703"];
390 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 733704"];
391 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 733705"];
392 [label="OutputKind.ConsoleApplication 733706"];
393 [label="OptimizationLevel.Release 733707"];
394 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 733708"];
395 [label="param CreateTestOptions(OutputKind outputKind) 733709"];
396 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 733710"];
397 [label="param CreateTestOptions(bool allowUnsafe = false) 733711"];
398 [label="outputKind 733712"];
399 [label="optimizationLevel: optimizationLevel 733713"];
400 [label="warningLevel: Diagnostic.MaxWarningLevel 733714"];
401 [label="allowUnsafe: allowUnsafe 733715"];
402 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 733716"];
403 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 733717"];
404 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 733718"];
405 [label="true 733719"];
406 [label="ReleaseDll.WithDebugPlusMode(true) 733720"];
407 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 733721"];
408 [label="true 733722"];
409 [label="ReleaseExe.WithDebugPlusMode(true) 733723"];
410 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 733724"];
411 [label="OutputKind.DynamicallyLinkedLibrary 733725"];
412 [label="OptimizationLevel.Debug 733726"];
413 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 733727"];
414 [label="param CreateTestOptions(OutputKind outputKind) 733728"];
415 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 733729"];
416 [label="param CreateTestOptions(bool allowUnsafe = false) 733730"];
417 [label="outputKind 733731"];
418 [label="optimizationLevel: optimizationLevel 733732"];
419 [label="warningLevel: Diagnostic.MaxWarningLevel 733733"];
420 [label="allowUnsafe: allowUnsafe 733734"];
421 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 733735"];
422 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 733736"];
423 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 733737"];
424 [label="OutputKind.ConsoleApplication 733738"];
425 [label="OptimizationLevel.Debug 733739"];
426 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 733740"];
427 [label="param CreateTestOptions(OutputKind outputKind) 733741"];
428 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 733742"];
429 [label="param CreateTestOptions(bool allowUnsafe = false) 733743"];
430 [label="outputKind 733744"];
431 [label="optimizationLevel: optimizationLevel 733745"];
432 [label="warningLevel: Diagnostic.MaxWarningLevel 733746"];
433 [label="allowUnsafe: allowUnsafe 733747"];
434 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 733748"];
435 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 733749"];
436 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 733750"];
437 [label="OutputKind.WindowsRuntimeMetadata 733751"];
438 [label="OptimizationLevel.Release 733752"];
439 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 733753"];
440 [label="param CreateTestOptions(OutputKind outputKind) 733754"];
441 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 733755"];
442 [label="param CreateTestOptions(bool allowUnsafe = false) 733756"];
443 [label="outputKind 733757"];
444 [label="optimizationLevel: optimizationLevel 733758"];
445 [label="warningLevel: Diagnostic.MaxWarningLevel 733759"];
446 [label="allowUnsafe: allowUnsafe 733760"];
447 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 733761"];
448 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 733762"];
449 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 733763"];
450 [label="OutputKind.WindowsRuntimeMetadata 733764"];
451 [label="OptimizationLevel.Debug 733765"];
452 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 733766"];
453 [label="param CreateTestOptions(OutputKind outputKind) 733767"];
454 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 733768"];
455 [label="param CreateTestOptions(bool allowUnsafe = false) 733769"];
456 [label="outputKind 733770"];
457 [label="optimizationLevel: optimizationLevel 733771"];
458 [label="warningLevel: Diagnostic.MaxWarningLevel 733772"];
459 [label="allowUnsafe: allowUnsafe 733773"];
460 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 733774"];
461 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 733775"];
462 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 733776"];
463 [label="OutputKind.NetModule 733777"];
464 [label="OptimizationLevel.Release 733778"];
465 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 733779"];
466 [label="param CreateTestOptions(OutputKind outputKind) 733780"];
467 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 733781"];
468 [label="param CreateTestOptions(bool allowUnsafe = false) 733782"];
469 [label="outputKind 733783"];
470 [label="optimizationLevel: optimizationLevel 733784"];
471 [label="warningLevel: Diagnostic.MaxWarningLevel 733785"];
472 [label="allowUnsafe: allowUnsafe 733786"];
473 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 733787"];
474 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 733788"];
475 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 733789"];
476 [label="OutputKind.NetModule 733790"];
477 [label="OptimizationLevel.Debug 733791"];
478 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 733792"];
479 [label="param CreateTestOptions(OutputKind outputKind) 733793"];
480 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 733794"];
481 [label="param CreateTestOptions(bool allowUnsafe = false) 733795"];
482 [label="outputKind 733796"];
483 [label="optimizationLevel: optimizationLevel 733797"];
484 [label="warningLevel: Diagnostic.MaxWarningLevel 733798"];
485 [label="allowUnsafe: allowUnsafe 733799"];
486 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 733800"];
487 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 733801"];
488 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 733802"];
489 [label="true 733803"];
490 [label="ReleaseDll.WithAllowUnsafe(true) 733804"];
491 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 733805"];
492 [label="true 733806"];
493 [label="ReleaseExe.WithAllowUnsafe(true) 733807"];
494 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 733808"];
495 [label="true 733809"];
496 [label="DebugDll.WithAllowUnsafe(true) 733810"];
497 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 733811"];
498 [label="true 733812"];
499 [label="DebugExe.WithAllowUnsafe(true) 733813"];
500 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 733814"];
501 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 733815"];
502 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 733816"];
503 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 733817"];
504 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 733818"];
505 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 733819"];
506 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 733820"];
507 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 733821"];
508 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 733822"];
509 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 733823"];
510 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 733824"];
511 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 733825"];
512 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 733826"];
513 [label="DebugInformationFormat.Pdb 733827"];
514 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 733828"];
515 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 733829"];
516 [label="options = TestOptions.Regular; 733830"];
517 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 733831"];
518 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 733832"];
519 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 733833"];
520 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 733834"];
521 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 733835"];
522 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 733836"];
523 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 733837"];
524 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 733838"];
525 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 733839"];
526 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 733840"];
527 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 733841"];
528 [label="param CheckSerializable(SyntaxTree tree) 733842"];
529 [label="var stream = new MemoryStream(); 733843"];
530 [label="var root = tree.GetRoot(); 733844"];
531 [label="var root = tree.GetRoot(); 733845"];
532 [label="root.SerializeTo(stream); 733846"];
533 [label="root.SerializeTo(stream); 733847"];
534 [label="root.SerializeTo(stream); 733848"];
535 [label="stream.Position = 0; 733849"];
536 [label="stream.Position 733850"];
537 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 733851"];
538 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 733852"];
539 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 733853"];
540 [label="return tree; 733854"];
541 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 733855"];
542 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 733856"];
543 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 733857"];
544 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 733858"];
545 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 733859"];
546 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 733860"];
547 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 733861"];
548 [label="hasTopLevelStatements 733862"];
549 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 733863"];
550 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 733864"];
551 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 733865"];
552 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 733866"];
553 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 733867"];
554 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 733868"];
555 [label="param ValidateIOperations(Func<Compilation> createCompilation) 733869"];
556 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 733870"];
557 [label="return; 733871"];
558 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 733872"];
559 [label="var compilation = createCompilationLambda(); 733873"];
560 [label="var compilation = createCompilationLambda(); 733874"];
561 [label="return Guid.NewGuid().ToString('D'); 733875"];
562 [label="var compilation = createCompilationLambda(); 733876"];
563 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 733877"];
564 [label="IsNullableEnabled(compilation) 733878"];
565 [label="param IsNullableEnabled(CSharpCompilation compilation) 733879"];
566 [label="var trees = compilation.SyntaxTrees; 733880"];
567 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 733881"];
568 [label="var options = (CSharpParseOptions)trees[0].Options; 733882"];
569 [label="var options = (CSharpParseOptions)trees[0].Options; 733883"];
570 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 733884"];
571 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 733885"];
572 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 733886"];
573 [label="return compilation; 733887"];
574 [label="testAssembly.VerifyDiagnostics(\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IDerived.xyzd()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IDerived.xyzd()').WithLocation(2, 19),\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyzb()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IInterfaceBase.xyzb()').WithLocation(2, 19)); 733888"];
575 [label="testAssembly.VerifyDiagnostics(\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IDerived.xyzd()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IDerived.xyzd()').WithLocation(2, 19),\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyzb()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IInterfaceBase.xyzb()').WithLocation(2, 19)); 733889"];
576 [label="testAssembly.VerifyDiagnostics(\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IDerived.xyzd()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IDerived.xyzd()').WithLocation(2, 19),\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyzb()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IInterfaceBase.xyzb()').WithLocation(2, 19)); 733890"];
577 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived') 733891"];
578 [label="param Diagnostic(object code) 733892"];
579 [label="param Diagnostic(string squiggledText = null) 733893"];
580 [label="param Diagnostic(object[] arguments = null) 733894"];
581 [label="param Diagnostic(LinePosition? startLocation = null) 733895"];
582 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 733896"];
583 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 733897"];
584 [label="param Diagnostic(bool isSuppressed = false) 733898"];
585 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 733899"];
586 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 733900"];
587 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 733901"];
588 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 733902"];
589 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 733903"];
590 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 733904"];
591 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 733905"];
592 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 733906"];
593 [label="param Diagnostic(object code) 733907"];
594 [label="param Diagnostic(string squiggledText = null) 733908"];
595 [label="param Diagnostic(object[] arguments = null) 733909"];
596 [label="param Diagnostic(LinePosition? startLocation = null) 733910"];
597 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 733911"];
598 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 733912"];
599 [label="param Diagnostic(bool isSuppressed = false) 733913"];
600 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 733914"];
601 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 733915"];
602 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 733916"];
603 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 733917"];
604 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 733918"];
605 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 733919"];
606 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 733920"];
607 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 733921"];
608 [label="{ } 733922"];
609 [label="None = { } 733923"];
610 [label="null 733924"];
611 [label="Any = null 733925"];
612 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 733926"];
613 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 733927"];
614 [label="param DiagnosticDescription(object code) 733928"];
615 [label="param DiagnosticDescription(bool isWarningAsError) 733929"];
616 [label="param DiagnosticDescription(string squiggledText) 733930"];
617 [label="param DiagnosticDescription(object[] arguments) 733931"];
618 [label="param DiagnosticDescription(LinePosition? startLocation) 733932"];
619 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 733933"];
620 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 733934"];
621 [label="param DiagnosticDescription(Type errorCodeType = null) 733935"];
622 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 733936"];
623 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 733937"];
624 [label="param DiagnosticDescription(bool isSuppressed = false) 733938"];
625 [label="param DiagnosticDescription(this) 733939"];
626 [label="_code 733940"];
627 [label="_isWarningAsError 733941"];
628 [label="_isSuppressed 733942"];
629 [label="_squiggledText 733943"];
630 [label="_arguments 733944"];
631 [label="_startPosition 733945"];
632 [label="_argumentOrderDoesNotMatter 733946"];
633 [label="_errorCodeType 733947"];
634 [label="_ignoreArgumentsWhenComparing 733948"];
635 [label="_defaultSeverityOpt 733949"];
636 [label="_effectiveSeverityOpt 733950"];
637 [label="_syntaxPredicate 733951"];
638 [label="_showPredicate 733952"];
639 [label="_location 733953"];
640 [label="_argumentsAsStrings 733954"];
641 [label="_code 733955"];
642 [label="_isWarningAsError 733956"];
643 [label="_squiggledText 733957"];
644 [label="_arguments 733958"];
645 [label="_startPosition 733959"];
646 [label="_syntaxPredicate 733960"];
647 [label="_argumentOrderDoesNotMatter 733961"];
648 [label="_errorCodeType = errorCodeType ?? code.GetType(); 733962"];
649 [label="_errorCodeType 733963"];
650 [label="_defaultSeverityOpt 733964"];
651 [label="_effectiveSeverityOpt 733965"];
652 [label="_isSuppressed 733966"];
653 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 733967"];
654 [label="testAssembly.VerifyDiagnostics(\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IDerived.xyzd()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IDerived.xyzd()').WithLocation(2, 19),\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyzb()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IInterfaceBase.xyzb()').WithLocation(2, 19)); 733968"];
655 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IDerived.xyzd()') 733969"];
656 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IDerived.xyzd()') 733970"];
657 [label="param WithArguments(params object[] arguments) 733971"];
658 [label="param WithArguments(this) 733972"];
659 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 733973"];
660 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 733974"];
661 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 733975"];
662 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 733976"];
663 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 733977"];
664 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 733978"];
665 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 733979"];
666 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 733980"];
667 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 733981"];
668 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 733982"];
669 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 733983"];
670 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 733984"];
671 [label="param DiagnosticDescription(object code) 733985"];
672 [label="param DiagnosticDescription(bool isWarningAsError) 733986"];
673 [label="param DiagnosticDescription(string squiggledText) 733987"];
674 [label="param DiagnosticDescription(object[] arguments) 733988"];
675 [label="param DiagnosticDescription(LinePosition? startLocation) 733989"];
676 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 733990"];
677 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 733991"];
678 [label="param DiagnosticDescription(Type errorCodeType = null) 733992"];
679 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 733993"];
680 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 733994"];
681 [label="param DiagnosticDescription(bool isSuppressed = false) 733995"];
682 [label="param DiagnosticDescription(this) 733996"];
683 [label="_code 733997"];
684 [label="_isWarningAsError 733998"];
685 [label="_isSuppressed 733999"];
686 [label="_squiggledText 734000"];
687 [label="_arguments 734001"];
688 [label="_startPosition 734002"];
689 [label="_argumentOrderDoesNotMatter 734003"];
690 [label="_errorCodeType 734004"];
691 [label="_ignoreArgumentsWhenComparing 734005"];
692 [label="_defaultSeverityOpt 734006"];
693 [label="_effectiveSeverityOpt 734007"];
694 [label="_syntaxPredicate 734008"];
695 [label="_showPredicate 734009"];
696 [label="_location 734010"];
697 [label="_argumentsAsStrings 734011"];
698 [label="_arguments 734012"];
699 [label="_argumentOrderDoesNotMatter 734013"];
700 [label="testAssembly.VerifyDiagnostics(\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IDerived.xyzd()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IDerived.xyzd()').WithLocation(2, 19),\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyzb()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IInterfaceBase.xyzb()').WithLocation(2, 19)); 734014"];
701 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IDerived.xyzd()').WithLocation(2, 19) 734015"];
702 [label="param WithLocation(int line) 734016"];
703 [label="param WithLocation(int column) 734017"];
704 [label="param WithLocation(this) 734018"];
705 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734019"];
706 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734020"];
707 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734021"];
708 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734022"];
709 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734023"];
710 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734024"];
711 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734025"];
712 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734026"];
713 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734027"];
714 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734028"];
715 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734029"];
716 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734030"];
717 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734031"];
718 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734032"];
719 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 734033"];
720 [label="param DiagnosticDescription(object code) 734034"];
721 [label="param DiagnosticDescription(bool isWarningAsError) 734035"];
722 [label="param DiagnosticDescription(string squiggledText) 734036"];
723 [label="param DiagnosticDescription(object[] arguments) 734037"];
724 [label="param DiagnosticDescription(LinePosition? startLocation) 734038"];
725 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 734039"];
726 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 734040"];
727 [label="param DiagnosticDescription(Type errorCodeType = null) 734041"];
728 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 734042"];
729 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 734043"];
730 [label="param DiagnosticDescription(bool isSuppressed = false) 734044"];
731 [label="param DiagnosticDescription(this) 734045"];
732 [label="_code 734046"];
733 [label="_isWarningAsError 734047"];
734 [label="_isSuppressed 734048"];
735 [label="_squiggledText 734049"];
736 [label="_arguments 734050"];
737 [label="_startPosition 734051"];
738 [label="_argumentOrderDoesNotMatter 734052"];
739 [label="_errorCodeType 734053"];
740 [label="_ignoreArgumentsWhenComparing 734054"];
741 [label="_defaultSeverityOpt 734055"];
742 [label="_effectiveSeverityOpt 734056"];
743 [label="_syntaxPredicate 734057"];
744 [label="_showPredicate 734058"];
745 [label="_location 734059"];
746 [label="_argumentsAsStrings 734060"];
747 [label="_startPosition 734061"];
748 [label="testAssembly.VerifyDiagnostics(\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IDerived.xyzd()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IDerived.xyzd()').WithLocation(2, 19),\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyzb()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IInterfaceBase.xyzb()').WithLocation(2, 19)); 734062"];
749 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived') 734063"];
750 [label="param Diagnostic(object code) 734064"];
751 [label="param Diagnostic(string squiggledText = null) 734065"];
752 [label="param Diagnostic(object[] arguments = null) 734066"];
753 [label="param Diagnostic(LinePosition? startLocation = null) 734067"];
754 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 734068"];
755 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 734069"];
756 [label="param Diagnostic(bool isSuppressed = false) 734070"];
757 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 734071"];
758 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 734072"];
759 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 734073"];
760 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 734074"];
761 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 734075"];
762 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 734076"];
763 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 734077"];
764 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 734078"];
765 [label="param Diagnostic(object code) 734079"];
766 [label="param Diagnostic(string squiggledText = null) 734080"];
767 [label="param Diagnostic(object[] arguments = null) 734081"];
768 [label="param Diagnostic(LinePosition? startLocation = null) 734082"];
769 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 734083"];
770 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 734084"];
771 [label="param Diagnostic(bool isSuppressed = false) 734085"];
772 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 734086"];
773 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 734087"];
774 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 734088"];
775 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 734089"];
776 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 734090"];
777 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 734091"];
778 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 734092"];
779 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 734093"];
780 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 734094"];
781 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 734095"];
782 [label="param DiagnosticDescription(object code) 734096"];
783 [label="param DiagnosticDescription(bool isWarningAsError) 734097"];
784 [label="param DiagnosticDescription(string squiggledText) 734098"];
785 [label="param DiagnosticDescription(object[] arguments) 734099"];
786 [label="param DiagnosticDescription(LinePosition? startLocation) 734100"];
787 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 734101"];
788 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 734102"];
789 [label="param DiagnosticDescription(Type errorCodeType = null) 734103"];
790 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 734104"];
791 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 734105"];
792 [label="param DiagnosticDescription(bool isSuppressed = false) 734106"];
793 [label="param DiagnosticDescription(this) 734107"];
794 [label="_code 734108"];
795 [label="_isWarningAsError 734109"];
796 [label="_isSuppressed 734110"];
797 [label="_squiggledText 734111"];
798 [label="_arguments 734112"];
799 [label="_startPosition 734113"];
800 [label="_argumentOrderDoesNotMatter 734114"];
801 [label="_errorCodeType 734115"];
802 [label="_ignoreArgumentsWhenComparing 734116"];
803 [label="_defaultSeverityOpt 734117"];
804 [label="_effectiveSeverityOpt 734118"];
805 [label="_syntaxPredicate 734119"];
806 [label="_showPredicate 734120"];
807 [label="_location 734121"];
808 [label="_argumentsAsStrings 734122"];
809 [label="_code 734123"];
810 [label="_isWarningAsError 734124"];
811 [label="_squiggledText 734125"];
812 [label="_arguments 734126"];
813 [label="_startPosition 734127"];
814 [label="_syntaxPredicate 734128"];
815 [label="_argumentOrderDoesNotMatter 734129"];
816 [label="_errorCodeType = errorCodeType ?? code.GetType(); 734130"];
817 [label="_errorCodeType 734131"];
818 [label="_defaultSeverityOpt 734132"];
819 [label="_effectiveSeverityOpt 734133"];
820 [label="_isSuppressed 734134"];
821 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 734135"];
822 [label="testAssembly.VerifyDiagnostics(\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IDerived.xyzd()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IDerived.xyzd()').WithLocation(2, 19),\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyzb()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IInterfaceBase.xyzb()').WithLocation(2, 19)); 734136"];
823 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IInterfaceBase.xyzb()') 734137"];
824 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IInterfaceBase.xyzb()') 734138"];
825 [label="param WithArguments(params object[] arguments) 734139"];
826 [label="param WithArguments(this) 734140"];
827 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734141"];
828 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734142"];
829 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734143"];
830 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734144"];
831 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734145"];
832 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734146"];
833 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734147"];
834 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734148"];
835 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734149"];
836 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734150"];
837 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734151"];
838 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 734152"];
839 [label="param DiagnosticDescription(object code) 734153"];
840 [label="param DiagnosticDescription(bool isWarningAsError) 734154"];
841 [label="param DiagnosticDescription(string squiggledText) 734155"];
842 [label="param DiagnosticDescription(object[] arguments) 734156"];
843 [label="param DiagnosticDescription(LinePosition? startLocation) 734157"];
844 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 734158"];
845 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 734159"];
846 [label="param DiagnosticDescription(Type errorCodeType = null) 734160"];
847 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 734161"];
848 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 734162"];
849 [label="param DiagnosticDescription(bool isSuppressed = false) 734163"];
850 [label="param DiagnosticDescription(this) 734164"];
851 [label="_code 734165"];
852 [label="_isWarningAsError 734166"];
853 [label="_isSuppressed 734167"];
854 [label="_squiggledText 734168"];
855 [label="_arguments 734169"];
856 [label="_startPosition 734170"];
857 [label="_argumentOrderDoesNotMatter 734171"];
858 [label="_errorCodeType 734172"];
859 [label="_ignoreArgumentsWhenComparing 734173"];
860 [label="_defaultSeverityOpt 734174"];
861 [label="_effectiveSeverityOpt 734175"];
862 [label="_syntaxPredicate 734176"];
863 [label="_showPredicate 734177"];
864 [label="_location 734178"];
865 [label="_argumentsAsStrings 734179"];
866 [label="_arguments 734180"];
867 [label="_argumentOrderDoesNotMatter 734181"];
868 [label="testAssembly.VerifyDiagnostics(\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IDerived.xyzd()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IDerived.xyzd()').WithLocation(2, 19),\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyzb()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IInterfaceBase.xyzb()').WithLocation(2, 19)); 734182"];
869 [label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IInterfaceBase.xyzb()').WithLocation(2, 19) 734183"];
870 [label="param WithLocation(int line) 734184"];
871 [label="param WithLocation(int column) 734185"];
872 [label="param WithLocation(this) 734186"];
873 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734187"];
874 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734188"];
875 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734189"];
876 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734190"];
877 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734191"];
878 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734192"];
879 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734193"];
880 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734194"];
881 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734195"];
882 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734196"];
883 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734197"];
884 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734198"];
885 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734199"];
886 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 734200"];
887 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 734201"];
888 [label="param DiagnosticDescription(object code) 734202"];
889 [label="param DiagnosticDescription(bool isWarningAsError) 734203"];
890 [label="param DiagnosticDescription(string squiggledText) 734204"];
891 [label="param DiagnosticDescription(object[] arguments) 734205"];
892 [label="param DiagnosticDescription(LinePosition? startLocation) 734206"];
893 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 734207"];
894 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 734208"];
895 [label="param DiagnosticDescription(Type errorCodeType = null) 734209"];
896 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 734210"];
897 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 734211"];
898 [label="param DiagnosticDescription(bool isSuppressed = false) 734212"];
899 [label="param DiagnosticDescription(this) 734213"];
900 [label="_code 734214"];
901 [label="_isWarningAsError 734215"];
902 [label="_isSuppressed 734216"];
903 [label="_squiggledText 734217"];
904 [label="_arguments 734218"];
905 [label="_startPosition 734219"];
906 [label="_argumentOrderDoesNotMatter 734220"];
907 [label="_errorCodeType 734221"];
908 [label="_ignoreArgumentsWhenComparing 734222"];
909 [label="_defaultSeverityOpt 734223"];
910 [label="_effectiveSeverityOpt 734224"];
911 [label="_syntaxPredicate 734225"];
912 [label="_showPredicate 734226"];
913 [label="_location 734227"];
914 [label="_argumentsAsStrings 734228"];
915 [label="_startPosition 734229"];
916 [label="testAssembly.VerifyDiagnostics(\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IDerived.xyzd()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IDerived.xyzd()').WithLocation(2, 19),\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyzb()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IInterfaceBase.xyzb()').WithLocation(2, 19)); 734230"];
917 [label="testAssembly.VerifyDiagnostics(\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IDerived.xyzd()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IDerived.xyzd()').WithLocation(2, 19),\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyzb()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IInterfaceBase.xyzb()').WithLocation(2, 19)) 734231"];
918 [label="testAssembly.VerifyDiagnostics(\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IDerived.xyzd()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IDerived.xyzd()').WithLocation(2, 19),\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyzb()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IInterfaceBase.xyzb()').WithLocation(2, 19)) 734232"];
919 [label="testAssembly.VerifyDiagnostics(\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IDerived.xyzd()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IDerived.xyzd()').WithLocation(2, 19),\n                // (2,19): error CS0535: 'ITT' does not implement interface member 'IInterfaceBase.xyzb()'\n                // public class ITT: IDerived\n                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IInterfaceBase.xyzb()').WithLocation(2, 19)) 734233"];
920 [label="param VerifyDiagnostics(this TCompilation c) 734234"];
921 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 734235"];
922 [label="var diagnostics = c.GetDiagnostics(); 734236"];
923 [label="null 734237"];
924 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Empty 734238"];
925 [label="ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty 734239"];
926 [label="ImmutableArray<AliasAndExternAliasDirective>.Empty 734240"];
927 [label="null 734241"];
928 [label="new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 734242"];
929 [label="param Imports(CSharpCompilation compilation) 734243"];
930 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 734244"];
931 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 734245"];
932 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 734246"];
933 [label="param Imports(DiagnosticBag diagnostics) 734247"];
934 [label="param Imports(this) 734248"];
935 [label="_compilation 734249"];
936 [label="_diagnostics 734250"];
937 [label="UsingAliases 734251"];
938 [label="Debug.Assert(usingAliases != null); 734252"];
939 [label="Debug.Assert(usingAliases != null); 734253"];
940 [label="Debug.Assert(!usings.IsDefault); 734254"];
941 [label="Debug.Assert(!externs.IsDefault); 734255"];
942 [label="_compilation 734256"];
943 [label="this.UsingAliases 734257"];
944 [label="this.Usings 734258"];
945 [label="_diagnostics 734259"];
946 [label="this.ExternAliases 734260"];
947 [label="Empty = new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 734261"];
948 [label="var diagnostics = c.GetDiagnostics(); 734262"];
949 [label="param FromGlobalUsings(CSharpCompilation compilation) 734263"];
950 [label="var usings = compilation.Options.Usings; 734264"];
951 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 734265"];
952 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 734266"];
953 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 734267"];
954 [label="return Empty; 734268"];
955 [label="var diagnostics = c.GetDiagnostics(); 734269"];
956 [label="param Complete(CancellationToken cancellationToken) 734270"];
957 [label="param Complete(this) 734271"];
958 [label="while (true)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                var incompletePart = _state.NextIncompletePart;\n                switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                }\n\n                _state.SpinWaitComplete(incompletePart, cancellationToken);\n            } 734272"];
959 [label="cancellationToken.ThrowIfCancellationRequested(); 734273"];
960 [label="var incompletePart = _state.NextIncompletePart; 734274"];
961 [label="switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                } 734275"];
962 [label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 734276"];
963 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 734277"];
964 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 734278"];
965 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 734279"];
966 [label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            } 734280"];
967 [label="Validate() 734281"];
968 [label="param Validate(this) 734282"];
969 [label="if (this == Empty)\n            {\n                return;\n            } 734283"];
970 [label="return; 734284"];
971 [label="Validate(); 734285"];
972 [label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 734286"];
973 [label="return; 734287"];
974 [label="param Includes(this BinderFlags self) 734288"];
975 [label="param Includes(BinderFlags other) 734289"];
976 [label="return (self & other) == other; 734290"];
977 [label="var diagnostics = c.GetDiagnostics(); 734291"];
978 [label="0 734292"];
979 [label="ExternalScope = 0 734293"];
980 [label="1 734294"];
981 [label="TopLevelScope = 1 734295"];
982 [label="2 734296"];
983 [label="ValueKindInsignificantBits = 2 734297"];
984 [label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 << ValueKindInsignificantBits) - 1)) 734298"];
985 [label="property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 734299"];
986 [label="s_isIndexedPropertyWithNonOptionalArguments = property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 734300"];
987 [label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 734301"];
988 [label="memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType 734302"];
989 [label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 734303"];
990 [label="miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 734304"];
991 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 734305"];
992 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 734306"];
993 [label="s_propertyGroupFormat =\n            new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 734307"];
994 [label="10 734308"];
995 [label="MaxParameterListsForErrorRecovery = 10 734309"];
996 [label="'<>h__TransparentIdentifier' 734310"];
997 [label="transparentIdentifierPrefix = '<>h__TransparentIdentifier' 734311"];
998 [label="s => (MethodSymbol)s 734312"];
999 [label="s_toMethodSymbolFunc = s => (MethodSymbol)s 734313"];
1000 [label="s => (PropertySymbol)s 734314"];
1001 [label="s_toPropertySymbolFunc = s => (PropertySymbol)s 734315"];
1002 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 734316"];
1003 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 734317"];
1004 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 734318"];
1005 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 734319"];
1006 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 734320"];
1007 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 734321"];
1008 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 734322"];
1009 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 734323"];
1010 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 734324"];
1011 [label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 734325"];
1012 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 734326"];
1013 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 734327"];
1014 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 734328"];
1015 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 734329"];
1016 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 734330"];
1017 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 734331"];
1018 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 734332"];
1019 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 734333"];
1020 [label="param GetWellKnownTypeMember(WellKnownMember member) 734334"];
1021 [label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 734335"];
1022 [label="param GetWellKnownTypeMember(Location location = null) 734336"];
1023 [label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 734337"];
1024 [label="param GetWellKnownTypeMember(bool isOptional = false) 734338"];
1025 [label="Debug.Assert((syntax != null) ^ (location != null)); 734339"];
1026 [label="Debug.Assert((syntax != null) ^ (location != null)); 734340"];
1027 [label="Debug.Assert((syntax != null) ^ (location != null)); 734341"];
1028 [label="Debug.Assert((syntax != null) ^ (location != null)); 734342"];
1029 [label="DiagnosticInfo useSiteDiagnostic; 734343"];
1030 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 734344"];
1031 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 734345"];
1032 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 734346"];
1033 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 734347"];
1034 [label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 734348"];
1035 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 734349"];
1036 [label="param GetWellKnownTypeMember(WellKnownMember member) 734350"];
1037 [label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 734351"];
1038 [label="param GetWellKnownTypeMember(bool isOptional = false) 734352"];
1039 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 734353"];
1040 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 734354"];
1041 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 734355"];
1042 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 734356"];
1043 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 734357"];
1044 [label="Debug.Assert(symbol is object); 734358"];
1045 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 734359"];
1046 [label="isInternal = false; 734360"];
1047 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 734361"];
1048 [label="symbol = symbol.ContainingType; 734362"];
1049 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 734363"];
1050 [label="return true; 734364"];
1051 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 734365"];
1052 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 734366"];
1053 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 734367"];
1054 [label="Debug.Assert(symbol is object); 734368"];
1055 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 734369"];
1056 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 734370"];
1057 [label="symbol = symbol.ContainingType; 734371"];
1058 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 734372"];
1059 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 734373"];
1060 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 734374"];
1061 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 734375"];
1062 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 734376"];
1063 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 734377"];
1064 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 734378"];
1065 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 734379"];
1066 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 734380"];
1067 [label="Debug.Assert(symbol is object); 734381"];
1068 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 734382"];
1069 [label="isInternal = false; 734383"];
1070 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 734384"];
1071 [label="symbol = symbol.ContainingType; 734385"];
1072 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 734386"];
1073 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 734387"];
1074 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 734388"];
1075 [label="Debug.Assert(symbol is object); 734389"];
1076 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 734390"];
1077 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 734391"];
1078 [label="symbol = symbol.ContainingType; 734392"];
1079 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 734393"];
1080 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 734394"];
1081 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 734395"];
1082 [label="return memberSymbol; 734396"];
1083 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 734397"];
1084 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 734398"];
1085 [label="return memberSymbol; 734399"];
1086 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 734400"];
1087 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 734401"];
1088 [label="Debug.Assert(symbol is object); 734402"];
1089 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 734403"];
1090 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 734404"];
1091 [label="symbol = symbol.ContainingType; 734405"];
1092 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 734406"];
1093 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 734407"];
1094 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 734408"];
1095 [label="Debug.Assert(symbol is object); 734409"];
1096 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 734410"];
1097 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 734411"];
1098 [label="symbol = symbol.ContainingType; 734412"];
1099 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 734413"];
1100 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 734414"];
1101 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 734415"];
1102 [label="return memberSymbol; 734416"];
1103 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 734417"];
1104 [label="return memberSymbol; 734418"];
1105 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 734419"];
1106 [label="return memberSymbol; 734420"];
1107 [label="return memberSymbol; 734421"];
1108 [label="param GetBinder(SyntaxNode node) 734422"];
1109 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 734423"];
1110 [label="param GetBinder(Symbol memberOpt = null) 734424"];
1111 [label="param GetBinder(this) 734425"];
1112 [label="int position = node.SpanStart; 734426"];
1113 [label="InScript 734427"];
1114 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 734428"];
1115 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 734429"];
1116 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 734430"];
1117 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 734431"];
1118 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 734432"];
1119 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 734433"];
1120 [label="node = node.Parent; 734434"];
1121 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 734435"];
1122 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 734436"];
1123 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 734437"];
1124 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 734438"];
1125 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 734439"];
1126 [label="param GetBinder(SyntaxNode node) 734440"];
1127 [label="param GetBinder(int position) 734441"];
1128 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 734442"];
1129 [label="param GetBinder(Symbol memberOpt = null) 734443"];
1130 [label="param GetBinder(this) 734444"];
1131 [label="Debug.Assert(node != null); 734445"];
1132 [label="Debug.Assert(node != null); 734446"];
1133 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 734447"];
1134 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 734448"];
1135 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 734449"];
1136 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 734450"];
1137 [label="param BinderFactoryVisitor(BinderFactory factory) 734451"];
1138 [label="param BinderFactoryVisitor(this) 734452"];
1139 [label="param BinderFactoryVisitor(this) 734453"];
1140 [label="_position 734454"];
1141 [label="_memberDeclarationOpt 734455"];
1142 [label="_memberOpt 734456"];
1143 [label="_factory 734457"];
1144 [label="_factory 734458"];
1145 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 734459"];
1146 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 734460"];
1147 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 734461"];
1148 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 734462"];
1149 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 734463"];
1150 [label="param Initialize(int position) 734464"];
1151 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 734465"];
1152 [label="param Initialize(Symbol memberOpt) 734466"];
1153 [label="param Initialize(this) 734467"];
1154 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 734468"];
1155 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 734469"];
1156 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 734470"];
1157 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 734471"];
1158 [label="_position 734472"];
1159 [label="_memberDeclarationOpt 734473"];
1160 [label="_memberOpt 734474"];
1161 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 734475"];
1162 [label="Binder result = visitor.Visit(node); 734476"];
1163 [label="visitor.Visit(node) 734477"];
1164 [label="param Visit(SyntaxNode node) 734478"];
1165 [label="param Visit(this) 734479"];
1166 [label="return VisitCore(node); 734480"];
1167 [label="VisitCore(node) 734481"];
1168 [label="param VisitCore(SyntaxNode node) 734482"];
1169 [label="param VisitCore(this) 734483"];
1170 [label="return ((CSharpSyntaxNode)node).Accept(this); 734484"];
1171 [label="return ((CSharpSyntaxNode)node).Accept(this); 734485"];
1172 [label="return ((CSharpSyntaxNode)node).Accept(this); 734486"];
1173 [label="param VisitInterfaceDeclaration(InterfaceDeclarationSyntax node) 734487"];
1174 [label="param VisitInterfaceDeclaration(this) 734488"];
1175 [label="return VisitTypeDeclarationCore(node); 734489"];
1176 [label="VisitTypeDeclarationCore(node) 734490"];
1177 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 734491"];
1178 [label="param VisitTypeDeclarationCore(this) 734492"];
1179 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 734493"];
1180 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 734494"];
1181 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 734495"];
1182 [label="NodeUsage extraInfo = NodeUsage.Normal; 734496"];
1183 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 734497"];
1184 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 734498"];
1185 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 734499"];
1186 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 734500"];
1187 [label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 734501"];
1188 [label="return VisitTypeDeclarationCore(parent, extraInfo); 734502"];
1189 [label="return VisitTypeDeclarationCore(parent, extraInfo); 734503"];
1190 [label="VisitTypeDeclarationCore(parent, extraInfo) 734504"];
1191 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 734505"];
1192 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 734506"];
1193 [label="param VisitTypeDeclarationCore(this) 734507"];
1194 [label="var key = CreateBinderCacheKey(parent, extraInfo); 734508"];
1195 [label="var key = CreateBinderCacheKey(parent, extraInfo); 734509"];
1196 [label="CreateBinderCacheKey(parent, extraInfo) 734510"];
1197 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 734511"];
1198 [label="param CreateBinderCacheKey(NodeUsage usage) 734512"];
1199 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 734513"];
1200 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 734514"];
1201 [label="return new BinderCacheKey(node, usage); 734515"];
1202 [label="return new BinderCacheKey(node, usage); 734516"];
1203 [label="return new BinderCacheKey(node, usage); 734517"];
1204 [label="new BinderCacheKey(node, usage) 734518"];
1205 [label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 734519"];
1206 [label="param BinderCacheKey(NodeUsage usage) 734520"];
1207 [label="param BinderCacheKey(this) 734521"];
1208 [label="this.syntaxNode 734522"];
1209 [label="this.usage 734523"];
1210 [label="var key = CreateBinderCacheKey(parent, extraInfo); 734524"];
1211 [label="Binder resultBinder; 734525"];
1212 [label="binderCache 734526"];
1213 [label="get\n                {\n                    return _factory._binderCache;\n                } 734527"];
1214 [label="return _factory._binderCache; 734528"];
1215 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 734529"];
1216 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 734530"];
1217 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 734531"];
1218 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 734532"];
1219 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 734533"];
1220 [label="param GetHashCode(this) 734534"];
1221 [label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 734535"];
1222 [label="resultBinder = VisitCore(parent.Parent); 734536"];
1223 [label="VisitCore(parent.Parent) 734537"];
1224 [label="param VisitCore(SyntaxNode node) 734538"];
1225 [label="param VisitCompilationUnit(CompilationUnitSyntax parent) 734539"];
1226 [label="param VisitCompilationUnit(this) 734540"];
1227 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 734541"];
1228 [label="IsInUsing(parent) 734542"];
1229 [label="param IsInUsing(CSharpSyntaxNode containingNode) 734543"];
1230 [label="param IsInUsing(this) 734544"];
1231 [label="TextSpan containingSpan = containingNode.Span; 734545"];
1232 [label="SyntaxToken token; 734546"];
1233 [label="token 734547"];
1234 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 734548"];
1235 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 734549"];
1236 [label="token = containingNode.FindToken(_position); 734550"];
1237 [label="token = containingNode.FindToken(_position); 734551"];
1238 [label="var node = token.Parent; 734552"];
1239 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 734553"];
1240 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 734554"];
1241 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 734555"];
1242 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 734556"];
1243 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 734557"];
1244 [label="node = node.Parent; 734558"];
1245 [label="return false; 734559"];
1246 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 734560"];
1247 [label="InScript 734561"];
1248 [label="get\n                {\n                    return _factory.InScript;\n                } 734562"];
1249 [label="_factory.InScript 734563"];
1250 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 734564"];
1251 [label="return _factory.InScript; 734565"];
1252 [label="VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript) 734566"];
1253 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 734567"];
1254 [label="param VisitCompilationUnit(bool inUsing) 734568"];
1255 [label="param VisitCompilationUnit(bool inScript) 734569"];
1256 [label="param VisitCompilationUnit(this) 734570"];
1257 [label="syntaxTree 734571"];
1258 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 734572"];
1259 [label="return _factory._syntaxTree; 734573"];
1260 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 734574"];
1261 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 734575"];
1262 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 734576"];
1263 [label="inUsing 734577"];
1264 [label="inScript 734578"];
1265 [label="var extraInfo = inUsing\n                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)\n                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 734579"];
1266 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 734580"];
1267 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 734581"];
1268 [label="CreateBinderCacheKey(compilationUnit, extraInfo) 734582"];
1269 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 734583"];
1270 [label="param CreateBinderCacheKey(NodeUsage usage) 734584"];
1271 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 734585"];
1272 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 734586"];
1273 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 734587"];
1274 [label="Binder result; 734588"];
1275 [label="binderCache 734589"];
1276 [label="get\n                {\n                    return _factory._binderCache;\n                } 734590"];
1277 [label="return _factory._binderCache; 734591"];
1278 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 734592"];
1279 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 734593"];
1280 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 734594"];
1281 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 734595"];
1282 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 734596"];
1283 [label="this.buckStopsHereBinder 734597"];
1284 [label="get\n                {\n                    return _factory._buckStopsHereBinder;\n                } 734598"];
1285 [label="return _factory._buckStopsHereBinder; 734599"];
1286 [label="result = this.buckStopsHereBinder; 734600"];
1287 [label="if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    } 734601"];
1288 [label="compilation 734602"];
1289 [label="get\n                {\n                    return _factory._compilation;\n                } 734603"];
1290 [label="return _factory._compilation; 734604"];
1291 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 734605"];
1292 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 734606"];
1293 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 734607"];
1294 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 734608"];
1295 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 734609"];
1296 [label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 734610"];
1297 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 734611"];
1298 [label="param InContainerBinder(Binder next) 734612"];
1299 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 734613"];
1300 [label="param InContainerBinder(bool inUsing) 734614"];
1301 [label="param InContainerBinder(this) 734615"];
1302 [label="next 734616"];
1303 [label="param InContainerBinder(this) 734617"];
1304 [label="param Binder(Binder next) 734618"];
1305 [label="param Binder(this) 734619"];
1306 [label="param Binder(Conversions? conversions = null) 734620"];
1307 [label="internal CSharpCompilation Compilation { get; } 734621"];
1308 [label="Flags 734622"];
1309 [label="protected internal Binder? Next { get; } 734623"];
1310 [label="_lazyConversions 734624"];
1311 [label="_lazyOverloadResolution 734625"];
1312 [label="RoslynDebug.Assert(next != null); 734626"];
1313 [label="RoslynDebug.Assert(next != null); 734627"];
1314 [label="Next 734628"];
1315 [label="this.Flags 734629"];
1316 [label="this.Compilation 734630"];
1317 [label="_lazyConversions 734631"];
1318 [label="_container 734632"];
1319 [label="_computeImports 734633"];
1320 [label="_lazyImports 734634"];
1321 [label="_lazyImportChain 734635"];
1322 [label="_lazyQuickAttributeChecker 734636"];
1323 [label="Debug.Assert((object)container != null); 734637"];
1324 [label="Debug.Assert((object)container != null); 734638"];
1325 [label="Debug.Assert(declarationSyntax != null); 734639"];
1326 [label="Debug.Assert(declarationSyntax != null); 734640"];
1327 [label="_container 734641"];
1328 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 734642"];
1329 [label="_computeImports 734643"];
1330 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 734644"];
1331 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 734645"];
1332 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 734646"];
1333 [label="_usingsSyntax 734647"];
1334 [label="compilation 734648"];
1335 [label="get\n                {\n                    return _factory._compilation;\n                } 734649"];
1336 [label="return _factory._compilation; 734650"];
1337 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 734651"];
1338 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 734652"];
1339 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 734653"];
1340 [label="binderCache 734654"];
1341 [label="return _factory._binderCache; 734655"];
1342 [label="binderCache.TryAdd(key, result); 734656"];
1343 [label="binderCache.TryAdd(key, result); 734657"];
1344 [label="binderCache.TryAdd(key, result); 734658"];
1345 [label="binderCache.TryAdd(key, result); 734659"];
1346 [label="binderCache.TryAdd(key, result); 734660"];
1347 [label="return result; 734661"];
1348 [label="return ((CSharpSyntaxNode)node).Accept(this); 734662"];
1349 [label="if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    } 734663"];
1350 [label="resultBinder.ContainingMemberOrLambda 734664"];
1351 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 734665"];
1352 [label="var merged = _container as MergedNamespaceSymbol; 734666"];
1353 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 734667"];
1354 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 734668"];
1355 [label="((object)merged != null) 734669"];
1356 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 734670"];
1357 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 734671"];
1358 [label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        } 734672"];
1359 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 734673"];
1360 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 734674"];
1361 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 734675"];
1362 [label="new InContainerBinder(typeSymbol, resultBinder) 734676"];
1363 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 734677"];
1364 [label="param InContainerBinder(Binder next) 734678"];
1365 [label="param InContainerBinder(Imports imports = null) 734679"];
1366 [label="param InContainerBinder(this) 734680"];
1367 [label="next 734681"];
1368 [label="param InContainerBinder(this) 734682"];
1369 [label="param Binder(Binder next) 734683"];
1370 [label="param Binder(this) 734684"];
1371 [label="param Binder(Conversions? conversions = null) 734685"];
1372 [label="internal CSharpCompilation Compilation { get; } 734686"];
1373 [label="Flags 734687"];
1374 [label="protected internal Binder? Next { get; } 734688"];
1375 [label="_lazyConversions 734689"];
1376 [label="_lazyOverloadResolution 734690"];
1377 [label="RoslynDebug.Assert(next != null); 734691"];
1378 [label="RoslynDebug.Assert(next != null); 734692"];
1379 [label="this.Flags 734693"];
1380 [label="this.Compilation 734694"];
1381 [label="_lazyConversions 734695"];
1382 [label="_container 734696"];
1383 [label="_computeImports 734697"];
1384 [label="_lazyImports 734698"];
1385 [label="_lazyImportChain 734699"];
1386 [label="_lazyQuickAttributeChecker 734700"];
1387 [label="Debug.Assert((object)container != null || imports != null); 734701"];
1388 [label="Debug.Assert((object)container != null || imports != null); 734702"];
1389 [label="_container 734703"];
1390 [label="_lazyImports = imports ?? Imports.Empty; 734704"];
1391 [label="_lazyImports = imports ?? Imports.Empty; 734705"];
1392 [label="_lazyImports 734706"];
1393 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 734707"];
1394 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 734708"];
1395 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 734709"];
1396 [label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 734710"];
1397 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 734711"];
1398 [label="param WithUnsafeRegionIfNecessary(this) 734712"];
1399 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 734713"];
1400 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 734714"];
1401 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 734715"];
1402 [label="param Includes(this BinderFlags self) 734716"];
1403 [label="param Includes(BinderFlags other) 734717"];
1404 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 734718"];
1405 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 734719"];
1406 [label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 734720"];
1407 [label="binderCache 734721"];
1408 [label="return _factory._binderCache; 734722"];
1409 [label="binderCache.TryAdd(key, resultBinder); 734723"];
1410 [label="binderCache.TryAdd(key, resultBinder); 734724"];
1411 [label="binderCache.TryAdd(key, resultBinder); 734725"];
1412 [label="binderCache.TryAdd(key, resultBinder); 734726"];
1413 [label="binderCache.TryAdd(key, resultBinder); 734727"];
1414 [label="return resultBinder; 734728"];
1415 [label="return ((CSharpSyntaxNode)node).Accept(this); 734729"];
1416 [label="_binderFactoryVisitorPool.Free(visitor); 734730"];
1417 [label="_binderFactoryVisitorPool.Free(visitor); 734731"];
1418 [label="return result; 734732"];
1419 [label="var diagnostics = c.GetDiagnostics(); 734733"];
1420 [label="param BinderFactory(CSharpCompilation compilation) 734734"];
1421 [label="param BinderFactory(SyntaxTree syntaxTree) 734735"];
1422 [label="param BinderFactory(bool ignoreAccessibility) 734736"];
1423 [label="param BinderFactory(this) 734737"];
1424 [label="_binderCache 734738"];
1425 [label="_compilation 734739"];
1426 [label="_syntaxTree 734740"];
1427 [label="_buckStopsHereBinder 734741"];
1428 [label="_ignoreAccessibility 734742"];
1429 [label="_binderFactoryVisitorPool 734743"];
1430 [label="_compilation 734744"];
1431 [label="_syntaxTree 734745"];
1432 [label="_ignoreAccessibility 734746"];
1433 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 734747"];
1434 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 734748"];
1435 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 734749"];
1436 [label="_binderFactoryVisitorPool 734750"];
1437 [label="_binderCache = new ConcurrentCache<BinderCacheKey, Binder>(50); 734751"];
1438 [label="_binderCache 734752"];
1439 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 734753"];
1440 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 734754"];
1441 [label="new BuckStopsHereBinder(compilation) 734755"];
1442 [label="param BuckStopsHereBinder(CSharpCompilation compilation) 734756"];
1443 [label="param BuckStopsHereBinder(this) 734757"];
1444 [label="compilation 734758"];
1445 [label="param BuckStopsHereBinder(this) 734759"];
1446 [label="param Binder(CSharpCompilation compilation) 734760"];
1447 [label="param Binder(this) 734761"];
1448 [label="internal CSharpCompilation Compilation { get; } 734762"];
1449 [label="Flags 734763"];
1450 [label="protected internal Binder? Next { get; } 734764"];
1451 [label="_lazyConversions 734765"];
1452 [label="_lazyOverloadResolution 734766"];
1453 [label="RoslynDebug.Assert(compilation != null); 734767"];
1454 [label="RoslynDebug.Assert(compilation != null); 734768"];
1455 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 734769"];
1456 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 734770"];
1457 [label="this.Flags 734771"];
1458 [label="this.Compilation 734772"];
1459 [label="_buckStopsHereBinder 734773"];
1460 [label="var diagnostics = c.GetDiagnostics(); 734774"];
1461 [label="Debug.Assert(node != null); 734775"];
1462 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 734776"];
1463 [label="container.AssertMemberExposure(memberOpt); 734777"];
1464 [label="container.AssertMemberExposure(memberOpt); 734778"];
1465 [label="param VisitMethodDeclaration(MethodDeclarationSyntax methodDecl) 734779"];
1466 [label="param VisitMethodDeclaration(this) 734780"];
1467 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 734781"];
1468 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 734782"];
1469 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 734783"];
1470 [label="NodeUsage usage; 734784"];
1471 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 734785"];
1472 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 734786"];
1473 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 734787"];
1474 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 734788"];
1475 [label="usage = NodeUsage.Normal; 734789"];
1476 [label="var key = CreateBinderCacheKey(methodDecl, usage); 734790"];
1477 [label="var key = CreateBinderCacheKey(methodDecl, usage); 734791"];
1478 [label="CreateBinderCacheKey(methodDecl, usage) 734792"];
1479 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 734793"];
1480 [label="param CreateBinderCacheKey(NodeUsage usage) 734794"];
1481 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 734795"];
1482 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 734796"];
1483 [label="return new BinderCacheKey(node, usage); 734797"];
1484 [label="new BinderCacheKey(node, usage) 734798"];
1485 [label="param BinderCacheKey(this) 734799"];
1486 [label="var key = CreateBinderCacheKey(methodDecl, usage); 734800"];
1487 [label="Binder resultBinder; 734801"];
1488 [label="binderCache 734802"];
1489 [label="get\n                {\n                    return _factory._binderCache;\n                } 734803"];
1490 [label="return _factory._binderCache; 734804"];
1491 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 734805"];
1492 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 734806"];
1493 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 734807"];
1494 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 734808"];
1495 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 734809"];
1496 [label="var parentType = methodDecl.Parent as TypeDeclarationSyntax; 734810"];
1497 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 734811"];
1498 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 734812"];
1499 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 734813"];
1500 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 734814"];
1501 [label="VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters) 734815"];
1502 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 734816"];
1503 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 734817"];
1504 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 734818"];
1505 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 734819"];
1506 [label="SyntaxToken token; 734820"];
1507 [label="token 734821"];
1508 [label="syntaxTree 734822"];
1509 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 734823"];
1510 [label="return _factory._syntaxTree; 734824"];
1511 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 734825"];
1512 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 734826"];
1513 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 734827"];
1514 [label="RoslynDebug.Assert(next != null); 734828"];
1515 [label="_container 734829"];
1516 [label="Debug.Assert((object)container != null); 734830"];
1517 [label="Debug.Assert(declarationSyntax != null); 734831"];
1518 [label="RoslynDebug.Assert(next != null); 734832"];
1519 [label="_container 734833"];
1520 [label="Debug.Assert((object)container != null || imports != null); 734834"];
1521 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 734835"];
1522 [label="SourceMemberMethodSymbol method = null; 734836"];
1523 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 734837"];
1524 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 734838"];
1525 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers); 734839"];
1526 [label="resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers) 734840"];
1527 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 734841"];
1528 [label="param WithUnsafeRegionIfNecessary(this) 734842"];
1529 [label="binderCache 734843"];
1530 [label="return _factory._binderCache; 734844"];
1531 [label="binderCache.TryAdd(key, resultBinder); 734845"];
1532 [label="binderCache.TryAdd(key, resultBinder); 734846"];
1533 [label="binderCache.TryAdd(key, resultBinder); 734847"];
1534 [label="binderCache.TryAdd(key, resultBinder); 734848"];
1535 [label="return resultBinder; 734849"];
1536 [label="return ((CSharpSyntaxNode)node).Accept(this); 734850"];
1537 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 734851"];
1538 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 734852"];
1539 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 734853"];
1540 [label="Debug.Assert((object)containing != null); 734854"];
1541 [label="Debug.Assert((object)containing != null); 734855"];
1542 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 734856"];
1543 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 734857"];
1544 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 734858"];
1545 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 734859"];
1546 [label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 734860"];
1547 [label="param BinderWithContainingMemberOrLambda(Binder next) 734861"];
1548 [label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 734862"];
1549 [label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 734863"];
1550 [label="param BinderWithContainingMemberOrLambda(this) 734864"];
1551 [label="next 734865"];
1552 [label="flags 734866"];
1553 [label="param BinderWithContainingMemberOrLambda(this) 734867"];
1554 [label="param Binder(Binder next) 734868"];
1555 [label="param Binder(BinderFlags flags) 734869"];
1556 [label="param Binder(this) 734870"];
1557 [label="internal CSharpCompilation Compilation { get; } 734871"];
1558 [label="Flags 734872"];
1559 [label="protected internal Binder? Next { get; } 734873"];
1560 [label="_lazyConversions 734874"];
1561 [label="_lazyOverloadResolution 734875"];
1562 [label="RoslynDebug.Assert(next != null); 734876"];
1563 [label="RoslynDebug.Assert(next != null); 734877"];
1564 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 734878"];
1565 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 734879"];
1566 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 734880"];
1567 [label="param Includes(this BinderFlags self) 734881"];
1568 [label="param Includes(BinderFlags other) 734882"];
1569 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 734883"];
1570 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 734884"];
1571 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 734885"];
1572 [label="param Includes(this BinderFlags self) 734886"];
1573 [label="param Includes(BinderFlags other) 734887"];
1574 [label="Next 734888"];
1575 [label="this.Flags 734889"];
1576 [label="this.Compilation 734890"];
1577 [label="_containingMemberOrLambda 734891"];
1578 [label="Debug.Assert(containingMemberOrLambda != null); 734892"];
1579 [label="Debug.Assert(containingMemberOrLambda != null); 734893"];
1580 [label="_containingMemberOrLambda 734894"];
1581 [label="var diagnostics = c.GetDiagnostics(); 734895"];
1582 [label="param ValidateParameterNameConflicts(ImmutableArray<TypeParameterSymbol> typeParameters) 734896"];
1583 [label="param ValidateParameterNameConflicts(ImmutableArray<ParameterSymbol> parameters) 734897"];
1584 [label="param ValidateParameterNameConflicts(bool allowShadowingNames) 734898"];
1585 [label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 734899"];
1586 [label="param ValidateParameterNameConflicts(this) 734900"];
1587 [label="PooledHashSet<string>? tpNames = null; 734901"];
1588 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 734902"];
1589 [label="PooledHashSet<string>? pNames = null; 734903"];
1590 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 734904"];
1591 [label="tpNames?.Free(); 734905"];
1592 [label="pNames?.Free(); 734906"];
1593 [label="param BindType(ExpressionSyntax syntax) 734907"];
1594 [label="param BindType(DiagnosticBag diagnostics) 734908"];
1595 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 734909"];
1596 [label="param BindType(bool suppressUseSiteDiagnostics = false) 734910"];
1597 [label="param BindType(this) 734911"];
1598 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 734912"];
1599 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 734913"];
1600 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 734914"];
1601 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 734915"];
1602 [label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 734916"];
1603 [label="param BindTypeOrAlias(ExpressionSyntax syntax) 734917"];
1604 [label="param BindTypeOrAlias(DiagnosticBag diagnostics) 734918"];
1605 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 734919"];
1606 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 734920"];
1607 [label="param BindTypeOrAlias(this) 734921"];
1608 [label="Debug.Assert(diagnostics != null); 734922"];
1609 [label="Debug.Assert(diagnostics != null); 734923"];
1610 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 734924"];
1611 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 734925"];
1612 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 734926"];
1613 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 734927"];
1614 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 734928"];
1615 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 734929"];
1616 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 734930"];
1617 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 734931"];
1618 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 734932"];
1619 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 734933"];
1620 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 734934"];
1621 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 734935"];
1622 [label="switch (syntax.Kind())\n            {\n                case SyntaxKind.NullableType:\n                    return bindNullable(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.PredefinedType:\n                    return bindPredefined(syntax, diagnostics);\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);\n\n                case SyntaxKind.AliasQualifiedName:\n                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n\n                case SyntaxKind.QualifiedName:\n                    {\n                        var node = (QualifiedNameSyntax)syntax;\n                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.SimpleMemberAccessExpression:\n                    {\n                        var node = (MemberAccessExpressionSyntax)syntax;\n                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.ArrayType:\n                    {\n                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);\n                    }\n\n                case SyntaxKind.PointerType:\n                    return bindPointer(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.FunctionPointerType:\n                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;\n                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)\n                    {\n                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;\n                        var asterisk = functionPointerTypeSyntax.AsteriskToken;\n                        RoslynDebug.Assert(@delegate.SyntaxTree is object);\n                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));\n                    }\n\n                    return TypeWithAnnotations.Create(\n                        FunctionPointerTypeSymbol.CreateFromSource(\n                            functionPointerTypeSyntax,\n                            this,\n                            diagnostics,\n                            basesBeingResolved,\n                            suppressUseSiteDiagnostics));\n\n                case SyntaxKind.OmittedTypeArgument:\n                    {\n                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);\n                    }\n\n                case SyntaxKind.TupleType:\n                    {\n                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;\n                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));\n                    }\n\n                case SyntaxKind.RefType:\n                    {\n                        // ref needs to be handled by the caller\n                        var refTypeSyntax = (RefTypeSyntax)syntax;\n                        var refToken = refTypeSyntax.RefKeyword;\n                        if (!syntax.HasErrors)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());\n                        }\n\n                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                default:\n                    {\n                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind\n                        // is attempted to be bound as a type pattern.\n                        return createErrorType(syntax);\n                    }\n            } 734936"];
1623 [label="return bindPredefined(syntax, diagnostics); 734937"];
1624 [label="return bindPredefined(syntax, diagnostics); 734938"];
1625 [label="bindPredefined(syntax, diagnostics) 734939"];
1626 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 734940"];
1627 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 734941"];
1628 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 734942"];
1629 [label="var predefinedType = (PredefinedTypeSyntax)syntax; 734943"];
1630 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 734944"];
1631 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 734945"];
1632 [label="BindPredefinedTypeSymbol(predefinedType, diagnostics) 734946"];
1633 [label="param BindPredefinedTypeSymbol(PredefinedTypeSyntax node) 734947"];
1634 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 734948"];
1635 [label="param BindPredefinedTypeSymbol(this) 734949"];
1636 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 734950"];
1637 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 734951"];
1638 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 734952"];
1639 [label="GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node) 734953"];
1640 [label="param GetSpecialType(SpecialType typeId) 734954"];
1641 [label="param GetSpecialType(DiagnosticBag diagnostics) 734955"];
1642 [label="param GetSpecialType(SyntaxNode node) 734956"];
1643 [label="param GetSpecialType(this) 734957"];
1644 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 734958"];
1645 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 734959"];
1646 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 734960"];
1647 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 734961"];
1648 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 734962"];
1649 [label="param GetSpecialType(CSharpCompilation compilation) 734963"];
1650 [label="param GetSpecialType(SpecialType typeId) 734964"];
1651 [label="param GetSpecialType(SyntaxNode node) 734965"];
1652 [label="param GetSpecialType(DiagnosticBag diagnostics) 734966"];
1653 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 734967"];
1654 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 734968"];
1655 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 734969"];
1656 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 734970"];
1657 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 734971"];
1658 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 734972"];
1659 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 734973"];
1660 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 734974"];
1661 [label="param ReportUseSiteDiagnostics(Symbol symbol) 734975"];
1662 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 734976"];
1663 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 734977"];
1664 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 734978"];
1665 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 734979"];
1666 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 734980"];
1667 [label="return typeSymbol; 734981"];
1668 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 734982"];
1669 [label="AreNullableAnnotationsEnabled(predefinedType.Keyword) 734983"];
1670 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 734984"];
1671 [label="param AreNullableAnnotationsEnabled(this) 734985"];
1672 [label="RoslynDebug.Assert(token.SyntaxTree is object); 734986"];
1673 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 734987"];
1674 [label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 734988"];
1675 [label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 734989"];
1676 [label="param AreNullableAnnotationsEnabled(int position) 734990"];
1677 [label="param AreNullableAnnotationsEnabled(this) 734991"];
1678 [label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 734992"];
1679 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 734993"];
1680 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 734994"];
1681 [label="context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            } 734995"];
1682 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 734996"];
1683 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 734997"];
1684 [label="AreNullableAnnotationsGloballyEnabled() 734998"];
1685 [label="param AreNullableAnnotationsGloballyEnabled(this) 734999"];
1686 [label="RoslynDebug.Assert(Next is object); 735000"];
1687 [label="Next.AreNullableAnnotationsGloballyEnabled() 735001"];
1688 [label="param AreNullableAnnotationsGloballyEnabled(this) 735002"];
1689 [label="param AreNullableAnnotationsGloballyEnabled(this) 735003"];
1690 [label="GetGlobalAnnotationState() 735004"];
1691 [label="param GetGlobalAnnotationState(this) 735005"];
1692 [label="switch (Compilation.Options.NullableContextOptions)\n            {\n                case NullableContextOptions.Enable:\n                case NullableContextOptions.Annotations:\n                    return true;\n\n                case NullableContextOptions.Disable:\n                case NullableContextOptions.Warnings:\n                    return false;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);\n            } 735006"];
1693 [label="return false; 735007"];
1694 [label="return GetGlobalAnnotationState(); 735008"];
1695 [label="return Next.AreNullableAnnotationsGloballyEnabled(); 735009"];
1696 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 735010"];
1697 [label="type 735011"];
1698 [label="param operator(TypeWithAnnotations typeWithAnnotations) 735012"];
1699 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 735013"];
1700 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 735014"];
1701 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 735015"];
1702 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 735016"];
1703 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 735017"];
1704 [label="Debug.Assert(typeWithAnnotations.HasType); 735018"];
1705 [label="_typeWithAnnotations 735019"];
1706 [label="_symbol = null; 735020"];
1707 [label="_symbol 735021"];
1708 [label="_isNullableEnabled = false; 735022"];
1709 [label="_isNullableEnabled 735023"];
1710 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 735024"];
1711 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 735025"];
1712 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 735026"];
1713 [label="symbol.IsType 735027"];
1714 [label="=> !_typeWithAnnotations.IsDefault 735028"];
1715 [label="!_typeWithAnnotations.IsDefault 735029"];
1716 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 735030"];
1717 [label="symbol.IsType 735031"];
1718 [label="if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                } 735032"];
1719 [label="symbol.TypeWithAnnotations 735033"];
1720 [label="=> _typeWithAnnotations 735034"];
1721 [label="_typeWithAnnotations 735035"];
1722 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 735036"];
1723 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 735037"];
1724 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 735038"];
1725 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 735039"];
1726 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 735040"];
1727 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 735041"];
1728 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 735042"];
1729 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 735043"];
1730 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 735044"];
1731 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 735045"];
1732 [label="param ReportDiagnosticsIfObsolete(this) 735046"];
1733 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 735047"];
1734 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 735048"];
1735 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 735049"];
1736 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 735050"];
1737 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 735051"];
1738 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 735052"];
1739 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 735053"];
1740 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 735054"];
1741 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 735055"];
1742 [label="param ReportDiagnosticsIfObsolete(this) 735056"];
1743 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Event:\n                case SymbolKind.Property:\n                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);\n                    break;\n            } 735057"];
1744 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 735058"];
1745 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 735059"];
1746 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 735060"];
1747 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 735061"];
1748 [label="this.ContainingMemberOrLambda 735062"];
1749 [label="get { return _containingMemberOrLambda; } 735063"];
1750 [label="return _containingMemberOrLambda; 735064"];
1751 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 735065"];
1752 [label="this.ContainingType 735066"];
1753 [label="get\n            {\n                var member = this.ContainingMemberOrLambda;\n                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);\n                return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                };\n            } 735067"];
1754 [label="this.ContainingMemberOrLambda 735068"];
1755 [label="get { return _containingMemberOrLambda; } 735069"];
1756 [label="return _containingMemberOrLambda; 735070"];
1757 [label="var member = this.ContainingMemberOrLambda; 735071"];
1758 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 735072"];
1759 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 735073"];
1760 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 735074"];
1761 [label="return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                }; 735075"];
1762 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 735076"];
1763 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 735077"];
1764 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 735078"];
1765 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 735079"];
1766 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 735080"];
1767 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 735081"];
1768 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 735082"];
1769 [label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 735083"];
1770 [label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 735084"];
1771 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 735085"];
1772 [label="RoslynDebug.Assert(symbol is object); 735086"];
1773 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 735087"];
1774 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 735088"];
1775 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 735089"];
1776 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 735090"];
1777 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 735091"];
1778 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 735092"];
1779 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 735093"];
1780 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 735094"];
1781 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 735095"];
1782 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 735096"];
1783 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 735097"];
1784 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 735098"];
1785 [label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 735099"];
1786 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 735100"];
1787 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 735101"];
1788 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 735102"];
1789 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 735103"];
1790 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 735104"];
1791 [label="RoslynDebug.Assert(diagnostics != null); 735105"];
1792 [label="RoslynDebug.Assert(diagnostics != null); 735106"];
1793 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 735107"];
1794 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 735108"];
1795 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 735109"];
1796 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 735110"];
1797 [label="DiagnosticInfo? info = null; 735111"];
1798 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 735112"];
1799 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 735113"];
1800 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 735114"];
1801 [label="return kind; 735115"];
1802 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 735116"];
1803 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 735117"];
1804 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 735118"];
1805 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 735119"];
1806 [label="return symbol; 735120"];
1807 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 735121"];
1808 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 735122"];
1809 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 735123"];
1810 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 735124"];
1811 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 735125"];
1812 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 735126"];
1813 [label="param UnwrapAlias(DiagnosticBag diagnostics) 735127"];
1814 [label="param UnwrapAlias(SyntaxNode syntax) 735128"];
1815 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 735129"];
1816 [label="param UnwrapAlias(this) 735130"];
1817 [label="symbol.IsAlias 735131"];
1818 [label="=> _symbol?.Kind == SymbolKind.Alias 735132"];
1819 [label="_symbol 735133"];
1820 [label="_symbol?.Kind == SymbolKind.Alias 735134"];
1821 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 735135"];
1822 [label="return symbol; 735136"];
1823 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 735137"];
1824 [label="=> _typeWithAnnotations 735138"];
1825 [label="_typeWithAnnotations 735139"];
1826 [label="var diagnostics = c.GetDiagnostics(); 735140"];
1827 [label="param TypeConversions(AssemblySymbol corLibrary) 735141"];
1828 [label="param TypeConversions(bool includeNullability = false) 735142"];
1829 [label="param TypeConversions(this) 735143"];
1830 [label="corLibrary 735144"];
1831 [label="0 735145"];
1832 [label="includeNullability 735146"];
1833 [label="null 735147"];
1834 [label="param TypeConversions(this) 735148"];
1835 [label="param TypeConversions(AssemblySymbol corLibrary) 735149"];
1836 [label="param TypeConversions(int currentRecursionDepth) 735150"];
1837 [label="param TypeConversions(bool includeNullability) 735151"];
1838 [label="param TypeConversions(TypeConversions otherNullabilityOpt) 735152"];
1839 [label="param TypeConversions(this) 735153"];
1840 [label="corLibrary 735154"];
1841 [label="currentRecursionDepth 735155"];
1842 [label="includeNullability 735156"];
1843 [label="otherNullabilityOpt 735157"];
1844 [label="param TypeConversions(this) 735158"];
1845 [label="param ConversionsBase(AssemblySymbol corLibrary) 735159"];
1846 [label="param ConversionsBase(int currentRecursionDepth) 735160"];
1847 [label="param ConversionsBase(bool includeNullability) 735161"];
1848 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 735162"];
1849 [label="param ConversionsBase(this) 735163"];
1850 [label="corLibrary 735164"];
1851 [label="currentRecursionDepth 735165"];
1852 [label="IncludeNullability 735166"];
1853 [label="_lazyOtherNullability 735167"];
1854 [label="Debug.Assert((object)corLibrary != null); 735168"];
1855 [label="Debug.Assert((object)corLibrary != null); 735169"];
1856 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 735170"];
1857 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 735171"];
1858 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 735172"];
1859 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 735173"];
1860 [label="this.corLibrary 735174"];
1861 [label="this.currentRecursionDepth 735175"];
1862 [label="IncludeNullability 735176"];
1863 [label="_lazyOtherNullability 735177"];
1864 [label="var diagnostics = c.GetDiagnostics(); 735178"];
1865 [label="diagnostics.Verify(expected); 735179"];
1866 [label="diagnostics.Verify(expected); 735180"];
1867 [label="diagnostics.Verify(expected) 735181"];
1868 [label="param Verify(this ImmutableArray<Diagnostic> actual) 735182"];
1869 [label="param Verify(params DiagnosticDescription[] expected) 735183"];
1870 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 735184"];
1871 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 735185"];
1872 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 735186"];
1873 [label="param Verify(this IEnumerable<Diagnostic> actual) 735187"];
1874 [label="param Verify(params DiagnosticDescription[] expected) 735188"];
1875 [label="Verify(actual, expected, errorCodeOnly: false); 735189"];
1876 [label="Verify(actual, expected, errorCodeOnly: false); 735190"];
1877 [label="Verify(actual, expected, errorCodeOnly: false); 735191"];
1878 [label="Verify(actual, expected, errorCodeOnly: false) 735192"];
1879 [label="param Verify(IEnumerable<Diagnostic> actual) 735193"];
1880 [label="param Verify(DiagnosticDescription[] expected) 735194"];
1881 [label="param Verify(bool errorCodeOnly) 735195"];
1882 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 735196"];
1883 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 735197"];
1884 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 735198"];
1885 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 735199"];
1886 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 735200"];
1887 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 735201"];
1888 [label="=> _defaultSeverityOpt 735202"];
1889 [label="_defaultSeverityOpt 735203"];
1890 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 735204"];
1891 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 735205"];
1892 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 735206"];
1893 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 735207"];
1894 [label="=> _effectiveSeverityOpt 735208"];
1895 [label="_effectiveSeverityOpt 735209"];
1896 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 735210"];
1897 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 735211"];
1898 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 735212"];
1899 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 735213"];
1900 [label="param DiagnosticDescription(Diagnostic d) 735214"];
1901 [label="param DiagnosticDescription(bool errorCodeOnly) 735215"];
1902 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 735216"];
1903 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 735217"];
1904 [label="param DiagnosticDescription(this) 735218"];
1905 [label="_code 735219"];
1906 [label="_isWarningAsError 735220"];
1907 [label="_isSuppressed 735221"];
1908 [label="_squiggledText 735222"];
1909 [label="_arguments 735223"];
1910 [label="_startPosition 735224"];
1911 [label="_argumentOrderDoesNotMatter 735225"];
1912 [label="_errorCodeType 735226"];
1913 [label="_defaultSeverityOpt 735227"];
1914 [label="_effectiveSeverityOpt 735228"];
1915 [label="_syntaxPredicate 735229"];
1916 [label="_code 735230"];
1917 [label="_isWarningAsError 735231"];
1918 [label="_isSuppressed 735232"];
1919 [label="_location 735233"];
1920 [label="includeDefaultSeverity 735234"];
1921 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 735235"];
1922 [label="_defaultSeverityOpt 735236"];
1923 [label="includeEffectiveSeverity 735237"];
1924 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 735238"];
1925 [label="_effectiveSeverityOpt 735239"];
1926 [label="DiagnosticWithInfo dinfo = null; 735240"];
1927 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 735241"];
1928 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 735242"];
1929 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 735243"];
1930 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 735244"];
1931 [label="dinfo = d as DiagnosticWithInfo; 735245"];
1932 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 735246"];
1933 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 735247"];
1934 [label="_errorCodeType 735248"];
1935 [label="_code 735249"];
1936 [label="_ignoreArgumentsWhenComparing 735250"];
1937 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 735251"];
1938 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 735252"];
1939 [label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 735253"];
1940 [label="_squiggledText 735254"];
1941 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 735255"];
1942 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 735256"];
1943 [label="_arguments 735257"];
1944 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 735258"];
1945 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 735259"];
1946 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 735260"];
1947 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 735261"];
1948 [label="_startPosition 735262"];
1949 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 735263"];
1950 [label="_code 735264"];
1951 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 735265"];
1952 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 735266"];
1953 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 735267"];
1954 [label="int index = unmatched.IndexOf(d); 735268"];
1955 [label="int index = unmatched.IndexOf(d); 735269"];
1956 [label="param Equals(object obj) 735270"];
1957 [label="param Equals(this) 735271"];
1958 [label="var d = obj as DiagnosticDescription; 735272"];
1959 [label="if (d == null)\n                return false; 735273"];
1960 [label="if (d == null)\n                return false; 735274"];
1961 [label="if (!_code.Equals(d._code))\n                return false; 735275"];
1962 [label="if (!_code.Equals(d._code))\n                return false; 735276"];
1963 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 735277"];
1964 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 735278"];
1965 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 735279"];
1966 [label="if (_squiggledText != d._squiggledText)\n                    return false; 735280"];
1967 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 735281"];
1968 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 735282"];
1969 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 735283"];
1970 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 735284"];
1971 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 735285"];
1972 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 735286"];
1973 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 735287"];
1974 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 735288"];
1975 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 735289"];
1976 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 735290"];
1977 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 735291"];
1978 [label="if (d._arguments == null)\n                    return false; 735292"];
1979 [label="GetArgumentsAsStrings() 735293"];
1980 [label="param GetArgumentsAsStrings(this) 735294"];
1981 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 735295"];
1982 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 735296"];
1983 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 735297"];
1984 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 735298"];
1985 [label="_argumentsAsStrings 735299"];
1986 [label="return _argumentsAsStrings; 735300"];
1987 [label="var args1 = GetArgumentsAsStrings(); 735301"];
1988 [label="d.GetArgumentsAsStrings() 735302"];
1989 [label="param GetArgumentsAsStrings(this) 735303"];
1990 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 735304"];
1991 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 735305"];
1992 [label="return _argumentsAsStrings; 735306"];
1993 [label="var args2 = d.GetArgumentsAsStrings(); 735307"];
1994 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 735308"];
1995 [label="if (!args1.SequenceEqual(args2))\n                        return false; 735309"];
1996 [label="if (!args1.SequenceEqual(args2))\n                        return false; 735310"];
1997 [label="if (!args1.SequenceEqual(args2))\n                        return false; 735311"];
1998 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 735312"];
1999 [label="return true; 735313"];
2000 [label="int index = unmatched.IndexOf(d); 735314"];
2001 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 735315"];
2002 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 735316"];
2003 [label="unmatched.RemoveAt(index); 735317"];
2004 [label="if (d == null)\n                return false; 735318"];
2005 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 735319"];
2006 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 735320"];
2007 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 735321"];
2008 [label="if (_squiggledText != d._squiggledText)\n                    return false; 735322"];
2009 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 735323"];
2010 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 735324"];
2011 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 735325"];
2012 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 735326"];
2013 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 735327"];
2014 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 735328"];
2015 [label="if (d._arguments == null)\n                    return false; 735329"];
2016 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 735330"];
2017 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 735331"];
2018 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 735332"];
2019 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 735333"];
2020 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 735334"];
2021 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 735335"];
2022 [label="DiagnosticDescription.GetAssertText(expected, actual) 735336"];
2023 [label="param GetAssertText(DiagnosticDescription[] expected) 735337"];
2024 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 735338"];
2025 [label="const int CSharp = 1; 735339"];
2026 [label="const int VisualBasic = 2; 735340"];
2027 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 735341"];
2028 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 735342"];
2029 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 735343"];
2030 [label="actual.Any() && actual.First() is CSDiagnostic 735344"];
2031 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 735345"];
2032 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 735346"];
2033 [label="int indentDepth = (language == CSharp) ? 4 : 1; 735347"];
2034 [label="(language == CSharp) 735348"];
2035 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 735349"];
2036 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 735350"];
2037 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 735351"];
2038 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 735352"];
2039 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 735353"];
2040 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 735354"];
2041 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 735355"];
2042 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 735356"];
2043 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 735357"];
2044 [label="IsSortedOrEmpty(expected) 735358"];
2045 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 735359"];
2046 [label="new LinePositionComparer() 735360"];
2047 [label="param LinePositionComparer(this) 735361"];
2048 [label="Instance = new LinePositionComparer() 735362"];
2049 [label="var comparer = LinePositionComparer.Instance; 735363"];
2050 [label="DiagnosticDescription last = null; 735364"];
2051 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 735365"];
2052 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 735366"];
2053 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 735367"];
2054 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 735368"];
2055 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 735369"];
2056 [label="last = diagnostic; 735370"];
2057 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 735371"];
2058 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 735372"];
2059 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 735373"];
2060 [label="comparer.Compare(last._startPosition, diagnostic._startPosition) 735374"];
2061 [label="param Compare(LinePosition? x) 735375"];
2062 [label="param Compare(LinePosition? y) 735376"];
2063 [label="param Compare(this) 735377"];
2064 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 735378"];
2065 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 735379"];
2066 [label="if (y == null)\n                {\n                    return 1;\n                } 735380"];
2067 [label="if (y == null)\n                {\n                    return 1;\n                } 735381"];
2068 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 735382"];
2069 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 735383"];
2070 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 735384"];
2071 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 735385"];
2072 [label="return x.Value.Character.CompareTo(y.Value.Character); 735386"];
2073 [label="return x.Value.Character.CompareTo(y.Value.Character); 735387"];
2074 [label="return true; 735388"];
2075 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 735389"];
2076 [label="actual = Sort(actual); 735390"];
2077 [label="Sort(actual) 735391"];
2078 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 735392"];
2079 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 735393"];
2080 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 735394"];
2081 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 735395"];
2082 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 735396"];
2083 [label="var assertText = new StringBuilder(); 735397"];
2084 [label="assertText.AppendLine(); 735398"];
2085 [label="int i; 735399"];
2086 [label="assertText.AppendLine('Expected:'); 735400"];
2087 [label="assertText.AppendLine('Expected:'); 735401"];
2088 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 735402"];
2089 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 735403"];
2090 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 735404"];
2091 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 735405"];
2092 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 735406"];
2093 [label="GetDiagnosticDescription(d, indentDepth) 735407"];
2094 [label="param GetDiagnosticDescription(DiagnosticDescription d) 735408"];
2095 [label="param GetDiagnosticDescription(int indentDepth) 735409"];
2096 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735410"];
2097 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735411"];
2098 [label="d.ToString() 735412"];
2099 [label="param ToString(this) 735413"];
2100 [label="var sb = new StringBuilder(); 735414"];
2101 [label="sb.Append('Diagnostic('); 735415"];
2102 [label="sb.Append('Diagnostic('); 735416"];
2103 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 735417"];
2104 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 735418"];
2105 [label="sb.Append(_errorCodeType.Name); 735419"];
2106 [label="sb.Append(_errorCodeType.Name); 735420"];
2107 [label="sb.Append('.'); 735421"];
2108 [label="sb.Append('.'); 735422"];
2109 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 735423"];
2110 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 735424"];
2111 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 735425"];
2112 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 735426"];
2113 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 735427"];
2114 [label="sb.Append(', \\''); 735428"];
2115 [label="sb.Append(', \\''); 735429"];
2116 [label="sb.Append(_squiggledText); 735430"];
2117 [label="sb.Append(_squiggledText); 735431"];
2118 [label="sb.Append('''); 735432"];
2119 [label="sb.Append('''); 735433"];
2120 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 735434"];
2121 [label="sb.Append(')'); 735435"];
2122 [label="sb.Append(')'); 735436"];
2123 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 735437"];
2124 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 735438"];
2125 [label="sb.Append('.WithArguments('); 735439"];
2126 [label="sb.Append('.WithArguments('); 735440"];
2127 [label="GetArgumentsAsStrings() 735441"];
2128 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 735442"];
2129 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 735443"];
2130 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 735444"];
2131 [label="sb.Append('\\''); 735445"];
2132 [label="sb.Append('\\''); 735446"];
2133 [label="sb.Append(argumentStrings.Current); 735447"];
2134 [label="sb.Append(argumentStrings.Current); 735448"];
2135 [label="sb.Append('\\''); 735449"];
2136 [label="sb.Append('\\''); 735450"];
2137 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 735451"];
2138 [label="sb.Append(', '); 735452"];
2139 [label="sb.Append(', '); 735453"];
2140 [label="sb.Append(')'); 735454"];
2141 [label="sb.Append(')'); 735455"];
2142 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 735456"];
2143 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 735457"];
2144 [label="sb.Append('.WithLocation('); 735458"];
2145 [label="sb.Append('.WithLocation('); 735459"];
2146 [label="sb.Append(_startPosition.Value.Line + 1); 735460"];
2147 [label="sb.Append(_startPosition.Value.Line + 1); 735461"];
2148 [label="sb.Append(', '); 735462"];
2149 [label="sb.Append(', '); 735463"];
2150 [label="sb.Append(_startPosition.Value.Character + 1); 735464"];
2151 [label="sb.Append(_startPosition.Value.Character + 1); 735465"];
2152 [label="sb.Append(')'); 735466"];
2153 [label="sb.Append(')'); 735467"];
2154 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 735468"];
2155 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 735469"];
2156 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 735470"];
2157 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 735471"];
2158 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 735472"];
2159 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 735473"];
2160 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 735474"];
2161 [label="return sb.ToString(); 735475"];
2162 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735476"];
2163 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735477"];
2164 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 735478"];
2165 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 735479"];
2166 [label="param GetDiagnosticDescription(int indentDepth) 735480"];
2167 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735481"];
2168 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735482"];
2169 [label="var sb = new StringBuilder(); 735483"];
2170 [label="sb.Append('Diagnostic('); 735484"];
2171 [label="sb.Append('Diagnostic('); 735485"];
2172 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 735486"];
2173 [label="sb.Append(_errorCodeType.Name); 735487"];
2174 [label="sb.Append(_errorCodeType.Name); 735488"];
2175 [label="sb.Append('.'); 735489"];
2176 [label="sb.Append('.'); 735490"];
2177 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 735491"];
2178 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 735492"];
2179 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 735493"];
2180 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 735494"];
2181 [label="sb.Append(', \\''); 735495"];
2182 [label="sb.Append(', \\''); 735496"];
2183 [label="sb.Append(_squiggledText); 735497"];
2184 [label="sb.Append(_squiggledText); 735498"];
2185 [label="sb.Append('''); 735499"];
2186 [label="sb.Append('''); 735500"];
2187 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 735501"];
2188 [label="sb.Append(')'); 735502"];
2189 [label="sb.Append(')'); 735503"];
2190 [label="sb.Append('.WithArguments('); 735504"];
2191 [label="sb.Append('.WithArguments('); 735505"];
2192 [label="sb.Append('\\''); 735506"];
2193 [label="sb.Append(argumentStrings.Current); 735507"];
2194 [label="sb.Append(argumentStrings.Current); 735508"];
2195 [label="sb.Append('\\''); 735509"];
2196 [label="sb.Append(', '); 735510"];
2197 [label="sb.Append(')'); 735511"];
2198 [label="sb.Append(')'); 735512"];
2199 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 735513"];
2200 [label="sb.Append('.WithLocation('); 735514"];
2201 [label="sb.Append('.WithLocation('); 735515"];
2202 [label="sb.Append(_startPosition.Value.Line + 1); 735516"];
2203 [label="sb.Append(_startPosition.Value.Line + 1); 735517"];
2204 [label="sb.Append(', '); 735518"];
2205 [label="sb.Append(', '); 735519"];
2206 [label="sb.Append(_startPosition.Value.Character + 1); 735520"];
2207 [label="sb.Append(_startPosition.Value.Character + 1); 735521"];
2208 [label="sb.Append(')'); 735522"];
2209 [label="sb.Append(')'); 735523"];
2210 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 735524"];
2211 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 735525"];
2212 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 735526"];
2213 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 735527"];
2214 [label="return sb.ToString(); 735528"];
2215 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735529"];
2216 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735530"];
2217 [label="GetCommaSeparatedLines(assertText, expectedText); 735531"];
2218 [label="GetCommaSeparatedLines(assertText, expectedText); 735532"];
2219 [label="GetCommaSeparatedLines(assertText, expectedText) 735533"];
2220 [label="param GetCommaSeparatedLines(StringBuilder sb) 735534"];
2221 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 735535"];
2222 [label="int n = lines.Count; 735536"];
2223 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 735537"];
2224 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 735538"];
2225 [label="sb.Append(lines[i]); 735539"];
2226 [label="sb.Append(lines[i]); 735540"];
2227 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 735541"];
2228 [label="sb.Append(','); 735542"];
2229 [label="sb.Append(','); 735543"];
2230 [label="sb.AppendLine(); 735544"];
2231 [label="GetCommaSeparatedLines(assertText, expectedText); 735545"];
2232 [label="assertText.AppendLine('Actual:'); 735546"];
2233 [label="assertText.AppendLine('Actual:'); 735547"];
2234 [label="var actualText = ArrayBuilder<string>.GetInstance(); 735548"];
2235 [label="var e = actual.GetEnumerator(); 735549"];
2236 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 735550"];
2237 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 735551"];
2238 [label="param Compare(LinePosition? x) 735552"];
2239 [label="param Compare(LinePosition? y) 735553"];
2240 [label="param Compare(this) 735554"];
2241 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 735555"];
2242 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 735556"];
2243 [label="if (y == null)\n                {\n                    return 1;\n                } 735557"];
2244 [label="if (y == null)\n                {\n                    return 1;\n                } 735558"];
2245 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 735559"];
2246 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 735560"];
2247 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 735561"];
2248 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 735562"];
2249 [label="return x.Value.Character.CompareTo(y.Value.Character); 735563"];
2250 [label="return x.Value.Character.CompareTo(y.Value.Character); 735564"];
2251 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 735565"];
2252 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 735566"];
2253 [label="Diagnostic d = e.Current; 735567"];
2254 [label="string message = d.ToString(); 735568"];
2255 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 735569"];
2256 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 735570"];
2257 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 735571"];
2258 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 735572"];
2259 [label="Indent(assertText, indentDepth); 735573"];
2260 [label="Indent(assertText, indentDepth); 735574"];
2261 [label="Indent(assertText, indentDepth) 735575"];
2262 [label="param Indent(StringBuilder sb) 735576"];
2263 [label="param Indent(int count) 735577"];
2264 [label="sb.Append(' ', 4 * count); 735578"];
2265 [label="sb.Append(' ', 4 * count); 735579"];
2266 [label="sb.Append(' ', 4 * count); 735580"];
2267 [label="Indent(assertText, indentDepth); 735581"];
2268 [label="assertText.Append('// '); 735582"];
2269 [label="assertText.Append('// '); 735583"];
2270 [label="assertText.AppendLine(d.ToString()); 735584"];
2271 [label="assertText.AppendLine(d.ToString()); 735585"];
2272 [label="var l = d.Location; 735586"];
2273 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 735587"];
2274 [label="Indent(assertText, indentDepth); 735588"];
2275 [label="Indent(assertText, indentDepth); 735589"];
2276 [label="Indent(assertText, indentDepth) 735590"];
2277 [label="param Indent(StringBuilder sb) 735591"];
2278 [label="param Indent(int count) 735592"];
2279 [label="sb.Append(' ', 4 * count); 735593"];
2280 [label="sb.Append(' ', 4 * count); 735594"];
2281 [label="sb.Append(' ', 4 * count); 735595"];
2282 [label="Indent(assertText, indentDepth); 735596"];
2283 [label="assertText.Append('// '); 735597"];
2284 [label="assertText.Append('// '); 735598"];
2285 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 735599"];
2286 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 735600"];
2287 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 735601"];
2288 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 735602"];
2289 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 735603"];
2290 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 735604"];
2291 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 735605"];
2292 [label="param DiagnosticDescription(Diagnostic d) 735606"];
2293 [label="param DiagnosticDescription(bool errorCodeOnly) 735607"];
2294 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 735608"];
2295 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 735609"];
2296 [label="param DiagnosticDescription(this) 735610"];
2297 [label="_code 735611"];
2298 [label="_isWarningAsError 735612"];
2299 [label="_isSuppressed 735613"];
2300 [label="_squiggledText 735614"];
2301 [label="_arguments 735615"];
2302 [label="_startPosition 735616"];
2303 [label="_errorCodeType 735617"];
2304 [label="_defaultSeverityOpt 735618"];
2305 [label="_effectiveSeverityOpt 735619"];
2306 [label="_code 735620"];
2307 [label="_isWarningAsError 735621"];
2308 [label="_isSuppressed 735622"];
2309 [label="_location 735623"];
2310 [label="DiagnosticWithInfo dinfo = null; 735624"];
2311 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 735625"];
2312 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 735626"];
2313 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 735627"];
2314 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 735628"];
2315 [label="var diffDescription = description; 735629"];
2316 [label="var idx = Array.IndexOf(expected, description); 735630"];
2317 [label="var idx = Array.IndexOf(expected, description); 735631"];
2318 [label="var idx = Array.IndexOf(expected, description); 735632"];
2319 [label="var idx = Array.IndexOf(expected, description); 735633"];
2320 [label="if (d == null)\n                return false; 735634"];
2321 [label="if (d == null)\n                return false; 735635"];
2322 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 735636"];
2323 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 735637"];
2324 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 735638"];
2325 [label="if (_squiggledText != d._squiggledText)\n                    return false; 735639"];
2326 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 735640"];
2327 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 735641"];
2328 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 735642"];
2329 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 735643"];
2330 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 735644"];
2331 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 735645"];
2332 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 735646"];
2333 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 735647"];
2334 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 735648"];
2335 [label="if (d._arguments == null)\n                    return false; 735649"];
2336 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 735650"];
2337 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 735651"];
2338 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 735652"];
2339 [label="diffDescription = expected[idx]; 735653"];
2340 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 735654"];
2341 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 735655"];
2342 [label="GetDiagnosticDescription(description, indentDepth) 735656"];
2343 [label="param GetDiagnosticDescription(DiagnosticDescription d) 735657"];
2344 [label="param GetDiagnosticDescription(int indentDepth) 735658"];
2345 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735659"];
2346 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735660"];
2347 [label="var sb = new StringBuilder(); 735661"];
2348 [label="sb.Append('Diagnostic('); 735662"];
2349 [label="sb.Append('Diagnostic('); 735663"];
2350 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 735664"];
2351 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 735665"];
2352 [label="sb.Append(_errorCodeType.Name); 735666"];
2353 [label="sb.Append(_errorCodeType.Name); 735667"];
2354 [label="sb.Append('.'); 735668"];
2355 [label="sb.Append('.'); 735669"];
2356 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 735670"];
2357 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 735671"];
2358 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 735672"];
2359 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 735673"];
2360 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 735674"];
2361 [label="sb.Append(', \\''); 735675"];
2362 [label="sb.Append(', \\''); 735676"];
2363 [label="sb.Append(_squiggledText); 735677"];
2364 [label="sb.Append(_squiggledText); 735678"];
2365 [label="sb.Append('''); 735679"];
2366 [label="sb.Append('''); 735680"];
2367 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 735681"];
2368 [label="sb.Append(')'); 735682"];
2369 [label="sb.Append(')'); 735683"];
2370 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 735684"];
2371 [label="sb.Append('.WithArguments('); 735685"];
2372 [label="sb.Append('.WithArguments('); 735686"];
2373 [label="sb.Append('\\''); 735687"];
2374 [label="sb.Append('\\''); 735688"];
2375 [label="sb.Append(argumentStrings.Current); 735689"];
2376 [label="sb.Append(argumentStrings.Current); 735690"];
2377 [label="sb.Append('\\''); 735691"];
2378 [label="sb.Append('\\''); 735692"];
2379 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 735693"];
2380 [label="sb.Append(', '); 735694"];
2381 [label="sb.Append(', '); 735695"];
2382 [label="sb.Append(')'); 735696"];
2383 [label="sb.Append(')'); 735697"];
2384 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 735698"];
2385 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 735699"];
2386 [label="sb.Append('.WithLocation('); 735700"];
2387 [label="sb.Append('.WithLocation('); 735701"];
2388 [label="sb.Append(_startPosition.Value.Line + 1); 735702"];
2389 [label="sb.Append(_startPosition.Value.Line + 1); 735703"];
2390 [label="sb.Append(', '); 735704"];
2391 [label="sb.Append(', '); 735705"];
2392 [label="sb.Append(_startPosition.Value.Character + 1); 735706"];
2393 [label="sb.Append(_startPosition.Value.Character + 1); 735707"];
2394 [label="sb.Append(')'); 735708"];
2395 [label="sb.Append(')'); 735709"];
2396 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 735710"];
2397 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 735711"];
2398 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 735712"];
2399 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 735713"];
2400 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 735714"];
2401 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 735715"];
2402 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 735716"];
2403 [label="return sb.ToString(); 735717"];
2404 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735718"];
2405 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735719"];
2406 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 735720"];
2407 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 735721"];
2408 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 735722"];
2409 [label="GetDiagnosticDescription(diffDescription, indentDepth) 735723"];
2410 [label="param GetDiagnosticDescription(DiagnosticDescription d) 735724"];
2411 [label="param GetDiagnosticDescription(int indentDepth) 735725"];
2412 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735726"];
2413 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735727"];
2414 [label="var sb = new StringBuilder(); 735728"];
2415 [label="sb.Append('Diagnostic('); 735729"];
2416 [label="sb.Append('Diagnostic('); 735730"];
2417 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 735731"];
2418 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 735732"];
2419 [label="sb.Append(_errorCodeType.Name); 735733"];
2420 [label="sb.Append(_errorCodeType.Name); 735734"];
2421 [label="sb.Append('.'); 735735"];
2422 [label="sb.Append('.'); 735736"];
2423 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 735737"];
2424 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 735738"];
2425 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 735739"];
2426 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 735740"];
2427 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 735741"];
2428 [label="sb.Append(', \\''); 735742"];
2429 [label="sb.Append(', \\''); 735743"];
2430 [label="sb.Append(_squiggledText); 735744"];
2431 [label="sb.Append(_squiggledText); 735745"];
2432 [label="sb.Append('''); 735746"];
2433 [label="sb.Append('''); 735747"];
2434 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 735748"];
2435 [label="sb.Append(')'); 735749"];
2436 [label="sb.Append(')'); 735750"];
2437 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 735751"];
2438 [label="sb.Append('.WithArguments('); 735752"];
2439 [label="sb.Append('.WithArguments('); 735753"];
2440 [label="sb.Append('\\''); 735754"];
2441 [label="sb.Append('\\''); 735755"];
2442 [label="sb.Append(argumentStrings.Current); 735756"];
2443 [label="sb.Append(argumentStrings.Current); 735757"];
2444 [label="sb.Append('\\''); 735758"];
2445 [label="sb.Append('\\''); 735759"];
2446 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 735760"];
2447 [label="sb.Append(', '); 735761"];
2448 [label="sb.Append(', '); 735762"];
2449 [label="sb.Append(')'); 735763"];
2450 [label="sb.Append(')'); 735764"];
2451 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 735765"];
2452 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 735766"];
2453 [label="sb.Append('.WithLocation('); 735767"];
2454 [label="sb.Append('.WithLocation('); 735768"];
2455 [label="sb.Append(_startPosition.Value.Line + 1); 735769"];
2456 [label="sb.Append(_startPosition.Value.Line + 1); 735770"];
2457 [label="sb.Append(', '); 735771"];
2458 [label="sb.Append(', '); 735772"];
2459 [label="sb.Append(_startPosition.Value.Character + 1); 735773"];
2460 [label="sb.Append(_startPosition.Value.Character + 1); 735774"];
2461 [label="sb.Append(')'); 735775"];
2462 [label="sb.Append(')'); 735776"];
2463 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 735777"];
2464 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 735778"];
2465 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 735779"];
2466 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 735780"];
2467 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 735781"];
2468 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 735782"];
2469 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 735783"];
2470 [label="return sb.ToString(); 735784"];
2471 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735785"];
2472 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735786"];
2473 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 735787"];
2474 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 735788"];
2475 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 735789"];
2476 [label="assertText.AppendLine(','); 735790"];
2477 [label="assertText.AppendLine(','); 735791"];
2478 [label="Indent(assertText, indentDepth); 735792"];
2479 [label="Indent(assertText, indentDepth); 735793"];
2480 [label="Indent(assertText, indentDepth) 735794"];
2481 [label="param Indent(StringBuilder sb) 735795"];
2482 [label="param Indent(int count) 735796"];
2483 [label="sb.Append(' ', 4 * count); 735797"];
2484 [label="sb.Append(' ', 4 * count); 735798"];
2485 [label="Indent(assertText, indentDepth); 735799"];
2486 [label="assertText.Append('// '); 735800"];
2487 [label="Indent(assertText, indentDepth); 735801"];
2488 [label="Indent(assertText, indentDepth); 735802"];
2489 [label="Indent(assertText, indentDepth) 735803"];
2490 [label="param Indent(StringBuilder sb) 735804"];
2491 [label="param Indent(int count) 735805"];
2492 [label="sb.Append(' ', 4 * count); 735806"];
2493 [label="sb.Append(' ', 4 * count); 735807"];
2494 [label="Indent(assertText, indentDepth); 735808"];
2495 [label="assertText.Append('// '); 735809"];
2496 [label="_code 735810"];
2497 [label="_isWarningAsError 735811"];
2498 [label="_isSuppressed 735812"];
2499 [label="_squiggledText 735813"];
2500 [label="_arguments 735814"];
2501 [label="_startPosition 735815"];
2502 [label="_errorCodeType 735816"];
2503 [label="_defaultSeverityOpt 735817"];
2504 [label="_effectiveSeverityOpt 735818"];
2505 [label="_code 735819"];
2506 [label="DiagnosticWithInfo dinfo = null; 735820"];
2507 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 735821"];
2508 [label="var diffDescription = description; 735822"];
2509 [label="if (d == null)\n                return false; 735823"];
2510 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 735824"];
2511 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 735825"];
2512 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 735826"];
2513 [label="if (_squiggledText != d._squiggledText)\n                    return false; 735827"];
2514 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 735828"];
2515 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 735829"];
2516 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 735830"];
2517 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 735831"];
2518 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 735832"];
2519 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 735833"];
2520 [label="if (d._arguments == null)\n                    return false; 735834"];
2521 [label="return false; 735835"];
2522 [label="if (d == null)\n                return false; 735836"];
2523 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 735837"];
2524 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 735838"];
2525 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 735839"];
2526 [label="if (_squiggledText != d._squiggledText)\n                    return false; 735840"];
2527 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 735841"];
2528 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 735842"];
2529 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 735843"];
2530 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 735844"];
2531 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 735845"];
2532 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 735846"];
2533 [label="if (d._arguments == null)\n                    return false; 735847"];
2534 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 735848"];
2535 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 735849"];
2536 [label="param GetDiagnosticDescription(int indentDepth) 735850"];
2537 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735851"];
2538 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735852"];
2539 [label="var sb = new StringBuilder(); 735853"];
2540 [label="sb.Append('Diagnostic('); 735854"];
2541 [label="sb.Append('Diagnostic('); 735855"];
2542 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 735856"];
2543 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 735857"];
2544 [label="sb.Append(_errorCodeType.Name); 735858"];
2545 [label="sb.Append(_errorCodeType.Name); 735859"];
2546 [label="sb.Append('.'); 735860"];
2547 [label="sb.Append('.'); 735861"];
2548 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 735862"];
2549 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 735863"];
2550 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 735864"];
2551 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 735865"];
2552 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 735866"];
2553 [label="sb.Append(', \\''); 735867"];
2554 [label="sb.Append(', \\''); 735868"];
2555 [label="sb.Append(_squiggledText); 735869"];
2556 [label="sb.Append(_squiggledText); 735870"];
2557 [label="sb.Append('''); 735871"];
2558 [label="sb.Append('''); 735872"];
2559 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 735873"];
2560 [label="sb.Append(')'); 735874"];
2561 [label="sb.Append(')'); 735875"];
2562 [label="sb.Append('.WithArguments('); 735876"];
2563 [label="sb.Append('.WithArguments('); 735877"];
2564 [label="sb.Append('\\''); 735878"];
2565 [label="sb.Append('\\''); 735879"];
2566 [label="sb.Append(argumentStrings.Current); 735880"];
2567 [label="sb.Append(argumentStrings.Current); 735881"];
2568 [label="sb.Append('\\''); 735882"];
2569 [label="sb.Append('\\''); 735883"];
2570 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 735884"];
2571 [label="sb.Append(', '); 735885"];
2572 [label="sb.Append(', '); 735886"];
2573 [label="sb.Append(')'); 735887"];
2574 [label="sb.Append(')'); 735888"];
2575 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 735889"];
2576 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 735890"];
2577 [label="sb.Append('.WithLocation('); 735891"];
2578 [label="sb.Append('.WithLocation('); 735892"];
2579 [label="sb.Append(_startPosition.Value.Line + 1); 735893"];
2580 [label="sb.Append(_startPosition.Value.Line + 1); 735894"];
2581 [label="sb.Append(', '); 735895"];
2582 [label="sb.Append(', '); 735896"];
2583 [label="sb.Append(_startPosition.Value.Character + 1); 735897"];
2584 [label="sb.Append(_startPosition.Value.Character + 1); 735898"];
2585 [label="sb.Append(')'); 735899"];
2586 [label="sb.Append(')'); 735900"];
2587 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 735901"];
2588 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 735902"];
2589 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 735903"];
2590 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 735904"];
2591 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 735905"];
2592 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 735906"];
2593 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 735907"];
2594 [label="return sb.ToString(); 735908"];
2595 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735909"];
2596 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735910"];
2597 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 735911"];
2598 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 735912"];
2599 [label="param GetDiagnosticDescription(int indentDepth) 735913"];
2600 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735914"];
2601 [label="sb.Append(_errorCodeType.Name); 735915"];
2602 [label="sb.Append(_errorCodeType.Name); 735916"];
2603 [label="sb.Append('.'); 735917"];
2604 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 735918"];
2605 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 735919"];
2606 [label="sb.Append(', \\''); 735920"];
2607 [label="sb.Append(_squiggledText); 735921"];
2608 [label="sb.Append(_squiggledText); 735922"];
2609 [label="sb.Append('''); 735923"];
2610 [label="sb.Append(')'); 735924"];
2611 [label="sb.Append('.WithArguments('); 735925"];
2612 [label="sb.Append('\\''); 735926"];
2613 [label="sb.Append(argumentStrings.Current); 735927"];
2614 [label="sb.Append('\\''); 735928"];
2615 [label="sb.Append(', '); 735929"];
2616 [label="sb.Append(')'); 735930"];
2617 [label="sb.Append('.WithLocation('); 735931"];
2618 [label="sb.Append(_startPosition.Value.Line + 1); 735932"];
2619 [label="sb.Append(', '); 735933"];
2620 [label="sb.Append(_startPosition.Value.Character + 1); 735934"];
2621 [label="sb.Append(')'); 735935"];
2622 [label="return sb.ToString(); 735936"];
2623 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735937"];
2624 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 735938"];
2625 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 735939"];
2626 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 735940"];
2627 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 735941"];
2628 [label="assertText.AppendLine(); 735942"];
2629 [label="assertText.AppendLine('Diff:'); 735943"];
2630 [label="assertText.AppendLine('Diff:'); 735944"];
2631 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 735945"];
2632 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 735946"];
2633 [label="new[] { '\\r', '\\n' } 735947"];
2634 [label="'\\r' 735948"];
2635 [label="'\\n' 735949"];
2636 [label="new[] { '\\r', '\\n' } 735950"];
2637 [label="new[] { '\\r', '\\n' } 735951"];
2638 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 735952"];
2639 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 735953"];
2640 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 735954"];
2641 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 735955"];
2642 [label="param DiffReport(IEnumerable<T> expected) 735956"];
2643 [label="param DiffReport(IEnumerable<T> actual) 735957"];
2644 [label="param DiffReport(string separator) 735958"];
2645 [label="param DiffReport(IEqualityComparer<T> comparer = null) 735959"];
2646 [label="param DiffReport(Func<T, string> toString = null) 735960"];
2647 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 735961"];
2648 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 735962"];
2649 [label="(comparer != null) 735963"];
2650 [label="EqualityComparer<T>.Default 735964"];
2651 [label="new LCS<T>(EqualityComparer<T>.Default) 735965"];
2652 [label="param LCS(IEqualityComparer<T> comparer) 735966"];
2653 [label="param LCS(this) 735967"];
2654 [label="1 735968"];
2655 [label="DeleteCost = 1 735969"];
2656 [label="1 735970"];
2657 [label="InsertCost = 1 735971"];
2658 [label="2 735972"];
2659 [label="UpdateCost = 2 735973"];
2660 [label="param LongestCommonSubsequence(this) 735974"];
2661 [label="_comparer 735975"];
2662 [label="_comparer 735976"];
2663 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 735977"];
2664 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 735978"];
2665 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 735979"];
2666 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 735980"];
2667 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 735981"];
2668 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 735982"];
2669 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 735983"];
2670 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 735984"];
2671 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 735985"];
2672 [label="lcs.CalculateDiff(expectedList, actualList, toString) 735986"];
2673 [label="param CalculateDiff(IList<T> sequenceA) 735987"];
2674 [label="param CalculateDiff(IList<T> sequenceB) 735988"];
2675 [label="param CalculateDiff(Func<T, string> toString) 735989"];
2676 [label="param CalculateDiff(this) 735990"];
2677 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 735991"];
2678 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 735992"];
2679 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 735993"];
2680 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 735994"];
2681 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 735995"];
2682 [label="param GetEdits(TSequence sequenceA) 735996"];
2683 [label="param GetEdits(int lengthA) 735997"];
2684 [label="param GetEdits(TSequence sequenceB) 735998"];
2685 [label="param GetEdits(int lengthB) 735999"];
2686 [label="param GetEdits(this) 736000"];
2687 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 736001"];
2688 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 736002"];
2689 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 736003"];
2690 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 736004"];
2691 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 736005"];
2692 [label="param ComputeCostMatrix(TSequence sequenceA) 736006"];
2693 [label="param ComputeCostMatrix(int lengthA) 736007"];
2694 [label="param ComputeCostMatrix(TSequence sequenceB) 736008"];
2695 [label="param ComputeCostMatrix(int lengthB) 736009"];
2696 [label="param ComputeCostMatrix(this) 736010"];
2697 [label="var la = lengthA + 1; 736011"];
2698 [label="var la = lengthA + 1; 736012"];
2699 [label="var lb = lengthB + 1; 736013"];
2700 [label="var lb = lengthB + 1; 736014"];
2701 [label="var d = new int[la, lb]; 736015"];
2702 [label="d[0, 0] = 0; 736016"];
2703 [label="d[0, 0] 736017"];
2704 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 736018"];
2705 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 736019"];
2706 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 736020"];
2707 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 736021"];
2708 [label="d[i, 0] 736022"];
2709 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 736023"];
2710 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 736024"];
2711 [label="d[0, j] = d[0, j - 1] + InsertCost; 736025"];
2712 [label="d[0, j] = d[0, j - 1] + InsertCost; 736026"];
2713 [label="d[0, j] 736027"];
2714 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 736028"];
2715 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 736029"];
2716 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 736030"];
2717 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 736031"];
2718 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 736032"];
2719 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 736033"];
2720 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 736034"];
2721 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 736035"];
2722 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 736036"];
2723 [label="param ItemsEqual(IList<T> sequenceA) 736037"];
2724 [label="param ItemsEqual(int indexA) 736038"];
2725 [label="param ItemsEqual(IList<T> sequenceB) 736039"];
2726 [label="param ItemsEqual(int indexB) 736040"];
2727 [label="param ItemsEqual(this) 736041"];
2728 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 736042"];
2729 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 736043"];
2730 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 736044"];
2731 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 736045"];
2732 [label="int m2 = d[i - 1, j] + DeleteCost; 736046"];
2733 [label="int m2 = d[i - 1, j] + DeleteCost; 736047"];
2734 [label="int m3 = d[i, j - 1] + InsertCost; 736048"];
2735 [label="int m3 = d[i, j - 1] + InsertCost; 736049"];
2736 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 736050"];
2737 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 736051"];
2738 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 736052"];
2739 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 736053"];
2740 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 736054"];
2741 [label="d[i, j] 736055"];
2742 [label="return d; 736056"];
2743 [label="int i = lengthA; 736057"];
2744 [label="int j = lengthB; 736058"];
2745 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 736059"];
2746 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 736060"];
2747 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 736061"];
2748 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 736062"];
2749 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 736063"];
2750 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 736064"];
2751 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 736065"];
2752 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 736066"];
2753 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 736067"];
2754 [label="i--; 736068"];
2755 [label="j--; 736069"];
2756 [label="yield return new Edit(EditKind.Update, i, j); 736070"];
2757 [label="yield return new Edit(EditKind.Update, i, j); 736071"];
2758 [label="yield return new Edit(EditKind.Update, i, j); 736072"];
2759 [label="yield return new Edit(EditKind.Update, i, j); 736073"];
2760 [label="new Edit(EditKind.Update, i, j) 736074"];
2761 [label="param Edit(EditKind kind) 736075"];
2762 [label="param Edit(int indexA) 736076"];
2763 [label="param Edit(int indexB) 736077"];
2764 [label="param Edit(this) 736078"];
2765 [label="this.Kind 736079"];
2766 [label="this.IndexA 736080"];
2767 [label="this.IndexB 736081"];
2768 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 736082"];
2769 [label="yield return new Edit(EditKind.Update, i, j); 736083"];
2770 [label="yield return new Edit(EditKind.Update, i, j); 736084"];
2771 [label="new Edit(EditKind.Update, i, j) 736085"];
2772 [label="param Edit(EditKind kind) 736086"];
2773 [label="param Edit(int indexA) 736087"];
2774 [label="param Edit(int indexB) 736088"];
2775 [label="param Edit(this) 736089"];
2776 [label="this.Kind 736090"];
2777 [label="this.IndexA 736091"];
2778 [label="this.IndexB 736092"];
2779 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 736093"];
2780 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 736094"];
2781 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 736095"];
2782 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 736096"];
2783 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 736097"];
2784 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 736098"];
2785 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 736099"];
2786 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 736100"];
2787 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 736101"];
2788 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 736102"];
2789 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 736103"];
2790 [label="actualText.Free(); 736104"];
2791 [label="expectedText.Free(); 736105"];
2792 [label="return assertText.ToString(); 736106"];
2793 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 736107"];
2794 [label="diagnostics.Verify(expected); 736108"];
2795 [label="VerifyAssemblyIds(c, diagnostics); 736109"];
2796 [label="VerifyAssemblyIds(c, diagnostics); 736110"];
2797 [label="VerifyAssemblyIds(c, diagnostics) 736111"];
2798 [label="param VerifyAssemblyIds(TCompilation c) 736112"];
2799 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 736113"];
2800 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 736114"];
2801 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 736115"];
2802 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 736116"];
2803 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 736117"];
2804 [label="CustomAssert.True(assemblyIds.IsEmpty); 736118"];
2805 [label="CustomAssert.True(assemblyIds.IsEmpty); 736119"];
2806 [label="VerifyAssemblyIds(c, diagnostics); 736120"];
2807 [label="return c; 736121"];
2 -> 0;
2 -> 1;
3 -> 1;
5 -> 4;
7 -> 6;
9 -> 8;
10 -> 3;
12 -> 11;
14 -> 13;
16 -> 15;
18 -> 17;
20 -> 19;
22 -> 21;
24 -> 23;
26 -> 25;
28 -> 27;
30 -> 29;
32 -> 31;
34 -> 33;
36 -> 35;
38 -> 37;
40 -> 39;
42 -> 41;
44 -> 43;
46 -> 45;
48 -> 47;
49 -> 0;
50 -> 0;
51 -> 49;
51 -> 50;
51 -> 0;
52 -> 51;
53 -> 0;
54 -> 0;
55 -> 53;
55 -> 54;
55 -> 51;
56 -> 55;
57 -> 0;
58 -> 57;
59 -> 58;
59 -> 57;
60 -> 59;
62 -> 0;
63 -> 61;
63 -> 62;
64 -> 63;
65 -> 0;
66 -> 0;
67 -> 65;
67 -> 66;
67 -> 0;
68 -> 67;
69 -> 0;
70 -> 0;
71 -> 69;
71 -> 70;
71 -> 55;
72 -> 71;
73 -> 0;
74 -> 0;
75 -> 73;
75 -> 74;
75 -> 71;
76 -> 75;
77 -> 0;
78 -> 0;
79 -> 77;
79 -> 78;
79 -> 75;
80 -> 79;
81 -> 0;
82 -> 0;
83 -> 81;
83 -> 82;
83 -> 0;
84 -> 83;
85 -> 0;
86 -> 0;
87 -> 85;
87 -> 86;
87 -> 0;
88 -> 87;
89 -> 0;
90 -> 0;
91 -> 89;
91 -> 90;
91 -> 0;
92 -> 91;
93 -> 0;
94 -> 0;
95 -> 93;
95 -> 94;
95 -> 79;
96 -> 95;
97 -> 0;
98 -> 0;
99 -> 97;
99 -> 98;
99 -> 0;
100 -> 99;
102 -> 0;
103 -> 101;
103 -> 102;
104 -> 103;
105 -> 0;
106 -> 0;
107 -> 105;
107 -> 106;
107 -> 95;
108 -> 107;
109 -> 0;
110 -> 0;
111 -> 109;
111 -> 110;
111 -> 0;
112 -> 111;
113 -> 0;
114 -> 0;
115 -> 113;
115 -> 114;
115 -> 0;
116 -> 115;
117 -> 0;
118 -> 0;
119 -> 117;
119 -> 118;
119 -> 0;
120 -> 119;
121 -> 0;
122 -> 0;
123 -> 121;
123 -> 122;
123 -> 0;
124 -> 123;
125 -> 0;
126 -> 0;
127 -> 125;
127 -> 126;
127 -> 0;
128 -> 127;
129 -> 0;
130 -> 0;
131 -> 129;
131 -> 130;
131 -> 107;
132 -> 131;
133 -> 0;
134 -> 0;
135 -> 133;
135 -> 134;
135 -> 131;
136 -> 135;
137 -> 0;
138 -> 0;
139 -> 137;
139 -> 138;
139 -> 135;
140 -> 139;
141 -> 0;
142 -> 0;
143 -> 141;
143 -> 142;
143 -> 139;
144 -> 143;
145 -> 0;
146 -> 0;
147 -> 145;
147 -> 146;
147 -> 0;
148 -> 147;
149 -> 0;
150 -> 0;
151 -> 149;
151 -> 150;
151 -> 0;
152 -> 151;
153 -> 0;
154 -> 0;
155 -> 153;
155 -> 154;
155 -> 143;
156 -> 155;
157 -> 0;
158 -> 0;
159 -> 157;
159 -> 158;
159 -> 0;
160 -> 159;
161 -> 0;
162 -> 0;
163 -> 161;
163 -> 162;
163 -> 0;
164 -> 163;
165 -> 0;
166 -> 0;
167 -> 165;
167 -> 166;
167 -> 0;
168 -> 167;
169 -> 0;
170 -> 0;
171 -> 169;
171 -> 170;
171 -> 155;
172 -> 171;
173 -> 0;
174 -> 0;
175 -> 173;
175 -> 174;
175 -> 0;
176 -> 175;
177 -> 0;
178 -> 0;
179 -> 177;
179 -> 178;
179 -> 0;
180 -> 179;
182 -> 181;
184 -> 182;
184 -> 183;
185 -> 184;
187 -> 0;
187 -> 186;
188 -> 187;
188 -> 0;
189 -> 188;
191 -> 190;
193 -> 192;
195 -> 194;
197 -> 196;
198 -> 10;
199 -> 198;
200 -> 199;
201 -> 200;
201 -> 199;
202 -> 1;
202 -> 2;
202 -> 201;
203 -> 1;
204 -> 1;
205 -> 204;
205 -> 1;
206 -> 1;
207 -> 205;
207 -> 206;
208 -> 207;
208 -> 206;
209 -> 206;
210 -> 208;
210 -> 209;
211 -> 209;
212 -> 210;
212 -> 211;
212 -> 209;
213 -> 209;
213 -> 1;
214 -> 1;
215 -> 1;
216 -> 213;
216 -> 215;
217 -> 214;
217 -> 215;
218 -> 214;
218 -> 215;
219 -> 214;
219 -> 215;
220 -> 214;
220 -> 215;
221 -> 214;
221 -> 215;
222 -> 214;
222 -> 215;
223 -> 214;
223 -> 215;
224 -> 216;
224 -> 215;
225 -> 220;
225 -> 215;
226 -> 217;
226 -> 215;
227 -> 215;
228 -> 225;
228 -> 227;
229 -> 226;
229 -> 227;
230 -> 228;
230 -> 227;
231 -> 227;
232 -> 230;
232 -> 231;
233 -> 232;
233 -> 231;
234 -> 233;
235 -> 0;
235 -> 234;
236 -> 235;
237 -> 236;
238 -> 236;
239 -> 0;
239 -> 238;
240 -> 239;
240 -> 237;
240 -> 236;
241 -> 240;
241 -> 234;
242 -> 227;
243 -> 229;
243 -> 242;
243 -> 227;
244 -> 241;
244 -> 243;
245 -> 218;
245 -> 215;
246 -> 219;
246 -> 215;
247 -> 221;
247 -> 215;
248 -> 222;
248 -> 215;
249 -> 223;
249 -> 215;
250 -> 215;
251 -> 224;
251 -> 250;
252 -> 244;
252 -> 250;
253 -> 245;
253 -> 250;
254 -> 246;
254 -> 250;
255 -> 247;
255 -> 250;
256 -> 248;
256 -> 250;
257 -> 249;
257 -> 250;
258 -> 251;
258 -> 250;
259 -> 252;
259 -> 250;
260 -> 253;
260 -> 250;
261 -> 254;
261 -> 250;
262 -> 255;
262 -> 250;
263 -> 256;
263 -> 250;
264 -> 257;
264 -> 250;
265 -> 250;
266 -> 265;
266 -> 250;
267 -> 250;
268 -> 258;
268 -> 267;
269 -> 259;
269 -> 267;
270 -> 260;
270 -> 267;
271 -> 261;
271 -> 267;
272 -> 262;
272 -> 267;
273 -> 263;
273 -> 267;
274 -> 264;
274 -> 267;
275 -> 266;
275 -> 267;
276 -> 271;
276 -> 267;
277 -> 273;
277 -> 267;
278 -> 267;
279 -> 276;
279 -> 278;
280 -> 277;
280 -> 278;
281 -> 268;
281 -> 278;
282 -> 281;
282 -> 212;
282 -> 278;
283 -> 282;
284 -> 280;
284 -> 282;
285 -> 279;
285 -> 282;
286 -> 282;
287 -> 283;
287 -> 286;
288 -> 284;
288 -> 286;
289 -> 285;
289 -> 286;
290 -> 283;
290 -> 286;
291 -> 286;
292 -> 289;
292 -> 291;
292 -> 286;
293 -> 0;
294 -> 0;
296 -> 293;
296 -> 294;
296 -> 295;
297 -> 296;
298 -> 0;
299 -> 297;
299 -> 296;
299 -> 298;
300 -> 299;
301 -> 0;
302 -> 297;
302 -> 296;
302 -> 301;
303 -> 302;
304 -> 0;
305 -> 297;
305 -> 296;
305 -> 304;
306 -> 305;
307 -> 0;
308 -> 297;
308 -> 296;
308 -> 307;
309 -> 308;
310 -> 0;
311 -> 297;
311 -> 296;
311 -> 310;
312 -> 311;
313 -> 0;
314 -> 297;
314 -> 296;
314 -> 313;
315 -> 314;
316 -> 0;
317 -> 297;
317 -> 296;
317 -> 316;
318 -> 317;
319 -> 0;
320 -> 297;
320 -> 296;
320 -> 319;
321 -> 320;
322 -> 0;
323 -> 297;
323 -> 296;
323 -> 322;
324 -> 323;
325 -> 0;
326 -> 297;
326 -> 296;
326 -> 325;
327 -> 326;
328 -> 0;
329 -> 297;
329 -> 296;
329 -> 328;
330 -> 329;
331 -> 297;
334 -> 331;
334 -> 333;
335 -> 332;
335 -> 333;
336 -> 333;
337 -> 334;
337 -> 296;
337 -> 333;
338 -> 333;
339 -> 335;
339 -> 333;
340 -> 336;
340 -> 333;
341 -> 339;
341 -> 340;
341 -> 333;
342 -> 341;
342 -> 338;
342 -> 333;
343 -> 337;
343 -> 338;
343 -> 296;
343 -> 342;
343 -> 341;
343 -> 333;
344 -> 343;
345 -> 0;
346 -> 345;
348 -> 346;
348 -> 347;
349 -> 297;
349 -> 296;
349 -> 348;
350 -> 349;
351 -> 0;
352 -> 351;
353 -> 297;
353 -> 296;
353 -> 352;
354 -> 353;
355 -> 0;
356 -> 297;
356 -> 296;
356 -> 355;
357 -> 356;
358 -> 321;
360 -> 359;
361 -> 0;
362 -> 0;
363 -> 0;
365 -> 361;
365 -> 362;
365 -> 363;
365 -> 364;
366 -> 360;
367 -> 365;
367 -> 366;
367 -> 359;
368 -> 367;
372 -> 369;
372 -> 370;
372 -> 371;
373 -> 303;
373 -> 296;
373 -> 302;
373 -> 369;
373 -> 372;
374 -> 373;
375 -> 315;
376 -> 324;
377 -> 324;
378 -> 321;
379 -> 0;
380 -> 0;
382 -> 379;
382 -> 381;
383 -> 380;
383 -> 381;
384 -> 381;
385 -> 382;
385 -> 381;
386 -> 383;
386 -> 381;
387 -> 0;
387 -> 381;
388 -> 384;
388 -> 381;
389 -> 381;
390 -> 385;
390 -> 386;
390 -> 387;
390 -> 388;
390 -> 389;
390 -> 381;
391 -> 390;
392 -> 0;
393 -> 0;
395 -> 392;
395 -> 394;
396 -> 393;
396 -> 394;
397 -> 394;
398 -> 395;
398 -> 394;
399 -> 396;
399 -> 394;
400 -> 0;
400 -> 394;
401 -> 397;
401 -> 394;
402 -> 394;
403 -> 398;
403 -> 399;
403 -> 400;
403 -> 401;
403 -> 402;
403 -> 394;
404 -> 403;
406 -> 391;
406 -> 390;
406 -> 405;
407 -> 406;
409 -> 404;
409 -> 403;
409 -> 408;
410 -> 409;
411 -> 0;
412 -> 0;
414 -> 411;
414 -> 413;
415 -> 412;
415 -> 413;
416 -> 413;
417 -> 414;
417 -> 413;
418 -> 415;
418 -> 413;
419 -> 0;
419 -> 413;
420 -> 416;
420 -> 413;
421 -> 413;
422 -> 417;
422 -> 418;
422 -> 419;
422 -> 420;
422 -> 421;
422 -> 413;
423 -> 422;
424 -> 0;
425 -> 0;
427 -> 424;
427 -> 426;
428 -> 425;
428 -> 426;
429 -> 426;
430 -> 427;
430 -> 426;
431 -> 428;
431 -> 426;
432 -> 0;
432 -> 426;
433 -> 429;
433 -> 426;
434 -> 426;
435 -> 430;
435 -> 431;
435 -> 432;
435 -> 433;
435 -> 434;
435 -> 426;
436 -> 435;
437 -> 0;
438 -> 0;
440 -> 437;
440 -> 439;
441 -> 438;
441 -> 439;
442 -> 439;
443 -> 440;
443 -> 439;
444 -> 441;
444 -> 439;
445 -> 0;
445 -> 439;
446 -> 442;
446 -> 439;
447 -> 439;
448 -> 443;
448 -> 444;
448 -> 445;
448 -> 446;
448 -> 447;
448 -> 439;
449 -> 448;
450 -> 0;
451 -> 0;
453 -> 450;
453 -> 452;
454 -> 451;
454 -> 452;
455 -> 452;
456 -> 453;
456 -> 452;
457 -> 454;
457 -> 452;
458 -> 0;
458 -> 452;
459 -> 455;
459 -> 452;
460 -> 452;
461 -> 456;
461 -> 457;
461 -> 458;
461 -> 459;
461 -> 460;
461 -> 452;
462 -> 461;
463 -> 0;
464 -> 0;
466 -> 463;
466 -> 465;
467 -> 464;
467 -> 465;
468 -> 465;
469 -> 466;
469 -> 465;
470 -> 467;
470 -> 465;
471 -> 0;
471 -> 465;
472 -> 468;
472 -> 465;
473 -> 465;
474 -> 469;
474 -> 470;
474 -> 471;
474 -> 472;
474 -> 473;
474 -> 465;
475 -> 474;
476 -> 0;
477 -> 0;
479 -> 476;
479 -> 478;
480 -> 477;
480 -> 478;
481 -> 478;
482 -> 479;
482 -> 478;
483 -> 480;
483 -> 478;
484 -> 0;
484 -> 478;
485 -> 481;
485 -> 478;
486 -> 478;
487 -> 482;
487 -> 483;
487 -> 484;
487 -> 485;
487 -> 486;
487 -> 478;
488 -> 487;
490 -> 391;
490 -> 390;
490 -> 489;
491 -> 490;
493 -> 404;
493 -> 403;
493 -> 492;
494 -> 493;
496 -> 423;
496 -> 422;
496 -> 495;
497 -> 496;
499 -> 436;
499 -> 435;
499 -> 498;
500 -> 499;
501 -> 0;
502 -> 391;
502 -> 390;
502 -> 501;
502 -> 0;
503 -> 502;
504 -> 0;
505 -> 404;
505 -> 403;
505 -> 504;
505 -> 0;
506 -> 505;
507 -> 0;
508 -> 475;
508 -> 474;
508 -> 507;
508 -> 0;
509 -> 508;
510 -> 0;
511 -> 423;
511 -> 422;
511 -> 510;
511 -> 0;
512 -> 511;
513 -> 0;
514 -> 0;
514 -> 513;
515 -> 514;
516 -> 297;
516 -> 292;
517 -> 287;
517 -> 286;
518 -> 0;
518 -> 286;
519 -> 518;
519 -> 290;
519 -> 286;
520 -> 286;
521 -> 517;
521 -> 519;
521 -> 520;
521 -> 0;
521 -> 286;
522 -> 521;
522 -> 286;
523 -> 516;
523 -> 286;
524 -> 288;
524 -> 286;
525 -> 286;
526 -> 522;
526 -> 523;
526 -> 524;
526 -> 525;
526 -> 521;
526 -> 296;
526 -> 286;
527 -> 286;
528 -> 526;
528 -> 527;
529 -> 527;
530 -> 527;
531 -> 528;
531 -> 526;
531 -> 530;
531 -> 527;
532 -> 529;
532 -> 527;
533 -> 527;
534 -> 531;
534 -> 526;
534 -> 530;
534 -> 532;
534 -> 533;
534 -> 529;
534 -> 527;
535 -> 527;
536 -> 535;
536 -> 529;
536 -> 527;
537 -> 529;
537 -> 527;
538 -> 527;
539 -> 537;
539 -> 538;
539 -> 529;
539 -> 536;
539 -> 527;
540 -> 528;
540 -> 527;
541 -> 540;
541 -> 283;
541 -> 282;
542 -> 283;
542 -> 267;
543 -> 267;
544 -> 270;
544 -> 543;
544 -> 267;
545 -> 542;
545 -> 544;
546 -> 544;
547 -> 545;
547 -> 546;
547 -> 283;
547 -> 541;
547 -> 526;
547 -> 544;
548 -> 547;
548 -> 544;
549 -> 391;
549 -> 548;
550 -> 0;
550 -> 267;
551 -> 275;
551 -> 267;
552 -> 272;
552 -> 542;
552 -> 269;
552 -> 549;
552 -> 267;
553 -> 552;
553 -> 267;
554 -> 267;
555 -> 553;
555 -> 554;
556 -> 0;
556 -> 554;
557 -> 556;
558 -> 267;
559 -> 552;
559 -> 283;
559 -> 541;
559 -> 526;
559 -> 240;
559 -> 0;
559 -> 390;
559 -> 237;
559 -> 267;
560 -> 267;
561 -> 560;
562 -> 559;
562 -> 561;
562 -> 267;
563 -> 562;
563 -> 267;
564 -> 267;
565 -> 563;
565 -> 564;
566 -> 565;
566 -> 562;
566 -> 564;
567 -> 566;
567 -> 562;
567 -> 564;
568 -> 564;
569 -> 566;
569 -> 568;
569 -> 562;
569 -> 564;
570 -> 0;
570 -> 564;
571 -> 569;
571 -> 570;
571 -> 564;
572 -> 274;
572 -> 571;
572 -> 267;
573 -> 562;
573 -> 267;
574 -> 573;
574 -> 1;
575 -> 1;
576 -> 0;
576 -> 1;
577 -> 1;
578 -> 576;
578 -> 577;
579 -> 575;
579 -> 577;
580 -> 575;
580 -> 577;
581 -> 575;
581 -> 577;
582 -> 575;
582 -> 577;
583 -> 575;
583 -> 577;
584 -> 575;
584 -> 577;
585 -> 578;
585 -> 577;
586 -> 579;
586 -> 577;
587 -> 580;
587 -> 577;
588 -> 581;
588 -> 577;
589 -> 582;
589 -> 577;
590 -> 583;
590 -> 577;
591 -> 584;
591 -> 577;
592 -> 577;
593 -> 585;
593 -> 592;
594 -> 586;
594 -> 592;
595 -> 587;
595 -> 592;
596 -> 588;
596 -> 592;
597 -> 589;
597 -> 592;
598 -> 590;
598 -> 592;
599 -> 591;
599 -> 592;
600 -> 593;
600 -> 592;
601 -> 593;
601 -> 592;
602 -> 592;
603 -> 594;
603 -> 592;
604 -> 595;
604 -> 592;
605 -> 596;
605 -> 592;
606 -> 597;
606 -> 592;
607 -> 598;
607 -> 592;
609 -> 608;
611 -> 610;
612 -> 599;
612 -> 592;
613 -> 592;
614 -> 601;
614 -> 613;
615 -> 602;
615 -> 613;
616 -> 603;
616 -> 613;
617 -> 604;
617 -> 613;
618 -> 605;
618 -> 613;
619 -> 606;
619 -> 613;
620 -> 607;
620 -> 613;
621 -> 601;
621 -> 613;
622 -> 612;
622 -> 613;
623 -> 602;
623 -> 613;
624 -> 602;
624 -> 613;
625 -> 602;
625 -> 613;
626 -> 625;
626 -> 613;
627 -> 625;
627 -> 613;
628 -> 625;
628 -> 613;
629 -> 625;
629 -> 613;
630 -> 625;
630 -> 613;
631 -> 625;
631 -> 613;
632 -> 625;
632 -> 613;
633 -> 625;
633 -> 613;
634 -> 625;
634 -> 613;
635 -> 625;
635 -> 613;
636 -> 625;
636 -> 613;
637 -> 625;
637 -> 613;
638 -> 625;
638 -> 613;
639 -> 625;
639 -> 613;
640 -> 625;
640 -> 613;
641 -> 614;
641 -> 625;
641 -> 613;
642 -> 615;
642 -> 625;
642 -> 613;
643 -> 616;
643 -> 625;
643 -> 613;
644 -> 617;
644 -> 625;
644 -> 613;
645 -> 618;
645 -> 625;
645 -> 613;
646 -> 619;
646 -> 625;
646 -> 613;
647 -> 620;
647 -> 625;
647 -> 613;
648 -> 621;
648 -> 613;
649 -> 648;
649 -> 625;
649 -> 613;
650 -> 622;
650 -> 625;
650 -> 613;
651 -> 623;
651 -> 625;
651 -> 613;
652 -> 624;
652 -> 625;
652 -> 613;
653 -> 602;
653 -> 577;
654 -> 653;
654 -> 1;
655 -> 575;
655 -> 1;
656 -> 1;
657 -> 575;
657 -> 656;
658 -> 654;
658 -> 656;
659 -> 658;
659 -> 641;
659 -> 656;
660 -> 658;
660 -> 642;
660 -> 656;
661 -> 658;
661 -> 643;
661 -> 656;
662 -> 657;
662 -> 656;
663 -> 658;
663 -> 645;
663 -> 656;
664 -> 658;
664 -> 646;
664 -> 656;
665 -> 656;
666 -> 658;
666 -> 649;
666 -> 656;
667 -> 658;
667 -> 650;
667 -> 656;
668 -> 658;
668 -> 651;
668 -> 656;
669 -> 658;
669 -> 652;
669 -> 656;
670 -> 656;
671 -> 659;
671 -> 670;
672 -> 660;
672 -> 670;
673 -> 661;
673 -> 670;
674 -> 662;
674 -> 670;
675 -> 663;
675 -> 670;
676 -> 664;
676 -> 670;
677 -> 665;
677 -> 670;
678 -> 666;
678 -> 670;
679 -> 667;
679 -> 670;
680 -> 668;
680 -> 670;
681 -> 669;
681 -> 670;
682 -> 665;
682 -> 670;
683 -> 682;
683 -> 670;
684 -> 682;
684 -> 670;
685 -> 682;
685 -> 670;
686 -> 682;
686 -> 670;
687 -> 682;
687 -> 670;
688 -> 682;
688 -> 670;
689 -> 682;
689 -> 670;
690 -> 682;
690 -> 670;
691 -> 682;
691 -> 670;
692 -> 682;
692 -> 670;
693 -> 682;
693 -> 670;
694 -> 682;
694 -> 670;
695 -> 682;
695 -> 670;
696 -> 682;
696 -> 670;
697 -> 682;
697 -> 670;
698 -> 674;
698 -> 682;
698 -> 670;
699 -> 677;
699 -> 682;
699 -> 670;
700 -> 665;
700 -> 1;
701 -> 1;
702 -> 575;
702 -> 701;
703 -> 575;
703 -> 701;
704 -> 700;
704 -> 701;
705 -> 704;
705 -> 671;
705 -> 701;
706 -> 704;
706 -> 672;
706 -> 701;
707 -> 704;
707 -> 673;
707 -> 701;
708 -> 704;
708 -> 698;
708 -> 701;
709 -> 701;
710 -> 702;
710 -> 709;
710 -> 701;
711 -> 703;
711 -> 709;
711 -> 701;
712 -> 710;
712 -> 711;
712 -> 701;
713 -> 704;
713 -> 676;
713 -> 701;
714 -> 704;
714 -> 699;
714 -> 701;
715 -> 704;
715 -> 678;
715 -> 701;
716 -> 704;
716 -> 679;
716 -> 701;
717 -> 704;
717 -> 680;
717 -> 701;
718 -> 704;
718 -> 681;
718 -> 701;
719 -> 701;
720 -> 705;
720 -> 719;
721 -> 706;
721 -> 719;
722 -> 707;
722 -> 719;
723 -> 708;
723 -> 719;
724 -> 712;
724 -> 719;
725 -> 713;
725 -> 719;
726 -> 714;
726 -> 719;
727 -> 715;
727 -> 719;
728 -> 716;
728 -> 719;
729 -> 717;
729 -> 719;
730 -> 718;
730 -> 719;
731 -> 709;
731 -> 719;
732 -> 731;
732 -> 719;
733 -> 731;
733 -> 719;
734 -> 731;
734 -> 719;
735 -> 731;
735 -> 719;
736 -> 731;
736 -> 719;
737 -> 731;
737 -> 719;
738 -> 731;
738 -> 719;
739 -> 731;
739 -> 719;
740 -> 731;
740 -> 719;
741 -> 731;
741 -> 719;
742 -> 731;
742 -> 719;
743 -> 731;
743 -> 719;
744 -> 731;
744 -> 719;
745 -> 731;
745 -> 719;
746 -> 731;
746 -> 719;
747 -> 724;
747 -> 731;
747 -> 719;
748 -> 709;
748 -> 1;
749 -> 1;
750 -> 576;
750 -> 749;
751 -> 575;
751 -> 749;
752 -> 575;
752 -> 749;
753 -> 575;
753 -> 749;
754 -> 575;
754 -> 749;
755 -> 575;
755 -> 749;
756 -> 575;
756 -> 749;
757 -> 750;
757 -> 749;
758 -> 751;
758 -> 749;
759 -> 752;
759 -> 749;
760 -> 753;
760 -> 749;
761 -> 754;
761 -> 749;
762 -> 755;
762 -> 749;
763 -> 756;
763 -> 749;
764 -> 749;
765 -> 757;
765 -> 764;
766 -> 758;
766 -> 764;
767 -> 759;
767 -> 764;
768 -> 760;
768 -> 764;
769 -> 761;
769 -> 764;
770 -> 762;
770 -> 764;
771 -> 763;
771 -> 764;
772 -> 765;
772 -> 764;
773 -> 765;
773 -> 764;
774 -> 764;
775 -> 766;
775 -> 764;
776 -> 767;
776 -> 764;
777 -> 768;
777 -> 764;
778 -> 769;
778 -> 764;
779 -> 770;
779 -> 764;
780 -> 771;
780 -> 764;
781 -> 764;
782 -> 773;
782 -> 781;
783 -> 774;
783 -> 781;
784 -> 775;
784 -> 781;
785 -> 776;
785 -> 781;
786 -> 777;
786 -> 781;
787 -> 778;
787 -> 781;
788 -> 779;
788 -> 781;
789 -> 773;
789 -> 781;
790 -> 780;
790 -> 781;
791 -> 774;
791 -> 781;
792 -> 774;
792 -> 781;
793 -> 774;
793 -> 781;
794 -> 793;
794 -> 781;
795 -> 793;
795 -> 781;
796 -> 793;
796 -> 781;
797 -> 793;
797 -> 781;
798 -> 793;
798 -> 781;
799 -> 793;
799 -> 781;
800 -> 793;
800 -> 781;
801 -> 793;
801 -> 781;
802 -> 793;
802 -> 781;
803 -> 793;
803 -> 781;
804 -> 793;
804 -> 781;
805 -> 793;
805 -> 781;
806 -> 793;
806 -> 781;
807 -> 793;
807 -> 781;
808 -> 793;
808 -> 781;
809 -> 782;
809 -> 793;
809 -> 781;
810 -> 783;
810 -> 793;
810 -> 781;
811 -> 784;
811 -> 793;
811 -> 781;
812 -> 785;
812 -> 793;
812 -> 781;
813 -> 786;
813 -> 793;
813 -> 781;
814 -> 787;
814 -> 793;
814 -> 781;
815 -> 788;
815 -> 793;
815 -> 781;
816 -> 789;
816 -> 781;
817 -> 816;
817 -> 793;
817 -> 781;
818 -> 790;
818 -> 793;
818 -> 781;
819 -> 791;
819 -> 793;
819 -> 781;
820 -> 792;
820 -> 793;
820 -> 781;
821 -> 774;
821 -> 749;
822 -> 821;
822 -> 1;
823 -> 575;
823 -> 1;
824 -> 1;
825 -> 575;
825 -> 824;
826 -> 822;
826 -> 824;
827 -> 826;
827 -> 809;
827 -> 824;
828 -> 826;
828 -> 810;
828 -> 824;
829 -> 826;
829 -> 811;
829 -> 824;
830 -> 825;
830 -> 824;
831 -> 826;
831 -> 813;
831 -> 824;
832 -> 826;
832 -> 814;
832 -> 824;
833 -> 824;
834 -> 826;
834 -> 817;
834 -> 824;
835 -> 826;
835 -> 818;
835 -> 824;
836 -> 826;
836 -> 819;
836 -> 824;
837 -> 826;
837 -> 820;
837 -> 824;
838 -> 824;
839 -> 827;
839 -> 838;
840 -> 828;
840 -> 838;
841 -> 829;
841 -> 838;
842 -> 830;
842 -> 838;
843 -> 831;
843 -> 838;
844 -> 832;
844 -> 838;
845 -> 833;
845 -> 838;
846 -> 834;
846 -> 838;
847 -> 835;
847 -> 838;
848 -> 836;
848 -> 838;
849 -> 837;
849 -> 838;
850 -> 833;
850 -> 838;
851 -> 850;
851 -> 838;
852 -> 850;
852 -> 838;
853 -> 850;
853 -> 838;
854 -> 850;
854 -> 838;
855 -> 850;
855 -> 838;
856 -> 850;
856 -> 838;
857 -> 850;
857 -> 838;
858 -> 850;
858 -> 838;
859 -> 850;
859 -> 838;
860 -> 850;
860 -> 838;
861 -> 850;
861 -> 838;
862 -> 850;
862 -> 838;
863 -> 850;
863 -> 838;
864 -> 850;
864 -> 838;
865 -> 850;
865 -> 838;
866 -> 842;
866 -> 850;
866 -> 838;
867 -> 845;
867 -> 850;
867 -> 838;
868 -> 833;
868 -> 1;
869 -> 1;
870 -> 575;
870 -> 869;
871 -> 575;
871 -> 869;
872 -> 868;
872 -> 869;
873 -> 872;
873 -> 839;
873 -> 869;
874 -> 872;
874 -> 840;
874 -> 869;
875 -> 872;
875 -> 841;
875 -> 869;
876 -> 872;
876 -> 866;
876 -> 869;
877 -> 869;
878 -> 870;
878 -> 877;
878 -> 869;
879 -> 871;
879 -> 877;
879 -> 869;
880 -> 878;
880 -> 879;
880 -> 869;
881 -> 872;
881 -> 844;
881 -> 869;
882 -> 872;
882 -> 867;
882 -> 869;
883 -> 872;
883 -> 846;
883 -> 869;
884 -> 872;
884 -> 847;
884 -> 869;
885 -> 872;
885 -> 848;
885 -> 869;
886 -> 872;
886 -> 849;
886 -> 869;
887 -> 869;
888 -> 873;
888 -> 887;
889 -> 874;
889 -> 887;
890 -> 875;
890 -> 887;
891 -> 876;
891 -> 887;
892 -> 880;
892 -> 887;
893 -> 881;
893 -> 887;
894 -> 882;
894 -> 887;
895 -> 883;
895 -> 887;
896 -> 884;
896 -> 887;
897 -> 885;
897 -> 887;
898 -> 886;
898 -> 887;
899 -> 877;
899 -> 887;
900 -> 899;
900 -> 887;
901 -> 899;
901 -> 887;
902 -> 899;
902 -> 887;
903 -> 899;
903 -> 887;
904 -> 899;
904 -> 887;
905 -> 899;
905 -> 887;
906 -> 899;
906 -> 887;
907 -> 899;
907 -> 887;
908 -> 899;
908 -> 887;
909 -> 899;
909 -> 887;
910 -> 899;
910 -> 887;
911 -> 899;
911 -> 887;
912 -> 899;
912 -> 887;
913 -> 899;
913 -> 887;
914 -> 899;
914 -> 887;
915 -> 892;
915 -> 899;
915 -> 887;
916 -> 877;
916 -> 1;
917 -> 748;
917 -> 575;
917 -> 1;
918 -> 916;
918 -> 575;
918 -> 1;
919 -> 1;
920 -> 574;
920 -> 919;
921 -> 575;
921 -> 919;
922 -> 919;
924 -> 0;
925 -> 0;
926 -> 0;
929 -> 923;
929 -> 928;
930 -> 924;
930 -> 928;
931 -> 925;
931 -> 928;
932 -> 926;
932 -> 928;
933 -> 927;
933 -> 928;
934 -> 928;
935 -> 934;
935 -> 928;
936 -> 934;
936 -> 928;
937 -> 934;
937 -> 928;
938 -> 928;
939 -> 930;
939 -> 938;
939 -> 928;
940 -> 931;
940 -> 0;
940 -> 928;
941 -> 932;
941 -> 0;
941 -> 928;
942 -> 929;
942 -> 934;
942 -> 928;
943 -> 930;
943 -> 934;
943 -> 928;
944 -> 931;
944 -> 934;
944 -> 928;
945 -> 933;
945 -> 934;
945 -> 928;
946 -> 932;
946 -> 934;
946 -> 928;
947 -> 928;
948 -> 922;
948 -> 920;
948 -> 571;
948 -> 919;
949 -> 948;
949 -> 922;
950 -> 949;
950 -> 948;
950 -> 922;
951 -> 922;
952 -> 950;
952 -> 948;
952 -> 951;
952 -> 922;
953 -> 949;
953 -> 948;
953 -> 951;
953 -> 922;
954 -> 947;
954 -> 952;
955 -> 948;
955 -> 954;
955 -> 942;
955 -> 945;
955 -> 943;
955 -> 944;
955 -> 946;
955 -> 0;
955 -> 919;
956 -> 948;
956 -> 922;
957 -> 948;
957 -> 922;
958 -> 922;
959 -> 956;
959 -> 955;
959 -> 958;
960 -> 957;
960 -> 959;
960 -> 958;
961 -> 960;
961 -> 958;
962 -> 0;
962 -> 961;
963 -> 960;
963 -> 958;
964 -> 956;
964 -> 958;
965 -> 957;
965 -> 962;
965 -> 963;
965 -> 964;
965 -> 958;
966 -> 0;
966 -> 965;
967 -> 966;
968 -> 957;
968 -> 967;
969 -> 968;
969 -> 947;
969 -> 967;
970 -> 969;
971 -> 966;
972 -> 0;
972 -> 966;
973 -> 972;
974 -> 948;
974 -> 922;
975 -> 948;
975 -> 922;
976 -> 974;
976 -> 975;
976 -> 922;
977 -> 948;
977 -> 976;
977 -> 972;
977 -> 919;
979 -> 978;
981 -> 980;
983 -> 982;
986 -> 985;
987 -> 0;
988 -> 0;
989 -> 0;
990 -> 989;
992 -> 987;
992 -> 988;
992 -> 990;
992 -> 991;
993 -> 992;
995 -> 994;
997 -> 996;
999 -> 998;
1001 -> 1000;
1002 -> 948;
1002 -> 922;
1003 -> 948;
1003 -> 922;
1004 -> 948;
1004 -> 922;
1005 -> 948;
1005 -> 922;
1006 -> 948;
1006 -> 922;
1007 -> 922;
1008 -> 1005;
1008 -> 1007;
1008 -> 922;
1009 -> 1006;
1009 -> 1007;
1009 -> 922;
1010 -> 1008;
1010 -> 1009;
1010 -> 922;
1011 -> 1003;
1011 -> 922;
1012 -> 1002;
1012 -> 922;
1013 -> 1003;
1013 -> 922;
1014 -> 1004;
1014 -> 922;
1015 -> 1005;
1015 -> 922;
1016 -> 1006;
1016 -> 922;
1017 -> 1011;
1017 -> 922;
1018 -> 922;
1019 -> 1012;
1019 -> 1018;
1020 -> 1013;
1020 -> 1018;
1021 -> 1014;
1021 -> 1018;
1022 -> 1015;
1022 -> 1018;
1023 -> 1016;
1023 -> 1018;
1024 -> 1017;
1024 -> 1018;
1025 -> 1018;
1026 -> 1023;
1026 -> 1025;
1026 -> 1018;
1027 -> 1022;
1027 -> 1025;
1027 -> 1018;
1028 -> 1026;
1028 -> 1027;
1028 -> 1018;
1029 -> 1018;
1030 -> 1019;
1030 -> 1018;
1031 -> 1020;
1031 -> 1018;
1032 -> 1029;
1032 -> 1018;
1033 -> 1024;
1033 -> 1018;
1034 -> 1018;
1035 -> 1030;
1035 -> 1034;
1036 -> 1031;
1036 -> 1034;
1037 -> 1032;
1037 -> 1034;
1038 -> 1033;
1038 -> 1034;
1039 -> 1036;
1039 -> 1034;
1040 -> 1039;
1040 -> 1035;
1040 -> 977;
1040 -> 1034;
1041 -> 1034;
1042 -> 1040;
1042 -> 1041;
1043 -> 1040;
1043 -> 1041;
1044 -> 1042;
1044 -> 1041;
1045 -> 1042;
1045 -> 1040;
1045 -> 1041;
1046 -> 1041;
1047 -> 1042;
1047 -> 1040;
1047 -> 1041;
1048 -> 1042;
1048 -> 1040;
1048 -> 1041;
1049 -> 1048;
1049 -> 1041;
1050 -> 1041;
1051 -> 1046;
1051 -> 1050;
1051 -> 1034;
1052 -> 1046;
1052 -> 1041;
1053 -> 1046;
1053 -> 1041;
1054 -> 1052;
1054 -> 1041;
1055 -> 1052;
1055 -> 1041;
1056 -> 1052;
1056 -> 1041;
1057 -> 1052;
1057 -> 1041;
1058 -> 1057;
1058 -> 1041;
1059 -> 1057;
1059 -> 1058;
1060 -> 1035;
1060 -> 1039;
1060 -> 1040;
1060 -> 1050;
1060 -> 1034;
1061 -> 1034;
1062 -> 1060;
1062 -> 1061;
1062 -> 1034;
1063 -> 1060;
1063 -> 1062;
1064 -> 1062;
1065 -> 1063;
1065 -> 1064;
1066 -> 1063;
1066 -> 1064;
1067 -> 1065;
1067 -> 1064;
1068 -> 1065;
1068 -> 1063;
1068 -> 1064;
1069 -> 1064;
1070 -> 1065;
1070 -> 1063;
1070 -> 1064;
1071 -> 1065;
1071 -> 1063;
1071 -> 1064;
1072 -> 1071;
1072 -> 1064;
1073 -> 1069;
1073 -> 1064;
1074 -> 1069;
1074 -> 1064;
1075 -> 1073;
1075 -> 1064;
1076 -> 1073;
1076 -> 1064;
1077 -> 1073;
1077 -> 1064;
1078 -> 1073;
1078 -> 1064;
1079 -> 1078;
1079 -> 1064;
1080 -> 1062;
1081 -> 1064;
1081 -> 1080;
1081 -> 1062;
1082 -> 1060;
1082 -> 1034;
1083 -> 1018;
1084 -> 1064;
1084 -> 1083;
1084 -> 1018;
1085 -> 1082;
1085 -> 1018;
1086 -> 1064;
1086 -> 1041;
1087 -> 1064;
1087 -> 1041;
1088 -> 1086;
1088 -> 1041;
1089 -> 1086;
1089 -> 1064;
1089 -> 1041;
1090 -> 1086;
1090 -> 1064;
1090 -> 1041;
1091 -> 1086;
1091 -> 1064;
1091 -> 1041;
1092 -> 1091;
1092 -> 1041;
1093 -> 1069;
1094 -> 1069;
1095 -> 1093;
1095 -> 1069;
1096 -> 1093;
1096 -> 1069;
1097 -> 1093;
1097 -> 1069;
1098 -> 1093;
1098 -> 1069;
1099 -> 1098;
1099 -> 1069;
1100 -> 1064;
1101 -> 1069;
1101 -> 1100;
1101 -> 1064;
1102 -> 1064;
1102 -> 1034;
1103 -> 1069;
1103 -> 1083;
1103 -> 1018;
1104 -> 1102;
1104 -> 1018;
1105 -> 1069;
1106 -> 1069;
1106 -> 1034;
1107 -> 1106;
1107 -> 1018;
1108 -> 948;
1108 -> 922;
1109 -> 948;
1109 -> 922;
1110 -> 948;
1110 -> 922;
1111 -> 948;
1111 -> 922;
1112 -> 1108;
1112 -> 1069;
1112 -> 922;
1113 -> 922;
1114 -> 1111;
1114 -> 1113;
1115 -> 1114;
1115 -> 1069;
1115 -> 0;
1115 -> 1113;
1116 -> 1115;
1116 -> 922;
1117 -> 922;
1118 -> 1108;
1118 -> 1069;
1118 -> 1117;
1118 -> 922;
1119 -> 1116;
1119 -> 1118;
1119 -> 922;
1120 -> 1108;
1120 -> 1069;
1120 -> 1119;
1121 -> 1120;
1121 -> 922;
1122 -> 1112;
1122 -> 922;
1123 -> 1109;
1123 -> 922;
1124 -> 1110;
1124 -> 922;
1125 -> 922;
1126 -> 1121;
1126 -> 1125;
1127 -> 1122;
1127 -> 1125;
1128 -> 1123;
1128 -> 1125;
1129 -> 1124;
1129 -> 1125;
1130 -> 1111;
1130 -> 1125;
1131 -> 1125;
1132 -> 1126;
1132 -> 1131;
1132 -> 1125;
1133 -> 1129;
1133 -> 1125;
1134 -> 1129;
1134 -> 1069;
1134 -> 1125;
1135 -> 1130;
1135 -> 1069;
1135 -> 1125;
1136 -> 1125;
1137 -> 1135;
1137 -> 1136;
1138 -> 1135;
1138 -> 1136;
1139 -> 1136;
1140 -> 1139;
1140 -> 1136;
1141 -> 1139;
1141 -> 1136;
1142 -> 1139;
1142 -> 1136;
1143 -> 1139;
1143 -> 1136;
1144 -> 1137;
1144 -> 1139;
1144 -> 1136;
1145 -> 1135;
1145 -> 1139;
1145 -> 1140;
1145 -> 1141;
1145 -> 1142;
1145 -> 1143;
1145 -> 1144;
1145 -> 1125;
1146 -> 1127;
1146 -> 1125;
1147 -> 1128;
1147 -> 1125;
1148 -> 1129;
1148 -> 1125;
1149 -> 1125;
1150 -> 1146;
1150 -> 1149;
1151 -> 1147;
1151 -> 1149;
1152 -> 1148;
1152 -> 1149;
1153 -> 1145;
1153 -> 1149;
1154 -> 1149;
1155 -> 1151;
1155 -> 1154;
1155 -> 1149;
1156 -> 1152;
1156 -> 1154;
1156 -> 1149;
1157 -> 1155;
1157 -> 1156;
1157 -> 1149;
1158 -> 1150;
1158 -> 1153;
1158 -> 1149;
1159 -> 1151;
1159 -> 1153;
1159 -> 1149;
1160 -> 1152;
1160 -> 1153;
1160 -> 1149;
1161 -> 1125;
1162 -> 1126;
1162 -> 1125;
1163 -> 1125;
1164 -> 1162;
1164 -> 1163;
1165 -> 1145;
1165 -> 1163;
1166 -> 1164;
1166 -> 1163;
1167 -> 1163;
1168 -> 1166;
1168 -> 1167;
1169 -> 1165;
1169 -> 1167;
1170 -> 1169;
1170 -> 1167;
1171 -> 1170;
1171 -> 1168;
1171 -> 1145;
1171 -> 1158;
1171 -> 1159;
1171 -> 1160;
1171 -> 1167;
1172 -> 1167;
1173 -> 1171;
1173 -> 1172;
1174 -> 1171;
1174 -> 1172;
1175 -> 1173;
1175 -> 1172;
1176 -> 1172;
1177 -> 1175;
1177 -> 1176;
1178 -> 1174;
1178 -> 1176;
1179 -> 1178;
1179 -> 1171;
1179 -> 1176;
1180 -> 1177;
1180 -> 1176;
1181 -> 1179;
1181 -> 1180;
1181 -> 1171;
1181 -> 1176;
1182 -> 0;
1182 -> 1176;
1183 -> 1176;
1184 -> 1177;
1184 -> 1181;
1184 -> 1183;
1184 -> 1176;
1185 -> 1178;
1185 -> 1181;
1185 -> 1176;
1186 -> 1177;
1186 -> 1181;
1186 -> 1176;
1187 -> 0;
1187 -> 1184;
1188 -> 1177;
1188 -> 1176;
1189 -> 1187;
1189 -> 1176;
1190 -> 1176;
1191 -> 1188;
1191 -> 1190;
1192 -> 1189;
1192 -> 1190;
1193 -> 1178;
1193 -> 1190;
1194 -> 1191;
1194 -> 1190;
1195 -> 1192;
1195 -> 1190;
1196 -> 1190;
1197 -> 1194;
1197 -> 1196;
1198 -> 1195;
1198 -> 1196;
1199 -> 1198;
1199 -> 1196;
1200 -> 1196;
1201 -> 1197;
1201 -> 1196;
1202 -> 1198;
1202 -> 1196;
1203 -> 1196;
1204 -> 1196;
1205 -> 1201;
1205 -> 1204;
1206 -> 1202;
1206 -> 1204;
1207 -> 1203;
1207 -> 1204;
1208 -> 1205;
1208 -> 1207;
1208 -> 1204;
1209 -> 1206;
1209 -> 1207;
1209 -> 1204;
1210 -> 1203;
1210 -> 1190;
1211 -> 1190;
1212 -> 1190;
1213 -> 1193;
1213 -> 1212;
1214 -> 1213;
1214 -> 1185;
1214 -> 1212;
1215 -> 1214;
1215 -> 1190;
1216 -> 1210;
1216 -> 1190;
1217 -> 1211;
1217 -> 1190;
1218 -> 1216;
1218 -> 1217;
1218 -> 1215;
1218 -> 1208;
1218 -> 1209;
1218 -> 1185;
1218 -> 1190;
1219 -> 1190;
1220 -> 1218;
1220 -> 1219;
1221 -> 1220;
1221 -> 1218;
1221 -> 1219;
1222 -> 1191;
1222 -> 1221;
1223 -> 1221;
1224 -> 1222;
1224 -> 1223;
1225 -> 1224;
1225 -> 1223;
1226 -> 1224;
1226 -> 1223;
1227 -> 1225;
1227 -> 1223;
1228 -> 1223;
1229 -> 1227;
1229 -> 1228;
1230 -> 1226;
1230 -> 1228;
1231 -> 1229;
1231 -> 1224;
1231 -> 1228;
1232 -> 1228;
1233 -> 1232;
1233 -> 1228;
1234 -> 1229;
1234 -> 1224;
1234 -> 1228;
1235 -> 1230;
1235 -> 1234;
1235 -> 1231;
1235 -> 1224;
1236 -> 1230;
1236 -> 1234;
1236 -> 1235;
1237 -> 1235;
1238 -> 1236;
1238 -> 1228;
1239 -> 1228;
1240 -> 1238;
1240 -> 1239;
1240 -> 1228;
1241 -> 1238;
1241 -> 1229;
1241 -> 1228;
1242 -> 1238;
1242 -> 1240;
1243 -> 0;
1243 -> 1240;
1244 -> 1238;
1244 -> 1242;
1244 -> 1240;
1245 -> 1228;
1246 -> 1245;
1246 -> 1223;
1247 -> 1223;
1248 -> 1226;
1248 -> 1247;
1249 -> 1247;
1250 -> 1248;
1250 -> 1244;
1250 -> 1249;
1251 -> 1250;
1251 -> 1247;
1252 -> 1223;
1253 -> 1227;
1253 -> 1252;
1254 -> 1246;
1254 -> 1252;
1255 -> 1251;
1255 -> 1252;
1256 -> 1226;
1256 -> 1252;
1257 -> 1252;
1258 -> 1256;
1258 -> 1257;
1259 -> 1258;
1259 -> 1244;
1259 -> 1257;
1260 -> 1259;
1260 -> 1252;
1261 -> 1252;
1262 -> 1253;
1262 -> 1260;
1262 -> 1252;
1263 -> 1254;
1263 -> 1252;
1264 -> 1255;
1264 -> 1263;
1265 -> 0;
1265 -> 1264;
1266 -> 1253;
1266 -> 1252;
1267 -> 1265;
1267 -> 1252;
1268 -> 1252;
1269 -> 1266;
1269 -> 1268;
1270 -> 1267;
1270 -> 1268;
1271 -> 1270;
1271 -> 1268;
1272 -> 1268;
1273 -> 1268;
1273 -> 1252;
1274 -> 1252;
1275 -> 1252;
1276 -> 1256;
1276 -> 1275;
1277 -> 1276;
1277 -> 1244;
1277 -> 1275;
1278 -> 1277;
1278 -> 1252;
1279 -> 1273;
1279 -> 1252;
1280 -> 1274;
1280 -> 1252;
1281 -> 1279;
1281 -> 1280;
1281 -> 1278;
1281 -> 1269;
1281 -> 1270;
1281 -> 1244;
1281 -> 1252;
1282 -> 1252;
1283 -> 1281;
1284 -> 1256;
1284 -> 1283;
1285 -> 1284;
1285 -> 1281;
1285 -> 1283;
1286 -> 1285;
1286 -> 1281;
1287 -> 1255;
1287 -> 1281;
1288 -> 1287;
1289 -> 1256;
1289 -> 1288;
1290 -> 1289;
1290 -> 1281;
1290 -> 1288;
1291 -> 1290;
1291 -> 1287;
1292 -> 1286;
1292 -> 1287;
1293 -> 1253;
1293 -> 1287;
1294 -> 1254;
1294 -> 1287;
1295 -> 1287;
1296 -> 1287;
1297 -> 1291;
1297 -> 1296;
1298 -> 1292;
1298 -> 1296;
1299 -> 1293;
1299 -> 1296;
1300 -> 1294;
1300 -> 1296;
1301 -> 1295;
1301 -> 1296;
1302 -> 1298;
1302 -> 1296;
1303 -> 1296;
1304 -> 1302;
1304 -> 1303;
1305 -> 1301;
1305 -> 1303;
1306 -> 1303;
1307 -> 1305;
1307 -> 1303;
1308 -> 1305;
1308 -> 1303;
1309 -> 1305;
1309 -> 1303;
1310 -> 1305;
1310 -> 1303;
1311 -> 1305;
1311 -> 1303;
1312 -> 1303;
1313 -> 1304;
1313 -> 1312;
1313 -> 1303;
1314 -> 1304;
1314 -> 1305;
1314 -> 1303;
1315 -> 1304;
1315 -> 1281;
1315 -> 1305;
1315 -> 1303;
1316 -> 1304;
1316 -> 1281;
1316 -> 1305;
1316 -> 1303;
1317 -> 1306;
1317 -> 1305;
1317 -> 1303;
1318 -> 1301;
1318 -> 1296;
1319 -> 1301;
1319 -> 1296;
1320 -> 1301;
1320 -> 1296;
1321 -> 1301;
1321 -> 1296;
1322 -> 1301;
1322 -> 1296;
1323 -> 1296;
1324 -> 1297;
1324 -> 1323;
1324 -> 1296;
1325 -> 1296;
1326 -> 1299;
1326 -> 1325;
1326 -> 1296;
1327 -> 1297;
1327 -> 1301;
1327 -> 1296;
1328 -> 1299;
1328 -> 1301;
1328 -> 1300;
1328 -> 1296;
1329 -> 1328;
1329 -> 1301;
1329 -> 1296;
1330 -> 1300;
1330 -> 1296;
1331 -> 1299;
1331 -> 1281;
1331 -> 1330;
1332 -> 1299;
1332 -> 1331;
1333 -> 1332;
1333 -> 1331;
1333 -> 1301;
1334 -> 1287;
1335 -> 1256;
1335 -> 1334;
1336 -> 1335;
1336 -> 1331;
1336 -> 1334;
1337 -> 1336;
1337 -> 1287;
1338 -> 1253;
1338 -> 1287;
1339 -> 1287;
1340 -> 1281;
1341 -> 1340;
1341 -> 1337;
1342 -> 1341;
1342 -> 1281;
1343 -> 1273;
1343 -> 1281;
1344 -> 1295;
1344 -> 1281;
1345 -> 1343;
1345 -> 1344;
1345 -> 1342;
1345 -> 1269;
1345 -> 1270;
1345 -> 1316;
1345 -> 1315;
1345 -> 1314;
1345 -> 1317;
1345 -> 1311;
1345 -> 1327;
1345 -> 1329;
1345 -> 1320;
1345 -> 1321;
1345 -> 1322;
1345 -> 1333;
1345 -> 1337;
1345 -> 1328;
1345 -> 1331;
1345 -> 1281;
1346 -> 1281;
1347 -> 1295;
1347 -> 1252;
1348 -> 1224;
1348 -> 1347;
1348 -> 1345;
1348 -> 1223;
1349 -> 1192;
1349 -> 1265;
1349 -> 1221;
1350 -> 1349;
1351 -> 1348;
1351 -> 1350;
1352 -> 1351;
1352 -> 1348;
1352 -> 1350;
1353 -> 1350;
1354 -> 1352;
1354 -> 1353;
1354 -> 1350;
1355 -> 1354;
1355 -> 1350;
1356 -> 1355;
1356 -> 1349;
1357 -> 1191;
1357 -> 1349;
1358 -> 1192;
1358 -> 0;
1358 -> 1349;
1359 -> 1356;
1359 -> 1358;
1360 -> 1348;
1360 -> 1358;
1361 -> 1358;
1362 -> 1358;
1363 -> 1359;
1363 -> 1362;
1364 -> 1360;
1364 -> 1362;
1365 -> 1361;
1365 -> 1362;
1366 -> 1361;
1366 -> 1362;
1367 -> 1364;
1367 -> 1362;
1368 -> 1362;
1369 -> 1367;
1369 -> 1368;
1370 -> 1366;
1370 -> 1368;
1371 -> 1368;
1372 -> 1370;
1372 -> 1368;
1373 -> 1370;
1373 -> 1368;
1374 -> 1370;
1374 -> 1368;
1375 -> 1370;
1375 -> 1368;
1376 -> 1370;
1376 -> 1368;
1377 -> 1368;
1378 -> 1369;
1378 -> 1377;
1378 -> 1368;
1379 -> 1369;
1379 -> 1356;
1379 -> 1370;
1379 -> 1368;
1380 -> 1369;
1380 -> 1356;
1380 -> 1370;
1380 -> 1368;
1381 -> 1371;
1381 -> 1370;
1381 -> 1368;
1382 -> 1366;
1382 -> 1362;
1383 -> 1366;
1383 -> 1362;
1384 -> 1366;
1384 -> 1362;
1385 -> 1366;
1385 -> 1362;
1386 -> 1366;
1386 -> 1362;
1387 -> 1362;
1388 -> 1363;
1388 -> 1387;
1388 -> 1362;
1389 -> 1363;
1389 -> 1366;
1389 -> 1362;
1390 -> 947;
1390 -> 1362;
1391 -> 1390;
1391 -> 1365;
1391 -> 1362;
1392 -> 1391;
1392 -> 1366;
1392 -> 1362;
1393 -> 1358;
1394 -> 1191;
1394 -> 1356;
1394 -> 1393;
1394 -> 1358;
1395 -> 1191;
1395 -> 1356;
1395 -> 1221;
1396 -> 1221;
1397 -> 1395;
1397 -> 1396;
1398 -> 1361;
1398 -> 1396;
1399 -> 1398;
1399 -> 1379;
1399 -> 1396;
1400 -> 0;
1400 -> 1396;
1401 -> 1396;
1402 -> 1399;
1402 -> 1401;
1403 -> 1400;
1403 -> 1401;
1404 -> 1397;
1404 -> 1396;
1405 -> 1402;
1405 -> 1404;
1405 -> 1396;
1406 -> 1405;
1406 -> 1396;
1407 -> 1221;
1408 -> 1407;
1408 -> 1404;
1409 -> 1408;
1409 -> 1221;
1410 -> 1210;
1410 -> 1221;
1411 -> 1406;
1411 -> 1221;
1412 -> 1410;
1412 -> 1411;
1412 -> 1409;
1412 -> 1208;
1412 -> 1209;
1412 -> 1380;
1412 -> 1379;
1412 -> 1369;
1412 -> 1381;
1412 -> 1376;
1412 -> 1389;
1412 -> 1383;
1412 -> 1392;
1412 -> 1385;
1412 -> 1386;
1412 -> 1404;
1412 -> 1221;
1413 -> 1221;
1414 -> 1406;
1414 -> 1190;
1415 -> 1171;
1415 -> 1414;
1415 -> 1412;
1415 -> 1167;
1416 -> 1145;
1416 -> 1125;
1417 -> 1130;
1417 -> 1415;
1417 -> 1416;
1417 -> 1125;
1418 -> 1415;
1418 -> 1125;
1419 -> 948;
1419 -> 1418;
1419 -> 1417;
1419 -> 919;
1420 -> 948;
1420 -> 922;
1421 -> 948;
1421 -> 922;
1422 -> 948;
1422 -> 922;
1423 -> 948;
1423 -> 922;
1424 -> 1423;
1424 -> 922;
1425 -> 1423;
1425 -> 922;
1426 -> 1423;
1426 -> 922;
1427 -> 1423;
1427 -> 922;
1428 -> 1423;
1428 -> 922;
1429 -> 1423;
1429 -> 922;
1430 -> 1420;
1430 -> 1423;
1430 -> 922;
1431 -> 1421;
1431 -> 1423;
1431 -> 922;
1432 -> 1422;
1432 -> 1423;
1432 -> 922;
1433 -> 1423;
1433 -> 922;
1434 -> 922;
1435 -> 1433;
1435 -> 1434;
1435 -> 1424;
1435 -> 1430;
1435 -> 1431;
1435 -> 1427;
1435 -> 1432;
1435 -> 1429;
1435 -> 1419;
1435 -> 922;
1436 -> 1435;
1436 -> 1423;
1436 -> 922;
1437 -> 922;
1438 -> 1437;
1438 -> 1423;
1438 -> 922;
1439 -> 1420;
1439 -> 922;
1440 -> 922;
1441 -> 922;
1442 -> 1439;
1442 -> 1441;
1443 -> 1440;
1443 -> 1441;
1444 -> 1442;
1444 -> 1441;
1445 -> 1441;
1446 -> 1444;
1446 -> 1445;
1447 -> 1443;
1447 -> 1445;
1448 -> 1447;
1448 -> 1445;
1449 -> 1447;
1449 -> 1445;
1450 -> 1447;
1450 -> 1445;
1451 -> 1447;
1451 -> 1445;
1452 -> 1447;
1452 -> 1445;
1453 -> 1445;
1454 -> 1446;
1454 -> 1453;
1454 -> 1445;
1455 -> 1447;
1455 -> 1445;
1456 -> 1455;
1456 -> 1448;
1456 -> 1449;
1456 -> 1450;
1456 -> 1451;
1456 -> 1452;
1456 -> 1445;
1457 -> 1446;
1457 -> 1435;
1457 -> 1436;
1457 -> 1438;
1457 -> 1447;
1457 -> 1445;
1458 -> 1446;
1458 -> 1447;
1458 -> 1445;
1459 -> 1440;
1459 -> 1423;
1459 -> 922;
1460 -> 948;
1460 -> 1435;
1460 -> 1436;
1460 -> 1438;
1460 -> 1459;
1460 -> 1437;
1460 -> 1456;
1460 -> 1457;
1460 -> 1458;
1460 -> 919;
1461 -> 1460;
1461 -> 1131;
1461 -> 1125;
1462 -> 1129;
1462 -> 1460;
1462 -> 1125;
1463 -> 1129;
1463 -> 1462;
1464 -> 1462;
1465 -> 1463;
1465 -> 1172;
1466 -> 1463;
1466 -> 1172;
1467 -> 1466;
1467 -> 1463;
1467 -> 1172;
1468 -> 1465;
1468 -> 1172;
1469 -> 1467;
1469 -> 1468;
1469 -> 1463;
1469 -> 1172;
1470 -> 1172;
1471 -> 1466;
1471 -> 1469;
1471 -> 1172;
1472 -> 1465;
1472 -> 1172;
1473 -> 1466;
1473 -> 1471;
1474 -> 1465;
1474 -> 1471;
1475 -> 1265;
1475 -> 1473;
1476 -> 1465;
1476 -> 1172;
1477 -> 1475;
1477 -> 1172;
1478 -> 1172;
1479 -> 1476;
1479 -> 1478;
1480 -> 1477;
1480 -> 1478;
1481 -> 1480;
1481 -> 1478;
1482 -> 1478;
1483 -> 1478;
1484 -> 1478;
1485 -> 1483;
1485 -> 1484;
1486 -> 1483;
1486 -> 1172;
1487 -> 1172;
1488 -> 1172;
1489 -> 1466;
1489 -> 1488;
1490 -> 1489;
1490 -> 1473;
1490 -> 1488;
1491 -> 1490;
1491 -> 1172;
1492 -> 1486;
1492 -> 1172;
1493 -> 1487;
1493 -> 1172;
1494 -> 1492;
1494 -> 1493;
1494 -> 1491;
1494 -> 1479;
1494 -> 1480;
1494 -> 1473;
1494 -> 1172;
1495 -> 1172;
1496 -> 1465;
1496 -> 1494;
1497 -> 1494;
1498 -> 1496;
1498 -> 1497;
1498 -> 1494;
1499 -> 1496;
1499 -> 1498;
1500 -> 0;
1500 -> 1498;
1501 -> 1498;
1502 -> 1499;
1502 -> 1501;
1503 -> 1500;
1503 -> 1501;
1504 -> 1503;
1504 -> 1501;
1505 -> 1501;
1506 -> 1502;
1507 -> 1506;
1507 -> 1502;
1508 -> 1502;
1509 -> 1502;
1509 -> 1508;
1510 -> 1509;
1510 -> 1502;
1510 -> 1508;
1511 -> 1510;
1511 -> 1502;
1512 -> 1502;
1513 -> 1502;
1514 -> 1502;
1515 -> 1502;
1516 -> 1502;
1517 -> 1502;
1518 -> 1503;
1519 -> 1503;
1520 -> 1503;
1521 -> 1503;
1522 -> 1494;
1523 -> 1475;
1523 -> 1502;
1523 -> 1494;
1524 -> 1475;
1524 -> 0;
1524 -> 1494;
1525 -> 1465;
1525 -> 1502;
1525 -> 1494;
1526 -> 1494;
1527 -> 1525;
1527 -> 1526;
1528 -> 1503;
1528 -> 1526;
1529 -> 1494;
1530 -> 1529;
1530 -> 1527;
1531 -> 1530;
1531 -> 1494;
1532 -> 1486;
1532 -> 1494;
1533 -> 1527;
1533 -> 1494;
1534 -> 1494;
1535 -> 1527;
1535 -> 1172;
1536 -> 1463;
1536 -> 1535;
1536 -> 1531;
1536 -> 1167;
1537 -> 948;
1537 -> 922;
1538 -> 948;
1538 -> 922;
1539 -> 948;
1539 -> 922;
1540 -> 922;
1541 -> 1538;
1541 -> 1540;
1541 -> 922;
1542 -> 1539;
1542 -> 922;
1543 -> 1539;
1543 -> 1536;
1543 -> 1537;
1543 -> 922;
1544 -> 1538;
1544 -> 922;
1545 -> 922;
1546 -> 922;
1547 -> 1542;
1547 -> 1546;
1548 -> 1543;
1548 -> 1546;
1549 -> 1544;
1549 -> 1546;
1550 -> 1545;
1550 -> 1546;
1551 -> 1547;
1551 -> 1546;
1552 -> 1548;
1552 -> 1546;
1553 -> 1546;
1554 -> 1551;
1554 -> 1553;
1555 -> 1552;
1555 -> 1553;
1556 -> 1550;
1556 -> 1553;
1557 -> 1556;
1557 -> 1553;
1558 -> 1556;
1558 -> 1553;
1559 -> 1556;
1559 -> 1553;
1560 -> 1556;
1560 -> 1553;
1561 -> 1556;
1561 -> 1553;
1562 -> 1553;
1563 -> 1554;
1563 -> 1562;
1563 -> 1553;
1564 -> 1555;
1564 -> 1553;
1565 -> 0;
1565 -> 1553;
1566 -> 1553;
1567 -> 1564;
1567 -> 1566;
1568 -> 1565;
1568 -> 1566;
1569 -> 1555;
1569 -> 1553;
1570 -> 0;
1570 -> 1553;
1571 -> 1553;
1572 -> 1569;
1572 -> 1571;
1573 -> 1570;
1573 -> 1571;
1574 -> 1554;
1574 -> 1556;
1574 -> 1553;
1575 -> 1555;
1575 -> 1556;
1575 -> 1553;
1576 -> 1554;
1576 -> 1536;
1576 -> 1556;
1576 -> 1553;
1577 -> 1550;
1577 -> 1546;
1578 -> 1546;
1579 -> 1549;
1579 -> 1578;
1579 -> 1546;
1580 -> 1549;
1580 -> 1550;
1580 -> 1546;
1581 -> 948;
1581 -> 1545;
1581 -> 1536;
1581 -> 1576;
1581 -> 1575;
1581 -> 1574;
1581 -> 1560;
1581 -> 1561;
1581 -> 1580;
1581 -> 919;
1582 -> 948;
1582 -> 922;
1583 -> 948;
1583 -> 922;
1584 -> 948;
1584 -> 922;
1585 -> 948;
1585 -> 922;
1586 -> 948;
1586 -> 922;
1587 -> 922;
1588 -> 1582;
1588 -> 1581;
1588 -> 922;
1589 -> 922;
1590 -> 1583;
1590 -> 1581;
1590 -> 922;
1591 -> 1587;
1591 -> 922;
1592 -> 1589;
1592 -> 922;
1593 -> 948;
1593 -> 922;
1594 -> 948;
1594 -> 922;
1595 -> 948;
1595 -> 922;
1596 -> 948;
1596 -> 922;
1597 -> 948;
1597 -> 922;
1598 -> 1593;
1598 -> 922;
1599 -> 1594;
1599 -> 922;
1600 -> 1595;
1600 -> 922;
1601 -> 1596;
1601 -> 922;
1602 -> 922;
1603 -> 1598;
1603 -> 1602;
1604 -> 1599;
1604 -> 1602;
1605 -> 1600;
1605 -> 1602;
1606 -> 1601;
1606 -> 1602;
1607 -> 1597;
1607 -> 1602;
1608 -> 1602;
1609 -> 1604;
1609 -> 1608;
1609 -> 1602;
1610 -> 1603;
1610 -> 1602;
1611 -> 1604;
1611 -> 1602;
1612 -> 1605;
1612 -> 1602;
1613 -> 1602;
1614 -> 1605;
1614 -> 1613;
1614 -> 1602;
1615 -> 1614;
1615 -> 1606;
1615 -> 1602;
1616 -> 1602;
1617 -> 1610;
1617 -> 1616;
1618 -> 1611;
1618 -> 1616;
1619 -> 1612;
1619 -> 1616;
1620 -> 1615;
1620 -> 1616;
1621 -> 1607;
1621 -> 1616;
1622 -> 1617;
1622 -> 1581;
1622 -> 1616;
1623 -> 1617;
1623 -> 1622;
1624 -> 1618;
1624 -> 1622;
1625 -> 1622;
1626 -> 1623;
1626 -> 1625;
1627 -> 1624;
1627 -> 1625;
1628 -> 1621;
1628 -> 1625;
1629 -> 1626;
1629 -> 1625;
1630 -> 1629;
1630 -> 1625;
1631 -> 1627;
1631 -> 1625;
1632 -> 1625;
1633 -> 1630;
1633 -> 1632;
1634 -> 1631;
1634 -> 1632;
1635 -> 1628;
1635 -> 1632;
1636 -> 1633;
1636 -> 1622;
1636 -> 1632;
1637 -> 1634;
1637 -> 1632;
1638 -> 1633;
1638 -> 1632;
1639 -> 1632;
1640 -> 1636;
1640 -> 1639;
1641 -> 1637;
1641 -> 1639;
1642 -> 1638;
1642 -> 1639;
1643 -> 1635;
1643 -> 1639;
1644 -> 1643;
1644 -> 1636;
1644 -> 1639;
1645 -> 1640;
1645 -> 1639;
1646 -> 1642;
1646 -> 1639;
1647 -> 1641;
1647 -> 1639;
1648 -> 1639;
1649 -> 1644;
1649 -> 1648;
1650 -> 1645;
1650 -> 1648;
1651 -> 1646;
1651 -> 1648;
1652 -> 1647;
1652 -> 1648;
1653 -> 1650;
1653 -> 1648;
1654 -> 1649;
1654 -> 1653;
1654 -> 1636;
1654 -> 1648;
1655 -> 1648;
1656 -> 1654;
1656 -> 1655;
1656 -> 1648;
1657 -> 1654;
1657 -> 1648;
1658 -> 1652;
1658 -> 1648;
1659 -> 1651;
1659 -> 1648;
1660 -> 1648;
1661 -> 1657;
1661 -> 1660;
1662 -> 1658;
1662 -> 1660;
1663 -> 1659;
1663 -> 1660;
1664 -> 1661;
1664 -> 1654;
1664 -> 1660;
1665 -> 1660;
1666 -> 1664;
1666 -> 1665;
1666 -> 1660;
1667 -> 1654;
1667 -> 1648;
1668 -> 1629;
1668 -> 1664;
1668 -> 1625;
1669 -> 1625;
1670 -> 1668;
1670 -> 1669;
1671 -> 1628;
1671 -> 1669;
1672 -> 1670;
1672 -> 1664;
1672 -> 1669;
1673 -> 1670;
1673 -> 1664;
1673 -> 1669;
1674 -> 1669;
1675 -> 1673;
1675 -> 1674;
1676 -> 1673;
1676 -> 1674;
1677 -> 1671;
1677 -> 1674;
1678 -> 1675;
1678 -> 1674;
1679 -> 1676;
1679 -> 1674;
1680 -> 1678;
1680 -> 1679;
1680 -> 1672;
1680 -> 1674;
1681 -> 1680;
1681 -> 1674;
1682 -> 1677;
1682 -> 1680;
1682 -> 1681;
1683 -> 0;
1683 -> 1681;
1684 -> 1681;
1685 -> 1677;
1685 -> 1684;
1686 -> 1685;
1686 -> 1682;
1686 -> 1684;
1687 -> 1684;
1688 -> 1685;
1688 -> 1686;
1688 -> 1687;
1689 -> 1688;
1689 -> 1687;
1690 -> 1687;
1691 -> 1689;
1691 -> 1690;
1692 -> 1691;
1692 -> 1688;
1692 -> 1690;
1693 -> 1692;
1694 -> 1693;
1694 -> 1687;
1695 -> 1694;
1695 -> 1687;
1696 -> 1667;
1696 -> 1625;
1697 -> 1625;
1698 -> 1696;
1698 -> 1697;
1699 -> 1698;
1699 -> 1697;
1700 -> 1697;
1701 -> 1697;
1702 -> 1699;
1702 -> 1701;
1703 -> 1700;
1703 -> 1701;
1704 -> 1702;
1704 -> 1701;
1705 -> 1702;
1705 -> 1703;
1705 -> 1701;
1706 -> 1701;
1707 -> 1706;
1707 -> 1703;
1707 -> 1701;
1708 -> 1701;
1709 -> 1708;
1709 -> 1703;
1709 -> 1701;
1710 -> 1700;
1710 -> 1625;
1711 -> 1625;
1712 -> 1695;
1712 -> 1710;
1712 -> 1711;
1712 -> 1705;
1712 -> 1707;
1712 -> 1709;
1712 -> 1625;
1713 -> 1602;
1714 -> 1712;
1714 -> 1713;
1715 -> 1714;
1715 -> 1712;
1715 -> 1713;
1716 -> 1715;
1716 -> 1602;
1717 -> 1716;
1718 -> 1717;
1718 -> 1716;
1719 -> 1718;
1720 -> 1712;
1720 -> 1719;
1721 -> 1720;
1721 -> 1712;
1721 -> 1719;
1722 -> 1721;
1722 -> 1718;
1723 -> 1607;
1723 -> 1718;
1724 -> 1603;
1724 -> 1718;
1725 -> 1604;
1725 -> 1718;
1726 -> 1723;
1726 -> 1724;
1726 -> 1725;
1726 -> 1722;
1726 -> 1688;
1726 -> 1712;
1726 -> 1718;
1727 -> 1718;
1728 -> 1726;
1728 -> 1727;
1729 -> 1726;
1729 -> 1727;
1730 -> 1726;
1730 -> 1727;
1731 -> 1726;
1731 -> 1727;
1732 -> 1726;
1732 -> 1727;
1733 -> 1728;
1733 -> 1727;
1734 -> 1729;
1734 -> 1727;
1735 -> 1730;
1735 -> 1727;
1736 -> 1731;
1736 -> 1727;
1737 -> 1727;
1738 -> 1733;
1738 -> 1737;
1739 -> 1734;
1739 -> 1737;
1740 -> 1735;
1740 -> 1737;
1741 -> 1736;
1741 -> 1737;
1742 -> 1732;
1742 -> 1737;
1743 -> 1739;
1743 -> 1726;
1743 -> 1737;
1744 -> 1738;
1744 -> 1743;
1745 -> 1739;
1745 -> 1743;
1746 -> 1740;
1746 -> 1743;
1747 -> 1741;
1747 -> 1743;
1748 -> 1743;
1749 -> 1742;
1749 -> 1748;
1750 -> 1749;
1750 -> 1726;
1750 -> 1748;
1751 -> 1750;
1751 -> 1743;
1752 -> 1743;
1753 -> 1742;
1753 -> 1752;
1754 -> 1752;
1755 -> 1753;
1755 -> 1754;
1756 -> 1755;
1756 -> 1726;
1756 -> 1754;
1757 -> 1756;
1757 -> 1752;
1758 -> 1757;
1758 -> 1752;
1759 -> 1757;
1759 -> 1726;
1759 -> 0;
1759 -> 1752;
1760 -> 1757;
1760 -> 1752;
1761 -> 1757;
1761 -> 1726;
1761 -> 1752;
1762 -> 1761;
1762 -> 1743;
1763 -> 1742;
1763 -> 1726;
1763 -> 1743;
1764 -> 1743;
1765 -> 1744;
1765 -> 1764;
1766 -> 1745;
1766 -> 1764;
1767 -> 1746;
1767 -> 1764;
1768 -> 1747;
1768 -> 1764;
1769 -> 1751;
1769 -> 1764;
1770 -> 1762;
1770 -> 1764;
1771 -> 1763;
1771 -> 1764;
1772 -> 1766;
1772 -> 1764;
1773 -> 1766;
1773 -> 1772;
1773 -> 0;
1773 -> 1764;
1774 -> 1766;
1774 -> 1772;
1774 -> 0;
1774 -> 1764;
1775 -> 1766;
1775 -> 1764;
1776 -> 1770;
1776 -> 1764;
1777 -> 1775;
1777 -> 1776;
1777 -> 1772;
1777 -> 1764;
1778 -> 1768;
1778 -> 1764;
1779 -> 1778;
1779 -> 1764;
1780 -> 1765;
1780 -> 1764;
1781 -> 1777;
1781 -> 1764;
1782 -> 1767;
1782 -> 1764;
1783 -> 1769;
1783 -> 1764;
1784 -> 1771;
1784 -> 1764;
1785 -> 1764;
1786 -> 1780;
1786 -> 1785;
1787 -> 1781;
1787 -> 1785;
1788 -> 1782;
1788 -> 1785;
1789 -> 1783;
1789 -> 1785;
1790 -> 1784;
1790 -> 1785;
1791 -> 1785;
1792 -> 1786;
1792 -> 1791;
1792 -> 1785;
1793 -> 1787;
1793 -> 1785;
1794 -> 1789;
1794 -> 1785;
1795 -> 1785;
1796 -> 1793;
1796 -> 1794;
1796 -> 1795;
1796 -> 1777;
1796 -> 1785;
1797 -> 1785;
1798 -> 1796;
1798 -> 1785;
1799 -> 1785;
1800 -> 1797;
1800 -> 1799;
1800 -> 1785;
1801 -> 1796;
1801 -> 1785;
1802 -> 1801;
1802 -> 1764;
1803 -> 1778;
1803 -> 1802;
1804 -> 1743;
1805 -> 1727;
1806 -> 1712;
1806 -> 1716;
1807 -> 1806;
1807 -> 922;
1808 -> 1594;
1808 -> 922;
1809 -> 1593;
1809 -> 922;
1810 -> 1595;
1810 -> 922;
1811 -> 922;
1812 -> 1807;
1812 -> 1811;
1813 -> 1808;
1813 -> 1811;
1814 -> 1809;
1814 -> 1811;
1815 -> 1810;
1815 -> 1811;
1816 -> 1597;
1816 -> 1811;
1817 -> 1811;
1818 -> 1812;
1818 -> 1817;
1819 -> 1818;
1819 -> 1712;
1819 -> 1817;
1820 -> 1819;
1820 -> 0;
1820 -> 1817;
1821 -> 1820;
1821 -> 1811;
1822 -> 1812;
1822 -> 1811;
1823 -> 922;
1824 -> 1822;
1824 -> 1823;
1825 -> 1824;
1825 -> 1712;
1825 -> 1823;
1826 -> 948;
1826 -> 1825;
1826 -> 1796;
1826 -> 919;
1827 -> 948;
1827 -> 922;
1828 -> 948;
1828 -> 922;
1829 -> 948;
1829 -> 922;
1830 -> 1827;
1830 -> 922;
1831 -> 922;
1832 -> 1828;
1832 -> 922;
1833 -> 922;
1834 -> 922;
1835 -> 1830;
1835 -> 1834;
1836 -> 1831;
1836 -> 1834;
1837 -> 1832;
1837 -> 1834;
1838 -> 1833;
1838 -> 1834;
1839 -> 1829;
1839 -> 1834;
1840 -> 1835;
1840 -> 1834;
1841 -> 1836;
1841 -> 1834;
1842 -> 1837;
1842 -> 1834;
1843 -> 1838;
1843 -> 1834;
1844 -> 1834;
1845 -> 1840;
1845 -> 1844;
1846 -> 1841;
1846 -> 1844;
1847 -> 1842;
1847 -> 1844;
1848 -> 1843;
1848 -> 1844;
1849 -> 1839;
1849 -> 1844;
1850 -> 1849;
1850 -> 1844;
1851 -> 1849;
1851 -> 1844;
1852 -> 1849;
1852 -> 1844;
1853 -> 1849;
1853 -> 1844;
1854 -> 1844;
1855 -> 1845;
1855 -> 1854;
1855 -> 1844;
1856 -> 1844;
1857 -> 1848;
1857 -> 1856;
1857 -> 1844;
1858 -> 1844;
1859 -> 1848;
1859 -> 1858;
1859 -> 1844;
1860 -> 1845;
1860 -> 1849;
1860 -> 1844;
1861 -> 1846;
1861 -> 1849;
1861 -> 1844;
1862 -> 1847;
1862 -> 1849;
1862 -> 1844;
1863 -> 1848;
1863 -> 1849;
1863 -> 1844;
1864 -> 948;
1864 -> 1826;
1864 -> 1860;
1864 -> 1861;
1864 -> 1862;
1864 -> 1863;
1864 -> 919;
1865 -> 1864;
1865 -> 919;
1866 -> 921;
1866 -> 919;
1867 -> 919;
1868 -> 1865;
1868 -> 1867;
1869 -> 1866;
1869 -> 1867;
1870 -> 1868;
1870 -> 1867;
1871 -> 1869;
1871 -> 1867;
1872 -> 1867;
1873 -> 1870;
1873 -> 1872;
1874 -> 1871;
1874 -> 1872;
1875 -> 1873;
1875 -> 1872;
1876 -> 1874;
1876 -> 1872;
1877 -> 1872;
1878 -> 1872;
1879 -> 1875;
1879 -> 1878;
1880 -> 1876;
1880 -> 1878;
1881 -> 1877;
1881 -> 1878;
1882 -> 1878;
1883 -> 1880;
1883 -> 1882;
1883 -> 1878;
1884 -> 1880;
1884 -> 1878;
1885 -> 1884;
1885 -> 575;
1885 -> 917;
1885 -> 918;
1885 -> 720;
1885 -> 721;
1885 -> 730;
1885 -> 722;
1885 -> 723;
1885 -> 747;
1885 -> 726;
1885 -> 727;
1885 -> 740;
1885 -> 728;
1885 -> 729;
1885 -> 725;
1885 -> 744;
1885 -> 745;
1885 -> 746;
1885 -> 712;
1885 -> 888;
1885 -> 889;
1885 -> 898;
1885 -> 890;
1885 -> 891;
1885 -> 915;
1885 -> 894;
1885 -> 895;
1885 -> 908;
1885 -> 896;
1885 -> 897;
1885 -> 893;
1885 -> 912;
1885 -> 913;
1885 -> 914;
1885 -> 880;
1885 -> 655;
1885 -> 601;
1885 -> 823;
1885 -> 773;
1885 -> 1878;
1886 -> 1878;
1887 -> 1884;
1887 -> 1886;
1887 -> 575;
1887 -> 917;
1887 -> 918;
1887 -> 720;
1887 -> 721;
1887 -> 730;
1887 -> 722;
1887 -> 723;
1887 -> 747;
1887 -> 726;
1887 -> 727;
1887 -> 740;
1887 -> 728;
1887 -> 729;
1887 -> 725;
1887 -> 744;
1887 -> 745;
1887 -> 746;
1887 -> 712;
1887 -> 888;
1887 -> 889;
1887 -> 898;
1887 -> 890;
1887 -> 891;
1887 -> 915;
1887 -> 894;
1887 -> 895;
1887 -> 908;
1887 -> 896;
1887 -> 897;
1887 -> 893;
1887 -> 912;
1887 -> 913;
1887 -> 914;
1887 -> 880;
1887 -> 655;
1887 -> 601;
1887 -> 823;
1887 -> 773;
1887 -> 1878;
1888 -> 1887;
1888 -> 1886;
1889 -> 1888;
1889 -> 1887;
1889 -> 1886;
1890 -> 1880;
1890 -> 1878;
1891 -> 1890;
1891 -> 1889;
1891 -> 1878;
1892 -> 1878;
1893 -> 1890;
1893 -> 1892;
1893 -> 1889;
1893 -> 1878;
1894 -> 1893;
1894 -> 1892;
1895 -> 1894;
1895 -> 1893;
1895 -> 1892;
1896 -> 1879;
1896 -> 1878;
1897 -> 1881;
1897 -> 1889;
1897 -> 1895;
1897 -> 1878;
1898 -> 1896;
1898 -> 1897;
1898 -> 1878;
1899 -> 1878;
1900 -> 1898;
1900 -> 1899;
1901 -> 1898;
1901 -> 1899;
1902 -> 1898;
1902 -> 1899;
1903 -> 1898;
1903 -> 1899;
1904 -> 1898;
1904 -> 1899;
1905 -> 1904;
1905 -> 1899;
1906 -> 1904;
1906 -> 1899;
1907 -> 1904;
1907 -> 1899;
1908 -> 1904;
1908 -> 1899;
1909 -> 1904;
1909 -> 1899;
1910 -> 1904;
1910 -> 1899;
1911 -> 1904;
1911 -> 1899;
1912 -> 1904;
1912 -> 1899;
1913 -> 1904;
1913 -> 1899;
1914 -> 1904;
1914 -> 1899;
1915 -> 1904;
1915 -> 1899;
1916 -> 1900;
1916 -> 1898;
1916 -> 1904;
1916 -> 1899;
1917 -> 1900;
1917 -> 1898;
1917 -> 1904;
1917 -> 1899;
1918 -> 1900;
1918 -> 1898;
1918 -> 1904;
1918 -> 1899;
1919 -> 1900;
1919 -> 1898;
1919 -> 1904;
1919 -> 1899;
1920 -> 1902;
1920 -> 1899;
1921 -> 1920;
1922 -> 1921;
1922 -> 1904;
1922 -> 1899;
1923 -> 1903;
1923 -> 1899;
1924 -> 1923;
1925 -> 1924;
1925 -> 1904;
1925 -> 1899;
1926 -> 1899;
1927 -> 1899;
1928 -> 1900;
1928 -> 1898;
1928 -> 1927;
1928 -> 1899;
1929 -> 1900;
1929 -> 1898;
1929 -> 1899;
1930 -> 0;
1930 -> 1899;
1931 -> 1900;
1931 -> 1928;
1932 -> 1928;
1933 -> 1931;
1933 -> 1932;
1933 -> 1928;
1934 -> 1931;
1934 -> 1929;
1934 -> 1904;
1934 -> 1933;
1935 -> 1900;
1935 -> 1929;
1935 -> 1904;
1935 -> 1933;
1936 -> 1901;
1936 -> 1904;
1936 -> 1899;
1937 -> 1904;
1937 -> 1936;
1937 -> 1899;
1938 -> 1904;
1938 -> 1919;
1938 -> 1929;
1938 -> 1937;
1939 -> 1938;
1940 -> 1939;
1940 -> 1904;
1940 -> 1938;
1941 -> 1937;
1942 -> 1931;
1942 -> 1941;
1942 -> 1937;
1943 -> 1931;
1943 -> 1939;
1943 -> 1904;
1943 -> 1942;
1944 -> 1937;
1945 -> 1904;
1945 -> 1943;
1945 -> 1944;
1945 -> 1937;
1946 -> 1904;
1946 -> 1943;
1946 -> 1939;
1946 -> 1944;
1946 -> 1937;
1947 -> 1904;
1947 -> 1919;
1947 -> 1939;
1947 -> 1899;
1948 -> 1947;
1948 -> 1904;
1948 -> 1899;
1949 -> 1898;
1949 -> 1947;
1949 -> 1935;
1949 -> 1917;
1949 -> 1918;
1949 -> 1940;
1949 -> 1943;
1949 -> 1948;
1949 -> 1911;
1949 -> 1934;
1949 -> 1936;
1949 -> 1922;
1949 -> 1925;
1949 -> 1915;
1949 -> 1904;
1949 -> 1919;
1949 -> 1878;
1950 -> 1900;
1950 -> 1949;
1950 -> 1904;
1950 -> 1899;
1951 -> 1904;
1951 -> 1949;
1951 -> 1944;
1951 -> 1937;
1952 -> 1880;
1952 -> 1878;
1953 -> 1952;
1953 -> 1895;
1953 -> 1878;
1954 -> 1953;
1955 -> 1954;
1955 -> 1949;
1955 -> 1895;
1955 -> 1953;
1956 -> 1955;
1956 -> 1954;
1957 -> 1955;
1957 -> 1954;
1958 -> 1956;
1958 -> 1954;
1959 -> 1954;
1960 -> 1958;
1960 -> 1959;
1960 -> 1954;
1961 -> 1958;
1961 -> 1955;
1961 -> 1954;
1962 -> 1957;
1962 -> 1955;
1962 -> 1961;
1962 -> 1954;
1963 -> 1957;
1963 -> 1962;
1963 -> 1958;
1963 -> 1954;
1964 -> 1957;
1964 -> 1962;
1964 -> 1958;
1964 -> 1954;
1965 -> 1957;
1965 -> 1962;
1965 -> 1954;
1966 -> 1957;
1966 -> 1962;
1966 -> 1958;
1966 -> 1965;
1967 -> 1954;
1968 -> 1957;
1968 -> 1962;
1968 -> 1967;
1968 -> 1954;
1969 -> 1968;
1970 -> 1957;
1970 -> 1962;
1970 -> 1958;
1970 -> 1969;
1971 -> 1954;
1972 -> 1957;
1972 -> 1962;
1972 -> 1971;
1972 -> 1954;
1973 -> 1954;
1974 -> 1958;
1974 -> 1962;
1974 -> 1973;
1974 -> 1954;
1975 -> 1957;
1975 -> 1962;
1975 -> 1958;
1975 -> 1954;
1976 -> 1954;
1977 -> 1957;
1977 -> 1962;
1977 -> 1976;
1977 -> 1954;
1978 -> 1977;
1979 -> 1977;
1980 -> 1957;
1980 -> 1979;
1981 -> 1979;
1982 -> 1980;
1982 -> 1962;
1982 -> 1981;
1982 -> 1979;
1983 -> 1980;
1983 -> 1962;
1983 -> 1982;
1984 -> 1982;
1985 -> 1983;
1985 -> 1980;
1985 -> 1982;
1986 -> 1980;
1986 -> 1962;
1986 -> 1985;
1986 -> 1979;
1987 -> 1986;
1987 -> 1977;
1988 -> 1977;
1989 -> 1958;
1989 -> 1988;
1990 -> 1988;
1991 -> 1989;
1991 -> 1962;
1991 -> 1985;
1991 -> 1990;
1991 -> 1988;
1992 -> 1989;
1992 -> 1962;
1992 -> 1985;
1992 -> 1991;
1992 -> 1988;
1993 -> 1992;
1993 -> 1977;
1994 -> 1957;
1994 -> 1962;
1994 -> 1958;
1994 -> 1977;
1995 -> 1987;
1995 -> 1994;
1996 -> 1993;
1996 -> 1994;
1997 -> 1995;
1997 -> 1996;
1997 -> 1962;
1997 -> 1985;
1997 -> 1991;
1997 -> 1983;
1997 -> 1984;
1997 -> 1994;
1998 -> 1957;
1998 -> 1997;
1998 -> 1958;
1998 -> 1954;
1999 -> 1954;
2000 -> 1955;
2000 -> 1999;
2000 -> 1997;
2000 -> 1953;
2001 -> 1953;
2002 -> 2000;
2002 -> 2001;
2002 -> 1953;
2003 -> 2000;
2003 -> 2002;
2004 -> 2003;
2005 -> 2003;
2006 -> 2003;
2007 -> 2003;
2008 -> 2003;
2008 -> 2007;
2009 -> 2003;
2010 -> 2009;
2011 -> 2003;
2011 -> 2010;
2012 -> 2003;
2013 -> 2003;
2014 -> 2003;
2015 -> 2003;
2016 -> 2003;
2017 -> 1878;
2018 -> 1949;
2018 -> 2003;
2018 -> 2017;
2018 -> 1878;
2019 -> 1878;
2020 -> 1880;
2020 -> 1878;
2021 -> 1879;
2021 -> 1878;
2022 -> 1878;
2023 -> 2020;
2023 -> 2022;
2024 -> 2021;
2024 -> 2022;
2025 -> 2022;
2026 -> 2022;
2027 -> 2024;
2027 -> 2022;
2028 -> 2027;
2028 -> 2003;
2028 -> 2022;
2029 -> 2003;
2029 -> 2022;
2030 -> 2028;
2030 -> 2022;
2031 -> 2025;
2031 -> 2030;
2032 -> 2031;
2032 -> 2022;
2033 -> 2031;
2033 -> 2022;
2034 -> 2033;
2034 -> 2022;
2035 -> 2023;
2035 -> 2022;
2036 -> 2035;
2036 -> 2003;
2036 -> 2022;
2037 -> 2022;
2038 -> 2035;
2038 -> 2037;
2038 -> 2003;
2038 -> 2022;
2039 -> 2023;
2039 -> 2022;
2040 -> 2039;
2040 -> 2038;
2040 -> 2022;
2041 -> 2022;
2042 -> 2039;
2042 -> 2041;
2042 -> 2038;
2042 -> 2022;
2043 -> 2023;
2043 -> 2022;
2044 -> 2022;
2045 -> 2043;
2045 -> 2044;
2047 -> 2046;
2048 -> 2046;
2049 -> 2048;
2049 -> 2044;
2050 -> 2044;
2051 -> 2045;
2051 -> 2044;
2052 -> 2051;
2052 -> 2042;
2052 -> 2044;
2053 -> 2052;
2054 -> 2052;
2055 -> 2050;
2055 -> 2054;
2055 -> 2052;
2056 -> 2052;
2057 -> 2056;
2057 -> 2054;
2057 -> 2052;
2058 -> 2056;
2058 -> 2042;
2058 -> 2052;
2059 -> 2052;
2059 -> 2042;
2060 -> 2052;
2061 -> 2058;
2061 -> 2060;
2062 -> 2059;
2062 -> 2060;
2063 -> 2049;
2063 -> 2060;
2064 -> 2060;
2065 -> 2061;
2065 -> 2064;
2065 -> 2060;
2066 -> 2060;
2067 -> 2062;
2067 -> 2066;
2067 -> 2060;
2068 -> 2062;
2068 -> 2042;
2068 -> 2060;
2069 -> 2061;
2069 -> 2042;
2069 -> 2068;
2069 -> 2060;
2070 -> 2060;
2071 -> 2069;
2071 -> 2070;
2071 -> 2060;
2072 -> 2062;
2072 -> 2042;
2072 -> 2060;
2073 -> 2061;
2073 -> 2042;
2073 -> 2072;
2073 -> 2060;
2074 -> 2044;
2075 -> 2074;
2075 -> 2022;
2076 -> 2024;
2076 -> 2075;
2077 -> 2075;
2078 -> 2076;
2078 -> 2077;
2079 -> 2078;
2079 -> 2077;
2080 -> 2077;
2081 -> 2048;
2081 -> 2077;
2082 -> 2079;
2082 -> 2080;
2082 -> 2081;
2082 -> 2042;
2082 -> 2077;
2083 -> 2022;
2084 -> 2083;
2084 -> 2022;
2085 -> 2022;
2086 -> 2022;
2087 -> 2083;
2087 -> 2086;
2087 -> 2084;
2087 -> 2022;
2088 -> 2022;
2089 -> 2023;
2089 -> 2022;
2090 -> 2089;
2090 -> 2082;
2090 -> 2022;
2091 -> 2090;
2092 -> 2034;
2092 -> 2090;
2093 -> 2090;
2094 -> 2091;
2094 -> 2093;
2095 -> 2092;
2095 -> 2093;
2096 -> 2093;
2097 -> 2096;
2097 -> 2095;
2097 -> 2093;
2098 -> 2093;
2099 -> 2094;
2099 -> 2098;
2100 -> 2098;
2101 -> 2098;
2102 -> 2100;
2102 -> 2101;
2102 -> 2098;
2103 -> 2098;
2104 -> 2099;
2104 -> 2082;
2104 -> 2103;
2104 -> 2098;
2105 -> 2099;
2105 -> 2082;
2105 -> 2104;
2106 -> 2100;
2106 -> 2105;
2106 -> 2102;
2106 -> 2104;
2107 -> 2104;
2108 -> 2100;
2108 -> 2107;
2108 -> 2106;
2108 -> 2104;
2109 -> 2099;
2109 -> 2082;
2109 -> 2104;
2110 -> 2100;
2110 -> 2109;
2110 -> 2108;
2110 -> 2104;
2111 -> 2098;
2112 -> 2099;
2112 -> 2082;
2112 -> 2111;
2112 -> 2098;
2113 -> 2112;
2114 -> 2113;
2115 -> 2100;
2115 -> 2114;
2115 -> 2110;
2115 -> 2113;
2116 -> 2099;
2116 -> 2082;
2116 -> 2113;
2117 -> 2100;
2117 -> 2116;
2117 -> 2115;
2117 -> 2113;
2118 -> 2112;
2119 -> 2100;
2119 -> 2118;
2119 -> 2117;
2119 -> 2112;
2120 -> 2099;
2120 -> 2082;
2120 -> 2098;
2121 -> 2098;
2122 -> 2100;
2122 -> 2121;
2122 -> 2119;
2122 -> 2098;
2123 -> 2098;
2124 -> 2099;
2124 -> 2082;
2124 -> 2123;
2124 -> 2098;
2125 -> 2124;
2126 -> 2100;
2126 -> 2125;
2126 -> 2122;
2126 -> 2124;
2127 -> 2124;
2128 -> 2127;
2128 -> 2124;
2129 -> 2124;
2130 -> 2128;
2130 -> 2124;
2131 -> 2130;
2132 -> 2100;
2132 -> 2131;
2132 -> 2126;
2132 -> 2130;
2133 -> 2128;
2133 -> 2130;
2134 -> 2100;
2134 -> 2133;
2134 -> 2132;
2134 -> 2130;
2135 -> 2130;
2136 -> 2100;
2136 -> 2135;
2136 -> 2134;
2136 -> 2130;
2137 -> 2130;
2138 -> 2137;
2139 -> 2100;
2139 -> 2138;
2139 -> 2136;
2139 -> 2137;
2140 -> 2124;
2141 -> 2100;
2141 -> 2140;
2141 -> 2139;
2141 -> 2124;
2142 -> 2098;
2143 -> 2099;
2143 -> 2130;
2143 -> 2142;
2143 -> 2098;
2144 -> 2143;
2145 -> 2100;
2145 -> 2144;
2145 -> 2141;
2145 -> 2143;
2146 -> 2143;
2147 -> 2100;
2147 -> 2146;
2147 -> 2145;
2147 -> 2143;
2148 -> 2143;
2149 -> 2100;
2149 -> 2148;
2149 -> 2147;
2149 -> 2143;
2150 -> 2143;
2151 -> 2100;
2151 -> 2150;
2151 -> 2149;
2151 -> 2143;
2152 -> 2143;
2153 -> 2100;
2153 -> 2152;
2153 -> 2151;
2153 -> 2143;
2154 -> 2099;
2154 -> 2130;
2154 -> 2098;
2155 -> 2098;
2156 -> 2099;
2156 -> 2130;
2156 -> 2155;
2156 -> 2098;
2157 -> 2098;
2158 -> 2099;
2158 -> 2130;
2158 -> 2157;
2158 -> 2098;
2159 -> 2098;
2160 -> 2099;
2160 -> 2130;
2160 -> 2159;
2160 -> 2098;
2161 -> 2100;
2161 -> 2153;
2161 -> 2098;
2162 -> 2161;
2162 -> 2093;
2163 -> 2097;
2163 -> 2162;
2163 -> 2093;
2164 -> 2088;
2164 -> 2163;
2164 -> 2090;
2165 -> 2034;
2165 -> 2130;
2166 -> 2165;
2166 -> 2130;
2167 -> 2130;
2168 -> 2167;
2168 -> 2166;
2168 -> 2130;
2169 -> 2130;
2170 -> 2130;
2171 -> 2169;
2171 -> 2170;
2171 -> 2130;
2172 -> 2130;
2173 -> 2130;
2173 -> 2172;
2174 -> 2169;
2174 -> 2173;
2174 -> 2171;
2174 -> 2172;
2175 -> 2172;
2176 -> 2169;
2176 -> 2175;
2176 -> 2174;
2176 -> 2172;
2177 -> 2130;
2177 -> 2172;
2178 -> 2169;
2178 -> 2177;
2178 -> 2176;
2178 -> 2172;
2179 -> 2130;
2180 -> 2179;
2181 -> 2180;
2182 -> 2169;
2182 -> 2181;
2182 -> 2178;
2182 -> 2180;
2183 -> 2130;
2183 -> 2180;
2184 -> 2169;
2184 -> 2183;
2184 -> 2182;
2184 -> 2180;
2185 -> 2179;
2186 -> 2169;
2186 -> 2185;
2186 -> 2184;
2186 -> 2179;
2187 -> 2130;
2188 -> 2130;
2189 -> 2169;
2189 -> 2188;
2189 -> 2186;
2189 -> 2130;
2190 -> 2130;
2191 -> 2169;
2191 -> 2190;
2191 -> 2189;
2191 -> 2130;
2192 -> 2169;
2192 -> 2131;
2192 -> 2191;
2192 -> 2130;
2193 -> 2130;
2194 -> 2169;
2194 -> 2193;
2194 -> 2192;
2194 -> 2130;
2195 -> 2169;
2195 -> 2135;
2195 -> 2194;
2195 -> 2130;
2196 -> 2169;
2196 -> 2138;
2196 -> 2195;
2196 -> 2137;
2197 -> 2130;
2198 -> 2169;
2198 -> 2197;
2198 -> 2196;
2198 -> 2130;
2199 -> 2130;
2200 -> 2199;
2201 -> 2169;
2201 -> 2200;
2201 -> 2198;
2201 -> 2199;
2202 -> 2199;
2203 -> 2169;
2203 -> 2202;
2203 -> 2201;
2203 -> 2199;
2204 -> 2199;
2205 -> 2169;
2205 -> 2204;
2205 -> 2203;
2205 -> 2199;
2206 -> 2199;
2207 -> 2169;
2207 -> 2206;
2207 -> 2205;
2207 -> 2199;
2208 -> 2199;
2209 -> 2169;
2209 -> 2208;
2209 -> 2207;
2209 -> 2199;
2210 -> 2130;
2211 -> 2130;
2212 -> 2130;
2213 -> 2130;
2214 -> 2169;
2214 -> 2209;
2214 -> 2130;
2215 -> 2214;
2215 -> 2130;
2216 -> 2168;
2216 -> 2215;
2216 -> 2130;
2217 -> 2083;
2217 -> 2022;
2218 -> 2088;
2218 -> 2022;
2219 -> 2022;
2220 -> 2217;
2220 -> 2219;
2221 -> 2218;
2221 -> 2219;
2222 -> 2221;
2222 -> 2164;
2222 -> 2219;
2223 -> 2219;
2224 -> 2223;
2224 -> 2222;
2224 -> 2219;
2225 -> 2221;
2225 -> 2223;
2225 -> 2164;
2225 -> 2224;
2226 -> 2220;
2226 -> 2225;
2226 -> 2087;
2226 -> 2224;
2227 -> 2224;
2228 -> 2227;
2229 -> 2220;
2229 -> 2228;
2229 -> 2226;
2229 -> 2227;
2230 -> 2220;
2230 -> 2229;
2230 -> 2224;
2231 -> 2022;
2232 -> 2022;
2233 -> 2083;
2233 -> 2232;
2233 -> 2230;
2233 -> 2022;
2234 -> 2022;
2235 -> 2082;
2235 -> 2130;
2235 -> 2022;
2236 -> 2022;
2237 -> 2235;
2237 -> 2022;
2238 -> 2237;
2238 -> 2236;
2239 -> 2237;
2239 -> 2236;
2240 -> 2237;
2240 -> 2236;
2241 -> 2236;
2242 -> 2238;
2242 -> 2241;
2242 -> 2236;
2243 -> 2236;
2244 -> 2239;
2244 -> 2243;
2244 -> 2236;
2245 -> 2239;
2245 -> 2237;
2245 -> 2236;
2246 -> 2238;
2246 -> 2237;
2246 -> 2245;
2246 -> 2236;
2247 -> 2236;
2248 -> 2246;
2248 -> 2247;
2248 -> 2236;
2249 -> 2239;
2249 -> 2237;
2249 -> 2236;
2250 -> 2238;
2250 -> 2237;
2250 -> 2249;
2250 -> 2236;
2251 -> 2239;
2251 -> 2250;
2251 -> 2236;
2252 -> 2251;
2252 -> 2247;
2252 -> 2236;
2253 -> 2235;
2253 -> 2250;
2254 -> 2253;
2254 -> 2250;
2255 -> 2254;
2255 -> 2250;
2256 -> 2250;
2257 -> 2250;
2258 -> 2032;
2258 -> 2250;
2259 -> 2083;
2259 -> 2258;
2260 -> 2034;
2260 -> 2258;
2261 -> 2258;
2262 -> 2259;
2262 -> 2261;
2263 -> 2260;
2263 -> 2261;
2264 -> 2261;
2265 -> 2264;
2265 -> 2263;
2265 -> 2261;
2266 -> 2262;
2266 -> 2264;
2266 -> 2265;
2266 -> 2233;
2266 -> 2261;
2267 -> 2258;
2268 -> 2258;
2269 -> 2083;
2269 -> 2268;
2269 -> 2266;
2269 -> 2258;
2270 -> 2253;
2270 -> 2254;
2270 -> 2258;
2271 -> 2083;
2271 -> 2270;
2271 -> 2269;
2271 -> 2258;
2272 -> 2253;
2272 -> 2270;
2272 -> 2258;
2273 -> 2272;
2273 -> 2270;
2273 -> 2258;
2274 -> 2083;
2274 -> 2273;
2275 -> 2034;
2275 -> 2273;
2276 -> 2273;
2277 -> 2274;
2277 -> 2276;
2278 -> 2275;
2278 -> 2276;
2279 -> 2276;
2280 -> 2279;
2280 -> 2278;
2280 -> 2276;
2281 -> 2277;
2281 -> 2279;
2281 -> 2280;
2281 -> 2271;
2281 -> 2276;
2282 -> 2273;
2283 -> 2273;
2284 -> 2083;
2284 -> 2283;
2284 -> 2281;
2284 -> 2273;
2285 -> 2273;
2286 -> 2083;
2286 -> 2285;
2286 -> 2284;
2286 -> 2273;
2287 -> 2253;
2287 -> 2250;
2288 -> 2250;
2289 -> 2036;
2289 -> 2250;
2290 -> 2040;
2290 -> 2250;
2291 -> 2250;
2292 -> 2287;
2292 -> 2291;
2293 -> 2288;
2293 -> 2291;
2294 -> 2289;
2294 -> 2291;
2295 -> 2290;
2295 -> 2291;
2296 -> 2288;
2296 -> 2291;
2297 -> 2296;
2297 -> 2291;
2298 -> 2296;
2298 -> 2291;
2299 -> 2296;
2299 -> 2291;
2300 -> 2296;
2300 -> 2291;
2301 -> 2296;
2301 -> 2291;
2302 -> 2296;
2302 -> 2291;
2303 -> 2296;
2303 -> 2291;
2304 -> 2296;
2304 -> 2291;
2305 -> 2296;
2305 -> 2291;
2306 -> 2292;
2306 -> 2285;
2306 -> 2296;
2306 -> 2291;
2307 -> 2292;
2307 -> 2285;
2307 -> 2296;
2307 -> 2291;
2308 -> 2292;
2308 -> 2285;
2308 -> 2296;
2308 -> 2291;
2309 -> 2292;
2309 -> 2285;
2309 -> 2296;
2309 -> 2291;
2310 -> 2291;
2311 -> 2292;
2311 -> 2285;
2311 -> 2291;
2312 -> 2296;
2313 -> 2296;
2313 -> 2311;
2313 -> 2312;
2314 -> 2296;
2314 -> 2311;
2314 -> 2309;
2314 -> 2312;
2315 -> 2288;
2315 -> 2250;
2316 -> 2023;
2316 -> 2250;
2317 -> 2288;
2317 -> 2250;
2318 -> 2316;
2318 -> 2317;
2318 -> 2309;
2318 -> 2311;
2318 -> 2307;
2318 -> 2308;
2318 -> 2296;
2318 -> 2293;
2318 -> 2294;
2318 -> 2295;
2318 -> 2250;
2319 -> 2250;
2320 -> 2319;
2321 -> 2318;
2321 -> 2320;
2321 -> 2319;
2322 -> 2318;
2322 -> 2319;
2323 -> 2318;
2323 -> 2319;
2324 -> 2318;
2324 -> 2319;
2325 -> 2318;
2325 -> 2324;
2326 -> 2319;
2327 -> 2318;
2327 -> 2326;
2327 -> 2319;
2328 -> 2327;
2329 -> 2318;
2329 -> 2328;
2330 -> 2319;
2331 -> 2318;
2331 -> 2330;
2331 -> 2319;
2332 -> 2319;
2333 -> 2318;
2333 -> 2332;
2333 -> 2319;
2334 -> 2318;
2334 -> 2319;
2335 -> 2318;
2336 -> 2318;
2336 -> 2319;
2337 -> 2250;
2338 -> 2318;
2338 -> 2337;
2338 -> 2250;
2339 -> 2023;
2339 -> 2318;
2339 -> 2338;
2340 -> 2288;
2340 -> 2250;
2341 -> 2034;
2341 -> 2250;
2342 -> 2250;
2343 -> 2340;
2343 -> 2342;
2344 -> 2341;
2344 -> 2342;
2345 -> 2342;
2346 -> 2345;
2346 -> 2344;
2346 -> 2342;
2347 -> 2342;
2348 -> 2342;
2349 -> 2347;
2349 -> 2348;
2349 -> 2342;
2350 -> 2342;
2351 -> 2343;
2351 -> 2318;
2351 -> 2350;
2351 -> 2342;
2352 -> 2343;
2352 -> 2318;
2352 -> 2351;
2353 -> 2347;
2353 -> 2352;
2353 -> 2349;
2353 -> 2351;
2354 -> 2351;
2355 -> 2347;
2355 -> 2354;
2355 -> 2353;
2355 -> 2351;
2356 -> 2343;
2356 -> 2318;
2356 -> 2351;
2357 -> 2347;
2357 -> 2356;
2357 -> 2355;
2357 -> 2351;
2358 -> 2342;
2359 -> 2343;
2359 -> 2318;
2359 -> 2358;
2359 -> 2342;
2360 -> 2359;
2361 -> 2360;
2362 -> 2347;
2362 -> 2361;
2362 -> 2357;
2362 -> 2360;
2363 -> 2343;
2363 -> 2318;
2363 -> 2360;
2364 -> 2347;
2364 -> 2363;
2364 -> 2362;
2364 -> 2360;
2365 -> 2359;
2366 -> 2347;
2366 -> 2365;
2366 -> 2364;
2366 -> 2359;
2367 -> 2343;
2367 -> 2318;
2367 -> 2342;
2368 -> 2342;
2369 -> 2347;
2369 -> 2368;
2369 -> 2366;
2369 -> 2342;
2370 -> 2343;
2370 -> 2318;
2370 -> 2342;
2371 -> 2370;
2372 -> 2347;
2372 -> 2371;
2372 -> 2369;
2372 -> 2370;
2373 -> 2370;
2374 -> 2347;
2374 -> 2373;
2374 -> 2372;
2374 -> 2370;
2375 -> 2370;
2376 -> 2347;
2376 -> 2375;
2376 -> 2374;
2376 -> 2370;
2377 -> 2370;
2378 -> 2347;
2378 -> 2377;
2378 -> 2376;
2378 -> 2370;
2379 -> 2370;
2380 -> 2379;
2381 -> 2347;
2381 -> 2380;
2381 -> 2378;
2381 -> 2379;
2382 -> 2370;
2383 -> 2347;
2383 -> 2382;
2383 -> 2381;
2383 -> 2370;
2384 -> 2342;
2385 -> 2343;
2385 -> 2370;
2385 -> 2384;
2385 -> 2342;
2386 -> 2385;
2387 -> 2347;
2387 -> 2386;
2387 -> 2383;
2387 -> 2385;
2388 -> 2385;
2389 -> 2347;
2389 -> 2388;
2389 -> 2387;
2389 -> 2385;
2390 -> 2385;
2391 -> 2347;
2391 -> 2390;
2391 -> 2389;
2391 -> 2385;
2392 -> 2385;
2393 -> 2347;
2393 -> 2392;
2393 -> 2391;
2393 -> 2385;
2394 -> 2385;
2395 -> 2347;
2395 -> 2394;
2395 -> 2393;
2395 -> 2385;
2396 -> 2343;
2396 -> 2370;
2396 -> 2342;
2397 -> 2342;
2398 -> 2343;
2398 -> 2370;
2398 -> 2397;
2398 -> 2342;
2399 -> 2342;
2400 -> 2343;
2400 -> 2370;
2400 -> 2399;
2400 -> 2342;
2401 -> 2342;
2402 -> 2343;
2402 -> 2370;
2402 -> 2401;
2402 -> 2342;
2403 -> 2347;
2403 -> 2395;
2403 -> 2342;
2404 -> 2403;
2404 -> 2342;
2405 -> 2346;
2405 -> 2404;
2405 -> 2342;
2406 -> 2083;
2406 -> 2405;
2406 -> 2286;
2406 -> 2250;
2407 -> 2339;
2407 -> 2250;
2408 -> 2034;
2408 -> 2250;
2409 -> 2250;
2410 -> 2407;
2410 -> 2409;
2411 -> 2408;
2411 -> 2409;
2412 -> 2409;
2413 -> 2412;
2413 -> 2411;
2413 -> 2409;
2414 -> 2409;
2415 -> 2409;
2416 -> 2414;
2416 -> 2415;
2416 -> 2409;
2417 -> 2409;
2418 -> 2410;
2418 -> 2370;
2418 -> 2417;
2418 -> 2409;
2419 -> 2410;
2419 -> 2370;
2419 -> 2418;
2420 -> 2414;
2420 -> 2419;
2420 -> 2416;
2420 -> 2418;
2421 -> 2418;
2422 -> 2414;
2422 -> 2421;
2422 -> 2420;
2422 -> 2418;
2423 -> 2410;
2423 -> 2370;
2423 -> 2418;
2424 -> 2414;
2424 -> 2423;
2424 -> 2422;
2424 -> 2418;
2425 -> 2409;
2426 -> 2410;
2426 -> 2370;
2426 -> 2425;
2426 -> 2409;
2427 -> 2426;
2428 -> 2427;
2429 -> 2414;
2429 -> 2428;
2429 -> 2424;
2429 -> 2427;
2430 -> 2410;
2430 -> 2370;
2430 -> 2427;
2431 -> 2414;
2431 -> 2430;
2431 -> 2429;
2431 -> 2427;
2432 -> 2426;
2433 -> 2414;
2433 -> 2432;
2433 -> 2431;
2433 -> 2426;
2434 -> 2410;
2434 -> 2370;
2434 -> 2409;
2435 -> 2409;
2436 -> 2414;
2436 -> 2435;
2436 -> 2433;
2436 -> 2409;
2437 -> 2410;
2437 -> 2370;
2437 -> 2409;
2438 -> 2437;
2439 -> 2414;
2439 -> 2438;
2439 -> 2436;
2439 -> 2437;
2440 -> 2437;
2441 -> 2414;
2441 -> 2440;
2441 -> 2439;
2441 -> 2437;
2442 -> 2437;
2443 -> 2414;
2443 -> 2442;
2443 -> 2441;
2443 -> 2437;
2444 -> 2437;
2445 -> 2414;
2445 -> 2444;
2445 -> 2443;
2445 -> 2437;
2446 -> 2437;
2447 -> 2446;
2448 -> 2414;
2448 -> 2447;
2448 -> 2445;
2448 -> 2446;
2449 -> 2437;
2450 -> 2414;
2450 -> 2449;
2450 -> 2448;
2450 -> 2437;
2451 -> 2409;
2452 -> 2410;
2452 -> 2437;
2452 -> 2451;
2452 -> 2409;
2453 -> 2452;
2454 -> 2414;
2454 -> 2453;
2454 -> 2450;
2454 -> 2452;
2455 -> 2452;
2456 -> 2414;
2456 -> 2455;
2456 -> 2454;
2456 -> 2452;
2457 -> 2452;
2458 -> 2414;
2458 -> 2457;
2458 -> 2456;
2458 -> 2452;
2459 -> 2452;
2460 -> 2414;
2460 -> 2459;
2460 -> 2458;
2460 -> 2452;
2461 -> 2452;
2462 -> 2414;
2462 -> 2461;
2462 -> 2460;
2462 -> 2452;
2463 -> 2410;
2463 -> 2437;
2463 -> 2409;
2464 -> 2409;
2465 -> 2410;
2465 -> 2437;
2465 -> 2464;
2465 -> 2409;
2466 -> 2409;
2467 -> 2410;
2467 -> 2437;
2467 -> 2466;
2467 -> 2409;
2468 -> 2409;
2469 -> 2410;
2469 -> 2437;
2469 -> 2468;
2469 -> 2409;
2470 -> 2414;
2470 -> 2462;
2470 -> 2409;
2471 -> 2470;
2471 -> 2409;
2472 -> 2413;
2472 -> 2471;
2472 -> 2409;
2473 -> 2234;
2473 -> 2472;
2473 -> 2250;
2474 -> 2437;
2475 -> 2437;
2476 -> 2475;
2477 -> 2083;
2477 -> 2476;
2477 -> 2406;
2477 -> 2475;
2478 -> 2083;
2478 -> 2437;
2479 -> 2034;
2479 -> 2437;
2480 -> 2437;
2481 -> 2478;
2481 -> 2480;
2482 -> 2479;
2482 -> 2480;
2483 -> 2480;
2484 -> 2483;
2484 -> 2482;
2484 -> 2480;
2485 -> 2437;
2486 -> 2437;
2487 -> 2083;
2487 -> 2437;
2488 -> 2034;
2488 -> 2437;
2489 -> 2437;
2490 -> 2487;
2490 -> 2489;
2491 -> 2488;
2491 -> 2489;
2492 -> 2489;
2493 -> 2492;
2493 -> 2491;
2493 -> 2489;
2494 -> 2437;
2495 -> 2437;
2496 -> 2437;
2497 -> 2437;
2498 -> 2437;
2499 -> 2437;
2500 -> 2437;
2501 -> 2437;
2502 -> 2437;
2503 -> 2437;
2504 -> 2437;
2505 -> 2437;
2506 -> 2437;
2507 -> 2437;
2508 -> 2437;
2509 -> 2437;
2510 -> 2437;
2511 -> 2437;
2512 -> 2437;
2513 -> 2437;
2513 -> 2512;
2514 -> 2437;
2515 -> 2514;
2516 -> 2437;
2516 -> 2515;
2517 -> 2437;
2518 -> 2437;
2519 -> 2437;
2520 -> 2437;
2521 -> 2437;
2522 -> 2521;
2523 -> 2521;
2524 -> 2521;
2525 -> 2521;
2526 -> 2521;
2526 -> 2525;
2527 -> 2521;
2528 -> 2527;
2529 -> 2521;
2529 -> 2528;
2530 -> 2521;
2531 -> 2521;
2532 -> 2521;
2533 -> 2521;
2534 -> 2521;
2535 -> 2034;
2535 -> 2437;
2536 -> 2535;
2536 -> 2437;
2537 -> 2437;
2538 -> 2537;
2538 -> 2536;
2538 -> 2437;
2539 -> 2437;
2540 -> 2437;
2541 -> 2539;
2541 -> 2540;
2541 -> 2437;
2542 -> 2437;
2543 -> 2437;
2543 -> 2521;
2543 -> 2542;
2544 -> 2437;
2544 -> 2521;
2544 -> 2543;
2545 -> 2539;
2545 -> 2544;
2545 -> 2541;
2545 -> 2543;
2546 -> 2543;
2547 -> 2539;
2547 -> 2546;
2547 -> 2545;
2547 -> 2543;
2548 -> 2437;
2548 -> 2521;
2548 -> 2543;
2549 -> 2539;
2549 -> 2548;
2549 -> 2547;
2549 -> 2543;
2550 -> 2437;
2551 -> 2437;
2551 -> 2521;
2551 -> 2550;
2552 -> 2551;
2553 -> 2552;
2554 -> 2539;
2554 -> 2553;
2554 -> 2549;
2554 -> 2552;
2555 -> 2437;
2555 -> 2521;
2555 -> 2552;
2556 -> 2539;
2556 -> 2555;
2556 -> 2554;
2556 -> 2552;
2557 -> 2551;
2558 -> 2539;
2558 -> 2557;
2558 -> 2556;
2558 -> 2551;
2559 -> 2437;
2559 -> 2521;
2560 -> 2437;
2561 -> 2539;
2561 -> 2560;
2561 -> 2558;
2561 -> 2437;
2562 -> 2521;
2563 -> 2539;
2563 -> 2562;
2563 -> 2561;
2563 -> 2521;
2564 -> 2521;
2565 -> 2539;
2565 -> 2564;
2565 -> 2563;
2565 -> 2521;
2566 -> 2521;
2567 -> 2539;
2567 -> 2566;
2567 -> 2565;
2567 -> 2521;
2568 -> 2521;
2569 -> 2539;
2569 -> 2568;
2569 -> 2567;
2569 -> 2521;
2570 -> 2521;
2571 -> 2570;
2572 -> 2539;
2572 -> 2571;
2572 -> 2569;
2572 -> 2570;
2573 -> 2521;
2574 -> 2539;
2574 -> 2573;
2574 -> 2572;
2574 -> 2521;
2575 -> 2437;
2576 -> 2437;
2576 -> 2521;
2576 -> 2575;
2577 -> 2576;
2578 -> 2539;
2578 -> 2577;
2578 -> 2574;
2578 -> 2576;
2579 -> 2576;
2580 -> 2539;
2580 -> 2579;
2580 -> 2578;
2580 -> 2576;
2581 -> 2576;
2582 -> 2539;
2582 -> 2581;
2582 -> 2580;
2582 -> 2576;
2583 -> 2576;
2584 -> 2539;
2584 -> 2583;
2584 -> 2582;
2584 -> 2576;
2585 -> 2576;
2586 -> 2539;
2586 -> 2585;
2586 -> 2584;
2586 -> 2576;
2587 -> 2437;
2587 -> 2521;
2588 -> 2437;
2589 -> 2437;
2589 -> 2521;
2589 -> 2588;
2590 -> 2437;
2591 -> 2437;
2591 -> 2521;
2591 -> 2590;
2592 -> 2437;
2593 -> 2437;
2593 -> 2521;
2593 -> 2592;
2594 -> 2539;
2594 -> 2586;
2594 -> 2437;
2595 -> 2594;
2595 -> 2437;
2596 -> 2538;
2596 -> 2595;
2596 -> 2437;
2597 -> 2083;
2597 -> 2596;
2597 -> 2477;
2597 -> 2437;
2598 -> 2034;
2598 -> 2437;
2599 -> 2598;
2599 -> 2437;
2600 -> 2537;
2600 -> 2599;
2600 -> 2437;
2601 -> 2521;
2601 -> 2543;
2602 -> 2539;
2602 -> 2601;
2602 -> 2541;
2602 -> 2543;
2603 -> 2539;
2603 -> 2546;
2603 -> 2602;
2603 -> 2543;
2604 -> 2521;
2604 -> 2543;
2605 -> 2539;
2605 -> 2604;
2605 -> 2603;
2605 -> 2543;
2606 -> 2539;
2606 -> 2553;
2606 -> 2605;
2606 -> 2552;
2607 -> 2521;
2607 -> 2552;
2608 -> 2539;
2608 -> 2607;
2608 -> 2606;
2608 -> 2552;
2609 -> 2539;
2609 -> 2557;
2609 -> 2608;
2609 -> 2551;
2610 -> 2539;
2610 -> 2560;
2610 -> 2609;
2610 -> 2437;
2611 -> 2539;
2611 -> 2562;
2611 -> 2610;
2611 -> 2521;
2612 -> 2539;
2612 -> 2564;
2612 -> 2611;
2612 -> 2521;
2613 -> 2539;
2613 -> 2566;
2613 -> 2612;
2613 -> 2521;
2614 -> 2539;
2614 -> 2568;
2614 -> 2613;
2614 -> 2521;
2615 -> 2539;
2615 -> 2571;
2615 -> 2614;
2615 -> 2570;
2616 -> 2539;
2616 -> 2573;
2616 -> 2615;
2616 -> 2521;
2617 -> 2539;
2617 -> 2577;
2617 -> 2616;
2617 -> 2576;
2618 -> 2539;
2618 -> 2579;
2618 -> 2617;
2618 -> 2576;
2619 -> 2539;
2619 -> 2581;
2619 -> 2618;
2619 -> 2576;
2620 -> 2539;
2620 -> 2583;
2620 -> 2619;
2620 -> 2576;
2621 -> 2539;
2621 -> 2585;
2621 -> 2620;
2621 -> 2576;
2622 -> 2539;
2622 -> 2621;
2622 -> 2437;
2623 -> 2622;
2623 -> 2437;
2624 -> 2600;
2624 -> 2623;
2624 -> 2437;
2625 -> 2234;
2625 -> 2624;
2625 -> 2473;
2625 -> 2437;
2626 -> 2022;
2627 -> 2437;
2627 -> 2626;
2627 -> 2022;
2628 -> 2083;
2628 -> 2597;
2628 -> 2627;
2629 -> 2022;
2630 -> 2083;
2630 -> 2629;
2630 -> 2628;
2630 -> 2022;
2631 -> 2088;
2631 -> 2022;
2632 -> 2234;
2632 -> 2022;
2636 -> 2634;
2636 -> 2633;
2637 -> 2635;
2637 -> 2633;
2638 -> 2633;
2639 -> 0;
2639 -> 2022;
2640 -> 2022;
2641 -> 2022;
2642 -> 2631;
2642 -> 2641;
2643 -> 2632;
2643 -> 2641;
2644 -> 2639;
2644 -> 2641;
2645 -> 2640;
2645 -> 2641;
2646 -> 2640;
2646 -> 2641;
2647 -> 2641;
2648 -> 2645;
2648 -> 2647;
2648 -> 2641;
2649 -> 2648;
2649 -> 2641;
2650 -> 0;
2652 -> 2650;
2652 -> 2651;
2653 -> 2651;
2655 -> 2654;
2657 -> 2656;
2659 -> 2658;
2660 -> 2653;
2661 -> 2653;
2661 -> 2651;
2662 -> 2652;
2662 -> 2653;
2662 -> 2651;
2663 -> 2651;
2664 -> 2641;
2665 -> 2664;
2665 -> 2646;
2665 -> 2641;
2666 -> 2642;
2666 -> 2641;
2667 -> 2643;
2667 -> 2641;
2668 -> 2644;
2668 -> 2641;
2669 -> 2666;
2669 -> 2641;
2670 -> 2667;
2670 -> 2641;
2671 -> 2665;
2671 -> 2641;
2672 -> 2641;
2673 -> 2669;
2673 -> 2672;
2674 -> 2670;
2674 -> 2672;
2675 -> 2671;
2675 -> 2672;
2676 -> 2649;
2676 -> 2672;
2677 -> 2673;
2677 -> 2672;
2678 -> 2673;
2678 -> 2666;
2678 -> 2672;
2679 -> 2674;
2679 -> 2672;
2680 -> 2674;
2680 -> 2667;
2680 -> 2672;
2681 -> 2672;
2682 -> 2677;
2682 -> 2681;
2683 -> 2678;
2683 -> 2681;
2684 -> 2679;
2684 -> 2681;
2685 -> 2680;
2685 -> 2681;
2686 -> 2676;
2686 -> 2681;
2687 -> 2682;
2687 -> 2681;
2688 -> 2683;
2688 -> 2681;
2689 -> 2684;
2689 -> 2681;
2690 -> 2685;
2690 -> 2681;
2691 -> 2681;
2692 -> 2687;
2692 -> 2691;
2693 -> 2688;
2693 -> 2691;
2694 -> 2689;
2694 -> 2691;
2695 -> 2690;
2695 -> 2691;
2696 -> 2686;
2696 -> 2691;
2697 -> 2691;
2698 -> 2693;
2698 -> 2697;
2698 -> 2691;
2699 -> 2691;
2700 -> 2695;
2700 -> 2699;
2700 -> 2691;
2701 -> 2698;
2701 -> 2700;
2701 -> 2691;
2702 -> 2691;
2703 -> 2702;
2703 -> 2701;
2703 -> 2691;
2704 -> 2691;
2705 -> 2704;
2705 -> 2693;
2705 -> 2691;
2706 -> 2705;
2707 -> 2701;
2707 -> 2703;
2707 -> 2706;
2707 -> 2705;
2708 -> 2707;
2708 -> 2704;
2708 -> 2706;
2708 -> 2701;
2708 -> 2705;
2709 -> 2691;
2710 -> 2709;
2710 -> 2695;
2710 -> 2691;
2711 -> 2710;
2712 -> 2701;
2712 -> 2703;
2712 -> 2708;
2712 -> 2711;
2712 -> 2710;
2713 -> 2712;
2713 -> 2711;
2713 -> 2709;
2713 -> 2701;
2713 -> 2710;
2714 -> 2691;
2715 -> 2714;
2715 -> 2693;
2715 -> 2691;
2716 -> 2715;
2717 -> 2716;
2717 -> 2695;
2717 -> 2715;
2718 -> 2717;
2719 -> 2701;
2719 -> 2703;
2719 -> 2708;
2719 -> 2713;
2719 -> 2718;
2719 -> 2717;
2720 -> 2692;
2720 -> 2717;
2721 -> 2694;
2721 -> 2717;
2722 -> 2717;
2723 -> 2720;
2723 -> 2722;
2724 -> 2718;
2724 -> 2722;
2725 -> 2721;
2725 -> 2722;
2726 -> 2718;
2726 -> 2722;
2727 -> 2696;
2727 -> 2722;
2728 -> 2723;
2728 -> 2666;
2728 -> 2724;
2728 -> 2722;
2729 -> 2725;
2729 -> 2667;
2729 -> 2726;
2729 -> 2722;
2730 -> 2727;
2730 -> 0;
2730 -> 2728;
2730 -> 2729;
2730 -> 2666;
2730 -> 2667;
2730 -> 2722;
2731 -> 2719;
2731 -> 2730;
2731 -> 2717;
2732 -> 2717;
2733 -> 2701;
2733 -> 2703;
2733 -> 2708;
2733 -> 2713;
2733 -> 2732;
2733 -> 2716;
2733 -> 2717;
2734 -> 2717;
2735 -> 2701;
2735 -> 2703;
2735 -> 2708;
2735 -> 2713;
2735 -> 2714;
2735 -> 2734;
2735 -> 2717;
2736 -> 2731;
2736 -> 2717;
2737 -> 2733;
2737 -> 2717;
2738 -> 2736;
2738 -> 2737;
2738 -> 2717;
2739 -> 2735;
2739 -> 2717;
2740 -> 2738;
2740 -> 2739;
2740 -> 2717;
2741 -> 2740;
2741 -> 2714;
2741 -> 2716;
2741 -> 2701;
2741 -> 2717;
2742 -> 2701;
2742 -> 2691;
2743 -> 2683;
2743 -> 2681;
2744 -> 2685;
2744 -> 2681;
2745 -> 2681;
2746 -> 2743;
2746 -> 2745;
2746 -> 2681;
2747 -> 2744;
2747 -> 2745;
2747 -> 2681;
2748 -> 2746;
2748 -> 2747;
2748 -> 2681;
2749 -> 2742;
2749 -> 2701;
2749 -> 2703;
2749 -> 2708;
2749 -> 2713;
2749 -> 2741;
2749 -> 2743;
2749 -> 2744;
2749 -> 2748;
2750 -> 2748;
2751 -> 2742;
2751 -> 2701;
2751 -> 2703;
2751 -> 2708;
2751 -> 2713;
2751 -> 2741;
2751 -> 2750;
2751 -> 2744;
2751 -> 2748;
2752 -> 2742;
2752 -> 2701;
2752 -> 2703;
2752 -> 2708;
2752 -> 2713;
2752 -> 2741;
2752 -> 2743;
2752 -> 2744;
2752 -> 2751;
2753 -> 2751;
2754 -> 2743;
2754 -> 2753;
2755 -> 2744;
2755 -> 2753;
2756 -> 2753;
2757 -> 0;
2757 -> 2753;
2758 -> 2754;
2758 -> 2753;
2759 -> 2755;
2759 -> 2753;
2760 -> 2753;
2761 -> 2757;
2761 -> 2760;
2762 -> 2758;
2762 -> 2760;
2763 -> 2759;
2763 -> 2760;
2764 -> 2756;
2764 -> 2760;
2765 -> 2761;
2765 -> 2764;
2765 -> 2760;
2766 -> 2762;
2766 -> 2764;
2766 -> 2760;
2767 -> 2763;
2767 -> 2764;
2767 -> 2760;
2768 -> 2754;
2768 -> 2755;
2768 -> 2681;
2769 -> 0;
2769 -> 2768;
2770 -> 2768;
2771 -> 2768;
2772 -> 2769;
2772 -> 2771;
2773 -> 2770;
2773 -> 2771;
2774 -> 2770;
2774 -> 2771;
2775 -> 2770;
2775 -> 2771;
2776 -> 2772;
2776 -> 2775;
2776 -> 2771;
2777 -> 2773;
2777 -> 2775;
2777 -> 2771;
2778 -> 2774;
2778 -> 2775;
2778 -> 2771;
2779 -> 2681;
2780 -> 2768;
2780 -> 2779;
2780 -> 2681;
2781 -> 2681;
2782 -> 2768;
2782 -> 2781;
2782 -> 2681;
2783 -> 2756;
2783 -> 2770;
2783 -> 2765;
2783 -> 2766;
2783 -> 2767;
2783 -> 2776;
2783 -> 2777;
2783 -> 2778;
2783 -> 2672;
2784 -> 2783;
2785 -> 2784;
2786 -> 2674;
2786 -> 2667;
2786 -> 2730;
2786 -> 2783;
2786 -> 2784;
2787 -> 2675;
2787 -> 2786;
2787 -> 2664;
2787 -> 2784;
2788 -> 2668;
2788 -> 2785;
2788 -> 2641;
2789 -> 2083;
2789 -> 2788;
2789 -> 2630;
2789 -> 2022;
2790 -> 2234;
2790 -> 2625;
2790 -> 2022;
2791 -> 2088;
2791 -> 2225;
2791 -> 2022;
2792 -> 2083;
2792 -> 2789;
2792 -> 2022;
2793 -> 1867;
2794 -> 919;
2795 -> 920;
2795 -> 919;
2796 -> 1864;
2796 -> 919;
2797 -> 919;
2798 -> 2795;
2798 -> 2797;
2799 -> 2796;
2799 -> 2797;
2800 -> 2799;
2800 -> 2797;
2801 -> 2800;
2801 -> 1864;
2801 -> 2521;
2802 -> 2798;
2802 -> 2801;
2802 -> 2521;
2802 -> 2800;
2803 -> 2800;
2803 -> 2802;
2804 -> 2803;
2804 -> 2802;
2805 -> 2803;
2806 -> 919;
2807 -> 920;
2807 -> 919;
}