digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 758946"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 758947"];
3 [label="@'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 758948"];
4 [label="prefix = @'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 758949"];
5 [label="@'\n}' 758950"];
6 [label="suffix = @'\n}' 758951"];
7 [label="param FlowTests(this) 758952"];
8 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 758953"];
9 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 758954"];
10 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 758955"];
11 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 758956"];
12 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 758957"];
13 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 758958"];
14 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 758959"];
15 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 758960"];
16 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 758961"];
17 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 758962"];
18 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 758963"];
19 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 758964"];
20 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 758965"];
21 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 758966"];
22 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 758967"];
23 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 758968"];
24 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 758969"];
25 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 758970"];
26 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 758971"];
27 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 758972"];
28 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 758973"];
29 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 758974"];
30 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 758975"];
31 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 758976"];
32 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 758977"];
33 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 758978"];
34 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 758979"];
35 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 758980"];
36 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 758981"];
37 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 758982"];
38 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 758983"];
39 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 758984"];
40 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 758985"];
41 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 758986"];
42 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 758987"];
43 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 758988"];
44 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 758989"];
45 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 758990"];
46 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 758991"];
47 [label="LazyThreadSafetyMode.PublicationOnly 758992"];
48 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 758993"];
49 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 758994"];
50 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 758995"];
51 [label="LazyThreadSafetyMode.PublicationOnly 758996"];
52 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 758997"];
53 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 758998"];
54 [label="RuntimeUtilities.IsCoreClrRuntime 758999"];
55 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 759000"];
56 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 759001"];
57 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 759002"];
58 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 759003"];
59 [label="LazyThreadSafetyMode.PublicationOnly 759004"];
60 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 759005"];
61 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 759006"];
62 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 759007"];
63 [label="LazyThreadSafetyMode.PublicationOnly 759008"];
64 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 759009"];
65 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 759010"];
66 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 759011"];
67 [label="LazyThreadSafetyMode.PublicationOnly 759012"];
68 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 759013"];
69 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 759014"];
70 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 759015"];
71 [label="LazyThreadSafetyMode.PublicationOnly 759016"];
72 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759017"];
73 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759018"];
74 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 759019"];
75 [label="LazyThreadSafetyMode.PublicationOnly 759020"];
76 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759021"];
77 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759022"];
78 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 759023"];
79 [label="LazyThreadSafetyMode.PublicationOnly 759024"];
80 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759025"];
81 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759026"];
82 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 759027"];
83 [label="LazyThreadSafetyMode.PublicationOnly 759028"];
84 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759029"];
85 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759030"];
86 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 759031"];
87 [label="LazyThreadSafetyMode.PublicationOnly 759032"];
88 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759033"];
89 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759034"];
90 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 759035"];
91 [label="LazyThreadSafetyMode.PublicationOnly 759036"];
92 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759037"];
93 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759038"];
94 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 759039"];
95 [label="LazyThreadSafetyMode.PublicationOnly 759040"];
96 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759041"];
97 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759042"];
98 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 759043"];
99 [label="LazyThreadSafetyMode.PublicationOnly 759044"];
100 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 759045"];
101 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 759046"];
102 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 759047"];
103 [label="LazyThreadSafetyMode.PublicationOnly 759048"];
104 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 759049"];
105 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 759050"];
106 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 759051"];
107 [label="LazyThreadSafetyMode.PublicationOnly 759052"];
108 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759053"];
109 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759054"];
110 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 759055"];
111 [label="LazyThreadSafetyMode.PublicationOnly 759056"];
112 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759057"];
113 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759058"];
114 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 759059"];
115 [label="LazyThreadSafetyMode.PublicationOnly 759060"];
116 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759061"];
117 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759062"];
118 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 759063"];
119 [label="LazyThreadSafetyMode.PublicationOnly 759064"];
120 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759065"];
121 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759066"];
122 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 759067"];
123 [label="LazyThreadSafetyMode.PublicationOnly 759068"];
124 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 759069"];
125 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 759070"];
126 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 759071"];
127 [label="LazyThreadSafetyMode.PublicationOnly 759072"];
128 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759073"];
129 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759074"];
130 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 759075"];
131 [label="LazyThreadSafetyMode.PublicationOnly 759076"];
132 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759077"];
133 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759078"];
134 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 759079"];
135 [label="LazyThreadSafetyMode.PublicationOnly 759080"];
136 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759081"];
137 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759082"];
138 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 759083"];
139 [label="LazyThreadSafetyMode.PublicationOnly 759084"];
140 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759085"];
141 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759086"];
142 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 759087"];
143 [label="LazyThreadSafetyMode.PublicationOnly 759088"];
144 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759089"];
145 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759090"];
146 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 759091"];
147 [label="LazyThreadSafetyMode.PublicationOnly 759092"];
148 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759093"];
149 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759094"];
150 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 759095"];
151 [label="LazyThreadSafetyMode.PublicationOnly 759096"];
152 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759097"];
153 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759098"];
154 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 759099"];
155 [label="LazyThreadSafetyMode.PublicationOnly 759100"];
156 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759101"];
157 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759102"];
158 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 759103"];
159 [label="LazyThreadSafetyMode.PublicationOnly 759104"];
160 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759105"];
161 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759106"];
162 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 759107"];
163 [label="LazyThreadSafetyMode.PublicationOnly 759108"];
164 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759109"];
165 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759110"];
166 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 759111"];
167 [label="LazyThreadSafetyMode.PublicationOnly 759112"];
168 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759113"];
169 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759114"];
170 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 759115"];
171 [label="LazyThreadSafetyMode.PublicationOnly 759116"];
172 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759117"];
173 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759118"];
174 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 759119"];
175 [label="LazyThreadSafetyMode.PublicationOnly 759120"];
176 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759121"];
177 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 759122"];
178 [label="@'R:\\Invalid.dll' 759123"];
179 [label="fullPath: @'R:\\Invalid.dll' 759124"];
180 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 759125"];
181 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 759126"];
182 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 759127"];
183 [label="MscorlibRef_v4_0_30316_17626 759128"];
184 [label="Net451.mscorlib 759129"];
185 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 759130"];
186 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 759131"];
187 [label="'/*<bind>*/' 759132"];
188 [label="StartString = '/*<bind>*/' 759133"];
189 [label="'/*</bind>*/' 759134"];
190 [label="EndString = '/*</bind>*/' 759135"];
191 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 759136"];
192 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 759137"];
193 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 759138"];
194 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 759139"];
195 [label="param CSharpTestBase(this) 759140"];
196 [label="param CommonTestBase(this) 759141"];
197 [label="param TestBase(this) 759142"];
198 [label="_temp 759143"];
199 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 759144"];
200 [label="param UseDef_CondAccess(this) 759145"];
201 [label="var source = @'\nclass C\n{\n    C M1(out C arg)\n    {\n        arg = this;\n        return arg;\n    }\n\n    static void Main()\n    {\n        C o;\n\n        var d = new C();\n        var v = d ?. M1(out o);\n\n        System.Console.WriteLine(o);\n    }\n}\n'; 759146"];
202 [label="CreateCompilationWithMscorlib45(source).VerifyDiagnostics(\n    // (17,34): error CS0165: Use of unassigned local variable 'o'\n    //         System.Console.WriteLine(o);\n    Diagnostic(ErrorCode.ERR_UseDefViolation, 'o').WithArguments('o').WithLocation(17, 34)\n    ); 759147"];
203 [label="source 759148"];
204 [label="param operator(string source) 759149"];
205 [label="source 759150"];
206 [label="new CSharpTestSource(source) 759151"];
207 [label="param CSharpTestSource(object value) 759152"];
208 [label="param CSharpTestSource(this) 759153"];
209 [label="Value 759154"];
210 [label="CreateCompilationWithMscorlib45(source).VerifyDiagnostics(\n    // (17,34): error CS0165: Use of unassigned local variable 'o'\n    //         System.Console.WriteLine(o);\n    Diagnostic(ErrorCode.ERR_UseDefViolation, 'o').WithArguments('o').WithLocation(17, 34)\n    ); 759155"];
211 [label="CreateCompilationWithMscorlib45(source).VerifyDiagnostics(\n    // (17,34): error CS0165: Use of unassigned local variable 'o'\n    //         System.Console.WriteLine(o);\n    Diagnostic(ErrorCode.ERR_UseDefViolation, 'o').WithArguments('o').WithLocation(17, 34)\n    ); 759156"];
212 [label="CreateCompilationWithMscorlib45(source) 759157"];
213 [label="param CreateCompilationWithMscorlib45(CSharpTestSource source) 759158"];
214 [label="param CreateCompilationWithMscorlib45(IEnumerable<MetadataReference> references = null) 759159"];
215 [label="param CreateCompilationWithMscorlib45(CSharpCompilationOptions options = null) 759160"];
216 [label="param CreateCompilationWithMscorlib45(CSharpParseOptions parseOptions = null) 759161"];
217 [label="param CreateCompilationWithMscorlib45(string assemblyName = '') 759162"];
218 [label="param CreateCompilationWithMscorlib45(string sourceFileName = '') 759163"];
219 [label="param CreateCompilationWithMscorlib45(bool skipUsesIsNullable = false) 759164"];
220 [label="source 759165"];
221 [label="references 759166"];
222 [label="options 759167"];
223 [label="parseOptions 759168"];
224 [label="TargetFramework.Mscorlib45 759169"];
225 [label="assemblyName 759170"];
226 [label="sourceFileName 759171"];
227 [label="skipUsesIsNullable 759172"];
228 [label="CreateCompilation(source, references, options, parseOptions, TargetFramework.Mscorlib45, assemblyName, sourceFileName, skipUsesIsNullable) 759173"];
229 [label="param CreateCompilation(CSharpTestSource source) 759174"];
230 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 759175"];
231 [label="param CreateCompilation(CSharpCompilationOptions options = null) 759176"];
232 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 759177"];
233 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 759178"];
234 [label="param CreateCompilation(string assemblyName = '') 759179"];
235 [label="param CreateCompilation(string sourceFileName = '') 759180"];
236 [label="param CreateCompilation(bool skipUsesIsNullable = false) 759181"];
237 [label="source 759182"];
238 [label="targetFramework 759183"];
239 [label="references 759184"];
240 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 759185"];
241 [label="param GetReferences(TargetFramework tf) 759186"];
242 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 759187"];
243 [label="var references = GetReferences(tf); 759188"];
244 [label="GetReferences(tf) 759189"];
245 [label="param GetReferences(TargetFramework targetFramework) 759190"];
246 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 759191"];
247 [label="Mscorlib45References 759192"];
248 [label="Net451.mscorlib 759193"];
249 [label="ImmutableArray.Create<MetadataReference>(Net451.mscorlib) 759194"];
250 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 759195"];
251 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 759196"];
252 [label="return references; 759197"];
253 [label="options 759198"];
254 [label="parseOptions 759199"];
255 [label="assemblyName 759200"];
256 [label="sourceFileName 759201"];
257 [label="skipUsesIsNullable 759202"];
258 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 759203"];
259 [label="param CreateEmptyCompilation(CSharpTestSource source) 759204"];
260 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 759205"];
261 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 759206"];
262 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 759207"];
263 [label="param CreateEmptyCompilation(string assemblyName = '') 759208"];
264 [label="param CreateEmptyCompilation(string sourceFileName = '') 759209"];
265 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 759210"];
266 [label="source 759211"];
267 [label="references 759212"];
268 [label="options 759213"];
269 [label="parseOptions 759214"];
270 [label="assemblyName 759215"];
271 [label="sourceFileName 759216"];
272 [label="skipUsesIsNullable 759217"];
273 [label="null 759218"];
274 [label="experimentalFeature: null 759219"];
275 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 759220"];
276 [label="param CreateCompilationCore(CSharpTestSource source) 759221"];
277 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 759222"];
278 [label="param CreateCompilationCore(CSharpCompilationOptions options) 759223"];
279 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 759224"];
280 [label="param CreateCompilationCore(string assemblyName) 759225"];
281 [label="param CreateCompilationCore(string sourceFileName) 759226"];
282 [label="param CreateCompilationCore(bool skipUsesIsNullable) 759227"];
283 [label="param CreateCompilationCore(MessageID? experimentalFeature) 759228"];
284 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 759229"];
285 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 759230"];
286 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 759231"];
287 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 759232"];
288 [label="param GetSyntaxTrees(string sourceFileName = '') 759233"];
289 [label="param GetSyntaxTrees(this) 759234"];
290 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 759235"];
291 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 759236"];
292 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 759237"];
293 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 759238"];
294 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 759239"];
295 [label="param Parse(string text) 759240"];
296 [label="param Parse(string filename = '') 759241"];
297 [label="param Parse(CSharpParseOptions options = null) 759242"];
298 [label="param Parse(Encoding encoding = null) 759243"];
299 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 759244"];
300 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 759245"];
301 [label="kind: SourceCodeKind.Regular 759246"];
302 [label="documentationMode: DocumentationMode.Parse 759247"];
303 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 759248"];
304 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 759249"];
305 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 759250"];
306 [label="SourceCodeKind.Script 759251"];
307 [label="Regular.WithKind(SourceCodeKind.Script) 759252"];
308 [label="Script = Regular.WithKind(SourceCodeKind.Script) 759253"];
309 [label="LanguageVersion.CSharp6 759254"];
310 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 759255"];
311 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 759256"];
312 [label="LanguageVersion.CSharp7 759257"];
313 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 759258"];
314 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 759259"];
315 [label="LanguageVersion.CSharp7_1 759260"];
316 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 759261"];
317 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 759262"];
318 [label="LanguageVersion.CSharp7_2 759263"];
319 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 759264"];
320 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 759265"];
321 [label="LanguageVersion.CSharp7_3 759266"];
322 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 759267"];
323 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 759268"];
324 [label="LanguageVersion.Default 759269"];
325 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 759270"];
326 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 759271"];
327 [label="LanguageVersion.Preview 759272"];
328 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 759273"];
329 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 759274"];
330 [label="LanguageVersion.CSharp8 759275"];
331 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 759276"];
332 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 759277"];
333 [label="LanguageVersion.CSharp9 759278"];
334 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 759279"];
335 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 759280"];
336 [label="DocumentationMode.Diagnose 759281"];
337 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 759282"];
338 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 759283"];
339 [label="Regular 759284"];
340 [label="'UseLegacyStrongNameProvider' 759285"];
341 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 759286"];
342 [label="param WithFeature(this CSharpParseOptions options) 759287"];
343 [label="param WithFeature(string feature) 759288"];
344 [label="param WithFeature(string value = 'true') 759289"];
345 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 759290"];
346 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 759291"];
347 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 759292"];
348 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 759293"];
349 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 759294"];
350 [label="new[] { new KeyValuePair<string, string>(feature, value) } 759295"];
351 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 759296"];
352 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 759297"];
353 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 759298"];
354 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 759299"];
355 [label="1 759300"];
356 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 759301"];
357 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 759302"];
358 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 759303"];
359 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 759304"];
360 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 759305"];
361 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 759306"];
362 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 759307"];
363 [label="LanguageVersion.CSharp8 759308"];
364 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 759309"];
365 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 759310"];
366 [label="RegularWithExtendedPartialMethods = RegularPreview 759311"];
367 [label="new SmallDictionary<string, string> { } 759312"];
368 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 759313"];
369 [label="kind: SourceCodeKind.Regular 759314"];
370 [label="documentationMode: DocumentationMode.None 759315"];
371 [label="languageVersion: LanguageVersion.Preview 759316"];
372 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 759317"];
373 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 759318"];
374 [label="s_experimentalFeatures 759319"];
375 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 759320"];
376 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 759321"];
377 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 759322"];
378 [label="'testV7SwitchBinder' 759323"];
379 [label="'true' 759324"];
380 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 759325"];
381 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 759326"];
382 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 759327"];
383 [label="RegularWithoutRecursivePatterns = Regular7_3 759328"];
384 [label="RegularWithRecursivePatterns = Regular8 759329"];
385 [label="RegularWithoutPatternCombinators = Regular8 759330"];
386 [label="RegularWithPatternCombinators = RegularPreview 759331"];
387 [label="OutputKind.DynamicallyLinkedLibrary 759332"];
388 [label="OptimizationLevel.Release 759333"];
389 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 759334"];
390 [label="param CreateTestOptions(OutputKind outputKind) 759335"];
391 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 759336"];
392 [label="param CreateTestOptions(bool allowUnsafe = false) 759337"];
393 [label="outputKind 759338"];
394 [label="optimizationLevel: optimizationLevel 759339"];
395 [label="warningLevel: Diagnostic.MaxWarningLevel 759340"];
396 [label="allowUnsafe: allowUnsafe 759341"];
397 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 759342"];
398 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 759343"];
399 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 759344"];
400 [label="OutputKind.ConsoleApplication 759345"];
401 [label="OptimizationLevel.Release 759346"];
402 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 759347"];
403 [label="param CreateTestOptions(OutputKind outputKind) 759348"];
404 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 759349"];
405 [label="param CreateTestOptions(bool allowUnsafe = false) 759350"];
406 [label="outputKind 759351"];
407 [label="optimizationLevel: optimizationLevel 759352"];
408 [label="warningLevel: Diagnostic.MaxWarningLevel 759353"];
409 [label="allowUnsafe: allowUnsafe 759354"];
410 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 759355"];
411 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 759356"];
412 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 759357"];
413 [label="true 759358"];
414 [label="ReleaseDll.WithDebugPlusMode(true) 759359"];
415 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 759360"];
416 [label="true 759361"];
417 [label="ReleaseExe.WithDebugPlusMode(true) 759362"];
418 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 759363"];
419 [label="OutputKind.DynamicallyLinkedLibrary 759364"];
420 [label="OptimizationLevel.Debug 759365"];
421 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 759366"];
422 [label="param CreateTestOptions(OutputKind outputKind) 759367"];
423 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 759368"];
424 [label="param CreateTestOptions(bool allowUnsafe = false) 759369"];
425 [label="outputKind 759370"];
426 [label="optimizationLevel: optimizationLevel 759371"];
427 [label="warningLevel: Diagnostic.MaxWarningLevel 759372"];
428 [label="allowUnsafe: allowUnsafe 759373"];
429 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 759374"];
430 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 759375"];
431 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 759376"];
432 [label="OutputKind.ConsoleApplication 759377"];
433 [label="OptimizationLevel.Debug 759378"];
434 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 759379"];
435 [label="param CreateTestOptions(OutputKind outputKind) 759380"];
436 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 759381"];
437 [label="param CreateTestOptions(bool allowUnsafe = false) 759382"];
438 [label="outputKind 759383"];
439 [label="optimizationLevel: optimizationLevel 759384"];
440 [label="warningLevel: Diagnostic.MaxWarningLevel 759385"];
441 [label="allowUnsafe: allowUnsafe 759386"];
442 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 759387"];
443 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 759388"];
444 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 759389"];
445 [label="OutputKind.WindowsRuntimeMetadata 759390"];
446 [label="OptimizationLevel.Release 759391"];
447 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 759392"];
448 [label="param CreateTestOptions(OutputKind outputKind) 759393"];
449 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 759394"];
450 [label="param CreateTestOptions(bool allowUnsafe = false) 759395"];
451 [label="outputKind 759396"];
452 [label="optimizationLevel: optimizationLevel 759397"];
453 [label="warningLevel: Diagnostic.MaxWarningLevel 759398"];
454 [label="allowUnsafe: allowUnsafe 759399"];
455 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 759400"];
456 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 759401"];
457 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 759402"];
458 [label="OutputKind.WindowsRuntimeMetadata 759403"];
459 [label="OptimizationLevel.Debug 759404"];
460 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 759405"];
461 [label="param CreateTestOptions(OutputKind outputKind) 759406"];
462 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 759407"];
463 [label="param CreateTestOptions(bool allowUnsafe = false) 759408"];
464 [label="outputKind 759409"];
465 [label="optimizationLevel: optimizationLevel 759410"];
466 [label="warningLevel: Diagnostic.MaxWarningLevel 759411"];
467 [label="allowUnsafe: allowUnsafe 759412"];
468 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 759413"];
469 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 759414"];
470 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 759415"];
471 [label="OutputKind.NetModule 759416"];
472 [label="OptimizationLevel.Release 759417"];
473 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 759418"];
474 [label="param CreateTestOptions(OutputKind outputKind) 759419"];
475 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 759420"];
476 [label="param CreateTestOptions(bool allowUnsafe = false) 759421"];
477 [label="outputKind 759422"];
478 [label="optimizationLevel: optimizationLevel 759423"];
479 [label="warningLevel: Diagnostic.MaxWarningLevel 759424"];
480 [label="allowUnsafe: allowUnsafe 759425"];
481 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 759426"];
482 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 759427"];
483 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 759428"];
484 [label="OutputKind.NetModule 759429"];
485 [label="OptimizationLevel.Debug 759430"];
486 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 759431"];
487 [label="param CreateTestOptions(OutputKind outputKind) 759432"];
488 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 759433"];
489 [label="param CreateTestOptions(bool allowUnsafe = false) 759434"];
490 [label="outputKind 759435"];
491 [label="optimizationLevel: optimizationLevel 759436"];
492 [label="warningLevel: Diagnostic.MaxWarningLevel 759437"];
493 [label="allowUnsafe: allowUnsafe 759438"];
494 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 759439"];
495 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 759440"];
496 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 759441"];
497 [label="true 759442"];
498 [label="ReleaseDll.WithAllowUnsafe(true) 759443"];
499 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 759444"];
500 [label="true 759445"];
501 [label="ReleaseExe.WithAllowUnsafe(true) 759446"];
502 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 759447"];
503 [label="true 759448"];
504 [label="DebugDll.WithAllowUnsafe(true) 759449"];
505 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 759450"];
506 [label="true 759451"];
507 [label="DebugExe.WithAllowUnsafe(true) 759452"];
508 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 759453"];
509 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 759454"];
510 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 759455"];
511 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 759456"];
512 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 759457"];
513 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 759458"];
514 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 759459"];
515 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 759460"];
516 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 759461"];
517 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 759462"];
518 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 759463"];
519 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 759464"];
520 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 759465"];
521 [label="DebugInformationFormat.Pdb 759466"];
522 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 759467"];
523 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 759468"];
524 [label="options = TestOptions.Regular; 759469"];
525 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 759470"];
526 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 759471"];
527 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 759472"];
528 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 759473"];
529 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 759474"];
530 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 759475"];
531 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 759476"];
532 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 759477"];
533 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 759478"];
534 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 759479"];
535 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 759480"];
536 [label="param CheckSerializable(SyntaxTree tree) 759481"];
537 [label="var stream = new MemoryStream(); 759482"];
538 [label="var root = tree.GetRoot(); 759483"];
539 [label="var root = tree.GetRoot(); 759484"];
540 [label="root.SerializeTo(stream); 759485"];
541 [label="root.SerializeTo(stream); 759486"];
542 [label="root.SerializeTo(stream); 759487"];
543 [label="stream.Position = 0; 759488"];
544 [label="stream.Position 759489"];
545 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 759490"];
546 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 759491"];
547 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 759492"];
548 [label="return tree; 759493"];
549 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 759494"];
550 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 759495"];
551 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 759496"];
552 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 759497"];
553 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 759498"];
554 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 759499"];
555 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 759500"];
556 [label="hasTopLevelStatements 759501"];
557 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 759502"];
558 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 759503"];
559 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 759504"];
560 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 759505"];
561 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 759506"];
562 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 759507"];
563 [label="param ValidateIOperations(Func<Compilation> createCompilation) 759508"];
564 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 759509"];
565 [label="return; 759510"];
566 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 759511"];
567 [label="var compilation = createCompilationLambda(); 759512"];
568 [label="var compilation = createCompilationLambda(); 759513"];
569 [label="return Guid.NewGuid().ToString('D'); 759514"];
570 [label="var compilation = createCompilationLambda(); 759515"];
571 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 759516"];
572 [label="IsNullableEnabled(compilation) 759517"];
573 [label="param IsNullableEnabled(CSharpCompilation compilation) 759518"];
574 [label="var trees = compilation.SyntaxTrees; 759519"];
575 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 759520"];
576 [label="var options = (CSharpParseOptions)trees[0].Options; 759521"];
577 [label="var options = (CSharpParseOptions)trees[0].Options; 759522"];
578 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 759523"];
579 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 759524"];
580 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 759525"];
581 [label="return compilation; 759526"];
582 [label="CreateCompilationWithMscorlib45(source).VerifyDiagnostics(\n    // (17,34): error CS0165: Use of unassigned local variable 'o'\n    //         System.Console.WriteLine(o);\n    Diagnostic(ErrorCode.ERR_UseDefViolation, 'o').WithArguments('o').WithLocation(17, 34)\n    ); 759527"];
583 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'o') 759528"];
584 [label="param Diagnostic(object code) 759529"];
585 [label="param Diagnostic(string squiggledText = null) 759530"];
586 [label="param Diagnostic(object[] arguments = null) 759531"];
587 [label="param Diagnostic(LinePosition? startLocation = null) 759532"];
588 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 759533"];
589 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 759534"];
590 [label="param Diagnostic(bool isSuppressed = false) 759535"];
591 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 759536"];
592 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 759537"];
593 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 759538"];
594 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 759539"];
595 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 759540"];
596 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 759541"];
597 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 759542"];
598 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 759543"];
599 [label="param Diagnostic(object code) 759544"];
600 [label="param Diagnostic(string squiggledText = null) 759545"];
601 [label="param Diagnostic(object[] arguments = null) 759546"];
602 [label="param Diagnostic(LinePosition? startLocation = null) 759547"];
603 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 759548"];
604 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 759549"];
605 [label="param Diagnostic(bool isSuppressed = false) 759550"];
606 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 759551"];
607 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 759552"];
608 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 759553"];
609 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 759554"];
610 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 759555"];
611 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 759556"];
612 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 759557"];
613 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 759558"];
614 [label="{ } 759559"];
615 [label="None = { } 759560"];
616 [label="null 759561"];
617 [label="Any = null 759562"];
618 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 759563"];
619 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 759564"];
620 [label="param DiagnosticDescription(object code) 759565"];
621 [label="param DiagnosticDescription(bool isWarningAsError) 759566"];
622 [label="param DiagnosticDescription(string squiggledText) 759567"];
623 [label="param DiagnosticDescription(object[] arguments) 759568"];
624 [label="param DiagnosticDescription(LinePosition? startLocation) 759569"];
625 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 759570"];
626 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 759571"];
627 [label="param DiagnosticDescription(Type errorCodeType = null) 759572"];
628 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 759573"];
629 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 759574"];
630 [label="param DiagnosticDescription(bool isSuppressed = false) 759575"];
631 [label="param DiagnosticDescription(this) 759576"];
632 [label="_code 759577"];
633 [label="_isWarningAsError 759578"];
634 [label="_isSuppressed 759579"];
635 [label="_squiggledText 759580"];
636 [label="_arguments 759581"];
637 [label="_startPosition 759582"];
638 [label="_argumentOrderDoesNotMatter 759583"];
639 [label="_errorCodeType 759584"];
640 [label="_ignoreArgumentsWhenComparing 759585"];
641 [label="_defaultSeverityOpt 759586"];
642 [label="_effectiveSeverityOpt 759587"];
643 [label="_syntaxPredicate 759588"];
644 [label="_showPredicate 759589"];
645 [label="_location 759590"];
646 [label="_argumentsAsStrings 759591"];
647 [label="_code 759592"];
648 [label="_isWarningAsError 759593"];
649 [label="_squiggledText 759594"];
650 [label="_arguments 759595"];
651 [label="_startPosition 759596"];
652 [label="_syntaxPredicate 759597"];
653 [label="_argumentOrderDoesNotMatter 759598"];
654 [label="_errorCodeType = errorCodeType ?? code.GetType(); 759599"];
655 [label="_errorCodeType 759600"];
656 [label="_defaultSeverityOpt 759601"];
657 [label="_effectiveSeverityOpt 759602"];
658 [label="_isSuppressed 759603"];
659 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 759604"];
660 [label="CreateCompilationWithMscorlib45(source).VerifyDiagnostics(\n    // (17,34): error CS0165: Use of unassigned local variable 'o'\n    //         System.Console.WriteLine(o);\n    Diagnostic(ErrorCode.ERR_UseDefViolation, 'o').WithArguments('o').WithLocation(17, 34)\n    ); 759605"];
661 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'o').WithArguments('o') 759606"];
662 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'o').WithArguments('o') 759607"];
663 [label="param WithArguments(params object[] arguments) 759608"];
664 [label="param WithArguments(this) 759609"];
665 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759610"];
666 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759611"];
667 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759612"];
668 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759613"];
669 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759614"];
670 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759615"];
671 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759616"];
672 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759617"];
673 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759618"];
674 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759619"];
675 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759620"];
676 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 759621"];
677 [label="param DiagnosticDescription(object code) 759622"];
678 [label="param DiagnosticDescription(bool isWarningAsError) 759623"];
679 [label="param DiagnosticDescription(string squiggledText) 759624"];
680 [label="param DiagnosticDescription(object[] arguments) 759625"];
681 [label="param DiagnosticDescription(LinePosition? startLocation) 759626"];
682 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 759627"];
683 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 759628"];
684 [label="param DiagnosticDescription(Type errorCodeType = null) 759629"];
685 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 759630"];
686 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 759631"];
687 [label="param DiagnosticDescription(bool isSuppressed = false) 759632"];
688 [label="param DiagnosticDescription(this) 759633"];
689 [label="_code 759634"];
690 [label="_isWarningAsError 759635"];
691 [label="_isSuppressed 759636"];
692 [label="_squiggledText 759637"];
693 [label="_arguments 759638"];
694 [label="_startPosition 759639"];
695 [label="_argumentOrderDoesNotMatter 759640"];
696 [label="_errorCodeType 759641"];
697 [label="_ignoreArgumentsWhenComparing 759642"];
698 [label="_defaultSeverityOpt 759643"];
699 [label="_effectiveSeverityOpt 759644"];
700 [label="_syntaxPredicate 759645"];
701 [label="_showPredicate 759646"];
702 [label="_location 759647"];
703 [label="_argumentsAsStrings 759648"];
704 [label="_arguments 759649"];
705 [label="_argumentOrderDoesNotMatter 759650"];
706 [label="CreateCompilationWithMscorlib45(source).VerifyDiagnostics(\n    // (17,34): error CS0165: Use of unassigned local variable 'o'\n    //         System.Console.WriteLine(o);\n    Diagnostic(ErrorCode.ERR_UseDefViolation, 'o').WithArguments('o').WithLocation(17, 34)\n    ); 759651"];
707 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'o').WithArguments('o').WithLocation(17, 34) 759652"];
708 [label="param WithLocation(int line) 759653"];
709 [label="param WithLocation(int column) 759654"];
710 [label="param WithLocation(this) 759655"];
711 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759656"];
712 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759657"];
713 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759658"];
714 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759659"];
715 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759660"];
716 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759661"];
717 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759662"];
718 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759663"];
719 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759664"];
720 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759665"];
721 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759666"];
722 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759667"];
723 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759668"];
724 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 759669"];
725 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 759670"];
726 [label="param DiagnosticDescription(object code) 759671"];
727 [label="param DiagnosticDescription(bool isWarningAsError) 759672"];
728 [label="param DiagnosticDescription(string squiggledText) 759673"];
729 [label="param DiagnosticDescription(object[] arguments) 759674"];
730 [label="param DiagnosticDescription(LinePosition? startLocation) 759675"];
731 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 759676"];
732 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 759677"];
733 [label="param DiagnosticDescription(Type errorCodeType = null) 759678"];
734 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 759679"];
735 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 759680"];
736 [label="param DiagnosticDescription(bool isSuppressed = false) 759681"];
737 [label="param DiagnosticDescription(this) 759682"];
738 [label="_code 759683"];
739 [label="_isWarningAsError 759684"];
740 [label="_isSuppressed 759685"];
741 [label="_squiggledText 759686"];
742 [label="_arguments 759687"];
743 [label="_startPosition 759688"];
744 [label="_argumentOrderDoesNotMatter 759689"];
745 [label="_errorCodeType 759690"];
746 [label="_ignoreArgumentsWhenComparing 759691"];
747 [label="_defaultSeverityOpt 759692"];
748 [label="_effectiveSeverityOpt 759693"];
749 [label="_syntaxPredicate 759694"];
750 [label="_showPredicate 759695"];
751 [label="_location 759696"];
752 [label="_argumentsAsStrings 759697"];
753 [label="_startPosition 759698"];
754 [label="CreateCompilationWithMscorlib45(source).VerifyDiagnostics(\n    // (17,34): error CS0165: Use of unassigned local variable 'o'\n    //         System.Console.WriteLine(o);\n    Diagnostic(ErrorCode.ERR_UseDefViolation, 'o').WithArguments('o').WithLocation(17, 34)\n    ); 759699"];
755 [label="CreateCompilationWithMscorlib45(source).VerifyDiagnostics(\n    // (17,34): error CS0165: Use of unassigned local variable 'o'\n    //         System.Console.WriteLine(o);\n    Diagnostic(ErrorCode.ERR_UseDefViolation, 'o').WithArguments('o').WithLocation(17, 34)\n    ) 759700"];
756 [label="CreateCompilationWithMscorlib45(source).VerifyDiagnostics(\n    // (17,34): error CS0165: Use of unassigned local variable 'o'\n    //         System.Console.WriteLine(o);\n    Diagnostic(ErrorCode.ERR_UseDefViolation, 'o').WithArguments('o').WithLocation(17, 34)\n    ) 759701"];
757 [label="param VerifyDiagnostics(this TCompilation c) 759702"];
758 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 759703"];
759 [label="var diagnostics = c.GetDiagnostics(); 759704"];
760 [label="var diagnostics = c.GetDiagnostics(); 759705"];
761 [label="diagnostics.Verify(expected); 759706"];
762 [label="diagnostics.Verify(expected); 759707"];
763 [label="diagnostics.Verify(expected) 759708"];
764 [label="param Verify(this ImmutableArray<Diagnostic> actual) 759709"];
765 [label="param Verify(params DiagnosticDescription[] expected) 759710"];
766 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 759711"];
767 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 759712"];
768 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 759713"];
769 [label="param Verify(this IEnumerable<Diagnostic> actual) 759714"];
770 [label="param Verify(params DiagnosticDescription[] expected) 759715"];
771 [label="Verify(actual, expected, errorCodeOnly: false); 759716"];
772 [label="Verify(actual, expected, errorCodeOnly: false); 759717"];
773 [label="Verify(actual, expected, errorCodeOnly: false); 759718"];
774 [label="Verify(actual, expected, errorCodeOnly: false) 759719"];
775 [label="param Verify(IEnumerable<Diagnostic> actual) 759720"];
776 [label="param Verify(DiagnosticDescription[] expected) 759721"];
777 [label="param Verify(bool errorCodeOnly) 759722"];
778 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 759723"];
779 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 759724"];
780 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 759725"];
781 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 759726"];
782 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 759727"];
783 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 759728"];
784 [label="=> _defaultSeverityOpt 759729"];
785 [label="_defaultSeverityOpt 759730"];
786 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 759731"];
787 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 759732"];
788 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 759733"];
789 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 759734"];
790 [label="=> _effectiveSeverityOpt 759735"];
791 [label="_effectiveSeverityOpt 759736"];
792 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 759737"];
793 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 759738"];
794 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 759739"];
795 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 759740"];
796 [label="param DiagnosticDescription(Diagnostic d) 759741"];
797 [label="param DiagnosticDescription(bool errorCodeOnly) 759742"];
798 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 759743"];
799 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 759744"];
800 [label="param DiagnosticDescription(this) 759745"];
801 [label="_code 759746"];
802 [label="_isWarningAsError 759747"];
803 [label="_isSuppressed 759748"];
804 [label="_squiggledText 759749"];
805 [label="_arguments 759750"];
806 [label="_startPosition 759751"];
807 [label="_argumentOrderDoesNotMatter 759752"];
808 [label="_errorCodeType 759753"];
809 [label="_defaultSeverityOpt 759754"];
810 [label="_effectiveSeverityOpt 759755"];
811 [label="_syntaxPredicate 759756"];
812 [label="_code 759757"];
813 [label="_isWarningAsError 759758"];
814 [label="_isSuppressed 759759"];
815 [label="_location 759760"];
816 [label="includeDefaultSeverity 759761"];
817 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 759762"];
818 [label="_defaultSeverityOpt 759763"];
819 [label="includeEffectiveSeverity 759764"];
820 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 759765"];
821 [label="_effectiveSeverityOpt 759766"];
822 [label="DiagnosticWithInfo dinfo = null; 759767"];
823 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 759768"];
824 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 759769"];
825 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 759770"];
826 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 759771"];
827 [label="dinfo = d as DiagnosticWithInfo; 759772"];
828 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 759773"];
829 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 759774"];
830 [label="_errorCodeType 759775"];
831 [label="_code 759776"];
832 [label="_ignoreArgumentsWhenComparing 759777"];
833 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 759778"];
834 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 759779"];
835 [label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 759780"];
836 [label="_squiggledText 759781"];
837 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 759782"];
838 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 759783"];
839 [label="_arguments 759784"];
840 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 759785"];
841 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 759786"];
842 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 759787"];
843 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 759788"];
844 [label="_startPosition 759789"];
845 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 759790"];
846 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 759791"];
847 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 759792"];
848 [label="int index = unmatched.IndexOf(d); 759793"];
849 [label="int index = unmatched.IndexOf(d); 759794"];
850 [label="param Equals(object obj) 759795"];
851 [label="param Equals(this) 759796"];
852 [label="var d = obj as DiagnosticDescription; 759797"];
853 [label="if (d == null)\n                return false; 759798"];
854 [label="if (d == null)\n                return false; 759799"];
855 [label="if (!_code.Equals(d._code))\n                return false; 759800"];
856 [label="if (!_code.Equals(d._code))\n                return false; 759801"];
857 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 759802"];
858 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 759803"];
859 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 759804"];
860 [label="if (_squiggledText != d._squiggledText)\n                    return false; 759805"];
861 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 759806"];
862 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 759807"];
863 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 759808"];
864 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 759809"];
865 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 759810"];
866 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 759811"];
867 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 759812"];
868 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 759813"];
869 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 759814"];
870 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 759815"];
871 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 759816"];
872 [label="if (d._arguments == null)\n                    return false; 759817"];
873 [label="GetArgumentsAsStrings() 759818"];
874 [label="param GetArgumentsAsStrings(this) 759819"];
875 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 759820"];
876 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 759821"];
877 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 759822"];
878 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 759823"];
879 [label="_argumentsAsStrings 759824"];
880 [label="return _argumentsAsStrings; 759825"];
881 [label="var args1 = GetArgumentsAsStrings(); 759826"];
882 [label="d.GetArgumentsAsStrings() 759827"];
883 [label="param GetArgumentsAsStrings(this) 759828"];
884 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 759829"];
885 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 759830"];
886 [label="return _argumentsAsStrings; 759831"];
887 [label="var args2 = d.GetArgumentsAsStrings(); 759832"];
888 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 759833"];
889 [label="if (!args1.SequenceEqual(args2))\n                        return false; 759834"];
890 [label="if (!args1.SequenceEqual(args2))\n                        return false; 759835"];
891 [label="if (!args1.SequenceEqual(args2))\n                        return false; 759836"];
892 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 759837"];
893 [label="return true; 759838"];
894 [label="int index = unmatched.IndexOf(d); 759839"];
895 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 759840"];
896 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 759841"];
897 [label="unmatched.RemoveAt(index); 759842"];
898 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 759843"];
899 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 759844"];
900 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 759845"];
901 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 759846"];
902 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 759847"];
903 [label="DiagnosticDescription.GetAssertText(expected, actual) 759848"];
904 [label="param GetAssertText(DiagnosticDescription[] expected) 759849"];
905 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 759850"];
906 [label="const int CSharp = 1; 759851"];
907 [label="const int VisualBasic = 2; 759852"];
908 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 759853"];
909 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 759854"];
910 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 759855"];
911 [label="actual.Any() && actual.First() is CSDiagnostic 759856"];
912 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 759857"];
913 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 759858"];
914 [label="int indentDepth = (language == CSharp) ? 4 : 1; 759859"];
915 [label="(language == CSharp) 759860"];
916 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 759861"];
917 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 759862"];
918 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 759863"];
919 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 759864"];
920 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 759865"];
921 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 759866"];
922 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 759867"];
923 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 759868"];
924 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 759869"];
925 [label="IsSortedOrEmpty(expected) 759870"];
926 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 759871"];
927 [label="new LinePositionComparer() 759872"];
928 [label="param LinePositionComparer(this) 759873"];
929 [label="Instance = new LinePositionComparer() 759874"];
930 [label="var comparer = LinePositionComparer.Instance; 759875"];
931 [label="DiagnosticDescription last = null; 759876"];
932 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 759877"];
933 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 759878"];
934 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 759879"];
935 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 759880"];
936 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 759881"];
937 [label="last = diagnostic; 759882"];
938 [label="return true; 759883"];
939 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 759884"];
940 [label="actual = Sort(actual); 759885"];
941 [label="Sort(actual) 759886"];
942 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 759887"];
943 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 759888"];
944 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 759889"];
945 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 759890"];
946 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 759891"];
947 [label="var assertText = new StringBuilder(); 759892"];
948 [label="assertText.AppendLine(); 759893"];
949 [label="int i; 759894"];
950 [label="assertText.AppendLine('Expected:'); 759895"];
951 [label="assertText.AppendLine('Expected:'); 759896"];
952 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 759897"];
953 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 759898"];
954 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 759899"];
955 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 759900"];
956 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 759901"];
957 [label="GetDiagnosticDescription(d, indentDepth) 759902"];
958 [label="param GetDiagnosticDescription(DiagnosticDescription d) 759903"];
959 [label="param GetDiagnosticDescription(int indentDepth) 759904"];
960 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 759905"];
961 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 759906"];
962 [label="d.ToString() 759907"];
963 [label="param ToString(this) 759908"];
964 [label="var sb = new StringBuilder(); 759909"];
965 [label="sb.Append('Diagnostic('); 759910"];
966 [label="sb.Append('Diagnostic('); 759911"];
967 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 759912"];
968 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 759913"];
969 [label="sb.Append(_errorCodeType.Name); 759914"];
970 [label="sb.Append(_errorCodeType.Name); 759915"];
971 [label="sb.Append('.'); 759916"];
972 [label="sb.Append('.'); 759917"];
973 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 759918"];
974 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 759919"];
975 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 759920"];
976 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 759921"];
977 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 759922"];
978 [label="sb.Append(', \\''); 759923"];
979 [label="sb.Append(', \\''); 759924"];
980 [label="sb.Append(_squiggledText); 759925"];
981 [label="sb.Append(_squiggledText); 759926"];
982 [label="sb.Append('''); 759927"];
983 [label="sb.Append('''); 759928"];
984 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 759929"];
985 [label="sb.Append(')'); 759930"];
986 [label="sb.Append(')'); 759931"];
987 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 759932"];
988 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 759933"];
989 [label="sb.Append('.WithArguments('); 759934"];
990 [label="sb.Append('.WithArguments('); 759935"];
991 [label="GetArgumentsAsStrings() 759936"];
992 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 759937"];
993 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 759938"];
994 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 759939"];
995 [label="sb.Append('\\''); 759940"];
996 [label="sb.Append('\\''); 759941"];
997 [label="sb.Append(argumentStrings.Current); 759942"];
998 [label="sb.Append(argumentStrings.Current); 759943"];
999 [label="sb.Append('\\''); 759944"];
1000 [label="sb.Append('\\''); 759945"];
1001 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 759946"];
1002 [label="sb.Append(')'); 759947"];
1003 [label="sb.Append(')'); 759948"];
1004 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 759949"];
1005 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 759950"];
1006 [label="sb.Append('.WithLocation('); 759951"];
1007 [label="sb.Append('.WithLocation('); 759952"];
1008 [label="sb.Append(_startPosition.Value.Line + 1); 759953"];
1009 [label="sb.Append(_startPosition.Value.Line + 1); 759954"];
1010 [label="sb.Append(', '); 759955"];
1011 [label="sb.Append(', '); 759956"];
1012 [label="sb.Append(_startPosition.Value.Character + 1); 759957"];
1013 [label="sb.Append(_startPosition.Value.Character + 1); 759958"];
1014 [label="sb.Append(')'); 759959"];
1015 [label="sb.Append(')'); 759960"];
1016 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 759961"];
1017 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 759962"];
1018 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 759963"];
1019 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 759964"];
1020 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 759965"];
1021 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 759966"];
1022 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 759967"];
1023 [label="return sb.ToString(); 759968"];
1024 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 759969"];
1025 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 759970"];
1026 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 759971"];
1027 [label="GetCommaSeparatedLines(assertText, expectedText); 759972"];
1028 [label="GetCommaSeparatedLines(assertText, expectedText); 759973"];
1029 [label="GetCommaSeparatedLines(assertText, expectedText) 759974"];
1030 [label="param GetCommaSeparatedLines(StringBuilder sb) 759975"];
1031 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 759976"];
1032 [label="int n = lines.Count; 759977"];
1033 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 759978"];
1034 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 759979"];
1035 [label="sb.Append(lines[i]); 759980"];
1036 [label="sb.Append(lines[i]); 759981"];
1037 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 759982"];
1038 [label="sb.AppendLine(); 759983"];
1039 [label="GetCommaSeparatedLines(assertText, expectedText); 759984"];
1040 [label="assertText.AppendLine('Actual:'); 759985"];
1041 [label="assertText.AppendLine('Actual:'); 759986"];
1042 [label="var actualText = ArrayBuilder<string>.GetInstance(); 759987"];
1043 [label="var e = actual.GetEnumerator(); 759988"];
1044 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 759989"];
1045 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 759990"];
1046 [label="param Compare(LinePosition? x) 759991"];
1047 [label="param Compare(LinePosition? y) 759992"];
1048 [label="param Compare(this) 759993"];
1049 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 759994"];
1050 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 759995"];
1051 [label="if (y == null)\n                {\n                    return 1;\n                } 759996"];
1052 [label="if (y == null)\n                {\n                    return 1;\n                } 759997"];
1053 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 759998"];
1054 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 759999"];
1055 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 760000"];
1056 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 760001"];
1057 [label="return x.Value.Character.CompareTo(y.Value.Character); 760002"];
1058 [label="return x.Value.Character.CompareTo(y.Value.Character); 760003"];
1059 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 760004"];
1060 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 760005"];
1061 [label="Diagnostic d = e.Current; 760006"];
1062 [label="string message = d.ToString(); 760007"];
1063 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 760008"];
1064 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 760009"];
1065 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 760010"];
1066 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 760011"];
1067 [label="Indent(assertText, indentDepth); 760012"];
1068 [label="Indent(assertText, indentDepth); 760013"];
1069 [label="Indent(assertText, indentDepth) 760014"];
1070 [label="param Indent(StringBuilder sb) 760015"];
1071 [label="param Indent(int count) 760016"];
1072 [label="sb.Append(' ', 4 * count); 760017"];
1073 [label="sb.Append(' ', 4 * count); 760018"];
1074 [label="sb.Append(' ', 4 * count); 760019"];
1075 [label="Indent(assertText, indentDepth); 760020"];
1076 [label="assertText.Append('// '); 760021"];
1077 [label="assertText.Append('// '); 760022"];
1078 [label="assertText.AppendLine(d.ToString()); 760023"];
1079 [label="assertText.AppendLine(d.ToString()); 760024"];
1080 [label="var l = d.Location; 760025"];
1081 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 760026"];
1082 [label="Indent(assertText, indentDepth); 760027"];
1083 [label="Indent(assertText, indentDepth); 760028"];
1084 [label="Indent(assertText, indentDepth) 760029"];
1085 [label="param Indent(StringBuilder sb) 760030"];
1086 [label="param Indent(int count) 760031"];
1087 [label="sb.Append(' ', 4 * count); 760032"];
1088 [label="sb.Append(' ', 4 * count); 760033"];
1089 [label="sb.Append(' ', 4 * count); 760034"];
1090 [label="Indent(assertText, indentDepth); 760035"];
1091 [label="assertText.Append('// '); 760036"];
1092 [label="assertText.Append('// '); 760037"];
1093 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 760038"];
1094 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 760039"];
1095 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 760040"];
1096 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 760041"];
1097 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 760042"];
1098 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 760043"];
1099 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 760044"];
1100 [label="param DiagnosticDescription(Diagnostic d) 760045"];
1101 [label="param DiagnosticDescription(bool errorCodeOnly) 760046"];
1102 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 760047"];
1103 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 760048"];
1104 [label="param DiagnosticDescription(this) 760049"];
1105 [label="_code 760050"];
1106 [label="_isWarningAsError 760051"];
1107 [label="_isSuppressed 760052"];
1108 [label="_squiggledText 760053"];
1109 [label="_arguments 760054"];
1110 [label="_startPosition 760055"];
1111 [label="_errorCodeType 760056"];
1112 [label="_defaultSeverityOpt 760057"];
1113 [label="_effectiveSeverityOpt 760058"];
1114 [label="_code 760059"];
1115 [label="_isWarningAsError 760060"];
1116 [label="_isSuppressed 760061"];
1117 [label="_location 760062"];
1118 [label="DiagnosticWithInfo dinfo = null; 760063"];
1119 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 760064"];
1120 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 760065"];
1121 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 760066"];
1122 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 760067"];
1123 [label="var diffDescription = description; 760068"];
1124 [label="var idx = Array.IndexOf(expected, description); 760069"];
1125 [label="var idx = Array.IndexOf(expected, description); 760070"];
1126 [label="var idx = Array.IndexOf(expected, description); 760071"];
1127 [label="var idx = Array.IndexOf(expected, description); 760072"];
1128 [label="if (d == null)\n                return false; 760073"];
1129 [label="if (d == null)\n                return false; 760074"];
1130 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 760075"];
1131 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 760076"];
1132 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 760077"];
1133 [label="if (_squiggledText != d._squiggledText)\n                    return false; 760078"];
1134 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 760079"];
1135 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 760080"];
1136 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 760081"];
1137 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 760082"];
1138 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 760083"];
1139 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 760084"];
1140 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 760085"];
1141 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 760086"];
1142 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 760087"];
1143 [label="if (d._arguments == null)\n                    return false; 760088"];
1144 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 760089"];
1145 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 760090"];
1146 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 760091"];
1147 [label="diffDescription = expected[idx]; 760092"];
1148 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 760093"];
1149 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 760094"];
1150 [label="GetDiagnosticDescription(description, indentDepth) 760095"];
1151 [label="param GetDiagnosticDescription(DiagnosticDescription d) 760096"];
1152 [label="param GetDiagnosticDescription(int indentDepth) 760097"];
1153 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 760098"];
1154 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 760099"];
1155 [label="var sb = new StringBuilder(); 760100"];
1156 [label="sb.Append('Diagnostic('); 760101"];
1157 [label="sb.Append('Diagnostic('); 760102"];
1158 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 760103"];
1159 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 760104"];
1160 [label="sb.Append(_errorCodeType.Name); 760105"];
1161 [label="sb.Append(_errorCodeType.Name); 760106"];
1162 [label="sb.Append('.'); 760107"];
1163 [label="sb.Append('.'); 760108"];
1164 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 760109"];
1165 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 760110"];
1166 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 760111"];
1167 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 760112"];
1168 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 760113"];
1169 [label="sb.Append(', \\''); 760114"];
1170 [label="sb.Append(', \\''); 760115"];
1171 [label="sb.Append(_squiggledText); 760116"];
1172 [label="sb.Append(_squiggledText); 760117"];
1173 [label="sb.Append('''); 760118"];
1174 [label="sb.Append('''); 760119"];
1175 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 760120"];
1176 [label="sb.Append(')'); 760121"];
1177 [label="sb.Append(')'); 760122"];
1178 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 760123"];
1179 [label="sb.Append('.WithArguments('); 760124"];
1180 [label="sb.Append('.WithArguments('); 760125"];
1181 [label="sb.Append('\\''); 760126"];
1182 [label="sb.Append('\\''); 760127"];
1183 [label="sb.Append(argumentStrings.Current); 760128"];
1184 [label="sb.Append(argumentStrings.Current); 760129"];
1185 [label="sb.Append('\\''); 760130"];
1186 [label="sb.Append('\\''); 760131"];
1187 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 760132"];
1188 [label="sb.Append(')'); 760133"];
1189 [label="sb.Append(')'); 760134"];
1190 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 760135"];
1191 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 760136"];
1192 [label="sb.Append('.WithLocation('); 760137"];
1193 [label="sb.Append('.WithLocation('); 760138"];
1194 [label="sb.Append(_startPosition.Value.Line + 1); 760139"];
1195 [label="sb.Append(_startPosition.Value.Line + 1); 760140"];
1196 [label="sb.Append(', '); 760141"];
1197 [label="sb.Append(', '); 760142"];
1198 [label="sb.Append(_startPosition.Value.Character + 1); 760143"];
1199 [label="sb.Append(_startPosition.Value.Character + 1); 760144"];
1200 [label="sb.Append(')'); 760145"];
1201 [label="sb.Append(')'); 760146"];
1202 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 760147"];
1203 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 760148"];
1204 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 760149"];
1205 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 760150"];
1206 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 760151"];
1207 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 760152"];
1208 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 760153"];
1209 [label="return sb.ToString(); 760154"];
1210 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 760155"];
1211 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 760156"];
1212 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 760157"];
1213 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 760158"];
1214 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 760159"];
1215 [label="GetDiagnosticDescription(diffDescription, indentDepth) 760160"];
1216 [label="param GetDiagnosticDescription(DiagnosticDescription d) 760161"];
1217 [label="param GetDiagnosticDescription(int indentDepth) 760162"];
1218 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 760163"];
1219 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 760164"];
1220 [label="var sb = new StringBuilder(); 760165"];
1221 [label="sb.Append('Diagnostic('); 760166"];
1222 [label="sb.Append('Diagnostic('); 760167"];
1223 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 760168"];
1224 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 760169"];
1225 [label="sb.Append(_errorCodeType.Name); 760170"];
1226 [label="sb.Append(_errorCodeType.Name); 760171"];
1227 [label="sb.Append('.'); 760172"];
1228 [label="sb.Append('.'); 760173"];
1229 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 760174"];
1230 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 760175"];
1231 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 760176"];
1232 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 760177"];
1233 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 760178"];
1234 [label="sb.Append(', \\''); 760179"];
1235 [label="sb.Append(', \\''); 760180"];
1236 [label="sb.Append(_squiggledText); 760181"];
1237 [label="sb.Append(_squiggledText); 760182"];
1238 [label="sb.Append('''); 760183"];
1239 [label="sb.Append('''); 760184"];
1240 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 760185"];
1241 [label="sb.Append(')'); 760186"];
1242 [label="sb.Append(')'); 760187"];
1243 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 760188"];
1244 [label="sb.Append('.WithArguments('); 760189"];
1245 [label="sb.Append('.WithArguments('); 760190"];
1246 [label="sb.Append('\\''); 760191"];
1247 [label="sb.Append('\\''); 760192"];
1248 [label="sb.Append(argumentStrings.Current); 760193"];
1249 [label="sb.Append(argumentStrings.Current); 760194"];
1250 [label="sb.Append('\\''); 760195"];
1251 [label="sb.Append('\\''); 760196"];
1252 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 760197"];
1253 [label="sb.Append(')'); 760198"];
1254 [label="sb.Append(')'); 760199"];
1255 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 760200"];
1256 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 760201"];
1257 [label="sb.Append('.WithLocation('); 760202"];
1258 [label="sb.Append('.WithLocation('); 760203"];
1259 [label="sb.Append(_startPosition.Value.Line + 1); 760204"];
1260 [label="sb.Append(_startPosition.Value.Line + 1); 760205"];
1261 [label="sb.Append(', '); 760206"];
1262 [label="sb.Append(', '); 760207"];
1263 [label="sb.Append(_startPosition.Value.Character + 1); 760208"];
1264 [label="sb.Append(_startPosition.Value.Character + 1); 760209"];
1265 [label="sb.Append(')'); 760210"];
1266 [label="sb.Append(')'); 760211"];
1267 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 760212"];
1268 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 760213"];
1269 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 760214"];
1270 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 760215"];
1271 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 760216"];
1272 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 760217"];
1273 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 760218"];
1274 [label="return sb.ToString(); 760219"];
1275 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 760220"];
1276 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 760221"];
1277 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 760222"];
1278 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 760223"];
1279 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 760224"];
1280 [label="assertText.AppendLine(); 760225"];
1281 [label="assertText.AppendLine('Diff:'); 760226"];
1282 [label="assertText.AppendLine('Diff:'); 760227"];
1283 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 760228"];
1284 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 760229"];
1285 [label="new[] { '\\r', '\\n' } 760230"];
1286 [label="'\\r' 760231"];
1287 [label="'\\n' 760232"];
1288 [label="new[] { '\\r', '\\n' } 760233"];
1289 [label="new[] { '\\r', '\\n' } 760234"];
1290 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 760235"];
1291 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 760236"];
1292 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 760237"];
1293 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 760238"];
1294 [label="param DiffReport(IEnumerable<T> expected) 760239"];
1295 [label="param DiffReport(IEnumerable<T> actual) 760240"];
1296 [label="param DiffReport(string separator) 760241"];
1297 [label="param DiffReport(IEqualityComparer<T> comparer = null) 760242"];
1298 [label="param DiffReport(Func<T, string> toString = null) 760243"];
1299 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 760244"];
1300 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 760245"];
1301 [label="(comparer != null) 760246"];
1302 [label="EqualityComparer<T>.Default 760247"];
1303 [label="new LCS<T>(EqualityComparer<T>.Default) 760248"];
1304 [label="param LCS(IEqualityComparer<T> comparer) 760249"];
1305 [label="param LCS(this) 760250"];
1306 [label="1 760251"];
1307 [label="DeleteCost = 1 760252"];
1308 [label="1 760253"];
1309 [label="InsertCost = 1 760254"];
1310 [label="2 760255"];
1311 [label="UpdateCost = 2 760256"];
1312 [label="param LongestCommonSubsequence(this) 760257"];
1313 [label="_comparer 760258"];
1314 [label="_comparer 760259"];
1315 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 760260"];
1316 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 760261"];
1317 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 760262"];
1318 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 760263"];
1319 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 760264"];
1320 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 760265"];
1321 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 760266"];
1322 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 760267"];
1323 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 760268"];
1324 [label="lcs.CalculateDiff(expectedList, actualList, toString) 760269"];
1325 [label="param CalculateDiff(IList<T> sequenceA) 760270"];
1326 [label="param CalculateDiff(IList<T> sequenceB) 760271"];
1327 [label="param CalculateDiff(Func<T, string> toString) 760272"];
1328 [label="param CalculateDiff(this) 760273"];
1329 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 760274"];
1330 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 760275"];
1331 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 760276"];
1332 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 760277"];
1333 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 760278"];
1334 [label="param GetEdits(TSequence sequenceA) 760279"];
1335 [label="param GetEdits(int lengthA) 760280"];
1336 [label="param GetEdits(TSequence sequenceB) 760281"];
1337 [label="param GetEdits(int lengthB) 760282"];
1338 [label="param GetEdits(this) 760283"];
1339 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 760284"];
1340 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 760285"];
1341 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 760286"];
1342 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 760287"];
1343 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 760288"];
1344 [label="param ComputeCostMatrix(TSequence sequenceA) 760289"];
1345 [label="param ComputeCostMatrix(int lengthA) 760290"];
1346 [label="param ComputeCostMatrix(TSequence sequenceB) 760291"];
1347 [label="param ComputeCostMatrix(int lengthB) 760292"];
1348 [label="param ComputeCostMatrix(this) 760293"];
1349 [label="var la = lengthA + 1; 760294"];
1350 [label="var la = lengthA + 1; 760295"];
1351 [label="var lb = lengthB + 1; 760296"];
1352 [label="var lb = lengthB + 1; 760297"];
1353 [label="var d = new int[la, lb]; 760298"];
1354 [label="d[0, 0] = 0; 760299"];
1355 [label="d[0, 0] 760300"];
1356 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 760301"];
1357 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 760302"];
1358 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 760303"];
1359 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 760304"];
1360 [label="d[i, 0] 760305"];
1361 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 760306"];
1362 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 760307"];
1363 [label="d[0, j] = d[0, j - 1] + InsertCost; 760308"];
1364 [label="d[0, j] = d[0, j - 1] + InsertCost; 760309"];
1365 [label="d[0, j] 760310"];
1366 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 760311"];
1367 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 760312"];
1368 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 760313"];
1369 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 760314"];
1370 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 760315"];
1371 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 760316"];
1372 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 760317"];
1373 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 760318"];
1374 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 760319"];
1375 [label="param ItemsEqual(IList<T> sequenceA) 760320"];
1376 [label="param ItemsEqual(int indexA) 760321"];
1377 [label="param ItemsEqual(IList<T> sequenceB) 760322"];
1378 [label="param ItemsEqual(int indexB) 760323"];
1379 [label="param ItemsEqual(this) 760324"];
1380 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 760325"];
1381 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 760326"];
1382 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 760327"];
1383 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 760328"];
1384 [label="int m2 = d[i - 1, j] + DeleteCost; 760329"];
1385 [label="int m2 = d[i - 1, j] + DeleteCost; 760330"];
1386 [label="int m3 = d[i, j - 1] + InsertCost; 760331"];
1387 [label="int m3 = d[i, j - 1] + InsertCost; 760332"];
1388 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 760333"];
1389 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 760334"];
1390 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 760335"];
1391 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 760336"];
1392 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 760337"];
1393 [label="d[i, j] 760338"];
1394 [label="return d; 760339"];
1395 [label="int i = lengthA; 760340"];
1396 [label="int j = lengthB; 760341"];
1397 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 760342"];
1398 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 760343"];
1399 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 760344"];
1400 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 760345"];
1401 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 760346"];
1402 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 760347"];
1403 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 760348"];
1404 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 760349"];
1405 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 760350"];
1406 [label="i--; 760351"];
1407 [label="j--; 760352"];
1408 [label="yield return new Edit(EditKind.Update, i, j); 760353"];
1409 [label="yield return new Edit(EditKind.Update, i, j); 760354"];
1410 [label="yield return new Edit(EditKind.Update, i, j); 760355"];
1411 [label="yield return new Edit(EditKind.Update, i, j); 760356"];
1412 [label="new Edit(EditKind.Update, i, j) 760357"];
1413 [label="param Edit(EditKind kind) 760358"];
1414 [label="param Edit(int indexA) 760359"];
1415 [label="param Edit(int indexB) 760360"];
1416 [label="param Edit(this) 760361"];
1417 [label="this.Kind 760362"];
1418 [label="this.IndexA 760363"];
1419 [label="this.IndexB 760364"];
1420 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 760365"];
1421 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 760366"];
1422 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 760367"];
1423 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 760368"];
1424 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 760369"];
1425 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 760370"];
1426 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 760371"];
1427 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 760372"];
1428 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 760373"];
1429 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 760374"];
1430 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 760375"];
1431 [label="actualText.Free(); 760376"];
1432 [label="expectedText.Free(); 760377"];
1433 [label="return assertText.ToString(); 760378"];
1434 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 760379"];
1435 [label="diagnostics.Verify(expected); 760380"];
1436 [label="VerifyAssemblyIds(c, diagnostics); 760381"];
1437 [label="VerifyAssemblyIds(c, diagnostics); 760382"];
1438 [label="VerifyAssemblyIds(c, diagnostics) 760383"];
1439 [label="param VerifyAssemblyIds(TCompilation c) 760384"];
1440 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 760385"];
1441 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 760386"];
1442 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 760387"];
1443 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 760388"];
1444 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 760389"];
1445 [label="CustomAssert.True(assemblyIds.IsEmpty); 760390"];
1446 [label="VerifyAssemblyIds(c, diagnostics); 760391"];
1447 [label="return c; 760392"];
2 -> 0;
2 -> 1;
4 -> 3;
6 -> 5;
7 -> 1;
9 -> 8;
11 -> 10;
13 -> 12;
15 -> 14;
17 -> 16;
19 -> 18;
21 -> 20;
23 -> 22;
25 -> 24;
27 -> 26;
29 -> 28;
31 -> 30;
33 -> 32;
35 -> 34;
37 -> 36;
39 -> 38;
41 -> 40;
43 -> 42;
45 -> 44;
46 -> 0;
47 -> 0;
48 -> 46;
48 -> 47;
48 -> 0;
49 -> 48;
50 -> 0;
51 -> 0;
52 -> 50;
52 -> 51;
52 -> 48;
53 -> 52;
54 -> 0;
55 -> 54;
56 -> 55;
56 -> 54;
57 -> 56;
59 -> 0;
60 -> 58;
60 -> 59;
61 -> 60;
62 -> 0;
63 -> 0;
64 -> 62;
64 -> 63;
64 -> 0;
65 -> 64;
66 -> 0;
67 -> 0;
68 -> 66;
68 -> 67;
68 -> 52;
69 -> 68;
70 -> 0;
71 -> 0;
72 -> 70;
72 -> 71;
72 -> 68;
73 -> 72;
74 -> 0;
75 -> 0;
76 -> 74;
76 -> 75;
76 -> 72;
77 -> 76;
78 -> 0;
79 -> 0;
80 -> 78;
80 -> 79;
80 -> 0;
81 -> 80;
82 -> 0;
83 -> 0;
84 -> 82;
84 -> 83;
84 -> 0;
85 -> 84;
86 -> 0;
87 -> 0;
88 -> 86;
88 -> 87;
88 -> 0;
89 -> 88;
90 -> 0;
91 -> 0;
92 -> 90;
92 -> 91;
92 -> 76;
93 -> 92;
94 -> 0;
95 -> 0;
96 -> 94;
96 -> 95;
96 -> 0;
97 -> 96;
99 -> 0;
100 -> 98;
100 -> 99;
101 -> 100;
102 -> 0;
103 -> 0;
104 -> 102;
104 -> 103;
104 -> 92;
105 -> 104;
106 -> 0;
107 -> 0;
108 -> 106;
108 -> 107;
108 -> 0;
109 -> 108;
110 -> 0;
111 -> 0;
112 -> 110;
112 -> 111;
112 -> 0;
113 -> 112;
114 -> 0;
115 -> 0;
116 -> 114;
116 -> 115;
116 -> 0;
117 -> 116;
118 -> 0;
119 -> 0;
120 -> 118;
120 -> 119;
120 -> 0;
121 -> 120;
122 -> 0;
123 -> 0;
124 -> 122;
124 -> 123;
124 -> 0;
125 -> 124;
126 -> 0;
127 -> 0;
128 -> 126;
128 -> 127;
128 -> 104;
129 -> 128;
130 -> 0;
131 -> 0;
132 -> 130;
132 -> 131;
132 -> 128;
133 -> 132;
134 -> 0;
135 -> 0;
136 -> 134;
136 -> 135;
136 -> 132;
137 -> 136;
138 -> 0;
139 -> 0;
140 -> 138;
140 -> 139;
140 -> 136;
141 -> 140;
142 -> 0;
143 -> 0;
144 -> 142;
144 -> 143;
144 -> 0;
145 -> 144;
146 -> 0;
147 -> 0;
148 -> 146;
148 -> 147;
148 -> 0;
149 -> 148;
150 -> 0;
151 -> 0;
152 -> 150;
152 -> 151;
152 -> 140;
153 -> 152;
154 -> 0;
155 -> 0;
156 -> 154;
156 -> 155;
156 -> 0;
157 -> 156;
158 -> 0;
159 -> 0;
160 -> 158;
160 -> 159;
160 -> 0;
161 -> 160;
162 -> 0;
163 -> 0;
164 -> 162;
164 -> 163;
164 -> 0;
165 -> 164;
166 -> 0;
167 -> 0;
168 -> 166;
168 -> 167;
168 -> 152;
169 -> 168;
170 -> 0;
171 -> 0;
172 -> 170;
172 -> 171;
172 -> 0;
173 -> 172;
174 -> 0;
175 -> 0;
176 -> 174;
176 -> 175;
176 -> 0;
177 -> 176;
179 -> 178;
181 -> 179;
181 -> 180;
182 -> 181;
184 -> 0;
184 -> 183;
185 -> 184;
185 -> 0;
186 -> 185;
188 -> 187;
190 -> 189;
192 -> 191;
194 -> 193;
195 -> 7;
196 -> 195;
197 -> 196;
198 -> 197;
198 -> 196;
199 -> 1;
199 -> 2;
199 -> 198;
200 -> 1;
201 -> 1;
202 -> 201;
202 -> 1;
203 -> 1;
204 -> 202;
204 -> 203;
205 -> 204;
205 -> 203;
206 -> 203;
207 -> 205;
207 -> 206;
208 -> 206;
209 -> 207;
209 -> 208;
209 -> 206;
210 -> 206;
210 -> 1;
211 -> 1;
212 -> 1;
213 -> 210;
213 -> 212;
214 -> 211;
214 -> 212;
215 -> 211;
215 -> 212;
216 -> 211;
216 -> 212;
217 -> 211;
217 -> 212;
218 -> 211;
218 -> 212;
219 -> 211;
219 -> 212;
220 -> 213;
220 -> 212;
221 -> 214;
221 -> 212;
222 -> 215;
222 -> 212;
223 -> 216;
223 -> 212;
224 -> 0;
224 -> 212;
225 -> 217;
225 -> 212;
226 -> 218;
226 -> 212;
227 -> 219;
227 -> 212;
228 -> 212;
229 -> 220;
229 -> 228;
230 -> 221;
230 -> 228;
231 -> 222;
231 -> 228;
232 -> 223;
232 -> 228;
233 -> 224;
233 -> 228;
234 -> 225;
234 -> 228;
235 -> 226;
235 -> 228;
236 -> 227;
236 -> 228;
237 -> 229;
237 -> 228;
238 -> 233;
238 -> 228;
239 -> 230;
239 -> 228;
240 -> 228;
241 -> 238;
241 -> 240;
242 -> 239;
242 -> 240;
243 -> 241;
243 -> 240;
244 -> 240;
245 -> 243;
245 -> 244;
246 -> 245;
246 -> 244;
247 -> 246;
248 -> 0;
248 -> 247;
249 -> 248;
249 -> 0;
249 -> 247;
250 -> 240;
251 -> 242;
251 -> 250;
251 -> 240;
252 -> 249;
252 -> 251;
253 -> 231;
253 -> 228;
254 -> 232;
254 -> 228;
255 -> 234;
255 -> 228;
256 -> 235;
256 -> 228;
257 -> 236;
257 -> 228;
258 -> 228;
259 -> 237;
259 -> 258;
260 -> 252;
260 -> 258;
261 -> 253;
261 -> 258;
262 -> 254;
262 -> 258;
263 -> 255;
263 -> 258;
264 -> 256;
264 -> 258;
265 -> 257;
265 -> 258;
266 -> 259;
266 -> 258;
267 -> 260;
267 -> 258;
268 -> 261;
268 -> 258;
269 -> 262;
269 -> 258;
270 -> 263;
270 -> 258;
271 -> 264;
271 -> 258;
272 -> 265;
272 -> 258;
273 -> 258;
274 -> 273;
274 -> 258;
275 -> 258;
276 -> 266;
276 -> 275;
277 -> 267;
277 -> 275;
278 -> 268;
278 -> 275;
279 -> 269;
279 -> 275;
280 -> 270;
280 -> 275;
281 -> 271;
281 -> 275;
282 -> 272;
282 -> 275;
283 -> 274;
283 -> 275;
284 -> 279;
284 -> 275;
285 -> 281;
285 -> 275;
286 -> 275;
287 -> 284;
287 -> 286;
288 -> 285;
288 -> 286;
289 -> 276;
289 -> 286;
290 -> 289;
290 -> 209;
290 -> 286;
291 -> 290;
292 -> 288;
292 -> 290;
293 -> 287;
293 -> 290;
294 -> 290;
295 -> 291;
295 -> 294;
296 -> 292;
296 -> 294;
297 -> 293;
297 -> 294;
298 -> 291;
298 -> 294;
299 -> 294;
300 -> 297;
300 -> 299;
300 -> 294;
301 -> 0;
302 -> 0;
304 -> 301;
304 -> 302;
304 -> 303;
305 -> 304;
306 -> 0;
307 -> 305;
307 -> 304;
307 -> 306;
308 -> 307;
309 -> 0;
310 -> 305;
310 -> 304;
310 -> 309;
311 -> 310;
312 -> 0;
313 -> 305;
313 -> 304;
313 -> 312;
314 -> 313;
315 -> 0;
316 -> 305;
316 -> 304;
316 -> 315;
317 -> 316;
318 -> 0;
319 -> 305;
319 -> 304;
319 -> 318;
320 -> 319;
321 -> 0;
322 -> 305;
322 -> 304;
322 -> 321;
323 -> 322;
324 -> 0;
325 -> 305;
325 -> 304;
325 -> 324;
326 -> 325;
327 -> 0;
328 -> 305;
328 -> 304;
328 -> 327;
329 -> 328;
330 -> 0;
331 -> 305;
331 -> 304;
331 -> 330;
332 -> 331;
333 -> 0;
334 -> 305;
334 -> 304;
334 -> 333;
335 -> 334;
336 -> 0;
337 -> 305;
337 -> 304;
337 -> 336;
338 -> 337;
339 -> 305;
342 -> 339;
342 -> 341;
343 -> 340;
343 -> 341;
344 -> 341;
345 -> 342;
345 -> 304;
345 -> 341;
346 -> 341;
347 -> 343;
347 -> 341;
348 -> 344;
348 -> 341;
349 -> 347;
349 -> 348;
349 -> 341;
350 -> 349;
350 -> 346;
350 -> 341;
351 -> 345;
351 -> 346;
351 -> 304;
351 -> 350;
351 -> 349;
351 -> 341;
352 -> 351;
353 -> 0;
354 -> 353;
356 -> 354;
356 -> 355;
357 -> 305;
357 -> 304;
357 -> 356;
358 -> 357;
359 -> 0;
360 -> 359;
361 -> 305;
361 -> 304;
361 -> 360;
362 -> 361;
363 -> 0;
364 -> 305;
364 -> 304;
364 -> 363;
365 -> 364;
366 -> 329;
368 -> 367;
369 -> 0;
370 -> 0;
371 -> 0;
373 -> 369;
373 -> 370;
373 -> 371;
373 -> 372;
374 -> 368;
375 -> 373;
375 -> 374;
375 -> 367;
376 -> 375;
380 -> 377;
380 -> 378;
380 -> 379;
381 -> 311;
381 -> 304;
381 -> 310;
381 -> 377;
381 -> 380;
382 -> 381;
383 -> 323;
384 -> 332;
385 -> 332;
386 -> 329;
387 -> 0;
388 -> 0;
390 -> 387;
390 -> 389;
391 -> 388;
391 -> 389;
392 -> 389;
393 -> 390;
393 -> 389;
394 -> 391;
394 -> 389;
395 -> 0;
395 -> 389;
396 -> 392;
396 -> 389;
397 -> 389;
398 -> 393;
398 -> 394;
398 -> 395;
398 -> 396;
398 -> 397;
398 -> 389;
399 -> 398;
400 -> 0;
401 -> 0;
403 -> 400;
403 -> 402;
404 -> 401;
404 -> 402;
405 -> 402;
406 -> 403;
406 -> 402;
407 -> 404;
407 -> 402;
408 -> 0;
408 -> 402;
409 -> 405;
409 -> 402;
410 -> 402;
411 -> 406;
411 -> 407;
411 -> 408;
411 -> 409;
411 -> 410;
411 -> 402;
412 -> 411;
414 -> 399;
414 -> 398;
414 -> 413;
415 -> 414;
417 -> 412;
417 -> 411;
417 -> 416;
418 -> 417;
419 -> 0;
420 -> 0;
422 -> 419;
422 -> 421;
423 -> 420;
423 -> 421;
424 -> 421;
425 -> 422;
425 -> 421;
426 -> 423;
426 -> 421;
427 -> 0;
427 -> 421;
428 -> 424;
428 -> 421;
429 -> 421;
430 -> 425;
430 -> 426;
430 -> 427;
430 -> 428;
430 -> 429;
430 -> 421;
431 -> 430;
432 -> 0;
433 -> 0;
435 -> 432;
435 -> 434;
436 -> 433;
436 -> 434;
437 -> 434;
438 -> 435;
438 -> 434;
439 -> 436;
439 -> 434;
440 -> 0;
440 -> 434;
441 -> 437;
441 -> 434;
442 -> 434;
443 -> 438;
443 -> 439;
443 -> 440;
443 -> 441;
443 -> 442;
443 -> 434;
444 -> 443;
445 -> 0;
446 -> 0;
448 -> 445;
448 -> 447;
449 -> 446;
449 -> 447;
450 -> 447;
451 -> 448;
451 -> 447;
452 -> 449;
452 -> 447;
453 -> 0;
453 -> 447;
454 -> 450;
454 -> 447;
455 -> 447;
456 -> 451;
456 -> 452;
456 -> 453;
456 -> 454;
456 -> 455;
456 -> 447;
457 -> 456;
458 -> 0;
459 -> 0;
461 -> 458;
461 -> 460;
462 -> 459;
462 -> 460;
463 -> 460;
464 -> 461;
464 -> 460;
465 -> 462;
465 -> 460;
466 -> 0;
466 -> 460;
467 -> 463;
467 -> 460;
468 -> 460;
469 -> 464;
469 -> 465;
469 -> 466;
469 -> 467;
469 -> 468;
469 -> 460;
470 -> 469;
471 -> 0;
472 -> 0;
474 -> 471;
474 -> 473;
475 -> 472;
475 -> 473;
476 -> 473;
477 -> 474;
477 -> 473;
478 -> 475;
478 -> 473;
479 -> 0;
479 -> 473;
480 -> 476;
480 -> 473;
481 -> 473;
482 -> 477;
482 -> 478;
482 -> 479;
482 -> 480;
482 -> 481;
482 -> 473;
483 -> 482;
484 -> 0;
485 -> 0;
487 -> 484;
487 -> 486;
488 -> 485;
488 -> 486;
489 -> 486;
490 -> 487;
490 -> 486;
491 -> 488;
491 -> 486;
492 -> 0;
492 -> 486;
493 -> 489;
493 -> 486;
494 -> 486;
495 -> 490;
495 -> 491;
495 -> 492;
495 -> 493;
495 -> 494;
495 -> 486;
496 -> 495;
498 -> 399;
498 -> 398;
498 -> 497;
499 -> 498;
501 -> 412;
501 -> 411;
501 -> 500;
502 -> 501;
504 -> 431;
504 -> 430;
504 -> 503;
505 -> 504;
507 -> 444;
507 -> 443;
507 -> 506;
508 -> 507;
509 -> 0;
510 -> 399;
510 -> 398;
510 -> 509;
510 -> 0;
511 -> 510;
512 -> 0;
513 -> 412;
513 -> 411;
513 -> 512;
513 -> 0;
514 -> 513;
515 -> 0;
516 -> 483;
516 -> 482;
516 -> 515;
516 -> 0;
517 -> 516;
518 -> 0;
519 -> 431;
519 -> 430;
519 -> 518;
519 -> 0;
520 -> 519;
521 -> 0;
522 -> 0;
522 -> 521;
523 -> 522;
524 -> 305;
524 -> 300;
525 -> 295;
525 -> 294;
526 -> 0;
526 -> 294;
527 -> 526;
527 -> 298;
527 -> 294;
528 -> 294;
529 -> 525;
529 -> 527;
529 -> 528;
529 -> 0;
529 -> 294;
530 -> 529;
530 -> 294;
531 -> 524;
531 -> 294;
532 -> 296;
532 -> 294;
533 -> 294;
534 -> 530;
534 -> 531;
534 -> 532;
534 -> 533;
534 -> 529;
534 -> 304;
534 -> 294;
535 -> 294;
536 -> 534;
536 -> 535;
537 -> 535;
538 -> 535;
539 -> 536;
539 -> 534;
539 -> 538;
539 -> 535;
540 -> 537;
540 -> 535;
541 -> 535;
542 -> 539;
542 -> 534;
542 -> 538;
542 -> 540;
542 -> 541;
542 -> 537;
542 -> 535;
543 -> 535;
544 -> 543;
544 -> 537;
544 -> 535;
545 -> 537;
545 -> 535;
546 -> 535;
547 -> 545;
547 -> 546;
547 -> 537;
547 -> 544;
547 -> 535;
548 -> 536;
548 -> 535;
549 -> 548;
549 -> 291;
549 -> 290;
550 -> 291;
550 -> 275;
551 -> 275;
552 -> 278;
552 -> 551;
552 -> 275;
553 -> 550;
553 -> 552;
554 -> 552;
555 -> 553;
555 -> 554;
555 -> 291;
555 -> 549;
555 -> 534;
555 -> 552;
556 -> 555;
556 -> 552;
557 -> 399;
557 -> 556;
558 -> 0;
558 -> 275;
559 -> 283;
559 -> 275;
560 -> 280;
560 -> 550;
560 -> 277;
560 -> 557;
560 -> 275;
561 -> 560;
561 -> 275;
562 -> 275;
563 -> 561;
563 -> 562;
564 -> 0;
564 -> 562;
565 -> 564;
566 -> 275;
567 -> 560;
567 -> 291;
567 -> 549;
567 -> 534;
567 -> 249;
567 -> 0;
567 -> 398;
567 -> 275;
568 -> 275;
569 -> 568;
570 -> 567;
570 -> 569;
570 -> 275;
571 -> 570;
571 -> 275;
572 -> 275;
573 -> 571;
573 -> 572;
574 -> 573;
574 -> 570;
574 -> 572;
575 -> 574;
575 -> 570;
575 -> 572;
576 -> 572;
577 -> 574;
577 -> 576;
577 -> 570;
577 -> 572;
578 -> 0;
578 -> 572;
579 -> 577;
579 -> 578;
579 -> 572;
580 -> 282;
580 -> 579;
580 -> 275;
581 -> 570;
581 -> 275;
582 -> 0;
582 -> 1;
583 -> 1;
584 -> 582;
584 -> 583;
585 -> 211;
585 -> 583;
586 -> 211;
586 -> 583;
587 -> 211;
587 -> 583;
588 -> 211;
588 -> 583;
589 -> 211;
589 -> 583;
590 -> 211;
590 -> 583;
591 -> 584;
591 -> 583;
592 -> 585;
592 -> 583;
593 -> 586;
593 -> 583;
594 -> 587;
594 -> 583;
595 -> 588;
595 -> 583;
596 -> 589;
596 -> 583;
597 -> 590;
597 -> 583;
598 -> 583;
599 -> 591;
599 -> 598;
600 -> 592;
600 -> 598;
601 -> 593;
601 -> 598;
602 -> 594;
602 -> 598;
603 -> 595;
603 -> 598;
604 -> 596;
604 -> 598;
605 -> 597;
605 -> 598;
606 -> 599;
606 -> 598;
607 -> 599;
607 -> 598;
608 -> 598;
609 -> 600;
609 -> 598;
610 -> 601;
610 -> 598;
611 -> 602;
611 -> 598;
612 -> 603;
612 -> 598;
613 -> 604;
613 -> 598;
615 -> 614;
617 -> 616;
618 -> 605;
618 -> 598;
619 -> 598;
620 -> 607;
620 -> 619;
621 -> 608;
621 -> 619;
622 -> 609;
622 -> 619;
623 -> 610;
623 -> 619;
624 -> 611;
624 -> 619;
625 -> 612;
625 -> 619;
626 -> 613;
626 -> 619;
627 -> 607;
627 -> 619;
628 -> 618;
628 -> 619;
629 -> 608;
629 -> 619;
630 -> 608;
630 -> 619;
631 -> 608;
631 -> 619;
632 -> 631;
632 -> 619;
633 -> 631;
633 -> 619;
634 -> 631;
634 -> 619;
635 -> 631;
635 -> 619;
636 -> 631;
636 -> 619;
637 -> 631;
637 -> 619;
638 -> 631;
638 -> 619;
639 -> 631;
639 -> 619;
640 -> 631;
640 -> 619;
641 -> 631;
641 -> 619;
642 -> 631;
642 -> 619;
643 -> 631;
643 -> 619;
644 -> 631;
644 -> 619;
645 -> 631;
645 -> 619;
646 -> 631;
646 -> 619;
647 -> 620;
647 -> 631;
647 -> 619;
648 -> 621;
648 -> 631;
648 -> 619;
649 -> 622;
649 -> 631;
649 -> 619;
650 -> 623;
650 -> 631;
650 -> 619;
651 -> 624;
651 -> 631;
651 -> 619;
652 -> 625;
652 -> 631;
652 -> 619;
653 -> 626;
653 -> 631;
653 -> 619;
654 -> 627;
654 -> 619;
655 -> 654;
655 -> 631;
655 -> 619;
656 -> 628;
656 -> 631;
656 -> 619;
657 -> 629;
657 -> 631;
657 -> 619;
658 -> 630;
658 -> 631;
658 -> 619;
659 -> 608;
659 -> 583;
660 -> 659;
660 -> 1;
661 -> 211;
661 -> 1;
662 -> 1;
663 -> 211;
663 -> 662;
664 -> 660;
664 -> 662;
665 -> 664;
665 -> 647;
665 -> 662;
666 -> 664;
666 -> 648;
666 -> 662;
667 -> 664;
667 -> 649;
667 -> 662;
668 -> 663;
668 -> 662;
669 -> 664;
669 -> 651;
669 -> 662;
670 -> 664;
670 -> 652;
670 -> 662;
671 -> 662;
672 -> 664;
672 -> 655;
672 -> 662;
673 -> 664;
673 -> 656;
673 -> 662;
674 -> 664;
674 -> 657;
674 -> 662;
675 -> 664;
675 -> 658;
675 -> 662;
676 -> 662;
677 -> 665;
677 -> 676;
678 -> 666;
678 -> 676;
679 -> 667;
679 -> 676;
680 -> 668;
680 -> 676;
681 -> 669;
681 -> 676;
682 -> 670;
682 -> 676;
683 -> 671;
683 -> 676;
684 -> 672;
684 -> 676;
685 -> 673;
685 -> 676;
686 -> 674;
686 -> 676;
687 -> 675;
687 -> 676;
688 -> 671;
688 -> 676;
689 -> 688;
689 -> 676;
690 -> 688;
690 -> 676;
691 -> 688;
691 -> 676;
692 -> 688;
692 -> 676;
693 -> 688;
693 -> 676;
694 -> 688;
694 -> 676;
695 -> 688;
695 -> 676;
696 -> 688;
696 -> 676;
697 -> 688;
697 -> 676;
698 -> 688;
698 -> 676;
699 -> 688;
699 -> 676;
700 -> 688;
700 -> 676;
701 -> 688;
701 -> 676;
702 -> 688;
702 -> 676;
703 -> 688;
703 -> 676;
704 -> 680;
704 -> 688;
704 -> 676;
705 -> 683;
705 -> 688;
705 -> 676;
706 -> 671;
706 -> 1;
707 -> 1;
708 -> 211;
708 -> 707;
709 -> 211;
709 -> 707;
710 -> 706;
710 -> 707;
711 -> 710;
711 -> 677;
711 -> 707;
712 -> 710;
712 -> 678;
712 -> 707;
713 -> 710;
713 -> 679;
713 -> 707;
714 -> 710;
714 -> 704;
714 -> 707;
715 -> 707;
716 -> 708;
716 -> 715;
716 -> 707;
717 -> 709;
717 -> 715;
717 -> 707;
718 -> 716;
718 -> 717;
718 -> 707;
719 -> 710;
719 -> 682;
719 -> 707;
720 -> 710;
720 -> 705;
720 -> 707;
721 -> 710;
721 -> 684;
721 -> 707;
722 -> 710;
722 -> 685;
722 -> 707;
723 -> 710;
723 -> 686;
723 -> 707;
724 -> 710;
724 -> 687;
724 -> 707;
725 -> 707;
726 -> 711;
726 -> 725;
727 -> 712;
727 -> 725;
728 -> 713;
728 -> 725;
729 -> 714;
729 -> 725;
730 -> 718;
730 -> 725;
731 -> 719;
731 -> 725;
732 -> 720;
732 -> 725;
733 -> 721;
733 -> 725;
734 -> 722;
734 -> 725;
735 -> 723;
735 -> 725;
736 -> 724;
736 -> 725;
737 -> 715;
737 -> 725;
738 -> 737;
738 -> 725;
739 -> 737;
739 -> 725;
740 -> 737;
740 -> 725;
741 -> 737;
741 -> 725;
742 -> 737;
742 -> 725;
743 -> 737;
743 -> 725;
744 -> 737;
744 -> 725;
745 -> 737;
745 -> 725;
746 -> 737;
746 -> 725;
747 -> 737;
747 -> 725;
748 -> 737;
748 -> 725;
749 -> 737;
749 -> 725;
750 -> 737;
750 -> 725;
751 -> 737;
751 -> 725;
752 -> 737;
752 -> 725;
753 -> 730;
753 -> 737;
753 -> 725;
754 -> 715;
754 -> 1;
755 -> 754;
755 -> 211;
755 -> 1;
756 -> 1;
757 -> 581;
757 -> 756;
758 -> 211;
758 -> 756;
759 -> 756;
760 -> 757;
760 -> 759;
760 -> 579;
760 -> 756;
761 -> 760;
761 -> 756;
762 -> 758;
762 -> 756;
763 -> 756;
764 -> 761;
764 -> 763;
765 -> 762;
765 -> 763;
766 -> 764;
766 -> 763;
767 -> 765;
767 -> 763;
768 -> 763;
769 -> 766;
769 -> 768;
770 -> 767;
770 -> 768;
771 -> 769;
771 -> 768;
772 -> 770;
772 -> 768;
773 -> 768;
774 -> 768;
775 -> 771;
775 -> 774;
776 -> 772;
776 -> 774;
777 -> 773;
777 -> 774;
778 -> 774;
779 -> 776;
779 -> 778;
779 -> 774;
780 -> 776;
780 -> 774;
781 -> 780;
781 -> 211;
781 -> 755;
781 -> 726;
781 -> 727;
781 -> 736;
781 -> 728;
781 -> 729;
781 -> 753;
781 -> 732;
781 -> 733;
781 -> 746;
781 -> 734;
781 -> 735;
781 -> 731;
781 -> 750;
781 -> 751;
781 -> 752;
781 -> 718;
781 -> 661;
781 -> 607;
781 -> 774;
782 -> 774;
783 -> 780;
783 -> 782;
783 -> 211;
783 -> 755;
783 -> 726;
783 -> 727;
783 -> 736;
783 -> 728;
783 -> 729;
783 -> 753;
783 -> 732;
783 -> 733;
783 -> 746;
783 -> 734;
783 -> 735;
783 -> 731;
783 -> 750;
783 -> 751;
783 -> 752;
783 -> 718;
783 -> 661;
783 -> 607;
783 -> 774;
784 -> 783;
784 -> 782;
785 -> 784;
785 -> 783;
785 -> 782;
786 -> 776;
786 -> 774;
787 -> 786;
787 -> 785;
787 -> 774;
788 -> 774;
789 -> 786;
789 -> 788;
789 -> 785;
789 -> 774;
790 -> 789;
790 -> 788;
791 -> 790;
791 -> 789;
791 -> 788;
792 -> 775;
792 -> 774;
793 -> 777;
793 -> 785;
793 -> 791;
793 -> 774;
794 -> 792;
794 -> 793;
794 -> 774;
795 -> 774;
796 -> 794;
796 -> 795;
797 -> 794;
797 -> 795;
798 -> 794;
798 -> 795;
799 -> 794;
799 -> 795;
800 -> 794;
800 -> 795;
801 -> 800;
801 -> 795;
802 -> 800;
802 -> 795;
803 -> 800;
803 -> 795;
804 -> 800;
804 -> 795;
805 -> 800;
805 -> 795;
806 -> 800;
806 -> 795;
807 -> 800;
807 -> 795;
808 -> 800;
808 -> 795;
809 -> 800;
809 -> 795;
810 -> 800;
810 -> 795;
811 -> 800;
811 -> 795;
812 -> 796;
812 -> 794;
812 -> 800;
812 -> 795;
813 -> 796;
813 -> 794;
813 -> 800;
813 -> 795;
814 -> 796;
814 -> 794;
814 -> 800;
814 -> 795;
815 -> 796;
815 -> 794;
815 -> 800;
815 -> 795;
816 -> 798;
816 -> 795;
817 -> 816;
818 -> 817;
818 -> 800;
818 -> 795;
819 -> 799;
819 -> 795;
820 -> 819;
821 -> 820;
821 -> 800;
821 -> 795;
822 -> 795;
823 -> 795;
824 -> 796;
824 -> 794;
824 -> 823;
824 -> 795;
825 -> 796;
825 -> 794;
825 -> 795;
826 -> 0;
826 -> 795;
827 -> 796;
827 -> 824;
828 -> 824;
829 -> 827;
829 -> 828;
829 -> 824;
830 -> 827;
830 -> 825;
830 -> 800;
830 -> 829;
831 -> 796;
831 -> 825;
831 -> 800;
831 -> 829;
832 -> 797;
832 -> 800;
832 -> 795;
833 -> 800;
833 -> 832;
833 -> 795;
834 -> 800;
834 -> 815;
834 -> 825;
834 -> 833;
835 -> 834;
836 -> 835;
836 -> 800;
836 -> 834;
837 -> 833;
838 -> 827;
838 -> 837;
838 -> 833;
839 -> 827;
839 -> 835;
839 -> 800;
839 -> 838;
840 -> 833;
841 -> 800;
841 -> 839;
841 -> 840;
841 -> 833;
842 -> 800;
842 -> 839;
842 -> 835;
842 -> 840;
842 -> 833;
843 -> 800;
843 -> 815;
843 -> 835;
843 -> 795;
844 -> 843;
844 -> 800;
844 -> 795;
845 -> 794;
845 -> 843;
845 -> 831;
845 -> 813;
845 -> 814;
845 -> 836;
845 -> 839;
845 -> 844;
845 -> 807;
845 -> 830;
845 -> 832;
845 -> 818;
845 -> 821;
845 -> 811;
845 -> 800;
845 -> 815;
845 -> 774;
846 -> 776;
846 -> 774;
847 -> 846;
847 -> 791;
847 -> 774;
848 -> 847;
849 -> 848;
849 -> 845;
849 -> 791;
849 -> 847;
850 -> 849;
850 -> 848;
851 -> 849;
851 -> 848;
852 -> 850;
852 -> 848;
853 -> 848;
854 -> 852;
854 -> 853;
854 -> 848;
855 -> 852;
855 -> 849;
855 -> 848;
856 -> 851;
856 -> 849;
856 -> 855;
856 -> 848;
857 -> 851;
857 -> 856;
857 -> 852;
857 -> 848;
858 -> 851;
858 -> 856;
858 -> 852;
858 -> 848;
859 -> 851;
859 -> 856;
859 -> 848;
860 -> 851;
860 -> 856;
860 -> 852;
860 -> 859;
861 -> 848;
862 -> 851;
862 -> 856;
862 -> 861;
862 -> 848;
863 -> 862;
864 -> 851;
864 -> 856;
864 -> 852;
864 -> 863;
865 -> 848;
866 -> 851;
866 -> 856;
866 -> 865;
866 -> 848;
867 -> 848;
868 -> 852;
868 -> 856;
868 -> 867;
868 -> 848;
869 -> 851;
869 -> 856;
869 -> 852;
869 -> 848;
870 -> 848;
871 -> 851;
871 -> 856;
871 -> 870;
871 -> 848;
872 -> 871;
873 -> 871;
874 -> 851;
874 -> 873;
875 -> 873;
876 -> 874;
876 -> 856;
876 -> 875;
876 -> 873;
877 -> 874;
877 -> 856;
877 -> 876;
878 -> 876;
879 -> 877;
879 -> 874;
879 -> 876;
880 -> 874;
880 -> 856;
880 -> 879;
880 -> 873;
881 -> 880;
881 -> 871;
882 -> 871;
883 -> 852;
883 -> 882;
884 -> 882;
885 -> 883;
885 -> 856;
885 -> 879;
885 -> 884;
885 -> 882;
886 -> 883;
886 -> 856;
886 -> 879;
886 -> 885;
886 -> 882;
887 -> 886;
887 -> 871;
888 -> 851;
888 -> 856;
888 -> 852;
888 -> 871;
889 -> 881;
889 -> 888;
890 -> 887;
890 -> 888;
891 -> 889;
891 -> 890;
891 -> 856;
891 -> 879;
891 -> 885;
891 -> 877;
891 -> 878;
891 -> 888;
892 -> 851;
892 -> 891;
892 -> 852;
892 -> 848;
893 -> 848;
894 -> 849;
894 -> 893;
894 -> 891;
894 -> 847;
895 -> 847;
896 -> 894;
896 -> 895;
896 -> 847;
897 -> 894;
897 -> 896;
898 -> 774;
899 -> 845;
899 -> 897;
899 -> 898;
899 -> 774;
900 -> 774;
901 -> 776;
901 -> 774;
902 -> 775;
902 -> 774;
903 -> 774;
904 -> 901;
904 -> 903;
905 -> 902;
905 -> 903;
906 -> 903;
907 -> 903;
908 -> 905;
908 -> 903;
909 -> 908;
909 -> 897;
909 -> 903;
910 -> 897;
910 -> 903;
911 -> 909;
911 -> 903;
912 -> 906;
912 -> 911;
913 -> 912;
913 -> 903;
914 -> 912;
914 -> 903;
915 -> 914;
915 -> 903;
916 -> 904;
916 -> 903;
917 -> 916;
917 -> 897;
917 -> 903;
918 -> 903;
919 -> 916;
919 -> 918;
919 -> 897;
919 -> 903;
920 -> 904;
920 -> 903;
921 -> 920;
921 -> 919;
921 -> 903;
922 -> 903;
923 -> 920;
923 -> 922;
923 -> 919;
923 -> 903;
924 -> 904;
924 -> 903;
925 -> 903;
926 -> 924;
926 -> 925;
928 -> 927;
929 -> 927;
930 -> 929;
930 -> 925;
931 -> 925;
932 -> 926;
932 -> 925;
933 -> 932;
933 -> 923;
933 -> 925;
934 -> 933;
935 -> 933;
936 -> 931;
936 -> 935;
936 -> 933;
937 -> 933;
938 -> 925;
939 -> 938;
939 -> 903;
940 -> 905;
940 -> 939;
941 -> 939;
942 -> 940;
942 -> 941;
943 -> 942;
943 -> 941;
944 -> 941;
945 -> 929;
945 -> 941;
946 -> 943;
946 -> 944;
946 -> 945;
946 -> 923;
946 -> 941;
947 -> 903;
948 -> 947;
948 -> 903;
949 -> 903;
950 -> 903;
951 -> 947;
951 -> 950;
951 -> 948;
951 -> 903;
952 -> 903;
953 -> 904;
953 -> 903;
954 -> 953;
954 -> 946;
954 -> 903;
955 -> 954;
956 -> 915;
956 -> 954;
957 -> 954;
958 -> 955;
958 -> 957;
959 -> 956;
959 -> 957;
960 -> 957;
961 -> 960;
961 -> 959;
961 -> 957;
962 -> 957;
963 -> 958;
963 -> 962;
964 -> 962;
965 -> 962;
966 -> 964;
966 -> 965;
966 -> 962;
967 -> 962;
968 -> 963;
968 -> 946;
968 -> 967;
968 -> 962;
969 -> 963;
969 -> 946;
969 -> 968;
970 -> 964;
970 -> 969;
970 -> 966;
970 -> 968;
971 -> 968;
972 -> 964;
972 -> 971;
972 -> 970;
972 -> 968;
973 -> 963;
973 -> 946;
973 -> 968;
974 -> 964;
974 -> 973;
974 -> 972;
974 -> 968;
975 -> 962;
976 -> 963;
976 -> 946;
976 -> 975;
976 -> 962;
977 -> 976;
978 -> 977;
979 -> 964;
979 -> 978;
979 -> 974;
979 -> 977;
980 -> 963;
980 -> 946;
980 -> 977;
981 -> 964;
981 -> 980;
981 -> 979;
981 -> 977;
982 -> 976;
983 -> 964;
983 -> 982;
983 -> 981;
983 -> 976;
984 -> 963;
984 -> 946;
984 -> 962;
985 -> 962;
986 -> 964;
986 -> 985;
986 -> 983;
986 -> 962;
987 -> 962;
988 -> 963;
988 -> 946;
988 -> 987;
988 -> 962;
989 -> 988;
990 -> 964;
990 -> 989;
990 -> 986;
990 -> 988;
991 -> 988;
992 -> 991;
992 -> 988;
993 -> 988;
994 -> 992;
994 -> 988;
995 -> 994;
996 -> 964;
996 -> 995;
996 -> 990;
996 -> 994;
997 -> 992;
997 -> 994;
998 -> 964;
998 -> 997;
998 -> 996;
998 -> 994;
999 -> 994;
1000 -> 964;
1000 -> 999;
1000 -> 998;
1000 -> 994;
1001 -> 994;
1002 -> 988;
1003 -> 964;
1003 -> 1002;
1003 -> 1000;
1003 -> 988;
1004 -> 962;
1005 -> 963;
1005 -> 994;
1005 -> 1004;
1005 -> 962;
1006 -> 1005;
1007 -> 964;
1007 -> 1006;
1007 -> 1003;
1007 -> 1005;
1008 -> 1005;
1009 -> 964;
1009 -> 1008;
1009 -> 1007;
1009 -> 1005;
1010 -> 1005;
1011 -> 964;
1011 -> 1010;
1011 -> 1009;
1011 -> 1005;
1012 -> 1005;
1013 -> 964;
1013 -> 1012;
1013 -> 1011;
1013 -> 1005;
1014 -> 1005;
1015 -> 964;
1015 -> 1014;
1015 -> 1013;
1015 -> 1005;
1016 -> 963;
1016 -> 994;
1016 -> 962;
1017 -> 962;
1018 -> 963;
1018 -> 994;
1018 -> 1017;
1018 -> 962;
1019 -> 962;
1020 -> 963;
1020 -> 994;
1020 -> 1019;
1020 -> 962;
1021 -> 962;
1022 -> 963;
1022 -> 994;
1022 -> 1021;
1022 -> 962;
1023 -> 964;
1023 -> 1015;
1023 -> 962;
1024 -> 1023;
1024 -> 957;
1025 -> 961;
1025 -> 1024;
1025 -> 957;
1026 -> 952;
1026 -> 1025;
1026 -> 954;
1027 -> 947;
1027 -> 903;
1028 -> 952;
1028 -> 903;
1029 -> 903;
1030 -> 1027;
1030 -> 1029;
1031 -> 1028;
1031 -> 1029;
1032 -> 1031;
1032 -> 1026;
1032 -> 1029;
1033 -> 1029;
1034 -> 1033;
1034 -> 1032;
1034 -> 1029;
1035 -> 1031;
1035 -> 1033;
1035 -> 1026;
1035 -> 1034;
1036 -> 1030;
1036 -> 1035;
1036 -> 951;
1036 -> 1034;
1037 -> 1034;
1038 -> 1030;
1038 -> 1036;
1038 -> 1034;
1039 -> 903;
1040 -> 903;
1041 -> 947;
1041 -> 1040;
1041 -> 1038;
1041 -> 903;
1042 -> 903;
1043 -> 946;
1043 -> 994;
1043 -> 903;
1044 -> 903;
1045 -> 1043;
1045 -> 903;
1046 -> 1045;
1046 -> 1044;
1047 -> 1045;
1047 -> 1044;
1048 -> 1045;
1048 -> 1044;
1049 -> 1044;
1050 -> 1046;
1050 -> 1049;
1050 -> 1044;
1051 -> 1044;
1052 -> 1047;
1052 -> 1051;
1052 -> 1044;
1053 -> 1047;
1053 -> 1045;
1053 -> 1044;
1054 -> 1046;
1054 -> 1045;
1054 -> 1053;
1054 -> 1044;
1055 -> 1044;
1056 -> 1054;
1056 -> 1055;
1056 -> 1044;
1057 -> 1047;
1057 -> 1045;
1057 -> 1044;
1058 -> 1046;
1058 -> 1045;
1058 -> 1057;
1058 -> 1044;
1059 -> 1047;
1059 -> 1058;
1059 -> 1044;
1060 -> 1059;
1060 -> 1055;
1060 -> 1044;
1061 -> 1043;
1061 -> 1058;
1062 -> 1061;
1062 -> 1058;
1063 -> 1062;
1063 -> 1058;
1064 -> 1058;
1065 -> 1058;
1066 -> 913;
1066 -> 1058;
1067 -> 947;
1067 -> 1066;
1068 -> 915;
1068 -> 1066;
1069 -> 1066;
1070 -> 1067;
1070 -> 1069;
1071 -> 1068;
1071 -> 1069;
1072 -> 1069;
1073 -> 1072;
1073 -> 1071;
1073 -> 1069;
1074 -> 1070;
1074 -> 1072;
1074 -> 1073;
1074 -> 1041;
1074 -> 1069;
1075 -> 1066;
1076 -> 1066;
1077 -> 947;
1077 -> 1076;
1077 -> 1074;
1077 -> 1066;
1078 -> 1061;
1078 -> 1062;
1078 -> 1066;
1079 -> 947;
1079 -> 1078;
1079 -> 1077;
1079 -> 1066;
1080 -> 1061;
1080 -> 1078;
1080 -> 1066;
1081 -> 1080;
1081 -> 1078;
1081 -> 1066;
1082 -> 947;
1082 -> 1081;
1083 -> 915;
1083 -> 1081;
1084 -> 1081;
1085 -> 1082;
1085 -> 1084;
1086 -> 1083;
1086 -> 1084;
1087 -> 1084;
1088 -> 1087;
1088 -> 1086;
1088 -> 1084;
1089 -> 1085;
1089 -> 1087;
1089 -> 1088;
1089 -> 1079;
1089 -> 1084;
1090 -> 1081;
1091 -> 1081;
1092 -> 947;
1092 -> 1091;
1092 -> 1089;
1092 -> 1081;
1093 -> 1081;
1094 -> 947;
1094 -> 1093;
1094 -> 1092;
1094 -> 1081;
1095 -> 1061;
1095 -> 1058;
1096 -> 1058;
1097 -> 917;
1097 -> 1058;
1098 -> 921;
1098 -> 1058;
1099 -> 1058;
1100 -> 1095;
1100 -> 1099;
1101 -> 1096;
1101 -> 1099;
1102 -> 1097;
1102 -> 1099;
1103 -> 1098;
1103 -> 1099;
1104 -> 1096;
1104 -> 1099;
1105 -> 1104;
1105 -> 1099;
1106 -> 1104;
1106 -> 1099;
1107 -> 1104;
1107 -> 1099;
1108 -> 1104;
1108 -> 1099;
1109 -> 1104;
1109 -> 1099;
1110 -> 1104;
1110 -> 1099;
1111 -> 1104;
1111 -> 1099;
1112 -> 1104;
1112 -> 1099;
1113 -> 1104;
1113 -> 1099;
1114 -> 1100;
1114 -> 1093;
1114 -> 1104;
1114 -> 1099;
1115 -> 1100;
1115 -> 1093;
1115 -> 1104;
1115 -> 1099;
1116 -> 1100;
1116 -> 1093;
1116 -> 1104;
1116 -> 1099;
1117 -> 1100;
1117 -> 1093;
1117 -> 1104;
1117 -> 1099;
1118 -> 1099;
1119 -> 1100;
1119 -> 1093;
1119 -> 1099;
1120 -> 1104;
1121 -> 1104;
1121 -> 1119;
1121 -> 1120;
1122 -> 1104;
1122 -> 1119;
1122 -> 1117;
1122 -> 1120;
1123 -> 1096;
1123 -> 1058;
1124 -> 904;
1124 -> 1058;
1125 -> 1096;
1125 -> 1058;
1126 -> 1124;
1126 -> 1125;
1126 -> 1117;
1126 -> 1119;
1126 -> 1115;
1126 -> 1116;
1126 -> 1104;
1126 -> 1101;
1126 -> 1102;
1126 -> 1103;
1126 -> 1058;
1127 -> 1058;
1128 -> 1127;
1129 -> 1126;
1129 -> 1128;
1129 -> 1127;
1130 -> 1126;
1130 -> 1127;
1131 -> 1126;
1131 -> 1127;
1132 -> 1126;
1132 -> 1127;
1133 -> 1126;
1133 -> 1132;
1134 -> 1127;
1135 -> 1126;
1135 -> 1134;
1135 -> 1127;
1136 -> 1135;
1137 -> 1126;
1137 -> 1136;
1138 -> 1127;
1139 -> 1126;
1139 -> 1138;
1139 -> 1127;
1140 -> 1127;
1141 -> 1126;
1141 -> 1140;
1141 -> 1127;
1142 -> 1126;
1142 -> 1127;
1143 -> 1126;
1144 -> 1126;
1144 -> 1127;
1145 -> 1058;
1146 -> 1126;
1146 -> 1145;
1146 -> 1058;
1147 -> 904;
1147 -> 1126;
1147 -> 1146;
1148 -> 1096;
1148 -> 1058;
1149 -> 915;
1149 -> 1058;
1150 -> 1058;
1151 -> 1148;
1151 -> 1150;
1152 -> 1149;
1152 -> 1150;
1153 -> 1150;
1154 -> 1153;
1154 -> 1152;
1154 -> 1150;
1155 -> 1150;
1156 -> 1150;
1157 -> 1155;
1157 -> 1156;
1157 -> 1150;
1158 -> 1150;
1159 -> 1151;
1159 -> 1126;
1159 -> 1158;
1159 -> 1150;
1160 -> 1151;
1160 -> 1126;
1160 -> 1159;
1161 -> 1155;
1161 -> 1160;
1161 -> 1157;
1161 -> 1159;
1162 -> 1159;
1163 -> 1155;
1163 -> 1162;
1163 -> 1161;
1163 -> 1159;
1164 -> 1151;
1164 -> 1126;
1164 -> 1159;
1165 -> 1155;
1165 -> 1164;
1165 -> 1163;
1165 -> 1159;
1166 -> 1150;
1167 -> 1151;
1167 -> 1126;
1167 -> 1166;
1167 -> 1150;
1168 -> 1167;
1169 -> 1168;
1170 -> 1155;
1170 -> 1169;
1170 -> 1165;
1170 -> 1168;
1171 -> 1151;
1171 -> 1126;
1171 -> 1168;
1172 -> 1155;
1172 -> 1171;
1172 -> 1170;
1172 -> 1168;
1173 -> 1167;
1174 -> 1155;
1174 -> 1173;
1174 -> 1172;
1174 -> 1167;
1175 -> 1151;
1175 -> 1126;
1175 -> 1150;
1176 -> 1150;
1177 -> 1155;
1177 -> 1176;
1177 -> 1174;
1177 -> 1150;
1178 -> 1151;
1178 -> 1126;
1178 -> 1150;
1179 -> 1178;
1180 -> 1155;
1180 -> 1179;
1180 -> 1177;
1180 -> 1178;
1181 -> 1178;
1182 -> 1155;
1182 -> 1181;
1182 -> 1180;
1182 -> 1178;
1183 -> 1178;
1184 -> 1155;
1184 -> 1183;
1184 -> 1182;
1184 -> 1178;
1185 -> 1178;
1186 -> 1155;
1186 -> 1185;
1186 -> 1184;
1186 -> 1178;
1187 -> 1178;
1188 -> 1178;
1189 -> 1155;
1189 -> 1188;
1189 -> 1186;
1189 -> 1178;
1190 -> 1150;
1191 -> 1151;
1191 -> 1178;
1191 -> 1190;
1191 -> 1150;
1192 -> 1191;
1193 -> 1155;
1193 -> 1192;
1193 -> 1189;
1193 -> 1191;
1194 -> 1191;
1195 -> 1155;
1195 -> 1194;
1195 -> 1193;
1195 -> 1191;
1196 -> 1191;
1197 -> 1155;
1197 -> 1196;
1197 -> 1195;
1197 -> 1191;
1198 -> 1191;
1199 -> 1155;
1199 -> 1198;
1199 -> 1197;
1199 -> 1191;
1200 -> 1191;
1201 -> 1155;
1201 -> 1200;
1201 -> 1199;
1201 -> 1191;
1202 -> 1151;
1202 -> 1178;
1202 -> 1150;
1203 -> 1150;
1204 -> 1151;
1204 -> 1178;
1204 -> 1203;
1204 -> 1150;
1205 -> 1150;
1206 -> 1151;
1206 -> 1178;
1206 -> 1205;
1206 -> 1150;
1207 -> 1150;
1208 -> 1151;
1208 -> 1178;
1208 -> 1207;
1208 -> 1150;
1209 -> 1155;
1209 -> 1201;
1209 -> 1150;
1210 -> 1209;
1210 -> 1150;
1211 -> 1154;
1211 -> 1210;
1211 -> 1150;
1212 -> 947;
1212 -> 1211;
1212 -> 1094;
1212 -> 1058;
1213 -> 1147;
1213 -> 1058;
1214 -> 915;
1214 -> 1058;
1215 -> 1058;
1216 -> 1213;
1216 -> 1215;
1217 -> 1214;
1217 -> 1215;
1218 -> 1215;
1219 -> 1218;
1219 -> 1217;
1219 -> 1215;
1220 -> 1215;
1221 -> 1215;
1222 -> 1220;
1222 -> 1221;
1222 -> 1215;
1223 -> 1215;
1224 -> 1216;
1224 -> 1178;
1224 -> 1223;
1224 -> 1215;
1225 -> 1216;
1225 -> 1178;
1225 -> 1224;
1226 -> 1220;
1226 -> 1225;
1226 -> 1222;
1226 -> 1224;
1227 -> 1224;
1228 -> 1220;
1228 -> 1227;
1228 -> 1226;
1228 -> 1224;
1229 -> 1216;
1229 -> 1178;
1229 -> 1224;
1230 -> 1220;
1230 -> 1229;
1230 -> 1228;
1230 -> 1224;
1231 -> 1215;
1232 -> 1216;
1232 -> 1178;
1232 -> 1231;
1232 -> 1215;
1233 -> 1232;
1234 -> 1233;
1235 -> 1220;
1235 -> 1234;
1235 -> 1230;
1235 -> 1233;
1236 -> 1216;
1236 -> 1178;
1236 -> 1233;
1237 -> 1220;
1237 -> 1236;
1237 -> 1235;
1237 -> 1233;
1238 -> 1232;
1239 -> 1220;
1239 -> 1238;
1239 -> 1237;
1239 -> 1232;
1240 -> 1216;
1240 -> 1178;
1240 -> 1215;
1241 -> 1215;
1242 -> 1220;
1242 -> 1241;
1242 -> 1239;
1242 -> 1215;
1243 -> 1216;
1243 -> 1178;
1243 -> 1215;
1244 -> 1243;
1245 -> 1220;
1245 -> 1244;
1245 -> 1242;
1245 -> 1243;
1246 -> 1243;
1247 -> 1220;
1247 -> 1246;
1247 -> 1245;
1247 -> 1243;
1248 -> 1243;
1249 -> 1220;
1249 -> 1248;
1249 -> 1247;
1249 -> 1243;
1250 -> 1243;
1251 -> 1220;
1251 -> 1250;
1251 -> 1249;
1251 -> 1243;
1252 -> 1243;
1253 -> 1243;
1254 -> 1220;
1254 -> 1253;
1254 -> 1251;
1254 -> 1243;
1255 -> 1215;
1256 -> 1216;
1256 -> 1243;
1256 -> 1255;
1256 -> 1215;
1257 -> 1256;
1258 -> 1220;
1258 -> 1257;
1258 -> 1254;
1258 -> 1256;
1259 -> 1256;
1260 -> 1220;
1260 -> 1259;
1260 -> 1258;
1260 -> 1256;
1261 -> 1256;
1262 -> 1220;
1262 -> 1261;
1262 -> 1260;
1262 -> 1256;
1263 -> 1256;
1264 -> 1220;
1264 -> 1263;
1264 -> 1262;
1264 -> 1256;
1265 -> 1256;
1266 -> 1220;
1266 -> 1265;
1266 -> 1264;
1266 -> 1256;
1267 -> 1216;
1267 -> 1243;
1267 -> 1215;
1268 -> 1215;
1269 -> 1216;
1269 -> 1243;
1269 -> 1268;
1269 -> 1215;
1270 -> 1215;
1271 -> 1216;
1271 -> 1243;
1271 -> 1270;
1271 -> 1215;
1272 -> 1215;
1273 -> 1216;
1273 -> 1243;
1273 -> 1272;
1273 -> 1215;
1274 -> 1220;
1274 -> 1266;
1274 -> 1215;
1275 -> 1274;
1275 -> 1215;
1276 -> 1219;
1276 -> 1275;
1276 -> 1215;
1277 -> 1042;
1277 -> 1276;
1277 -> 1058;
1278 -> 903;
1279 -> 1058;
1279 -> 1278;
1279 -> 903;
1280 -> 947;
1280 -> 1212;
1280 -> 1279;
1281 -> 903;
1282 -> 947;
1282 -> 1281;
1282 -> 1280;
1282 -> 903;
1283 -> 952;
1283 -> 903;
1284 -> 1042;
1284 -> 903;
1288 -> 1286;
1288 -> 1285;
1289 -> 1287;
1289 -> 1285;
1290 -> 1285;
1291 -> 0;
1291 -> 903;
1292 -> 903;
1293 -> 903;
1294 -> 1283;
1294 -> 1293;
1295 -> 1284;
1295 -> 1293;
1296 -> 1291;
1296 -> 1293;
1297 -> 1292;
1297 -> 1293;
1298 -> 1292;
1298 -> 1293;
1299 -> 1293;
1300 -> 1297;
1300 -> 1299;
1300 -> 1293;
1301 -> 1300;
1301 -> 1293;
1302 -> 0;
1304 -> 1302;
1304 -> 1303;
1305 -> 1303;
1307 -> 1306;
1309 -> 1308;
1311 -> 1310;
1312 -> 1305;
1313 -> 1305;
1313 -> 1303;
1314 -> 1304;
1314 -> 1305;
1314 -> 1303;
1315 -> 1303;
1316 -> 1293;
1317 -> 1316;
1317 -> 1298;
1317 -> 1293;
1318 -> 1294;
1318 -> 1293;
1319 -> 1295;
1319 -> 1293;
1320 -> 1296;
1320 -> 1293;
1321 -> 1318;
1321 -> 1293;
1322 -> 1319;
1322 -> 1293;
1323 -> 1317;
1323 -> 1293;
1324 -> 1293;
1325 -> 1321;
1325 -> 1324;
1326 -> 1322;
1326 -> 1324;
1327 -> 1323;
1327 -> 1324;
1328 -> 1301;
1328 -> 1324;
1329 -> 1325;
1329 -> 1324;
1330 -> 1325;
1330 -> 1318;
1330 -> 1324;
1331 -> 1326;
1331 -> 1324;
1332 -> 1326;
1332 -> 1319;
1332 -> 1324;
1333 -> 1324;
1334 -> 1329;
1334 -> 1333;
1335 -> 1330;
1335 -> 1333;
1336 -> 1331;
1336 -> 1333;
1337 -> 1332;
1337 -> 1333;
1338 -> 1328;
1338 -> 1333;
1339 -> 1334;
1339 -> 1333;
1340 -> 1335;
1340 -> 1333;
1341 -> 1336;
1341 -> 1333;
1342 -> 1337;
1342 -> 1333;
1343 -> 1333;
1344 -> 1339;
1344 -> 1343;
1345 -> 1340;
1345 -> 1343;
1346 -> 1341;
1346 -> 1343;
1347 -> 1342;
1347 -> 1343;
1348 -> 1338;
1348 -> 1343;
1349 -> 1343;
1350 -> 1345;
1350 -> 1349;
1350 -> 1343;
1351 -> 1343;
1352 -> 1347;
1352 -> 1351;
1352 -> 1343;
1353 -> 1350;
1353 -> 1352;
1353 -> 1343;
1354 -> 1343;
1355 -> 1354;
1355 -> 1353;
1355 -> 1343;
1356 -> 1343;
1357 -> 1356;
1357 -> 1345;
1357 -> 1343;
1358 -> 1357;
1359 -> 1353;
1359 -> 1355;
1359 -> 1358;
1359 -> 1357;
1360 -> 1359;
1360 -> 1356;
1360 -> 1358;
1360 -> 1353;
1360 -> 1357;
1361 -> 1343;
1362 -> 1361;
1362 -> 1347;
1362 -> 1343;
1363 -> 1362;
1364 -> 1353;
1364 -> 1355;
1364 -> 1360;
1364 -> 1363;
1364 -> 1362;
1365 -> 1364;
1365 -> 1363;
1365 -> 1361;
1365 -> 1353;
1365 -> 1362;
1366 -> 1343;
1367 -> 1366;
1367 -> 1345;
1367 -> 1343;
1368 -> 1367;
1369 -> 1368;
1369 -> 1347;
1369 -> 1367;
1370 -> 1369;
1371 -> 1353;
1371 -> 1355;
1371 -> 1360;
1371 -> 1365;
1371 -> 1370;
1371 -> 1369;
1372 -> 1344;
1372 -> 1369;
1373 -> 1346;
1373 -> 1369;
1374 -> 1369;
1375 -> 1372;
1375 -> 1374;
1376 -> 1370;
1376 -> 1374;
1377 -> 1373;
1377 -> 1374;
1378 -> 1370;
1378 -> 1374;
1379 -> 1348;
1379 -> 1374;
1380 -> 1375;
1380 -> 1318;
1380 -> 1376;
1380 -> 1374;
1381 -> 1377;
1381 -> 1319;
1381 -> 1378;
1381 -> 1374;
1382 -> 1379;
1382 -> 0;
1382 -> 1380;
1382 -> 1381;
1382 -> 1318;
1382 -> 1319;
1382 -> 1374;
1383 -> 1371;
1383 -> 1382;
1383 -> 1369;
1384 -> 1369;
1385 -> 1353;
1385 -> 1355;
1385 -> 1360;
1385 -> 1365;
1385 -> 1384;
1385 -> 1368;
1385 -> 1369;
1386 -> 1369;
1387 -> 1353;
1387 -> 1355;
1387 -> 1360;
1387 -> 1365;
1387 -> 1366;
1387 -> 1386;
1387 -> 1369;
1388 -> 1383;
1388 -> 1369;
1389 -> 1385;
1389 -> 1369;
1390 -> 1388;
1390 -> 1389;
1390 -> 1369;
1391 -> 1387;
1391 -> 1369;
1392 -> 1390;
1392 -> 1391;
1392 -> 1369;
1393 -> 1392;
1393 -> 1366;
1393 -> 1368;
1393 -> 1353;
1393 -> 1369;
1394 -> 1353;
1394 -> 1343;
1395 -> 1335;
1395 -> 1333;
1396 -> 1337;
1396 -> 1333;
1397 -> 1333;
1398 -> 1395;
1398 -> 1397;
1398 -> 1333;
1399 -> 1396;
1399 -> 1397;
1399 -> 1333;
1400 -> 1398;
1400 -> 1399;
1400 -> 1333;
1401 -> 1394;
1401 -> 1353;
1401 -> 1355;
1401 -> 1360;
1401 -> 1365;
1401 -> 1393;
1401 -> 1395;
1401 -> 1396;
1401 -> 1400;
1402 -> 1400;
1403 -> 1394;
1403 -> 1353;
1403 -> 1355;
1403 -> 1360;
1403 -> 1365;
1403 -> 1393;
1403 -> 1402;
1403 -> 1396;
1403 -> 1400;
1404 -> 1394;
1404 -> 1353;
1404 -> 1355;
1404 -> 1360;
1404 -> 1365;
1404 -> 1393;
1404 -> 1395;
1404 -> 1396;
1404 -> 1403;
1405 -> 1403;
1406 -> 1395;
1406 -> 1405;
1407 -> 1396;
1407 -> 1405;
1408 -> 1405;
1409 -> 0;
1409 -> 1405;
1410 -> 1406;
1410 -> 1405;
1411 -> 1407;
1411 -> 1405;
1412 -> 1405;
1413 -> 1409;
1413 -> 1412;
1414 -> 1410;
1414 -> 1412;
1415 -> 1411;
1415 -> 1412;
1416 -> 1408;
1416 -> 1412;
1417 -> 1413;
1417 -> 1416;
1417 -> 1412;
1418 -> 1414;
1418 -> 1416;
1418 -> 1412;
1419 -> 1415;
1419 -> 1416;
1419 -> 1412;
1420 -> 1333;
1421 -> 1406;
1421 -> 1420;
1421 -> 1333;
1422 -> 1333;
1423 -> 1407;
1423 -> 1422;
1423 -> 1333;
1424 -> 1408;
1424 -> 1417;
1424 -> 1418;
1424 -> 1419;
1424 -> 1324;
1425 -> 1424;
1426 -> 1425;
1427 -> 1326;
1427 -> 1319;
1427 -> 1382;
1427 -> 1424;
1427 -> 1425;
1428 -> 1327;
1428 -> 1427;
1428 -> 1316;
1428 -> 1425;
1429 -> 1320;
1429 -> 1426;
1429 -> 1293;
1430 -> 947;
1430 -> 1429;
1430 -> 1282;
1430 -> 903;
1431 -> 1042;
1431 -> 1277;
1431 -> 903;
1432 -> 952;
1432 -> 1035;
1432 -> 903;
1433 -> 947;
1433 -> 1430;
1433 -> 903;
1434 -> 763;
1435 -> 756;
1436 -> 757;
1436 -> 756;
1437 -> 760;
1437 -> 756;
1438 -> 756;
1439 -> 1436;
1439 -> 1438;
1440 -> 1437;
1440 -> 1438;
1441 -> 1440;
1441 -> 1438;
1442 -> 1441;
1442 -> 760;
1442 -> 1243;
1443 -> 1439;
1443 -> 1442;
1443 -> 1243;
1443 -> 1441;
1444 -> 1441;
1444 -> 1443;
1445 -> 1444;
1445 -> 1443;
1446 -> 756;
1447 -> 757;
1447 -> 756;
}