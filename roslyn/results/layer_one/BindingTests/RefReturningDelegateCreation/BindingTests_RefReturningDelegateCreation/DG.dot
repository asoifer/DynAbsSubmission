digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 710952"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 710953"];
3 [label="param BindingTests(this) 710954"];
4 [label="'C' 710955"];
5 [label="DefaultTypeName = 'C' 710956"];
6 [label="'M' 710957"];
7 [label="DefaultMethodName = 'M' 710958"];
8 [label="@'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 710959"];
9 [label="LINQ =\n        #region the string LINQ defines a complete LINQ API called List1<T> (for instance method) and List2<T> (for extension methods)\n @'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 710960"];
10 [label="param CompilingTestBase(this) 710961"];
11 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 710962"];
12 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 710963"];
13 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 710964"];
14 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 710965"];
15 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 710966"];
16 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 710967"];
17 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 710968"];
18 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 710969"];
19 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 710970"];
20 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 710971"];
21 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 710972"];
22 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 710973"];
23 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 710974"];
24 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 710975"];
25 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 710976"];
26 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 710977"];
27 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 710978"];
28 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 710979"];
29 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 710980"];
30 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 710981"];
31 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 710982"];
32 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 710983"];
33 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 710984"];
34 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 710985"];
35 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 710986"];
36 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 710987"];
37 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 710988"];
38 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 710989"];
39 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 710990"];
40 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 710991"];
41 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 710992"];
42 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 710993"];
43 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 710994"];
44 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 710995"];
45 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 710996"];
46 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 710997"];
47 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 710998"];
48 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 710999"];
49 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 711000"];
50 [label="LazyThreadSafetyMode.PublicationOnly 711001"];
51 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 711002"];
52 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 711003"];
53 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 711004"];
54 [label="LazyThreadSafetyMode.PublicationOnly 711005"];
55 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 711006"];
56 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 711007"];
57 [label="RuntimeUtilities.IsCoreClrRuntime 711008"];
58 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 711009"];
59 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 711010"];
60 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 711011"];
61 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 711012"];
62 [label="LazyThreadSafetyMode.PublicationOnly 711013"];
63 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 711014"];
64 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 711015"];
65 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 711016"];
66 [label="LazyThreadSafetyMode.PublicationOnly 711017"];
67 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 711018"];
68 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 711019"];
69 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 711020"];
70 [label="LazyThreadSafetyMode.PublicationOnly 711021"];
71 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 711022"];
72 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 711023"];
73 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 711024"];
74 [label="LazyThreadSafetyMode.PublicationOnly 711025"];
75 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711026"];
76 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711027"];
77 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 711028"];
78 [label="LazyThreadSafetyMode.PublicationOnly 711029"];
79 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711030"];
80 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711031"];
81 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 711032"];
82 [label="LazyThreadSafetyMode.PublicationOnly 711033"];
83 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711034"];
84 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711035"];
85 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 711036"];
86 [label="LazyThreadSafetyMode.PublicationOnly 711037"];
87 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711038"];
88 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711039"];
89 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 711040"];
90 [label="LazyThreadSafetyMode.PublicationOnly 711041"];
91 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711042"];
92 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711043"];
93 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 711044"];
94 [label="LazyThreadSafetyMode.PublicationOnly 711045"];
95 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711046"];
96 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711047"];
97 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 711048"];
98 [label="LazyThreadSafetyMode.PublicationOnly 711049"];
99 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711050"];
100 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711051"];
101 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 711052"];
102 [label="LazyThreadSafetyMode.PublicationOnly 711053"];
103 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 711054"];
104 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 711055"];
105 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 711056"];
106 [label="LazyThreadSafetyMode.PublicationOnly 711057"];
107 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 711058"];
108 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 711059"];
109 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 711060"];
110 [label="LazyThreadSafetyMode.PublicationOnly 711061"];
111 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711062"];
112 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711063"];
113 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 711064"];
114 [label="LazyThreadSafetyMode.PublicationOnly 711065"];
115 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711066"];
116 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711067"];
117 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 711068"];
118 [label="LazyThreadSafetyMode.PublicationOnly 711069"];
119 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711070"];
120 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711071"];
121 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 711072"];
122 [label="LazyThreadSafetyMode.PublicationOnly 711073"];
123 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711074"];
124 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711075"];
125 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 711076"];
126 [label="LazyThreadSafetyMode.PublicationOnly 711077"];
127 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 711078"];
128 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 711079"];
129 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 711080"];
130 [label="LazyThreadSafetyMode.PublicationOnly 711081"];
131 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711082"];
132 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711083"];
133 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 711084"];
134 [label="LazyThreadSafetyMode.PublicationOnly 711085"];
135 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711086"];
136 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711087"];
137 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 711088"];
138 [label="LazyThreadSafetyMode.PublicationOnly 711089"];
139 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711090"];
140 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711091"];
141 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 711092"];
142 [label="LazyThreadSafetyMode.PublicationOnly 711093"];
143 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711094"];
144 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711095"];
145 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 711096"];
146 [label="LazyThreadSafetyMode.PublicationOnly 711097"];
147 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711098"];
148 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711099"];
149 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 711100"];
150 [label="LazyThreadSafetyMode.PublicationOnly 711101"];
151 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711102"];
152 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711103"];
153 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 711104"];
154 [label="LazyThreadSafetyMode.PublicationOnly 711105"];
155 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711106"];
156 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711107"];
157 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 711108"];
158 [label="LazyThreadSafetyMode.PublicationOnly 711109"];
159 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711110"];
160 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711111"];
161 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 711112"];
162 [label="LazyThreadSafetyMode.PublicationOnly 711113"];
163 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711114"];
164 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711115"];
165 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 711116"];
166 [label="LazyThreadSafetyMode.PublicationOnly 711117"];
167 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711118"];
168 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711119"];
169 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 711120"];
170 [label="LazyThreadSafetyMode.PublicationOnly 711121"];
171 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711122"];
172 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711123"];
173 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 711124"];
174 [label="LazyThreadSafetyMode.PublicationOnly 711125"];
175 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711126"];
176 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711127"];
177 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 711128"];
178 [label="LazyThreadSafetyMode.PublicationOnly 711129"];
179 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711130"];
180 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 711131"];
181 [label="@'R:\\Invalid.dll' 711132"];
182 [label="fullPath: @'R:\\Invalid.dll' 711133"];
183 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 711134"];
184 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 711135"];
185 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 711136"];
186 [label="MscorlibRef_v4_0_30316_17626 711137"];
187 [label="Net451.mscorlib 711138"];
188 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 711139"];
189 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 711140"];
190 [label="'/*<bind>*/' 711141"];
191 [label="StartString = '/*<bind>*/' 711142"];
192 [label="'/*</bind>*/' 711143"];
193 [label="EndString = '/*</bind>*/' 711144"];
194 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 711145"];
195 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 711146"];
196 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 711147"];
197 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 711148"];
198 [label="param CSharpTestBase(this) 711149"];
199 [label="param CommonTestBase(this) 711150"];
200 [label="param TestBase(this) 711151"];
201 [label="_temp 711152"];
202 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 711153"];
203 [label="param RefReturningDelegateCreation(this) 711154"];
204 [label="var text = @'\ndelegate ref int D();\n\nclass C\n{\n    int field = 0;\n\n    ref int M()\n    {\n        return ref field;\n    }\n\n    void Test()\n    {\n        new D(M)();\n    }\n}\n'; 711155"];
205 [label="CreateCompilationWithMscorlib45(text).VerifyDiagnostics(); 711156"];
206 [label="text 711157"];
207 [label="param operator(string source) 711158"];
208 [label="source 711159"];
209 [label="new CSharpTestSource(source) 711160"];
210 [label="param CSharpTestSource(object value) 711161"];
211 [label="param CSharpTestSource(this) 711162"];
212 [label="Value 711163"];
213 [label="CreateCompilationWithMscorlib45(text).VerifyDiagnostics(); 711164"];
214 [label="CreateCompilationWithMscorlib45(text).VerifyDiagnostics(); 711165"];
215 [label="CreateCompilationWithMscorlib45(text) 711166"];
216 [label="param CreateCompilationWithMscorlib45(CSharpTestSource source) 711167"];
217 [label="param CreateCompilationWithMscorlib45(IEnumerable<MetadataReference> references = null) 711168"];
218 [label="param CreateCompilationWithMscorlib45(CSharpCompilationOptions options = null) 711169"];
219 [label="param CreateCompilationWithMscorlib45(CSharpParseOptions parseOptions = null) 711170"];
220 [label="param CreateCompilationWithMscorlib45(string assemblyName = '') 711171"];
221 [label="param CreateCompilationWithMscorlib45(string sourceFileName = '') 711172"];
222 [label="param CreateCompilationWithMscorlib45(bool skipUsesIsNullable = false) 711173"];
223 [label="source 711174"];
224 [label="references 711175"];
225 [label="options 711176"];
226 [label="parseOptions 711177"];
227 [label="TargetFramework.Mscorlib45 711178"];
228 [label="assemblyName 711179"];
229 [label="sourceFileName 711180"];
230 [label="skipUsesIsNullable 711181"];
231 [label="CreateCompilation(source, references, options, parseOptions, TargetFramework.Mscorlib45, assemblyName, sourceFileName, skipUsesIsNullable) 711182"];
232 [label="param CreateCompilation(CSharpTestSource source) 711183"];
233 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 711184"];
234 [label="param CreateCompilation(CSharpCompilationOptions options = null) 711185"];
235 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 711186"];
236 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 711187"];
237 [label="param CreateCompilation(string assemblyName = '') 711188"];
238 [label="param CreateCompilation(string sourceFileName = '') 711189"];
239 [label="param CreateCompilation(bool skipUsesIsNullable = false) 711190"];
240 [label="source 711191"];
241 [label="targetFramework 711192"];
242 [label="references 711193"];
243 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 711194"];
244 [label="param GetReferences(TargetFramework tf) 711195"];
245 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 711196"];
246 [label="var references = GetReferences(tf); 711197"];
247 [label="GetReferences(tf) 711198"];
248 [label="param GetReferences(TargetFramework targetFramework) 711199"];
249 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 711200"];
250 [label="Mscorlib45References 711201"];
251 [label="Net451.mscorlib 711202"];
252 [label="ImmutableArray.Create<MetadataReference>(Net451.mscorlib) 711203"];
253 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 711204"];
254 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 711205"];
255 [label="return references; 711206"];
256 [label="options 711207"];
257 [label="parseOptions 711208"];
258 [label="assemblyName 711209"];
259 [label="sourceFileName 711210"];
260 [label="skipUsesIsNullable 711211"];
261 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 711212"];
262 [label="param CreateEmptyCompilation(CSharpTestSource source) 711213"];
263 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 711214"];
264 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 711215"];
265 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 711216"];
266 [label="param CreateEmptyCompilation(string assemblyName = '') 711217"];
267 [label="param CreateEmptyCompilation(string sourceFileName = '') 711218"];
268 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 711219"];
269 [label="source 711220"];
270 [label="references 711221"];
271 [label="options 711222"];
272 [label="parseOptions 711223"];
273 [label="assemblyName 711224"];
274 [label="sourceFileName 711225"];
275 [label="skipUsesIsNullable 711226"];
276 [label="null 711227"];
277 [label="experimentalFeature: null 711228"];
278 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 711229"];
279 [label="param CreateCompilationCore(CSharpTestSource source) 711230"];
280 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 711231"];
281 [label="param CreateCompilationCore(CSharpCompilationOptions options) 711232"];
282 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 711233"];
283 [label="param CreateCompilationCore(string assemblyName) 711234"];
284 [label="param CreateCompilationCore(string sourceFileName) 711235"];
285 [label="param CreateCompilationCore(bool skipUsesIsNullable) 711236"];
286 [label="param CreateCompilationCore(MessageID? experimentalFeature) 711237"];
287 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 711238"];
288 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 711239"];
289 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 711240"];
290 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 711241"];
291 [label="param GetSyntaxTrees(string sourceFileName = '') 711242"];
292 [label="param GetSyntaxTrees(this) 711243"];
293 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 711244"];
294 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 711245"];
295 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 711246"];
296 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 711247"];
297 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 711248"];
298 [label="param Parse(string text) 711249"];
299 [label="param Parse(string filename = '') 711250"];
300 [label="param Parse(CSharpParseOptions options = null) 711251"];
301 [label="param Parse(Encoding encoding = null) 711252"];
302 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 711253"];
303 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 711254"];
304 [label="kind: SourceCodeKind.Regular 711255"];
305 [label="documentationMode: DocumentationMode.Parse 711256"];
306 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 711257"];
307 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 711258"];
308 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 711259"];
309 [label="SourceCodeKind.Script 711260"];
310 [label="Regular.WithKind(SourceCodeKind.Script) 711261"];
311 [label="Script = Regular.WithKind(SourceCodeKind.Script) 711262"];
312 [label="LanguageVersion.CSharp6 711263"];
313 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 711264"];
314 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 711265"];
315 [label="LanguageVersion.CSharp7 711266"];
316 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 711267"];
317 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 711268"];
318 [label="LanguageVersion.CSharp7_1 711269"];
319 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 711270"];
320 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 711271"];
321 [label="LanguageVersion.CSharp7_2 711272"];
322 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 711273"];
323 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 711274"];
324 [label="LanguageVersion.CSharp7_3 711275"];
325 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 711276"];
326 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 711277"];
327 [label="LanguageVersion.Default 711278"];
328 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 711279"];
329 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 711280"];
330 [label="LanguageVersion.Preview 711281"];
331 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 711282"];
332 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 711283"];
333 [label="LanguageVersion.CSharp8 711284"];
334 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 711285"];
335 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 711286"];
336 [label="LanguageVersion.CSharp9 711287"];
337 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 711288"];
338 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 711289"];
339 [label="DocumentationMode.Diagnose 711290"];
340 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 711291"];
341 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 711292"];
342 [label="Regular 711293"];
343 [label="'UseLegacyStrongNameProvider' 711294"];
344 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 711295"];
345 [label="param WithFeature(this CSharpParseOptions options) 711296"];
346 [label="param WithFeature(string feature) 711297"];
347 [label="param WithFeature(string value = 'true') 711298"];
348 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 711299"];
349 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 711300"];
350 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 711301"];
351 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 711302"];
352 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 711303"];
353 [label="new[] { new KeyValuePair<string, string>(feature, value) } 711304"];
354 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 711305"];
355 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 711306"];
356 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 711307"];
357 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 711308"];
358 [label="1 711309"];
359 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 711310"];
360 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 711311"];
361 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 711312"];
362 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 711313"];
363 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 711314"];
364 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 711315"];
365 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 711316"];
366 [label="LanguageVersion.CSharp8 711317"];
367 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 711318"];
368 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 711319"];
369 [label="RegularWithExtendedPartialMethods = RegularPreview 711320"];
370 [label="new SmallDictionary<string, string> { } 711321"];
371 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 711322"];
372 [label="kind: SourceCodeKind.Regular 711323"];
373 [label="documentationMode: DocumentationMode.None 711324"];
374 [label="languageVersion: LanguageVersion.Preview 711325"];
375 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 711326"];
376 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 711327"];
377 [label="s_experimentalFeatures 711328"];
378 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 711329"];
379 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 711330"];
380 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 711331"];
381 [label="'testV7SwitchBinder' 711332"];
382 [label="'true' 711333"];
383 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 711334"];
384 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 711335"];
385 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 711336"];
386 [label="RegularWithoutRecursivePatterns = Regular7_3 711337"];
387 [label="RegularWithRecursivePatterns = Regular8 711338"];
388 [label="RegularWithoutPatternCombinators = Regular8 711339"];
389 [label="RegularWithPatternCombinators = RegularPreview 711340"];
390 [label="OutputKind.DynamicallyLinkedLibrary 711341"];
391 [label="OptimizationLevel.Release 711342"];
392 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 711343"];
393 [label="param CreateTestOptions(OutputKind outputKind) 711344"];
394 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 711345"];
395 [label="param CreateTestOptions(bool allowUnsafe = false) 711346"];
396 [label="outputKind 711347"];
397 [label="optimizationLevel: optimizationLevel 711348"];
398 [label="warningLevel: Diagnostic.MaxWarningLevel 711349"];
399 [label="allowUnsafe: allowUnsafe 711350"];
400 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 711351"];
401 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 711352"];
402 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 711353"];
403 [label="OutputKind.ConsoleApplication 711354"];
404 [label="OptimizationLevel.Release 711355"];
405 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 711356"];
406 [label="param CreateTestOptions(OutputKind outputKind) 711357"];
407 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 711358"];
408 [label="param CreateTestOptions(bool allowUnsafe = false) 711359"];
409 [label="outputKind 711360"];
410 [label="optimizationLevel: optimizationLevel 711361"];
411 [label="warningLevel: Diagnostic.MaxWarningLevel 711362"];
412 [label="allowUnsafe: allowUnsafe 711363"];
413 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 711364"];
414 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 711365"];
415 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 711366"];
416 [label="true 711367"];
417 [label="ReleaseDll.WithDebugPlusMode(true) 711368"];
418 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 711369"];
419 [label="true 711370"];
420 [label="ReleaseExe.WithDebugPlusMode(true) 711371"];
421 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 711372"];
422 [label="OutputKind.DynamicallyLinkedLibrary 711373"];
423 [label="OptimizationLevel.Debug 711374"];
424 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 711375"];
425 [label="param CreateTestOptions(OutputKind outputKind) 711376"];
426 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 711377"];
427 [label="param CreateTestOptions(bool allowUnsafe = false) 711378"];
428 [label="outputKind 711379"];
429 [label="optimizationLevel: optimizationLevel 711380"];
430 [label="warningLevel: Diagnostic.MaxWarningLevel 711381"];
431 [label="allowUnsafe: allowUnsafe 711382"];
432 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 711383"];
433 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 711384"];
434 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 711385"];
435 [label="OutputKind.ConsoleApplication 711386"];
436 [label="OptimizationLevel.Debug 711387"];
437 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 711388"];
438 [label="param CreateTestOptions(OutputKind outputKind) 711389"];
439 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 711390"];
440 [label="param CreateTestOptions(bool allowUnsafe = false) 711391"];
441 [label="outputKind 711392"];
442 [label="optimizationLevel: optimizationLevel 711393"];
443 [label="warningLevel: Diagnostic.MaxWarningLevel 711394"];
444 [label="allowUnsafe: allowUnsafe 711395"];
445 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 711396"];
446 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 711397"];
447 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 711398"];
448 [label="OutputKind.WindowsRuntimeMetadata 711399"];
449 [label="OptimizationLevel.Release 711400"];
450 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 711401"];
451 [label="param CreateTestOptions(OutputKind outputKind) 711402"];
452 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 711403"];
453 [label="param CreateTestOptions(bool allowUnsafe = false) 711404"];
454 [label="outputKind 711405"];
455 [label="optimizationLevel: optimizationLevel 711406"];
456 [label="warningLevel: Diagnostic.MaxWarningLevel 711407"];
457 [label="allowUnsafe: allowUnsafe 711408"];
458 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 711409"];
459 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 711410"];
460 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 711411"];
461 [label="OutputKind.WindowsRuntimeMetadata 711412"];
462 [label="OptimizationLevel.Debug 711413"];
463 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 711414"];
464 [label="param CreateTestOptions(OutputKind outputKind) 711415"];
465 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 711416"];
466 [label="param CreateTestOptions(bool allowUnsafe = false) 711417"];
467 [label="outputKind 711418"];
468 [label="optimizationLevel: optimizationLevel 711419"];
469 [label="warningLevel: Diagnostic.MaxWarningLevel 711420"];
470 [label="allowUnsafe: allowUnsafe 711421"];
471 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 711422"];
472 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 711423"];
473 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 711424"];
474 [label="OutputKind.NetModule 711425"];
475 [label="OptimizationLevel.Release 711426"];
476 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 711427"];
477 [label="param CreateTestOptions(OutputKind outputKind) 711428"];
478 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 711429"];
479 [label="param CreateTestOptions(bool allowUnsafe = false) 711430"];
480 [label="outputKind 711431"];
481 [label="optimizationLevel: optimizationLevel 711432"];
482 [label="warningLevel: Diagnostic.MaxWarningLevel 711433"];
483 [label="allowUnsafe: allowUnsafe 711434"];
484 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 711435"];
485 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 711436"];
486 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 711437"];
487 [label="OutputKind.NetModule 711438"];
488 [label="OptimizationLevel.Debug 711439"];
489 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 711440"];
490 [label="param CreateTestOptions(OutputKind outputKind) 711441"];
491 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 711442"];
492 [label="param CreateTestOptions(bool allowUnsafe = false) 711443"];
493 [label="outputKind 711444"];
494 [label="optimizationLevel: optimizationLevel 711445"];
495 [label="warningLevel: Diagnostic.MaxWarningLevel 711446"];
496 [label="allowUnsafe: allowUnsafe 711447"];
497 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 711448"];
498 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 711449"];
499 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 711450"];
500 [label="true 711451"];
501 [label="ReleaseDll.WithAllowUnsafe(true) 711452"];
502 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 711453"];
503 [label="true 711454"];
504 [label="ReleaseExe.WithAllowUnsafe(true) 711455"];
505 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 711456"];
506 [label="true 711457"];
507 [label="DebugDll.WithAllowUnsafe(true) 711458"];
508 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 711459"];
509 [label="true 711460"];
510 [label="DebugExe.WithAllowUnsafe(true) 711461"];
511 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 711462"];
512 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 711463"];
513 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 711464"];
514 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 711465"];
515 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 711466"];
516 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 711467"];
517 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 711468"];
518 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 711469"];
519 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 711470"];
520 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 711471"];
521 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 711472"];
522 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 711473"];
523 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 711474"];
524 [label="DebugInformationFormat.Pdb 711475"];
525 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 711476"];
526 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 711477"];
527 [label="options = TestOptions.Regular; 711478"];
528 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 711479"];
529 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 711480"];
530 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 711481"];
531 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 711482"];
532 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 711483"];
533 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 711484"];
534 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 711485"];
535 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 711486"];
536 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 711487"];
537 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 711488"];
538 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 711489"];
539 [label="param CheckSerializable(SyntaxTree tree) 711490"];
540 [label="var stream = new MemoryStream(); 711491"];
541 [label="var root = tree.GetRoot(); 711492"];
542 [label="var root = tree.GetRoot(); 711493"];
543 [label="root.SerializeTo(stream); 711494"];
544 [label="root.SerializeTo(stream); 711495"];
545 [label="root.SerializeTo(stream); 711496"];
546 [label="stream.Position = 0; 711497"];
547 [label="stream.Position 711498"];
548 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 711499"];
549 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 711500"];
550 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 711501"];
551 [label="return tree; 711502"];
552 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 711503"];
553 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 711504"];
554 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 711505"];
555 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 711506"];
556 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 711507"];
557 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 711508"];
558 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 711509"];
559 [label="hasTopLevelStatements 711510"];
560 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 711511"];
561 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 711512"];
562 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 711513"];
563 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 711514"];
564 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 711515"];
565 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 711516"];
566 [label="param ValidateIOperations(Func<Compilation> createCompilation) 711517"];
567 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 711518"];
568 [label="return; 711519"];
569 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 711520"];
570 [label="var compilation = createCompilationLambda(); 711521"];
571 [label="var compilation = createCompilationLambda(); 711522"];
572 [label="return Guid.NewGuid().ToString('D'); 711523"];
573 [label="var compilation = createCompilationLambda(); 711524"];
574 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 711525"];
575 [label="IsNullableEnabled(compilation) 711526"];
576 [label="param IsNullableEnabled(CSharpCompilation compilation) 711527"];
577 [label="var trees = compilation.SyntaxTrees; 711528"];
578 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 711529"];
579 [label="var options = (CSharpParseOptions)trees[0].Options; 711530"];
580 [label="var options = (CSharpParseOptions)trees[0].Options; 711531"];
581 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 711532"];
582 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 711533"];
583 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 711534"];
584 [label="return compilation; 711535"];
585 [label="CreateCompilationWithMscorlib45(text).VerifyDiagnostics() 711536"];
586 [label="param VerifyDiagnostics(this TCompilation c) 711537"];
587 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 711538"];
588 [label="var diagnostics = c.GetDiagnostics(); 711539"];
589 [label="null 711540"];
590 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Empty 711541"];
591 [label="ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty 711542"];
592 [label="ImmutableArray<AliasAndExternAliasDirective>.Empty 711543"];
593 [label="null 711544"];
594 [label="new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 711545"];
595 [label="param Imports(CSharpCompilation compilation) 711546"];
596 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 711547"];
597 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 711548"];
598 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 711549"];
599 [label="param Imports(DiagnosticBag diagnostics) 711550"];
600 [label="param Imports(this) 711551"];
601 [label="_compilation 711552"];
602 [label="_diagnostics 711553"];
603 [label="UsingAliases 711554"];
604 [label="Debug.Assert(usingAliases != null); 711555"];
605 [label="Debug.Assert(usingAliases != null); 711556"];
606 [label="Debug.Assert(!usings.IsDefault); 711557"];
607 [label="Debug.Assert(!externs.IsDefault); 711558"];
608 [label="_compilation 711559"];
609 [label="this.UsingAliases 711560"];
610 [label="this.Usings 711561"];
611 [label="_diagnostics 711562"];
612 [label="this.ExternAliases 711563"];
613 [label="Empty = new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 711564"];
614 [label="var diagnostics = c.GetDiagnostics(); 711565"];
615 [label="param FromGlobalUsings(CSharpCompilation compilation) 711566"];
616 [label="var usings = compilation.Options.Usings; 711567"];
617 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 711568"];
618 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 711569"];
619 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 711570"];
620 [label="return Empty; 711571"];
621 [label="var diagnostics = c.GetDiagnostics(); 711572"];
622 [label="param Complete(CancellationToken cancellationToken) 711573"];
623 [label="param Complete(this) 711574"];
624 [label="while (true)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                var incompletePart = _state.NextIncompletePart;\n                switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                }\n\n                _state.SpinWaitComplete(incompletePart, cancellationToken);\n            } 711575"];
625 [label="cancellationToken.ThrowIfCancellationRequested(); 711576"];
626 [label="var incompletePart = _state.NextIncompletePart; 711577"];
627 [label="switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                } 711578"];
628 [label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 711579"];
629 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 711580"];
630 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 711581"];
631 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 711582"];
632 [label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            } 711583"];
633 [label="Validate() 711584"];
634 [label="param Validate(this) 711585"];
635 [label="if (this == Empty)\n            {\n                return;\n            } 711586"];
636 [label="return; 711587"];
637 [label="Validate(); 711588"];
638 [label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 711589"];
639 [label="return; 711590"];
640 [label="param Includes(this BinderFlags self) 711591"];
641 [label="param Includes(BinderFlags other) 711592"];
642 [label="return (self & other) == other; 711593"];
643 [label="var diagnostics = c.GetDiagnostics(); 711594"];
644 [label="0 711595"];
645 [label="ExternalScope = 0 711596"];
646 [label="1 711597"];
647 [label="TopLevelScope = 1 711598"];
648 [label="2 711599"];
649 [label="ValueKindInsignificantBits = 2 711600"];
650 [label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 << ValueKindInsignificantBits) - 1)) 711601"];
651 [label="property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 711602"];
652 [label="s_isIndexedPropertyWithNonOptionalArguments = property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 711603"];
653 [label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 711604"];
654 [label="memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType 711605"];
655 [label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 711606"];
656 [label="miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 711607"];
657 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 711608"];
658 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 711609"];
659 [label="s_propertyGroupFormat =\n            new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 711610"];
660 [label="10 711611"];
661 [label="MaxParameterListsForErrorRecovery = 10 711612"];
662 [label="'<>h__TransparentIdentifier' 711613"];
663 [label="transparentIdentifierPrefix = '<>h__TransparentIdentifier' 711614"];
664 [label="s => (MethodSymbol)s 711615"];
665 [label="s_toMethodSymbolFunc = s => (MethodSymbol)s 711616"];
666 [label="s => (PropertySymbol)s 711617"];
667 [label="s_toPropertySymbolFunc = s => (PropertySymbol)s 711618"];
668 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 711619"];
669 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 711620"];
670 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 711621"];
671 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 711622"];
672 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 711623"];
673 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 711624"];
674 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 711625"];
675 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 711626"];
676 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 711627"];
677 [label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 711628"];
678 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 711629"];
679 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 711630"];
680 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 711631"];
681 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 711632"];
682 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 711633"];
683 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 711634"];
684 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 711635"];
685 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 711636"];
686 [label="param GetWellKnownTypeMember(WellKnownMember member) 711637"];
687 [label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 711638"];
688 [label="param GetWellKnownTypeMember(Location location = null) 711639"];
689 [label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 711640"];
690 [label="param GetWellKnownTypeMember(bool isOptional = false) 711641"];
691 [label="Debug.Assert((syntax != null) ^ (location != null)); 711642"];
692 [label="Debug.Assert((syntax != null) ^ (location != null)); 711643"];
693 [label="Debug.Assert((syntax != null) ^ (location != null)); 711644"];
694 [label="Debug.Assert((syntax != null) ^ (location != null)); 711645"];
695 [label="DiagnosticInfo useSiteDiagnostic; 711646"];
696 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 711647"];
697 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 711648"];
698 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 711649"];
699 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 711650"];
700 [label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 711651"];
701 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 711652"];
702 [label="param GetWellKnownTypeMember(WellKnownMember member) 711653"];
703 [label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 711654"];
704 [label="param GetWellKnownTypeMember(bool isOptional = false) 711655"];
705 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 711656"];
706 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 711657"];
707 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 711658"];
708 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 711659"];
709 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 711660"];
710 [label="Debug.Assert(symbol is object); 711661"];
711 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 711662"];
712 [label="isInternal = false; 711663"];
713 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 711664"];
714 [label="symbol = symbol.ContainingType; 711665"];
715 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 711666"];
716 [label="return true; 711667"];
717 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 711668"];
718 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 711669"];
719 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 711670"];
720 [label="Debug.Assert(symbol is object); 711671"];
721 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 711672"];
722 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 711673"];
723 [label="symbol = symbol.ContainingType; 711674"];
724 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 711675"];
725 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 711676"];
726 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 711677"];
727 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 711678"];
728 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 711679"];
729 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 711680"];
730 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 711681"];
731 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 711682"];
732 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 711683"];
733 [label="Debug.Assert(symbol is object); 711684"];
734 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 711685"];
735 [label="isInternal = false; 711686"];
736 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 711687"];
737 [label="symbol = symbol.ContainingType; 711688"];
738 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 711689"];
739 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 711690"];
740 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 711691"];
741 [label="Debug.Assert(symbol is object); 711692"];
742 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 711693"];
743 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 711694"];
744 [label="symbol = symbol.ContainingType; 711695"];
745 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 711696"];
746 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 711697"];
747 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 711698"];
748 [label="return memberSymbol; 711699"];
749 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 711700"];
750 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 711701"];
751 [label="return memberSymbol; 711702"];
752 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 711703"];
753 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 711704"];
754 [label="Debug.Assert(symbol is object); 711705"];
755 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 711706"];
756 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 711707"];
757 [label="symbol = symbol.ContainingType; 711708"];
758 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 711709"];
759 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 711710"];
760 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 711711"];
761 [label="Debug.Assert(symbol is object); 711712"];
762 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 711713"];
763 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 711714"];
764 [label="symbol = symbol.ContainingType; 711715"];
765 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 711716"];
766 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 711717"];
767 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 711718"];
768 [label="return memberSymbol; 711719"];
769 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 711720"];
770 [label="return memberSymbol; 711721"];
771 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 711722"];
772 [label="return memberSymbol; 711723"];
773 [label="return memberSymbol; 711724"];
774 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 711725"];
775 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 711726"];
776 [label="Debug.Assert(symbol is object); 711727"];
777 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 711728"];
778 [label="isInternal = false; 711729"];
779 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 711730"];
780 [label="symbol = symbol.ContainingType; 711731"];
781 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 711732"];
782 [label="return true; 711733"];
783 [label="var diagnostics = c.GetDiagnostics(); 711734"];
784 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 711735"];
785 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 711736"];
786 [label="Debug.Assert(symbol is object); 711737"];
787 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 711738"];
788 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 711739"];
789 [label="symbol = symbol.ContainingType; 711740"];
790 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 711741"];
791 [label="param GetBinder(SyntaxNode node) 711742"];
792 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 711743"];
793 [label="param GetBinder(Symbol memberOpt = null) 711744"];
794 [label="param GetBinder(this) 711745"];
795 [label="int position = node.SpanStart; 711746"];
796 [label="InScript 711747"];
797 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 711748"];
798 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 711749"];
799 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 711750"];
800 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 711751"];
801 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 711752"];
802 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 711753"];
803 [label="node = node.Parent; 711754"];
804 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 711755"];
805 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 711756"];
806 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 711757"];
807 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 711758"];
808 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 711759"];
809 [label="param GetBinder(SyntaxNode node) 711760"];
810 [label="param GetBinder(int position) 711761"];
811 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 711762"];
812 [label="param GetBinder(Symbol memberOpt = null) 711763"];
813 [label="param GetBinder(this) 711764"];
814 [label="Debug.Assert(node != null); 711765"];
815 [label="Debug.Assert(node != null); 711766"];
816 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 711767"];
817 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 711768"];
818 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 711769"];
819 [label="param BinderFactoryVisitor(BinderFactory factory) 711770"];
820 [label="param BinderFactoryVisitor(this) 711771"];
821 [label="param BinderFactoryVisitor(this) 711772"];
822 [label="_position 711773"];
823 [label="_memberDeclarationOpt 711774"];
824 [label="_memberOpt 711775"];
825 [label="_factory 711776"];
826 [label="_factory 711777"];
827 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 711778"];
828 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 711779"];
829 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 711780"];
830 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 711781"];
831 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 711782"];
832 [label="param Initialize(int position) 711783"];
833 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 711784"];
834 [label="param Initialize(Symbol memberOpt) 711785"];
835 [label="param Initialize(this) 711786"];
836 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 711787"];
837 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 711788"];
838 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 711789"];
839 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 711790"];
840 [label="_position 711791"];
841 [label="_memberDeclarationOpt 711792"];
842 [label="_memberOpt 711793"];
843 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 711794"];
844 [label="Binder result = visitor.Visit(node); 711795"];
845 [label="visitor.Visit(node) 711796"];
846 [label="param Visit(SyntaxNode node) 711797"];
847 [label="param Visit(this) 711798"];
848 [label="return VisitCore(node); 711799"];
849 [label="VisitCore(node) 711800"];
850 [label="param VisitCore(SyntaxNode node) 711801"];
851 [label="param VisitCore(this) 711802"];
852 [label="return ((CSharpSyntaxNode)node).Accept(this); 711803"];
853 [label="return ((CSharpSyntaxNode)node).Accept(this); 711804"];
854 [label="return ((CSharpSyntaxNode)node).Accept(this); 711805"];
855 [label="param VisitDelegateDeclaration(DelegateDeclarationSyntax parent) 711806"];
856 [label="param VisitDelegateDeclaration(this) 711807"];
857 [label="if (!LookupPosition.IsInDelegateDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 711808"];
858 [label="if (!LookupPosition.IsInDelegateDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 711809"];
859 [label="if (!LookupPosition.IsInDelegateDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 711810"];
860 [label="var key = CreateBinderCacheKey(parent, usage: NodeUsage.Normal); 711811"];
861 [label="var key = CreateBinderCacheKey(parent, usage: NodeUsage.Normal); 711812"];
862 [label="CreateBinderCacheKey(parent, usage: NodeUsage.Normal) 711813"];
863 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 711814"];
864 [label="param CreateBinderCacheKey(NodeUsage usage) 711815"];
865 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 711816"];
866 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 711817"];
867 [label="return new BinderCacheKey(node, usage); 711818"];
868 [label="return new BinderCacheKey(node, usage); 711819"];
869 [label="return new BinderCacheKey(node, usage); 711820"];
870 [label="new BinderCacheKey(node, usage) 711821"];
871 [label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 711822"];
872 [label="param BinderCacheKey(NodeUsage usage) 711823"];
873 [label="param BinderCacheKey(this) 711824"];
874 [label="this.syntaxNode 711825"];
875 [label="this.usage 711826"];
876 [label="var key = CreateBinderCacheKey(parent, usage: NodeUsage.Normal); 711827"];
877 [label="Binder resultBinder; 711828"];
878 [label="binderCache 711829"];
879 [label="get\n                {\n                    return _factory._binderCache;\n                } 711830"];
880 [label="return _factory._binderCache; 711831"];
881 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 711832"];
882 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 711833"];
883 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 711834"];
884 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 711835"];
885 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    Binder outer = VisitCore(parent.Parent); // a binder for the body of the enclosing type or namespace\n                    var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                    // NOTE: Members of the delegate type are in scope in the entire delegate declaration syntax.\n                    // NOTE: Hence we can assume that we are in body of the delegate type and explicitly insert the InContainerBinder in the binder chain.\n                    resultBinder = new InContainerBinder(container, outer);\n\n                    if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 711836"];
886 [label="param GetHashCode(this) 711837"];
887 [label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 711838"];
888 [label="Binder outer = VisitCore(parent.Parent); 711839"];
889 [label="VisitCore(parent.Parent) 711840"];
890 [label="param VisitCore(SyntaxNode node) 711841"];
891 [label="param VisitCompilationUnit(CompilationUnitSyntax parent) 711842"];
892 [label="param VisitCompilationUnit(this) 711843"];
893 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 711844"];
894 [label="IsInUsing(parent) 711845"];
895 [label="param IsInUsing(CSharpSyntaxNode containingNode) 711846"];
896 [label="param IsInUsing(this) 711847"];
897 [label="TextSpan containingSpan = containingNode.Span; 711848"];
898 [label="SyntaxToken token; 711849"];
899 [label="token 711850"];
900 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 711851"];
901 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 711852"];
902 [label="token = containingNode.FindToken(_position); 711853"];
903 [label="token = containingNode.FindToken(_position); 711854"];
904 [label="var node = token.Parent; 711855"];
905 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 711856"];
906 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 711857"];
907 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 711858"];
908 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 711859"];
909 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 711860"];
910 [label="node = node.Parent; 711861"];
911 [label="return false; 711862"];
912 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 711863"];
913 [label="InScript 711864"];
914 [label="get\n                {\n                    return _factory.InScript;\n                } 711865"];
915 [label="_factory.InScript 711866"];
916 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 711867"];
917 [label="return _factory.InScript; 711868"];
918 [label="VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript) 711869"];
919 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 711870"];
920 [label="param VisitCompilationUnit(bool inUsing) 711871"];
921 [label="param VisitCompilationUnit(bool inScript) 711872"];
922 [label="param VisitCompilationUnit(this) 711873"];
923 [label="syntaxTree 711874"];
924 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 711875"];
925 [label="return _factory._syntaxTree; 711876"];
926 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 711877"];
927 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 711878"];
928 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 711879"];
929 [label="inUsing 711880"];
930 [label="inScript 711881"];
931 [label="var extraInfo = inUsing\n                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)\n                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 711882"];
932 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 711883"];
933 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 711884"];
934 [label="CreateBinderCacheKey(compilationUnit, extraInfo) 711885"];
935 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 711886"];
936 [label="param CreateBinderCacheKey(NodeUsage usage) 711887"];
937 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 711888"];
938 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 711889"];
939 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 711890"];
940 [label="Binder result; 711891"];
941 [label="binderCache 711892"];
942 [label="get\n                {\n                    return _factory._binderCache;\n                } 711893"];
943 [label="return _factory._binderCache; 711894"];
944 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 711895"];
945 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 711896"];
946 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 711897"];
947 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 711898"];
948 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 711899"];
949 [label="this.buckStopsHereBinder 711900"];
950 [label="get\n                {\n                    return _factory._buckStopsHereBinder;\n                } 711901"];
951 [label="return _factory._buckStopsHereBinder; 711902"];
952 [label="result = this.buckStopsHereBinder; 711903"];
953 [label="if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    } 711904"];
954 [label="compilation 711905"];
955 [label="get\n                {\n                    return _factory._compilation;\n                } 711906"];
956 [label="return _factory._compilation; 711907"];
957 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 711908"];
958 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 711909"];
959 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 711910"];
960 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 711911"];
961 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 711912"];
962 [label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 711913"];
963 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 711914"];
964 [label="param InContainerBinder(Binder next) 711915"];
965 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 711916"];
966 [label="param InContainerBinder(bool inUsing) 711917"];
967 [label="param InContainerBinder(this) 711918"];
968 [label="next 711919"];
969 [label="param InContainerBinder(this) 711920"];
970 [label="param Binder(Binder next) 711921"];
971 [label="param Binder(this) 711922"];
972 [label="param Binder(Conversions? conversions = null) 711923"];
973 [label="internal CSharpCompilation Compilation { get; } 711924"];
974 [label="Flags 711925"];
975 [label="protected internal Binder? Next { get; } 711926"];
976 [label="_lazyConversions 711927"];
977 [label="_lazyOverloadResolution 711928"];
978 [label="RoslynDebug.Assert(next != null); 711929"];
979 [label="RoslynDebug.Assert(next != null); 711930"];
980 [label="Next 711931"];
981 [label="this.Flags 711932"];
982 [label="this.Compilation 711933"];
983 [label="_lazyConversions 711934"];
984 [label="_container 711935"];
985 [label="_computeImports 711936"];
986 [label="_lazyImports 711937"];
987 [label="_lazyImportChain 711938"];
988 [label="_lazyQuickAttributeChecker 711939"];
989 [label="Debug.Assert((object)container != null); 711940"];
990 [label="Debug.Assert((object)container != null); 711941"];
991 [label="Debug.Assert(declarationSyntax != null); 711942"];
992 [label="Debug.Assert(declarationSyntax != null); 711943"];
993 [label="_container 711944"];
994 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 711945"];
995 [label="_computeImports 711946"];
996 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 711947"];
997 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 711948"];
998 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 711949"];
999 [label="_usingsSyntax 711950"];
1000 [label="compilation 711951"];
1001 [label="get\n                {\n                    return _factory._compilation;\n                } 711952"];
1002 [label="return _factory._compilation; 711953"];
1003 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 711954"];
1004 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 711955"];
1005 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 711956"];
1006 [label="binderCache 711957"];
1007 [label="return _factory._binderCache; 711958"];
1008 [label="binderCache.TryAdd(key, result); 711959"];
1009 [label="binderCache.TryAdd(key, result); 711960"];
1010 [label="binderCache.TryAdd(key, result); 711961"];
1011 [label="binderCache.TryAdd(key, result); 711962"];
1012 [label="binderCache.TryAdd(key, result); 711963"];
1013 [label="param Equals(BinderCacheKey other) 711964"];
1014 [label="param Equals(this) 711965"];
1015 [label="return syntaxNode == other.syntaxNode && this.usage == other.usage; 711966"];
1016 [label="return result; 711967"];
1017 [label="return ((CSharpSyntaxNode)node).Accept(this); 711968"];
1018 [label="outer.ContainingMemberOrLambda 711969"];
1019 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 711970"];
1020 [label="var merged = _container as MergedNamespaceSymbol; 711971"];
1021 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 711972"];
1022 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 711973"];
1023 [label="((object)merged != null) 711974"];
1024 [label="var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent); 711975"];
1025 [label="var container = ((NamespaceOrTypeSymbol)outer.ContainingMemberOrLambda).GetSourceTypeMember(parent); 711976"];
1026 [label="resultBinder = new InContainerBinder(container, outer); 711977"];
1027 [label="resultBinder = new InContainerBinder(container, outer); 711978"];
1028 [label="resultBinder = new InContainerBinder(container, outer); 711979"];
1029 [label="new InContainerBinder(container, outer) 711980"];
1030 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 711981"];
1031 [label="param InContainerBinder(Binder next) 711982"];
1032 [label="param InContainerBinder(Imports imports = null) 711983"];
1033 [label="param InContainerBinder(this) 711984"];
1034 [label="next 711985"];
1035 [label="param InContainerBinder(this) 711986"];
1036 [label="param Binder(Binder next) 711987"];
1037 [label="param Binder(this) 711988"];
1038 [label="param Binder(Conversions? conversions = null) 711989"];
1039 [label="internal CSharpCompilation Compilation { get; } 711990"];
1040 [label="Flags 711991"];
1041 [label="protected internal Binder? Next { get; } 711992"];
1042 [label="_lazyConversions 711993"];
1043 [label="_lazyOverloadResolution 711994"];
1044 [label="RoslynDebug.Assert(next != null); 711995"];
1045 [label="RoslynDebug.Assert(next != null); 711996"];
1046 [label="this.Flags 711997"];
1047 [label="this.Compilation 711998"];
1048 [label="_lazyConversions 711999"];
1049 [label="_container 712000"];
1050 [label="_computeImports 712001"];
1051 [label="_lazyImports 712002"];
1052 [label="_lazyImportChain 712003"];
1053 [label="_lazyQuickAttributeChecker 712004"];
1054 [label="Debug.Assert((object)container != null || imports != null); 712005"];
1055 [label="Debug.Assert((object)container != null || imports != null); 712006"];
1056 [label="_container 712007"];
1057 [label="_lazyImports = imports ?? Imports.Empty; 712008"];
1058 [label="_lazyImports = imports ?? Imports.Empty; 712009"];
1059 [label="_lazyImports 712010"];
1060 [label="if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    } 712011"];
1061 [label="if (parent.TypeParameterList != null)\n                    {\n                        resultBinder = new WithClassTypeParametersBinder(container, resultBinder);\n                    } 712012"];
1062 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 712013"];
1063 [label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 712014"];
1064 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 712015"];
1065 [label="param WithUnsafeRegionIfNecessary(this) 712016"];
1066 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 712017"];
1067 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 712018"];
1068 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 712019"];
1069 [label="param Includes(this BinderFlags self) 712020"];
1070 [label="param Includes(BinderFlags other) 712021"];
1071 [label="return (self & other) == other; 712022"];
1072 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 712023"];
1073 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 712024"];
1074 [label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 712025"];
1075 [label="binderCache 712026"];
1076 [label="return _factory._binderCache; 712027"];
1077 [label="binderCache.TryAdd(key, resultBinder); 712028"];
1078 [label="binderCache.TryAdd(key, resultBinder); 712029"];
1079 [label="binderCache.TryAdd(key, resultBinder); 712030"];
1080 [label="binderCache.TryAdd(key, resultBinder); 712031"];
1081 [label="binderCache.TryAdd(key, resultBinder); 712032"];
1082 [label="return resultBinder; 712033"];
1083 [label="return ((CSharpSyntaxNode)node).Accept(this); 712034"];
1084 [label="_binderFactoryVisitorPool.Free(visitor); 712035"];
1085 [label="_binderFactoryVisitorPool.Free(visitor); 712036"];
1086 [label="return result; 712037"];
1087 [label="var diagnostics = c.GetDiagnostics(); 712038"];
1088 [label="param BindType(ExpressionSyntax syntax) 712039"];
1089 [label="param BindType(DiagnosticBag diagnostics) 712040"];
1090 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 712041"];
1091 [label="param BindType(bool suppressUseSiteDiagnostics = false) 712042"];
1092 [label="param BindType(this) 712043"];
1093 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 712044"];
1094 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 712045"];
1095 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 712046"];
1096 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 712047"];
1097 [label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 712048"];
1098 [label="param BindTypeOrAlias(ExpressionSyntax syntax) 712049"];
1099 [label="param BindTypeOrAlias(DiagnosticBag diagnostics) 712050"];
1100 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 712051"];
1101 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 712052"];
1102 [label="param BindTypeOrAlias(this) 712053"];
1103 [label="Debug.Assert(diagnostics != null); 712054"];
1104 [label="Debug.Assert(diagnostics != null); 712055"];
1105 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 712056"];
1106 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 712057"];
1107 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 712058"];
1108 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 712059"];
1109 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 712060"];
1110 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 712061"];
1111 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 712062"];
1112 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 712063"];
1113 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 712064"];
1114 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 712065"];
1115 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 712066"];
1116 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 712067"];
1117 [label="switch (syntax.Kind())\n            {\n                case SyntaxKind.NullableType:\n                    return bindNullable(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.PredefinedType:\n                    return bindPredefined(syntax, diagnostics);\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);\n\n                case SyntaxKind.AliasQualifiedName:\n                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n\n                case SyntaxKind.QualifiedName:\n                    {\n                        var node = (QualifiedNameSyntax)syntax;\n                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.SimpleMemberAccessExpression:\n                    {\n                        var node = (MemberAccessExpressionSyntax)syntax;\n                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.ArrayType:\n                    {\n                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);\n                    }\n\n                case SyntaxKind.PointerType:\n                    return bindPointer(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.FunctionPointerType:\n                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;\n                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)\n                    {\n                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;\n                        var asterisk = functionPointerTypeSyntax.AsteriskToken;\n                        RoslynDebug.Assert(@delegate.SyntaxTree is object);\n                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));\n                    }\n\n                    return TypeWithAnnotations.Create(\n                        FunctionPointerTypeSymbol.CreateFromSource(\n                            functionPointerTypeSyntax,\n                            this,\n                            diagnostics,\n                            basesBeingResolved,\n                            suppressUseSiteDiagnostics));\n\n                case SyntaxKind.OmittedTypeArgument:\n                    {\n                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);\n                    }\n\n                case SyntaxKind.TupleType:\n                    {\n                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;\n                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));\n                    }\n\n                case SyntaxKind.RefType:\n                    {\n                        // ref needs to be handled by the caller\n                        var refTypeSyntax = (RefTypeSyntax)syntax;\n                        var refToken = refTypeSyntax.RefKeyword;\n                        if (!syntax.HasErrors)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());\n                        }\n\n                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                default:\n                    {\n                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind\n                        // is attempted to be bound as a type pattern.\n                        return createErrorType(syntax);\n                    }\n            } 712068"];
1118 [label="return bindPredefined(syntax, diagnostics); 712069"];
1119 [label="return bindPredefined(syntax, diagnostics); 712070"];
1120 [label="bindPredefined(syntax, diagnostics) 712071"];
1121 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 712072"];
1122 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 712073"];
1123 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 712074"];
1124 [label="var predefinedType = (PredefinedTypeSyntax)syntax; 712075"];
1125 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 712076"];
1126 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 712077"];
1127 [label="BindPredefinedTypeSymbol(predefinedType, diagnostics) 712078"];
1128 [label="param BindPredefinedTypeSymbol(PredefinedTypeSyntax node) 712079"];
1129 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 712080"];
1130 [label="param BindPredefinedTypeSymbol(this) 712081"];
1131 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 712082"];
1132 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 712083"];
1133 [label="GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node) 712084"];
1134 [label="param GetSpecialType(SpecialType typeId) 712085"];
1135 [label="param GetSpecialType(DiagnosticBag diagnostics) 712086"];
1136 [label="param GetSpecialType(SyntaxNode node) 712087"];
1137 [label="param GetSpecialType(this) 712088"];
1138 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 712089"];
1139 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 712090"];
1140 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 712091"];
1141 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 712092"];
1142 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 712093"];
1143 [label="param GetSpecialType(CSharpCompilation compilation) 712094"];
1144 [label="param GetSpecialType(SpecialType typeId) 712095"];
1145 [label="param GetSpecialType(SyntaxNode node) 712096"];
1146 [label="param GetSpecialType(DiagnosticBag diagnostics) 712097"];
1147 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 712098"];
1148 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 712099"];
1149 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 712100"];
1150 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 712101"];
1151 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 712102"];
1152 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 712103"];
1153 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 712104"];
1154 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 712105"];
1155 [label="param ReportUseSiteDiagnostics(Symbol symbol) 712106"];
1156 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 712107"];
1157 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 712108"];
1158 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 712109"];
1159 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 712110"];
1160 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 712111"];
1161 [label="return typeSymbol; 712112"];
1162 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 712113"];
1163 [label="AreNullableAnnotationsEnabled(predefinedType.Keyword) 712114"];
1164 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 712115"];
1165 [label="param AreNullableAnnotationsEnabled(this) 712116"];
1166 [label="RoslynDebug.Assert(token.SyntaxTree is object); 712117"];
1167 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 712118"];
1168 [label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 712119"];
1169 [label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 712120"];
1170 [label="param AreNullableAnnotationsEnabled(int position) 712121"];
1171 [label="param AreNullableAnnotationsEnabled(this) 712122"];
1172 [label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 712123"];
1173 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 712124"];
1174 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 712125"];
1175 [label="context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            } 712126"];
1176 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 712127"];
1177 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 712128"];
1178 [label="AreNullableAnnotationsGloballyEnabled() 712129"];
1179 [label="param AreNullableAnnotationsGloballyEnabled(this) 712130"];
1180 [label="RoslynDebug.Assert(Next is object); 712131"];
1181 [label="Next.AreNullableAnnotationsGloballyEnabled() 712132"];
1182 [label="param AreNullableAnnotationsGloballyEnabled(this) 712133"];
1183 [label="RoslynDebug.Assert(Next is object); 712134"];
1184 [label="param AreNullableAnnotationsGloballyEnabled(this) 712135"];
1185 [label="GetGlobalAnnotationState() 712136"];
1186 [label="param GetGlobalAnnotationState(this) 712137"];
1187 [label="switch (Compilation.Options.NullableContextOptions)\n            {\n                case NullableContextOptions.Enable:\n                case NullableContextOptions.Annotations:\n                    return true;\n\n                case NullableContextOptions.Disable:\n                case NullableContextOptions.Warnings:\n                    return false;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);\n            } 712138"];
1188 [label="return false; 712139"];
1189 [label="return GetGlobalAnnotationState(); 712140"];
1190 [label="return Next.AreNullableAnnotationsGloballyEnabled(); 712141"];
1191 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 712142"];
1192 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 712143"];
1193 [label="type 712144"];
1194 [label="param operator(TypeWithAnnotations typeWithAnnotations) 712145"];
1195 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 712146"];
1196 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 712147"];
1197 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 712148"];
1198 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 712149"];
1199 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 712150"];
1200 [label="Debug.Assert(typeWithAnnotations.HasType); 712151"];
1201 [label="_typeWithAnnotations 712152"];
1202 [label="_symbol = null; 712153"];
1203 [label="_symbol 712154"];
1204 [label="_isNullableEnabled = false; 712155"];
1205 [label="_isNullableEnabled 712156"];
1206 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 712157"];
1207 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 712158"];
1208 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 712159"];
1209 [label="symbol.IsType 712160"];
1210 [label="=> !_typeWithAnnotations.IsDefault 712161"];
1211 [label="!_typeWithAnnotations.IsDefault 712162"];
1212 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 712163"];
1213 [label="symbol.IsType 712164"];
1214 [label="if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                } 712165"];
1215 [label="symbol.TypeWithAnnotations 712166"];
1216 [label="=> _typeWithAnnotations 712167"];
1217 [label="_typeWithAnnotations 712168"];
1218 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 712169"];
1219 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 712170"];
1220 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 712171"];
1221 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 712172"];
1222 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 712173"];
1223 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 712174"];
1224 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 712175"];
1225 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 712176"];
1226 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 712177"];
1227 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 712178"];
1228 [label="param ReportDiagnosticsIfObsolete(this) 712179"];
1229 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 712180"];
1230 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 712181"];
1231 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 712182"];
1232 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 712183"];
1233 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 712184"];
1234 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 712185"];
1235 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 712186"];
1236 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 712187"];
1237 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 712188"];
1238 [label="param ReportDiagnosticsIfObsolete(this) 712189"];
1239 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Event:\n                case SymbolKind.Property:\n                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);\n                    break;\n            } 712190"];
1240 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 712191"];
1241 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 712192"];
1242 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 712193"];
1243 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 712194"];
1244 [label="this.ContainingMemberOrLambda 712195"];
1245 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 712196"];
1246 [label="var merged = _container as MergedNamespaceSymbol; 712197"];
1247 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 712198"];
1248 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 712199"];
1249 [label="((object)merged != null) 712200"];
1250 [label="_container 712201"];
1251 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 712202"];
1252 [label="this.ContainingType 712203"];
1253 [label="get\n            {\n                var member = this.ContainingMemberOrLambda;\n                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);\n                return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                };\n            } 712204"];
1254 [label="this.ContainingMemberOrLambda 712205"];
1255 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 712206"];
1256 [label="var merged = _container as MergedNamespaceSymbol; 712207"];
1257 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 712208"];
1258 [label="var member = this.ContainingMemberOrLambda; 712209"];
1259 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 712210"];
1260 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 712211"];
1261 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 712212"];
1262 [label="return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                }; 712213"];
1263 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 712214"];
1264 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 712215"];
1265 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 712216"];
1266 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 712217"];
1267 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 712218"];
1268 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 712219"];
1269 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 712220"];
1270 [label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 712221"];
1271 [label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 712222"];
1272 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 712223"];
1273 [label="RoslynDebug.Assert(symbol is object); 712224"];
1274 [label="RoslynDebug.Assert(symbol is object); 712225"];
1275 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 712226"];
1276 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 712227"];
1277 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 712228"];
1278 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 712229"];
1279 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 712230"];
1280 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 712231"];
1281 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 712232"];
1282 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 712233"];
1283 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 712234"];
1284 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 712235"];
1285 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 712236"];
1286 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 712237"];
1287 [label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 712238"];
1288 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 712239"];
1289 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 712240"];
1290 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 712241"];
1291 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 712242"];
1292 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 712243"];
1293 [label="RoslynDebug.Assert(diagnostics != null); 712244"];
1294 [label="RoslynDebug.Assert(diagnostics != null); 712245"];
1295 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 712246"];
1296 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 712247"];
1297 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 712248"];
1298 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 712249"];
1299 [label="DiagnosticInfo? info = null; 712250"];
1300 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 712251"];
1301 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 712252"];
1302 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 712253"];
1303 [label="return kind; 712254"];
1304 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 712255"];
1305 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 712256"];
1306 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 712257"];
1307 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 712258"];
1308 [label="return symbol; 712259"];
1309 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 712260"];
1310 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 712261"];
1311 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 712262"];
1312 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 712263"];
1313 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 712264"];
1314 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 712265"];
1315 [label="param UnwrapAlias(DiagnosticBag diagnostics) 712266"];
1316 [label="param UnwrapAlias(SyntaxNode syntax) 712267"];
1317 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 712268"];
1318 [label="param UnwrapAlias(this) 712269"];
1319 [label="symbol.IsAlias 712270"];
1320 [label="=> _symbol?.Kind == SymbolKind.Alias 712271"];
1321 [label="_symbol 712272"];
1322 [label="_symbol?.Kind == SymbolKind.Alias 712273"];
1323 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 712274"];
1324 [label="return symbol; 712275"];
1325 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 712276"];
1326 [label="=> _typeWithAnnotations 712277"];
1327 [label="_typeWithAnnotations 712278"];
1328 [label="var diagnostics = c.GetDiagnostics(); 712279"];
1329 [label="param GetSpecialType(SpecialType typeId) 712280"];
1330 [label="param GetSpecialType(DiagnosticBag diagnostics) 712281"];
1331 [label="param GetSpecialType(SyntaxNode node) 712282"];
1332 [label="param GetSpecialType(this) 712283"];
1333 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 712284"];
1334 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 712285"];
1335 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 712286"];
1336 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 712287"];
1337 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 712288"];
1338 [label="param GetSpecialType(CSharpCompilation compilation) 712289"];
1339 [label="param GetSpecialType(SpecialType typeId) 712290"];
1340 [label="param GetSpecialType(SyntaxNode node) 712291"];
1341 [label="param GetSpecialType(DiagnosticBag diagnostics) 712292"];
1342 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 712293"];
1343 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 712294"];
1344 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 712295"];
1345 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 712296"];
1346 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 712297"];
1347 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 712298"];
1348 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 712299"];
1349 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 712300"];
1350 [label="param ReportUseSiteDiagnostics(Symbol symbol) 712301"];
1351 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 712302"];
1352 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 712303"];
1353 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 712304"];
1354 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 712305"];
1355 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 712306"];
1356 [label="return typeSymbol; 712307"];
1357 [label="var diagnostics = c.GetDiagnostics(); 712308"];
1358 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 712309"];
1359 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 712310"];
1360 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 712311"];
1361 [label="Debug.Assert(symbol is object); 712312"];
1362 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 712313"];
1363 [label="isInternal = false; 712314"];
1364 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 712315"];
1365 [label="symbol = symbol.ContainingType; 712316"];
1366 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 712317"];
1367 [label="return true; 712318"];
1368 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 712319"];
1369 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 712320"];
1370 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 712321"];
1371 [label="var diagnostics = c.GetDiagnostics(); 712322"];
1372 [label="param ValidateParameterNameConflicts(ImmutableArray<TypeParameterSymbol> typeParameters) 712323"];
1373 [label="param ValidateParameterNameConflicts(ImmutableArray<ParameterSymbol> parameters) 712324"];
1374 [label="param ValidateParameterNameConflicts(bool allowShadowingNames) 712325"];
1375 [label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 712326"];
1376 [label="param ValidateParameterNameConflicts(this) 712327"];
1377 [label="PooledHashSet<string>? tpNames = null; 712328"];
1378 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 712329"];
1379 [label="PooledHashSet<string>? pNames = null; 712330"];
1380 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 712331"];
1381 [label="tpNames?.Free(); 712332"];
1382 [label="pNames?.Free(); 712333"];
1383 [label="param IsSymbolAccessible(Symbol symbol) 712334"];
1384 [label="param IsSymbolAccessible(NamedTypeSymbol within) 712335"];
1385 [label="param IsSymbolAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 712336"];
1386 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt = null) 712337"];
1387 [label="bool failedThroughTypeCheck; 712338"];
1388 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 712339"];
1389 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 712340"];
1390 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 712341"];
1391 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 712342"];
1392 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 712343"];
1393 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 712344"];
1394 [label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics) 712345"];
1395 [label="param IsSymbolAccessibleCore(Symbol symbol) 712346"];
1396 [label="param IsSymbolAccessibleCore(Symbol within) 712347"];
1397 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 712348"];
1398 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 712349"];
1399 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 712350"];
1400 [label="param IsSymbolAccessibleCore(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 712351"];
1401 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 712352"];
1402 [label="Debug.Assert((object)symbol != null); 712353"];
1403 [label="Debug.Assert((object)symbol != null); 712354"];
1404 [label="Debug.Assert((object)within != null); 712355"];
1405 [label="Debug.Assert((object)within != null); 712356"];
1406 [label="Debug.Assert(within.IsDefinition); 712357"];
1407 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712358"];
1408 [label="failedThroughTypeCheck = false; 712359"];
1409 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.ArrayType:\n                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.PointerType:\n                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.NamedType:\n                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Alias:\n                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Discard:\n                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.FunctionPointerType:\n                    var funcPtr = (FunctionPointerTypeSymbol)symbol;\n                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n\n                    foreach (var param in funcPtr.Signature.Parameters)\n                    {\n                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                        {\n                            return false;\n                        }\n                    }\n\n                    return true;\n\n                case SymbolKind.ErrorType:\n                    // Always assume that error types are accessible.\n                    return true;\n\n                case SymbolKind.TypeParameter:\n                case SymbolKind.Parameter:\n                case SymbolKind.Local:\n                case SymbolKind.Label:\n                case SymbolKind.Namespace:\n                case SymbolKind.DynamicType:\n                case SymbolKind.Assembly:\n                case SymbolKind.NetModule:\n                case SymbolKind.RangeVariable:\n                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:\n                    // These types of symbols are always accessible (if visible).\n                    return true;\n\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                    if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    }\n\n                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 712360"];
1410 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.ArrayType:\n                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.PointerType:\n                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.NamedType:\n                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Alias:\n                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Discard:\n                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.FunctionPointerType:\n                    var funcPtr = (FunctionPointerTypeSymbol)symbol;\n                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n\n                    foreach (var param in funcPtr.Signature.Parameters)\n                    {\n                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                        {\n                            return false;\n                        }\n                    }\n\n                    return true;\n\n                case SymbolKind.ErrorType:\n                    // Always assume that error types are accessible.\n                    return true;\n\n                case SymbolKind.TypeParameter:\n                case SymbolKind.Parameter:\n                case SymbolKind.Local:\n                case SymbolKind.Label:\n                case SymbolKind.Namespace:\n                case SymbolKind.DynamicType:\n                case SymbolKind.Assembly:\n                case SymbolKind.NetModule:\n                case SymbolKind.RangeVariable:\n                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:\n                    // These types of symbols are always accessible (if visible).\n                    return true;\n\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                    if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    }\n\n                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 712361"];
1411 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 712362"];
1412 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 712363"];
1413 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 712364"];
1414 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 712365"];
1415 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 712366"];
1416 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 712367"];
1417 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 712368"];
1418 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 712369"];
1419 [label="IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics) 712370"];
1420 [label="param IsMemberAccessible(NamedTypeSymbol containingType) 712371"];
1421 [label="param IsMemberAccessible(Accessibility declaredAccessibility) 712372"];
1422 [label="param IsMemberAccessible(Symbol within) 712373"];
1423 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 712374"];
1424 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 712375"];
1425 [label="param IsMemberAccessible(CSharpCompilation compilation) 712376"];
1426 [label="param IsMemberAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 712377"];
1427 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 712378"];
1428 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712379"];
1429 [label="Debug.Assert((object)containingType != null); 712380"];
1430 [label="Debug.Assert((object)containingType != null); 712381"];
1431 [label="failedThroughTypeCheck = false; 712382"];
1432 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 712383"];
1433 [label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))\n            {\n                return false;\n            } 712384"];
1434 [label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))\n            {\n                return false;\n            } 712385"];
1435 [label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))\n            {\n                return false;\n            } 712386"];
1436 [label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))\n            {\n                return false;\n            } 712387"];
1437 [label="IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved) 712388"];
1438 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 712389"];
1439 [label="param IsNamedTypeAccessible(Symbol within) 712390"];
1440 [label="param IsNamedTypeAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 712391"];
1441 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 712392"];
1442 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712393"];
1443 [label="Debug.Assert((object)type != null); 712394"];
1444 [label="Debug.Assert((object)type != null); 712395"];
1445 [label="var compilation = within.DeclaringCompilation; 712396"];
1446 [label="bool unused; 712397"];
1447 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 712398"];
1448 [label="var containingType = type.ContainingType; 712399"];
1449 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 712400"];
1450 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 712401"];
1451 [label="(object)containingType == null 712402"];
1452 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 712403"];
1453 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 712404"];
1454 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 712405"];
1455 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 712406"];
1456 [label="param IsNonNestedTypeAccessible(Symbol within) 712407"];
1457 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712408"];
1458 [label="Debug.Assert((object)assembly != null); 712409"];
1459 [label="Debug.Assert((object)assembly != null); 712410"];
1460 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 712411"];
1461 [label="return true; 712412"];
1462 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 712413"];
1463 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 712414"];
1464 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 712415"];
1465 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 712416"];
1466 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 712417"];
1467 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 712418"];
1468 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 712419"];
1469 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 712420"];
1470 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 712421"];
1471 [label="IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved) 712422"];
1472 [label="param IsNonPublicMemberAccessible(NamedTypeSymbol containingType) 712423"];
1473 [label="param IsNonPublicMemberAccessible(Accessibility declaredAccessibility) 712424"];
1474 [label="param IsNonPublicMemberAccessible(Symbol within) 712425"];
1475 [label="param IsNonPublicMemberAccessible(TypeSymbol throughTypeOpt) 712426"];
1476 [label="param IsNonPublicMemberAccessible(out bool failedThroughTypeCheck) 712427"];
1477 [label="param IsNonPublicMemberAccessible(CSharpCompilation compilation) 712428"];
1478 [label="param IsNonPublicMemberAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 712429"];
1479 [label="param IsNonPublicMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 712430"];
1480 [label="failedThroughTypeCheck = false; 712431"];
1481 [label="var originalContainingType = containingType.OriginalDefinition; 712432"];
1482 [label="var withinType = within as NamedTypeSymbol; 712433"];
1483 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 712434"];
1484 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 712435"];
1485 [label="(object)withinType != null 712436"];
1486 [label="withinType.ContainingAssembly 712437"];
1487 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 712438"];
1488 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                    return true;\n\n                case Accessibility.Private:\n                    // All expressions in the current submission (top-level or nested in a method or\n                    // type) can access previous submission's private top-level members. Previous\n                    // submissions are treated like outer classes for the current submission - the\n                    // inner class can access private members of the outer class.\n                    if (containingType.TypeKind == TypeKind.Submission)\n                    {\n                        return true;\n                    }\n\n                    // private members never accessible from outside a type.\n                    return (object)withinType != null && IsPrivateSymbolAccessible(withinType, originalContainingType);\n\n                case Accessibility.Internal:\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly);\n\n                case Accessibility.ProtectedAndInternal:\n                    if (!withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly))\n                    {\n                        // We require internal access.  If we don't have it, then this symbol is\n                        // definitely not accessible to us.\n                        return false;\n                    }\n\n                    // We had internal access.  Also have to make sure we have protected access.\n                    return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case Accessibility.ProtectedOrInternal:\n                    if (withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly))\n                    {\n                        // If we have internal access to this symbol, then that's sufficient.  no\n                        // need to do the complicated protected case.\n                        return true;\n                    }\n\n                    // We don't have internal access.  But if we have protected access then that's\n                    // sufficient.\n                    return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case Accessibility.Protected:\n                    return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 712439"];
1489 [label="return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved); 712440"];
1490 [label="return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved); 712441"];
1491 [label="return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved); 712442"];
1492 [label="return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved); 712443"];
1493 [label="return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved); 712444"];
1494 [label="return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved); 712445"];
1495 [label="return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved); 712446"];
1496 [label="IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved) 712447"];
1497 [label="param IsProtectedSymbolAccessible(NamedTypeSymbol withinType) 712448"];
1498 [label="param IsProtectedSymbolAccessible(TypeSymbol throughTypeOpt) 712449"];
1499 [label="param IsProtectedSymbolAccessible(NamedTypeSymbol originalContainingType) 712450"];
1500 [label="param IsProtectedSymbolAccessible(out bool failedThroughTypeCheck) 712451"];
1501 [label="param IsProtectedSymbolAccessible(CSharpCompilation compilation) 712452"];
1502 [label="param IsProtectedSymbolAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 712453"];
1503 [label="param IsProtectedSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 712454"];
1504 [label="failedThroughTypeCheck = false; 712455"];
1505 [label="if (originalContainingType.TypeKind == TypeKind.Submission)\n            {\n                return true;\n            } 712456"];
1506 [label="if ((object)withinType == null)\n            {\n                // If we're not within a type, we can't access a protected symbol\n                return false;\n            } 712457"];
1507 [label="if ((object)withinType == null)\n            {\n                // If we're not within a type, we can't access a protected symbol\n                return false;\n            } 712458"];
1508 [label="if (IsNestedWithinOriginalContainingType(withinType, originalContainingType))\n            {\n                return true;\n            } 712459"];
1509 [label="if (IsNestedWithinOriginalContainingType(withinType, originalContainingType))\n            {\n                return true;\n            } 712460"];
1510 [label="IsNestedWithinOriginalContainingType(withinType, originalContainingType) 712461"];
1511 [label="param IsNestedWithinOriginalContainingType(NamedTypeSymbol withinType) 712462"];
1512 [label="param IsNestedWithinOriginalContainingType(NamedTypeSymbol originalContainingType) 712463"];
1513 [label="Debug.Assert((object)withinType != null); 712464"];
1514 [label="Debug.Assert((object)withinType != null); 712465"];
1515 [label="Debug.Assert((object)originalContainingType != null); 712466"];
1516 [label="Debug.Assert((object)originalContainingType != null); 712467"];
1517 [label="Debug.Assert(originalContainingType.IsDefinition); 712468"];
1518 [label="var current = withinType.OriginalDefinition; 712469"];
1519 [label="while ((object)current != null)\n            {\n                Debug.Assert(current.IsDefinition);\n                if (current == (object)originalContainingType)\n                {\n                    return true;\n                }\n\n                // NOTE(cyrusn): The container of an 'original' type is always original. \n                current = current.ContainingType;\n            } 712470"];
1520 [label="while ((object)current != null)\n            {\n                Debug.Assert(current.IsDefinition);\n                if (current == (object)originalContainingType)\n                {\n                    return true;\n                }\n\n                // NOTE(cyrusn): The container of an 'original' type is always original. \n                current = current.ContainingType;\n            } 712471"];
1521 [label="Debug.Assert(current.IsDefinition); 712472"];
1522 [label="if (current == (object)originalContainingType)\n                {\n                    return true;\n                } 712473"];
1523 [label="current = current.ContainingType; 712474"];
1524 [label="return false; 712475"];
1525 [label="if (IsNestedWithinOriginalContainingType(withinType, originalContainingType))\n            {\n                return true;\n            } 712476"];
1526 [label="var current = withinType.OriginalDefinition; 712477"];
1527 [label="var originalThroughTypeOpt = (object)throughTypeOpt == null ? null : throughTypeOpt.OriginalDefinition as TypeSymbol; 712478"];
1528 [label="var originalThroughTypeOpt = (object)throughTypeOpt == null ? null : throughTypeOpt.OriginalDefinition as TypeSymbol; 712479"];
1529 [label="(object)throughTypeOpt == null 712480"];
1530 [label="while ((object)current != null)\n                {\n                    Debug.Assert(current.IsDefinition);\n\n                    if (current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        // NOTE(cyrusn): We're continually walking up the 'throughType's inheritance\n                        // chain.  We could compute it up front and cache it in a set.  However, we\n                        // don't want to allocate memory in this function.  Also, in practice\n                        // inheritance chains should be very short.  As such, it might actually be\n                        // slower to create and check inside the set versus just walking the\n                        // inheritance chain.\n                        if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        }\n                    }\n\n                    // NOTE(cyrusn): The container of an original type is always original.\n                    current = current.ContainingType;\n                } 712481"];
1531 [label="while ((object)current != null)\n                {\n                    Debug.Assert(current.IsDefinition);\n\n                    if (current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        // NOTE(cyrusn): We're continually walking up the 'throughType's inheritance\n                        // chain.  We could compute it up front and cache it in a set.  However, we\n                        // don't want to allocate memory in this function.  Also, in practice\n                        // inheritance chains should be very short.  As such, it might actually be\n                        // slower to create and check inside the set versus just walking the\n                        // inheritance chain.\n                        if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        }\n                    }\n\n                    // NOTE(cyrusn): The container of an original type is always original.\n                    current = current.ContainingType;\n                } 712482"];
1532 [label="Debug.Assert(current.IsDefinition); 712483"];
1533 [label="if (current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        // NOTE(cyrusn): We're continually walking up the 'throughType's inheritance\n                        // chain.  We could compute it up front and cache it in a set.  However, we\n                        // don't want to allocate memory in this function.  Also, in practice\n                        // inheritance chains should be very short.  As such, it might actually be\n                        // slower to create and check inside the set versus just walking the\n                        // inheritance chain.\n                        if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        }\n                    } 712484"];
1534 [label="if (current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        // NOTE(cyrusn): We're continually walking up the 'throughType's inheritance\n                        // chain.  We could compute it up front and cache it in a set.  However, we\n                        // don't want to allocate memory in this function.  Also, in practice\n                        // inheritance chains should be very short.  As such, it might actually be\n                        // slower to create and check inside the set versus just walking the\n                        // inheritance chain.\n                        if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        }\n                    } 712485"];
1535 [label="if (current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        // NOTE(cyrusn): We're continually walking up the 'throughType's inheritance\n                        // chain.  We could compute it up front and cache it in a set.  However, we\n                        // don't want to allocate memory in this function.  Also, in practice\n                        // inheritance chains should be very short.  As such, it might actually be\n                        // slower to create and check inside the set versus just walking the\n                        // inheritance chain.\n                        if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        }\n                    } 712486"];
1536 [label="if (current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        // NOTE(cyrusn): We're continually walking up the 'throughType's inheritance\n                        // chain.  We could compute it up front and cache it in a set.  However, we\n                        // don't want to allocate memory in this function.  Also, in practice\n                        // inheritance chains should be very short.  As such, it might actually be\n                        // slower to create and check inside the set versus just walking the\n                        // inheritance chain.\n                        if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        }\n                    } 712487"];
1537 [label="if (current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        // NOTE(cyrusn): We're continually walking up the 'throughType's inheritance\n                        // chain.  We could compute it up front and cache it in a set.  However, we\n                        // don't want to allocate memory in this function.  Also, in practice\n                        // inheritance chains should be very short.  As such, it might actually be\n                        // slower to create and check inside the set versus just walking the\n                        // inheritance chain.\n                        if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        }\n                    } 712488"];
1538 [label="current.InheritsFromOrImplementsIgnoringConstruction(originalContainingType, compilation, ref useSiteDiagnostics, basesBeingResolved) 712489"];
1539 [label="param InheritsFromOrImplementsIgnoringConstruction(this TypeSymbol type) 712490"];
1540 [label="param InheritsFromOrImplementsIgnoringConstruction(NamedTypeSymbol baseType) 712491"];
1541 [label="param InheritsFromOrImplementsIgnoringConstruction(CSharpCompilation compilation) 712492"];
1542 [label="param InheritsFromOrImplementsIgnoringConstruction(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 712493"];
1543 [label="param InheritsFromOrImplementsIgnoringConstruction(ConsList<TypeSymbol> basesBeingResolved = null) 712494"];
1544 [label="Debug.Assert(type.IsDefinition); 712495"];
1545 [label="Debug.Assert(baseType.IsDefinition); 712496"];
1546 [label="PooledHashSet<NamedTypeSymbol> interfacesLookedAt = null; 712497"];
1547 [label="ArrayBuilder<NamedTypeSymbol> baseInterfaces = null; 712498"];
1548 [label="bool baseTypeIsInterface = baseType.IsInterface; 712499"];
1549 [label="if (baseTypeIsInterface)\n            {\n                interfacesLookedAt = PooledHashSet<NamedTypeSymbol>.GetInstance();\n                baseInterfaces = ArrayBuilder<NamedTypeSymbol>.GetInstance();\n            } 712500"];
1550 [label="PooledHashSet<NamedTypeSymbol> visited = null; 712501"];
1551 [label="var current = type; 712502"];
1552 [label="bool result = false; 712503"];
1553 [label="while ((object)current != null)\n            {\n                Debug.Assert(current.IsDefinition);\n                if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                }\n\n                if (baseTypeIsInterface)\n                {\n                    getBaseInterfaces(current, baseInterfaces, interfacesLookedAt, basesBeingResolved);\n                }\n\n                // NOTE(cyrusn): The base type of an 'original' type may not be 'original'. i.e. \n                // 'class Goo : IBar<int>'.  We must map it back to the 'original' when as we walk up\n                // the base type hierarchy.\n                var next = current.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, compilation, ref visited);\n                if ((object)next == null)\n                {\n                    current = null;\n                }\n                else\n                {\n                    current = (TypeSymbol)next.OriginalDefinition;\n                    current.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                }\n            } 712504"];
1554 [label="while ((object)current != null)\n            {\n                Debug.Assert(current.IsDefinition);\n                if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                }\n\n                if (baseTypeIsInterface)\n                {\n                    getBaseInterfaces(current, baseInterfaces, interfacesLookedAt, basesBeingResolved);\n                }\n\n                // NOTE(cyrusn): The base type of an 'original' type may not be 'original'. i.e. \n                // 'class Goo : IBar<int>'.  We must map it back to the 'original' when as we walk up\n                // the base type hierarchy.\n                var next = current.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, compilation, ref visited);\n                if ((object)next == null)\n                {\n                    current = null;\n                }\n                else\n                {\n                    current = (TypeSymbol)next.OriginalDefinition;\n                    current.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                }\n            } 712505"];
1555 [label="Debug.Assert(current.IsDefinition); 712506"];
1556 [label="if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                } 712507"];
1557 [label="if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                } 712508"];
1558 [label="if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                } 712509"];
1559 [label="if (baseTypeIsInterface)\n                {\n                    getBaseInterfaces(current, baseInterfaces, interfacesLookedAt, basesBeingResolved);\n                } 712510"];
1560 [label="var next = current.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, compilation, ref visited); 712511"];
1561 [label="var next = current.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, compilation, ref visited); 712512"];
1562 [label="var next = current.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, compilation, ref visited); 712513"];
1563 [label="var next = current.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, compilation, ref visited); 712514"];
1564 [label="var next = current.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, compilation, ref visited); 712515"];
1565 [label="if ((object)next == null)\n                {\n                    current = null;\n                }\n                else\n                {\n                    current = (TypeSymbol)next.OriginalDefinition;\n                    current.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 712516"];
1566 [label="if ((object)next == null)\n                {\n                    current = null;\n                }\n                else\n                {\n                    current = (TypeSymbol)next.OriginalDefinition;\n                    current.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 712517"];
1567 [label="current = (TypeSymbol)next.OriginalDefinition; 712518"];
1568 [label="current.AddUseSiteDiagnostics(ref useSiteDiagnostics); 712519"];
1569 [label="current.AddUseSiteDiagnostics(ref useSiteDiagnostics); 712520"];
1570 [label="current.AddUseSiteDiagnostics(ref useSiteDiagnostics); 712521"];
1571 [label="Debug.Assert(current.IsDefinition); 712522"];
1572 [label="if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                } 712523"];
1573 [label="if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                } 712524"];
1574 [label="if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                } 712525"];
1575 [label="if (baseTypeIsInterface == current.IsInterfaceType() &&\n                    current == (object)baseType)\n                {\n                    result = true;\n                    break;\n                } 712526"];
1576 [label="result = true; 712527"];
1577 [label="visited?.Free(); 712528"];
1578 [label="if (!result && baseTypeIsInterface)\n            {\n                Debug.Assert(!result);\n\n                while (baseInterfaces.Count != 0)\n                {\n                    NamedTypeSymbol currentBase = baseInterfaces.Pop();\n\n                    if (!currentBase.IsInterface)\n                    {\n                        continue;\n                    }\n\n                    Debug.Assert(currentBase.IsDefinition);\n                    if (currentBase == (object)baseType)\n                    {\n                        result = true;\n                        break;\n                    }\n\n                    getBaseInterfaces(currentBase, baseInterfaces, interfacesLookedAt, basesBeingResolved);\n                }\n\n                if (!result)\n                {\n                    foreach (var candidate in interfacesLookedAt)\n                    {\n                        candidate.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                    }\n                }\n            } 712529"];
1579 [label="interfacesLookedAt?.Free(); 712530"];
1580 [label="baseInterfaces?.Free(); 712531"];
1581 [label="return result; 712532"];
1582 [label="if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        } 712533"];
1583 [label="if ((object)originalThroughTypeOpt == null ||\n                            originalThroughTypeOpt.InheritsFromOrImplementsIgnoringConstruction(current, compilation, ref useSiteDiagnostics))\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            failedThroughTypeCheck = true;\n                        } 712534"];
1584 [label="return true; 712535"];
1585 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt = null) 712536"];
1586 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 712537"];
1587 [label="Debug.Assert((object)symbol != null); 712538"];
1588 [label="Debug.Assert((object)within != null); 712539"];
1589 [label="Debug.Assert(within.IsDefinition); 712540"];
1590 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712541"];
1591 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 712542"];
1592 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 712543"];
1593 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 712544"];
1594 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712545"];
1595 [label="Debug.Assert((object)containingType != null); 712546"];
1596 [label="Debug.Assert((object)containingType != null); 712547"];
1597 [label="failedThroughTypeCheck = false; 712548"];
1598 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 712549"];
1599 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 712550"];
1600 [label="param IsNamedTypeAccessible(Symbol within) 712551"];
1601 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 712552"];
1602 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712553"];
1603 [label="Debug.Assert((object)type != null); 712554"];
1604 [label="Debug.Assert((object)type != null); 712555"];
1605 [label="var compilation = within.DeclaringCompilation; 712556"];
1606 [label="bool unused; 712557"];
1607 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 712558"];
1608 [label="var containingType = type.ContainingType; 712559"];
1609 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 712560"];
1610 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 712561"];
1611 [label="(object)containingType == null 712562"];
1612 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 712563"];
1613 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 712564"];
1614 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 712565"];
1615 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 712566"];
1616 [label="param IsNonNestedTypeAccessible(Symbol within) 712567"];
1617 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712568"];
1618 [label="Debug.Assert((object)assembly != null); 712569"];
1619 [label="Debug.Assert((object)assembly != null); 712570"];
1620 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 712571"];
1621 [label="return true; 712572"];
1622 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 712573"];
1623 [label="return true; 712574"];
1624 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 712575"];
1625 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 712576"];
1626 [label="Debug.Assert(symbol is object); 712577"];
1627 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 712578"];
1628 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 712579"];
1629 [label="symbol = symbol.ContainingType; 712580"];
1630 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 712581"];
1631 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 712582"];
1632 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 712583"];
1633 [label="return true; 712584"];
1634 [label="var diagnostics = c.GetDiagnostics(); 712585"];
1635 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 712586"];
1636 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 712587"];
1637 [label="Debug.Assert(symbol is object); 712588"];
1638 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 712589"];
1639 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 712590"];
1640 [label="symbol = symbol.ContainingType; 712591"];
1641 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 712592"];
1642 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 712593"];
1643 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 712594"];
1644 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 712595"];
1645 [label="Debug.Assert(symbol is object); 712596"];
1646 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 712597"];
1647 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 712598"];
1648 [label="symbol = symbol.ContainingType; 712599"];
1649 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 712600"];
1650 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 712601"];
1651 [label="param IsSymbolAccessible(NamedTypeSymbol within) 712602"];
1652 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt = null) 712603"];
1653 [label="param IsSymbolAccessibleCore(Symbol within) 712604"];
1654 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 712605"];
1655 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 712606"];
1656 [label="Debug.Assert((object)symbol != null); 712607"];
1657 [label="Debug.Assert((object)within != null); 712608"];
1658 [label="Debug.Assert(within.IsDefinition); 712609"];
1659 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712610"];
1660 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 712611"];
1661 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 712612"];
1662 [label="param IsMemberAccessible(NamedTypeSymbol containingType) 712613"];
1663 [label="param IsMemberAccessible(Accessibility declaredAccessibility) 712614"];
1664 [label="param IsMemberAccessible(Symbol within) 712615"];
1665 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 712616"];
1666 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 712617"];
1667 [label="param IsMemberAccessible(CSharpCompilation compilation) 712618"];
1668 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 712619"];
1669 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712620"];
1670 [label="Debug.Assert((object)containingType != null); 712621"];
1671 [label="Debug.Assert((object)containingType != null); 712622"];
1672 [label="failedThroughTypeCheck = false; 712623"];
1673 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 712624"];
1674 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 712625"];
1675 [label="param IsNamedTypeAccessible(Symbol within) 712626"];
1676 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 712627"];
1677 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712628"];
1678 [label="Debug.Assert((object)type != null); 712629"];
1679 [label="Debug.Assert((object)type != null); 712630"];
1680 [label="var compilation = within.DeclaringCompilation; 712631"];
1681 [label="bool unused; 712632"];
1682 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 712633"];
1683 [label="var containingType = type.ContainingType; 712634"];
1684 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 712635"];
1685 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 712636"];
1686 [label="(object)containingType == null 712637"];
1687 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 712638"];
1688 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 712639"];
1689 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 712640"];
1690 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 712641"];
1691 [label="param IsNonNestedTypeAccessible(Symbol within) 712642"];
1692 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712643"];
1693 [label="Debug.Assert((object)assembly != null); 712644"];
1694 [label="Debug.Assert((object)assembly != null); 712645"];
1695 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 712646"];
1696 [label="return true; 712647"];
1697 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 712648"];
1698 [label="return true; 712649"];
1699 [label="var diagnostics = c.GetDiagnostics(); 712650"];
1700 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt = null) 712651"];
1701 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 712652"];
1702 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 712653"];
1703 [label="Debug.Assert((object)symbol != null); 712654"];
1704 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 712655"];
1705 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 712656"];
1706 [label="param IsMemberAccessible(NamedTypeSymbol containingType) 712657"];
1707 [label="param IsMemberAccessible(Accessibility declaredAccessibility) 712658"];
1708 [label="param IsMemberAccessible(Symbol within) 712659"];
1709 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 712660"];
1710 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 712661"];
1711 [label="param IsMemberAccessible(CSharpCompilation compilation) 712662"];
1712 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 712663"];
1713 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712664"];
1714 [label="Debug.Assert((object)containingType != null); 712665"];
1715 [label="Debug.Assert((object)containingType != null); 712666"];
1716 [label="failedThroughTypeCheck = false; 712667"];
1717 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 712668"];
1718 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 712669"];
1719 [label="param IsNamedTypeAccessible(Symbol within) 712670"];
1720 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 712671"];
1721 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712672"];
1722 [label="Debug.Assert((object)type != null); 712673"];
1723 [label="Debug.Assert((object)type != null); 712674"];
1724 [label="var compilation = within.DeclaringCompilation; 712675"];
1725 [label="bool unused; 712676"];
1726 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 712677"];
1727 [label="var containingType = type.ContainingType; 712678"];
1728 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 712679"];
1729 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 712680"];
1730 [label="(object)containingType == null 712681"];
1731 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 712682"];
1732 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 712683"];
1733 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 712684"];
1734 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 712685"];
1735 [label="param IsNonNestedTypeAccessible(Symbol within) 712686"];
1736 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712687"];
1737 [label="Debug.Assert((object)assembly != null); 712688"];
1738 [label="Debug.Assert((object)assembly != null); 712689"];
1739 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 712690"];
1740 [label="return true; 712691"];
1741 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 712692"];
1742 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 712693"];
1743 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 712694"];
1744 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 712695"];
1745 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 712696"];
1746 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 712697"];
1747 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 712698"];
1748 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 712699"];
1749 [label="return IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved); 712700"];
1750 [label="IsNonPublicMemberAccessible(\n                containingType,\n                declaredAccessibility,\n                within,\n                throughTypeOpt,\n                out failedThroughTypeCheck,\n                compilation,\n                ref useSiteDiagnostics,\n                basesBeingResolved) 712701"];
1751 [label="param IsNonPublicMemberAccessible(NamedTypeSymbol containingType) 712702"];
1752 [label="param IsNonPublicMemberAccessible(Accessibility declaredAccessibility) 712703"];
1753 [label="param IsNonPublicMemberAccessible(Symbol within) 712704"];
1754 [label="param IsNonPublicMemberAccessible(TypeSymbol throughTypeOpt) 712705"];
1755 [label="param IsNonPublicMemberAccessible(out bool failedThroughTypeCheck) 712706"];
1756 [label="param IsNonPublicMemberAccessible(CSharpCompilation compilation) 712707"];
1757 [label="param IsNonPublicMemberAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 712708"];
1758 [label="param IsNonPublicMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 712709"];
1759 [label="failedThroughTypeCheck = false; 712710"];
1760 [label="var originalContainingType = containingType.OriginalDefinition; 712711"];
1761 [label="var withinType = within as NamedTypeSymbol; 712712"];
1762 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 712713"];
1763 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 712714"];
1764 [label="(object)withinType != null 712715"];
1765 [label="withinType.ContainingAssembly 712716"];
1766 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 712717"];
1767 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                    return true;\n\n                case Accessibility.Private:\n                    // All expressions in the current submission (top-level or nested in a method or\n                    // type) can access previous submission's private top-level members. Previous\n                    // submissions are treated like outer classes for the current submission - the\n                    // inner class can access private members of the outer class.\n                    if (containingType.TypeKind == TypeKind.Submission)\n                    {\n                        return true;\n                    }\n\n                    // private members never accessible from outside a type.\n                    return (object)withinType != null && IsPrivateSymbolAccessible(withinType, originalContainingType);\n\n                case Accessibility.Internal:\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly);\n\n                case Accessibility.ProtectedAndInternal:\n                    if (!withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly))\n                    {\n                        // We require internal access.  If we don't have it, then this symbol is\n                        // definitely not accessible to us.\n                        return false;\n                    }\n\n                    // We had internal access.  Also have to make sure we have protected access.\n                    return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case Accessibility.ProtectedOrInternal:\n                    if (withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly))\n                    {\n                        // If we have internal access to this symbol, then that's sufficient.  no\n                        // need to do the complicated protected case.\n                        return true;\n                    }\n\n                    // We don't have internal access.  But if we have protected access then that's\n                    // sufficient.\n                    return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case Accessibility.Protected:\n                    return IsProtectedSymbolAccessible(withinType, throughTypeOpt, originalContainingType, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 712718"];
1768 [label="return withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly); 712719"];
1769 [label="return withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly); 712720"];
1770 [label="withinAssembly.HasInternalAccessTo(containingType.ContainingAssembly) 712721"];
1771 [label="param HasInternalAccessTo(this AssemblySymbol fromAssembly) 712722"];
1772 [label="param HasInternalAccessTo(AssemblySymbol toAssembly) 712723"];
1773 [label="if (Equals(fromAssembly, toAssembly))\n            {\n                return true;\n            } 712724"];
1774 [label="if (Equals(fromAssembly, toAssembly))\n            {\n                return true;\n            } 712725"];
1775 [label="if (Equals(fromAssembly, toAssembly))\n            {\n                return true;\n            } 712726"];
1776 [label="return true; 712727"];
1777 [label="var diagnostics = c.GetDiagnostics(); 712728"];
1778 [label="param IsSymbolAccessibleCore(Symbol within) 712729"];
1779 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 712730"];
1780 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 712731"];
1781 [label="Debug.Assert((object)symbol != null); 712732"];
1782 [label="Debug.Assert((object)within != null); 712733"];
1783 [label="Debug.Assert(within.IsDefinition); 712734"];
1784 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712735"];
1785 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 712736"];
1786 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 712737"];
1787 [label="param IsMemberAccessible(NamedTypeSymbol containingType) 712738"];
1788 [label="param IsMemberAccessible(Accessibility declaredAccessibility) 712739"];
1789 [label="param IsMemberAccessible(Symbol within) 712740"];
1790 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 712741"];
1791 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 712742"];
1792 [label="param IsMemberAccessible(CSharpCompilation compilation) 712743"];
1793 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 712744"];
1794 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712745"];
1795 [label="Debug.Assert((object)containingType != null); 712746"];
1796 [label="Debug.Assert((object)containingType != null); 712747"];
1797 [label="failedThroughTypeCheck = false; 712748"];
1798 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 712749"];
1799 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 712750"];
1800 [label="param IsNamedTypeAccessible(Symbol within) 712751"];
1801 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 712752"];
1802 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712753"];
1803 [label="Debug.Assert((object)type != null); 712754"];
1804 [label="Debug.Assert((object)type != null); 712755"];
1805 [label="var compilation = within.DeclaringCompilation; 712756"];
1806 [label="bool unused; 712757"];
1807 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 712758"];
1808 [label="var containingType = type.ContainingType; 712759"];
1809 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 712760"];
1810 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 712761"];
1811 [label="(object)containingType == null 712762"];
1812 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 712763"];
1813 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 712764"];
1814 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 712765"];
1815 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 712766"];
1816 [label="param IsNonNestedTypeAccessible(Symbol within) 712767"];
1817 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712768"];
1818 [label="Debug.Assert((object)assembly != null); 712769"];
1819 [label="Debug.Assert((object)assembly != null); 712770"];
1820 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 712771"];
1821 [label="return true; 712772"];
1822 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 712773"];
1823 [label="return true; 712774"];
1824 [label="var diagnostics = c.GetDiagnostics(); 712775"];
1825 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 712776"];
1826 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 712777"];
1827 [label="Debug.Assert(symbol is object); 712778"];
1828 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 712779"];
1829 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 712780"];
1830 [label="symbol = symbol.ContainingType; 712781"];
1831 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 712782"];
1832 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 712783"];
1833 [label="throughTypeOpt = null; 712784"];
1834 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 712785"];
1835 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 712786"];
1836 [label="param IsSymbolAccessibleCore(Symbol within) 712787"];
1837 [label="Debug.Assert((object)symbol != null); 712788"];
1838 [label="Debug.Assert((object)within != null); 712789"];
1839 [label="Debug.Assert(within.IsDefinition); 712790"];
1840 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712791"];
1841 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 712792"];
1842 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 712793"];
1843 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 712794"];
1844 [label="param IsMemberAccessible(NamedTypeSymbol containingType) 712795"];
1845 [label="param IsMemberAccessible(Accessibility declaredAccessibility) 712796"];
1846 [label="param IsMemberAccessible(Symbol within) 712797"];
1847 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 712798"];
1848 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 712799"];
1849 [label="param IsMemberAccessible(CSharpCompilation compilation) 712800"];
1850 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 712801"];
1851 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712802"];
1852 [label="Debug.Assert((object)containingType != null); 712803"];
1853 [label="Debug.Assert((object)containingType != null); 712804"];
1854 [label="failedThroughTypeCheck = false; 712805"];
1855 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 712806"];
1856 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 712807"];
1857 [label="param IsNamedTypeAccessible(Symbol within) 712808"];
1858 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 712809"];
1859 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712810"];
1860 [label="Debug.Assert((object)type != null); 712811"];
1861 [label="Debug.Assert((object)type != null); 712812"];
1862 [label="var compilation = within.DeclaringCompilation; 712813"];
1863 [label="bool unused; 712814"];
1864 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 712815"];
1865 [label="var containingType = type.ContainingType; 712816"];
1866 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 712817"];
1867 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 712818"];
1868 [label="(object)containingType == null 712819"];
1869 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 712820"];
1870 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 712821"];
1871 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 712822"];
1872 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 712823"];
1873 [label="param IsNonNestedTypeAccessible(Symbol within) 712824"];
1874 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 712825"];
1875 [label="Debug.Assert((object)assembly != null); 712826"];
1876 [label="Debug.Assert((object)assembly != null); 712827"];
1877 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 712828"];
1878 [label="return true; 712829"];
1879 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 712830"];
1880 [label="return true; 712831"];
1881 [label="var diagnostics = c.GetDiagnostics(); 712832"];
1882 [label="param TypeConversions(AssemblySymbol corLibrary) 712833"];
1883 [label="param TypeConversions(bool includeNullability = false) 712834"];
1884 [label="param TypeConversions(this) 712835"];
1885 [label="corLibrary 712836"];
1886 [label="0 712837"];
1887 [label="includeNullability 712838"];
1888 [label="null 712839"];
1889 [label="param TypeConversions(this) 712840"];
1890 [label="param TypeConversions(AssemblySymbol corLibrary) 712841"];
1891 [label="param TypeConversions(int currentRecursionDepth) 712842"];
1892 [label="param TypeConversions(bool includeNullability) 712843"];
1893 [label="param TypeConversions(TypeConversions otherNullabilityOpt) 712844"];
1894 [label="param TypeConversions(this) 712845"];
1895 [label="corLibrary 712846"];
1896 [label="currentRecursionDepth 712847"];
1897 [label="includeNullability 712848"];
1898 [label="otherNullabilityOpt 712849"];
1899 [label="param TypeConversions(this) 712850"];
1900 [label="param ConversionsBase(AssemblySymbol corLibrary) 712851"];
1901 [label="param ConversionsBase(int currentRecursionDepth) 712852"];
1902 [label="param ConversionsBase(bool includeNullability) 712853"];
1903 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 712854"];
1904 [label="param ConversionsBase(this) 712855"];
1905 [label="corLibrary 712856"];
1906 [label="currentRecursionDepth 712857"];
1907 [label="IncludeNullability 712858"];
1908 [label="_lazyOtherNullability 712859"];
1909 [label="Debug.Assert((object)corLibrary != null); 712860"];
1910 [label="Debug.Assert((object)corLibrary != null); 712861"];
1911 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 712862"];
1912 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 712863"];
1913 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 712864"];
1914 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 712865"];
1915 [label="this.corLibrary 712866"];
1916 [label="this.currentRecursionDepth 712867"];
1917 [label="IncludeNullability 712868"];
1918 [label="_lazyOtherNullability 712869"];
1919 [label="var diagnostics = c.GetDiagnostics(); 712870"];
1920 [label="var diagnostics = c.GetDiagnostics(); 712871"];
1921 [label="diagnostics.Verify(expected); 712872"];
1922 [label="diagnostics.Verify(expected); 712873"];
1923 [label="diagnostics.Verify(expected) 712874"];
1924 [label="param Verify(this ImmutableArray<Diagnostic> actual) 712875"];
1925 [label="param Verify(params DiagnosticDescription[] expected) 712876"];
1926 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 712877"];
1927 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 712878"];
1928 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 712879"];
1929 [label="param Verify(this IEnumerable<Diagnostic> actual) 712880"];
1930 [label="param Verify(params DiagnosticDescription[] expected) 712881"];
1931 [label="Verify(actual, expected, errorCodeOnly: false); 712882"];
1932 [label="Verify(actual, expected, errorCodeOnly: false); 712883"];
1933 [label="Verify(actual, expected, errorCodeOnly: false); 712884"];
1934 [label="Verify(actual, expected, errorCodeOnly: false) 712885"];
1935 [label="param Verify(IEnumerable<Diagnostic> actual) 712886"];
1936 [label="param Verify(DiagnosticDescription[] expected) 712887"];
1937 [label="param Verify(bool errorCodeOnly) 712888"];
1938 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 712889"];
1939 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 712890"];
1940 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 712891"];
1941 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 712892"];
1942 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 712893"];
1943 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 712894"];
1944 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 712895"];
1945 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 712896"];
1946 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 712897"];
1947 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 712898"];
1948 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 712899"];
1949 [label="{ } 712900"];
1950 [label="None = { } 712901"];
1951 [label="null 712902"];
1952 [label="Any = null 712903"];
1953 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 712904"];
1954 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 712905"];
1955 [label="DiagnosticDescription.GetAssertText(expected, actual) 712906"];
1956 [label="param GetAssertText(DiagnosticDescription[] expected) 712907"];
1957 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 712908"];
1958 [label="const int CSharp = 1; 712909"];
1959 [label="const int VisualBasic = 2; 712910"];
1960 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 712911"];
1961 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 712912"];
1962 [label="actual.Any() && actual.First() is CSDiagnostic 712913"];
1963 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 712914"];
1964 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 712915"];
1965 [label="int indentDepth = (language == CSharp) ? 4 : 1; 712916"];
1966 [label="(language == CSharp) 712917"];
1967 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 712918"];
1968 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 712919"];
1969 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 712920"];
1970 [label="IsSortedOrEmpty(expected) 712921"];
1971 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 712922"];
1972 [label="new LinePositionComparer() 712923"];
1973 [label="param LinePositionComparer(this) 712924"];
1974 [label="Instance = new LinePositionComparer() 712925"];
1975 [label="var comparer = LinePositionComparer.Instance; 712926"];
1976 [label="DiagnosticDescription last = null; 712927"];
1977 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 712928"];
1978 [label="return true; 712929"];
1979 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 712930"];
1980 [label="actual = Sort(actual); 712931"];
1981 [label="Sort(actual) 712932"];
1982 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 712933"];
1983 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 712934"];
1984 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 712935"];
1985 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 712936"];
1986 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 712937"];
1987 [label="var assertText = new StringBuilder(); 712938"];
1988 [label="assertText.AppendLine(); 712939"];
1989 [label="int i; 712940"];
1990 [label="assertText.AppendLine('Expected:'); 712941"];
1991 [label="assertText.AppendLine('Expected:'); 712942"];
1992 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 712943"];
1993 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 712944"];
1994 [label="GetCommaSeparatedLines(assertText, expectedText); 712945"];
1995 [label="GetCommaSeparatedLines(assertText, expectedText); 712946"];
1996 [label="GetCommaSeparatedLines(assertText, expectedText) 712947"];
1997 [label="param GetCommaSeparatedLines(StringBuilder sb) 712948"];
1998 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 712949"];
1999 [label="int n = lines.Count; 712950"];
2000 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 712951"];
2001 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 712952"];
2002 [label="GetCommaSeparatedLines(assertText, expectedText); 712953"];
2003 [label="assertText.AppendLine('Actual:'); 712954"];
2004 [label="assertText.AppendLine('Actual:'); 712955"];
2005 [label="var actualText = ArrayBuilder<string>.GetInstance(); 712956"];
2006 [label="var e = actual.GetEnumerator(); 712957"];
2007 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 712958"];
2008 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 712959"];
2009 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 712960"];
2010 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 712961"];
2011 [label="assertText.AppendLine('Diff:'); 712962"];
2012 [label="assertText.AppendLine('Diff:'); 712963"];
2013 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 712964"];
2014 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 712965"];
2015 [label="new[] { '\\r', '\\n' } 712966"];
2016 [label="'\\r' 712967"];
2017 [label="'\\n' 712968"];
2018 [label="new[] { '\\r', '\\n' } 712969"];
2019 [label="new[] { '\\r', '\\n' } 712970"];
2020 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 712971"];
2021 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 712972"];
2022 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 712973"];
2023 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 712974"];
2024 [label="param DiffReport(IEnumerable<T> expected) 712975"];
2025 [label="param DiffReport(IEnumerable<T> actual) 712976"];
2026 [label="param DiffReport(string separator) 712977"];
2027 [label="param DiffReport(IEqualityComparer<T> comparer = null) 712978"];
2028 [label="param DiffReport(Func<T, string> toString = null) 712979"];
2029 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 712980"];
2030 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 712981"];
2031 [label="(comparer != null) 712982"];
2032 [label="EqualityComparer<T>.Default 712983"];
2033 [label="new LCS<T>(EqualityComparer<T>.Default) 712984"];
2034 [label="param LCS(IEqualityComparer<T> comparer) 712985"];
2035 [label="param LCS(this) 712986"];
2036 [label="1 712987"];
2037 [label="DeleteCost = 1 712988"];
2038 [label="1 712989"];
2039 [label="InsertCost = 1 712990"];
2040 [label="2 712991"];
2041 [label="UpdateCost = 2 712992"];
2042 [label="param LongestCommonSubsequence(this) 712993"];
2043 [label="_comparer 712994"];
2044 [label="_comparer 712995"];
2045 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 712996"];
2046 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 712997"];
2047 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 712998"];
2048 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 712999"];
2049 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 713000"];
2050 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 713001"];
2051 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 713002"];
2052 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 713003"];
2053 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 713004"];
2054 [label="lcs.CalculateDiff(expectedList, actualList, toString) 713005"];
2055 [label="param CalculateDiff(IList<T> sequenceA) 713006"];
2056 [label="param CalculateDiff(IList<T> sequenceB) 713007"];
2057 [label="param CalculateDiff(Func<T, string> toString) 713008"];
2058 [label="param CalculateDiff(this) 713009"];
2059 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 713010"];
2060 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 713011"];
2061 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 713012"];
2062 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 713013"];
2063 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 713014"];
2064 [label="param GetEdits(TSequence sequenceA) 713015"];
2065 [label="param GetEdits(int lengthA) 713016"];
2066 [label="param GetEdits(TSequence sequenceB) 713017"];
2067 [label="param GetEdits(int lengthB) 713018"];
2068 [label="param GetEdits(this) 713019"];
2069 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 713020"];
2070 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 713021"];
2071 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 713022"];
2072 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 713023"];
2073 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 713024"];
2074 [label="param ComputeCostMatrix(TSequence sequenceA) 713025"];
2075 [label="param ComputeCostMatrix(int lengthA) 713026"];
2076 [label="param ComputeCostMatrix(TSequence sequenceB) 713027"];
2077 [label="param ComputeCostMatrix(int lengthB) 713028"];
2078 [label="param ComputeCostMatrix(this) 713029"];
2079 [label="var la = lengthA + 1; 713030"];
2080 [label="var la = lengthA + 1; 713031"];
2081 [label="var lb = lengthB + 1; 713032"];
2082 [label="var lb = lengthB + 1; 713033"];
2083 [label="var d = new int[la, lb]; 713034"];
2084 [label="d[0, 0] = 0; 713035"];
2085 [label="d[0, 0] 713036"];
2086 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 713037"];
2087 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 713038"];
2088 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 713039"];
2089 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 713040"];
2090 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 713041"];
2091 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 713042"];
2092 [label="return d; 713043"];
2093 [label="int i = lengthA; 713044"];
2094 [label="int j = lengthB; 713045"];
2095 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 713046"];
2096 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 713047"];
2097 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 713048"];
2098 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 713049"];
2099 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 713050"];
2100 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 713051"];
2101 [label="param GetEdits(this) 713052"];
2102 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 713053"];
2103 [label="param CalculateDiff(this) 713054"];
2104 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 713055"];
2105 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 713056"];
2106 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 713057"];
2107 [label="actualText.Free(); 713058"];
2108 [label="expectedText.Free(); 713059"];
2109 [label="return assertText.ToString(); 713060"];
2110 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 713061"];
2111 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 713062"];
2112 [label="diagnostics.Verify(expected); 713063"];
2113 [label="VerifyAssemblyIds(c, diagnostics); 713064"];
2114 [label="VerifyAssemblyIds(c, diagnostics); 713065"];
2115 [label="VerifyAssemblyIds(c, diagnostics) 713066"];
2116 [label="param VerifyAssemblyIds(TCompilation c) 713067"];
2117 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 713068"];
2118 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 713069"];
2119 [label="VerifyAssemblyIds(c, diagnostics); 713070"];
2120 [label="return c; 713071"];
2 -> 0;
2 -> 1;
3 -> 1;
5 -> 4;
7 -> 6;
9 -> 8;
10 -> 3;
12 -> 11;
14 -> 13;
16 -> 15;
18 -> 17;
20 -> 19;
22 -> 21;
24 -> 23;
26 -> 25;
28 -> 27;
30 -> 29;
32 -> 31;
34 -> 33;
36 -> 35;
38 -> 37;
40 -> 39;
42 -> 41;
44 -> 43;
46 -> 45;
48 -> 47;
49 -> 0;
50 -> 0;
51 -> 49;
51 -> 50;
51 -> 0;
52 -> 51;
53 -> 0;
54 -> 0;
55 -> 53;
55 -> 54;
55 -> 51;
56 -> 55;
57 -> 0;
58 -> 57;
59 -> 58;
59 -> 57;
60 -> 59;
62 -> 0;
63 -> 61;
63 -> 62;
64 -> 63;
65 -> 0;
66 -> 0;
67 -> 65;
67 -> 66;
67 -> 0;
68 -> 67;
69 -> 0;
70 -> 0;
71 -> 69;
71 -> 70;
71 -> 55;
72 -> 71;
73 -> 0;
74 -> 0;
75 -> 73;
75 -> 74;
75 -> 71;
76 -> 75;
77 -> 0;
78 -> 0;
79 -> 77;
79 -> 78;
79 -> 75;
80 -> 79;
81 -> 0;
82 -> 0;
83 -> 81;
83 -> 82;
83 -> 0;
84 -> 83;
85 -> 0;
86 -> 0;
87 -> 85;
87 -> 86;
87 -> 0;
88 -> 87;
89 -> 0;
90 -> 0;
91 -> 89;
91 -> 90;
91 -> 0;
92 -> 91;
93 -> 0;
94 -> 0;
95 -> 93;
95 -> 94;
95 -> 79;
96 -> 95;
97 -> 0;
98 -> 0;
99 -> 97;
99 -> 98;
99 -> 0;
100 -> 99;
102 -> 0;
103 -> 101;
103 -> 102;
104 -> 103;
105 -> 0;
106 -> 0;
107 -> 105;
107 -> 106;
107 -> 95;
108 -> 107;
109 -> 0;
110 -> 0;
111 -> 109;
111 -> 110;
111 -> 0;
112 -> 111;
113 -> 0;
114 -> 0;
115 -> 113;
115 -> 114;
115 -> 0;
116 -> 115;
117 -> 0;
118 -> 0;
119 -> 117;
119 -> 118;
119 -> 0;
120 -> 119;
121 -> 0;
122 -> 0;
123 -> 121;
123 -> 122;
123 -> 0;
124 -> 123;
125 -> 0;
126 -> 0;
127 -> 125;
127 -> 126;
127 -> 0;
128 -> 127;
129 -> 0;
130 -> 0;
131 -> 129;
131 -> 130;
131 -> 107;
132 -> 131;
133 -> 0;
134 -> 0;
135 -> 133;
135 -> 134;
135 -> 131;
136 -> 135;
137 -> 0;
138 -> 0;
139 -> 137;
139 -> 138;
139 -> 135;
140 -> 139;
141 -> 0;
142 -> 0;
143 -> 141;
143 -> 142;
143 -> 139;
144 -> 143;
145 -> 0;
146 -> 0;
147 -> 145;
147 -> 146;
147 -> 0;
148 -> 147;
149 -> 0;
150 -> 0;
151 -> 149;
151 -> 150;
151 -> 0;
152 -> 151;
153 -> 0;
154 -> 0;
155 -> 153;
155 -> 154;
155 -> 143;
156 -> 155;
157 -> 0;
158 -> 0;
159 -> 157;
159 -> 158;
159 -> 0;
160 -> 159;
161 -> 0;
162 -> 0;
163 -> 161;
163 -> 162;
163 -> 0;
164 -> 163;
165 -> 0;
166 -> 0;
167 -> 165;
167 -> 166;
167 -> 0;
168 -> 167;
169 -> 0;
170 -> 0;
171 -> 169;
171 -> 170;
171 -> 155;
172 -> 171;
173 -> 0;
174 -> 0;
175 -> 173;
175 -> 174;
175 -> 0;
176 -> 175;
177 -> 0;
178 -> 0;
179 -> 177;
179 -> 178;
179 -> 0;
180 -> 179;
182 -> 181;
184 -> 182;
184 -> 183;
185 -> 184;
187 -> 0;
187 -> 186;
188 -> 187;
188 -> 0;
189 -> 188;
191 -> 190;
193 -> 192;
195 -> 194;
197 -> 196;
198 -> 10;
199 -> 198;
200 -> 199;
201 -> 200;
201 -> 199;
202 -> 1;
202 -> 2;
202 -> 201;
203 -> 1;
204 -> 1;
205 -> 204;
205 -> 1;
206 -> 1;
207 -> 205;
207 -> 206;
208 -> 207;
208 -> 206;
209 -> 206;
210 -> 208;
210 -> 209;
211 -> 209;
212 -> 210;
212 -> 211;
212 -> 209;
213 -> 209;
213 -> 1;
214 -> 1;
215 -> 1;
216 -> 213;
216 -> 215;
217 -> 214;
217 -> 215;
218 -> 214;
218 -> 215;
219 -> 214;
219 -> 215;
220 -> 214;
220 -> 215;
221 -> 214;
221 -> 215;
222 -> 214;
222 -> 215;
223 -> 216;
223 -> 215;
224 -> 217;
224 -> 215;
225 -> 218;
225 -> 215;
226 -> 219;
226 -> 215;
227 -> 0;
227 -> 215;
228 -> 220;
228 -> 215;
229 -> 221;
229 -> 215;
230 -> 222;
230 -> 215;
231 -> 215;
232 -> 223;
232 -> 231;
233 -> 224;
233 -> 231;
234 -> 225;
234 -> 231;
235 -> 226;
235 -> 231;
236 -> 227;
236 -> 231;
237 -> 228;
237 -> 231;
238 -> 229;
238 -> 231;
239 -> 230;
239 -> 231;
240 -> 232;
240 -> 231;
241 -> 236;
241 -> 231;
242 -> 233;
242 -> 231;
243 -> 231;
244 -> 241;
244 -> 243;
245 -> 242;
245 -> 243;
246 -> 244;
246 -> 243;
247 -> 243;
248 -> 246;
248 -> 247;
249 -> 248;
249 -> 247;
250 -> 249;
251 -> 0;
251 -> 250;
252 -> 251;
252 -> 0;
252 -> 250;
253 -> 243;
254 -> 245;
254 -> 253;
254 -> 243;
255 -> 252;
255 -> 254;
256 -> 234;
256 -> 231;
257 -> 235;
257 -> 231;
258 -> 237;
258 -> 231;
259 -> 238;
259 -> 231;
260 -> 239;
260 -> 231;
261 -> 231;
262 -> 240;
262 -> 261;
263 -> 255;
263 -> 261;
264 -> 256;
264 -> 261;
265 -> 257;
265 -> 261;
266 -> 258;
266 -> 261;
267 -> 259;
267 -> 261;
268 -> 260;
268 -> 261;
269 -> 262;
269 -> 261;
270 -> 263;
270 -> 261;
271 -> 264;
271 -> 261;
272 -> 265;
272 -> 261;
273 -> 266;
273 -> 261;
274 -> 267;
274 -> 261;
275 -> 268;
275 -> 261;
276 -> 261;
277 -> 276;
277 -> 261;
278 -> 261;
279 -> 269;
279 -> 278;
280 -> 270;
280 -> 278;
281 -> 271;
281 -> 278;
282 -> 272;
282 -> 278;
283 -> 273;
283 -> 278;
284 -> 274;
284 -> 278;
285 -> 275;
285 -> 278;
286 -> 277;
286 -> 278;
287 -> 282;
287 -> 278;
288 -> 284;
288 -> 278;
289 -> 278;
290 -> 287;
290 -> 289;
291 -> 288;
291 -> 289;
292 -> 279;
292 -> 289;
293 -> 292;
293 -> 212;
293 -> 289;
294 -> 293;
295 -> 291;
295 -> 293;
296 -> 290;
296 -> 293;
297 -> 293;
298 -> 294;
298 -> 297;
299 -> 295;
299 -> 297;
300 -> 296;
300 -> 297;
301 -> 294;
301 -> 297;
302 -> 297;
303 -> 300;
303 -> 302;
303 -> 297;
304 -> 0;
305 -> 0;
307 -> 304;
307 -> 305;
307 -> 306;
308 -> 307;
309 -> 0;
310 -> 308;
310 -> 307;
310 -> 309;
311 -> 310;
312 -> 0;
313 -> 308;
313 -> 307;
313 -> 312;
314 -> 313;
315 -> 0;
316 -> 308;
316 -> 307;
316 -> 315;
317 -> 316;
318 -> 0;
319 -> 308;
319 -> 307;
319 -> 318;
320 -> 319;
321 -> 0;
322 -> 308;
322 -> 307;
322 -> 321;
323 -> 322;
324 -> 0;
325 -> 308;
325 -> 307;
325 -> 324;
326 -> 325;
327 -> 0;
328 -> 308;
328 -> 307;
328 -> 327;
329 -> 328;
330 -> 0;
331 -> 308;
331 -> 307;
331 -> 330;
332 -> 331;
333 -> 0;
334 -> 308;
334 -> 307;
334 -> 333;
335 -> 334;
336 -> 0;
337 -> 308;
337 -> 307;
337 -> 336;
338 -> 337;
339 -> 0;
340 -> 308;
340 -> 307;
340 -> 339;
341 -> 340;
342 -> 308;
345 -> 342;
345 -> 344;
346 -> 343;
346 -> 344;
347 -> 344;
348 -> 345;
348 -> 307;
348 -> 344;
349 -> 344;
350 -> 346;
350 -> 344;
351 -> 347;
351 -> 344;
352 -> 350;
352 -> 351;
352 -> 344;
353 -> 352;
353 -> 349;
353 -> 344;
354 -> 348;
354 -> 349;
354 -> 307;
354 -> 353;
354 -> 352;
354 -> 344;
355 -> 354;
356 -> 0;
357 -> 356;
359 -> 357;
359 -> 358;
360 -> 308;
360 -> 307;
360 -> 359;
361 -> 360;
362 -> 0;
363 -> 362;
364 -> 308;
364 -> 307;
364 -> 363;
365 -> 364;
366 -> 0;
367 -> 308;
367 -> 307;
367 -> 366;
368 -> 367;
369 -> 332;
371 -> 370;
372 -> 0;
373 -> 0;
374 -> 0;
376 -> 372;
376 -> 373;
376 -> 374;
376 -> 375;
377 -> 371;
378 -> 376;
378 -> 377;
378 -> 370;
379 -> 378;
383 -> 380;
383 -> 381;
383 -> 382;
384 -> 314;
384 -> 307;
384 -> 313;
384 -> 380;
384 -> 383;
385 -> 384;
386 -> 326;
387 -> 335;
388 -> 335;
389 -> 332;
390 -> 0;
391 -> 0;
393 -> 390;
393 -> 392;
394 -> 391;
394 -> 392;
395 -> 392;
396 -> 393;
396 -> 392;
397 -> 394;
397 -> 392;
398 -> 0;
398 -> 392;
399 -> 395;
399 -> 392;
400 -> 392;
401 -> 396;
401 -> 397;
401 -> 398;
401 -> 399;
401 -> 400;
401 -> 392;
402 -> 401;
403 -> 0;
404 -> 0;
406 -> 403;
406 -> 405;
407 -> 404;
407 -> 405;
408 -> 405;
409 -> 406;
409 -> 405;
410 -> 407;
410 -> 405;
411 -> 0;
411 -> 405;
412 -> 408;
412 -> 405;
413 -> 405;
414 -> 409;
414 -> 410;
414 -> 411;
414 -> 412;
414 -> 413;
414 -> 405;
415 -> 414;
417 -> 402;
417 -> 401;
417 -> 416;
418 -> 417;
420 -> 415;
420 -> 414;
420 -> 419;
421 -> 420;
422 -> 0;
423 -> 0;
425 -> 422;
425 -> 424;
426 -> 423;
426 -> 424;
427 -> 424;
428 -> 425;
428 -> 424;
429 -> 426;
429 -> 424;
430 -> 0;
430 -> 424;
431 -> 427;
431 -> 424;
432 -> 424;
433 -> 428;
433 -> 429;
433 -> 430;
433 -> 431;
433 -> 432;
433 -> 424;
434 -> 433;
435 -> 0;
436 -> 0;
438 -> 435;
438 -> 437;
439 -> 436;
439 -> 437;
440 -> 437;
441 -> 438;
441 -> 437;
442 -> 439;
442 -> 437;
443 -> 0;
443 -> 437;
444 -> 440;
444 -> 437;
445 -> 437;
446 -> 441;
446 -> 442;
446 -> 443;
446 -> 444;
446 -> 445;
446 -> 437;
447 -> 446;
448 -> 0;
449 -> 0;
451 -> 448;
451 -> 450;
452 -> 449;
452 -> 450;
453 -> 450;
454 -> 451;
454 -> 450;
455 -> 452;
455 -> 450;
456 -> 0;
456 -> 450;
457 -> 453;
457 -> 450;
458 -> 450;
459 -> 454;
459 -> 455;
459 -> 456;
459 -> 457;
459 -> 458;
459 -> 450;
460 -> 459;
461 -> 0;
462 -> 0;
464 -> 461;
464 -> 463;
465 -> 462;
465 -> 463;
466 -> 463;
467 -> 464;
467 -> 463;
468 -> 465;
468 -> 463;
469 -> 0;
469 -> 463;
470 -> 466;
470 -> 463;
471 -> 463;
472 -> 467;
472 -> 468;
472 -> 469;
472 -> 470;
472 -> 471;
472 -> 463;
473 -> 472;
474 -> 0;
475 -> 0;
477 -> 474;
477 -> 476;
478 -> 475;
478 -> 476;
479 -> 476;
480 -> 477;
480 -> 476;
481 -> 478;
481 -> 476;
482 -> 0;
482 -> 476;
483 -> 479;
483 -> 476;
484 -> 476;
485 -> 480;
485 -> 481;
485 -> 482;
485 -> 483;
485 -> 484;
485 -> 476;
486 -> 485;
487 -> 0;
488 -> 0;
490 -> 487;
490 -> 489;
491 -> 488;
491 -> 489;
492 -> 489;
493 -> 490;
493 -> 489;
494 -> 491;
494 -> 489;
495 -> 0;
495 -> 489;
496 -> 492;
496 -> 489;
497 -> 489;
498 -> 493;
498 -> 494;
498 -> 495;
498 -> 496;
498 -> 497;
498 -> 489;
499 -> 498;
501 -> 402;
501 -> 401;
501 -> 500;
502 -> 501;
504 -> 415;
504 -> 414;
504 -> 503;
505 -> 504;
507 -> 434;
507 -> 433;
507 -> 506;
508 -> 507;
510 -> 447;
510 -> 446;
510 -> 509;
511 -> 510;
512 -> 0;
513 -> 402;
513 -> 401;
513 -> 512;
513 -> 0;
514 -> 513;
515 -> 0;
516 -> 415;
516 -> 414;
516 -> 515;
516 -> 0;
517 -> 516;
518 -> 0;
519 -> 486;
519 -> 485;
519 -> 518;
519 -> 0;
520 -> 519;
521 -> 0;
522 -> 434;
522 -> 433;
522 -> 521;
522 -> 0;
523 -> 522;
524 -> 0;
525 -> 0;
525 -> 524;
526 -> 525;
527 -> 308;
527 -> 303;
528 -> 298;
528 -> 297;
529 -> 0;
529 -> 297;
530 -> 529;
530 -> 301;
530 -> 297;
531 -> 297;
532 -> 528;
532 -> 530;
532 -> 531;
532 -> 0;
532 -> 297;
533 -> 532;
533 -> 297;
534 -> 527;
534 -> 297;
535 -> 299;
535 -> 297;
536 -> 297;
537 -> 533;
537 -> 534;
537 -> 535;
537 -> 536;
537 -> 532;
537 -> 307;
537 -> 297;
538 -> 297;
539 -> 537;
539 -> 538;
540 -> 538;
541 -> 538;
542 -> 539;
542 -> 537;
542 -> 541;
542 -> 538;
543 -> 540;
543 -> 538;
544 -> 538;
545 -> 542;
545 -> 537;
545 -> 541;
545 -> 543;
545 -> 544;
545 -> 540;
545 -> 538;
546 -> 538;
547 -> 546;
547 -> 540;
547 -> 538;
548 -> 540;
548 -> 538;
549 -> 538;
550 -> 548;
550 -> 549;
550 -> 540;
550 -> 547;
550 -> 538;
551 -> 539;
551 -> 538;
552 -> 551;
552 -> 294;
552 -> 293;
553 -> 294;
553 -> 278;
554 -> 278;
555 -> 281;
555 -> 554;
555 -> 278;
556 -> 553;
556 -> 555;
557 -> 555;
558 -> 556;
558 -> 557;
558 -> 294;
558 -> 552;
558 -> 537;
558 -> 555;
559 -> 558;
559 -> 555;
560 -> 402;
560 -> 559;
561 -> 0;
561 -> 278;
562 -> 286;
562 -> 278;
563 -> 283;
563 -> 553;
563 -> 280;
563 -> 560;
563 -> 278;
564 -> 563;
564 -> 278;
565 -> 278;
566 -> 564;
566 -> 565;
567 -> 0;
567 -> 565;
568 -> 567;
569 -> 278;
570 -> 563;
570 -> 294;
570 -> 552;
570 -> 537;
570 -> 252;
570 -> 0;
570 -> 401;
570 -> 278;
571 -> 278;
572 -> 571;
573 -> 570;
573 -> 572;
573 -> 278;
574 -> 573;
574 -> 278;
575 -> 278;
576 -> 574;
576 -> 575;
577 -> 576;
577 -> 573;
577 -> 575;
578 -> 577;
578 -> 573;
578 -> 575;
579 -> 575;
580 -> 577;
580 -> 579;
580 -> 573;
580 -> 575;
581 -> 0;
581 -> 575;
582 -> 580;
582 -> 581;
582 -> 575;
583 -> 285;
583 -> 582;
583 -> 278;
584 -> 573;
584 -> 278;
585 -> 1;
586 -> 584;
586 -> 585;
587 -> 214;
587 -> 585;
588 -> 585;
590 -> 0;
591 -> 0;
592 -> 0;
595 -> 589;
595 -> 594;
596 -> 590;
596 -> 594;
597 -> 591;
597 -> 594;
598 -> 592;
598 -> 594;
599 -> 593;
599 -> 594;
600 -> 594;
601 -> 600;
601 -> 594;
602 -> 600;
602 -> 594;
603 -> 600;
603 -> 594;
604 -> 594;
605 -> 596;
605 -> 604;
605 -> 594;
606 -> 597;
606 -> 0;
606 -> 594;
607 -> 598;
607 -> 0;
607 -> 594;
608 -> 595;
608 -> 600;
608 -> 594;
609 -> 596;
609 -> 600;
609 -> 594;
610 -> 597;
610 -> 600;
610 -> 594;
611 -> 599;
611 -> 600;
611 -> 594;
612 -> 598;
612 -> 600;
612 -> 594;
613 -> 594;
614 -> 588;
614 -> 586;
614 -> 582;
614 -> 585;
615 -> 614;
615 -> 588;
616 -> 615;
616 -> 614;
616 -> 588;
617 -> 588;
618 -> 616;
618 -> 614;
618 -> 617;
618 -> 588;
619 -> 615;
619 -> 614;
619 -> 617;
619 -> 588;
620 -> 613;
620 -> 618;
621 -> 614;
621 -> 620;
621 -> 608;
621 -> 611;
621 -> 609;
621 -> 610;
621 -> 612;
621 -> 0;
621 -> 585;
622 -> 614;
622 -> 588;
623 -> 614;
623 -> 588;
624 -> 588;
625 -> 622;
625 -> 621;
625 -> 624;
626 -> 623;
626 -> 625;
626 -> 624;
627 -> 626;
627 -> 624;
628 -> 0;
628 -> 627;
629 -> 626;
629 -> 624;
630 -> 622;
630 -> 624;
631 -> 623;
631 -> 628;
631 -> 629;
631 -> 630;
631 -> 624;
632 -> 0;
632 -> 631;
633 -> 632;
634 -> 623;
634 -> 633;
635 -> 634;
635 -> 613;
635 -> 633;
636 -> 635;
637 -> 632;
638 -> 0;
638 -> 632;
639 -> 638;
640 -> 614;
640 -> 588;
641 -> 614;
641 -> 588;
642 -> 640;
642 -> 641;
642 -> 588;
643 -> 614;
643 -> 642;
643 -> 638;
643 -> 585;
645 -> 644;
647 -> 646;
649 -> 648;
652 -> 651;
653 -> 0;
654 -> 0;
655 -> 0;
656 -> 655;
658 -> 653;
658 -> 654;
658 -> 656;
658 -> 657;
659 -> 658;
661 -> 660;
663 -> 662;
665 -> 664;
667 -> 666;
668 -> 614;
668 -> 588;
669 -> 614;
669 -> 588;
670 -> 614;
670 -> 588;
671 -> 614;
671 -> 588;
672 -> 614;
672 -> 588;
673 -> 588;
674 -> 671;
674 -> 673;
674 -> 588;
675 -> 672;
675 -> 673;
675 -> 588;
676 -> 674;
676 -> 675;
676 -> 588;
677 -> 669;
677 -> 588;
678 -> 668;
678 -> 588;
679 -> 669;
679 -> 588;
680 -> 670;
680 -> 588;
681 -> 671;
681 -> 588;
682 -> 672;
682 -> 588;
683 -> 677;
683 -> 588;
684 -> 588;
685 -> 678;
685 -> 684;
686 -> 679;
686 -> 684;
687 -> 680;
687 -> 684;
688 -> 681;
688 -> 684;
689 -> 682;
689 -> 684;
690 -> 683;
690 -> 684;
691 -> 684;
692 -> 689;
692 -> 691;
692 -> 684;
693 -> 688;
693 -> 691;
693 -> 684;
694 -> 692;
694 -> 693;
694 -> 684;
695 -> 684;
696 -> 685;
696 -> 684;
697 -> 686;
697 -> 684;
698 -> 695;
698 -> 684;
699 -> 690;
699 -> 684;
700 -> 684;
701 -> 696;
701 -> 700;
702 -> 697;
702 -> 700;
703 -> 698;
703 -> 700;
704 -> 699;
704 -> 700;
705 -> 702;
705 -> 700;
706 -> 705;
706 -> 701;
706 -> 643;
706 -> 700;
707 -> 700;
708 -> 706;
708 -> 707;
709 -> 706;
709 -> 707;
710 -> 708;
710 -> 707;
711 -> 708;
711 -> 706;
711 -> 707;
712 -> 707;
713 -> 708;
713 -> 706;
713 -> 707;
714 -> 708;
714 -> 706;
714 -> 707;
715 -> 714;
715 -> 707;
716 -> 707;
717 -> 712;
717 -> 716;
717 -> 700;
718 -> 712;
718 -> 707;
719 -> 712;
719 -> 707;
720 -> 718;
720 -> 707;
721 -> 718;
721 -> 707;
722 -> 718;
722 -> 707;
723 -> 718;
723 -> 707;
724 -> 723;
724 -> 707;
725 -> 723;
725 -> 724;
726 -> 701;
726 -> 705;
726 -> 706;
726 -> 716;
726 -> 700;
727 -> 700;
728 -> 726;
728 -> 727;
728 -> 700;
729 -> 726;
729 -> 728;
730 -> 728;
731 -> 729;
731 -> 730;
732 -> 729;
732 -> 730;
733 -> 731;
733 -> 730;
734 -> 731;
734 -> 729;
734 -> 730;
735 -> 730;
736 -> 731;
736 -> 729;
736 -> 730;
737 -> 731;
737 -> 729;
737 -> 730;
738 -> 737;
738 -> 730;
739 -> 735;
739 -> 730;
740 -> 735;
740 -> 730;
741 -> 739;
741 -> 730;
742 -> 739;
742 -> 730;
743 -> 739;
743 -> 730;
744 -> 739;
744 -> 730;
745 -> 744;
745 -> 730;
746 -> 728;
747 -> 730;
747 -> 746;
747 -> 728;
748 -> 726;
748 -> 700;
749 -> 684;
750 -> 730;
750 -> 749;
750 -> 684;
751 -> 748;
751 -> 684;
752 -> 730;
752 -> 707;
753 -> 730;
753 -> 707;
754 -> 752;
754 -> 707;
755 -> 752;
755 -> 730;
755 -> 707;
756 -> 752;
756 -> 730;
756 -> 707;
757 -> 752;
757 -> 730;
757 -> 707;
758 -> 757;
758 -> 707;
759 -> 735;
760 -> 735;
761 -> 759;
761 -> 735;
762 -> 759;
762 -> 735;
763 -> 759;
763 -> 735;
764 -> 759;
764 -> 735;
765 -> 764;
765 -> 735;
766 -> 730;
767 -> 735;
767 -> 766;
767 -> 730;
768 -> 730;
768 -> 700;
769 -> 735;
769 -> 749;
769 -> 684;
770 -> 768;
770 -> 684;
771 -> 735;
772 -> 735;
772 -> 700;
773 -> 772;
773 -> 684;
774 -> 614;
774 -> 588;
775 -> 614;
775 -> 588;
776 -> 774;
776 -> 588;
777 -> 774;
777 -> 735;
777 -> 588;
778 -> 588;
779 -> 774;
779 -> 735;
779 -> 588;
780 -> 774;
780 -> 735;
780 -> 588;
781 -> 780;
781 -> 588;
782 -> 588;
783 -> 778;
783 -> 782;
783 -> 585;
784 -> 778;
784 -> 588;
785 -> 778;
785 -> 588;
786 -> 784;
786 -> 588;
787 -> 784;
787 -> 588;
788 -> 784;
788 -> 588;
789 -> 784;
789 -> 588;
790 -> 789;
790 -> 588;
791 -> 778;
791 -> 588;
792 -> 778;
792 -> 588;
793 -> 778;
793 -> 588;
794 -> 778;
794 -> 588;
795 -> 791;
795 -> 588;
796 -> 588;
797 -> 794;
797 -> 796;
798 -> 797;
798 -> 0;
798 -> 796;
799 -> 798;
799 -> 588;
800 -> 588;
801 -> 791;
801 -> 800;
801 -> 588;
802 -> 799;
802 -> 801;
802 -> 588;
803 -> 791;
803 -> 802;
804 -> 803;
804 -> 588;
805 -> 795;
805 -> 588;
806 -> 792;
806 -> 588;
807 -> 793;
807 -> 588;
808 -> 588;
809 -> 804;
809 -> 808;
810 -> 805;
810 -> 808;
811 -> 806;
811 -> 808;
812 -> 807;
812 -> 808;
813 -> 794;
813 -> 808;
814 -> 808;
815 -> 809;
815 -> 814;
815 -> 808;
816 -> 812;
816 -> 808;
817 -> 813;
817 -> 808;
818 -> 808;
819 -> 817;
819 -> 818;
820 -> 817;
820 -> 818;
821 -> 818;
822 -> 821;
822 -> 818;
823 -> 821;
823 -> 818;
824 -> 821;
824 -> 818;
825 -> 821;
825 -> 818;
826 -> 819;
826 -> 821;
826 -> 818;
827 -> 817;
827 -> 821;
827 -> 822;
827 -> 823;
827 -> 824;
827 -> 825;
827 -> 826;
827 -> 808;
828 -> 810;
828 -> 808;
829 -> 811;
829 -> 808;
830 -> 812;
830 -> 808;
831 -> 808;
832 -> 828;
832 -> 831;
833 -> 829;
833 -> 831;
834 -> 830;
834 -> 831;
835 -> 827;
835 -> 831;
836 -> 831;
837 -> 833;
837 -> 836;
837 -> 831;
838 -> 834;
838 -> 836;
838 -> 831;
839 -> 837;
839 -> 838;
839 -> 831;
840 -> 832;
840 -> 835;
840 -> 831;
841 -> 833;
841 -> 835;
841 -> 831;
842 -> 834;
842 -> 835;
842 -> 831;
843 -> 808;
844 -> 809;
844 -> 808;
845 -> 808;
846 -> 844;
846 -> 845;
847 -> 827;
847 -> 845;
848 -> 846;
848 -> 845;
849 -> 845;
850 -> 848;
850 -> 849;
851 -> 847;
851 -> 849;
852 -> 851;
852 -> 849;
853 -> 852;
853 -> 850;
853 -> 827;
853 -> 840;
853 -> 841;
853 -> 842;
853 -> 849;
854 -> 849;
855 -> 853;
855 -> 854;
856 -> 853;
856 -> 854;
857 -> 856;
857 -> 853;
857 -> 854;
858 -> 855;
858 -> 854;
859 -> 857;
859 -> 858;
859 -> 853;
859 -> 854;
860 -> 855;
860 -> 854;
861 -> 0;
861 -> 854;
862 -> 854;
863 -> 860;
863 -> 862;
864 -> 861;
864 -> 862;
865 -> 864;
865 -> 862;
866 -> 862;
867 -> 863;
867 -> 862;
868 -> 864;
868 -> 862;
869 -> 862;
870 -> 862;
871 -> 867;
871 -> 870;
872 -> 868;
872 -> 870;
873 -> 869;
873 -> 870;
874 -> 871;
874 -> 873;
874 -> 870;
875 -> 872;
875 -> 873;
875 -> 870;
876 -> 869;
876 -> 854;
877 -> 854;
878 -> 854;
879 -> 856;
879 -> 878;
880 -> 879;
880 -> 859;
880 -> 878;
881 -> 880;
881 -> 854;
882 -> 876;
882 -> 854;
883 -> 877;
883 -> 854;
884 -> 882;
884 -> 883;
884 -> 881;
884 -> 874;
884 -> 875;
884 -> 859;
884 -> 854;
885 -> 854;
886 -> 884;
886 -> 885;
887 -> 886;
887 -> 884;
887 -> 885;
888 -> 855;
888 -> 887;
889 -> 887;
890 -> 888;
890 -> 889;
891 -> 890;
891 -> 889;
892 -> 890;
892 -> 889;
893 -> 891;
893 -> 889;
894 -> 889;
895 -> 893;
895 -> 894;
896 -> 892;
896 -> 894;
897 -> 895;
897 -> 890;
897 -> 894;
898 -> 894;
899 -> 898;
899 -> 894;
900 -> 895;
900 -> 890;
900 -> 894;
901 -> 896;
901 -> 900;
901 -> 897;
901 -> 890;
902 -> 896;
902 -> 900;
902 -> 901;
903 -> 901;
904 -> 902;
904 -> 894;
905 -> 894;
906 -> 904;
906 -> 905;
906 -> 894;
907 -> 904;
907 -> 895;
907 -> 894;
908 -> 904;
908 -> 906;
909 -> 0;
909 -> 906;
910 -> 904;
910 -> 908;
910 -> 906;
911 -> 894;
912 -> 911;
912 -> 889;
913 -> 889;
914 -> 892;
914 -> 913;
915 -> 913;
916 -> 914;
916 -> 910;
916 -> 915;
917 -> 916;
917 -> 913;
918 -> 889;
919 -> 893;
919 -> 918;
920 -> 912;
920 -> 918;
921 -> 917;
921 -> 918;
922 -> 892;
922 -> 918;
923 -> 918;
924 -> 922;
924 -> 923;
925 -> 924;
925 -> 910;
925 -> 923;
926 -> 925;
926 -> 918;
927 -> 918;
928 -> 919;
928 -> 926;
928 -> 918;
929 -> 920;
929 -> 918;
930 -> 921;
930 -> 929;
931 -> 0;
931 -> 930;
932 -> 919;
932 -> 918;
933 -> 931;
933 -> 918;
934 -> 918;
935 -> 932;
935 -> 934;
936 -> 933;
936 -> 934;
937 -> 936;
937 -> 934;
938 -> 934;
939 -> 934;
939 -> 918;
940 -> 918;
941 -> 918;
942 -> 922;
942 -> 941;
943 -> 942;
943 -> 910;
943 -> 941;
944 -> 943;
944 -> 918;
945 -> 939;
945 -> 918;
946 -> 940;
946 -> 918;
947 -> 945;
947 -> 946;
947 -> 944;
947 -> 935;
947 -> 936;
947 -> 910;
947 -> 918;
948 -> 918;
949 -> 947;
950 -> 922;
950 -> 949;
951 -> 950;
951 -> 947;
951 -> 949;
952 -> 951;
952 -> 947;
953 -> 921;
953 -> 947;
954 -> 953;
955 -> 922;
955 -> 954;
956 -> 955;
956 -> 947;
956 -> 954;
957 -> 956;
957 -> 953;
958 -> 952;
958 -> 953;
959 -> 919;
959 -> 953;
960 -> 920;
960 -> 953;
961 -> 953;
962 -> 953;
963 -> 957;
963 -> 962;
964 -> 958;
964 -> 962;
965 -> 959;
965 -> 962;
966 -> 960;
966 -> 962;
967 -> 961;
967 -> 962;
968 -> 964;
968 -> 962;
969 -> 962;
970 -> 968;
970 -> 969;
971 -> 967;
971 -> 969;
972 -> 969;
973 -> 971;
973 -> 969;
974 -> 971;
974 -> 969;
975 -> 971;
975 -> 969;
976 -> 971;
976 -> 969;
977 -> 971;
977 -> 969;
978 -> 969;
979 -> 970;
979 -> 978;
979 -> 969;
980 -> 970;
980 -> 971;
980 -> 969;
981 -> 970;
981 -> 947;
981 -> 971;
981 -> 969;
982 -> 970;
982 -> 947;
982 -> 971;
982 -> 969;
983 -> 972;
983 -> 971;
983 -> 969;
984 -> 967;
984 -> 962;
985 -> 967;
985 -> 962;
986 -> 967;
986 -> 962;
987 -> 967;
987 -> 962;
988 -> 967;
988 -> 962;
989 -> 962;
990 -> 963;
990 -> 989;
990 -> 962;
991 -> 962;
992 -> 965;
992 -> 991;
992 -> 962;
993 -> 963;
993 -> 967;
993 -> 962;
994 -> 965;
994 -> 967;
994 -> 966;
994 -> 962;
995 -> 994;
995 -> 967;
995 -> 962;
996 -> 966;
996 -> 962;
997 -> 965;
997 -> 947;
997 -> 996;
998 -> 965;
998 -> 997;
999 -> 998;
999 -> 997;
999 -> 967;
1000 -> 953;
1001 -> 922;
1001 -> 1000;
1002 -> 1001;
1002 -> 997;
1002 -> 1000;
1003 -> 1002;
1003 -> 953;
1004 -> 919;
1004 -> 953;
1005 -> 953;
1006 -> 947;
1007 -> 1006;
1007 -> 1003;
1008 -> 1007;
1008 -> 947;
1009 -> 939;
1009 -> 947;
1010 -> 961;
1010 -> 947;
1011 -> 1009;
1011 -> 1010;
1011 -> 1008;
1011 -> 935;
1011 -> 936;
1011 -> 982;
1011 -> 981;
1011 -> 980;
1011 -> 983;
1011 -> 977;
1011 -> 993;
1011 -> 995;
1011 -> 986;
1011 -> 987;
1011 -> 988;
1011 -> 999;
1011 -> 1003;
1011 -> 994;
1011 -> 997;
1011 -> 947;
1012 -> 947;
1013 -> 1011;
1013 -> 1012;
1014 -> 1011;
1014 -> 1012;
1015 -> 1014;
1015 -> 1011;
1015 -> 1013;
1015 -> 1012;
1016 -> 961;
1016 -> 918;
1017 -> 890;
1017 -> 1016;
1017 -> 1015;
1017 -> 889;
1018 -> 887;
1019 -> 1017;
1019 -> 1018;
1020 -> 1019;
1020 -> 1017;
1020 -> 1018;
1021 -> 1018;
1022 -> 1020;
1022 -> 1021;
1022 -> 1018;
1023 -> 1022;
1023 -> 1018;
1024 -> 1023;
1024 -> 887;
1025 -> 855;
1025 -> 887;
1026 -> 1024;
1026 -> 887;
1027 -> 1017;
1027 -> 887;
1028 -> 887;
1029 -> 887;
1030 -> 1026;
1030 -> 1029;
1031 -> 1027;
1031 -> 1029;
1032 -> 1028;
1032 -> 1029;
1033 -> 1028;
1033 -> 1029;
1034 -> 1031;
1034 -> 1029;
1035 -> 1029;
1036 -> 1034;
1036 -> 1035;
1037 -> 1033;
1037 -> 1035;
1038 -> 1035;
1039 -> 1037;
1039 -> 1035;
1040 -> 1037;
1040 -> 1035;
1041 -> 1037;
1041 -> 1035;
1042 -> 1037;
1042 -> 1035;
1043 -> 1037;
1043 -> 1035;
1044 -> 1035;
1045 -> 1036;
1045 -> 1044;
1045 -> 1035;
1046 -> 1036;
1046 -> 1024;
1046 -> 1037;
1046 -> 1035;
1047 -> 1036;
1047 -> 1024;
1047 -> 1037;
1047 -> 1035;
1048 -> 1038;
1048 -> 1037;
1048 -> 1035;
1049 -> 1033;
1049 -> 1029;
1050 -> 1033;
1050 -> 1029;
1051 -> 1033;
1051 -> 1029;
1052 -> 1033;
1052 -> 1029;
1053 -> 1033;
1053 -> 1029;
1054 -> 1029;
1055 -> 1030;
1055 -> 1054;
1055 -> 1029;
1056 -> 1030;
1056 -> 1033;
1056 -> 1029;
1057 -> 613;
1057 -> 1029;
1058 -> 1057;
1058 -> 1032;
1058 -> 1029;
1059 -> 1058;
1059 -> 1033;
1059 -> 1029;
1060 -> 887;
1061 -> 855;
1061 -> 1024;
1061 -> 1060;
1061 -> 887;
1062 -> 855;
1062 -> 1024;
1062 -> 887;
1063 -> 887;
1064 -> 1062;
1064 -> 1063;
1065 -> 1028;
1065 -> 1063;
1066 -> 1065;
1066 -> 1046;
1066 -> 1063;
1067 -> 0;
1067 -> 1063;
1068 -> 1063;
1069 -> 1066;
1069 -> 1068;
1070 -> 1067;
1070 -> 1068;
1071 -> 1069;
1071 -> 1070;
1071 -> 1068;
1072 -> 1064;
1072 -> 1063;
1073 -> 1071;
1073 -> 1072;
1073 -> 1063;
1074 -> 1073;
1074 -> 1063;
1075 -> 887;
1076 -> 1075;
1076 -> 1072;
1077 -> 1076;
1077 -> 887;
1078 -> 876;
1078 -> 887;
1079 -> 1074;
1079 -> 887;
1080 -> 1078;
1080 -> 1079;
1080 -> 1077;
1080 -> 874;
1080 -> 875;
1080 -> 1047;
1080 -> 1046;
1080 -> 1036;
1080 -> 1048;
1080 -> 1043;
1080 -> 1056;
1080 -> 1050;
1080 -> 1059;
1080 -> 1052;
1080 -> 1053;
1080 -> 1072;
1080 -> 735;
1080 -> 887;
1081 -> 887;
1082 -> 1074;
1082 -> 854;
1083 -> 853;
1083 -> 1082;
1083 -> 1080;
1083 -> 849;
1084 -> 827;
1084 -> 808;
1085 -> 813;
1085 -> 1084;
1085 -> 1083;
1085 -> 808;
1086 -> 1083;
1086 -> 808;
1087 -> 778;
1087 -> 1086;
1087 -> 1085;
1087 -> 585;
1088 -> 778;
1088 -> 588;
1089 -> 778;
1089 -> 588;
1090 -> 778;
1090 -> 588;
1091 -> 778;
1091 -> 588;
1092 -> 778;
1092 -> 588;
1093 -> 1088;
1093 -> 588;
1094 -> 1089;
1094 -> 588;
1095 -> 1090;
1095 -> 588;
1096 -> 1091;
1096 -> 588;
1097 -> 588;
1098 -> 1093;
1098 -> 1097;
1099 -> 1094;
1099 -> 1097;
1100 -> 1095;
1100 -> 1097;
1101 -> 1096;
1101 -> 1097;
1102 -> 1092;
1102 -> 1097;
1103 -> 1097;
1104 -> 1099;
1104 -> 1103;
1104 -> 1097;
1105 -> 1098;
1105 -> 1097;
1106 -> 1099;
1106 -> 1097;
1107 -> 1100;
1107 -> 1097;
1108 -> 1097;
1109 -> 1100;
1109 -> 1108;
1109 -> 1097;
1110 -> 1109;
1110 -> 1101;
1110 -> 1097;
1111 -> 1097;
1112 -> 1105;
1112 -> 1111;
1113 -> 1106;
1113 -> 1111;
1114 -> 1107;
1114 -> 1111;
1115 -> 1110;
1115 -> 1111;
1116 -> 1102;
1116 -> 1111;
1117 -> 1112;
1117 -> 1111;
1118 -> 1112;
1118 -> 1117;
1119 -> 1113;
1119 -> 1117;
1120 -> 1117;
1121 -> 1118;
1121 -> 1120;
1122 -> 1119;
1122 -> 1120;
1123 -> 1116;
1123 -> 1120;
1124 -> 1121;
1124 -> 1120;
1125 -> 1124;
1125 -> 1120;
1126 -> 1122;
1126 -> 1120;
1127 -> 1120;
1128 -> 1125;
1128 -> 1127;
1129 -> 1126;
1129 -> 1127;
1130 -> 1123;
1130 -> 1127;
1131 -> 1128;
1131 -> 1127;
1132 -> 1129;
1132 -> 1127;
1133 -> 1127;
1134 -> 1131;
1134 -> 1133;
1135 -> 1132;
1135 -> 1133;
1136 -> 1131;
1136 -> 1133;
1137 -> 1130;
1137 -> 1133;
1138 -> 1137;
1138 -> 1133;
1139 -> 1134;
1139 -> 1133;
1140 -> 1136;
1140 -> 1133;
1141 -> 1135;
1141 -> 1133;
1142 -> 1133;
1143 -> 1138;
1143 -> 1142;
1144 -> 1139;
1144 -> 1142;
1145 -> 1140;
1145 -> 1142;
1146 -> 1141;
1146 -> 1142;
1147 -> 1144;
1147 -> 1142;
1148 -> 1143;
1148 -> 1147;
1148 -> 1142;
1149 -> 1142;
1150 -> 1148;
1150 -> 1149;
1150 -> 1142;
1151 -> 1148;
1151 -> 1142;
1152 -> 1146;
1152 -> 1142;
1153 -> 1145;
1153 -> 1142;
1154 -> 1142;
1155 -> 1151;
1155 -> 1154;
1156 -> 1152;
1156 -> 1154;
1157 -> 1153;
1157 -> 1154;
1158 -> 1155;
1158 -> 1148;
1158 -> 1154;
1159 -> 1154;
1160 -> 1158;
1160 -> 1159;
1160 -> 1154;
1161 -> 1148;
1161 -> 1142;
1162 -> 1124;
1162 -> 1120;
1163 -> 1120;
1164 -> 1162;
1164 -> 1163;
1165 -> 1123;
1165 -> 1163;
1166 -> 1164;
1166 -> 1163;
1167 -> 1164;
1167 -> 1163;
1168 -> 1163;
1169 -> 1167;
1169 -> 1168;
1170 -> 1167;
1170 -> 1168;
1171 -> 1165;
1171 -> 1168;
1172 -> 1169;
1172 -> 1168;
1173 -> 1170;
1173 -> 1168;
1174 -> 1172;
1174 -> 1173;
1174 -> 1168;
1175 -> 1174;
1175 -> 1168;
1176 -> 1171;
1176 -> 1175;
1177 -> 0;
1177 -> 1175;
1178 -> 1175;
1179 -> 1171;
1179 -> 1178;
1180 -> 1179;
1180 -> 1178;
1181 -> 1178;
1182 -> 1179;
1182 -> 1181;
1183 -> 1182;
1183 -> 1181;
1184 -> 1182;
1184 -> 1181;
1185 -> 1181;
1186 -> 1184;
1186 -> 1185;
1187 -> 1186;
1187 -> 1185;
1188 -> 1187;
1189 -> 1188;
1189 -> 1181;
1190 -> 1189;
1190 -> 1181;
1191 -> 1190;
1191 -> 1175;
1192 -> 1161;
1192 -> 1120;
1193 -> 1120;
1194 -> 1192;
1194 -> 1193;
1195 -> 1194;
1195 -> 1193;
1196 -> 1193;
1197 -> 1193;
1198 -> 1195;
1198 -> 1197;
1199 -> 1196;
1199 -> 1197;
1200 -> 1198;
1200 -> 1197;
1201 -> 1198;
1201 -> 1199;
1201 -> 1197;
1202 -> 1197;
1203 -> 1202;
1203 -> 1199;
1203 -> 1197;
1204 -> 1197;
1205 -> 1204;
1205 -> 1199;
1205 -> 1197;
1206 -> 1196;
1206 -> 1120;
1207 -> 1120;
1208 -> 1191;
1208 -> 1206;
1208 -> 1207;
1208 -> 1201;
1208 -> 1203;
1208 -> 1205;
1208 -> 1120;
1209 -> 1097;
1210 -> 1208;
1210 -> 1209;
1211 -> 1210;
1211 -> 1208;
1211 -> 1209;
1212 -> 1211;
1212 -> 1097;
1213 -> 1212;
1214 -> 1213;
1214 -> 1212;
1215 -> 1214;
1216 -> 1208;
1216 -> 1215;
1217 -> 1216;
1217 -> 1208;
1217 -> 1215;
1218 -> 1217;
1218 -> 1214;
1219 -> 1102;
1219 -> 1214;
1220 -> 1098;
1220 -> 1214;
1221 -> 1099;
1221 -> 1214;
1222 -> 1219;
1222 -> 1220;
1222 -> 1221;
1222 -> 1218;
1222 -> 1208;
1222 -> 1214;
1223 -> 1214;
1224 -> 1222;
1224 -> 1223;
1225 -> 1222;
1225 -> 1223;
1226 -> 1222;
1226 -> 1223;
1227 -> 1222;
1227 -> 1223;
1228 -> 1222;
1228 -> 1223;
1229 -> 1224;
1229 -> 1223;
1230 -> 1225;
1230 -> 1223;
1231 -> 1226;
1231 -> 1223;
1232 -> 1227;
1232 -> 1223;
1233 -> 1223;
1234 -> 1229;
1234 -> 1233;
1235 -> 1230;
1235 -> 1233;
1236 -> 1231;
1236 -> 1233;
1237 -> 1232;
1237 -> 1233;
1238 -> 1228;
1238 -> 1233;
1239 -> 1235;
1239 -> 1222;
1239 -> 1233;
1240 -> 1234;
1240 -> 1239;
1241 -> 1235;
1241 -> 1239;
1242 -> 1236;
1242 -> 1239;
1243 -> 1237;
1243 -> 1239;
1244 -> 1239;
1245 -> 1238;
1245 -> 1244;
1246 -> 1245;
1246 -> 1222;
1246 -> 1244;
1247 -> 1244;
1248 -> 1246;
1248 -> 1247;
1248 -> 1244;
1249 -> 1248;
1249 -> 1244;
1250 -> 1245;
1250 -> 1222;
1250 -> 1249;
1251 -> 1250;
1251 -> 1239;
1252 -> 1239;
1253 -> 1238;
1253 -> 1252;
1254 -> 1252;
1255 -> 1253;
1255 -> 1254;
1256 -> 1255;
1256 -> 1222;
1256 -> 1250;
1256 -> 1254;
1257 -> 1254;
1258 -> 1256;
1258 -> 1252;
1259 -> 1258;
1259 -> 1252;
1260 -> 1258;
1260 -> 1222;
1260 -> 0;
1260 -> 1252;
1261 -> 1258;
1261 -> 1252;
1262 -> 1258;
1262 -> 1252;
1263 -> 1262;
1263 -> 1239;
1264 -> 1238;
1264 -> 1222;
1264 -> 1239;
1265 -> 1239;
1266 -> 1240;
1266 -> 1265;
1267 -> 1241;
1267 -> 1265;
1268 -> 1242;
1268 -> 1265;
1269 -> 1243;
1269 -> 1265;
1270 -> 1251;
1270 -> 1265;
1271 -> 1263;
1271 -> 1265;
1272 -> 1264;
1272 -> 1265;
1273 -> 1267;
1273 -> 1265;
1274 -> 1273;
1274 -> 1222;
1274 -> 1250;
1274 -> 1256;
1274 -> 1265;
1275 -> 1267;
1275 -> 1274;
1275 -> 0;
1275 -> 1265;
1276 -> 1267;
1276 -> 1274;
1276 -> 0;
1276 -> 1265;
1277 -> 1267;
1277 -> 1265;
1278 -> 1271;
1278 -> 1265;
1279 -> 1277;
1279 -> 1278;
1279 -> 1274;
1279 -> 1265;
1280 -> 1269;
1280 -> 1265;
1281 -> 1280;
1281 -> 1265;
1282 -> 1266;
1282 -> 1265;
1283 -> 1279;
1283 -> 1265;
1284 -> 1268;
1284 -> 1265;
1285 -> 1270;
1285 -> 1265;
1286 -> 1272;
1286 -> 1265;
1287 -> 1265;
1288 -> 1282;
1288 -> 1287;
1289 -> 1283;
1289 -> 1287;
1290 -> 1284;
1290 -> 1287;
1291 -> 1285;
1291 -> 1287;
1292 -> 1286;
1292 -> 1287;
1293 -> 1287;
1294 -> 1288;
1294 -> 1293;
1294 -> 1287;
1295 -> 1289;
1295 -> 1287;
1296 -> 1291;
1296 -> 1287;
1297 -> 1287;
1298 -> 1295;
1298 -> 1296;
1298 -> 1297;
1298 -> 1279;
1298 -> 1287;
1299 -> 1287;
1300 -> 1298;
1300 -> 1287;
1301 -> 1287;
1302 -> 1299;
1302 -> 1301;
1302 -> 1287;
1303 -> 1298;
1303 -> 1287;
1304 -> 1303;
1304 -> 1265;
1305 -> 1280;
1305 -> 1304;
1306 -> 1239;
1307 -> 1223;
1308 -> 1208;
1308 -> 1212;
1309 -> 1308;
1309 -> 588;
1310 -> 1089;
1310 -> 588;
1311 -> 1088;
1311 -> 588;
1312 -> 1090;
1312 -> 588;
1313 -> 588;
1314 -> 1309;
1314 -> 1313;
1315 -> 1310;
1315 -> 1313;
1316 -> 1311;
1316 -> 1313;
1317 -> 1312;
1317 -> 1313;
1318 -> 1092;
1318 -> 1313;
1319 -> 1313;
1320 -> 1314;
1320 -> 1319;
1321 -> 1320;
1321 -> 1208;
1321 -> 1319;
1322 -> 1321;
1322 -> 0;
1322 -> 1319;
1323 -> 1322;
1323 -> 1313;
1324 -> 1314;
1324 -> 1313;
1325 -> 588;
1326 -> 1324;
1326 -> 1325;
1327 -> 1326;
1327 -> 1208;
1327 -> 1325;
1328 -> 778;
1328 -> 1327;
1328 -> 1298;
1328 -> 585;
1329 -> 778;
1329 -> 588;
1330 -> 778;
1330 -> 588;
1331 -> 778;
1331 -> 588;
1332 -> 778;
1332 -> 588;
1333 -> 1332;
1333 -> 588;
1334 -> 1329;
1334 -> 588;
1335 -> 1331;
1335 -> 588;
1336 -> 1330;
1336 -> 588;
1337 -> 588;
1338 -> 1333;
1338 -> 1337;
1339 -> 1334;
1339 -> 1337;
1340 -> 1335;
1340 -> 1337;
1341 -> 1336;
1341 -> 1337;
1342 -> 1339;
1342 -> 1337;
1343 -> 1338;
1343 -> 1342;
1343 -> 1337;
1344 -> 1337;
1345 -> 1343;
1345 -> 1344;
1345 -> 1337;
1346 -> 1343;
1346 -> 1337;
1347 -> 1341;
1347 -> 1337;
1348 -> 1340;
1348 -> 1337;
1349 -> 1337;
1350 -> 1346;
1350 -> 1349;
1351 -> 1347;
1351 -> 1349;
1352 -> 1348;
1352 -> 1349;
1353 -> 1350;
1353 -> 1343;
1353 -> 1349;
1354 -> 1349;
1355 -> 1353;
1355 -> 1354;
1355 -> 1349;
1356 -> 1343;
1356 -> 1337;
1357 -> 778;
1357 -> 1356;
1357 -> 1353;
1357 -> 585;
1358 -> 1349;
1359 -> 1353;
1359 -> 1358;
1360 -> 1353;
1360 -> 1358;
1361 -> 1359;
1361 -> 1358;
1362 -> 1359;
1362 -> 1353;
1362 -> 1358;
1363 -> 1358;
1364 -> 1359;
1364 -> 1353;
1364 -> 1358;
1365 -> 1359;
1365 -> 1353;
1365 -> 1358;
1366 -> 1365;
1366 -> 1358;
1367 -> 1358;
1368 -> 1363;
1368 -> 1367;
1368 -> 1349;
1369 -> 1350;
1369 -> 1367;
1369 -> 1353;
1369 -> 1349;
1370 -> 1369;
1370 -> 1354;
1370 -> 1349;
1371 -> 778;
1371 -> 1356;
1371 -> 1369;
1371 -> 585;
1372 -> 778;
1372 -> 588;
1373 -> 778;
1373 -> 588;
1374 -> 778;
1374 -> 588;
1375 -> 778;
1375 -> 588;
1376 -> 778;
1376 -> 588;
1377 -> 588;
1378 -> 1372;
1378 -> 588;
1379 -> 588;
1380 -> 1373;
1380 -> 588;
1381 -> 1377;
1381 -> 588;
1382 -> 1379;
1382 -> 588;
1383 -> 778;
1383 -> 588;
1384 -> 778;
1384 -> 588;
1385 -> 778;
1385 -> 588;
1386 -> 778;
1386 -> 588;
1387 -> 588;
1388 -> 1383;
1388 -> 588;
1389 -> 1384;
1389 -> 588;
1390 -> 1386;
1390 -> 588;
1391 -> 1387;
1391 -> 588;
1392 -> 1385;
1392 -> 588;
1393 -> 588;
1394 -> 588;
1395 -> 1388;
1395 -> 1394;
1396 -> 1389;
1396 -> 1394;
1397 -> 1390;
1397 -> 1394;
1398 -> 1391;
1398 -> 1394;
1399 -> 1389;
1399 -> 1394;
1400 -> 1392;
1400 -> 1394;
1401 -> 1393;
1401 -> 1394;
1402 -> 1394;
1403 -> 1395;
1403 -> 1402;
1403 -> 1394;
1404 -> 1394;
1405 -> 1396;
1405 -> 1404;
1405 -> 1394;
1406 -> 1396;
1406 -> 1394;
1407 -> 1396;
1407 -> 1394;
1408 -> 1394;
1409 -> 1395;
1409 -> 1394;
1410 -> 1395;
1410 -> 0;
1410 -> 1394;
1411 -> 1395;
1411 -> 1410;
1412 -> 1395;
1412 -> 1410;
1413 -> 1396;
1413 -> 1410;
1414 -> 1397;
1414 -> 1410;
1415 -> 1408;
1415 -> 1410;
1416 -> 1399;
1416 -> 1410;
1417 -> 1400;
1417 -> 1410;
1418 -> 1410;
1419 -> 1410;
1420 -> 1412;
1420 -> 1419;
1421 -> 1412;
1421 -> 1419;
1422 -> 1413;
1422 -> 1419;
1423 -> 1414;
1423 -> 1419;
1424 -> 1415;
1424 -> 1419;
1425 -> 1416;
1425 -> 1419;
1426 -> 1417;
1426 -> 1419;
1427 -> 1418;
1427 -> 1419;
1428 -> 1422;
1428 -> 1419;
1429 -> 1419;
1430 -> 1420;
1430 -> 1429;
1430 -> 1419;
1431 -> 1419;
1432 -> 1420;
1432 -> 1422;
1432 -> 1419;
1433 -> 1420;
1433 -> 1419;
1434 -> 1422;
1434 -> 1419;
1435 -> 1426;
1435 -> 1419;
1436 -> 1427;
1436 -> 1419;
1437 -> 1419;
1438 -> 1433;
1438 -> 1437;
1439 -> 1434;
1439 -> 1437;
1440 -> 1435;
1440 -> 1437;
1441 -> 1436;
1441 -> 1437;
1442 -> 1439;
1442 -> 1437;
1443 -> 1437;
1444 -> 1438;
1444 -> 1443;
1444 -> 1437;
1445 -> 1439;
1445 -> 1437;
1446 -> 1437;
1447 -> 1438;
1447 -> 1437;
1448 -> 1438;
1448 -> 1437;
1449 -> 1437;
1450 -> 1448;
1450 -> 1449;
1450 -> 1437;
1451 -> 1450;
1451 -> 1437;
1452 -> 1439;
1452 -> 1451;
1453 -> 1451;
1454 -> 1451;
1454 -> 1453;
1455 -> 1451;
1455 -> 1453;
1456 -> 1452;
1456 -> 1453;
1457 -> 1456;
1457 -> 1453;
1458 -> 1453;
1459 -> 1454;
1459 -> 1458;
1459 -> 1453;
1460 -> 1455;
1460 -> 1453;
1461 -> 1460;
1462 -> 1421;
1462 -> 0;
1462 -> 1419;
1463 -> 1420;
1463 -> 1419;
1464 -> 1421;
1464 -> 1419;
1465 -> 1422;
1465 -> 1419;
1466 -> 1423;
1466 -> 1419;
1467 -> 1431;
1467 -> 1419;
1468 -> 1425;
1468 -> 1419;
1469 -> 1440;
1469 -> 1419;
1470 -> 1427;
1470 -> 1419;
1471 -> 1419;
1472 -> 1463;
1472 -> 1471;
1473 -> 1464;
1473 -> 1471;
1474 -> 1465;
1474 -> 1471;
1475 -> 1466;
1475 -> 1471;
1476 -> 1467;
1476 -> 1471;
1477 -> 1468;
1477 -> 1471;
1478 -> 1469;
1478 -> 1471;
1479 -> 1470;
1479 -> 1471;
1480 -> 1471;
1481 -> 1472;
1481 -> 1471;
1482 -> 1474;
1482 -> 1471;
1483 -> 1471;
1484 -> 1482;
1484 -> 1483;
1484 -> 1471;
1485 -> 1484;
1485 -> 1471;
1486 -> 1482;
1486 -> 1485;
1487 -> 1482;
1487 -> 1471;
1488 -> 1473;
1488 -> 1471;
1489 -> 1482;
1489 -> 1488;
1490 -> 1475;
1490 -> 1488;
1491 -> 1481;
1491 -> 1488;
1492 -> 1480;
1492 -> 1488;
1493 -> 1477;
1493 -> 1488;
1494 -> 1478;
1494 -> 1488;
1495 -> 1479;
1495 -> 1488;
1496 -> 1488;
1497 -> 1489;
1497 -> 1496;
1498 -> 1490;
1498 -> 1496;
1499 -> 1491;
1499 -> 1496;
1500 -> 1492;
1500 -> 1496;
1501 -> 1493;
1501 -> 1496;
1502 -> 1494;
1502 -> 1496;
1503 -> 1495;
1503 -> 1496;
1504 -> 1496;
1505 -> 1499;
1505 -> 0;
1505 -> 1496;
1506 -> 1496;
1507 -> 1497;
1507 -> 1506;
1507 -> 1496;
1508 -> 1497;
1508 -> 1496;
1509 -> 1499;
1509 -> 1496;
1510 -> 1496;
1511 -> 1508;
1511 -> 1510;
1512 -> 1509;
1512 -> 1510;
1513 -> 1510;
1514 -> 1511;
1514 -> 1513;
1514 -> 1510;
1515 -> 1510;
1516 -> 1512;
1516 -> 1515;
1516 -> 1510;
1517 -> 1512;
1517 -> 1510;
1518 -> 1511;
1518 -> 1510;
1519 -> 1510;
1520 -> 1518;
1520 -> 1519;
1520 -> 1510;
1521 -> 1518;
1521 -> 1520;
1522 -> 1518;
1522 -> 1512;
1522 -> 1520;
1523 -> 1518;
1523 -> 1520;
1524 -> 1510;
1525 -> 1524;
1525 -> 1496;
1526 -> 1497;
1526 -> 1496;
1527 -> 1496;
1528 -> 1498;
1528 -> 1527;
1528 -> 1496;
1529 -> 1528;
1529 -> 1496;
1530 -> 1496;
1531 -> 1526;
1531 -> 1530;
1531 -> 1496;
1532 -> 1526;
1532 -> 1531;
1533 -> 1526;
1533 -> 1531;
1534 -> 1499;
1534 -> 1531;
1535 -> 1501;
1535 -> 1531;
1536 -> 1502;
1536 -> 1531;
1537 -> 1503;
1537 -> 1531;
1538 -> 1531;
1539 -> 1533;
1539 -> 1538;
1540 -> 1534;
1540 -> 1538;
1541 -> 1535;
1541 -> 1538;
1542 -> 1536;
1542 -> 1538;
1543 -> 1537;
1543 -> 1538;
1544 -> 1539;
1544 -> 1538;
1545 -> 1540;
1545 -> 1538;
1546 -> 1538;
1547 -> 1538;
1548 -> 1540;
1548 -> 1538;
1549 -> 1548;
1549 -> 1538;
1550 -> 1538;
1551 -> 1539;
1551 -> 1538;
1552 -> 1538;
1553 -> 1538;
1554 -> 1551;
1554 -> 1553;
1554 -> 1538;
1555 -> 1551;
1555 -> 1554;
1556 -> 1551;
1556 -> 1554;
1557 -> 1548;
1557 -> 1556;
1557 -> 1554;
1558 -> 1551;
1558 -> 1540;
1558 -> 1554;
1559 -> 1548;
1559 -> 1554;
1560 -> 1551;
1560 -> 1554;
1561 -> 1543;
1561 -> 1554;
1562 -> 1541;
1562 -> 1554;
1563 -> 1550;
1563 -> 1554;
1564 -> 1560;
1564 -> 1561;
1564 -> 1562;
1564 -> 1563;
1564 -> 1554;
1565 -> 1554;
1566 -> 1564;
1566 -> 1565;
1566 -> 1554;
1567 -> 1564;
1567 -> 1566;
1568 -> 1567;
1568 -> 1566;
1569 -> 1542;
1569 -> 1566;
1570 -> 1568;
1570 -> 1569;
1570 -> 1564;
1570 -> 1566;
1571 -> 1567;
1571 -> 1570;
1572 -> 1567;
1573 -> 1572;
1573 -> 1570;
1573 -> 1567;
1574 -> 1548;
1574 -> 1573;
1574 -> 1567;
1575 -> 1567;
1575 -> 1540;
1576 -> 1574;
1577 -> 1564;
1577 -> 1538;
1578 -> 1576;
1578 -> 1538;
1579 -> 1546;
1579 -> 1538;
1580 -> 1547;
1580 -> 1538;
1581 -> 1576;
1581 -> 1538;
1582 -> 1581;
1583 -> 1529;
1583 -> 1582;
1583 -> 1581;
1584 -> 1583;
1585 -> 1570;
1585 -> 588;
1586 -> 1585;
1586 -> 1394;
1587 -> 1570;
1587 -> 1402;
1587 -> 1394;
1588 -> 1570;
1588 -> 1404;
1588 -> 1394;
1589 -> 1570;
1589 -> 1584;
1589 -> 1394;
1590 -> 1570;
1590 -> 1394;
1591 -> 1570;
1591 -> 1584;
1592 -> 1408;
1592 -> 1584;
1593 -> 1592;
1593 -> 1584;
1594 -> 1591;
1594 -> 1584;
1595 -> 1584;
1596 -> 1591;
1596 -> 1595;
1596 -> 1584;
1597 -> 1584;
1598 -> 1591;
1598 -> 1584;
1599 -> 1591;
1599 -> 1584;
1600 -> 1591;
1600 -> 1584;
1601 -> 1584;
1602 -> 1600;
1602 -> 1584;
1603 -> 1584;
1604 -> 1599;
1604 -> 1603;
1604 -> 1584;
1605 -> 1600;
1605 -> 1591;
1605 -> 1584;
1606 -> 1584;
1607 -> 1599;
1607 -> 1591;
1607 -> 1584;
1608 -> 1599;
1608 -> 1591;
1608 -> 1584;
1609 -> 1584;
1610 -> 1608;
1610 -> 1609;
1610 -> 1584;
1611 -> 1610;
1611 -> 1584;
1612 -> 1600;
1612 -> 1611;
1613 -> 1611;
1614 -> 1611;
1614 -> 1613;
1615 -> 1611;
1615 -> 1613;
1616 -> 1612;
1616 -> 1613;
1617 -> 1616;
1617 -> 1613;
1618 -> 1613;
1619 -> 1614;
1619 -> 1618;
1619 -> 1613;
1620 -> 1615;
1620 -> 1613;
1621 -> 1620;
1622 -> 1591;
1622 -> 0;
1622 -> 1584;
1623 -> 1622;
1624 -> 1584;
1624 -> 588;
1625 -> 1584;
1625 -> 588;
1626 -> 1624;
1626 -> 588;
1627 -> 1624;
1627 -> 1623;
1627 -> 588;
1628 -> 1624;
1628 -> 1623;
1628 -> 588;
1629 -> 1624;
1629 -> 1623;
1629 -> 588;
1630 -> 1629;
1630 -> 588;
1631 -> 1629;
1631 -> 1623;
1631 -> 1630;
1632 -> 789;
1632 -> 790;
1633 -> 1462;
1634 -> 1440;
1634 -> 1633;
1634 -> 585;
1635 -> 1440;
1635 -> 588;
1636 -> 1440;
1636 -> 588;
1637 -> 1635;
1637 -> 588;
1638 -> 1635;
1638 -> 588;
1639 -> 1635;
1639 -> 588;
1640 -> 1635;
1640 -> 588;
1641 -> 1640;
1641 -> 588;
1642 -> 1640;
1642 -> 1641;
1643 -> 1570;
1643 -> 588;
1644 -> 1570;
1644 -> 588;
1645 -> 1643;
1645 -> 588;
1646 -> 1643;
1646 -> 1584;
1646 -> 588;
1647 -> 1643;
1647 -> 1584;
1647 -> 588;
1648 -> 1643;
1648 -> 1584;
1648 -> 588;
1649 -> 1648;
1649 -> 588;
1650 -> 1648;
1650 -> 1584;
1650 -> 1649;
1651 -> 1440;
1651 -> 588;
1652 -> 1440;
1652 -> 588;
1653 -> 1651;
1653 -> 1394;
1654 -> 1652;
1654 -> 1394;
1655 -> 1651;
1655 -> 1394;
1656 -> 1440;
1656 -> 1402;
1656 -> 1394;
1657 -> 1653;
1657 -> 1404;
1657 -> 1394;
1658 -> 1653;
1658 -> 1394;
1659 -> 1653;
1659 -> 1394;
1660 -> 1440;
1661 -> 1408;
1661 -> 1440;
1662 -> 1440;
1663 -> 1440;
1664 -> 1653;
1664 -> 1440;
1665 -> 1654;
1665 -> 1440;
1666 -> 1661;
1666 -> 1440;
1667 -> 1655;
1667 -> 1440;
1668 -> 1440;
1669 -> 1664;
1669 -> 1440;
1670 -> 1440;
1671 -> 1662;
1671 -> 1670;
1671 -> 1440;
1672 -> 1440;
1673 -> 1662;
1673 -> 1664;
1673 -> 1440;
1674 -> 1662;
1674 -> 1440;
1675 -> 1664;
1675 -> 1440;
1676 -> 1668;
1676 -> 1440;
1677 -> 1675;
1677 -> 1440;
1678 -> 1440;
1679 -> 1674;
1679 -> 1678;
1679 -> 1440;
1680 -> 1675;
1680 -> 1440;
1681 -> 1440;
1682 -> 1674;
1682 -> 1440;
1683 -> 1674;
1683 -> 1440;
1684 -> 1440;
1685 -> 1683;
1685 -> 1684;
1685 -> 1440;
1686 -> 1685;
1686 -> 1440;
1687 -> 1675;
1687 -> 1686;
1688 -> 1686;
1689 -> 1686;
1689 -> 1688;
1690 -> 1686;
1690 -> 1688;
1691 -> 1687;
1691 -> 1688;
1692 -> 1691;
1692 -> 1688;
1693 -> 1688;
1694 -> 1689;
1694 -> 1693;
1694 -> 1688;
1695 -> 1690;
1695 -> 1688;
1696 -> 1695;
1697 -> 1663;
1697 -> 0;
1697 -> 1440;
1698 -> 1697;
1699 -> 1651;
1699 -> 1698;
1699 -> 585;
1700 -> 1651;
1700 -> 588;
1701 -> 1700;
1701 -> 1394;
1702 -> 1700;
1702 -> 1394;
1703 -> 1651;
1703 -> 1402;
1703 -> 1394;
1704 -> 1651;
1705 -> 1408;
1705 -> 1651;
1706 -> 1651;
1707 -> 1651;
1708 -> 1653;
1708 -> 1651;
1709 -> 1701;
1709 -> 1651;
1710 -> 1705;
1710 -> 1651;
1711 -> 1702;
1711 -> 1651;
1712 -> 1651;
1713 -> 1708;
1713 -> 1651;
1714 -> 1651;
1715 -> 1706;
1715 -> 1714;
1715 -> 1651;
1716 -> 1651;
1717 -> 1706;
1717 -> 1708;
1717 -> 1651;
1718 -> 1706;
1718 -> 1651;
1719 -> 1708;
1719 -> 1651;
1720 -> 1712;
1720 -> 1651;
1721 -> 1719;
1721 -> 1651;
1722 -> 1651;
1723 -> 1718;
1723 -> 1722;
1723 -> 1651;
1724 -> 1719;
1724 -> 1651;
1725 -> 1651;
1726 -> 1718;
1726 -> 1651;
1727 -> 1718;
1727 -> 1651;
1728 -> 1651;
1729 -> 1727;
1729 -> 1728;
1729 -> 1651;
1730 -> 1729;
1730 -> 1651;
1731 -> 1719;
1731 -> 1730;
1732 -> 1730;
1733 -> 1730;
1733 -> 1732;
1734 -> 1730;
1734 -> 1732;
1735 -> 1731;
1735 -> 1732;
1736 -> 1735;
1736 -> 1732;
1737 -> 1732;
1738 -> 1733;
1738 -> 1737;
1738 -> 1732;
1739 -> 1734;
1739 -> 1732;
1740 -> 1739;
1741 -> 1707;
1741 -> 0;
1741 -> 1651;
1742 -> 1706;
1742 -> 1651;
1743 -> 1707;
1743 -> 1651;
1744 -> 1708;
1744 -> 1651;
1745 -> 1709;
1745 -> 1651;
1746 -> 1716;
1746 -> 1651;
1747 -> 1711;
1747 -> 1651;
1748 -> 1700;
1748 -> 1651;
1749 -> 1712;
1749 -> 1651;
1750 -> 1651;
1751 -> 1742;
1751 -> 1750;
1752 -> 1743;
1752 -> 1750;
1753 -> 1744;
1753 -> 1750;
1754 -> 1745;
1754 -> 1750;
1755 -> 1746;
1755 -> 1750;
1756 -> 1747;
1756 -> 1750;
1757 -> 1748;
1757 -> 1750;
1758 -> 1749;
1758 -> 1750;
1759 -> 1750;
1760 -> 1751;
1760 -> 1750;
1761 -> 1753;
1761 -> 1750;
1762 -> 1750;
1763 -> 1761;
1763 -> 1762;
1763 -> 1750;
1764 -> 1763;
1764 -> 1750;
1765 -> 1761;
1765 -> 1764;
1766 -> 1761;
1766 -> 1750;
1767 -> 1752;
1767 -> 1750;
1768 -> 1766;
1768 -> 1767;
1769 -> 1751;
1769 -> 1767;
1770 -> 1767;
1771 -> 1768;
1771 -> 1770;
1772 -> 1769;
1772 -> 1770;
1773 -> 1771;
1773 -> 1770;
1774 -> 1772;
1774 -> 1770;
1775 -> 1773;
1775 -> 1774;
1775 -> 1770;
1776 -> 1775;
1777 -> 1757;
1777 -> 1776;
1777 -> 585;
1778 -> 1757;
1778 -> 1394;
1779 -> 1757;
1779 -> 1394;
1780 -> 1757;
1780 -> 1394;
1781 -> 1757;
1781 -> 1402;
1781 -> 1394;
1782 -> 1778;
1782 -> 1404;
1782 -> 1394;
1783 -> 1778;
1783 -> 1394;
1784 -> 1778;
1784 -> 1394;
1785 -> 1757;
1786 -> 1408;
1786 -> 1757;
1787 -> 1757;
1788 -> 1757;
1789 -> 1778;
1789 -> 1757;
1790 -> 1779;
1790 -> 1757;
1791 -> 1786;
1791 -> 1757;
1792 -> 1780;
1792 -> 1757;
1793 -> 1757;
1794 -> 1789;
1794 -> 1757;
1795 -> 1757;
1796 -> 1787;
1796 -> 1795;
1796 -> 1757;
1797 -> 1757;
1798 -> 1787;
1798 -> 1789;
1798 -> 1757;
1799 -> 1787;
1799 -> 1757;
1800 -> 1789;
1800 -> 1757;
1801 -> 1793;
1801 -> 1757;
1802 -> 1800;
1802 -> 1757;
1803 -> 1757;
1804 -> 1799;
1804 -> 1803;
1804 -> 1757;
1805 -> 1800;
1805 -> 1757;
1806 -> 1757;
1807 -> 1799;
1807 -> 1757;
1808 -> 1799;
1808 -> 1757;
1809 -> 1757;
1810 -> 1808;
1810 -> 1809;
1810 -> 1757;
1811 -> 1810;
1811 -> 1757;
1812 -> 1800;
1812 -> 1811;
1813 -> 1811;
1814 -> 1811;
1814 -> 1813;
1815 -> 1811;
1815 -> 1813;
1816 -> 1812;
1816 -> 1813;
1817 -> 1816;
1817 -> 1813;
1818 -> 1813;
1819 -> 1814;
1819 -> 1818;
1819 -> 1813;
1820 -> 1815;
1820 -> 1813;
1821 -> 1820;
1822 -> 1788;
1822 -> 0;
1822 -> 1757;
1823 -> 1822;
1824 -> 1787;
1824 -> 1823;
1824 -> 585;
1825 -> 1787;
1825 -> 588;
1826 -> 1787;
1826 -> 588;
1827 -> 1825;
1827 -> 588;
1828 -> 1825;
1828 -> 588;
1829 -> 1825;
1829 -> 588;
1830 -> 1825;
1830 -> 588;
1831 -> 1830;
1831 -> 588;
1832 -> 1830;
1832 -> 1831;
1833 -> 1411;
1834 -> 1833;
1834 -> 1410;
1835 -> 1834;
1835 -> 1419;
1836 -> 1700;
1836 -> 1394;
1837 -> 1700;
1837 -> 1402;
1837 -> 1394;
1838 -> 1836;
1838 -> 1404;
1838 -> 1394;
1839 -> 1836;
1839 -> 1394;
1840 -> 1836;
1840 -> 1394;
1841 -> 1700;
1842 -> 1654;
1842 -> 1700;
1843 -> 1408;
1843 -> 1700;
1844 -> 1700;
1845 -> 1700;
1846 -> 1836;
1846 -> 1700;
1847 -> 1842;
1847 -> 1700;
1848 -> 1843;
1848 -> 1700;
1849 -> 1702;
1849 -> 1700;
1850 -> 1700;
1851 -> 1846;
1851 -> 1700;
1852 -> 1700;
1853 -> 1844;
1853 -> 1852;
1853 -> 1700;
1854 -> 1700;
1855 -> 1844;
1855 -> 1846;
1855 -> 1700;
1856 -> 1844;
1856 -> 1700;
1857 -> 1846;
1857 -> 1700;
1858 -> 1850;
1858 -> 1700;
1859 -> 1857;
1859 -> 1700;
1860 -> 1700;
1861 -> 1856;
1861 -> 1860;
1861 -> 1700;
1862 -> 1857;
1862 -> 1700;
1863 -> 1700;
1864 -> 1856;
1864 -> 1700;
1865 -> 1856;
1865 -> 1700;
1866 -> 1700;
1867 -> 1865;
1867 -> 1866;
1867 -> 1700;
1868 -> 1867;
1868 -> 1700;
1869 -> 1857;
1869 -> 1868;
1870 -> 1868;
1871 -> 1868;
1871 -> 1870;
1872 -> 1868;
1872 -> 1870;
1873 -> 1869;
1873 -> 1870;
1874 -> 1873;
1874 -> 1870;
1875 -> 1870;
1876 -> 1871;
1876 -> 1875;
1876 -> 1870;
1877 -> 1872;
1877 -> 1870;
1878 -> 1877;
1879 -> 1845;
1879 -> 0;
1879 -> 1700;
1880 -> 1879;
1881 -> 1844;
1881 -> 1880;
1881 -> 585;
1882 -> 1844;
1882 -> 588;
1883 -> 1844;
1883 -> 588;
1884 -> 1844;
1884 -> 588;
1885 -> 1882;
1885 -> 588;
1886 -> 588;
1887 -> 1883;
1887 -> 588;
1888 -> 588;
1889 -> 588;
1890 -> 1885;
1890 -> 1889;
1891 -> 1886;
1891 -> 1889;
1892 -> 1887;
1892 -> 1889;
1893 -> 1888;
1893 -> 1889;
1894 -> 1884;
1894 -> 1889;
1895 -> 1890;
1895 -> 1889;
1896 -> 1891;
1896 -> 1889;
1897 -> 1892;
1897 -> 1889;
1898 -> 1893;
1898 -> 1889;
1899 -> 1889;
1900 -> 1895;
1900 -> 1899;
1901 -> 1896;
1901 -> 1899;
1902 -> 1897;
1902 -> 1899;
1903 -> 1898;
1903 -> 1899;
1904 -> 1894;
1904 -> 1899;
1905 -> 1904;
1905 -> 1899;
1906 -> 1904;
1906 -> 1899;
1907 -> 1904;
1907 -> 1899;
1908 -> 1904;
1908 -> 1899;
1909 -> 1899;
1910 -> 1900;
1910 -> 1909;
1910 -> 1899;
1911 -> 1899;
1912 -> 1903;
1912 -> 1911;
1912 -> 1899;
1913 -> 1899;
1914 -> 1903;
1914 -> 1913;
1914 -> 1899;
1915 -> 1900;
1915 -> 1904;
1915 -> 1899;
1916 -> 1901;
1916 -> 1904;
1916 -> 1899;
1917 -> 1902;
1917 -> 1904;
1917 -> 1899;
1918 -> 1903;
1918 -> 1904;
1918 -> 1899;
1919 -> 1844;
1919 -> 1915;
1919 -> 1916;
1919 -> 1917;
1919 -> 1918;
1919 -> 585;
1920 -> 586;
1920 -> 588;
1920 -> 620;
1920 -> 642;
1920 -> 782;
1920 -> 1086;
1920 -> 1327;
1920 -> 1356;
1920 -> 1584;
1920 -> 1623;
1920 -> 1633;
1920 -> 1698;
1920 -> 1776;
1920 -> 1823;
1920 -> 1880;
1920 -> 1844;
1920 -> 1087;
1920 -> 1328;
1920 -> 1357;
1920 -> 1371;
1920 -> 1919;
1920 -> 585;
1921 -> 1920;
1921 -> 585;
1922 -> 587;
1922 -> 585;
1923 -> 585;
1924 -> 1921;
1924 -> 1923;
1925 -> 1922;
1925 -> 1923;
1926 -> 1924;
1926 -> 1923;
1927 -> 1925;
1927 -> 1923;
1928 -> 1923;
1929 -> 1926;
1929 -> 1928;
1930 -> 1927;
1930 -> 1928;
1931 -> 1929;
1931 -> 1928;
1932 -> 1930;
1932 -> 1928;
1933 -> 1928;
1934 -> 1928;
1935 -> 1931;
1935 -> 1934;
1936 -> 1932;
1936 -> 1934;
1937 -> 1933;
1937 -> 1934;
1938 -> 1934;
1939 -> 1936;
1939 -> 1938;
1939 -> 1934;
1940 -> 1936;
1940 -> 1934;
1941 -> 1936;
1941 -> 1934;
1942 -> 1935;
1942 -> 1934;
1943 -> 1937;
1943 -> 1940;
1943 -> 1941;
1943 -> 1934;
1944 -> 1942;
1944 -> 1943;
1944 -> 1934;
1945 -> 1936;
1945 -> 1934;
1946 -> 1934;
1947 -> 1944;
1947 -> 1946;
1947 -> 1934;
1948 -> 1934;
1950 -> 1949;
1952 -> 1951;
1953 -> 1936;
1953 -> 1934;
1954 -> 1935;
1954 -> 1934;
1955 -> 1934;
1956 -> 1953;
1956 -> 1955;
1957 -> 1954;
1957 -> 1955;
1958 -> 1955;
1959 -> 1955;
1960 -> 1957;
1960 -> 1955;
1961 -> 1960;
1961 -> 1944;
1961 -> 1955;
1962 -> 1961;
1962 -> 1955;
1963 -> 1959;
1963 -> 1962;
1964 -> 1963;
1964 -> 1958;
1964 -> 1955;
1965 -> 1963;
1965 -> 1958;
1965 -> 1955;
1966 -> 1965;
1966 -> 1955;
1967 -> 1956;
1967 -> 1955;
1968 -> 1956;
1968 -> 1955;
1969 -> 1956;
1969 -> 1955;
1970 -> 1955;
1971 -> 1969;
1971 -> 1970;
1973 -> 1972;
1974 -> 1972;
1975 -> 1974;
1975 -> 1970;
1976 -> 1970;
1977 -> 1971;
1977 -> 1970;
1978 -> 1970;
1979 -> 1978;
1979 -> 1955;
1980 -> 1957;
1980 -> 1979;
1981 -> 1979;
1982 -> 1980;
1982 -> 1981;
1983 -> 1982;
1983 -> 1981;
1984 -> 1981;
1985 -> 1974;
1985 -> 1981;
1986 -> 1983;
1986 -> 1984;
1986 -> 1985;
1986 -> 1944;
1986 -> 1981;
1987 -> 1955;
1988 -> 1987;
1988 -> 1955;
1989 -> 1955;
1990 -> 1955;
1991 -> 1987;
1991 -> 1990;
1991 -> 1988;
1991 -> 1955;
1992 -> 1955;
1993 -> 1956;
1993 -> 1955;
1994 -> 1987;
1994 -> 1955;
1995 -> 1992;
1995 -> 1955;
1996 -> 1955;
1997 -> 1994;
1997 -> 1996;
1998 -> 1995;
1998 -> 1996;
1999 -> 1998;
1999 -> 1992;
1999 -> 1996;
2000 -> 1996;
2001 -> 2000;
2001 -> 1999;
2001 -> 1996;
2002 -> 1955;
2003 -> 1955;
2004 -> 1987;
2004 -> 2003;
2004 -> 1991;
2004 -> 1955;
2005 -> 1955;
2006 -> 1986;
2006 -> 1955;
2007 -> 1955;
2008 -> 2006;
2008 -> 1955;
2009 -> 1955;
2010 -> 2007;
2010 -> 2009;
2010 -> 1955;
2011 -> 1955;
2012 -> 1987;
2012 -> 2011;
2012 -> 2004;
2012 -> 1955;
2013 -> 1992;
2013 -> 1955;
2014 -> 2005;
2014 -> 1955;
2018 -> 2016;
2018 -> 2015;
2019 -> 2017;
2019 -> 2015;
2020 -> 2015;
2021 -> 0;
2021 -> 1955;
2022 -> 1955;
2023 -> 1955;
2024 -> 2013;
2024 -> 2023;
2025 -> 2014;
2025 -> 2023;
2026 -> 2021;
2026 -> 2023;
2027 -> 2022;
2027 -> 2023;
2028 -> 2022;
2028 -> 2023;
2029 -> 2023;
2030 -> 2027;
2030 -> 2029;
2030 -> 2023;
2031 -> 2030;
2031 -> 2023;
2032 -> 0;
2034 -> 2032;
2034 -> 2033;
2035 -> 2033;
2037 -> 2036;
2039 -> 2038;
2041 -> 2040;
2042 -> 2035;
2043 -> 2035;
2043 -> 2033;
2044 -> 2034;
2044 -> 2035;
2044 -> 2033;
2045 -> 2033;
2046 -> 2023;
2047 -> 2046;
2047 -> 2028;
2047 -> 2023;
2048 -> 2024;
2048 -> 2023;
2049 -> 2025;
2049 -> 2023;
2050 -> 2026;
2050 -> 2023;
2051 -> 2048;
2051 -> 2023;
2052 -> 2049;
2052 -> 2023;
2053 -> 2047;
2053 -> 2023;
2054 -> 2023;
2055 -> 2051;
2055 -> 2054;
2056 -> 2052;
2056 -> 2054;
2057 -> 2053;
2057 -> 2054;
2058 -> 2031;
2058 -> 2054;
2059 -> 2055;
2059 -> 2054;
2060 -> 2055;
2060 -> 2048;
2060 -> 2054;
2061 -> 2056;
2061 -> 2054;
2062 -> 2056;
2062 -> 2049;
2062 -> 2054;
2063 -> 2054;
2064 -> 2059;
2064 -> 2063;
2065 -> 2060;
2065 -> 2063;
2066 -> 2061;
2066 -> 2063;
2067 -> 2062;
2067 -> 2063;
2068 -> 2058;
2068 -> 2063;
2069 -> 2064;
2069 -> 2063;
2070 -> 2065;
2070 -> 2063;
2071 -> 2066;
2071 -> 2063;
2072 -> 2067;
2072 -> 2063;
2073 -> 2063;
2074 -> 2069;
2074 -> 2073;
2075 -> 2070;
2075 -> 2073;
2076 -> 2071;
2076 -> 2073;
2077 -> 2072;
2077 -> 2073;
2078 -> 2068;
2078 -> 2073;
2079 -> 2073;
2080 -> 2075;
2080 -> 2079;
2080 -> 2073;
2081 -> 2073;
2082 -> 2077;
2082 -> 2081;
2082 -> 2073;
2083 -> 2080;
2083 -> 2082;
2083 -> 2073;
2084 -> 2073;
2085 -> 2084;
2085 -> 2083;
2085 -> 2073;
2086 -> 2073;
2087 -> 2086;
2087 -> 2075;
2087 -> 2073;
2088 -> 2073;
2089 -> 2088;
2089 -> 2077;
2089 -> 2073;
2090 -> 2073;
2091 -> 2090;
2091 -> 2075;
2091 -> 2073;
2092 -> 2083;
2092 -> 2073;
2093 -> 2065;
2093 -> 2063;
2094 -> 2067;
2094 -> 2063;
2095 -> 2063;
2096 -> 2093;
2096 -> 2095;
2096 -> 2063;
2097 -> 2063;
2098 -> 2093;
2098 -> 2097;
2098 -> 2063;
2099 -> 2063;
2100 -> 2094;
2100 -> 2099;
2100 -> 2063;
2101 -> 2063;
2102 -> 2101;
2102 -> 2054;
2103 -> 2054;
2104 -> 2103;
2104 -> 2023;
2105 -> 2050;
2105 -> 2104;
2105 -> 2023;
2106 -> 1987;
2106 -> 2105;
2106 -> 2012;
2106 -> 1955;
2107 -> 2005;
2107 -> 1955;
2108 -> 1992;
2108 -> 1955;
2109 -> 1987;
2109 -> 2106;
2109 -> 1955;
2110 -> 2109;
2110 -> 1934;
2111 -> 1923;
2112 -> 585;
2113 -> 586;
2113 -> 585;
2114 -> 1920;
2114 -> 585;
2115 -> 585;
2116 -> 2113;
2116 -> 2115;
2117 -> 2114;
2117 -> 2115;
2118 -> 2117;
2118 -> 2115;
2119 -> 585;
2120 -> 586;
2120 -> 585;
}