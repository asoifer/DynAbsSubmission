digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 750129"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 750130"];
3 [label="@'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 750131"];
4 [label="prefix = @'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 750132"];
5 [label="@'\n}' 750133"];
6 [label="suffix = @'\n}' 750134"];
7 [label="param FlowTests(this) 750135"];
8 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 750136"];
9 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 750137"];
10 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 750138"];
11 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 750139"];
12 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 750140"];
13 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 750141"];
14 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 750142"];
15 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 750143"];
16 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 750144"];
17 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 750145"];
18 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 750146"];
19 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 750147"];
20 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 750148"];
21 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 750149"];
22 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 750150"];
23 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 750151"];
24 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 750152"];
25 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 750153"];
26 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 750154"];
27 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 750155"];
28 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 750156"];
29 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 750157"];
30 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 750158"];
31 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 750159"];
32 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 750160"];
33 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 750161"];
34 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 750162"];
35 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 750163"];
36 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 750164"];
37 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 750165"];
38 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 750166"];
39 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 750167"];
40 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 750168"];
41 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 750169"];
42 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 750170"];
43 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 750171"];
44 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 750172"];
45 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 750173"];
46 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 750174"];
47 [label="LazyThreadSafetyMode.PublicationOnly 750175"];
48 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 750176"];
49 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 750177"];
50 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 750178"];
51 [label="LazyThreadSafetyMode.PublicationOnly 750179"];
52 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 750180"];
53 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 750181"];
54 [label="RuntimeUtilities.IsCoreClrRuntime 750182"];
55 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 750183"];
56 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 750184"];
57 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 750185"];
58 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 750186"];
59 [label="LazyThreadSafetyMode.PublicationOnly 750187"];
60 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 750188"];
61 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 750189"];
62 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 750190"];
63 [label="LazyThreadSafetyMode.PublicationOnly 750191"];
64 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 750192"];
65 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 750193"];
66 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 750194"];
67 [label="LazyThreadSafetyMode.PublicationOnly 750195"];
68 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 750196"];
69 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 750197"];
70 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 750198"];
71 [label="LazyThreadSafetyMode.PublicationOnly 750199"];
72 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750200"];
73 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750201"];
74 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 750202"];
75 [label="LazyThreadSafetyMode.PublicationOnly 750203"];
76 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750204"];
77 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750205"];
78 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 750206"];
79 [label="LazyThreadSafetyMode.PublicationOnly 750207"];
80 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750208"];
81 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750209"];
82 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 750210"];
83 [label="LazyThreadSafetyMode.PublicationOnly 750211"];
84 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750212"];
85 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750213"];
86 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 750214"];
87 [label="LazyThreadSafetyMode.PublicationOnly 750215"];
88 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750216"];
89 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750217"];
90 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 750218"];
91 [label="LazyThreadSafetyMode.PublicationOnly 750219"];
92 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750220"];
93 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750221"];
94 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 750222"];
95 [label="LazyThreadSafetyMode.PublicationOnly 750223"];
96 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750224"];
97 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750225"];
98 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 750226"];
99 [label="LazyThreadSafetyMode.PublicationOnly 750227"];
100 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 750228"];
101 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 750229"];
102 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 750230"];
103 [label="LazyThreadSafetyMode.PublicationOnly 750231"];
104 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 750232"];
105 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 750233"];
106 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 750234"];
107 [label="LazyThreadSafetyMode.PublicationOnly 750235"];
108 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750236"];
109 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750237"];
110 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 750238"];
111 [label="LazyThreadSafetyMode.PublicationOnly 750239"];
112 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750240"];
113 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750241"];
114 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 750242"];
115 [label="LazyThreadSafetyMode.PublicationOnly 750243"];
116 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750244"];
117 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750245"];
118 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 750246"];
119 [label="LazyThreadSafetyMode.PublicationOnly 750247"];
120 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750248"];
121 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750249"];
122 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 750250"];
123 [label="LazyThreadSafetyMode.PublicationOnly 750251"];
124 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 750252"];
125 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 750253"];
126 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 750254"];
127 [label="LazyThreadSafetyMode.PublicationOnly 750255"];
128 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750256"];
129 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750257"];
130 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 750258"];
131 [label="LazyThreadSafetyMode.PublicationOnly 750259"];
132 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750260"];
133 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750261"];
134 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 750262"];
135 [label="LazyThreadSafetyMode.PublicationOnly 750263"];
136 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750264"];
137 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750265"];
138 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 750266"];
139 [label="LazyThreadSafetyMode.PublicationOnly 750267"];
140 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750268"];
141 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750269"];
142 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 750270"];
143 [label="LazyThreadSafetyMode.PublicationOnly 750271"];
144 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750272"];
145 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750273"];
146 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 750274"];
147 [label="LazyThreadSafetyMode.PublicationOnly 750275"];
148 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750276"];
149 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750277"];
150 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 750278"];
151 [label="LazyThreadSafetyMode.PublicationOnly 750279"];
152 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750280"];
153 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750281"];
154 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 750282"];
155 [label="LazyThreadSafetyMode.PublicationOnly 750283"];
156 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750284"];
157 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750285"];
158 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 750286"];
159 [label="LazyThreadSafetyMode.PublicationOnly 750287"];
160 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750288"];
161 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750289"];
162 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 750290"];
163 [label="LazyThreadSafetyMode.PublicationOnly 750291"];
164 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750292"];
165 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750293"];
166 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 750294"];
167 [label="LazyThreadSafetyMode.PublicationOnly 750295"];
168 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750296"];
169 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750297"];
170 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 750298"];
171 [label="LazyThreadSafetyMode.PublicationOnly 750299"];
172 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750300"];
173 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750301"];
174 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 750302"];
175 [label="LazyThreadSafetyMode.PublicationOnly 750303"];
176 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750304"];
177 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 750305"];
178 [label="@'R:\\Invalid.dll' 750306"];
179 [label="fullPath: @'R:\\Invalid.dll' 750307"];
180 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 750308"];
181 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 750309"];
182 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 750310"];
183 [label="MscorlibRef_v4_0_30316_17626 750311"];
184 [label="Net451.mscorlib 750312"];
185 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 750313"];
186 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 750314"];
187 [label="'/*<bind>*/' 750315"];
188 [label="StartString = '/*<bind>*/' 750316"];
189 [label="'/*</bind>*/' 750317"];
190 [label="EndString = '/*</bind>*/' 750318"];
191 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 750319"];
192 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 750320"];
193 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 750321"];
194 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 750322"];
195 [label="param CSharpTestBase(this) 750323"];
196 [label="param CommonTestBase(this) 750324"];
197 [label="param TestBase(this) 750325"];
198 [label="_temp 750326"];
199 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 750327"];
200 [label="param IsPatternBadValueConversion(this) 750328"];
201 [label="var source =\n@'class C\n{\n    static T F<T>(System.ValueType o)\n    {\n        return o is T t ? t : default(T);\n    }\n}'; 750329"];
202 [label="kind: SourceCodeKind.Regular 750330"];
203 [label="documentationMode: DocumentationMode.Parse 750331"];
204 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 750332"];
205 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 750333"];
206 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 750334"];
207 [label="SourceCodeKind.Script 750335"];
208 [label="Regular.WithKind(SourceCodeKind.Script) 750336"];
209 [label="Script = Regular.WithKind(SourceCodeKind.Script) 750337"];
210 [label="LanguageVersion.CSharp6 750338"];
211 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 750339"];
212 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 750340"];
213 [label="LanguageVersion.CSharp7 750341"];
214 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 750342"];
215 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 750343"];
216 [label="LanguageVersion.CSharp7_1 750344"];
217 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 750345"];
218 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 750346"];
219 [label="LanguageVersion.CSharp7_2 750347"];
220 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 750348"];
221 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 750349"];
222 [label="LanguageVersion.CSharp7_3 750350"];
223 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 750351"];
224 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 750352"];
225 [label="LanguageVersion.Default 750353"];
226 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 750354"];
227 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 750355"];
228 [label="LanguageVersion.Preview 750356"];
229 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 750357"];
230 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 750358"];
231 [label="LanguageVersion.CSharp8 750359"];
232 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 750360"];
233 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 750361"];
234 [label="LanguageVersion.CSharp9 750362"];
235 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 750363"];
236 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 750364"];
237 [label="DocumentationMode.Diagnose 750365"];
238 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 750366"];
239 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 750367"];
240 [label="Regular 750368"];
241 [label="'UseLegacyStrongNameProvider' 750369"];
242 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 750370"];
243 [label="param WithFeature(this CSharpParseOptions options) 750371"];
244 [label="param WithFeature(string feature) 750372"];
245 [label="param WithFeature(string value = 'true') 750373"];
246 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 750374"];
247 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 750375"];
248 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 750376"];
249 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 750377"];
250 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 750378"];
251 [label="new[] { new KeyValuePair<string, string>(feature, value) } 750379"];
252 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 750380"];
253 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 750381"];
254 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 750382"];
255 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 750383"];
256 [label="1 750384"];
257 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 750385"];
258 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 750386"];
259 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 750387"];
260 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 750388"];
261 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 750389"];
262 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 750390"];
263 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 750391"];
264 [label="LanguageVersion.CSharp8 750392"];
265 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 750393"];
266 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 750394"];
267 [label="RegularWithExtendedPartialMethods = RegularPreview 750395"];
268 [label="new SmallDictionary<string, string> { } 750396"];
269 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 750397"];
270 [label="kind: SourceCodeKind.Regular 750398"];
271 [label="documentationMode: DocumentationMode.None 750399"];
272 [label="languageVersion: LanguageVersion.Preview 750400"];
273 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 750401"];
274 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 750402"];
275 [label="s_experimentalFeatures 750403"];
276 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 750404"];
277 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 750405"];
278 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 750406"];
279 [label="'testV7SwitchBinder' 750407"];
280 [label="'true' 750408"];
281 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 750409"];
282 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 750410"];
283 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 750411"];
284 [label="RegularWithoutRecursivePatterns = Regular7_3 750412"];
285 [label="RegularWithRecursivePatterns = Regular8 750413"];
286 [label="RegularWithoutPatternCombinators = Regular8 750414"];
287 [label="RegularWithPatternCombinators = RegularPreview 750415"];
288 [label="OutputKind.DynamicallyLinkedLibrary 750416"];
289 [label="OptimizationLevel.Release 750417"];
290 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 750418"];
291 [label="param CreateTestOptions(OutputKind outputKind) 750419"];
292 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 750420"];
293 [label="param CreateTestOptions(bool allowUnsafe = false) 750421"];
294 [label="outputKind 750422"];
295 [label="optimizationLevel: optimizationLevel 750423"];
296 [label="warningLevel: Diagnostic.MaxWarningLevel 750424"];
297 [label="allowUnsafe: allowUnsafe 750425"];
298 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 750426"];
299 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 750427"];
300 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 750428"];
301 [label="OutputKind.ConsoleApplication 750429"];
302 [label="OptimizationLevel.Release 750430"];
303 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 750431"];
304 [label="param CreateTestOptions(OutputKind outputKind) 750432"];
305 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 750433"];
306 [label="param CreateTestOptions(bool allowUnsafe = false) 750434"];
307 [label="outputKind 750435"];
308 [label="optimizationLevel: optimizationLevel 750436"];
309 [label="warningLevel: Diagnostic.MaxWarningLevel 750437"];
310 [label="allowUnsafe: allowUnsafe 750438"];
311 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 750439"];
312 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 750440"];
313 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 750441"];
314 [label="true 750442"];
315 [label="ReleaseDll.WithDebugPlusMode(true) 750443"];
316 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 750444"];
317 [label="true 750445"];
318 [label="ReleaseExe.WithDebugPlusMode(true) 750446"];
319 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 750447"];
320 [label="OutputKind.DynamicallyLinkedLibrary 750448"];
321 [label="OptimizationLevel.Debug 750449"];
322 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 750450"];
323 [label="param CreateTestOptions(OutputKind outputKind) 750451"];
324 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 750452"];
325 [label="param CreateTestOptions(bool allowUnsafe = false) 750453"];
326 [label="outputKind 750454"];
327 [label="optimizationLevel: optimizationLevel 750455"];
328 [label="warningLevel: Diagnostic.MaxWarningLevel 750456"];
329 [label="allowUnsafe: allowUnsafe 750457"];
330 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 750458"];
331 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 750459"];
332 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 750460"];
333 [label="OutputKind.ConsoleApplication 750461"];
334 [label="OptimizationLevel.Debug 750462"];
335 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 750463"];
336 [label="param CreateTestOptions(OutputKind outputKind) 750464"];
337 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 750465"];
338 [label="param CreateTestOptions(bool allowUnsafe = false) 750466"];
339 [label="outputKind 750467"];
340 [label="optimizationLevel: optimizationLevel 750468"];
341 [label="warningLevel: Diagnostic.MaxWarningLevel 750469"];
342 [label="allowUnsafe: allowUnsafe 750470"];
343 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 750471"];
344 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 750472"];
345 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 750473"];
346 [label="OutputKind.WindowsRuntimeMetadata 750474"];
347 [label="OptimizationLevel.Release 750475"];
348 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 750476"];
349 [label="param CreateTestOptions(OutputKind outputKind) 750477"];
350 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 750478"];
351 [label="param CreateTestOptions(bool allowUnsafe = false) 750479"];
352 [label="outputKind 750480"];
353 [label="optimizationLevel: optimizationLevel 750481"];
354 [label="warningLevel: Diagnostic.MaxWarningLevel 750482"];
355 [label="allowUnsafe: allowUnsafe 750483"];
356 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 750484"];
357 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 750485"];
358 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 750486"];
359 [label="OutputKind.WindowsRuntimeMetadata 750487"];
360 [label="OptimizationLevel.Debug 750488"];
361 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 750489"];
362 [label="param CreateTestOptions(OutputKind outputKind) 750490"];
363 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 750491"];
364 [label="param CreateTestOptions(bool allowUnsafe = false) 750492"];
365 [label="outputKind 750493"];
366 [label="optimizationLevel: optimizationLevel 750494"];
367 [label="warningLevel: Diagnostic.MaxWarningLevel 750495"];
368 [label="allowUnsafe: allowUnsafe 750496"];
369 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 750497"];
370 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 750498"];
371 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 750499"];
372 [label="OutputKind.NetModule 750500"];
373 [label="OptimizationLevel.Release 750501"];
374 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 750502"];
375 [label="param CreateTestOptions(OutputKind outputKind) 750503"];
376 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 750504"];
377 [label="param CreateTestOptions(bool allowUnsafe = false) 750505"];
378 [label="outputKind 750506"];
379 [label="optimizationLevel: optimizationLevel 750507"];
380 [label="warningLevel: Diagnostic.MaxWarningLevel 750508"];
381 [label="allowUnsafe: allowUnsafe 750509"];
382 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 750510"];
383 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 750511"];
384 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 750512"];
385 [label="OutputKind.NetModule 750513"];
386 [label="OptimizationLevel.Debug 750514"];
387 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 750515"];
388 [label="param CreateTestOptions(OutputKind outputKind) 750516"];
389 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 750517"];
390 [label="param CreateTestOptions(bool allowUnsafe = false) 750518"];
391 [label="outputKind 750519"];
392 [label="optimizationLevel: optimizationLevel 750520"];
393 [label="warningLevel: Diagnostic.MaxWarningLevel 750521"];
394 [label="allowUnsafe: allowUnsafe 750522"];
395 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 750523"];
396 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 750524"];
397 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 750525"];
398 [label="true 750526"];
399 [label="ReleaseDll.WithAllowUnsafe(true) 750527"];
400 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 750528"];
401 [label="true 750529"];
402 [label="ReleaseExe.WithAllowUnsafe(true) 750530"];
403 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 750531"];
404 [label="true 750532"];
405 [label="DebugDll.WithAllowUnsafe(true) 750533"];
406 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 750534"];
407 [label="true 750535"];
408 [label="DebugExe.WithAllowUnsafe(true) 750536"];
409 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 750537"];
410 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 750538"];
411 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 750539"];
412 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 750540"];
413 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 750541"];
414 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 750542"];
415 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 750543"];
416 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 750544"];
417 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 750545"];
418 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 750546"];
419 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 750547"];
420 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 750548"];
421 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 750549"];
422 [label="DebugInformationFormat.Pdb 750550"];
423 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 750551"];
424 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 750552"];
425 [label="var comp = CreateCompilation(source, parseOptions: TestOptions.Regular7); 750553"];
426 [label="source 750554"];
427 [label="param operator(string source) 750555"];
428 [label="source 750556"];
429 [label="new CSharpTestSource(source) 750557"];
430 [label="param CSharpTestSource(object value) 750558"];
431 [label="param CSharpTestSource(this) 750559"];
432 [label="Value 750560"];
433 [label="var comp = CreateCompilation(source, parseOptions: TestOptions.Regular7); 750561"];
434 [label="var comp = CreateCompilation(source, parseOptions: TestOptions.Regular7); 750562"];
435 [label="var comp = CreateCompilation(source, parseOptions: TestOptions.Regular7); 750563"];
436 [label="CreateCompilation(source, parseOptions: TestOptions.Regular7) 750564"];
437 [label="param CreateCompilation(CSharpTestSource source) 750565"];
438 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 750566"];
439 [label="param CreateCompilation(CSharpCompilationOptions options = null) 750567"];
440 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 750568"];
441 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 750569"];
442 [label="param CreateCompilation(string assemblyName = '') 750570"];
443 [label="param CreateCompilation(string sourceFileName = '') 750571"];
444 [label="param CreateCompilation(bool skipUsesIsNullable = false) 750572"];
445 [label="source 750573"];
446 [label="targetFramework 750574"];
447 [label="references 750575"];
448 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 750576"];
449 [label="param GetReferences(TargetFramework tf) 750577"];
450 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 750578"];
451 [label="var references = GetReferences(tf); 750579"];
452 [label="GetReferences(tf) 750580"];
453 [label="param GetReferences(TargetFramework targetFramework) 750581"];
454 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 750582"];
455 [label="StandardReferences 750583"];
456 [label="RuntimeUtilities.IsCoreClrRuntime 750584"];
457 [label="Mscorlib46ExtendedReferences 750585"];
458 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 750586"];
459 [label="TestBase.ValueTupleRef 750587"];
460 [label="TestReferences.NetFx.ValueTuple.tuplelib 750588"];
461 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 750589"];
462 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 750590"];
463 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 750591"];
464 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 750592"];
465 [label="return references; 750593"];
466 [label="options 750594"];
467 [label="parseOptions 750595"];
468 [label="assemblyName 750596"];
469 [label="sourceFileName 750597"];
470 [label="skipUsesIsNullable 750598"];
471 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 750599"];
472 [label="param CreateEmptyCompilation(CSharpTestSource source) 750600"];
473 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 750601"];
474 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 750602"];
475 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 750603"];
476 [label="param CreateEmptyCompilation(string assemblyName = '') 750604"];
477 [label="param CreateEmptyCompilation(string sourceFileName = '') 750605"];
478 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 750606"];
479 [label="source 750607"];
480 [label="references 750608"];
481 [label="options 750609"];
482 [label="parseOptions 750610"];
483 [label="assemblyName 750611"];
484 [label="sourceFileName 750612"];
485 [label="skipUsesIsNullable 750613"];
486 [label="null 750614"];
487 [label="experimentalFeature: null 750615"];
488 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 750616"];
489 [label="param CreateCompilationCore(CSharpTestSource source) 750617"];
490 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 750618"];
491 [label="param CreateCompilationCore(CSharpCompilationOptions options) 750619"];
492 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 750620"];
493 [label="param CreateCompilationCore(string assemblyName) 750621"];
494 [label="param CreateCompilationCore(string sourceFileName) 750622"];
495 [label="param CreateCompilationCore(bool skipUsesIsNullable) 750623"];
496 [label="param CreateCompilationCore(MessageID? experimentalFeature) 750624"];
497 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 750625"];
498 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 750626"];
499 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 750627"];
500 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 750628"];
501 [label="param GetSyntaxTrees(string sourceFileName = '') 750629"];
502 [label="param GetSyntaxTrees(this) 750630"];
503 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 750631"];
504 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 750632"];
505 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 750633"];
506 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 750634"];
507 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 750635"];
508 [label="param Parse(string text) 750636"];
509 [label="param Parse(string filename = '') 750637"];
510 [label="param Parse(CSharpParseOptions options = null) 750638"];
511 [label="param Parse(Encoding encoding = null) 750639"];
512 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 750640"];
513 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 750641"];
514 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 750642"];
515 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 750643"];
516 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 750644"];
517 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 750645"];
518 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 750646"];
519 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 750647"];
520 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 750648"];
521 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 750649"];
522 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 750650"];
523 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 750651"];
524 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 750652"];
525 [label="param CheckSerializable(SyntaxTree tree) 750653"];
526 [label="var stream = new MemoryStream(); 750654"];
527 [label="var root = tree.GetRoot(); 750655"];
528 [label="var root = tree.GetRoot(); 750656"];
529 [label="root.SerializeTo(stream); 750657"];
530 [label="root.SerializeTo(stream); 750658"];
531 [label="root.SerializeTo(stream); 750659"];
532 [label="stream.Position = 0; 750660"];
533 [label="stream.Position 750661"];
534 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 750662"];
535 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 750663"];
536 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 750664"];
537 [label="return tree; 750665"];
538 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 750666"];
539 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 750667"];
540 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 750668"];
541 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 750669"];
542 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 750670"];
543 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 750671"];
544 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 750672"];
545 [label="hasTopLevelStatements 750673"];
546 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 750674"];
547 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 750675"];
548 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 750676"];
549 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 750677"];
550 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 750678"];
551 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 750679"];
552 [label="param ValidateIOperations(Func<Compilation> createCompilation) 750680"];
553 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 750681"];
554 [label="return; 750682"];
555 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 750683"];
556 [label="var compilation = createCompilationLambda(); 750684"];
557 [label="var compilation = createCompilationLambda(); 750685"];
558 [label="return Guid.NewGuid().ToString('D'); 750686"];
559 [label="var compilation = createCompilationLambda(); 750687"];
560 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 750688"];
561 [label="IsNullableEnabled(compilation) 750689"];
562 [label="param IsNullableEnabled(CSharpCompilation compilation) 750690"];
563 [label="var trees = compilation.SyntaxTrees; 750691"];
564 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 750692"];
565 [label="var options = (CSharpParseOptions)trees[0].Options; 750693"];
566 [label="var options = (CSharpParseOptions)trees[0].Options; 750694"];
567 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 750695"];
568 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 750696"];
569 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 750697"];
570 [label="VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty); 750698"];
571 [label="VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty); 750699"];
572 [label="VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty); 750700"];
573 [label="VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty) 750701"];
574 [label="param VerifyUsesOfNullability(Symbol symbol) 750702"];
575 [label="param VerifyUsesOfNullability(ImmutableArray<string> expectedUsesOfNullable) 750703"];
576 [label="var builder = ArrayBuilder<Symbol>.GetInstance(); 750704"];
577 [label="UsesIsNullableVisitor.GetUses(builder, symbol); 750705"];
578 [label="UsesIsNullableVisitor.GetUses(builder, symbol); 750706"];
579 [label="UsesIsNullableVisitor.GetUses(builder, symbol) 750707"];
580 [label="param GetUses(ArrayBuilder<Symbol> builder) 750708"];
581 [label="param GetUses(Symbol symbol) 750709"];
582 [label="var visitor = new UsesIsNullableVisitor(builder); 750710"];
583 [label="var visitor = new UsesIsNullableVisitor(builder); 750711"];
584 [label="new UsesIsNullableVisitor(builder) 750712"];
585 [label="param UsesIsNullableVisitor(ArrayBuilder<Symbol> builder) 750713"];
586 [label="param UsesIsNullableVisitor(this) 750714"];
587 [label="param UsesIsNullableVisitor(this) 750715"];
588 [label="_builder 750716"];
589 [label="_builder 750717"];
590 [label="visitor.Visit(symbol); 750718"];
591 [label="visitor.Visit(symbol); 750719"];
592 [label="visitor.Visit(symbol); 750720"];
593 [label="param VisitNamespace(NamespaceSymbol symbol) 750721"];
594 [label="param VisitNamespace(this) 750722"];
595 [label="return VisitList(symbol.GetMembers()); 750723"];
596 [label="VisitList(symbol.GetMembers()) 750724"];
597 [label="param VisitList(ImmutableArray<TSymbol> symbols) 750725"];
598 [label="param VisitList(this) 750726"];
599 [label="bool result = false; 750727"];
600 [label="foreach (var symbol in symbols)\n            {\n                if (this.Visit(symbol))\n                {\n                    result = true;\n                }\n            } 750728"];
601 [label="if (this.Visit(symbol))\n                {\n                    result = true;\n                } 750729"];
602 [label="if (this.Visit(symbol))\n                {\n                    result = true;\n                } 750730"];
603 [label="param VisitNamedType(NamedTypeSymbol symbol) 750731"];
604 [label="param VisitNamedType(this) 750732"];
605 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 750733"];
606 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 750734"];
607 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 750735"];
608 [label="AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) 750736"];
609 [label="param AddIfUsesIsNullable(Symbol symbol) 750737"];
610 [label="param AddIfUsesIsNullable(TypeSymbol type) 750738"];
611 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 750739"];
612 [label="param AddIfUsesIsNullable(this) 750740"];
613 [label="if (UsesIsNullable(type, inProgress))\n            {\n                Add(symbol);\n                return true;\n            } 750741"];
614 [label="if (UsesIsNullable(type, inProgress))\n            {\n                Add(symbol);\n                return true;\n            } 750742"];
615 [label="UsesIsNullable(type, inProgress) 750743"];
616 [label="param UsesIsNullable(TypeSymbol type) 750744"];
617 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 750745"];
618 [label="param UsesIsNullable(this) 750746"];
619 [label="if (type is null)\n            {\n                return false;\n            } 750747"];
620 [label="switch (type.TypeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Delegate:\n                case TypeKind.Interface:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    }\n                    break;\n            } 750748"];
621 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 750749"];
622 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 750750"];
623 [label="UsesIsNullable(type.ContainingType, inProgress) 750751"];
624 [label="param UsesIsNullable(TypeSymbol type) 750752"];
625 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 750753"];
626 [label="param UsesIsNullable(this) 750754"];
627 [label="if (type is null)\n            {\n                return false;\n            } 750755"];
628 [label="return false; 750756"];
629 [label="switch (type.TypeKind)\n            {\n                case TypeKind.Array:\n                    return UsesIsNullable(((ArrayTypeSymbol)type).ElementTypeWithAnnotations, inProgress);\n                case TypeKind.Class:\n                case TypeKind.Delegate:\n                case TypeKind.Error:\n                case TypeKind.Interface:\n                case TypeKind.Struct:\n                    return UsesIsNullable(((NamedTypeSymbol)type).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics, inProgress);\n                case TypeKind.Dynamic:\n                case TypeKind.Enum:\n                    return false;\n                case TypeKind.Pointer:\n                    return UsesIsNullable(((PointerTypeSymbol)type).PointedAtTypeWithAnnotations, inProgress);\n                case TypeKind.TypeParameter:\n                    var typeParameter = (TypeParameterSymbol)type;\n                    // Lafhis\n                    if (inProgress != null ? inProgress.ContainsReference(typeParameter) == true : false)\n                    {\n                        return false;\n                    }\n                    inProgress = inProgress ?? ConsList<TypeParameterSymbol>.Empty;\n                    inProgress = inProgress.Prepend(typeParameter);\n                    return UsesIsNullable(typeParameter.ConstraintTypesNoUseSiteDiagnostics, inProgress) ||\n                        typeParameter.ReferenceTypeConstraintIsNullable == true;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(type.TypeKind);\n            } 750757"];
630 [label="return UsesIsNullable(((NamedTypeSymbol)type).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics, inProgress); 750758"];
631 [label="return UsesIsNullable(((NamedTypeSymbol)type).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics, inProgress); 750759"];
632 [label="UsesIsNullable(((NamedTypeSymbol)type).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics, inProgress) 750760"];
633 [label="param UsesIsNullable(ImmutableArray<TypeWithAnnotations> types) 750761"];
634 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 750762"];
635 [label="param UsesIsNullable(this) 750763"];
636 [label="return types.Any(t => UsesIsNullable(t, inProgress)); 750764"];
637 [label="return types.Any(t => UsesIsNullable(t, inProgress)); 750765"];
638 [label="return types.Any(t => UsesIsNullable(t, inProgress)); 750766"];
639 [label="return false; 750767"];
640 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 750768"];
641 [label="AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) 750769"];
642 [label="param AddIfUsesIsNullable(Symbol symbol) 750770"];
643 [label="param AddIfUsesIsNullable(ImmutableArray<NamedTypeSymbol> types) 750771"];
644 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 750772"];
645 [label="param AddIfUsesIsNullable(this) 750773"];
646 [label="foreach (var type in types)\n            {\n                if (UsesIsNullable(type, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                }\n            } 750774"];
647 [label="return false; 750775"];
648 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 750776"];
649 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 750777"];
650 [label="AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) 750778"];
651 [label="param AddIfUsesIsNullable(Symbol symbol) 750779"];
652 [label="param AddIfUsesIsNullable(ImmutableArray<TypeParameterSymbol> typeParameters) 750780"];
653 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 750781"];
654 [label="param AddIfUsesIsNullable(this) 750782"];
655 [label="foreach (var type in typeParameters)\n            {\n                if (UsesIsNullable(type, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                }\n            } 750783"];
656 [label="return false; 750784"];
657 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 750785"];
658 [label="if (AddIfUsesIsNullable(symbol, symbol.BaseTypeNoUseSiteDiagnostics, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.InterfacesNoUseSiteDiagnostics(), inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null))\n            {\n                return true;\n            } 750786"];
659 [label="return VisitList(symbol.GetMembers()); 750787"];
660 [label="VisitList(symbol.GetMembers()) 750788"];
661 [label="param VisitList(ImmutableArray<TSymbol> symbols) 750789"];
662 [label="param VisitList(this) 750790"];
663 [label="bool result = false; 750791"];
664 [label="param VisitMethod(MethodSymbol symbol) 750792"];
665 [label="param VisitMethod(this) 750793"];
666 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 750794"];
667 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 750795"];
668 [label="AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) 750796"];
669 [label="param AddIfUsesIsNullable(Symbol symbol) 750797"];
670 [label="param AddIfUsesIsNullable(ImmutableArray<TypeParameterSymbol> typeParameters) 750798"];
671 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 750799"];
672 [label="param AddIfUsesIsNullable(this) 750800"];
673 [label="foreach (var type in typeParameters)\n            {\n                if (UsesIsNullable(type, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                }\n            } 750801"];
674 [label="if (UsesIsNullable(type, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                } 750802"];
675 [label="if (UsesIsNullable(type, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                } 750803"];
676 [label="UsesIsNullable(type, inProgress) 750804"];
677 [label="param UsesIsNullable(TypeSymbol type) 750805"];
678 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 750806"];
679 [label="param UsesIsNullable(this) 750807"];
680 [label="if (type is null)\n            {\n                return false;\n            } 750808"];
681 [label="switch (type.TypeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Delegate:\n                case TypeKind.Interface:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    }\n                    break;\n            } 750809"];
682 [label="var typeParameter = (TypeParameterSymbol)type; 750810"];
683 [label="if (inProgress != null ? inProgress.ContainsReference(typeParameter) == true : false)\n                    {\n                        return false;\n                    } 750811"];
684 [label="if (inProgress != null ? inProgress.ContainsReference(typeParameter) == true : false)\n                    {\n                        return false;\n                    } 750812"];
685 [label="inProgress != null 750813"];
686 [label="inProgress = inProgress ?? ConsList<TypeParameterSymbol>.Empty; 750814"];
687 [label="inProgress = inProgress ?? ConsList<TypeParameterSymbol>.Empty; 750815"];
688 [label="inProgress = inProgress.Prepend(typeParameter); 750816"];
689 [label="inProgress = inProgress.Prepend(typeParameter); 750817"];
690 [label="inProgress = inProgress.Prepend(typeParameter); 750818"];
691 [label="return UsesIsNullable(typeParameter.ConstraintTypesNoUseSiteDiagnostics, inProgress) ||\n                        typeParameter.ReferenceTypeConstraintIsNullable == true; 750819"];
692 [label="return UsesIsNullable(typeParameter.ConstraintTypesNoUseSiteDiagnostics, inProgress) ||\n                        typeParameter.ReferenceTypeConstraintIsNullable == true; 750820"];
693 [label="UsesIsNullable(typeParameter.ConstraintTypesNoUseSiteDiagnostics, inProgress) 750821"];
694 [label="param UsesIsNullable(ImmutableArray<TypeWithAnnotations> types) 750822"];
695 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 750823"];
696 [label="param UsesIsNullable(this) 750824"];
697 [label="return types.Any(t => UsesIsNullable(t, inProgress)); 750825"];
698 [label="return UsesIsNullable(typeParameter.ConstraintTypesNoUseSiteDiagnostics, inProgress) ||\n                        typeParameter.ReferenceTypeConstraintIsNullable == true; 750826"];
699 [label="return false; 750827"];
700 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 750828"];
701 [label="AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) 750829"];
702 [label="param AddIfUsesIsNullable(Symbol symbol) 750830"];
703 [label="param AddIfUsesIsNullable(TypeWithAnnotations type) 750831"];
704 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 750832"];
705 [label="param AddIfUsesIsNullable(this) 750833"];
706 [label="if (UsesIsNullable(type, inProgress))\n            {\n                Add(symbol);\n                return true;\n            } 750834"];
707 [label="if (UsesIsNullable(type, inProgress))\n            {\n                Add(symbol);\n                return true;\n            } 750835"];
708 [label="UsesIsNullable(type, inProgress) 750836"];
709 [label="param UsesIsNullable(TypeWithAnnotations type) 750837"];
710 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 750838"];
711 [label="param UsesIsNullable(this) 750839"];
712 [label="if (!type.HasType)\n            {\n                return false;\n            } 750840"];
713 [label="var typeSymbol = type.Type; 750841"];
714 [label="return (type.NullableAnnotation != NullableAnnotation.Oblivious && typeSymbol.IsReferenceType && !typeSymbol.IsErrorType()) ||\n                UsesIsNullable(typeSymbol, inProgress); 750842"];
715 [label="return (type.NullableAnnotation != NullableAnnotation.Oblivious && typeSymbol.IsReferenceType && !typeSymbol.IsErrorType()) ||\n                UsesIsNullable(typeSymbol, inProgress); 750843"];
716 [label="return (type.NullableAnnotation != NullableAnnotation.Oblivious && typeSymbol.IsReferenceType && !typeSymbol.IsErrorType()) ||\n                UsesIsNullable(typeSymbol, inProgress); 750844"];
717 [label="UsesIsNullable(typeSymbol, inProgress) 750845"];
718 [label="param UsesIsNullable(TypeSymbol type) 750846"];
719 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 750847"];
720 [label="param UsesIsNullable(this) 750848"];
721 [label="if (type is null)\n            {\n                return false;\n            } 750849"];
722 [label="switch (type.TypeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Delegate:\n                case TypeKind.Interface:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    }\n                    break;\n            } 750850"];
723 [label="if (inProgress != null ? inProgress.ContainsReference(typeParameter) == true : false)\n                    {\n                        return false;\n                    } 750851"];
724 [label="if (inProgress != null ? inProgress.ContainsReference(typeParameter) == true : false)\n                    {\n                        return false;\n                    } 750852"];
725 [label="inProgress != null 750853"];
726 [label="inProgress = inProgress ?? ConsList<TypeParameterSymbol>.Empty; 750854"];
727 [label="param UsesIsNullable(this) 750855"];
728 [label="return types.Any(t => UsesIsNullable(t, inProgress)); 750856"];
729 [label="return false; 750857"];
730 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 750858"];
731 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 750859"];
732 [label="AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null) 750860"];
733 [label="param AddIfUsesIsNullable(Symbol symbol) 750861"];
734 [label="param AddIfUsesIsNullable(ImmutableArray<ParameterSymbol> parameters) 750862"];
735 [label="param AddIfUsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 750863"];
736 [label="param AddIfUsesIsNullable(this) 750864"];
737 [label="foreach (var parameter in parameters)\n            {\n                if (UsesIsNullable(parameter.TypeWithAnnotations, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                }\n            } 750865"];
738 [label="if (UsesIsNullable(parameter.TypeWithAnnotations, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                } 750866"];
739 [label="if (UsesIsNullable(parameter.TypeWithAnnotations, inProgress))\n                {\n                    Add(symbol);\n                    return true;\n                } 750867"];
740 [label="UsesIsNullable(parameter.TypeWithAnnotations, inProgress) 750868"];
741 [label="param UsesIsNullable(TypeWithAnnotations type) 750869"];
742 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 750870"];
743 [label="param UsesIsNullable(this) 750871"];
744 [label="if (!type.HasType)\n            {\n                return false;\n            } 750872"];
745 [label="if (type is null)\n            {\n                return false;\n            } 750873"];
746 [label="switch (type.TypeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Delegate:\n                case TypeKind.Interface:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    }\n                    break;\n            } 750874"];
747 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 750875"];
748 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 750876"];
749 [label="UsesIsNullable(type.ContainingType, inProgress) 750877"];
750 [label="param UsesIsNullable(TypeSymbol type) 750878"];
751 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 750879"];
752 [label="param UsesIsNullable(this) 750880"];
753 [label="if (type is null)\n            {\n                return false;\n            } 750881"];
754 [label="return false; 750882"];
755 [label="param UsesIsNullable(this) 750883"];
756 [label="return types.Any(t => UsesIsNullable(t, inProgress)); 750884"];
757 [label="return false; 750885"];
758 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 750886"];
759 [label="return AddIfUsesIsNullable(symbol, symbol.TypeParameters, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.ReturnTypeWithAnnotations, inProgress: null) ||\n                AddIfUsesIsNullable(symbol, symbol.Parameters, inProgress: null); 750887"];
760 [label="if (this.Visit(symbol))\n                {\n                    result = true;\n                } 750888"];
761 [label="param AddIfUsesIsNullable(Symbol symbol) 750889"];
762 [label="param AddIfUsesIsNullable(Symbol symbol) 750890"];
763 [label="if (!type.HasType)\n            {\n                return false;\n            } 750891"];
764 [label="if (type is null)\n            {\n                return false;\n            } 750892"];
765 [label="switch (type.TypeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Delegate:\n                case TypeKind.Interface:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    }\n                    break;\n            } 750893"];
766 [label="if (UsesIsNullable(type.ContainingType, inProgress))\n                    {\n                        return true;\n                    } 750894"];
767 [label="UsesIsNullable(type.ContainingType, inProgress) 750895"];
768 [label="param UsesIsNullable(TypeSymbol type) 750896"];
769 [label="param UsesIsNullable(ConsList<TypeParameterSymbol> inProgress) 750897"];
770 [label="if (type is null)\n            {\n                return false;\n            } 750898"];
771 [label="return false; 750899"];
772 [label="param AddIfUsesIsNullable(Symbol symbol) 750900"];
773 [label="return result; 750901"];
774 [label="return VisitList(symbol.GetMembers()); 750902"];
775 [label="if (this.Visit(symbol))\n                {\n                    result = true;\n                } 750903"];
776 [label="return result; 750904"];
777 [label="return VisitList(symbol.GetMembers()); 750905"];
778 [label="UsesIsNullableVisitor.GetUses(builder, symbol); 750906"];
779 [label="var format = SymbolDisplayFormat.TestFormat\n                .AddMiscellaneousOptions(SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier)\n                .RemoveParameterOptions(SymbolDisplayParameterOptions.IncludeName); 750907"];
780 [label="var symbols = builder.SelectAsArray(s => s.ToDisplayString(format)); 750908"];
781 [label="var symbols = builder.SelectAsArray(s => s.ToDisplayString(format)); 750909"];
782 [label="var symbols = builder.SelectAsArray(s => s.ToDisplayString(format)); 750910"];
783 [label="builder.Free(); 750911"];
784 [label="'ROSLYN_DIFFTOOL' 750912"];
785 [label="Environment.GetEnvironmentVariable('ROSLYN_DIFFTOOL') 750913"];
786 [label="s_diffToolPath = Environment.GetEnvironmentVariable('ROSLYN_DIFFTOOL') 750914"];
787 [label="AssertEx.Equal(expectedUsesOfNullable, symbols, itemInspector: s => $'\\'{s}\\''); 750915"];
788 [label="AssertEx.Equal(expectedUsesOfNullable, symbols, itemInspector: s => $'\\'{s}\\''); 750916"];
789 [label="AssertEx.Equal(expectedUsesOfNullable, symbols, itemInspector: s => $'\\'{s}\\''); 750917"];
790 [label="AssertEx.Equal(expectedUsesOfNullable, symbols, itemInspector: s => $'\\'{s}\\'') 750918"];
791 [label="param Equal(IEnumerable<T> expected) 750919"];
792 [label="param Equal(IEnumerable<T> actual) 750920"];
793 [label="param Equal(IEqualityComparer<T> comparer = null) 750921"];
794 [label="param Equal(string message = null) 750922"];
795 [label="param Equal(string itemSeparator = null) 750923"];
796 [label="param Equal(Func<T, string> itemInspector = null) 750924"];
797 [label="param Equal(string expectedValueSourcePath = null) 750925"];
798 [label="param Equal(int expectedValueSourceLine = 0) 750926"];
799 [label="var toReturn = true; 750927"];
800 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 750928"];
801 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 750929"];
802 [label="CustomAssert.NotNull(actual); 750930"];
803 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 750931"];
804 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 750932"];
805 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 750933"];
806 [label="SequenceEqual(expected, actual, comparer) 750934"];
807 [label="param SequenceEqual(IEnumerable<T> expected) 750935"];
808 [label="param SequenceEqual(IEnumerable<T> actual) 750936"];
809 [label="param SequenceEqual(IEqualityComparer<T> comparer = null) 750937"];
810 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 750938"];
811 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 750939"];
812 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 750940"];
813 [label="var enumerator1 = expected.GetEnumerator(); 750941"];
814 [label="var enumerator2 = actual.GetEnumerator(); 750942"];
815 [label="while (true)\n            {\n                var hasNext1 = enumerator1.MoveNext();\n                var hasNext2 = enumerator2.MoveNext();\n\n                if (hasNext1 != hasNext2)\n                {\n                    return false;\n                }\n\n                if (!hasNext1)\n                {\n                    break;\n                }\n\n                var value1 = enumerator1.Current;\n                var value2 = enumerator2.Current;\n\n                if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                }\n            } 750943"];
816 [label="var hasNext1 = enumerator1.MoveNext(); 750944"];
817 [label="var hasNext2 = enumerator2.MoveNext(); 750945"];
818 [label="if (hasNext1 != hasNext2)\n                {\n                    return false;\n                } 750946"];
819 [label="if (!hasNext1)\n                {\n                    break;\n                } 750947"];
820 [label="return true; 750948"];
821 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 750949"];
822 [label="return true; 750950"];
823 [label="AssertEx.Equal(expectedUsesOfNullable, symbols, itemInspector: s => $'\\'{s}\\''); 750951"];
824 [label="return compilation; 750952"];
825 [label="comp.VerifyDiagnostics(\n                // (5,21): error CS8314: An expression of type 'ValueType' cannot be handled by a pattern of type 'T' in C# 7. Please use language version 7.1 or greater.\n                //         return o is T t ? t : default(T);\n                Diagnostic(ErrorCode.ERR_PatternWrongGenericTypeInVersion, 'T').WithArguments('System.ValueType', 'T', '7.0', '7.1').WithLocation(5, 21)); 750953"];
826 [label="comp.VerifyDiagnostics(\n                // (5,21): error CS8314: An expression of type 'ValueType' cannot be handled by a pattern of type 'T' in C# 7. Please use language version 7.1 or greater.\n                //         return o is T t ? t : default(T);\n                Diagnostic(ErrorCode.ERR_PatternWrongGenericTypeInVersion, 'T').WithArguments('System.ValueType', 'T', '7.0', '7.1').WithLocation(5, 21)); 750954"];
827 [label="comp.VerifyDiagnostics(\n                // (5,21): error CS8314: An expression of type 'ValueType' cannot be handled by a pattern of type 'T' in C# 7. Please use language version 7.1 or greater.\n                //         return o is T t ? t : default(T);\n                Diagnostic(ErrorCode.ERR_PatternWrongGenericTypeInVersion, 'T').WithArguments('System.ValueType', 'T', '7.0', '7.1').WithLocation(5, 21)); 750955"];
828 [label="Diagnostic(ErrorCode.ERR_PatternWrongGenericTypeInVersion, 'T') 750956"];
829 [label="param Diagnostic(object code) 750957"];
830 [label="param Diagnostic(string squiggledText = null) 750958"];
831 [label="param Diagnostic(object[] arguments = null) 750959"];
832 [label="param Diagnostic(LinePosition? startLocation = null) 750960"];
833 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 750961"];
834 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 750962"];
835 [label="param Diagnostic(bool isSuppressed = false) 750963"];
836 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 750964"];
837 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 750965"];
838 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 750966"];
839 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 750967"];
840 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 750968"];
841 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 750969"];
842 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 750970"];
843 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 750971"];
844 [label="param Diagnostic(object code) 750972"];
845 [label="param Diagnostic(string squiggledText = null) 750973"];
846 [label="param Diagnostic(object[] arguments = null) 750974"];
847 [label="param Diagnostic(LinePosition? startLocation = null) 750975"];
848 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 750976"];
849 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 750977"];
850 [label="param Diagnostic(bool isSuppressed = false) 750978"];
851 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 750979"];
852 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 750980"];
853 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 750981"];
854 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 750982"];
855 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 750983"];
856 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 750984"];
857 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 750985"];
858 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 750986"];
859 [label="{ } 750987"];
860 [label="None = { } 750988"];
861 [label="null 750989"];
862 [label="Any = null 750990"];
863 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 750991"];
864 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 750992"];
865 [label="param DiagnosticDescription(object code) 750993"];
866 [label="param DiagnosticDescription(bool isWarningAsError) 750994"];
867 [label="param DiagnosticDescription(string squiggledText) 750995"];
868 [label="param DiagnosticDescription(object[] arguments) 750996"];
869 [label="param DiagnosticDescription(LinePosition? startLocation) 750997"];
870 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 750998"];
871 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 750999"];
872 [label="param DiagnosticDescription(Type errorCodeType = null) 751000"];
873 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 751001"];
874 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 751002"];
875 [label="param DiagnosticDescription(bool isSuppressed = false) 751003"];
876 [label="param DiagnosticDescription(this) 751004"];
877 [label="_code 751005"];
878 [label="_isWarningAsError 751006"];
879 [label="_isSuppressed 751007"];
880 [label="_squiggledText 751008"];
881 [label="_arguments 751009"];
882 [label="_startPosition 751010"];
883 [label="_argumentOrderDoesNotMatter 751011"];
884 [label="_errorCodeType 751012"];
885 [label="_ignoreArgumentsWhenComparing 751013"];
886 [label="_defaultSeverityOpt 751014"];
887 [label="_effectiveSeverityOpt 751015"];
888 [label="_syntaxPredicate 751016"];
889 [label="_showPredicate 751017"];
890 [label="_location 751018"];
891 [label="_argumentsAsStrings 751019"];
892 [label="_code 751020"];
893 [label="_isWarningAsError 751021"];
894 [label="_squiggledText 751022"];
895 [label="_arguments 751023"];
896 [label="_startPosition 751024"];
897 [label="_syntaxPredicate 751025"];
898 [label="_argumentOrderDoesNotMatter 751026"];
899 [label="_errorCodeType = errorCodeType ?? code.GetType(); 751027"];
900 [label="_errorCodeType 751028"];
901 [label="_defaultSeverityOpt 751029"];
902 [label="_effectiveSeverityOpt 751030"];
903 [label="_isSuppressed 751031"];
904 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 751032"];
905 [label="comp.VerifyDiagnostics(\n                // (5,21): error CS8314: An expression of type 'ValueType' cannot be handled by a pattern of type 'T' in C# 7. Please use language version 7.1 or greater.\n                //         return o is T t ? t : default(T);\n                Diagnostic(ErrorCode.ERR_PatternWrongGenericTypeInVersion, 'T').WithArguments('System.ValueType', 'T', '7.0', '7.1').WithLocation(5, 21)); 751033"];
906 [label="Diagnostic(ErrorCode.ERR_PatternWrongGenericTypeInVersion, 'T').WithArguments('System.ValueType', 'T', '7.0', '7.1') 751034"];
907 [label="Diagnostic(ErrorCode.ERR_PatternWrongGenericTypeInVersion, 'T').WithArguments('System.ValueType', 'T', '7.0', '7.1') 751035"];
908 [label="param WithArguments(params object[] arguments) 751036"];
909 [label="param WithArguments(this) 751037"];
910 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751038"];
911 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751039"];
912 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751040"];
913 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751041"];
914 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751042"];
915 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751043"];
916 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751044"];
917 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751045"];
918 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751046"];
919 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751047"];
920 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751048"];
921 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 751049"];
922 [label="param DiagnosticDescription(object code) 751050"];
923 [label="param DiagnosticDescription(bool isWarningAsError) 751051"];
924 [label="param DiagnosticDescription(string squiggledText) 751052"];
925 [label="param DiagnosticDescription(object[] arguments) 751053"];
926 [label="param DiagnosticDescription(LinePosition? startLocation) 751054"];
927 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 751055"];
928 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 751056"];
929 [label="param DiagnosticDescription(Type errorCodeType = null) 751057"];
930 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 751058"];
931 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 751059"];
932 [label="param DiagnosticDescription(bool isSuppressed = false) 751060"];
933 [label="param DiagnosticDescription(this) 751061"];
934 [label="_code 751062"];
935 [label="_isWarningAsError 751063"];
936 [label="_isSuppressed 751064"];
937 [label="_squiggledText 751065"];
938 [label="_arguments 751066"];
939 [label="_startPosition 751067"];
940 [label="_argumentOrderDoesNotMatter 751068"];
941 [label="_errorCodeType 751069"];
942 [label="_ignoreArgumentsWhenComparing 751070"];
943 [label="_defaultSeverityOpt 751071"];
944 [label="_effectiveSeverityOpt 751072"];
945 [label="_syntaxPredicate 751073"];
946 [label="_showPredicate 751074"];
947 [label="_location 751075"];
948 [label="_argumentsAsStrings 751076"];
949 [label="_arguments 751077"];
950 [label="_argumentOrderDoesNotMatter 751078"];
951 [label="comp.VerifyDiagnostics(\n                // (5,21): error CS8314: An expression of type 'ValueType' cannot be handled by a pattern of type 'T' in C# 7. Please use language version 7.1 or greater.\n                //         return o is T t ? t : default(T);\n                Diagnostic(ErrorCode.ERR_PatternWrongGenericTypeInVersion, 'T').WithArguments('System.ValueType', 'T', '7.0', '7.1').WithLocation(5, 21)); 751079"];
952 [label="Diagnostic(ErrorCode.ERR_PatternWrongGenericTypeInVersion, 'T').WithArguments('System.ValueType', 'T', '7.0', '7.1').WithLocation(5, 21) 751080"];
953 [label="param WithLocation(int line) 751081"];
954 [label="param WithLocation(int column) 751082"];
955 [label="param WithLocation(this) 751083"];
956 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751084"];
957 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751085"];
958 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751086"];
959 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751087"];
960 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751088"];
961 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751089"];
962 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751090"];
963 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751091"];
964 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751092"];
965 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751093"];
966 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751094"];
967 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751095"];
968 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751096"];
969 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 751097"];
970 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 751098"];
971 [label="param DiagnosticDescription(object code) 751099"];
972 [label="param DiagnosticDescription(bool isWarningAsError) 751100"];
973 [label="param DiagnosticDescription(string squiggledText) 751101"];
974 [label="param DiagnosticDescription(object[] arguments) 751102"];
975 [label="param DiagnosticDescription(LinePosition? startLocation) 751103"];
976 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 751104"];
977 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 751105"];
978 [label="param DiagnosticDescription(Type errorCodeType = null) 751106"];
979 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 751107"];
980 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 751108"];
981 [label="param DiagnosticDescription(bool isSuppressed = false) 751109"];
982 [label="param DiagnosticDescription(this) 751110"];
983 [label="_code 751111"];
984 [label="_isWarningAsError 751112"];
985 [label="_isSuppressed 751113"];
986 [label="_squiggledText 751114"];
987 [label="_arguments 751115"];
988 [label="_startPosition 751116"];
989 [label="_argumentOrderDoesNotMatter 751117"];
990 [label="_errorCodeType 751118"];
991 [label="_ignoreArgumentsWhenComparing 751119"];
992 [label="_defaultSeverityOpt 751120"];
993 [label="_effectiveSeverityOpt 751121"];
994 [label="_syntaxPredicate 751122"];
995 [label="_showPredicate 751123"];
996 [label="_location 751124"];
997 [label="_argumentsAsStrings 751125"];
998 [label="_startPosition 751126"];
999 [label="comp.VerifyDiagnostics(\n                // (5,21): error CS8314: An expression of type 'ValueType' cannot be handled by a pattern of type 'T' in C# 7. Please use language version 7.1 or greater.\n                //         return o is T t ? t : default(T);\n                Diagnostic(ErrorCode.ERR_PatternWrongGenericTypeInVersion, 'T').WithArguments('System.ValueType', 'T', '7.0', '7.1').WithLocation(5, 21)); 751127"];
1000 [label="comp.VerifyDiagnostics(\n                // (5,21): error CS8314: An expression of type 'ValueType' cannot be handled by a pattern of type 'T' in C# 7. Please use language version 7.1 or greater.\n                //         return o is T t ? t : default(T);\n                Diagnostic(ErrorCode.ERR_PatternWrongGenericTypeInVersion, 'T').WithArguments('System.ValueType', 'T', '7.0', '7.1').WithLocation(5, 21)) 751128"];
1001 [label="comp.VerifyDiagnostics(\n                // (5,21): error CS8314: An expression of type 'ValueType' cannot be handled by a pattern of type 'T' in C# 7. Please use language version 7.1 or greater.\n                //         return o is T t ? t : default(T);\n                Diagnostic(ErrorCode.ERR_PatternWrongGenericTypeInVersion, 'T').WithArguments('System.ValueType', 'T', '7.0', '7.1').WithLocation(5, 21)) 751129"];
1002 [label="param VerifyDiagnostics(this TCompilation c) 751130"];
1003 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 751131"];
1004 [label="var diagnostics = c.GetDiagnostics(); 751132"];
1005 [label="var diagnostics = c.GetDiagnostics(); 751133"];
1006 [label="diagnostics.Verify(expected); 751134"];
1007 [label="diagnostics.Verify(expected); 751135"];
1008 [label="diagnostics.Verify(expected) 751136"];
1009 [label="param Verify(this ImmutableArray<Diagnostic> actual) 751137"];
1010 [label="param Verify(params DiagnosticDescription[] expected) 751138"];
1011 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 751139"];
1012 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 751140"];
1013 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 751141"];
1014 [label="param Verify(this IEnumerable<Diagnostic> actual) 751142"];
1015 [label="param Verify(params DiagnosticDescription[] expected) 751143"];
1016 [label="Verify(actual, expected, errorCodeOnly: false); 751144"];
1017 [label="Verify(actual, expected, errorCodeOnly: false); 751145"];
1018 [label="Verify(actual, expected, errorCodeOnly: false); 751146"];
1019 [label="Verify(actual, expected, errorCodeOnly: false) 751147"];
1020 [label="param Verify(IEnumerable<Diagnostic> actual) 751148"];
1021 [label="param Verify(DiagnosticDescription[] expected) 751149"];
1022 [label="param Verify(bool errorCodeOnly) 751150"];
1023 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 751151"];
1024 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 751152"];
1025 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 751153"];
1026 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 751154"];
1027 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 751155"];
1028 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 751156"];
1029 [label="=> _defaultSeverityOpt 751157"];
1030 [label="_defaultSeverityOpt 751158"];
1031 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 751159"];
1032 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 751160"];
1033 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 751161"];
1034 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 751162"];
1035 [label="=> _effectiveSeverityOpt 751163"];
1036 [label="_effectiveSeverityOpt 751164"];
1037 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 751165"];
1038 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 751166"];
1039 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 751167"];
1040 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 751168"];
1041 [label="param DiagnosticDescription(Diagnostic d) 751169"];
1042 [label="param DiagnosticDescription(bool errorCodeOnly) 751170"];
1043 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 751171"];
1044 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 751172"];
1045 [label="param DiagnosticDescription(this) 751173"];
1046 [label="_code 751174"];
1047 [label="_isWarningAsError 751175"];
1048 [label="_isSuppressed 751176"];
1049 [label="_squiggledText 751177"];
1050 [label="_arguments 751178"];
1051 [label="_startPosition 751179"];
1052 [label="_argumentOrderDoesNotMatter 751180"];
1053 [label="_errorCodeType 751181"];
1054 [label="_defaultSeverityOpt 751182"];
1055 [label="_effectiveSeverityOpt 751183"];
1056 [label="_syntaxPredicate 751184"];
1057 [label="_code 751185"];
1058 [label="_isWarningAsError 751186"];
1059 [label="_isSuppressed 751187"];
1060 [label="_location 751188"];
1061 [label="includeDefaultSeverity 751189"];
1062 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 751190"];
1063 [label="_defaultSeverityOpt 751191"];
1064 [label="includeEffectiveSeverity 751192"];
1065 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 751193"];
1066 [label="_effectiveSeverityOpt 751194"];
1067 [label="DiagnosticWithInfo dinfo = null; 751195"];
1068 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 751196"];
1069 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 751197"];
1070 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 751198"];
1071 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 751199"];
1072 [label="dinfo = d as DiagnosticWithInfo; 751200"];
1073 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 751201"];
1074 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 751202"];
1075 [label="_errorCodeType 751203"];
1076 [label="_code 751204"];
1077 [label="_ignoreArgumentsWhenComparing 751205"];
1078 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 751206"];
1079 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 751207"];
1080 [label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 751208"];
1081 [label="_squiggledText 751209"];
1082 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 751210"];
1083 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 751211"];
1084 [label="_arguments 751212"];
1085 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 751213"];
1086 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 751214"];
1087 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 751215"];
1088 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 751216"];
1089 [label="_startPosition 751217"];
1090 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 751218"];
1091 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 751219"];
1092 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 751220"];
1093 [label="int index = unmatched.IndexOf(d); 751221"];
1094 [label="int index = unmatched.IndexOf(d); 751222"];
1095 [label="param Equals(object obj) 751223"];
1096 [label="param Equals(this) 751224"];
1097 [label="var d = obj as DiagnosticDescription; 751225"];
1098 [label="if (d == null)\n                return false; 751226"];
1099 [label="if (d == null)\n                return false; 751227"];
1100 [label="if (!_code.Equals(d._code))\n                return false; 751228"];
1101 [label="if (!_code.Equals(d._code))\n                return false; 751229"];
1102 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 751230"];
1103 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 751231"];
1104 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 751232"];
1105 [label="if (_squiggledText != d._squiggledText)\n                    return false; 751233"];
1106 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 751234"];
1107 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 751235"];
1108 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 751236"];
1109 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 751237"];
1110 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 751238"];
1111 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 751239"];
1112 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 751240"];
1113 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 751241"];
1114 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 751242"];
1115 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 751243"];
1116 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 751244"];
1117 [label="if (d._arguments == null)\n                    return false; 751245"];
1118 [label="GetArgumentsAsStrings() 751246"];
1119 [label="param GetArgumentsAsStrings(this) 751247"];
1120 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 751248"];
1121 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 751249"];
1122 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 751250"];
1123 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 751251"];
1124 [label="_argumentsAsStrings 751252"];
1125 [label="return _argumentsAsStrings; 751253"];
1126 [label="var args1 = GetArgumentsAsStrings(); 751254"];
1127 [label="d.GetArgumentsAsStrings() 751255"];
1128 [label="param GetArgumentsAsStrings(this) 751256"];
1129 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 751257"];
1130 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 751258"];
1131 [label="return _argumentsAsStrings; 751259"];
1132 [label="var args2 = d.GetArgumentsAsStrings(); 751260"];
1133 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 751261"];
1134 [label="if (!args1.SequenceEqual(args2))\n                        return false; 751262"];
1135 [label="if (!args1.SequenceEqual(args2))\n                        return false; 751263"];
1136 [label="if (!args1.SequenceEqual(args2))\n                        return false; 751264"];
1137 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 751265"];
1138 [label="return true; 751266"];
1139 [label="int index = unmatched.IndexOf(d); 751267"];
1140 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 751268"];
1141 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 751269"];
1142 [label="unmatched.RemoveAt(index); 751270"];
1143 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 751271"];
1144 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 751272"];
1145 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 751273"];
1146 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 751274"];
1147 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 751275"];
1148 [label="DiagnosticDescription.GetAssertText(expected, actual) 751276"];
1149 [label="param GetAssertText(DiagnosticDescription[] expected) 751277"];
1150 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 751278"];
1151 [label="const int CSharp = 1; 751279"];
1152 [label="const int VisualBasic = 2; 751280"];
1153 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 751281"];
1154 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 751282"];
1155 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 751283"];
1156 [label="actual.Any() && actual.First() is CSDiagnostic 751284"];
1157 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 751285"];
1158 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 751286"];
1159 [label="int indentDepth = (language == CSharp) ? 4 : 1; 751287"];
1160 [label="(language == CSharp) 751288"];
1161 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 751289"];
1162 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 751290"];
1163 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 751291"];
1164 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 751292"];
1165 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 751293"];
1166 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 751294"];
1167 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 751295"];
1168 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 751296"];
1169 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 751297"];
1170 [label="IsSortedOrEmpty(expected) 751298"];
1171 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 751299"];
1172 [label="new LinePositionComparer() 751300"];
1173 [label="param LinePositionComparer(this) 751301"];
1174 [label="Instance = new LinePositionComparer() 751302"];
1175 [label="var comparer = LinePositionComparer.Instance; 751303"];
1176 [label="DiagnosticDescription last = null; 751304"];
1177 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 751305"];
1178 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 751306"];
1179 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 751307"];
1180 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 751308"];
1181 [label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                } 751309"];
1182 [label="last = diagnostic; 751310"];
1183 [label="return true; 751311"];
1184 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 751312"];
1185 [label="actual = Sort(actual); 751313"];
1186 [label="Sort(actual) 751314"];
1187 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 751315"];
1188 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 751316"];
1189 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 751317"];
1190 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 751318"];
1191 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 751319"];
1192 [label="var assertText = new StringBuilder(); 751320"];
1193 [label="assertText.AppendLine(); 751321"];
1194 [label="int i; 751322"];
1195 [label="assertText.AppendLine('Expected:'); 751323"];
1196 [label="assertText.AppendLine('Expected:'); 751324"];
1197 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 751325"];
1198 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 751326"];
1199 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 751327"];
1200 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 751328"];
1201 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 751329"];
1202 [label="GetDiagnosticDescription(d, indentDepth) 751330"];
1203 [label="param GetDiagnosticDescription(DiagnosticDescription d) 751331"];
1204 [label="param GetDiagnosticDescription(int indentDepth) 751332"];
1205 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 751333"];
1206 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 751334"];
1207 [label="d.ToString() 751335"];
1208 [label="param ToString(this) 751336"];
1209 [label="var sb = new StringBuilder(); 751337"];
1210 [label="sb.Append('Diagnostic('); 751338"];
1211 [label="sb.Append('Diagnostic('); 751339"];
1212 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 751340"];
1213 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 751341"];
1214 [label="sb.Append(_errorCodeType.Name); 751342"];
1215 [label="sb.Append(_errorCodeType.Name); 751343"];
1216 [label="sb.Append('.'); 751344"];
1217 [label="sb.Append('.'); 751345"];
1218 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 751346"];
1219 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 751347"];
1220 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 751348"];
1221 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 751349"];
1222 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 751350"];
1223 [label="sb.Append(', \\''); 751351"];
1224 [label="sb.Append(', \\''); 751352"];
1225 [label="sb.Append(_squiggledText); 751353"];
1226 [label="sb.Append(_squiggledText); 751354"];
1227 [label="sb.Append('''); 751355"];
1228 [label="sb.Append('''); 751356"];
1229 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 751357"];
1230 [label="sb.Append(')'); 751358"];
1231 [label="sb.Append(')'); 751359"];
1232 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 751360"];
1233 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 751361"];
1234 [label="sb.Append('.WithArguments('); 751362"];
1235 [label="sb.Append('.WithArguments('); 751363"];
1236 [label="GetArgumentsAsStrings() 751364"];
1237 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 751365"];
1238 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 751366"];
1239 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 751367"];
1240 [label="sb.Append('\\''); 751368"];
1241 [label="sb.Append('\\''); 751369"];
1242 [label="sb.Append(argumentStrings.Current); 751370"];
1243 [label="sb.Append(argumentStrings.Current); 751371"];
1244 [label="sb.Append('\\''); 751372"];
1245 [label="sb.Append('\\''); 751373"];
1246 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 751374"];
1247 [label="sb.Append(', '); 751375"];
1248 [label="sb.Append(', '); 751376"];
1249 [label="sb.Append(')'); 751377"];
1250 [label="sb.Append(')'); 751378"];
1251 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 751379"];
1252 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 751380"];
1253 [label="sb.Append('.WithLocation('); 751381"];
1254 [label="sb.Append('.WithLocation('); 751382"];
1255 [label="sb.Append(_startPosition.Value.Line + 1); 751383"];
1256 [label="sb.Append(_startPosition.Value.Line + 1); 751384"];
1257 [label="sb.Append(', '); 751385"];
1258 [label="sb.Append(', '); 751386"];
1259 [label="sb.Append(_startPosition.Value.Character + 1); 751387"];
1260 [label="sb.Append(_startPosition.Value.Character + 1); 751388"];
1261 [label="sb.Append(')'); 751389"];
1262 [label="sb.Append(')'); 751390"];
1263 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 751391"];
1264 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 751392"];
1265 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 751393"];
1266 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 751394"];
1267 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 751395"];
1268 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 751396"];
1269 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 751397"];
1270 [label="return sb.ToString(); 751398"];
1271 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 751399"];
1272 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 751400"];
1273 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 751401"];
1274 [label="GetCommaSeparatedLines(assertText, expectedText); 751402"];
1275 [label="GetCommaSeparatedLines(assertText, expectedText); 751403"];
1276 [label="GetCommaSeparatedLines(assertText, expectedText) 751404"];
1277 [label="param GetCommaSeparatedLines(StringBuilder sb) 751405"];
1278 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 751406"];
1279 [label="int n = lines.Count; 751407"];
1280 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 751408"];
1281 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 751409"];
1282 [label="sb.Append(lines[i]); 751410"];
1283 [label="sb.Append(lines[i]); 751411"];
1284 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 751412"];
1285 [label="sb.AppendLine(); 751413"];
1286 [label="GetCommaSeparatedLines(assertText, expectedText); 751414"];
1287 [label="assertText.AppendLine('Actual:'); 751415"];
1288 [label="assertText.AppendLine('Actual:'); 751416"];
1289 [label="var actualText = ArrayBuilder<string>.GetInstance(); 751417"];
1290 [label="var e = actual.GetEnumerator(); 751418"];
1291 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 751419"];
1292 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 751420"];
1293 [label="param Compare(LinePosition? x) 751421"];
1294 [label="param Compare(LinePosition? y) 751422"];
1295 [label="param Compare(this) 751423"];
1296 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 751424"];
1297 [label="if (x == null)\n                {\n                    if (y == null)\n                    {\n                        return 0;\n                    }\n                    return -1;\n                } 751425"];
1298 [label="if (y == null)\n                {\n                    return 1;\n                } 751426"];
1299 [label="if (y == null)\n                {\n                    return 1;\n                } 751427"];
1300 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 751428"];
1301 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 751429"];
1302 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 751430"];
1303 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 751431"];
1304 [label="return x.Value.Character.CompareTo(y.Value.Character); 751432"];
1305 [label="return x.Value.Character.CompareTo(y.Value.Character); 751433"];
1306 [label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 751434"];
1307 [label="if (lineDiff != 0)\n                {\n                    return lineDiff;\n                } 751435"];
1308 [label="Diagnostic d = e.Current; 751436"];
1309 [label="string message = d.ToString(); 751437"];
1310 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 751438"];
1311 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 751439"];
1312 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 751440"];
1313 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 751441"];
1314 [label="Indent(assertText, indentDepth); 751442"];
1315 [label="Indent(assertText, indentDepth); 751443"];
1316 [label="Indent(assertText, indentDepth) 751444"];
1317 [label="param Indent(StringBuilder sb) 751445"];
1318 [label="param Indent(int count) 751446"];
1319 [label="sb.Append(' ', 4 * count); 751447"];
1320 [label="sb.Append(' ', 4 * count); 751448"];
1321 [label="sb.Append(' ', 4 * count); 751449"];
1322 [label="Indent(assertText, indentDepth); 751450"];
1323 [label="assertText.Append('// '); 751451"];
1324 [label="assertText.Append('// '); 751452"];
1325 [label="assertText.AppendLine(d.ToString()); 751453"];
1326 [label="assertText.AppendLine(d.ToString()); 751454"];
1327 [label="var l = d.Location; 751455"];
1328 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 751456"];
1329 [label="Indent(assertText, indentDepth); 751457"];
1330 [label="Indent(assertText, indentDepth); 751458"];
1331 [label="Indent(assertText, indentDepth) 751459"];
1332 [label="param Indent(StringBuilder sb) 751460"];
1333 [label="param Indent(int count) 751461"];
1334 [label="sb.Append(' ', 4 * count); 751462"];
1335 [label="sb.Append(' ', 4 * count); 751463"];
1336 [label="sb.Append(' ', 4 * count); 751464"];
1337 [label="Indent(assertText, indentDepth); 751465"];
1338 [label="assertText.Append('// '); 751466"];
1339 [label="assertText.Append('// '); 751467"];
1340 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 751468"];
1341 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 751469"];
1342 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 751470"];
1343 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 751471"];
1344 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 751472"];
1345 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 751473"];
1346 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 751474"];
1347 [label="param DiagnosticDescription(Diagnostic d) 751475"];
1348 [label="param DiagnosticDescription(bool errorCodeOnly) 751476"];
1349 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 751477"];
1350 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 751478"];
1351 [label="param DiagnosticDescription(this) 751479"];
1352 [label="_code 751480"];
1353 [label="_isWarningAsError 751481"];
1354 [label="_isSuppressed 751482"];
1355 [label="_squiggledText 751483"];
1356 [label="_arguments 751484"];
1357 [label="_startPosition 751485"];
1358 [label="_errorCodeType 751486"];
1359 [label="_defaultSeverityOpt 751487"];
1360 [label="_effectiveSeverityOpt 751488"];
1361 [label="_code 751489"];
1362 [label="_isWarningAsError 751490"];
1363 [label="_isSuppressed 751491"];
1364 [label="_location 751492"];
1365 [label="DiagnosticWithInfo dinfo = null; 751493"];
1366 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 751494"];
1367 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 751495"];
1368 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 751496"];
1369 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 751497"];
1370 [label="var diffDescription = description; 751498"];
1371 [label="var idx = Array.IndexOf(expected, description); 751499"];
1372 [label="var idx = Array.IndexOf(expected, description); 751500"];
1373 [label="var idx = Array.IndexOf(expected, description); 751501"];
1374 [label="var idx = Array.IndexOf(expected, description); 751502"];
1375 [label="if (d == null)\n                return false; 751503"];
1376 [label="if (d == null)\n                return false; 751504"];
1377 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 751505"];
1378 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 751506"];
1379 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 751507"];
1380 [label="if (_squiggledText != d._squiggledText)\n                    return false; 751508"];
1381 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 751509"];
1382 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 751510"];
1383 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 751511"];
1384 [label="if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    } 751512"];
1385 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 751513"];
1386 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 751514"];
1387 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 751515"];
1388 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 751516"];
1389 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 751517"];
1390 [label="if (d._arguments == null)\n                    return false; 751518"];
1391 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 751519"];
1392 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 751520"];
1393 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 751521"];
1394 [label="diffDescription = expected[idx]; 751522"];
1395 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 751523"];
1396 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 751524"];
1397 [label="GetDiagnosticDescription(description, indentDepth) 751525"];
1398 [label="param GetDiagnosticDescription(DiagnosticDescription d) 751526"];
1399 [label="param GetDiagnosticDescription(int indentDepth) 751527"];
1400 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 751528"];
1401 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 751529"];
1402 [label="var sb = new StringBuilder(); 751530"];
1403 [label="sb.Append('Diagnostic('); 751531"];
1404 [label="sb.Append('Diagnostic('); 751532"];
1405 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 751533"];
1406 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 751534"];
1407 [label="sb.Append(_errorCodeType.Name); 751535"];
1408 [label="sb.Append(_errorCodeType.Name); 751536"];
1409 [label="sb.Append('.'); 751537"];
1410 [label="sb.Append('.'); 751538"];
1411 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 751539"];
1412 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 751540"];
1413 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 751541"];
1414 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 751542"];
1415 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 751543"];
1416 [label="sb.Append(', \\''); 751544"];
1417 [label="sb.Append(', \\''); 751545"];
1418 [label="sb.Append(_squiggledText); 751546"];
1419 [label="sb.Append(_squiggledText); 751547"];
1420 [label="sb.Append('''); 751548"];
1421 [label="sb.Append('''); 751549"];
1422 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 751550"];
1423 [label="sb.Append(')'); 751551"];
1424 [label="sb.Append(')'); 751552"];
1425 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 751553"];
1426 [label="sb.Append('.WithArguments('); 751554"];
1427 [label="sb.Append('.WithArguments('); 751555"];
1428 [label="sb.Append('\\''); 751556"];
1429 [label="sb.Append('\\''); 751557"];
1430 [label="sb.Append(argumentStrings.Current); 751558"];
1431 [label="sb.Append(argumentStrings.Current); 751559"];
1432 [label="sb.Append('\\''); 751560"];
1433 [label="sb.Append('\\''); 751561"];
1434 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 751562"];
1435 [label="sb.Append(', '); 751563"];
1436 [label="sb.Append(', '); 751564"];
1437 [label="sb.Append(')'); 751565"];
1438 [label="sb.Append(')'); 751566"];
1439 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 751567"];
1440 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 751568"];
1441 [label="sb.Append('.WithLocation('); 751569"];
1442 [label="sb.Append('.WithLocation('); 751570"];
1443 [label="sb.Append(_startPosition.Value.Line + 1); 751571"];
1444 [label="sb.Append(_startPosition.Value.Line + 1); 751572"];
1445 [label="sb.Append(', '); 751573"];
1446 [label="sb.Append(', '); 751574"];
1447 [label="sb.Append(_startPosition.Value.Character + 1); 751575"];
1448 [label="sb.Append(_startPosition.Value.Character + 1); 751576"];
1449 [label="sb.Append(')'); 751577"];
1450 [label="sb.Append(')'); 751578"];
1451 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 751579"];
1452 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 751580"];
1453 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 751581"];
1454 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 751582"];
1455 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 751583"];
1456 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 751584"];
1457 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 751585"];
1458 [label="return sb.ToString(); 751586"];
1459 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 751587"];
1460 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 751588"];
1461 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 751589"];
1462 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 751590"];
1463 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 751591"];
1464 [label="GetDiagnosticDescription(diffDescription, indentDepth) 751592"];
1465 [label="param GetDiagnosticDescription(DiagnosticDescription d) 751593"];
1466 [label="param GetDiagnosticDescription(int indentDepth) 751594"];
1467 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 751595"];
1468 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 751596"];
1469 [label="var sb = new StringBuilder(); 751597"];
1470 [label="sb.Append('Diagnostic('); 751598"];
1471 [label="sb.Append('Diagnostic('); 751599"];
1472 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 751600"];
1473 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 751601"];
1474 [label="sb.Append(_errorCodeType.Name); 751602"];
1475 [label="sb.Append(_errorCodeType.Name); 751603"];
1476 [label="sb.Append('.'); 751604"];
1477 [label="sb.Append('.'); 751605"];
1478 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 751606"];
1479 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 751607"];
1480 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 751608"];
1481 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 751609"];
1482 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 751610"];
1483 [label="sb.Append(', \\''); 751611"];
1484 [label="sb.Append(', \\''); 751612"];
1485 [label="sb.Append(_squiggledText); 751613"];
1486 [label="sb.Append(_squiggledText); 751614"];
1487 [label="sb.Append('''); 751615"];
1488 [label="sb.Append('''); 751616"];
1489 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 751617"];
1490 [label="sb.Append(')'); 751618"];
1491 [label="sb.Append(')'); 751619"];
1492 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 751620"];
1493 [label="sb.Append('.WithArguments('); 751621"];
1494 [label="sb.Append('.WithArguments('); 751622"];
1495 [label="sb.Append('\\''); 751623"];
1496 [label="sb.Append('\\''); 751624"];
1497 [label="sb.Append(argumentStrings.Current); 751625"];
1498 [label="sb.Append(argumentStrings.Current); 751626"];
1499 [label="sb.Append('\\''); 751627"];
1500 [label="sb.Append('\\''); 751628"];
1501 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 751629"];
1502 [label="sb.Append(', '); 751630"];
1503 [label="sb.Append(', '); 751631"];
1504 [label="sb.Append(')'); 751632"];
1505 [label="sb.Append(')'); 751633"];
1506 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 751634"];
1507 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 751635"];
1508 [label="sb.Append('.WithLocation('); 751636"];
1509 [label="sb.Append('.WithLocation('); 751637"];
1510 [label="sb.Append(_startPosition.Value.Line + 1); 751638"];
1511 [label="sb.Append(_startPosition.Value.Line + 1); 751639"];
1512 [label="sb.Append(', '); 751640"];
1513 [label="sb.Append(', '); 751641"];
1514 [label="sb.Append(_startPosition.Value.Character + 1); 751642"];
1515 [label="sb.Append(_startPosition.Value.Character + 1); 751643"];
1516 [label="sb.Append(')'); 751644"];
1517 [label="sb.Append(')'); 751645"];
1518 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 751646"];
1519 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 751647"];
1520 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 751648"];
1521 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 751649"];
1522 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 751650"];
1523 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 751651"];
1524 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 751652"];
1525 [label="return sb.ToString(); 751653"];
1526 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 751654"];
1527 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 751655"];
1528 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 751656"];
1529 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 751657"];
1530 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 751658"];
1531 [label="assertText.AppendLine(); 751659"];
1532 [label="assertText.AppendLine('Diff:'); 751660"];
1533 [label="assertText.AppendLine('Diff:'); 751661"];
1534 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 751662"];
1535 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 751663"];
1536 [label="new[] { '\\r', '\\n' } 751664"];
1537 [label="'\\r' 751665"];
1538 [label="'\\n' 751666"];
1539 [label="new[] { '\\r', '\\n' } 751667"];
1540 [label="new[] { '\\r', '\\n' } 751668"];
1541 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 751669"];
1542 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 751670"];
1543 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 751671"];
1544 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 751672"];
1545 [label="param DiffReport(IEnumerable<T> expected) 751673"];
1546 [label="param DiffReport(IEnumerable<T> actual) 751674"];
1547 [label="param DiffReport(string separator) 751675"];
1548 [label="param DiffReport(IEqualityComparer<T> comparer = null) 751676"];
1549 [label="param DiffReport(Func<T, string> toString = null) 751677"];
1550 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 751678"];
1551 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 751679"];
1552 [label="(comparer != null) 751680"];
1553 [label="EqualityComparer<T>.Default 751681"];
1554 [label="new LCS<T>(EqualityComparer<T>.Default) 751682"];
1555 [label="param LCS(IEqualityComparer<T> comparer) 751683"];
1556 [label="param LCS(this) 751684"];
1557 [label="1 751685"];
1558 [label="DeleteCost = 1 751686"];
1559 [label="1 751687"];
1560 [label="InsertCost = 1 751688"];
1561 [label="2 751689"];
1562 [label="UpdateCost = 2 751690"];
1563 [label="param LongestCommonSubsequence(this) 751691"];
1564 [label="_comparer 751692"];
1565 [label="_comparer 751693"];
1566 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 751694"];
1567 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 751695"];
1568 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 751696"];
1569 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 751697"];
1570 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 751698"];
1571 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 751699"];
1572 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 751700"];
1573 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 751701"];
1574 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 751702"];
1575 [label="lcs.CalculateDiff(expectedList, actualList, toString) 751703"];
1576 [label="param CalculateDiff(IList<T> sequenceA) 751704"];
1577 [label="param CalculateDiff(IList<T> sequenceB) 751705"];
1578 [label="param CalculateDiff(Func<T, string> toString) 751706"];
1579 [label="param CalculateDiff(this) 751707"];
1580 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 751708"];
1581 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 751709"];
1582 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 751710"];
1583 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 751711"];
1584 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 751712"];
1585 [label="param GetEdits(TSequence sequenceA) 751713"];
1586 [label="param GetEdits(int lengthA) 751714"];
1587 [label="param GetEdits(TSequence sequenceB) 751715"];
1588 [label="param GetEdits(int lengthB) 751716"];
1589 [label="param GetEdits(this) 751717"];
1590 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 751718"];
1591 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 751719"];
1592 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 751720"];
1593 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 751721"];
1594 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 751722"];
1595 [label="param ComputeCostMatrix(TSequence sequenceA) 751723"];
1596 [label="param ComputeCostMatrix(int lengthA) 751724"];
1597 [label="param ComputeCostMatrix(TSequence sequenceB) 751725"];
1598 [label="param ComputeCostMatrix(int lengthB) 751726"];
1599 [label="param ComputeCostMatrix(this) 751727"];
1600 [label="var la = lengthA + 1; 751728"];
1601 [label="var la = lengthA + 1; 751729"];
1602 [label="var lb = lengthB + 1; 751730"];
1603 [label="var lb = lengthB + 1; 751731"];
1604 [label="var d = new int[la, lb]; 751732"];
1605 [label="d[0, 0] = 0; 751733"];
1606 [label="d[0, 0] 751734"];
1607 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 751735"];
1608 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 751736"];
1609 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 751737"];
1610 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 751738"];
1611 [label="d[i, 0] 751739"];
1612 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 751740"];
1613 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 751741"];
1614 [label="d[0, j] = d[0, j - 1] + InsertCost; 751742"];
1615 [label="d[0, j] = d[0, j - 1] + InsertCost; 751743"];
1616 [label="d[0, j] 751744"];
1617 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 751745"];
1618 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 751746"];
1619 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 751747"];
1620 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 751748"];
1621 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 751749"];
1622 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 751750"];
1623 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 751751"];
1624 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 751752"];
1625 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 751753"];
1626 [label="param ItemsEqual(IList<T> sequenceA) 751754"];
1627 [label="param ItemsEqual(int indexA) 751755"];
1628 [label="param ItemsEqual(IList<T> sequenceB) 751756"];
1629 [label="param ItemsEqual(int indexB) 751757"];
1630 [label="param ItemsEqual(this) 751758"];
1631 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 751759"];
1632 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 751760"];
1633 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 751761"];
1634 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 751762"];
1635 [label="int m2 = d[i - 1, j] + DeleteCost; 751763"];
1636 [label="int m2 = d[i - 1, j] + DeleteCost; 751764"];
1637 [label="int m3 = d[i, j - 1] + InsertCost; 751765"];
1638 [label="int m3 = d[i, j - 1] + InsertCost; 751766"];
1639 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 751767"];
1640 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 751768"];
1641 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 751769"];
1642 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 751770"];
1643 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 751771"];
1644 [label="d[i, j] 751772"];
1645 [label="return d; 751773"];
1646 [label="int i = lengthA; 751774"];
1647 [label="int j = lengthB; 751775"];
1648 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 751776"];
1649 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 751777"];
1650 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 751778"];
1651 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 751779"];
1652 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 751780"];
1653 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 751781"];
1654 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 751782"];
1655 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 751783"];
1656 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 751784"];
1657 [label="i--; 751785"];
1658 [label="j--; 751786"];
1659 [label="yield return new Edit(EditKind.Update, i, j); 751787"];
1660 [label="yield return new Edit(EditKind.Update, i, j); 751788"];
1661 [label="yield return new Edit(EditKind.Update, i, j); 751789"];
1662 [label="yield return new Edit(EditKind.Update, i, j); 751790"];
1663 [label="new Edit(EditKind.Update, i, j) 751791"];
1664 [label="param Edit(EditKind kind) 751792"];
1665 [label="param Edit(int indexA) 751793"];
1666 [label="param Edit(int indexB) 751794"];
1667 [label="param Edit(this) 751795"];
1668 [label="this.Kind 751796"];
1669 [label="this.IndexA 751797"];
1670 [label="this.IndexB 751798"];
1671 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 751799"];
1672 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 751800"];
1673 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 751801"];
1674 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 751802"];
1675 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 751803"];
1676 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 751804"];
1677 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 751805"];
1678 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 751806"];
1679 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 751807"];
1680 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 751808"];
1681 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 751809"];
1682 [label="actualText.Free(); 751810"];
1683 [label="expectedText.Free(); 751811"];
1684 [label="return assertText.ToString(); 751812"];
1685 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 751813"];
1686 [label="diagnostics.Verify(expected); 751814"];
1687 [label="VerifyAssemblyIds(c, diagnostics); 751815"];
1688 [label="VerifyAssemblyIds(c, diagnostics); 751816"];
1689 [label="VerifyAssemblyIds(c, diagnostics) 751817"];
1690 [label="param VerifyAssemblyIds(TCompilation c) 751818"];
1691 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 751819"];
1692 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 751820"];
1693 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 751821"];
1694 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 751822"];
1695 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 751823"];
1696 [label="CustomAssert.True(assemblyIds.IsEmpty); 751824"];
1697 [label="VerifyAssemblyIds(c, diagnostics); 751825"];
1698 [label="return c; 751826"];
2 -> 0;
2 -> 1;
4 -> 3;
6 -> 5;
7 -> 1;
9 -> 8;
11 -> 10;
13 -> 12;
15 -> 14;
17 -> 16;
19 -> 18;
21 -> 20;
23 -> 22;
25 -> 24;
27 -> 26;
29 -> 28;
31 -> 30;
33 -> 32;
35 -> 34;
37 -> 36;
39 -> 38;
41 -> 40;
43 -> 42;
45 -> 44;
46 -> 0;
47 -> 0;
48 -> 46;
48 -> 47;
48 -> 0;
49 -> 48;
50 -> 0;
51 -> 0;
52 -> 50;
52 -> 51;
52 -> 48;
53 -> 52;
54 -> 0;
55 -> 54;
56 -> 55;
56 -> 54;
57 -> 56;
59 -> 0;
60 -> 58;
60 -> 59;
61 -> 60;
62 -> 0;
63 -> 0;
64 -> 62;
64 -> 63;
64 -> 0;
65 -> 64;
66 -> 0;
67 -> 0;
68 -> 66;
68 -> 67;
68 -> 52;
69 -> 68;
70 -> 0;
71 -> 0;
72 -> 70;
72 -> 71;
72 -> 68;
73 -> 72;
74 -> 0;
75 -> 0;
76 -> 74;
76 -> 75;
76 -> 72;
77 -> 76;
78 -> 0;
79 -> 0;
80 -> 78;
80 -> 79;
80 -> 0;
81 -> 80;
82 -> 0;
83 -> 0;
84 -> 82;
84 -> 83;
84 -> 0;
85 -> 84;
86 -> 0;
87 -> 0;
88 -> 86;
88 -> 87;
88 -> 0;
89 -> 88;
90 -> 0;
91 -> 0;
92 -> 90;
92 -> 91;
92 -> 76;
93 -> 92;
94 -> 0;
95 -> 0;
96 -> 94;
96 -> 95;
96 -> 0;
97 -> 96;
99 -> 0;
100 -> 98;
100 -> 99;
101 -> 100;
102 -> 0;
103 -> 0;
104 -> 102;
104 -> 103;
104 -> 92;
105 -> 104;
106 -> 0;
107 -> 0;
108 -> 106;
108 -> 107;
108 -> 0;
109 -> 108;
110 -> 0;
111 -> 0;
112 -> 110;
112 -> 111;
112 -> 0;
113 -> 112;
114 -> 0;
115 -> 0;
116 -> 114;
116 -> 115;
116 -> 0;
117 -> 116;
118 -> 0;
119 -> 0;
120 -> 118;
120 -> 119;
120 -> 0;
121 -> 120;
122 -> 0;
123 -> 0;
124 -> 122;
124 -> 123;
124 -> 0;
125 -> 124;
126 -> 0;
127 -> 0;
128 -> 126;
128 -> 127;
128 -> 104;
129 -> 128;
130 -> 0;
131 -> 0;
132 -> 130;
132 -> 131;
132 -> 128;
133 -> 132;
134 -> 0;
135 -> 0;
136 -> 134;
136 -> 135;
136 -> 132;
137 -> 136;
138 -> 0;
139 -> 0;
140 -> 138;
140 -> 139;
140 -> 136;
141 -> 140;
142 -> 0;
143 -> 0;
144 -> 142;
144 -> 143;
144 -> 0;
145 -> 144;
146 -> 0;
147 -> 0;
148 -> 146;
148 -> 147;
148 -> 0;
149 -> 148;
150 -> 0;
151 -> 0;
152 -> 150;
152 -> 151;
152 -> 140;
153 -> 152;
154 -> 0;
155 -> 0;
156 -> 154;
156 -> 155;
156 -> 0;
157 -> 156;
158 -> 0;
159 -> 0;
160 -> 158;
160 -> 159;
160 -> 0;
161 -> 160;
162 -> 0;
163 -> 0;
164 -> 162;
164 -> 163;
164 -> 0;
165 -> 164;
166 -> 0;
167 -> 0;
168 -> 166;
168 -> 167;
168 -> 152;
169 -> 168;
170 -> 0;
171 -> 0;
172 -> 170;
172 -> 171;
172 -> 0;
173 -> 172;
174 -> 0;
175 -> 0;
176 -> 174;
176 -> 175;
176 -> 0;
177 -> 176;
179 -> 178;
181 -> 179;
181 -> 180;
182 -> 181;
184 -> 0;
184 -> 183;
185 -> 184;
185 -> 0;
186 -> 185;
188 -> 187;
190 -> 189;
192 -> 191;
194 -> 193;
195 -> 7;
196 -> 195;
197 -> 196;
198 -> 197;
198 -> 196;
199 -> 1;
199 -> 2;
199 -> 198;
200 -> 1;
201 -> 1;
202 -> 0;
203 -> 0;
205 -> 202;
205 -> 203;
205 -> 204;
206 -> 205;
207 -> 0;
208 -> 206;
208 -> 205;
208 -> 207;
209 -> 208;
210 -> 0;
211 -> 206;
211 -> 205;
211 -> 210;
212 -> 211;
213 -> 0;
214 -> 206;
214 -> 205;
214 -> 213;
215 -> 214;
216 -> 0;
217 -> 206;
217 -> 205;
217 -> 216;
218 -> 217;
219 -> 0;
220 -> 206;
220 -> 205;
220 -> 219;
221 -> 220;
222 -> 0;
223 -> 206;
223 -> 205;
223 -> 222;
224 -> 223;
225 -> 0;
226 -> 206;
226 -> 205;
226 -> 225;
227 -> 226;
228 -> 0;
229 -> 206;
229 -> 205;
229 -> 228;
230 -> 229;
231 -> 0;
232 -> 206;
232 -> 205;
232 -> 231;
233 -> 232;
234 -> 0;
235 -> 206;
235 -> 205;
235 -> 234;
236 -> 235;
237 -> 0;
238 -> 206;
238 -> 205;
238 -> 237;
239 -> 238;
240 -> 206;
243 -> 240;
243 -> 242;
244 -> 241;
244 -> 242;
245 -> 242;
246 -> 243;
246 -> 205;
246 -> 242;
247 -> 242;
248 -> 244;
248 -> 242;
249 -> 245;
249 -> 242;
250 -> 248;
250 -> 249;
250 -> 242;
251 -> 250;
251 -> 247;
251 -> 242;
252 -> 246;
252 -> 247;
252 -> 205;
252 -> 251;
252 -> 250;
252 -> 242;
253 -> 252;
254 -> 0;
255 -> 254;
257 -> 255;
257 -> 256;
258 -> 206;
258 -> 205;
258 -> 257;
259 -> 258;
260 -> 0;
261 -> 260;
262 -> 206;
262 -> 205;
262 -> 261;
263 -> 262;
264 -> 0;
265 -> 206;
265 -> 205;
265 -> 264;
266 -> 265;
267 -> 230;
269 -> 268;
270 -> 0;
271 -> 0;
272 -> 0;
274 -> 270;
274 -> 271;
274 -> 272;
274 -> 273;
275 -> 269;
276 -> 274;
276 -> 275;
276 -> 268;
277 -> 276;
281 -> 278;
281 -> 279;
281 -> 280;
282 -> 212;
282 -> 205;
282 -> 211;
282 -> 278;
282 -> 281;
283 -> 282;
284 -> 224;
285 -> 233;
286 -> 233;
287 -> 230;
288 -> 0;
289 -> 0;
291 -> 288;
291 -> 290;
292 -> 289;
292 -> 290;
293 -> 290;
294 -> 291;
294 -> 290;
295 -> 292;
295 -> 290;
296 -> 0;
296 -> 290;
297 -> 293;
297 -> 290;
298 -> 290;
299 -> 294;
299 -> 295;
299 -> 296;
299 -> 297;
299 -> 298;
299 -> 290;
300 -> 299;
301 -> 0;
302 -> 0;
304 -> 301;
304 -> 303;
305 -> 302;
305 -> 303;
306 -> 303;
307 -> 304;
307 -> 303;
308 -> 305;
308 -> 303;
309 -> 0;
309 -> 303;
310 -> 306;
310 -> 303;
311 -> 303;
312 -> 307;
312 -> 308;
312 -> 309;
312 -> 310;
312 -> 311;
312 -> 303;
313 -> 312;
315 -> 300;
315 -> 299;
315 -> 314;
316 -> 315;
318 -> 313;
318 -> 312;
318 -> 317;
319 -> 318;
320 -> 0;
321 -> 0;
323 -> 320;
323 -> 322;
324 -> 321;
324 -> 322;
325 -> 322;
326 -> 323;
326 -> 322;
327 -> 324;
327 -> 322;
328 -> 0;
328 -> 322;
329 -> 325;
329 -> 322;
330 -> 322;
331 -> 326;
331 -> 327;
331 -> 328;
331 -> 329;
331 -> 330;
331 -> 322;
332 -> 331;
333 -> 0;
334 -> 0;
336 -> 333;
336 -> 335;
337 -> 334;
337 -> 335;
338 -> 335;
339 -> 336;
339 -> 335;
340 -> 337;
340 -> 335;
341 -> 0;
341 -> 335;
342 -> 338;
342 -> 335;
343 -> 335;
344 -> 339;
344 -> 340;
344 -> 341;
344 -> 342;
344 -> 343;
344 -> 335;
345 -> 344;
346 -> 0;
347 -> 0;
349 -> 346;
349 -> 348;
350 -> 347;
350 -> 348;
351 -> 348;
352 -> 349;
352 -> 348;
353 -> 350;
353 -> 348;
354 -> 0;
354 -> 348;
355 -> 351;
355 -> 348;
356 -> 348;
357 -> 352;
357 -> 353;
357 -> 354;
357 -> 355;
357 -> 356;
357 -> 348;
358 -> 357;
359 -> 0;
360 -> 0;
362 -> 359;
362 -> 361;
363 -> 360;
363 -> 361;
364 -> 361;
365 -> 362;
365 -> 361;
366 -> 363;
366 -> 361;
367 -> 0;
367 -> 361;
368 -> 364;
368 -> 361;
369 -> 361;
370 -> 365;
370 -> 366;
370 -> 367;
370 -> 368;
370 -> 369;
370 -> 361;
371 -> 370;
372 -> 0;
373 -> 0;
375 -> 372;
375 -> 374;
376 -> 373;
376 -> 374;
377 -> 374;
378 -> 375;
378 -> 374;
379 -> 376;
379 -> 374;
380 -> 0;
380 -> 374;
381 -> 377;
381 -> 374;
382 -> 374;
383 -> 378;
383 -> 379;
383 -> 380;
383 -> 381;
383 -> 382;
383 -> 374;
384 -> 383;
385 -> 0;
386 -> 0;
388 -> 385;
388 -> 387;
389 -> 386;
389 -> 387;
390 -> 387;
391 -> 388;
391 -> 387;
392 -> 389;
392 -> 387;
393 -> 0;
393 -> 387;
394 -> 390;
394 -> 387;
395 -> 387;
396 -> 391;
396 -> 392;
396 -> 393;
396 -> 394;
396 -> 395;
396 -> 387;
397 -> 396;
399 -> 300;
399 -> 299;
399 -> 398;
400 -> 399;
402 -> 313;
402 -> 312;
402 -> 401;
403 -> 402;
405 -> 332;
405 -> 331;
405 -> 404;
406 -> 405;
408 -> 345;
408 -> 344;
408 -> 407;
409 -> 408;
410 -> 0;
411 -> 300;
411 -> 299;
411 -> 410;
411 -> 0;
412 -> 411;
413 -> 0;
414 -> 313;
414 -> 312;
414 -> 413;
414 -> 0;
415 -> 414;
416 -> 0;
417 -> 384;
417 -> 383;
417 -> 416;
417 -> 0;
418 -> 417;
419 -> 0;
420 -> 332;
420 -> 331;
420 -> 419;
420 -> 0;
421 -> 420;
422 -> 0;
423 -> 0;
423 -> 422;
424 -> 423;
425 -> 201;
425 -> 1;
426 -> 1;
427 -> 425;
427 -> 426;
428 -> 427;
428 -> 426;
429 -> 426;
430 -> 428;
430 -> 429;
431 -> 429;
432 -> 430;
432 -> 431;
432 -> 429;
433 -> 429;
433 -> 1;
434 -> 215;
434 -> 1;
435 -> 1;
436 -> 1;
437 -> 433;
437 -> 436;
438 -> 435;
438 -> 436;
439 -> 435;
439 -> 436;
440 -> 434;
440 -> 436;
441 -> 435;
441 -> 436;
442 -> 435;
442 -> 436;
443 -> 435;
443 -> 436;
444 -> 435;
444 -> 436;
445 -> 437;
445 -> 436;
446 -> 441;
446 -> 436;
447 -> 438;
447 -> 436;
448 -> 436;
449 -> 446;
449 -> 448;
450 -> 447;
450 -> 448;
451 -> 449;
451 -> 448;
452 -> 448;
453 -> 451;
453 -> 452;
454 -> 453;
454 -> 452;
455 -> 454;
456 -> 0;
456 -> 455;
457 -> 456;
458 -> 457;
459 -> 457;
460 -> 0;
460 -> 459;
461 -> 460;
461 -> 458;
461 -> 457;
462 -> 461;
462 -> 455;
463 -> 448;
464 -> 450;
464 -> 463;
464 -> 448;
465 -> 462;
465 -> 464;
466 -> 439;
466 -> 436;
467 -> 440;
467 -> 436;
468 -> 442;
468 -> 436;
469 -> 443;
469 -> 436;
470 -> 444;
470 -> 436;
471 -> 436;
472 -> 445;
472 -> 471;
473 -> 465;
473 -> 471;
474 -> 466;
474 -> 471;
475 -> 467;
475 -> 471;
476 -> 468;
476 -> 471;
477 -> 469;
477 -> 471;
478 -> 470;
478 -> 471;
479 -> 472;
479 -> 471;
480 -> 473;
480 -> 471;
481 -> 474;
481 -> 471;
482 -> 475;
482 -> 471;
483 -> 476;
483 -> 471;
484 -> 477;
484 -> 471;
485 -> 478;
485 -> 471;
486 -> 471;
487 -> 486;
487 -> 471;
488 -> 471;
489 -> 479;
489 -> 488;
490 -> 480;
490 -> 488;
491 -> 481;
491 -> 488;
492 -> 482;
492 -> 488;
493 -> 483;
493 -> 488;
494 -> 484;
494 -> 488;
495 -> 485;
495 -> 488;
496 -> 487;
496 -> 488;
497 -> 492;
497 -> 488;
498 -> 494;
498 -> 488;
499 -> 488;
500 -> 497;
500 -> 499;
501 -> 498;
501 -> 499;
502 -> 489;
502 -> 499;
503 -> 502;
503 -> 432;
503 -> 499;
504 -> 503;
505 -> 501;
505 -> 503;
506 -> 500;
506 -> 503;
507 -> 503;
508 -> 504;
508 -> 507;
509 -> 505;
509 -> 507;
510 -> 506;
510 -> 507;
511 -> 504;
511 -> 507;
512 -> 507;
513 -> 510;
513 -> 512;
513 -> 507;
514 -> 508;
514 -> 507;
515 -> 0;
515 -> 507;
516 -> 515;
516 -> 511;
516 -> 507;
517 -> 507;
518 -> 514;
518 -> 516;
518 -> 517;
518 -> 0;
518 -> 507;
519 -> 518;
519 -> 507;
520 -> 510;
520 -> 507;
521 -> 509;
521 -> 507;
522 -> 507;
523 -> 519;
523 -> 520;
523 -> 521;
523 -> 522;
523 -> 518;
523 -> 205;
523 -> 214;
523 -> 507;
524 -> 507;
525 -> 523;
525 -> 524;
526 -> 524;
527 -> 524;
528 -> 525;
528 -> 523;
528 -> 527;
528 -> 524;
529 -> 526;
529 -> 524;
530 -> 524;
531 -> 528;
531 -> 523;
531 -> 527;
531 -> 529;
531 -> 530;
531 -> 526;
531 -> 524;
532 -> 524;
533 -> 532;
533 -> 526;
533 -> 524;
534 -> 526;
534 -> 524;
535 -> 524;
536 -> 534;
536 -> 535;
536 -> 526;
536 -> 533;
536 -> 524;
537 -> 525;
537 -> 524;
538 -> 537;
538 -> 504;
538 -> 503;
539 -> 504;
539 -> 488;
540 -> 488;
541 -> 491;
541 -> 540;
541 -> 488;
542 -> 539;
542 -> 541;
543 -> 541;
544 -> 542;
544 -> 543;
544 -> 504;
544 -> 538;
544 -> 523;
544 -> 541;
545 -> 544;
545 -> 541;
546 -> 300;
546 -> 545;
547 -> 0;
547 -> 488;
548 -> 496;
548 -> 488;
549 -> 493;
549 -> 539;
549 -> 490;
549 -> 546;
549 -> 488;
550 -> 549;
550 -> 488;
551 -> 488;
552 -> 550;
552 -> 551;
553 -> 0;
553 -> 551;
554 -> 553;
555 -> 488;
556 -> 549;
556 -> 504;
556 -> 538;
556 -> 523;
556 -> 461;
556 -> 0;
556 -> 299;
556 -> 458;
556 -> 488;
557 -> 488;
558 -> 557;
559 -> 556;
559 -> 558;
559 -> 488;
560 -> 559;
560 -> 488;
561 -> 488;
562 -> 560;
562 -> 561;
563 -> 562;
563 -> 559;
563 -> 561;
564 -> 563;
564 -> 559;
564 -> 561;
565 -> 561;
566 -> 563;
566 -> 565;
566 -> 559;
566 -> 561;
567 -> 0;
567 -> 561;
568 -> 566;
568 -> 567;
568 -> 561;
569 -> 495;
569 -> 568;
569 -> 488;
570 -> 549;
570 -> 568;
570 -> 569;
571 -> 569;
572 -> 0;
572 -> 569;
573 -> 569;
574 -> 571;
574 -> 573;
575 -> 572;
575 -> 573;
576 -> 573;
577 -> 576;
577 -> 573;
578 -> 574;
578 -> 573;
579 -> 573;
580 -> 577;
580 -> 579;
581 -> 578;
581 -> 579;
582 -> 580;
582 -> 579;
583 -> 579;
584 -> 579;
585 -> 582;
585 -> 584;
586 -> 583;
586 -> 584;
587 -> 584;
588 -> 587;
588 -> 584;
589 -> 585;
589 -> 587;
589 -> 584;
590 -> 581;
590 -> 579;
591 -> 590;
591 -> 583;
591 -> 571;
591 -> 587;
591 -> 588;
591 -> 589;
591 -> 576;
591 -> 579;
592 -> 579;
593 -> 591;
593 -> 592;
594 -> 591;
594 -> 592;
595 -> 593;
595 -> 591;
595 -> 592;
596 -> 592;
597 -> 595;
597 -> 596;
598 -> 594;
598 -> 596;
599 -> 596;
600 -> 597;
600 -> 596;
601 -> 600;
602 -> 601;
602 -> 598;
602 -> 591;
602 -> 595;
602 -> 600;
603 -> 602;
603 -> 601;
604 -> 602;
604 -> 601;
605 -> 603;
605 -> 601;
606 -> 603;
606 -> 602;
606 -> 601;
607 -> 601;
608 -> 601;
609 -> 605;
609 -> 608;
610 -> 606;
610 -> 608;
611 -> 607;
611 -> 608;
612 -> 604;
612 -> 608;
613 -> 610;
613 -> 608;
614 -> 611;
614 -> 608;
615 -> 608;
616 -> 613;
616 -> 615;
617 -> 614;
617 -> 615;
618 -> 612;
618 -> 615;
619 -> 616;
619 -> 615;
620 -> 616;
620 -> 602;
620 -> 615;
621 -> 616;
621 -> 602;
621 -> 620;
622 -> 617;
622 -> 620;
623 -> 620;
624 -> 621;
624 -> 623;
625 -> 622;
625 -> 623;
626 -> 618;
626 -> 623;
627 -> 624;
627 -> 623;
628 -> 627;
629 -> 616;
629 -> 602;
629 -> 615;
630 -> 616;
630 -> 602;
630 -> 629;
631 -> 617;
631 -> 629;
632 -> 629;
633 -> 630;
633 -> 632;
634 -> 631;
634 -> 632;
635 -> 618;
635 -> 632;
636 -> 633;
636 -> 632;
637 -> 635;
637 -> 634;
637 -> 632;
638 -> 636;
638 -> 637;
638 -> 602;
638 -> 632;
639 -> 608;
640 -> 639;
640 -> 601;
641 -> 601;
642 -> 605;
642 -> 641;
643 -> 638;
643 -> 641;
644 -> 607;
644 -> 641;
645 -> 604;
645 -> 641;
646 -> 643;
646 -> 641;
647 -> 641;
648 -> 647;
648 -> 601;
649 -> 640;
649 -> 648;
649 -> 601;
650 -> 601;
651 -> 605;
651 -> 650;
652 -> 638;
652 -> 650;
653 -> 607;
653 -> 650;
654 -> 604;
654 -> 650;
655 -> 652;
655 -> 650;
656 -> 650;
657 -> 656;
657 -> 601;
658 -> 649;
658 -> 657;
658 -> 601;
659 -> 603;
659 -> 638;
659 -> 601;
660 -> 601;
661 -> 659;
661 -> 660;
662 -> 604;
662 -> 660;
663 -> 660;
664 -> 661;
665 -> 661;
666 -> 664;
666 -> 661;
667 -> 661;
668 -> 661;
669 -> 666;
669 -> 668;
670 -> 666;
670 -> 668;
671 -> 667;
671 -> 668;
672 -> 665;
672 -> 668;
673 -> 670;
673 -> 668;
674 -> 673;
675 -> 671;
675 -> 673;
676 -> 673;
677 -> 674;
677 -> 676;
678 -> 675;
678 -> 676;
679 -> 672;
679 -> 676;
680 -> 677;
680 -> 676;
681 -> 677;
681 -> 661;
681 -> 676;
682 -> 677;
683 -> 677;
684 -> 678;
684 -> 683;
684 -> 677;
685 -> 684;
685 -> 677;
686 -> 0;
686 -> 677;
687 -> 686;
687 -> 678;
687 -> 677;
688 -> 687;
688 -> 677;
689 -> 682;
689 -> 677;
690 -> 688;
690 -> 689;
690 -> 0;
690 -> 661;
690 -> 677;
691 -> 682;
691 -> 690;
691 -> 677;
692 -> 690;
692 -> 677;
693 -> 677;
694 -> 691;
694 -> 693;
695 -> 692;
695 -> 693;
696 -> 679;
696 -> 693;
697 -> 696;
697 -> 695;
697 -> 693;
698 -> 677;
699 -> 668;
700 -> 699;
700 -> 661;
701 -> 661;
702 -> 666;
702 -> 701;
703 -> 697;
703 -> 701;
704 -> 667;
704 -> 701;
705 -> 665;
705 -> 701;
706 -> 703;
706 -> 701;
707 -> 704;
707 -> 701;
708 -> 701;
709 -> 706;
709 -> 708;
710 -> 707;
710 -> 708;
711 -> 705;
711 -> 708;
712 -> 709;
712 -> 697;
712 -> 708;
713 -> 709;
713 -> 697;
713 -> 708;
714 -> 709;
714 -> 697;
714 -> 0;
714 -> 708;
715 -> 713;
715 -> 708;
716 -> 710;
716 -> 708;
717 -> 708;
718 -> 715;
718 -> 717;
719 -> 716;
719 -> 717;
720 -> 711;
720 -> 717;
721 -> 718;
721 -> 717;
722 -> 718;
722 -> 697;
722 -> 717;
723 -> 718;
724 -> 719;
724 -> 723;
724 -> 718;
725 -> 724;
725 -> 718;
726 -> 718;
726 -> 719;
727 -> 720;
727 -> 718;
728 -> 727;
728 -> 726;
728 -> 718;
729 -> 701;
730 -> 729;
730 -> 661;
731 -> 700;
731 -> 730;
731 -> 661;
732 -> 661;
733 -> 666;
733 -> 732;
734 -> 728;
734 -> 732;
735 -> 667;
735 -> 732;
736 -> 665;
736 -> 732;
737 -> 734;
737 -> 732;
738 -> 737;
738 -> 728;
739 -> 735;
739 -> 737;
740 -> 737;
741 -> 738;
741 -> 740;
742 -> 739;
742 -> 740;
743 -> 736;
743 -> 740;
744 -> 741;
744 -> 728;
744 -> 740;
745 -> 741;
745 -> 740;
746 -> 741;
746 -> 728;
746 -> 740;
747 -> 741;
747 -> 728;
747 -> 746;
748 -> 742;
748 -> 746;
749 -> 746;
750 -> 747;
750 -> 749;
751 -> 748;
751 -> 749;
752 -> 743;
752 -> 749;
753 -> 750;
753 -> 749;
754 -> 753;
755 -> 743;
755 -> 741;
756 -> 755;
756 -> 742;
756 -> 741;
757 -> 732;
758 -> 757;
758 -> 661;
759 -> 731;
759 -> 758;
759 -> 661;
760 -> 661;
760 -> 759;
760 -> 756;
761 -> 760;
762 -> 760;
763 -> 760;
764 -> 760;
765 -> 760;
766 -> 760;
766 -> 765;
767 -> 765;
768 -> 766;
768 -> 767;
769 -> 766;
769 -> 767;
770 -> 768;
770 -> 767;
771 -> 770;
772 -> 760;
773 -> 663;
773 -> 660;
774 -> 773;
774 -> 601;
775 -> 602;
775 -> 774;
775 -> 760;
775 -> 600;
776 -> 599;
776 -> 596;
777 -> 776;
777 -> 592;
778 -> 573;
779 -> 0;
779 -> 573;
780 -> 576;
780 -> 573;
781 -> 779;
781 -> 573;
782 -> 780;
782 -> 781;
782 -> 775;
782 -> 779;
782 -> 573;
783 -> 576;
783 -> 782;
783 -> 573;
785 -> 784;
786 -> 785;
787 -> 575;
787 -> 573;
788 -> 782;
788 -> 573;
789 -> 573;
790 -> 573;
791 -> 787;
791 -> 790;
792 -> 788;
792 -> 790;
793 -> 789;
793 -> 790;
794 -> 789;
794 -> 790;
795 -> 789;
795 -> 790;
796 -> 789;
796 -> 790;
797 -> 789;
797 -> 790;
798 -> 789;
798 -> 790;
799 -> 790;
800 -> 790;
801 -> 791;
801 -> 800;
801 -> 790;
802 -> 792;
802 -> 801;
803 -> 791;
803 -> 790;
804 -> 792;
804 -> 790;
805 -> 793;
805 -> 790;
806 -> 790;
807 -> 803;
807 -> 806;
808 -> 804;
808 -> 806;
809 -> 805;
809 -> 806;
810 -> 807;
810 -> 806;
811 -> 808;
811 -> 806;
812 -> 810;
812 -> 811;
812 -> 806;
813 -> 807;
813 -> 0;
813 -> 806;
814 -> 808;
814 -> 782;
814 -> 783;
814 -> 806;
815 -> 806;
816 -> 813;
816 -> 815;
817 -> 814;
817 -> 815;
818 -> 816;
818 -> 817;
818 -> 815;
819 -> 816;
819 -> 815;
820 -> 806;
821 -> 820;
821 -> 790;
822 -> 821;
823 -> 822;
823 -> 573;
824 -> 559;
824 -> 488;
825 -> 824;
825 -> 1;
826 -> 1;
827 -> 0;
827 -> 1;
828 -> 1;
829 -> 827;
829 -> 828;
830 -> 826;
830 -> 828;
831 -> 826;
831 -> 828;
832 -> 826;
832 -> 828;
833 -> 826;
833 -> 828;
834 -> 826;
834 -> 828;
835 -> 826;
835 -> 828;
836 -> 829;
836 -> 828;
837 -> 830;
837 -> 828;
838 -> 831;
838 -> 828;
839 -> 832;
839 -> 828;
840 -> 833;
840 -> 828;
841 -> 834;
841 -> 828;
842 -> 835;
842 -> 828;
843 -> 828;
844 -> 836;
844 -> 843;
845 -> 837;
845 -> 843;
846 -> 838;
846 -> 843;
847 -> 839;
847 -> 843;
848 -> 840;
848 -> 843;
849 -> 841;
849 -> 843;
850 -> 842;
850 -> 843;
851 -> 844;
851 -> 843;
852 -> 844;
852 -> 843;
853 -> 843;
854 -> 845;
854 -> 843;
855 -> 846;
855 -> 843;
856 -> 847;
856 -> 843;
857 -> 848;
857 -> 843;
858 -> 849;
858 -> 843;
860 -> 859;
862 -> 861;
863 -> 850;
863 -> 843;
864 -> 843;
865 -> 852;
865 -> 864;
866 -> 853;
866 -> 864;
867 -> 854;
867 -> 864;
868 -> 855;
868 -> 864;
869 -> 856;
869 -> 864;
870 -> 857;
870 -> 864;
871 -> 858;
871 -> 864;
872 -> 852;
872 -> 864;
873 -> 863;
873 -> 864;
874 -> 853;
874 -> 864;
875 -> 853;
875 -> 864;
876 -> 853;
876 -> 864;
877 -> 876;
877 -> 864;
878 -> 876;
878 -> 864;
879 -> 876;
879 -> 864;
880 -> 876;
880 -> 864;
881 -> 876;
881 -> 864;
882 -> 876;
882 -> 864;
883 -> 876;
883 -> 864;
884 -> 876;
884 -> 864;
885 -> 876;
885 -> 864;
886 -> 876;
886 -> 864;
887 -> 876;
887 -> 864;
888 -> 876;
888 -> 864;
889 -> 876;
889 -> 864;
890 -> 876;
890 -> 864;
891 -> 876;
891 -> 864;
892 -> 865;
892 -> 876;
892 -> 864;
893 -> 866;
893 -> 876;
893 -> 864;
894 -> 867;
894 -> 876;
894 -> 864;
895 -> 868;
895 -> 876;
895 -> 864;
896 -> 869;
896 -> 876;
896 -> 864;
897 -> 870;
897 -> 876;
897 -> 864;
898 -> 871;
898 -> 876;
898 -> 864;
899 -> 872;
899 -> 864;
900 -> 899;
900 -> 876;
900 -> 864;
901 -> 873;
901 -> 876;
901 -> 864;
902 -> 874;
902 -> 876;
902 -> 864;
903 -> 875;
903 -> 876;
903 -> 864;
904 -> 853;
904 -> 828;
905 -> 904;
905 -> 1;
906 -> 826;
906 -> 1;
907 -> 1;
908 -> 826;
908 -> 907;
909 -> 905;
909 -> 907;
910 -> 909;
910 -> 892;
910 -> 907;
911 -> 909;
911 -> 893;
911 -> 907;
912 -> 909;
912 -> 894;
912 -> 907;
913 -> 908;
913 -> 907;
914 -> 909;
914 -> 896;
914 -> 907;
915 -> 909;
915 -> 897;
915 -> 907;
916 -> 907;
917 -> 909;
917 -> 900;
917 -> 907;
918 -> 909;
918 -> 901;
918 -> 907;
919 -> 909;
919 -> 902;
919 -> 907;
920 -> 909;
920 -> 903;
920 -> 907;
921 -> 907;
922 -> 910;
922 -> 921;
923 -> 911;
923 -> 921;
924 -> 912;
924 -> 921;
925 -> 913;
925 -> 921;
926 -> 914;
926 -> 921;
927 -> 915;
927 -> 921;
928 -> 916;
928 -> 921;
929 -> 917;
929 -> 921;
930 -> 918;
930 -> 921;
931 -> 919;
931 -> 921;
932 -> 920;
932 -> 921;
933 -> 916;
933 -> 921;
934 -> 933;
934 -> 921;
935 -> 933;
935 -> 921;
936 -> 933;
936 -> 921;
937 -> 933;
937 -> 921;
938 -> 933;
938 -> 921;
939 -> 933;
939 -> 921;
940 -> 933;
940 -> 921;
941 -> 933;
941 -> 921;
942 -> 933;
942 -> 921;
943 -> 933;
943 -> 921;
944 -> 933;
944 -> 921;
945 -> 933;
945 -> 921;
946 -> 933;
946 -> 921;
947 -> 933;
947 -> 921;
948 -> 933;
948 -> 921;
949 -> 925;
949 -> 933;
949 -> 921;
950 -> 928;
950 -> 933;
950 -> 921;
951 -> 916;
951 -> 1;
952 -> 1;
953 -> 826;
953 -> 952;
954 -> 826;
954 -> 952;
955 -> 951;
955 -> 952;
956 -> 955;
956 -> 922;
956 -> 952;
957 -> 955;
957 -> 923;
957 -> 952;
958 -> 955;
958 -> 924;
958 -> 952;
959 -> 955;
959 -> 949;
959 -> 952;
960 -> 952;
961 -> 953;
961 -> 960;
961 -> 952;
962 -> 954;
962 -> 960;
962 -> 952;
963 -> 961;
963 -> 962;
963 -> 952;
964 -> 955;
964 -> 927;
964 -> 952;
965 -> 955;
965 -> 950;
965 -> 952;
966 -> 955;
966 -> 929;
966 -> 952;
967 -> 955;
967 -> 930;
967 -> 952;
968 -> 955;
968 -> 931;
968 -> 952;
969 -> 955;
969 -> 932;
969 -> 952;
970 -> 952;
971 -> 956;
971 -> 970;
972 -> 957;
972 -> 970;
973 -> 958;
973 -> 970;
974 -> 959;
974 -> 970;
975 -> 963;
975 -> 970;
976 -> 964;
976 -> 970;
977 -> 965;
977 -> 970;
978 -> 966;
978 -> 970;
979 -> 967;
979 -> 970;
980 -> 968;
980 -> 970;
981 -> 969;
981 -> 970;
982 -> 960;
982 -> 970;
983 -> 982;
983 -> 970;
984 -> 982;
984 -> 970;
985 -> 982;
985 -> 970;
986 -> 982;
986 -> 970;
987 -> 982;
987 -> 970;
988 -> 982;
988 -> 970;
989 -> 982;
989 -> 970;
990 -> 982;
990 -> 970;
991 -> 982;
991 -> 970;
992 -> 982;
992 -> 970;
993 -> 982;
993 -> 970;
994 -> 982;
994 -> 970;
995 -> 982;
995 -> 970;
996 -> 982;
996 -> 970;
997 -> 982;
997 -> 970;
998 -> 975;
998 -> 982;
998 -> 970;
999 -> 960;
999 -> 1;
1000 -> 999;
1000 -> 826;
1000 -> 1;
1001 -> 1;
1002 -> 825;
1002 -> 1001;
1003 -> 826;
1003 -> 1001;
1004 -> 1001;
1005 -> 1002;
1005 -> 1004;
1005 -> 817;
1005 -> 1001;
1006 -> 1005;
1006 -> 1001;
1007 -> 1003;
1007 -> 1001;
1008 -> 1001;
1009 -> 1006;
1009 -> 1008;
1010 -> 1007;
1010 -> 1008;
1011 -> 1009;
1011 -> 1008;
1012 -> 1010;
1012 -> 1008;
1013 -> 1008;
1014 -> 1011;
1014 -> 1013;
1015 -> 1012;
1015 -> 1013;
1016 -> 1014;
1016 -> 1013;
1017 -> 1015;
1017 -> 1013;
1018 -> 1013;
1019 -> 1013;
1020 -> 1016;
1020 -> 1019;
1021 -> 1017;
1021 -> 1019;
1022 -> 1018;
1022 -> 1019;
1023 -> 1019;
1024 -> 1021;
1024 -> 1023;
1024 -> 1019;
1025 -> 1021;
1025 -> 1019;
1026 -> 1025;
1026 -> 826;
1026 -> 1000;
1026 -> 971;
1026 -> 972;
1026 -> 981;
1026 -> 973;
1026 -> 974;
1026 -> 998;
1026 -> 977;
1026 -> 978;
1026 -> 991;
1026 -> 979;
1026 -> 980;
1026 -> 976;
1026 -> 995;
1026 -> 996;
1026 -> 997;
1026 -> 963;
1026 -> 906;
1026 -> 852;
1026 -> 1019;
1027 -> 1019;
1028 -> 1025;
1028 -> 1027;
1028 -> 826;
1028 -> 1000;
1028 -> 971;
1028 -> 972;
1028 -> 981;
1028 -> 973;
1028 -> 974;
1028 -> 998;
1028 -> 977;
1028 -> 978;
1028 -> 991;
1028 -> 979;
1028 -> 980;
1028 -> 976;
1028 -> 995;
1028 -> 996;
1028 -> 997;
1028 -> 963;
1028 -> 906;
1028 -> 852;
1028 -> 1019;
1029 -> 1028;
1029 -> 1027;
1030 -> 1029;
1030 -> 1028;
1030 -> 1027;
1031 -> 1021;
1031 -> 1019;
1032 -> 1031;
1032 -> 1030;
1032 -> 1019;
1033 -> 1019;
1034 -> 1031;
1034 -> 1033;
1034 -> 1030;
1034 -> 1019;
1035 -> 1034;
1035 -> 1033;
1036 -> 1035;
1036 -> 1034;
1036 -> 1033;
1037 -> 1020;
1037 -> 1019;
1038 -> 1022;
1038 -> 1030;
1038 -> 1036;
1038 -> 1019;
1039 -> 1037;
1039 -> 1038;
1039 -> 1019;
1040 -> 1019;
1041 -> 1039;
1041 -> 1040;
1042 -> 1039;
1042 -> 1040;
1043 -> 1039;
1043 -> 1040;
1044 -> 1039;
1044 -> 1040;
1045 -> 1039;
1045 -> 1040;
1046 -> 1045;
1046 -> 1040;
1047 -> 1045;
1047 -> 1040;
1048 -> 1045;
1048 -> 1040;
1049 -> 1045;
1049 -> 1040;
1050 -> 1045;
1050 -> 1040;
1051 -> 1045;
1051 -> 1040;
1052 -> 1045;
1052 -> 1040;
1053 -> 1045;
1053 -> 1040;
1054 -> 1045;
1054 -> 1040;
1055 -> 1045;
1055 -> 1040;
1056 -> 1045;
1056 -> 1040;
1057 -> 1041;
1057 -> 1039;
1057 -> 1045;
1057 -> 1040;
1058 -> 1041;
1058 -> 1039;
1058 -> 1045;
1058 -> 1040;
1059 -> 1041;
1059 -> 1039;
1059 -> 1045;
1059 -> 1040;
1060 -> 1041;
1060 -> 1039;
1060 -> 1045;
1060 -> 1040;
1061 -> 1043;
1061 -> 1040;
1062 -> 1061;
1063 -> 1062;
1063 -> 1045;
1063 -> 1040;
1064 -> 1044;
1064 -> 1040;
1065 -> 1064;
1066 -> 1065;
1066 -> 1045;
1066 -> 1040;
1067 -> 1040;
1068 -> 1040;
1069 -> 1041;
1069 -> 1039;
1069 -> 1068;
1069 -> 1040;
1070 -> 1041;
1070 -> 1039;
1070 -> 1040;
1071 -> 0;
1071 -> 1040;
1072 -> 1041;
1072 -> 1069;
1073 -> 1069;
1074 -> 1072;
1074 -> 1073;
1074 -> 1069;
1075 -> 1072;
1075 -> 1070;
1075 -> 1045;
1075 -> 1074;
1076 -> 1041;
1076 -> 1070;
1076 -> 1045;
1076 -> 1074;
1077 -> 1042;
1077 -> 1045;
1077 -> 1040;
1078 -> 1045;
1078 -> 1077;
1078 -> 1040;
1079 -> 1045;
1079 -> 1060;
1079 -> 1070;
1079 -> 1078;
1080 -> 1079;
1081 -> 1080;
1081 -> 1045;
1081 -> 1079;
1082 -> 1078;
1083 -> 1072;
1083 -> 1082;
1083 -> 1078;
1084 -> 1072;
1084 -> 1080;
1084 -> 1045;
1084 -> 1083;
1085 -> 1078;
1086 -> 1045;
1086 -> 1084;
1086 -> 1085;
1086 -> 1078;
1087 -> 1045;
1087 -> 1084;
1087 -> 1080;
1087 -> 1085;
1087 -> 1078;
1088 -> 1045;
1088 -> 1060;
1088 -> 1080;
1088 -> 1040;
1089 -> 1088;
1089 -> 1045;
1089 -> 1040;
1090 -> 1039;
1090 -> 1088;
1090 -> 1076;
1090 -> 1058;
1090 -> 1059;
1090 -> 1081;
1090 -> 1084;
1090 -> 1089;
1090 -> 1052;
1090 -> 1075;
1090 -> 1077;
1090 -> 1063;
1090 -> 1066;
1090 -> 1056;
1090 -> 1045;
1090 -> 1060;
1090 -> 1019;
1091 -> 1021;
1091 -> 1019;
1092 -> 1091;
1092 -> 1036;
1092 -> 1019;
1093 -> 1092;
1094 -> 1093;
1094 -> 1090;
1094 -> 1036;
1094 -> 1092;
1095 -> 1094;
1095 -> 1093;
1096 -> 1094;
1096 -> 1093;
1097 -> 1095;
1097 -> 1093;
1098 -> 1093;
1099 -> 1097;
1099 -> 1098;
1099 -> 1093;
1100 -> 1097;
1100 -> 1094;
1100 -> 1093;
1101 -> 1096;
1101 -> 1094;
1101 -> 1100;
1101 -> 1093;
1102 -> 1096;
1102 -> 1101;
1102 -> 1097;
1102 -> 1093;
1103 -> 1096;
1103 -> 1101;
1103 -> 1097;
1103 -> 1093;
1104 -> 1096;
1104 -> 1101;
1104 -> 1093;
1105 -> 1096;
1105 -> 1101;
1105 -> 1097;
1105 -> 1104;
1106 -> 1093;
1107 -> 1096;
1107 -> 1101;
1107 -> 1106;
1107 -> 1093;
1108 -> 1107;
1109 -> 1096;
1109 -> 1101;
1109 -> 1097;
1109 -> 1108;
1110 -> 1093;
1111 -> 1096;
1111 -> 1101;
1111 -> 1110;
1111 -> 1093;
1112 -> 1093;
1113 -> 1097;
1113 -> 1101;
1113 -> 1112;
1113 -> 1093;
1114 -> 1096;
1114 -> 1101;
1114 -> 1097;
1114 -> 1093;
1115 -> 1093;
1116 -> 1096;
1116 -> 1101;
1116 -> 1115;
1116 -> 1093;
1117 -> 1116;
1118 -> 1116;
1119 -> 1096;
1119 -> 1118;
1120 -> 1118;
1121 -> 1119;
1121 -> 1101;
1121 -> 1120;
1121 -> 1118;
1122 -> 1119;
1122 -> 1101;
1122 -> 1121;
1123 -> 1121;
1124 -> 1122;
1124 -> 1119;
1124 -> 1121;
1125 -> 1119;
1125 -> 1101;
1125 -> 1124;
1125 -> 1118;
1126 -> 1125;
1126 -> 1116;
1127 -> 1116;
1128 -> 1097;
1128 -> 1127;
1129 -> 1127;
1130 -> 1128;
1130 -> 1101;
1130 -> 1124;
1130 -> 1129;
1130 -> 1127;
1131 -> 1128;
1131 -> 1101;
1131 -> 1124;
1131 -> 1130;
1131 -> 1127;
1132 -> 1131;
1132 -> 1116;
1133 -> 1096;
1133 -> 1101;
1133 -> 1097;
1133 -> 1116;
1134 -> 1126;
1134 -> 1133;
1135 -> 1132;
1135 -> 1133;
1136 -> 1134;
1136 -> 1135;
1136 -> 1101;
1136 -> 1124;
1136 -> 1130;
1136 -> 1122;
1136 -> 1123;
1136 -> 1133;
1137 -> 1096;
1137 -> 1136;
1137 -> 1097;
1137 -> 1093;
1138 -> 1093;
1139 -> 1094;
1139 -> 1138;
1139 -> 1136;
1139 -> 1092;
1140 -> 1092;
1141 -> 1139;
1141 -> 1140;
1141 -> 1092;
1142 -> 1139;
1142 -> 1141;
1143 -> 1019;
1144 -> 1090;
1144 -> 1142;
1144 -> 1143;
1144 -> 1019;
1145 -> 1019;
1146 -> 1021;
1146 -> 1019;
1147 -> 1020;
1147 -> 1019;
1148 -> 1019;
1149 -> 1146;
1149 -> 1148;
1150 -> 1147;
1150 -> 1148;
1151 -> 1148;
1152 -> 1148;
1153 -> 1150;
1153 -> 1148;
1154 -> 1153;
1154 -> 1142;
1154 -> 1148;
1155 -> 1142;
1155 -> 1148;
1156 -> 1154;
1156 -> 1148;
1157 -> 1151;
1157 -> 1156;
1158 -> 1157;
1158 -> 1148;
1159 -> 1157;
1159 -> 1148;
1160 -> 1159;
1160 -> 1148;
1161 -> 1149;
1161 -> 1148;
1162 -> 1161;
1162 -> 1142;
1162 -> 1148;
1163 -> 1148;
1164 -> 1161;
1164 -> 1163;
1164 -> 1142;
1164 -> 1148;
1165 -> 1149;
1165 -> 1148;
1166 -> 1165;
1166 -> 1164;
1166 -> 1148;
1167 -> 1148;
1168 -> 1165;
1168 -> 1167;
1168 -> 1164;
1168 -> 1148;
1169 -> 1149;
1169 -> 1148;
1170 -> 1148;
1171 -> 1169;
1171 -> 1170;
1173 -> 1172;
1174 -> 1172;
1175 -> 1174;
1175 -> 1170;
1176 -> 1170;
1177 -> 1171;
1177 -> 1170;
1178 -> 1177;
1178 -> 1168;
1178 -> 1170;
1179 -> 1178;
1180 -> 1178;
1181 -> 1176;
1181 -> 1180;
1181 -> 1178;
1182 -> 1178;
1183 -> 1170;
1184 -> 1183;
1184 -> 1148;
1185 -> 1150;
1185 -> 1184;
1186 -> 1184;
1187 -> 1185;
1187 -> 1186;
1188 -> 1187;
1188 -> 1186;
1189 -> 1186;
1190 -> 1174;
1190 -> 1186;
1191 -> 1188;
1191 -> 1189;
1191 -> 1190;
1191 -> 1168;
1191 -> 1186;
1192 -> 1148;
1193 -> 1192;
1193 -> 1148;
1194 -> 1148;
1195 -> 1148;
1196 -> 1192;
1196 -> 1195;
1196 -> 1193;
1196 -> 1148;
1197 -> 1148;
1198 -> 1149;
1198 -> 1148;
1199 -> 1198;
1199 -> 1191;
1199 -> 1148;
1200 -> 1199;
1201 -> 1160;
1201 -> 1199;
1202 -> 1199;
1203 -> 1200;
1203 -> 1202;
1204 -> 1201;
1204 -> 1202;
1205 -> 1202;
1206 -> 1205;
1206 -> 1204;
1206 -> 1202;
1207 -> 1202;
1208 -> 1203;
1208 -> 1207;
1209 -> 1207;
1210 -> 1207;
1211 -> 1209;
1211 -> 1210;
1211 -> 1207;
1212 -> 1207;
1213 -> 1208;
1213 -> 1191;
1213 -> 1212;
1213 -> 1207;
1214 -> 1208;
1214 -> 1191;
1214 -> 1213;
1215 -> 1209;
1215 -> 1214;
1215 -> 1211;
1215 -> 1213;
1216 -> 1213;
1217 -> 1209;
1217 -> 1216;
1217 -> 1215;
1217 -> 1213;
1218 -> 1208;
1218 -> 1191;
1218 -> 1213;
1219 -> 1209;
1219 -> 1218;
1219 -> 1217;
1219 -> 1213;
1220 -> 1207;
1221 -> 1208;
1221 -> 1191;
1221 -> 1220;
1221 -> 1207;
1222 -> 1221;
1223 -> 1222;
1224 -> 1209;
1224 -> 1223;
1224 -> 1219;
1224 -> 1222;
1225 -> 1208;
1225 -> 1191;
1225 -> 1222;
1226 -> 1209;
1226 -> 1225;
1226 -> 1224;
1226 -> 1222;
1227 -> 1221;
1228 -> 1209;
1228 -> 1227;
1228 -> 1226;
1228 -> 1221;
1229 -> 1208;
1229 -> 1191;
1229 -> 1207;
1230 -> 1207;
1231 -> 1209;
1231 -> 1230;
1231 -> 1228;
1231 -> 1207;
1232 -> 1207;
1233 -> 1208;
1233 -> 1191;
1233 -> 1232;
1233 -> 1207;
1234 -> 1233;
1235 -> 1209;
1235 -> 1234;
1235 -> 1231;
1235 -> 1233;
1236 -> 1233;
1237 -> 1236;
1237 -> 1233;
1238 -> 1233;
1239 -> 1237;
1239 -> 1233;
1240 -> 1239;
1241 -> 1209;
1241 -> 1240;
1241 -> 1235;
1241 -> 1239;
1242 -> 1237;
1242 -> 1239;
1243 -> 1209;
1243 -> 1242;
1243 -> 1241;
1243 -> 1239;
1244 -> 1239;
1245 -> 1209;
1245 -> 1244;
1245 -> 1243;
1245 -> 1239;
1246 -> 1239;
1247 -> 1246;
1248 -> 1209;
1248 -> 1247;
1248 -> 1245;
1248 -> 1246;
1249 -> 1233;
1250 -> 1209;
1250 -> 1249;
1250 -> 1248;
1250 -> 1233;
1251 -> 1207;
1252 -> 1208;
1252 -> 1239;
1252 -> 1251;
1252 -> 1207;
1253 -> 1252;
1254 -> 1209;
1254 -> 1253;
1254 -> 1250;
1254 -> 1252;
1255 -> 1252;
1256 -> 1209;
1256 -> 1255;
1256 -> 1254;
1256 -> 1252;
1257 -> 1252;
1258 -> 1209;
1258 -> 1257;
1258 -> 1256;
1258 -> 1252;
1259 -> 1252;
1260 -> 1209;
1260 -> 1259;
1260 -> 1258;
1260 -> 1252;
1261 -> 1252;
1262 -> 1209;
1262 -> 1261;
1262 -> 1260;
1262 -> 1252;
1263 -> 1208;
1263 -> 1239;
1263 -> 1207;
1264 -> 1207;
1265 -> 1208;
1265 -> 1239;
1265 -> 1264;
1265 -> 1207;
1266 -> 1207;
1267 -> 1208;
1267 -> 1239;
1267 -> 1266;
1267 -> 1207;
1268 -> 1207;
1269 -> 1208;
1269 -> 1239;
1269 -> 1268;
1269 -> 1207;
1270 -> 1209;
1270 -> 1262;
1270 -> 1207;
1271 -> 1270;
1271 -> 1202;
1272 -> 1206;
1272 -> 1271;
1272 -> 1202;
1273 -> 1197;
1273 -> 1272;
1273 -> 1199;
1274 -> 1192;
1274 -> 1148;
1275 -> 1197;
1275 -> 1148;
1276 -> 1148;
1277 -> 1274;
1277 -> 1276;
1278 -> 1275;
1278 -> 1276;
1279 -> 1278;
1279 -> 1273;
1279 -> 1276;
1280 -> 1276;
1281 -> 1280;
1281 -> 1279;
1281 -> 1276;
1282 -> 1278;
1282 -> 1280;
1282 -> 1273;
1282 -> 1281;
1283 -> 1277;
1283 -> 1282;
1283 -> 1196;
1283 -> 1281;
1284 -> 1281;
1285 -> 1277;
1285 -> 1283;
1285 -> 1281;
1286 -> 1148;
1287 -> 1148;
1288 -> 1192;
1288 -> 1287;
1288 -> 1285;
1288 -> 1148;
1289 -> 1148;
1290 -> 1191;
1290 -> 1239;
1290 -> 1148;
1291 -> 1148;
1292 -> 1290;
1292 -> 1148;
1293 -> 1292;
1293 -> 1291;
1294 -> 1292;
1294 -> 1291;
1295 -> 1292;
1295 -> 1291;
1296 -> 1291;
1297 -> 1293;
1297 -> 1296;
1297 -> 1291;
1298 -> 1291;
1299 -> 1294;
1299 -> 1298;
1299 -> 1291;
1300 -> 1294;
1300 -> 1292;
1300 -> 1291;
1301 -> 1293;
1301 -> 1292;
1301 -> 1300;
1301 -> 1291;
1302 -> 1291;
1303 -> 1301;
1303 -> 1302;
1303 -> 1291;
1304 -> 1294;
1304 -> 1292;
1304 -> 1291;
1305 -> 1293;
1305 -> 1292;
1305 -> 1304;
1305 -> 1291;
1306 -> 1294;
1306 -> 1305;
1306 -> 1291;
1307 -> 1306;
1307 -> 1302;
1307 -> 1291;
1308 -> 1290;
1308 -> 1305;
1309 -> 1308;
1309 -> 1305;
1310 -> 1309;
1310 -> 1305;
1311 -> 1305;
1312 -> 1305;
1313 -> 1158;
1313 -> 1305;
1314 -> 1192;
1314 -> 1313;
1315 -> 1160;
1315 -> 1313;
1316 -> 1313;
1317 -> 1314;
1317 -> 1316;
1318 -> 1315;
1318 -> 1316;
1319 -> 1316;
1320 -> 1319;
1320 -> 1318;
1320 -> 1316;
1321 -> 1317;
1321 -> 1319;
1321 -> 1320;
1321 -> 1288;
1321 -> 1316;
1322 -> 1313;
1323 -> 1313;
1324 -> 1192;
1324 -> 1323;
1324 -> 1321;
1324 -> 1313;
1325 -> 1308;
1325 -> 1309;
1325 -> 1313;
1326 -> 1192;
1326 -> 1325;
1326 -> 1324;
1326 -> 1313;
1327 -> 1308;
1327 -> 1325;
1327 -> 1313;
1328 -> 1327;
1328 -> 1325;
1328 -> 1313;
1329 -> 1192;
1329 -> 1328;
1330 -> 1160;
1330 -> 1328;
1331 -> 1328;
1332 -> 1329;
1332 -> 1331;
1333 -> 1330;
1333 -> 1331;
1334 -> 1331;
1335 -> 1334;
1335 -> 1333;
1335 -> 1331;
1336 -> 1332;
1336 -> 1334;
1336 -> 1335;
1336 -> 1326;
1336 -> 1331;
1337 -> 1328;
1338 -> 1328;
1339 -> 1192;
1339 -> 1338;
1339 -> 1336;
1339 -> 1328;
1340 -> 1328;
1341 -> 1192;
1341 -> 1340;
1341 -> 1339;
1341 -> 1328;
1342 -> 1308;
1342 -> 1305;
1343 -> 1305;
1344 -> 1162;
1344 -> 1305;
1345 -> 1166;
1345 -> 1305;
1346 -> 1305;
1347 -> 1342;
1347 -> 1346;
1348 -> 1343;
1348 -> 1346;
1349 -> 1344;
1349 -> 1346;
1350 -> 1345;
1350 -> 1346;
1351 -> 1343;
1351 -> 1346;
1352 -> 1351;
1352 -> 1346;
1353 -> 1351;
1353 -> 1346;
1354 -> 1351;
1354 -> 1346;
1355 -> 1351;
1355 -> 1346;
1356 -> 1351;
1356 -> 1346;
1357 -> 1351;
1357 -> 1346;
1358 -> 1351;
1358 -> 1346;
1359 -> 1351;
1359 -> 1346;
1360 -> 1351;
1360 -> 1346;
1361 -> 1347;
1361 -> 1340;
1361 -> 1351;
1361 -> 1346;
1362 -> 1347;
1362 -> 1340;
1362 -> 1351;
1362 -> 1346;
1363 -> 1347;
1363 -> 1340;
1363 -> 1351;
1363 -> 1346;
1364 -> 1347;
1364 -> 1340;
1364 -> 1351;
1364 -> 1346;
1365 -> 1346;
1366 -> 1347;
1366 -> 1340;
1366 -> 1346;
1367 -> 1351;
1368 -> 1351;
1368 -> 1366;
1368 -> 1367;
1369 -> 1351;
1369 -> 1366;
1369 -> 1364;
1369 -> 1367;
1370 -> 1343;
1370 -> 1305;
1371 -> 1149;
1371 -> 1305;
1372 -> 1343;
1372 -> 1305;
1373 -> 1371;
1373 -> 1372;
1373 -> 1364;
1373 -> 1366;
1373 -> 1362;
1373 -> 1363;
1373 -> 1351;
1373 -> 1348;
1373 -> 1349;
1373 -> 1350;
1373 -> 1305;
1374 -> 1305;
1375 -> 1374;
1376 -> 1373;
1376 -> 1375;
1376 -> 1374;
1377 -> 1373;
1377 -> 1374;
1378 -> 1373;
1378 -> 1374;
1379 -> 1373;
1379 -> 1374;
1380 -> 1373;
1380 -> 1379;
1381 -> 1374;
1382 -> 1373;
1382 -> 1381;
1382 -> 1374;
1383 -> 1382;
1384 -> 1373;
1384 -> 1383;
1385 -> 1374;
1386 -> 1373;
1386 -> 1385;
1386 -> 1374;
1387 -> 1374;
1388 -> 1373;
1388 -> 1387;
1388 -> 1374;
1389 -> 1373;
1389 -> 1374;
1390 -> 1373;
1391 -> 1373;
1391 -> 1374;
1392 -> 1305;
1393 -> 1373;
1393 -> 1392;
1393 -> 1305;
1394 -> 1149;
1394 -> 1373;
1394 -> 1393;
1395 -> 1343;
1395 -> 1305;
1396 -> 1160;
1396 -> 1305;
1397 -> 1305;
1398 -> 1395;
1398 -> 1397;
1399 -> 1396;
1399 -> 1397;
1400 -> 1397;
1401 -> 1400;
1401 -> 1399;
1401 -> 1397;
1402 -> 1397;
1403 -> 1397;
1404 -> 1402;
1404 -> 1403;
1404 -> 1397;
1405 -> 1397;
1406 -> 1398;
1406 -> 1373;
1406 -> 1405;
1406 -> 1397;
1407 -> 1398;
1407 -> 1373;
1407 -> 1406;
1408 -> 1402;
1408 -> 1407;
1408 -> 1404;
1408 -> 1406;
1409 -> 1406;
1410 -> 1402;
1410 -> 1409;
1410 -> 1408;
1410 -> 1406;
1411 -> 1398;
1411 -> 1373;
1411 -> 1406;
1412 -> 1402;
1412 -> 1411;
1412 -> 1410;
1412 -> 1406;
1413 -> 1397;
1414 -> 1398;
1414 -> 1373;
1414 -> 1413;
1414 -> 1397;
1415 -> 1414;
1416 -> 1415;
1417 -> 1402;
1417 -> 1416;
1417 -> 1412;
1417 -> 1415;
1418 -> 1398;
1418 -> 1373;
1418 -> 1415;
1419 -> 1402;
1419 -> 1418;
1419 -> 1417;
1419 -> 1415;
1420 -> 1414;
1421 -> 1402;
1421 -> 1420;
1421 -> 1419;
1421 -> 1414;
1422 -> 1398;
1422 -> 1373;
1422 -> 1397;
1423 -> 1397;
1424 -> 1402;
1424 -> 1423;
1424 -> 1421;
1424 -> 1397;
1425 -> 1398;
1425 -> 1373;
1425 -> 1397;
1426 -> 1425;
1427 -> 1402;
1427 -> 1426;
1427 -> 1424;
1427 -> 1425;
1428 -> 1425;
1429 -> 1402;
1429 -> 1428;
1429 -> 1427;
1429 -> 1425;
1430 -> 1425;
1431 -> 1402;
1431 -> 1430;
1431 -> 1429;
1431 -> 1425;
1432 -> 1425;
1433 -> 1402;
1433 -> 1432;
1433 -> 1431;
1433 -> 1425;
1434 -> 1425;
1435 -> 1434;
1436 -> 1402;
1436 -> 1435;
1436 -> 1433;
1436 -> 1434;
1437 -> 1425;
1438 -> 1402;
1438 -> 1437;
1438 -> 1436;
1438 -> 1425;
1439 -> 1397;
1440 -> 1398;
1440 -> 1425;
1440 -> 1439;
1440 -> 1397;
1441 -> 1440;
1442 -> 1402;
1442 -> 1441;
1442 -> 1438;
1442 -> 1440;
1443 -> 1440;
1444 -> 1402;
1444 -> 1443;
1444 -> 1442;
1444 -> 1440;
1445 -> 1440;
1446 -> 1402;
1446 -> 1445;
1446 -> 1444;
1446 -> 1440;
1447 -> 1440;
1448 -> 1402;
1448 -> 1447;
1448 -> 1446;
1448 -> 1440;
1449 -> 1440;
1450 -> 1402;
1450 -> 1449;
1450 -> 1448;
1450 -> 1440;
1451 -> 1398;
1451 -> 1425;
1451 -> 1397;
1452 -> 1397;
1453 -> 1398;
1453 -> 1425;
1453 -> 1452;
1453 -> 1397;
1454 -> 1397;
1455 -> 1398;
1455 -> 1425;
1455 -> 1454;
1455 -> 1397;
1456 -> 1397;
1457 -> 1398;
1457 -> 1425;
1457 -> 1456;
1457 -> 1397;
1458 -> 1402;
1458 -> 1450;
1458 -> 1397;
1459 -> 1458;
1459 -> 1397;
1460 -> 1401;
1460 -> 1459;
1460 -> 1397;
1461 -> 1192;
1461 -> 1460;
1461 -> 1341;
1461 -> 1305;
1462 -> 1394;
1462 -> 1305;
1463 -> 1160;
1463 -> 1305;
1464 -> 1305;
1465 -> 1462;
1465 -> 1464;
1466 -> 1463;
1466 -> 1464;
1467 -> 1464;
1468 -> 1467;
1468 -> 1466;
1468 -> 1464;
1469 -> 1464;
1470 -> 1464;
1471 -> 1469;
1471 -> 1470;
1471 -> 1464;
1472 -> 1464;
1473 -> 1465;
1473 -> 1425;
1473 -> 1472;
1473 -> 1464;
1474 -> 1465;
1474 -> 1425;
1474 -> 1473;
1475 -> 1469;
1475 -> 1474;
1475 -> 1471;
1475 -> 1473;
1476 -> 1473;
1477 -> 1469;
1477 -> 1476;
1477 -> 1475;
1477 -> 1473;
1478 -> 1465;
1478 -> 1425;
1478 -> 1473;
1479 -> 1469;
1479 -> 1478;
1479 -> 1477;
1479 -> 1473;
1480 -> 1464;
1481 -> 1465;
1481 -> 1425;
1481 -> 1480;
1481 -> 1464;
1482 -> 1481;
1483 -> 1482;
1484 -> 1469;
1484 -> 1483;
1484 -> 1479;
1484 -> 1482;
1485 -> 1465;
1485 -> 1425;
1485 -> 1482;
1486 -> 1469;
1486 -> 1485;
1486 -> 1484;
1486 -> 1482;
1487 -> 1481;
1488 -> 1469;
1488 -> 1487;
1488 -> 1486;
1488 -> 1481;
1489 -> 1465;
1489 -> 1425;
1489 -> 1464;
1490 -> 1464;
1491 -> 1469;
1491 -> 1490;
1491 -> 1488;
1491 -> 1464;
1492 -> 1465;
1492 -> 1425;
1492 -> 1464;
1493 -> 1492;
1494 -> 1469;
1494 -> 1493;
1494 -> 1491;
1494 -> 1492;
1495 -> 1492;
1496 -> 1469;
1496 -> 1495;
1496 -> 1494;
1496 -> 1492;
1497 -> 1492;
1498 -> 1469;
1498 -> 1497;
1498 -> 1496;
1498 -> 1492;
1499 -> 1492;
1500 -> 1469;
1500 -> 1499;
1500 -> 1498;
1500 -> 1492;
1501 -> 1492;
1502 -> 1501;
1503 -> 1469;
1503 -> 1502;
1503 -> 1500;
1503 -> 1501;
1504 -> 1492;
1505 -> 1469;
1505 -> 1504;
1505 -> 1503;
1505 -> 1492;
1506 -> 1464;
1507 -> 1465;
1507 -> 1492;
1507 -> 1506;
1507 -> 1464;
1508 -> 1507;
1509 -> 1469;
1509 -> 1508;
1509 -> 1505;
1509 -> 1507;
1510 -> 1507;
1511 -> 1469;
1511 -> 1510;
1511 -> 1509;
1511 -> 1507;
1512 -> 1507;
1513 -> 1469;
1513 -> 1512;
1513 -> 1511;
1513 -> 1507;
1514 -> 1507;
1515 -> 1469;
1515 -> 1514;
1515 -> 1513;
1515 -> 1507;
1516 -> 1507;
1517 -> 1469;
1517 -> 1516;
1517 -> 1515;
1517 -> 1507;
1518 -> 1465;
1518 -> 1492;
1518 -> 1464;
1519 -> 1464;
1520 -> 1465;
1520 -> 1492;
1520 -> 1519;
1520 -> 1464;
1521 -> 1464;
1522 -> 1465;
1522 -> 1492;
1522 -> 1521;
1522 -> 1464;
1523 -> 1464;
1524 -> 1465;
1524 -> 1492;
1524 -> 1523;
1524 -> 1464;
1525 -> 1469;
1525 -> 1517;
1525 -> 1464;
1526 -> 1525;
1526 -> 1464;
1527 -> 1468;
1527 -> 1526;
1527 -> 1464;
1528 -> 1289;
1528 -> 1527;
1528 -> 1305;
1529 -> 1148;
1530 -> 1305;
1530 -> 1529;
1530 -> 1148;
1531 -> 1192;
1531 -> 1461;
1531 -> 1530;
1532 -> 1148;
1533 -> 1192;
1533 -> 1532;
1533 -> 1531;
1533 -> 1148;
1534 -> 1197;
1534 -> 1148;
1535 -> 1289;
1535 -> 1148;
1539 -> 1537;
1539 -> 1536;
1540 -> 1538;
1540 -> 1536;
1541 -> 1536;
1542 -> 0;
1542 -> 1148;
1543 -> 1148;
1544 -> 1148;
1545 -> 1534;
1545 -> 1544;
1546 -> 1535;
1546 -> 1544;
1547 -> 1542;
1547 -> 1544;
1548 -> 1543;
1548 -> 1544;
1549 -> 1543;
1549 -> 1544;
1550 -> 1544;
1551 -> 1548;
1551 -> 1550;
1551 -> 1544;
1552 -> 1551;
1552 -> 1544;
1553 -> 0;
1555 -> 1553;
1555 -> 1554;
1556 -> 1554;
1558 -> 1557;
1560 -> 1559;
1562 -> 1561;
1563 -> 1556;
1564 -> 1556;
1564 -> 1554;
1565 -> 1555;
1565 -> 1556;
1565 -> 1554;
1566 -> 1554;
1567 -> 1544;
1568 -> 1567;
1568 -> 1549;
1568 -> 1544;
1569 -> 1545;
1569 -> 1544;
1570 -> 1546;
1570 -> 1544;
1571 -> 1547;
1571 -> 1544;
1572 -> 1569;
1572 -> 1544;
1573 -> 1570;
1573 -> 1544;
1574 -> 1568;
1574 -> 1544;
1575 -> 1544;
1576 -> 1572;
1576 -> 1575;
1577 -> 1573;
1577 -> 1575;
1578 -> 1574;
1578 -> 1575;
1579 -> 1552;
1579 -> 1575;
1580 -> 1576;
1580 -> 1575;
1581 -> 1576;
1581 -> 1569;
1581 -> 1575;
1582 -> 1577;
1582 -> 1575;
1583 -> 1577;
1583 -> 1570;
1583 -> 1575;
1584 -> 1575;
1585 -> 1580;
1585 -> 1584;
1586 -> 1581;
1586 -> 1584;
1587 -> 1582;
1587 -> 1584;
1588 -> 1583;
1588 -> 1584;
1589 -> 1579;
1589 -> 1584;
1590 -> 1585;
1590 -> 1584;
1591 -> 1586;
1591 -> 1584;
1592 -> 1587;
1592 -> 1584;
1593 -> 1588;
1593 -> 1584;
1594 -> 1584;
1595 -> 1590;
1595 -> 1594;
1596 -> 1591;
1596 -> 1594;
1597 -> 1592;
1597 -> 1594;
1598 -> 1593;
1598 -> 1594;
1599 -> 1589;
1599 -> 1594;
1600 -> 1594;
1601 -> 1596;
1601 -> 1600;
1601 -> 1594;
1602 -> 1594;
1603 -> 1598;
1603 -> 1602;
1603 -> 1594;
1604 -> 1601;
1604 -> 1603;
1604 -> 1594;
1605 -> 1594;
1606 -> 1605;
1606 -> 1604;
1606 -> 1594;
1607 -> 1594;
1608 -> 1607;
1608 -> 1596;
1608 -> 1594;
1609 -> 1608;
1610 -> 1604;
1610 -> 1606;
1610 -> 1609;
1610 -> 1608;
1611 -> 1610;
1611 -> 1607;
1611 -> 1609;
1611 -> 1604;
1611 -> 1608;
1612 -> 1594;
1613 -> 1612;
1613 -> 1598;
1613 -> 1594;
1614 -> 1613;
1615 -> 1604;
1615 -> 1606;
1615 -> 1611;
1615 -> 1614;
1615 -> 1613;
1616 -> 1615;
1616 -> 1614;
1616 -> 1612;
1616 -> 1604;
1616 -> 1613;
1617 -> 1594;
1618 -> 1617;
1618 -> 1596;
1618 -> 1594;
1619 -> 1618;
1620 -> 1619;
1620 -> 1598;
1620 -> 1618;
1621 -> 1620;
1622 -> 1604;
1622 -> 1606;
1622 -> 1611;
1622 -> 1616;
1622 -> 1621;
1622 -> 1620;
1623 -> 1595;
1623 -> 1620;
1624 -> 1597;
1624 -> 1620;
1625 -> 1620;
1626 -> 1623;
1626 -> 1625;
1627 -> 1621;
1627 -> 1625;
1628 -> 1624;
1628 -> 1625;
1629 -> 1621;
1629 -> 1625;
1630 -> 1599;
1630 -> 1625;
1631 -> 1626;
1631 -> 1569;
1631 -> 1627;
1631 -> 1625;
1632 -> 1628;
1632 -> 1570;
1632 -> 1629;
1632 -> 1625;
1633 -> 1630;
1633 -> 0;
1633 -> 1631;
1633 -> 1632;
1633 -> 1569;
1633 -> 1570;
1633 -> 1625;
1634 -> 1622;
1634 -> 1633;
1634 -> 1620;
1635 -> 1620;
1636 -> 1604;
1636 -> 1606;
1636 -> 1611;
1636 -> 1616;
1636 -> 1635;
1636 -> 1619;
1636 -> 1620;
1637 -> 1620;
1638 -> 1604;
1638 -> 1606;
1638 -> 1611;
1638 -> 1616;
1638 -> 1617;
1638 -> 1637;
1638 -> 1620;
1639 -> 1634;
1639 -> 1620;
1640 -> 1636;
1640 -> 1620;
1641 -> 1639;
1641 -> 1640;
1641 -> 1620;
1642 -> 1638;
1642 -> 1620;
1643 -> 1641;
1643 -> 1642;
1643 -> 1620;
1644 -> 1643;
1644 -> 1617;
1644 -> 1619;
1644 -> 1604;
1644 -> 1620;
1645 -> 1604;
1645 -> 1594;
1646 -> 1586;
1646 -> 1584;
1647 -> 1588;
1647 -> 1584;
1648 -> 1584;
1649 -> 1646;
1649 -> 1648;
1649 -> 1584;
1650 -> 1647;
1650 -> 1648;
1650 -> 1584;
1651 -> 1649;
1651 -> 1650;
1651 -> 1584;
1652 -> 1645;
1652 -> 1604;
1652 -> 1606;
1652 -> 1611;
1652 -> 1616;
1652 -> 1644;
1652 -> 1646;
1652 -> 1647;
1652 -> 1651;
1653 -> 1651;
1654 -> 1645;
1654 -> 1604;
1654 -> 1606;
1654 -> 1611;
1654 -> 1616;
1654 -> 1644;
1654 -> 1653;
1654 -> 1647;
1654 -> 1651;
1655 -> 1645;
1655 -> 1604;
1655 -> 1606;
1655 -> 1611;
1655 -> 1616;
1655 -> 1644;
1655 -> 1646;
1655 -> 1647;
1655 -> 1654;
1656 -> 1654;
1657 -> 1646;
1657 -> 1656;
1658 -> 1647;
1658 -> 1656;
1659 -> 1656;
1660 -> 0;
1660 -> 1656;
1661 -> 1657;
1661 -> 1656;
1662 -> 1658;
1662 -> 1656;
1663 -> 1656;
1664 -> 1660;
1664 -> 1663;
1665 -> 1661;
1665 -> 1663;
1666 -> 1662;
1666 -> 1663;
1667 -> 1659;
1667 -> 1663;
1668 -> 1664;
1668 -> 1667;
1668 -> 1663;
1669 -> 1665;
1669 -> 1667;
1669 -> 1663;
1670 -> 1666;
1670 -> 1667;
1670 -> 1663;
1671 -> 1584;
1672 -> 1657;
1672 -> 1671;
1672 -> 1584;
1673 -> 1584;
1674 -> 1658;
1674 -> 1673;
1674 -> 1584;
1675 -> 1659;
1675 -> 1668;
1675 -> 1669;
1675 -> 1670;
1675 -> 1575;
1676 -> 1675;
1677 -> 1676;
1678 -> 1577;
1678 -> 1570;
1678 -> 1633;
1678 -> 1675;
1678 -> 1676;
1679 -> 1578;
1679 -> 1678;
1679 -> 1567;
1679 -> 1676;
1680 -> 1571;
1680 -> 1677;
1680 -> 1544;
1681 -> 1192;
1681 -> 1680;
1681 -> 1533;
1681 -> 1148;
1682 -> 1289;
1682 -> 1528;
1682 -> 1148;
1683 -> 1197;
1683 -> 1282;
1683 -> 1148;
1684 -> 1192;
1684 -> 1681;
1684 -> 1148;
1685 -> 1008;
1686 -> 1001;
1687 -> 1002;
1687 -> 1001;
1688 -> 1005;
1688 -> 1001;
1689 -> 1001;
1690 -> 1687;
1690 -> 1689;
1691 -> 1688;
1691 -> 1689;
1692 -> 1691;
1692 -> 1689;
1693 -> 1692;
1693 -> 1005;
1693 -> 1492;
1694 -> 1690;
1694 -> 1693;
1694 -> 1492;
1694 -> 1692;
1695 -> 1692;
1695 -> 1694;
1696 -> 1695;
1696 -> 1694;
1697 -> 1001;
1698 -> 1002;
1698 -> 1001;
}