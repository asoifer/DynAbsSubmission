digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 754977"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 754978"];
3 [label="@'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 754979"];
4 [label="prefix = @'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 754980"];
5 [label="@'\n}' 754981"];
6 [label="suffix = @'\n}' 754982"];
7 [label="param FlowTests(this) 754983"];
8 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 754984"];
9 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 754985"];
10 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 754986"];
11 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 754987"];
12 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 754988"];
13 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 754989"];
14 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 754990"];
15 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 754991"];
16 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 754992"];
17 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 754993"];
18 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 754994"];
19 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 754995"];
20 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 754996"];
21 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 754997"];
22 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 754998"];
23 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 754999"];
24 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 755000"];
25 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 755001"];
26 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 755002"];
27 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 755003"];
28 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 755004"];
29 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 755005"];
30 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 755006"];
31 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 755007"];
32 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 755008"];
33 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 755009"];
34 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 755010"];
35 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 755011"];
36 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 755012"];
37 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 755013"];
38 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 755014"];
39 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 755015"];
40 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 755016"];
41 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 755017"];
42 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 755018"];
43 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 755019"];
44 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 755020"];
45 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 755021"];
46 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 755022"];
47 [label="LazyThreadSafetyMode.PublicationOnly 755023"];
48 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 755024"];
49 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 755025"];
50 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 755026"];
51 [label="LazyThreadSafetyMode.PublicationOnly 755027"];
52 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 755028"];
53 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 755029"];
54 [label="RuntimeUtilities.IsCoreClrRuntime 755030"];
55 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 755031"];
56 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 755032"];
57 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 755033"];
58 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 755034"];
59 [label="LazyThreadSafetyMode.PublicationOnly 755035"];
60 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 755036"];
61 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 755037"];
62 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 755038"];
63 [label="LazyThreadSafetyMode.PublicationOnly 755039"];
64 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 755040"];
65 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 755041"];
66 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 755042"];
67 [label="LazyThreadSafetyMode.PublicationOnly 755043"];
68 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 755044"];
69 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 755045"];
70 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 755046"];
71 [label="LazyThreadSafetyMode.PublicationOnly 755047"];
72 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755048"];
73 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755049"];
74 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 755050"];
75 [label="LazyThreadSafetyMode.PublicationOnly 755051"];
76 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755052"];
77 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755053"];
78 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 755054"];
79 [label="LazyThreadSafetyMode.PublicationOnly 755055"];
80 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755056"];
81 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755057"];
82 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 755058"];
83 [label="LazyThreadSafetyMode.PublicationOnly 755059"];
84 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755060"];
85 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755061"];
86 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 755062"];
87 [label="LazyThreadSafetyMode.PublicationOnly 755063"];
88 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755064"];
89 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755065"];
90 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 755066"];
91 [label="LazyThreadSafetyMode.PublicationOnly 755067"];
92 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755068"];
93 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755069"];
94 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 755070"];
95 [label="LazyThreadSafetyMode.PublicationOnly 755071"];
96 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755072"];
97 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755073"];
98 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 755074"];
99 [label="LazyThreadSafetyMode.PublicationOnly 755075"];
100 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 755076"];
101 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 755077"];
102 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 755078"];
103 [label="LazyThreadSafetyMode.PublicationOnly 755079"];
104 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 755080"];
105 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 755081"];
106 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 755082"];
107 [label="LazyThreadSafetyMode.PublicationOnly 755083"];
108 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755084"];
109 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755085"];
110 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 755086"];
111 [label="LazyThreadSafetyMode.PublicationOnly 755087"];
112 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755088"];
113 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755089"];
114 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 755090"];
115 [label="LazyThreadSafetyMode.PublicationOnly 755091"];
116 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755092"];
117 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755093"];
118 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 755094"];
119 [label="LazyThreadSafetyMode.PublicationOnly 755095"];
120 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755096"];
121 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755097"];
122 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 755098"];
123 [label="LazyThreadSafetyMode.PublicationOnly 755099"];
124 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 755100"];
125 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 755101"];
126 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 755102"];
127 [label="LazyThreadSafetyMode.PublicationOnly 755103"];
128 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755104"];
129 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755105"];
130 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 755106"];
131 [label="LazyThreadSafetyMode.PublicationOnly 755107"];
132 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755108"];
133 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755109"];
134 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 755110"];
135 [label="LazyThreadSafetyMode.PublicationOnly 755111"];
136 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755112"];
137 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755113"];
138 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 755114"];
139 [label="LazyThreadSafetyMode.PublicationOnly 755115"];
140 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755116"];
141 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755117"];
142 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 755118"];
143 [label="LazyThreadSafetyMode.PublicationOnly 755119"];
144 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755120"];
145 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755121"];
146 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 755122"];
147 [label="LazyThreadSafetyMode.PublicationOnly 755123"];
148 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755124"];
149 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755125"];
150 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 755126"];
151 [label="LazyThreadSafetyMode.PublicationOnly 755127"];
152 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755128"];
153 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755129"];
154 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 755130"];
155 [label="LazyThreadSafetyMode.PublicationOnly 755131"];
156 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755132"];
157 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755133"];
158 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 755134"];
159 [label="LazyThreadSafetyMode.PublicationOnly 755135"];
160 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755136"];
161 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755137"];
162 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 755138"];
163 [label="LazyThreadSafetyMode.PublicationOnly 755139"];
164 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755140"];
165 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755141"];
166 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 755142"];
167 [label="LazyThreadSafetyMode.PublicationOnly 755143"];
168 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755144"];
169 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755145"];
170 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 755146"];
171 [label="LazyThreadSafetyMode.PublicationOnly 755147"];
172 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755148"];
173 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755149"];
174 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 755150"];
175 [label="LazyThreadSafetyMode.PublicationOnly 755151"];
176 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755152"];
177 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755153"];
178 [label="@'R:\\Invalid.dll' 755154"];
179 [label="fullPath: @'R:\\Invalid.dll' 755155"];
180 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 755156"];
181 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 755157"];
182 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 755158"];
183 [label="MscorlibRef_v4_0_30316_17626 755159"];
184 [label="Net451.mscorlib 755160"];
185 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 755161"];
186 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 755162"];
187 [label="'/*<bind>*/' 755163"];
188 [label="StartString = '/*<bind>*/' 755164"];
189 [label="'/*</bind>*/' 755165"];
190 [label="EndString = '/*</bind>*/' 755166"];
191 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 755167"];
192 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 755168"];
193 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 755169"];
194 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 755170"];
195 [label="param CSharpTestBase(this) 755171"];
196 [label="param CommonTestBase(this) 755172"];
197 [label="param TestBase(this) 755173"];
198 [label="_temp 755174"];
199 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 755175"];
200 [label="param UnreachableDoWhileCondition(this) 755176"];
201 [label="var source = @'\nclass C\n{\n    bool F()\n    {\n        do { break; } while (F());\n        return true;\n    }\n}\n'; 755177"];
202 [label="CreateCompilation(source).VerifyDiagnostics(); 755178"];
203 [label="source 755179"];
204 [label="param operator(string source) 755180"];
205 [label="source 755181"];
206 [label="new CSharpTestSource(source) 755182"];
207 [label="param CSharpTestSource(object value) 755183"];
208 [label="param CSharpTestSource(this) 755184"];
209 [label="Value 755185"];
210 [label="CreateCompilation(source).VerifyDiagnostics(); 755186"];
211 [label="CreateCompilation(source).VerifyDiagnostics(); 755187"];
212 [label="CreateCompilation(source) 755188"];
213 [label="param CreateCompilation(CSharpTestSource source) 755189"];
214 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 755190"];
215 [label="param CreateCompilation(CSharpCompilationOptions options = null) 755191"];
216 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 755192"];
217 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 755193"];
218 [label="param CreateCompilation(string assemblyName = '') 755194"];
219 [label="param CreateCompilation(string sourceFileName = '') 755195"];
220 [label="param CreateCompilation(bool skipUsesIsNullable = false) 755196"];
221 [label="source 755197"];
222 [label="targetFramework 755198"];
223 [label="references 755199"];
224 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 755200"];
225 [label="param GetReferences(TargetFramework tf) 755201"];
226 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 755202"];
227 [label="var references = GetReferences(tf); 755203"];
228 [label="GetReferences(tf) 755204"];
229 [label="param GetReferences(TargetFramework targetFramework) 755205"];
230 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 755206"];
231 [label="StandardReferences 755207"];
232 [label="RuntimeUtilities.IsCoreClrRuntime 755208"];
233 [label="Mscorlib46ExtendedReferences 755209"];
234 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 755210"];
235 [label="TestBase.ValueTupleRef 755211"];
236 [label="TestReferences.NetFx.ValueTuple.tuplelib 755212"];
237 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 755213"];
238 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 755214"];
239 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 755215"];
240 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 755216"];
241 [label="return references; 755217"];
242 [label="options 755218"];
243 [label="parseOptions 755219"];
244 [label="assemblyName 755220"];
245 [label="sourceFileName 755221"];
246 [label="skipUsesIsNullable 755222"];
247 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 755223"];
248 [label="param CreateEmptyCompilation(CSharpTestSource source) 755224"];
249 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 755225"];
250 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 755226"];
251 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 755227"];
252 [label="param CreateEmptyCompilation(string assemblyName = '') 755228"];
253 [label="param CreateEmptyCompilation(string sourceFileName = '') 755229"];
254 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 755230"];
255 [label="source 755231"];
256 [label="references 755232"];
257 [label="options 755233"];
258 [label="parseOptions 755234"];
259 [label="assemblyName 755235"];
260 [label="sourceFileName 755236"];
261 [label="skipUsesIsNullable 755237"];
262 [label="null 755238"];
263 [label="experimentalFeature: null 755239"];
264 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 755240"];
265 [label="param CreateCompilationCore(CSharpTestSource source) 755241"];
266 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 755242"];
267 [label="param CreateCompilationCore(CSharpCompilationOptions options) 755243"];
268 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 755244"];
269 [label="param CreateCompilationCore(string assemblyName) 755245"];
270 [label="param CreateCompilationCore(string sourceFileName) 755246"];
271 [label="param CreateCompilationCore(bool skipUsesIsNullable) 755247"];
272 [label="param CreateCompilationCore(MessageID? experimentalFeature) 755248"];
273 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 755249"];
274 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 755250"];
275 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 755251"];
276 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 755252"];
277 [label="param GetSyntaxTrees(string sourceFileName = '') 755253"];
278 [label="param GetSyntaxTrees(this) 755254"];
279 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 755255"];
280 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 755256"];
281 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 755257"];
282 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 755258"];
283 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 755259"];
284 [label="param Parse(string text) 755260"];
285 [label="param Parse(string filename = '') 755261"];
286 [label="param Parse(CSharpParseOptions options = null) 755262"];
287 [label="param Parse(Encoding encoding = null) 755263"];
288 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 755264"];
289 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 755265"];
290 [label="kind: SourceCodeKind.Regular 755266"];
291 [label="documentationMode: DocumentationMode.Parse 755267"];
292 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 755268"];
293 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 755269"];
294 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 755270"];
295 [label="SourceCodeKind.Script 755271"];
296 [label="Regular.WithKind(SourceCodeKind.Script) 755272"];
297 [label="Script = Regular.WithKind(SourceCodeKind.Script) 755273"];
298 [label="LanguageVersion.CSharp6 755274"];
299 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 755275"];
300 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 755276"];
301 [label="LanguageVersion.CSharp7 755277"];
302 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 755278"];
303 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 755279"];
304 [label="LanguageVersion.CSharp7_1 755280"];
305 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 755281"];
306 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 755282"];
307 [label="LanguageVersion.CSharp7_2 755283"];
308 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 755284"];
309 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 755285"];
310 [label="LanguageVersion.CSharp7_3 755286"];
311 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 755287"];
312 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 755288"];
313 [label="LanguageVersion.Default 755289"];
314 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 755290"];
315 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 755291"];
316 [label="LanguageVersion.Preview 755292"];
317 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 755293"];
318 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 755294"];
319 [label="LanguageVersion.CSharp8 755295"];
320 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 755296"];
321 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 755297"];
322 [label="LanguageVersion.CSharp9 755298"];
323 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 755299"];
324 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 755300"];
325 [label="DocumentationMode.Diagnose 755301"];
326 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 755302"];
327 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 755303"];
328 [label="Regular 755304"];
329 [label="'UseLegacyStrongNameProvider' 755305"];
330 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 755306"];
331 [label="param WithFeature(this CSharpParseOptions options) 755307"];
332 [label="param WithFeature(string feature) 755308"];
333 [label="param WithFeature(string value = 'true') 755309"];
334 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 755310"];
335 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 755311"];
336 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 755312"];
337 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 755313"];
338 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 755314"];
339 [label="new[] { new KeyValuePair<string, string>(feature, value) } 755315"];
340 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 755316"];
341 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 755317"];
342 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 755318"];
343 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 755319"];
344 [label="1 755320"];
345 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 755321"];
346 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 755322"];
347 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 755323"];
348 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 755324"];
349 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 755325"];
350 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 755326"];
351 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 755327"];
352 [label="LanguageVersion.CSharp8 755328"];
353 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 755329"];
354 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 755330"];
355 [label="RegularWithExtendedPartialMethods = RegularPreview 755331"];
356 [label="new SmallDictionary<string, string> { } 755332"];
357 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 755333"];
358 [label="kind: SourceCodeKind.Regular 755334"];
359 [label="documentationMode: DocumentationMode.None 755335"];
360 [label="languageVersion: LanguageVersion.Preview 755336"];
361 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 755337"];
362 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 755338"];
363 [label="s_experimentalFeatures 755339"];
364 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 755340"];
365 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 755341"];
366 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 755342"];
367 [label="'testV7SwitchBinder' 755343"];
368 [label="'true' 755344"];
369 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 755345"];
370 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 755346"];
371 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 755347"];
372 [label="RegularWithoutRecursivePatterns = Regular7_3 755348"];
373 [label="RegularWithRecursivePatterns = Regular8 755349"];
374 [label="RegularWithoutPatternCombinators = Regular8 755350"];
375 [label="RegularWithPatternCombinators = RegularPreview 755351"];
376 [label="OutputKind.DynamicallyLinkedLibrary 755352"];
377 [label="OptimizationLevel.Release 755353"];
378 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 755354"];
379 [label="param CreateTestOptions(OutputKind outputKind) 755355"];
380 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 755356"];
381 [label="param CreateTestOptions(bool allowUnsafe = false) 755357"];
382 [label="outputKind 755358"];
383 [label="optimizationLevel: optimizationLevel 755359"];
384 [label="warningLevel: Diagnostic.MaxWarningLevel 755360"];
385 [label="allowUnsafe: allowUnsafe 755361"];
386 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 755362"];
387 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 755363"];
388 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 755364"];
389 [label="OutputKind.ConsoleApplication 755365"];
390 [label="OptimizationLevel.Release 755366"];
391 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 755367"];
392 [label="param CreateTestOptions(OutputKind outputKind) 755368"];
393 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 755369"];
394 [label="param CreateTestOptions(bool allowUnsafe = false) 755370"];
395 [label="outputKind 755371"];
396 [label="optimizationLevel: optimizationLevel 755372"];
397 [label="warningLevel: Diagnostic.MaxWarningLevel 755373"];
398 [label="allowUnsafe: allowUnsafe 755374"];
399 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 755375"];
400 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 755376"];
401 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 755377"];
402 [label="true 755378"];
403 [label="ReleaseDll.WithDebugPlusMode(true) 755379"];
404 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 755380"];
405 [label="true 755381"];
406 [label="ReleaseExe.WithDebugPlusMode(true) 755382"];
407 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 755383"];
408 [label="OutputKind.DynamicallyLinkedLibrary 755384"];
409 [label="OptimizationLevel.Debug 755385"];
410 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 755386"];
411 [label="param CreateTestOptions(OutputKind outputKind) 755387"];
412 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 755388"];
413 [label="param CreateTestOptions(bool allowUnsafe = false) 755389"];
414 [label="outputKind 755390"];
415 [label="optimizationLevel: optimizationLevel 755391"];
416 [label="warningLevel: Diagnostic.MaxWarningLevel 755392"];
417 [label="allowUnsafe: allowUnsafe 755393"];
418 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 755394"];
419 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 755395"];
420 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 755396"];
421 [label="OutputKind.ConsoleApplication 755397"];
422 [label="OptimizationLevel.Debug 755398"];
423 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 755399"];
424 [label="param CreateTestOptions(OutputKind outputKind) 755400"];
425 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 755401"];
426 [label="param CreateTestOptions(bool allowUnsafe = false) 755402"];
427 [label="outputKind 755403"];
428 [label="optimizationLevel: optimizationLevel 755404"];
429 [label="warningLevel: Diagnostic.MaxWarningLevel 755405"];
430 [label="allowUnsafe: allowUnsafe 755406"];
431 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 755407"];
432 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 755408"];
433 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 755409"];
434 [label="OutputKind.WindowsRuntimeMetadata 755410"];
435 [label="OptimizationLevel.Release 755411"];
436 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 755412"];
437 [label="param CreateTestOptions(OutputKind outputKind) 755413"];
438 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 755414"];
439 [label="param CreateTestOptions(bool allowUnsafe = false) 755415"];
440 [label="outputKind 755416"];
441 [label="optimizationLevel: optimizationLevel 755417"];
442 [label="warningLevel: Diagnostic.MaxWarningLevel 755418"];
443 [label="allowUnsafe: allowUnsafe 755419"];
444 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 755420"];
445 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 755421"];
446 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 755422"];
447 [label="OutputKind.WindowsRuntimeMetadata 755423"];
448 [label="OptimizationLevel.Debug 755424"];
449 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 755425"];
450 [label="param CreateTestOptions(OutputKind outputKind) 755426"];
451 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 755427"];
452 [label="param CreateTestOptions(bool allowUnsafe = false) 755428"];
453 [label="outputKind 755429"];
454 [label="optimizationLevel: optimizationLevel 755430"];
455 [label="warningLevel: Diagnostic.MaxWarningLevel 755431"];
456 [label="allowUnsafe: allowUnsafe 755432"];
457 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 755433"];
458 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 755434"];
459 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 755435"];
460 [label="OutputKind.NetModule 755436"];
461 [label="OptimizationLevel.Release 755437"];
462 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 755438"];
463 [label="param CreateTestOptions(OutputKind outputKind) 755439"];
464 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 755440"];
465 [label="param CreateTestOptions(bool allowUnsafe = false) 755441"];
466 [label="outputKind 755442"];
467 [label="optimizationLevel: optimizationLevel 755443"];
468 [label="warningLevel: Diagnostic.MaxWarningLevel 755444"];
469 [label="allowUnsafe: allowUnsafe 755445"];
470 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 755446"];
471 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 755447"];
472 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 755448"];
473 [label="OutputKind.NetModule 755449"];
474 [label="OptimizationLevel.Debug 755450"];
475 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 755451"];
476 [label="param CreateTestOptions(OutputKind outputKind) 755452"];
477 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 755453"];
478 [label="param CreateTestOptions(bool allowUnsafe = false) 755454"];
479 [label="outputKind 755455"];
480 [label="optimizationLevel: optimizationLevel 755456"];
481 [label="warningLevel: Diagnostic.MaxWarningLevel 755457"];
482 [label="allowUnsafe: allowUnsafe 755458"];
483 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 755459"];
484 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 755460"];
485 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 755461"];
486 [label="true 755462"];
487 [label="ReleaseDll.WithAllowUnsafe(true) 755463"];
488 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 755464"];
489 [label="true 755465"];
490 [label="ReleaseExe.WithAllowUnsafe(true) 755466"];
491 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 755467"];
492 [label="true 755468"];
493 [label="DebugDll.WithAllowUnsafe(true) 755469"];
494 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 755470"];
495 [label="true 755471"];
496 [label="DebugExe.WithAllowUnsafe(true) 755472"];
497 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 755473"];
498 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 755474"];
499 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 755475"];
500 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 755476"];
501 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 755477"];
502 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 755478"];
503 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 755479"];
504 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 755480"];
505 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 755481"];
506 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 755482"];
507 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 755483"];
508 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 755484"];
509 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 755485"];
510 [label="DebugInformationFormat.Pdb 755486"];
511 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 755487"];
512 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 755488"];
513 [label="options = TestOptions.Regular; 755489"];
514 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 755490"];
515 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 755491"];
516 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 755492"];
517 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 755493"];
518 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 755494"];
519 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 755495"];
520 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 755496"];
521 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 755497"];
522 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 755498"];
523 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 755499"];
524 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 755500"];
525 [label="param CheckSerializable(SyntaxTree tree) 755501"];
526 [label="var stream = new MemoryStream(); 755502"];
527 [label="var root = tree.GetRoot(); 755503"];
528 [label="var root = tree.GetRoot(); 755504"];
529 [label="root.SerializeTo(stream); 755505"];
530 [label="root.SerializeTo(stream); 755506"];
531 [label="root.SerializeTo(stream); 755507"];
532 [label="stream.Position = 0; 755508"];
533 [label="stream.Position 755509"];
534 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 755510"];
535 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 755511"];
536 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 755512"];
537 [label="return tree; 755513"];
538 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 755514"];
539 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 755515"];
540 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 755516"];
541 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 755517"];
542 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 755518"];
543 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 755519"];
544 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 755520"];
545 [label="hasTopLevelStatements 755521"];
546 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 755522"];
547 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 755523"];
548 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 755524"];
549 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 755525"];
550 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 755526"];
551 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 755527"];
552 [label="param ValidateIOperations(Func<Compilation> createCompilation) 755528"];
553 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 755529"];
554 [label="return; 755530"];
555 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 755531"];
556 [label="var compilation = createCompilationLambda(); 755532"];
557 [label="var compilation = createCompilationLambda(); 755533"];
558 [label="return Guid.NewGuid().ToString('D'); 755534"];
559 [label="var compilation = createCompilationLambda(); 755535"];
560 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 755536"];
561 [label="IsNullableEnabled(compilation) 755537"];
562 [label="param IsNullableEnabled(CSharpCompilation compilation) 755538"];
563 [label="var trees = compilation.SyntaxTrees; 755539"];
564 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 755540"];
565 [label="var options = (CSharpParseOptions)trees[0].Options; 755541"];
566 [label="var options = (CSharpParseOptions)trees[0].Options; 755542"];
567 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 755543"];
568 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 755544"];
569 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 755545"];
570 [label="return compilation; 755546"];
571 [label="CreateCompilation(source).VerifyDiagnostics() 755547"];
572 [label="param VerifyDiagnostics(this TCompilation c) 755548"];
573 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 755549"];
574 [label="var diagnostics = c.GetDiagnostics(); 755550"];
575 [label="var diagnostics = c.GetDiagnostics(); 755551"];
576 [label="diagnostics.Verify(expected); 755552"];
577 [label="diagnostics.Verify(expected); 755553"];
578 [label="diagnostics.Verify(expected) 755554"];
579 [label="param Verify(this ImmutableArray<Diagnostic> actual) 755555"];
580 [label="param Verify(params DiagnosticDescription[] expected) 755556"];
581 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 755557"];
582 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 755558"];
583 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 755559"];
584 [label="param Verify(this IEnumerable<Diagnostic> actual) 755560"];
585 [label="param Verify(params DiagnosticDescription[] expected) 755561"];
586 [label="Verify(actual, expected, errorCodeOnly: false); 755562"];
587 [label="Verify(actual, expected, errorCodeOnly: false); 755563"];
588 [label="Verify(actual, expected, errorCodeOnly: false); 755564"];
589 [label="Verify(actual, expected, errorCodeOnly: false) 755565"];
590 [label="param Verify(IEnumerable<Diagnostic> actual) 755566"];
591 [label="param Verify(DiagnosticDescription[] expected) 755567"];
592 [label="param Verify(bool errorCodeOnly) 755568"];
593 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 755569"];
594 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 755570"];
595 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 755571"];
596 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 755572"];
597 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 755573"];
598 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 755574"];
599 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 755575"];
600 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 755576"];
601 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 755577"];
602 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 755578"];
603 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 755579"];
604 [label="{ } 755580"];
605 [label="None = { } 755581"];
606 [label="null 755582"];
607 [label="Any = null 755583"];
608 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 755584"];
609 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 755585"];
610 [label="DiagnosticDescription.GetAssertText(expected, actual) 755586"];
611 [label="param GetAssertText(DiagnosticDescription[] expected) 755587"];
612 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 755588"];
613 [label="const int CSharp = 1; 755589"];
614 [label="const int VisualBasic = 2; 755590"];
615 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 755591"];
616 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 755592"];
617 [label="actual.Any() && actual.First() is CSDiagnostic 755593"];
618 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 755594"];
619 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 755595"];
620 [label="int indentDepth = (language == CSharp) ? 4 : 1; 755596"];
621 [label="(language == CSharp) 755597"];
622 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 755598"];
623 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 755599"];
624 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 755600"];
625 [label="IsSortedOrEmpty(expected) 755601"];
626 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 755602"];
627 [label="new LinePositionComparer() 755603"];
628 [label="param LinePositionComparer(this) 755604"];
629 [label="Instance = new LinePositionComparer() 755605"];
630 [label="var comparer = LinePositionComparer.Instance; 755606"];
631 [label="DiagnosticDescription last = null; 755607"];
632 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 755608"];
633 [label="return true; 755609"];
634 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 755610"];
635 [label="actual = Sort(actual); 755611"];
636 [label="Sort(actual) 755612"];
637 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 755613"];
638 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 755614"];
639 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 755615"];
640 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 755616"];
641 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 755617"];
642 [label="var assertText = new StringBuilder(); 755618"];
643 [label="assertText.AppendLine(); 755619"];
644 [label="int i; 755620"];
645 [label="assertText.AppendLine('Expected:'); 755621"];
646 [label="assertText.AppendLine('Expected:'); 755622"];
647 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 755623"];
648 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 755624"];
649 [label="GetCommaSeparatedLines(assertText, expectedText); 755625"];
650 [label="GetCommaSeparatedLines(assertText, expectedText); 755626"];
651 [label="GetCommaSeparatedLines(assertText, expectedText) 755627"];
652 [label="param GetCommaSeparatedLines(StringBuilder sb) 755628"];
653 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 755629"];
654 [label="int n = lines.Count; 755630"];
655 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 755631"];
656 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 755632"];
657 [label="GetCommaSeparatedLines(assertText, expectedText); 755633"];
658 [label="assertText.AppendLine('Actual:'); 755634"];
659 [label="assertText.AppendLine('Actual:'); 755635"];
660 [label="var actualText = ArrayBuilder<string>.GetInstance(); 755636"];
661 [label="var e = actual.GetEnumerator(); 755637"];
662 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 755638"];
663 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 755639"];
664 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 755640"];
665 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 755641"];
666 [label="assertText.AppendLine('Diff:'); 755642"];
667 [label="assertText.AppendLine('Diff:'); 755643"];
668 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 755644"];
669 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 755645"];
670 [label="new[] { '\\r', '\\n' } 755646"];
671 [label="'\\r' 755647"];
672 [label="'\\n' 755648"];
673 [label="new[] { '\\r', '\\n' } 755649"];
674 [label="new[] { '\\r', '\\n' } 755650"];
675 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 755651"];
676 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 755652"];
677 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 755653"];
678 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 755654"];
679 [label="param DiffReport(IEnumerable<T> expected) 755655"];
680 [label="param DiffReport(IEnumerable<T> actual) 755656"];
681 [label="param DiffReport(string separator) 755657"];
682 [label="param DiffReport(IEqualityComparer<T> comparer = null) 755658"];
683 [label="param DiffReport(Func<T, string> toString = null) 755659"];
684 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 755660"];
685 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 755661"];
686 [label="(comparer != null) 755662"];
687 [label="EqualityComparer<T>.Default 755663"];
688 [label="new LCS<T>(EqualityComparer<T>.Default) 755664"];
689 [label="param LCS(IEqualityComparer<T> comparer) 755665"];
690 [label="param LCS(this) 755666"];
691 [label="1 755667"];
692 [label="DeleteCost = 1 755668"];
693 [label="1 755669"];
694 [label="InsertCost = 1 755670"];
695 [label="2 755671"];
696 [label="UpdateCost = 2 755672"];
697 [label="param LongestCommonSubsequence(this) 755673"];
698 [label="_comparer 755674"];
699 [label="_comparer 755675"];
700 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 755676"];
701 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 755677"];
702 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 755678"];
703 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 755679"];
704 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 755680"];
705 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 755681"];
706 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 755682"];
707 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 755683"];
708 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 755684"];
709 [label="lcs.CalculateDiff(expectedList, actualList, toString) 755685"];
710 [label="param CalculateDiff(IList<T> sequenceA) 755686"];
711 [label="param CalculateDiff(IList<T> sequenceB) 755687"];
712 [label="param CalculateDiff(Func<T, string> toString) 755688"];
713 [label="param CalculateDiff(this) 755689"];
714 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 755690"];
715 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 755691"];
716 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 755692"];
717 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 755693"];
718 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 755694"];
719 [label="param GetEdits(TSequence sequenceA) 755695"];
720 [label="param GetEdits(int lengthA) 755696"];
721 [label="param GetEdits(TSequence sequenceB) 755697"];
722 [label="param GetEdits(int lengthB) 755698"];
723 [label="param GetEdits(this) 755699"];
724 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 755700"];
725 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 755701"];
726 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 755702"];
727 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 755703"];
728 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 755704"];
729 [label="param ComputeCostMatrix(TSequence sequenceA) 755705"];
730 [label="param ComputeCostMatrix(int lengthA) 755706"];
731 [label="param ComputeCostMatrix(TSequence sequenceB) 755707"];
732 [label="param ComputeCostMatrix(int lengthB) 755708"];
733 [label="param ComputeCostMatrix(this) 755709"];
734 [label="var la = lengthA + 1; 755710"];
735 [label="var la = lengthA + 1; 755711"];
736 [label="var lb = lengthB + 1; 755712"];
737 [label="var lb = lengthB + 1; 755713"];
738 [label="var d = new int[la, lb]; 755714"];
739 [label="d[0, 0] = 0; 755715"];
740 [label="d[0, 0] 755716"];
741 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 755717"];
742 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 755718"];
743 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 755719"];
744 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 755720"];
745 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 755721"];
746 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 755722"];
747 [label="return d; 755723"];
748 [label="int i = lengthA; 755724"];
749 [label="int j = lengthB; 755725"];
750 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 755726"];
751 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 755727"];
752 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 755728"];
753 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 755729"];
754 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 755730"];
755 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 755731"];
756 [label="param GetEdits(this) 755732"];
757 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 755733"];
758 [label="param CalculateDiff(this) 755734"];
759 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 755735"];
760 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 755736"];
761 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 755737"];
762 [label="actualText.Free(); 755738"];
763 [label="expectedText.Free(); 755739"];
764 [label="return assertText.ToString(); 755740"];
765 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 755741"];
766 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 755742"];
767 [label="diagnostics.Verify(expected); 755743"];
768 [label="VerifyAssemblyIds(c, diagnostics); 755744"];
769 [label="VerifyAssemblyIds(c, diagnostics); 755745"];
770 [label="VerifyAssemblyIds(c, diagnostics) 755746"];
771 [label="param VerifyAssemblyIds(TCompilation c) 755747"];
772 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 755748"];
773 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 755749"];
774 [label="VerifyAssemblyIds(c, diagnostics); 755750"];
775 [label="return c; 755751"];
2 -> 0;
2 -> 1;
4 -> 3;
6 -> 5;
7 -> 1;
9 -> 8;
11 -> 10;
13 -> 12;
15 -> 14;
17 -> 16;
19 -> 18;
21 -> 20;
23 -> 22;
25 -> 24;
27 -> 26;
29 -> 28;
31 -> 30;
33 -> 32;
35 -> 34;
37 -> 36;
39 -> 38;
41 -> 40;
43 -> 42;
45 -> 44;
46 -> 0;
47 -> 0;
48 -> 46;
48 -> 47;
48 -> 0;
49 -> 48;
50 -> 0;
51 -> 0;
52 -> 50;
52 -> 51;
52 -> 48;
53 -> 52;
54 -> 0;
55 -> 54;
56 -> 55;
56 -> 54;
57 -> 56;
59 -> 0;
60 -> 58;
60 -> 59;
61 -> 60;
62 -> 0;
63 -> 0;
64 -> 62;
64 -> 63;
64 -> 0;
65 -> 64;
66 -> 0;
67 -> 0;
68 -> 66;
68 -> 67;
68 -> 52;
69 -> 68;
70 -> 0;
71 -> 0;
72 -> 70;
72 -> 71;
72 -> 68;
73 -> 72;
74 -> 0;
75 -> 0;
76 -> 74;
76 -> 75;
76 -> 72;
77 -> 76;
78 -> 0;
79 -> 0;
80 -> 78;
80 -> 79;
80 -> 0;
81 -> 80;
82 -> 0;
83 -> 0;
84 -> 82;
84 -> 83;
84 -> 0;
85 -> 84;
86 -> 0;
87 -> 0;
88 -> 86;
88 -> 87;
88 -> 0;
89 -> 88;
90 -> 0;
91 -> 0;
92 -> 90;
92 -> 91;
92 -> 76;
93 -> 92;
94 -> 0;
95 -> 0;
96 -> 94;
96 -> 95;
96 -> 0;
97 -> 96;
99 -> 0;
100 -> 98;
100 -> 99;
101 -> 100;
102 -> 0;
103 -> 0;
104 -> 102;
104 -> 103;
104 -> 92;
105 -> 104;
106 -> 0;
107 -> 0;
108 -> 106;
108 -> 107;
108 -> 0;
109 -> 108;
110 -> 0;
111 -> 0;
112 -> 110;
112 -> 111;
112 -> 0;
113 -> 112;
114 -> 0;
115 -> 0;
116 -> 114;
116 -> 115;
116 -> 0;
117 -> 116;
118 -> 0;
119 -> 0;
120 -> 118;
120 -> 119;
120 -> 0;
121 -> 120;
122 -> 0;
123 -> 0;
124 -> 122;
124 -> 123;
124 -> 0;
125 -> 124;
126 -> 0;
127 -> 0;
128 -> 126;
128 -> 127;
128 -> 104;
129 -> 128;
130 -> 0;
131 -> 0;
132 -> 130;
132 -> 131;
132 -> 128;
133 -> 132;
134 -> 0;
135 -> 0;
136 -> 134;
136 -> 135;
136 -> 132;
137 -> 136;
138 -> 0;
139 -> 0;
140 -> 138;
140 -> 139;
140 -> 136;
141 -> 140;
142 -> 0;
143 -> 0;
144 -> 142;
144 -> 143;
144 -> 0;
145 -> 144;
146 -> 0;
147 -> 0;
148 -> 146;
148 -> 147;
148 -> 0;
149 -> 148;
150 -> 0;
151 -> 0;
152 -> 150;
152 -> 151;
152 -> 140;
153 -> 152;
154 -> 0;
155 -> 0;
156 -> 154;
156 -> 155;
156 -> 0;
157 -> 156;
158 -> 0;
159 -> 0;
160 -> 158;
160 -> 159;
160 -> 0;
161 -> 160;
162 -> 0;
163 -> 0;
164 -> 162;
164 -> 163;
164 -> 0;
165 -> 164;
166 -> 0;
167 -> 0;
168 -> 166;
168 -> 167;
168 -> 152;
169 -> 168;
170 -> 0;
171 -> 0;
172 -> 170;
172 -> 171;
172 -> 0;
173 -> 172;
174 -> 0;
175 -> 0;
176 -> 174;
176 -> 175;
176 -> 0;
177 -> 176;
179 -> 178;
181 -> 179;
181 -> 180;
182 -> 181;
184 -> 0;
184 -> 183;
185 -> 184;
185 -> 0;
186 -> 185;
188 -> 187;
190 -> 189;
192 -> 191;
194 -> 193;
195 -> 7;
196 -> 195;
197 -> 196;
198 -> 197;
198 -> 196;
199 -> 1;
199 -> 2;
199 -> 198;
200 -> 1;
201 -> 1;
202 -> 201;
202 -> 1;
203 -> 1;
204 -> 202;
204 -> 203;
205 -> 204;
205 -> 203;
206 -> 203;
207 -> 205;
207 -> 206;
208 -> 206;
209 -> 207;
209 -> 208;
209 -> 206;
210 -> 206;
210 -> 1;
211 -> 1;
212 -> 1;
213 -> 210;
213 -> 212;
214 -> 211;
214 -> 212;
215 -> 211;
215 -> 212;
216 -> 211;
216 -> 212;
217 -> 211;
217 -> 212;
218 -> 211;
218 -> 212;
219 -> 211;
219 -> 212;
220 -> 211;
220 -> 212;
221 -> 213;
221 -> 212;
222 -> 217;
222 -> 212;
223 -> 214;
223 -> 212;
224 -> 212;
225 -> 222;
225 -> 224;
226 -> 223;
226 -> 224;
227 -> 225;
227 -> 224;
228 -> 224;
229 -> 227;
229 -> 228;
230 -> 229;
230 -> 228;
231 -> 230;
232 -> 0;
232 -> 231;
233 -> 232;
234 -> 233;
235 -> 233;
236 -> 0;
236 -> 235;
237 -> 236;
237 -> 234;
237 -> 233;
238 -> 237;
238 -> 231;
239 -> 224;
240 -> 226;
240 -> 239;
240 -> 224;
241 -> 238;
241 -> 240;
242 -> 215;
242 -> 212;
243 -> 216;
243 -> 212;
244 -> 218;
244 -> 212;
245 -> 219;
245 -> 212;
246 -> 220;
246 -> 212;
247 -> 212;
248 -> 221;
248 -> 247;
249 -> 241;
249 -> 247;
250 -> 242;
250 -> 247;
251 -> 243;
251 -> 247;
252 -> 244;
252 -> 247;
253 -> 245;
253 -> 247;
254 -> 246;
254 -> 247;
255 -> 248;
255 -> 247;
256 -> 249;
256 -> 247;
257 -> 250;
257 -> 247;
258 -> 251;
258 -> 247;
259 -> 252;
259 -> 247;
260 -> 253;
260 -> 247;
261 -> 254;
261 -> 247;
262 -> 247;
263 -> 262;
263 -> 247;
264 -> 247;
265 -> 255;
265 -> 264;
266 -> 256;
266 -> 264;
267 -> 257;
267 -> 264;
268 -> 258;
268 -> 264;
269 -> 259;
269 -> 264;
270 -> 260;
270 -> 264;
271 -> 261;
271 -> 264;
272 -> 263;
272 -> 264;
273 -> 268;
273 -> 264;
274 -> 270;
274 -> 264;
275 -> 264;
276 -> 273;
276 -> 275;
277 -> 274;
277 -> 275;
278 -> 265;
278 -> 275;
279 -> 278;
279 -> 209;
279 -> 275;
280 -> 279;
281 -> 277;
281 -> 279;
282 -> 276;
282 -> 279;
283 -> 279;
284 -> 280;
284 -> 283;
285 -> 281;
285 -> 283;
286 -> 282;
286 -> 283;
287 -> 280;
287 -> 283;
288 -> 283;
289 -> 286;
289 -> 288;
289 -> 283;
290 -> 0;
291 -> 0;
293 -> 290;
293 -> 291;
293 -> 292;
294 -> 293;
295 -> 0;
296 -> 294;
296 -> 293;
296 -> 295;
297 -> 296;
298 -> 0;
299 -> 294;
299 -> 293;
299 -> 298;
300 -> 299;
301 -> 0;
302 -> 294;
302 -> 293;
302 -> 301;
303 -> 302;
304 -> 0;
305 -> 294;
305 -> 293;
305 -> 304;
306 -> 305;
307 -> 0;
308 -> 294;
308 -> 293;
308 -> 307;
309 -> 308;
310 -> 0;
311 -> 294;
311 -> 293;
311 -> 310;
312 -> 311;
313 -> 0;
314 -> 294;
314 -> 293;
314 -> 313;
315 -> 314;
316 -> 0;
317 -> 294;
317 -> 293;
317 -> 316;
318 -> 317;
319 -> 0;
320 -> 294;
320 -> 293;
320 -> 319;
321 -> 320;
322 -> 0;
323 -> 294;
323 -> 293;
323 -> 322;
324 -> 323;
325 -> 0;
326 -> 294;
326 -> 293;
326 -> 325;
327 -> 326;
328 -> 294;
331 -> 328;
331 -> 330;
332 -> 329;
332 -> 330;
333 -> 330;
334 -> 331;
334 -> 293;
334 -> 330;
335 -> 330;
336 -> 332;
336 -> 330;
337 -> 333;
337 -> 330;
338 -> 336;
338 -> 337;
338 -> 330;
339 -> 338;
339 -> 335;
339 -> 330;
340 -> 334;
340 -> 335;
340 -> 293;
340 -> 339;
340 -> 338;
340 -> 330;
341 -> 340;
342 -> 0;
343 -> 342;
345 -> 343;
345 -> 344;
346 -> 294;
346 -> 293;
346 -> 345;
347 -> 346;
348 -> 0;
349 -> 348;
350 -> 294;
350 -> 293;
350 -> 349;
351 -> 350;
352 -> 0;
353 -> 294;
353 -> 293;
353 -> 352;
354 -> 353;
355 -> 318;
357 -> 356;
358 -> 0;
359 -> 0;
360 -> 0;
362 -> 358;
362 -> 359;
362 -> 360;
362 -> 361;
363 -> 357;
364 -> 362;
364 -> 363;
364 -> 356;
365 -> 364;
369 -> 366;
369 -> 367;
369 -> 368;
370 -> 300;
370 -> 293;
370 -> 299;
370 -> 366;
370 -> 369;
371 -> 370;
372 -> 312;
373 -> 321;
374 -> 321;
375 -> 318;
376 -> 0;
377 -> 0;
379 -> 376;
379 -> 378;
380 -> 377;
380 -> 378;
381 -> 378;
382 -> 379;
382 -> 378;
383 -> 380;
383 -> 378;
384 -> 0;
384 -> 378;
385 -> 381;
385 -> 378;
386 -> 378;
387 -> 382;
387 -> 383;
387 -> 384;
387 -> 385;
387 -> 386;
387 -> 378;
388 -> 387;
389 -> 0;
390 -> 0;
392 -> 389;
392 -> 391;
393 -> 390;
393 -> 391;
394 -> 391;
395 -> 392;
395 -> 391;
396 -> 393;
396 -> 391;
397 -> 0;
397 -> 391;
398 -> 394;
398 -> 391;
399 -> 391;
400 -> 395;
400 -> 396;
400 -> 397;
400 -> 398;
400 -> 399;
400 -> 391;
401 -> 400;
403 -> 388;
403 -> 387;
403 -> 402;
404 -> 403;
406 -> 401;
406 -> 400;
406 -> 405;
407 -> 406;
408 -> 0;
409 -> 0;
411 -> 408;
411 -> 410;
412 -> 409;
412 -> 410;
413 -> 410;
414 -> 411;
414 -> 410;
415 -> 412;
415 -> 410;
416 -> 0;
416 -> 410;
417 -> 413;
417 -> 410;
418 -> 410;
419 -> 414;
419 -> 415;
419 -> 416;
419 -> 417;
419 -> 418;
419 -> 410;
420 -> 419;
421 -> 0;
422 -> 0;
424 -> 421;
424 -> 423;
425 -> 422;
425 -> 423;
426 -> 423;
427 -> 424;
427 -> 423;
428 -> 425;
428 -> 423;
429 -> 0;
429 -> 423;
430 -> 426;
430 -> 423;
431 -> 423;
432 -> 427;
432 -> 428;
432 -> 429;
432 -> 430;
432 -> 431;
432 -> 423;
433 -> 432;
434 -> 0;
435 -> 0;
437 -> 434;
437 -> 436;
438 -> 435;
438 -> 436;
439 -> 436;
440 -> 437;
440 -> 436;
441 -> 438;
441 -> 436;
442 -> 0;
442 -> 436;
443 -> 439;
443 -> 436;
444 -> 436;
445 -> 440;
445 -> 441;
445 -> 442;
445 -> 443;
445 -> 444;
445 -> 436;
446 -> 445;
447 -> 0;
448 -> 0;
450 -> 447;
450 -> 449;
451 -> 448;
451 -> 449;
452 -> 449;
453 -> 450;
453 -> 449;
454 -> 451;
454 -> 449;
455 -> 0;
455 -> 449;
456 -> 452;
456 -> 449;
457 -> 449;
458 -> 453;
458 -> 454;
458 -> 455;
458 -> 456;
458 -> 457;
458 -> 449;
459 -> 458;
460 -> 0;
461 -> 0;
463 -> 460;
463 -> 462;
464 -> 461;
464 -> 462;
465 -> 462;
466 -> 463;
466 -> 462;
467 -> 464;
467 -> 462;
468 -> 0;
468 -> 462;
469 -> 465;
469 -> 462;
470 -> 462;
471 -> 466;
471 -> 467;
471 -> 468;
471 -> 469;
471 -> 470;
471 -> 462;
472 -> 471;
473 -> 0;
474 -> 0;
476 -> 473;
476 -> 475;
477 -> 474;
477 -> 475;
478 -> 475;
479 -> 476;
479 -> 475;
480 -> 477;
480 -> 475;
481 -> 0;
481 -> 475;
482 -> 478;
482 -> 475;
483 -> 475;
484 -> 479;
484 -> 480;
484 -> 481;
484 -> 482;
484 -> 483;
484 -> 475;
485 -> 484;
487 -> 388;
487 -> 387;
487 -> 486;
488 -> 487;
490 -> 401;
490 -> 400;
490 -> 489;
491 -> 490;
493 -> 420;
493 -> 419;
493 -> 492;
494 -> 493;
496 -> 433;
496 -> 432;
496 -> 495;
497 -> 496;
498 -> 0;
499 -> 388;
499 -> 387;
499 -> 498;
499 -> 0;
500 -> 499;
501 -> 0;
502 -> 401;
502 -> 400;
502 -> 501;
502 -> 0;
503 -> 502;
504 -> 0;
505 -> 472;
505 -> 471;
505 -> 504;
505 -> 0;
506 -> 505;
507 -> 0;
508 -> 420;
508 -> 419;
508 -> 507;
508 -> 0;
509 -> 508;
510 -> 0;
511 -> 0;
511 -> 510;
512 -> 511;
513 -> 294;
513 -> 289;
514 -> 284;
514 -> 283;
515 -> 0;
515 -> 283;
516 -> 515;
516 -> 287;
516 -> 283;
517 -> 283;
518 -> 514;
518 -> 516;
518 -> 517;
518 -> 0;
518 -> 283;
519 -> 518;
519 -> 283;
520 -> 513;
520 -> 283;
521 -> 285;
521 -> 283;
522 -> 283;
523 -> 519;
523 -> 520;
523 -> 521;
523 -> 522;
523 -> 518;
523 -> 293;
523 -> 283;
524 -> 283;
525 -> 523;
525 -> 524;
526 -> 524;
527 -> 524;
528 -> 525;
528 -> 523;
528 -> 527;
528 -> 524;
529 -> 526;
529 -> 524;
530 -> 524;
531 -> 528;
531 -> 523;
531 -> 527;
531 -> 529;
531 -> 530;
531 -> 526;
531 -> 524;
532 -> 524;
533 -> 532;
533 -> 526;
533 -> 524;
534 -> 526;
534 -> 524;
535 -> 524;
536 -> 534;
536 -> 535;
536 -> 526;
536 -> 533;
536 -> 524;
537 -> 525;
537 -> 524;
538 -> 537;
538 -> 280;
538 -> 279;
539 -> 280;
539 -> 264;
540 -> 264;
541 -> 267;
541 -> 540;
541 -> 264;
542 -> 539;
542 -> 541;
543 -> 541;
544 -> 542;
544 -> 543;
544 -> 280;
544 -> 538;
544 -> 523;
544 -> 541;
545 -> 544;
545 -> 541;
546 -> 388;
546 -> 545;
547 -> 0;
547 -> 264;
548 -> 272;
548 -> 264;
549 -> 269;
549 -> 539;
549 -> 266;
549 -> 546;
549 -> 264;
550 -> 549;
550 -> 264;
551 -> 264;
552 -> 550;
552 -> 551;
553 -> 0;
553 -> 551;
554 -> 553;
555 -> 264;
556 -> 549;
556 -> 280;
556 -> 538;
556 -> 523;
556 -> 237;
556 -> 0;
556 -> 387;
556 -> 234;
556 -> 264;
557 -> 264;
558 -> 557;
559 -> 556;
559 -> 558;
559 -> 264;
560 -> 559;
560 -> 264;
561 -> 264;
562 -> 560;
562 -> 561;
563 -> 562;
563 -> 559;
563 -> 561;
564 -> 563;
564 -> 559;
564 -> 561;
565 -> 561;
566 -> 563;
566 -> 565;
566 -> 559;
566 -> 561;
567 -> 0;
567 -> 561;
568 -> 566;
568 -> 567;
568 -> 561;
569 -> 271;
569 -> 568;
569 -> 264;
570 -> 559;
570 -> 264;
571 -> 1;
572 -> 570;
572 -> 571;
573 -> 211;
573 -> 571;
574 -> 571;
575 -> 572;
575 -> 574;
575 -> 568;
575 -> 571;
576 -> 575;
576 -> 571;
577 -> 573;
577 -> 571;
578 -> 571;
579 -> 576;
579 -> 578;
580 -> 577;
580 -> 578;
581 -> 579;
581 -> 578;
582 -> 580;
582 -> 578;
583 -> 578;
584 -> 581;
584 -> 583;
585 -> 582;
585 -> 583;
586 -> 584;
586 -> 583;
587 -> 585;
587 -> 583;
588 -> 583;
589 -> 583;
590 -> 586;
590 -> 589;
591 -> 587;
591 -> 589;
592 -> 588;
592 -> 589;
593 -> 589;
594 -> 591;
594 -> 593;
594 -> 589;
595 -> 591;
595 -> 589;
596 -> 591;
596 -> 589;
597 -> 590;
597 -> 589;
598 -> 592;
598 -> 595;
598 -> 596;
598 -> 589;
599 -> 597;
599 -> 598;
599 -> 589;
600 -> 591;
600 -> 589;
601 -> 589;
602 -> 599;
602 -> 601;
602 -> 589;
603 -> 589;
605 -> 604;
607 -> 606;
608 -> 591;
608 -> 589;
609 -> 590;
609 -> 589;
610 -> 589;
611 -> 608;
611 -> 610;
612 -> 609;
612 -> 610;
613 -> 610;
614 -> 610;
615 -> 612;
615 -> 610;
616 -> 615;
616 -> 599;
616 -> 610;
617 -> 616;
617 -> 610;
618 -> 614;
618 -> 617;
619 -> 618;
619 -> 613;
619 -> 610;
620 -> 618;
620 -> 613;
620 -> 610;
621 -> 620;
621 -> 610;
622 -> 611;
622 -> 610;
623 -> 611;
623 -> 610;
624 -> 611;
624 -> 610;
625 -> 610;
626 -> 624;
626 -> 625;
628 -> 627;
629 -> 627;
630 -> 629;
630 -> 625;
631 -> 625;
632 -> 626;
632 -> 625;
633 -> 625;
634 -> 633;
634 -> 610;
635 -> 612;
635 -> 634;
636 -> 634;
637 -> 635;
637 -> 636;
638 -> 637;
638 -> 636;
639 -> 636;
640 -> 629;
640 -> 636;
641 -> 638;
641 -> 639;
641 -> 640;
641 -> 599;
641 -> 636;
642 -> 610;
643 -> 642;
643 -> 610;
644 -> 610;
645 -> 610;
646 -> 642;
646 -> 645;
646 -> 643;
646 -> 610;
647 -> 610;
648 -> 611;
648 -> 610;
649 -> 642;
649 -> 610;
650 -> 647;
650 -> 610;
651 -> 610;
652 -> 649;
652 -> 651;
653 -> 650;
653 -> 651;
654 -> 653;
654 -> 647;
654 -> 651;
655 -> 651;
656 -> 655;
656 -> 654;
656 -> 651;
657 -> 610;
658 -> 610;
659 -> 642;
659 -> 658;
659 -> 646;
659 -> 610;
660 -> 610;
661 -> 641;
661 -> 610;
662 -> 610;
663 -> 661;
663 -> 610;
664 -> 610;
665 -> 662;
665 -> 664;
665 -> 610;
666 -> 610;
667 -> 642;
667 -> 666;
667 -> 659;
667 -> 610;
668 -> 647;
668 -> 610;
669 -> 660;
669 -> 610;
673 -> 671;
673 -> 670;
674 -> 672;
674 -> 670;
675 -> 670;
676 -> 0;
676 -> 610;
677 -> 610;
678 -> 610;
679 -> 668;
679 -> 678;
680 -> 669;
680 -> 678;
681 -> 676;
681 -> 678;
682 -> 677;
682 -> 678;
683 -> 677;
683 -> 678;
684 -> 678;
685 -> 682;
685 -> 684;
685 -> 678;
686 -> 685;
686 -> 678;
687 -> 0;
689 -> 687;
689 -> 688;
690 -> 688;
692 -> 691;
694 -> 693;
696 -> 695;
697 -> 690;
698 -> 690;
698 -> 688;
699 -> 689;
699 -> 690;
699 -> 688;
700 -> 688;
701 -> 678;
702 -> 701;
702 -> 683;
702 -> 678;
703 -> 679;
703 -> 678;
704 -> 680;
704 -> 678;
705 -> 681;
705 -> 678;
706 -> 703;
706 -> 678;
707 -> 704;
707 -> 678;
708 -> 702;
708 -> 678;
709 -> 678;
710 -> 706;
710 -> 709;
711 -> 707;
711 -> 709;
712 -> 708;
712 -> 709;
713 -> 686;
713 -> 709;
714 -> 710;
714 -> 709;
715 -> 710;
715 -> 703;
715 -> 709;
716 -> 711;
716 -> 709;
717 -> 711;
717 -> 704;
717 -> 709;
718 -> 709;
719 -> 714;
719 -> 718;
720 -> 715;
720 -> 718;
721 -> 716;
721 -> 718;
722 -> 717;
722 -> 718;
723 -> 713;
723 -> 718;
724 -> 719;
724 -> 718;
725 -> 720;
725 -> 718;
726 -> 721;
726 -> 718;
727 -> 722;
727 -> 718;
728 -> 718;
729 -> 724;
729 -> 728;
730 -> 725;
730 -> 728;
731 -> 726;
731 -> 728;
732 -> 727;
732 -> 728;
733 -> 723;
733 -> 728;
734 -> 728;
735 -> 730;
735 -> 734;
735 -> 728;
736 -> 728;
737 -> 732;
737 -> 736;
737 -> 728;
738 -> 735;
738 -> 737;
738 -> 728;
739 -> 728;
740 -> 739;
740 -> 738;
740 -> 728;
741 -> 728;
742 -> 741;
742 -> 730;
742 -> 728;
743 -> 728;
744 -> 743;
744 -> 732;
744 -> 728;
745 -> 728;
746 -> 745;
746 -> 730;
746 -> 728;
747 -> 738;
747 -> 728;
748 -> 720;
748 -> 718;
749 -> 722;
749 -> 718;
750 -> 718;
751 -> 748;
751 -> 750;
751 -> 718;
752 -> 718;
753 -> 748;
753 -> 752;
753 -> 718;
754 -> 718;
755 -> 749;
755 -> 754;
755 -> 718;
756 -> 718;
757 -> 756;
757 -> 709;
758 -> 709;
759 -> 758;
759 -> 678;
760 -> 705;
760 -> 759;
760 -> 678;
761 -> 642;
761 -> 760;
761 -> 667;
761 -> 610;
762 -> 660;
762 -> 610;
763 -> 647;
763 -> 610;
764 -> 642;
764 -> 761;
764 -> 610;
765 -> 764;
765 -> 589;
766 -> 578;
767 -> 571;
768 -> 572;
768 -> 571;
769 -> 575;
769 -> 571;
770 -> 571;
771 -> 768;
771 -> 770;
772 -> 769;
772 -> 770;
773 -> 772;
773 -> 770;
774 -> 571;
775 -> 572;
775 -> 571;
}